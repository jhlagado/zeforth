;   DIGIT?      ( c base -- u t )
;               Convert a character to its numeric value. A flag indicates success.

hCOLON  6,'DIGIT?',DIGTQ
    DW      TOR,DOLIT,'0',SUBB
    DW      DOLIT,9,OVER,LESS
    DW      QBRAN,DGTQ1
    DW      DOLIT,7,SUBB
    DW      DUPP,DOLIT,10,LESS,ORR
DGTQ1:          
    DW      DUPP,RFROM,ULESS,EXIT

;   NUMBER?     ( a -- n T | a F )
;               Convert a number string to integer. Push a flag on tos.
hCOLON  7,'NUMBER?',NUMBQ
    DW      BASE,AT,TOR,DOLIT,0,OVER,COUNT
    DW      OVER,CAT,DOLIT,'$',EQUAL
    DW      QBRAN,NUMQ1
    DW      HEX,SWAP,DOLIT,1,PLUS
    DW      SWAP,DOLIT,1,SUBB
NUMQ1:          
    DW      OVER,CAT,DOLIT,'-',EQUAL,TOR
    DW      SWAP,RAT,SUBB,SWAP,RAT,PLUS,QDUP
    DW      QBRAN,NUMQ6
    DW      DOLIT,1,SUBB,TOR
NUMQ2:          
    DW      DUPP,TOR,CAT,BASE,AT,DIGTQ
    DW      QBRAN,NUMQ4
    DW      SWAP,BASE,AT,STAR,PLUS,RFROM
    DW      DOLIT,1,PLUS
    DW      DONXT,NUMQ2
    DW      RAT,SWAP,DROP
    DW      QBRAN,NUMQ3
    DW      NEGAT
NUMQ3:          
    DW      SWAP
    DW      BRAN,NUMQ5
NUMQ4:          
    DW      RFROM,RFROM,DDROP,DDROP,DOLIT,0
NUMQ5:          
    DW      DUPP
NUMQ6:          
    DW      RFROM,DDROP
                DW      RFROM,BASE,STORE,EXIT

;   parse       ( b u c -- b u delta ; <string> )
;               Scan string delimited by c. Return found string and its offset.

hCOLON  5,'parse',PARS
    DW      TEMP,STORE,OVER,TOR,DUPP
    DW      QBRAN,PARS8
    DW      DOLIT,1,SUBB,TEMP,AT,BLANK,EQUAL
    DW      QBRAN,PARS3
    DW      TOR
PARS1:          
    DW      BLANK,OVER,CAT          ;skip leading blanks ONLY
    DW      SUBB,ZLESS,INVER
    DW      QBRAN,PARS2
    DW      DOLIT,1,PLUS
    DW      DONXT,PARS1
    DW      RFROM,DROP,DOLIT,0,DUPP,EXIT
PARS2:          
    DW      RFROM
PARS3:          
    DW      OVER,SWAP
    DW      TOR
PARS4:          
    DW      TEMP,AT,OVER,CAT,SUBB   ;scan for delimiter
    DW      TEMP,AT,BLANK,EQUAL
    DW      QBRAN,PARS5
    DW      ZLESS
PARS5:          
    DW      QBRAN,PARS6
    DW      DOLIT,1,PLUS
    DW      DONXT,PARS4
    DW      DUPP,TOR
    DW      BRAN,PARS7
PARS6:          
    DW      RFROM,DROP,DUPP
    DW      DOLIT,1,PLUS,TOR
PARS7:          
    DW      OVER,SUBB
    DW      RFROM,RFROM,SUBB,EXIT
PARS8:          
    DW      OVER,RFROM,SUBB,EXIT

;   PARSE       ( c -- b u ; <string> )
;               Scan input stream and return counted string delimited by c.

mCOLON  5,'PARSE',PARSE
    DW      TOR,TIB,INN,AT,PLUS     ;current input buffer pointer
    DW      NTIB,AT,INN,AT,SUBB     ;remaining count
    DW      RFROM,PARS,INN,PSTOR,EXIT

;   (           ( -- )
;               Ignore following string up to next ) . A comment.

mCOLON  IMEDD+1,'(',PAREN
    DW      DOLIT,')',PARSE,DDROP,EXIT

;   \           ( -- )
;               Ignore following text till the end of line.
mCOLON  IMEDD+1, $5C, BKSLA
    DW      NTIB,AT,INN,STORE,EXIT
;   CHAR        ( -- c )
;               Parse next word and return its first character.

mCOLON  4,'CHAR',CHAR
    DW      BLANK,PARSE,DROP,CAT,EXIT

;   TOKEN       ( -- a ; <string> )
;               Parse a word from input stream and copy it to name dictionary.
hCOLON  5,'TOKEN',TOKEN
    DW      BLANK,PARSE,DOLIT,31,MIN
    DW      NP,AT,OVER,SUBB,CELLM
    DW      PACKS,EXIT

;   WORD        ( c -- a ; <string> )
;               Parse a word from input stream and copy it to code dictionary.
mCOLON  4,'WORD',WORDD
    DW      PARSE,HERE,PACKS,EXIT

;   NAME>       ( na -- ca )
;               Return a code address given a name address.
hCOLON  5,'NAME>',NAMET
    DW      CELLM,CELLM,AT,EXIT

;   SAME?       ( a a u -- a a f \ -0+ )
;               Compare u cells in two strings. Return 0 if identical.
hCOLON  5,'SAME?',SAMEQ
    DW      TOR
    DW      BRAN,SAME2
SAME1:          DW      OVER,RAT,CELLS,PLUS,AT
    DW      OVER,RAT,CELLS,PLUS,AT
    DW      SUBB,QDUP
    DW      QBRAN,SAME2
    DW      RFROM,DROP,EXIT         ;strings not equal
SAME2:          DW      DONXT,SAME1
    DW      DOLIT,0,EXIT            ;strings equal

;   find        ( a va -- ca na | a F )
;               Search a vocabulary for a string. Return ca and na if succeeded.
mCOLON  4,'find',FIND
    DW      SWAP,DUPP,CAT
    DW      DOLIT,CELLL,SLASH,TEMP,STORE
    DW      DUPP,AT,TOR,CELLP,SWAP
FIND1:          DW      AT,DUPP
    DW      QBRAN,FIND6
    DW      DUPP,AT,DOLIT,MASKK,ANDD,RAT,XORR
    DW      QBRAN,FIND2
    DW      CELLP,DOLIT,-1          ;true flag
    DW      BRAN,FIND3
FIND2:          DW      CELLP,TEMP,AT,SAMEQ
FIND3:          DW      BRAN,FIND4
FIND6:          DW      RFROM,DROP
    DW      SWAP,CELLM,SWAP,EXIT
FIND4:          DW      QBRAN,FIND5
    DW      CELLM,CELLM
    DW      BRAN,FIND1
FIND5:          DW      RFROM,DROP,SWAP,DROP
    DW      CELLM
    DW      DUPP,NAMET,SWAP,EXIT

;   NAME?       ( a -- ca na | a F )
;               Search all context vocabularies for a string.
hCOLON  5,'NAME?',NAMEQ
    DW      CNTXT,DUPP,DAT,XORR     ;?context=also
    DW      QBRAN,NAMQ1
    DW      CELLM                   ;no, start with context
NAMQ1:          DW      TOR
NAMQ2:          DW      RFROM,CELLP,DUPP,TOR    ;next in search order
    DW      AT,QDUP
    DW      QBRAN,NAMQ3
    DW      FIND,QDUP               ;search vocabulary
    DW      QBRAN,NAMQ2
    DW      RFROM,DROP,EXIT         ;found name
NAMQ3:          DW      RFROM,DROP              ;name not found
    DW      DOLIT,0,EXIT            ;false flag

;   CATCH       ( ca -- 0 | err# )
;               Execute word at ca and set up an error frame for it.

mCOLON  5,'CATCH',CATCH
    DW      SPAT,TOR,HANDL,AT,TOR   ;save error frame
    DW      RPAT,HANDL,STORE,EXECU  ;execute
    DW      RFROM,HANDL,STORE       ;reSTORE error frame
    DW      RFROM,DROP,DOLIT,0,EXIT ;no error

;   THROW       ( err# -- err# )
;               Reset system to current local error frame an update error flag.
mCOLON  5,'THROW',THROW
    DW      HANDL,AT,RPSTO          ;reSTORE return stack
    DW      RFROM,HANDL,STORE       ;reSTORE handler frame
    DW      RFROM,SWAP,TOR,SPSTO    ;reSTORE data stack
    DW      DROP,RFROM,EXIT

;   NULL$       ( -- a )
;               Return address of a null string with zero count.

hCOLON  5,'NULL$',NULLS
    DW      DOVAR                   ;emulate CREATE
    DW      0
    DB      99,111,121,111,116,101
    .ALIGN 2

;   ABORT       ( -- )
;               Reset data stack and jump to QUIT.

mCOLON  5,'ABORT',ABORT
    DW      NULLS,THROW

;   abort"      ( f -- )
;               Run time routine of ABORT" . Abort with a message.

hCOLON  COMPO+6,'abort|',ABORQ
    DW      QBRAN,ABOR1             ;text flag
    DW      DOSTR,THROW             ;pass error string
ABOR1:          
    DW      DOSTR,DROP,EXIT         ;drop error

;   $INTERPRET  ( a -- )
;               Interpret a word. If failed, try to convert it to an integer.

hCOLON  10,'$INTERPRET',INTER
    DW      NAMEQ,QDUP              ;?defined
    DW      QBRAN,INTE1
    DW      AT,DOLIT,COMPO,ANDD     ;?compile only lexicon bits
    mDSTR   ABORQ,' compile only'
    DW      EXECU,EXIT              ;execute defined word
INTE1:          
    DW      TNUMB,ATEXE             ;convert a number
    DW      QBRAN,INTE2
    DW      EXIT
INTE2:          
    DW      THROW                   ;error

;   [           ( -- )
;               Start the text interpreter.

mCOLON  IMEDD+1,'[',LBRAC
    DW      DOLIT,INTER,TEVAL,STORE,EXIT

;   .OK         ( -- )
;               Display 'ok' only while interpreting.

mCOLON  3,'.OK',DOTOK
    DW      DOLIT,INTER,TEVAL,AT,EQUAL
    DW      QBRAN,DOTO1
    mDSTR      DOTQP,' ok'
DOTO1:          DW      CR,EXIT

;   ?STACK      ( -- )
;               Abort if the data stack underflows.

hCOLON  6,'?STACK',QSTAC
    DW      DEPTH,ZLESS             ;check only for underflow
    mDSTR      ABORQ,' underflow'
    DW      EXIT

;   EVAL        ( -- )
;               Interpret the input stream.

mCOLON  4,'EVAL',EVAL
EVAL1:          
    DW      TOKEN,DUPP,CAT          ;?input stream empty
    DW      QBRAN,EVAL2
    DW      TEVAL,ATEXE,QSTAC       ;evaluate input, check stack
    DW      BRAN,EVAL1
EVAL2:          
    DW      DROP,TPROM,ATEXE,EXIT   ;prompt


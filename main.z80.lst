0000                          .ENGINE   mycomputer   
0000                TESTMODE:   EQU   0   
0000                MEM_SIZE:   EQU   $10000   ; MEM is 64K
0000                ROM_SIZE:   EQU   $2000   ; ROM is 8K
0000                RAM_SIZE:   EQU   MEM_SIZE - ROM_SIZE   ; RAM is 64K - 8K
0000                START_ROM:   EQU   BM   ; inclusive
0000                END_ROM:   EQU   BM + ROM_SIZE   ; exclusive
0000                START_RAM:   EQU   BM + ROM_SIZE   ; inclusive
0000                END_RAM:   EQU   START_RAM + RAM_SIZE   ; exclusive
0000                BM:       EQU   0   ; bottom of ROM memory
0000                EM:       EQU   BM + MEM_SIZE   
0000                COMPO:    EQU   $20   ;lexicon compile only bit
0000                IMEDD:    EQU   $40   ;lexicon immediate bit
0000                MASKK:    EQU   $1F   ;lexicon bit mask
0000                CHARR:    EQU   1   ;byte size of a character
0000                CELLL:    EQU   2   
0000                BASEE:    EQU   10   ;BASE
0000                VOCSS:    EQU   8   ;depth of vocabulary stack
0000                MAXCHAR:   EQU   0FFh   ;Extended character set					                    ;  Use 07Fh for ASCII only
0000                MAXSIGNED:   EQU   07FFFh   ;max value of signed integer
0000                MAXUNSIGNED:   EQU   0FFFFh   ;max value of unsigned integer
0000                MAXNEGATIVE:   EQU   8000h   ;max value of negative integer
0000                BKSPP:    EQU   8   ;backspace
0000                LFF:      EQU   $0A   ;line feed
0000                CRR:      EQU   $0D   ;carriage return
0000                SPACEE:   EQU   $20   
0000                TIC:      EQU   $27   ;tick
0000                MINUSS:   EQU   $2D   
0000                UNDERSC:   EQU   $5F   
0000                CALLL:    EQU   $CD00   ; NOP followed by CALL opcodes
0000                US:       EQU   END_DEFAULTS - DEFAULTS   ;user area size
0000                RTS:      EQU   $100 * CELLL   ;return stack/TIB size
0000                DTS:      EQU   $100 * CELLL   ;data stack size
0000                RET_STACK_SIZE:   EQU   $100   
0000                DATA_STACK_SIZE:   EQU   $100   
0000                INT_ADDR:   EQU   $0038   
0000                SER_BUFSIZE:   EQU   $3F   
0000                SER_FULLSIZE:   EQU   $30   
0000                SER_EMPTYSIZE:   EQU   5   
0000                RTS_HIGH:   EQU   $D6   
0000                RTS_LOW:   EQU   $96   
0000                TRUEE:    EQU   -1   
0000                FALSEE:   EQU   0   
0000                             ; Initialize assembly variables
0000                VVCODE:   .SET   0   
0000                VVNAME:   .SET   END_ROM   
0000                VVLINK:   .SET   0   ;force a null link
0000                VVUSER:   .SET   0   ;first user variable offset
0000                .macro MCODE,aaLEX,aaNAME,aaLABEL
0000                             ; 
0000                 .align 2                                         ;;force to cell boundary
0000                aaLABEL:                                              ;;assembly label
0000                 vvCODE .set $
0000                 vvLEN  .set (aaLEX & 01FH) / CELLL              ;;string cell count, round down
0000                 ORG vvNAME - ((vvLEN + 3) * CELLL)                                     ; ? needed
0000                 vvNAME .set $
0000                 DW vvCODE, vvLINK                               ;;token pointer and link
0000                 vvLINK .set $                                   ;;link points to a name string
0000                 DB aaLEX, aaNAME                                    ;;name string
0000                 ORG vvCODE                                      ;;restore code pointer
0000                .endm
0000                 
0000                .macro MCOLON,aaLEX,aaNAME,aaLABEL
0000                             ; 
0000                 mCODE aaLEX, aaNAME, aaLABEL
0000                 nop
0000                 CALL doLIST
0000                .endm
0000                 
0000                .macro MUSER,aaLEX,aaNAME,aaLABEL
0000                             ; 
0000                	mCODE aaLEX, aaNAME, aaLABEL
0000                 nop
0000                 CALL doLIST
0000                 DW DoUSE,vvUSER
0000                 vvUSER .set vvUSER + CELLL
0000                .endm
0000                 
0000                             ; .align 2
0000                .macro MDSTR,aaFUNC,aaSTR
0000                             ; 
0000                 DW aaFUNC                       ;;function
0000                 vvLEN .set $                    ;;save address of count byte
0000                 DB 0,aaSTR                      ;;count byte and string
0000                 vvCODE .set $                   ;;save code pointer
0000                ORG vvLEN                           ;;point to count byte
0000                 DB vvCODE - vvLEN - 1           ;;set count
0000                ORG vvCODE                          ;;restore code pointer
0000                .endm
0000                 
0000                .macro HCODE,aaLEX,aaNAME,aaLABEL
0000                             ; 
0000                 .align 2                                         ;;force to cell boundary
0000                aaLABEL:                                              ;;assembly label
0000                .endm
0000                 
0000                .macro HCOLON,aaLEX,aaNAME,aaLABEL
0000                             ; 
0000                 hCODE aaLEX, aaNAME, aaLABEL
0000                 nop
0000                 CALL doLIST
0000                .endm
0000                 
0000                .macro HUSER,aaLEX,aaNAME,aaLABEL
0000                             ; 
0000                	hCODE aaLEX, aaNAME, aaLABEL
0000                 nop
0000                 CALL doLIST
0000                 DW DoUSE,vvUSER
0000                 vvUSER .set vvUSER + CELLL
0000                .endm
0000                 
0000                             ; 	LD	E,(HL)	                    ; 7t
0000                             ; 	INC	HL	                        ; 6t
0000                             ; 	LD	D,(HL)	                    ; 7t
0000                             ; 	INC	HL	                        ; 6t
0000                             ; 	EX	DE,HL	                    ; 4t
0000                             ; 	JP	(HL)	                    ; 4t
0000                .macro MNEXTHL,
0000                             ; 
0000                 JP (IY)
0000                .endm
0000                 
0000                .macro MNEXT,
0000                             ; 
0000                	EX	DE,HL	                    ; 4t
0000                 mNEXTHL                         ; 34t
0000                .endm
0000                 
0000                          .ORG   START_ROM   
0000                RESET:       
0000   C3 72 00               JP   INIT   ; C3 veclo vechi
0038                          .ORG   INT_ADDR   ; RST 38 - INTERRUPT VECTOR [ for IM 1 ]
0038   F5           SERIALINT:   PUSH   AF   
0039   E5                     PUSH   HL   
003A   DB 80                  IN   A,($80)   
003C   E6 01                  AND   $01   ; Check if interupt due to read buffer full
003E   28 2D                  JR   Z,rts0   ; if not, ignore
0040   DB 81                  IN   A,($81)   
0042   F5                     PUSH   AF   
0043   3A 3C 24               LD   A,(serBufUsed)   
0046   FE 3F                  CP   SER_BUFSIZE   ; If full then ignore
0048   20 03                  JR   NZ,notFull   
004A   F1                     POP   AF   
004B   18 20                  JR   rts0   
004D   2A 38 24     NOTFULL:   LD   HL,(serInPtr)   
0050   23                     INC   HL   
0051   7D                     LD   A,L   ; Only need to check low byte becasuse buffer<256 bytes
0052   FE 7D                  CP   (serBuf+SER_BUFSIZE) & $FF   
0054   20 03                  JR   NZ,notWrap   
0056   21 3E 24               LD   HL,serBuf   
0059   22 38 24     NOTWRAP:   LD   (serInPtr),HL   
005C   F1                     POP   AF   
005D   77                     LD   (HL),A   
005E   3A 3C 24               LD   A,(serBufUsed)   
0061   3C                     INC   A   
0062   32 3C 24               LD   (serBufUsed),A   
0065   FE 30                  CP   SER_FULLSIZE   
0067   38 04                  JR   C,rts0   
0069   3E D6                  LD   A,RTS_HIGH   
006B   D3 80                  OUT   ($80),A   
006D   E1           RTS0:     POP   HL   
006E   F1                     POP   AF   
006F   FB                     EI      
0070   ED 4D                  RETI      
0072                INIT:        
0072   21 00 22               LD   HL,SPP   ; Setup Forth data stack
0075   F9                     LD   SP,HL   ; also used as return stack by interrupts etc
0076   21 FB 00               LD   HL,DEFAULTS   ; initialize user variables with defaults
0079   11 00 24               LD   DE,UPP   
007C   01 3A 00               LD   BC,US   
007F   ED B0                  LDIR      
0081   DD 21 00 24            LD   IX,RPP   ; set up Forth return stack
0085   FD 21 B8 0D            LD   IY,NEXT_STEP   
0089   01 FF FF               LD   BC,-1   ; empty stack marker
008C   11 01 00               LD   DE,RESET + 1   ; contains reset vector
008F   C3 BE 0D               JP   COLD   
0092                          IF   TESTMODE   
                              JP   TESTS_START   
0092                          ELSE      
0092   21 A6 0F               LD   HL,GREETING   
0095   CD F1 00               CALL   PRINTSZ   
0098                LOOP:        
0098   CD B5 00               CALL   RXA   
009B   CD E0 00               CALL   TXA   
009E   C3 98 00               JP   LOOP   
00A1                          ENDIF      
00A1                             ; Modified from code by Grant Searle
00A1                             ; Minimum 6850 ACIA interrupt driven serial I/O
00A1                INIT_IO:      
00A1   F3                     DI      ; Disable interrupts
00A2   21 3E 24               LD   HL,serBuf   
00A5   22 38 24               LD   (serInPtr),HL   
00A8   22 3A 24               LD   (serRdPtr),HL   
00AB   AF                     XOR   A   
00AC   32 3C 24               LD   (serBufUsed),A   
00AF   3E 96                  LD   A,RTS_LOW   
00B1   D3 80                  OUT   ($80),A   ; Initialise ACIA
00B3   FB                     EI      
00B4   C9                     RET      
00B5                RXA:         
00B5                WAITFORCHAR:      
00B5   3A 3C 24               LD   A,(serBufUsed)   
00B8   FE 00                  CP   $00   
00BA   28 F9                  JR   Z,waitForChar   
00BC   E5                     PUSH   HL   
00BD   2A 3A 24               LD   HL,(serRdPtr)   
00C0   23                     INC   HL   
00C1   7D                     LD   A,L   ; Only need to check low byte becasuse buffer<256 bytes
00C2   FE 7D                  CP   (serBuf+SER_BUFSIZE) & $FF   
00C4   20 03                  JR   NZ,notRdWrap   
00C6   21 3E 24               LD   HL,serBuf   
00C9                NOTRDWRAP:      
00C9   F3                     DI      
00CA   22 3A 24               LD   (serRdPtr),HL   
00CD   3A 3C 24               LD   A,(serBufUsed)   
00D0   3D                     DEC   A   
00D1   32 3C 24               LD   (serBufUsed),A   
00D4   FE 05                  CP   SER_EMPTYSIZE   
00D6   30 04                  JR   NC,rts1   
00D8   3E 96                  LD   A,RTS_LOW   
00DA   D3 80                  OUT   ($80),A   
00DC                RTS1:        
00DC   7E                     LD   A,(HL)   
00DD   FB                     EI      
00DE   E1                     POP   HL   
00DF   C9                     RET      ; Char ready in A
00E0                TXA:         
00E0   F5                     PUSH   AF   ; Store character
00E1                CONOUT1:      
00E1   DB 80                  IN   A,($80)   ; Status byte
00E3   CB 4F                  BIT   1,A   ; Set Zero flag if still transmitting character
00E5   28 FA                  JR   Z,conout1   ; Loop until flag signals ready
00E7   F1                     POP   AF   ; Retrieve character
00E8   D3 81                  OUT   ($81),A   ; Output the character
00EA   C9                     RET      
00EB                CKINCHAR:      
00EB   3A 3C 24               LD   A,(serBufUsed)   
00EE   FE 00                  CP   $0   
00F0   C9                     RET      
00F1                PRINTSZ:      
00F1   7E                     LD   A,(HL)   ; Get character
00F2   B7                     OR   A   ; Is it $00 ?
00F3   C8                     RET   Z   ; Then RETurn on terminator
00F4   CD E0 00               CALL   TXA   ; Print it
00F7   23                     INC   HL   ; Next Character
00F8   18 F7                  JR   PRINTSZ   ; Continue until $00
00FA   C9                     RET      
00FB                             ; .align 2
00FB                DEFAULTS:      
00FB   00 22        DEFSP0:   DW   SPP   ; SP0
00FD   00 24        DEFRP0:   DW   RPP   ; RP0
00FF   86 0B        DEFQKEY:   DW   QRX   ; '?KEY
0101   9E 0B        DEFTEMIT:   DW   TXSTO   ; 'EMIT
0103   00 00        DEFTEXPECT:   DW   0   ; 'EXPECT
0105   00 00        DEFTTAP:   DW   0   ; 'TAP
0107   9E 0B        DEFTECHO:   DW   TXSTO   ; 'ECHO
0109   00 00        DEFTPROMPT:   DW   0   ; 'PROMPT
010B   00 00        DEFBASE:   DW   0   ; BASE
010D   00 00        DEFTMP:   DW   0   ; tmp
010F   00 00        DEFSPAN:   DW   0   ; SPAN
0111   00 00        DEFPIN:   DW   0   ; >IN
0113   00 00        DEFNTIB:   DW   0   ; #TIB
0115   00 22        DEFTIB:   DW   TIBB   ; TIB
0117   00 00        DEFCSP:   DW   0   ; CSP
0119   00 00        DEFTEVAL:   DW   0   ; 'EVAL
011B   00 00        DEFTNUM:   DW   0   ; 'NUMBER
011D   00 00        DEFHLD:   DW   0   ; HLD
011F   00 00        DEFHANDLER:   DW   0   ; HANDLER
0121   00 00        DEFCONTEXT:   DW   0   ; CONTEXT pointer
0123   00 00        DEFVOCABS:   DW   0   ; vocabulary stack    ???
0125   00 00        DEFCURRENT:   DW   0   ; CURRENT pointer
0127   00 00        DEFVOCABLP:   DW   0   ; vocabulary link pointer ???
0129   7D 24        DEFCP:    DW   CPP   ; CP  for runing phase on RAM
012B   FE FF        DEFNP:    DW   NPP   ; NP  for runing phase on RAM
012D   00 00        DEFLAST:   DW   0   ; LAST
012F   00 00        DEFFORTH:   DW   0   ; FORTH   \ mullti-user ???
0131   00 00        DEFVOCABL:   DW   0   ; vocabulary link       ???
0133   00 00        DEFCOLD:   DW   0   ; "COLD"
0135                END_DEFAULTS:      
0135                VVCODE:   .SET   $   
0135                             ;   0<          ( n -- t )
0135                             ;               Return true if n is negative.
0135                          ;*Macro unroll: mCODE	2,'0<', ZLESS
0135                          ALIGN   2   
0136                ZLESS:       
0136                VVCODE:   .SET   $   
0136                VVLEN:    .SET   (2 & 01FH) / CELLL   
1FF8                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FF8                VVNAME:   .SET   $   
1FF8   36 01 00 00            DW   vvCODE,vvLINK   
1FFC                VVLINK:   .SET   $   
1FFC   02 30 3C               DB   2,"0<"   
0136                          .ORG   vvCODE   
0136   CB 20                  SLA   B   ; sign bit -> cy flag
0138   9F                     SBC   A,A   ; propagate cy through A
0139   47                     LD   B,A   ; put 0000 or FFFF in TOS
013A   4F                     LD   C,A   
013B                          ;*Macro unroll: 	mNEXT
013B   EB                     EX   DE,HL   
013C                          ;*Macro unroll:  mNEXTHL                         ; 34t
013C   FD E9                  JP   (IY)   ; 34t
013E                             ;   AND         ( w w -- w )
013E                             ;               Bitwise AND.
013E                          ;*Macro unroll: mCODE	3, 'AND', ANDD
013E                          ALIGN   2   
013E                ANDD:        
013E                VVCODE:   .SET   $   
013E                VVLEN:    .SET   (3 & 01FH) / CELLL   
1FF0                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FF0                VVNAME:   .SET   $   
1FF0   3E 01 FC 1F            DW   vvCODE,vvLINK   
1FF4                VVLINK:   .SET   $   
1FF4   03 41 4E 44            DB   3,"AND"   
013E                          .ORG   vvCODE   
013E   E1                     POP   HL   
013F   78                     LD   A,B   
0140   A4                     AND   H   
0141   47                     LD   B,A   
0142   79                     LD   A,C   
0143   A5                     AND   L   
0144   4F                     LD   C,A   
0145                          ;*Macro unroll: 	mNEXT
0145   EB                     EX   DE,HL   
0146                          ;*Macro unroll:  mNEXTHL                         ; 34t
0146   FD E9                  JP   (IY)   ; 34t
0148                             ;   OR          ( w w -- w )
0148                             ;               Bitwise inclusive OR.
0148                          ;*Macro unroll: mCODE	2,'OR', ORR
0148                          ALIGN   2   
0148                ORR:         
0148                VVCODE:   .SET   $   
0148                VVLEN:    .SET   (2 & 01FH) / CELLL   
1FE8                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FE8                VVNAME:   .SET   $   
1FE8   48 01 F4 1F            DW   vvCODE,vvLINK   
1FEC                VVLINK:   .SET   $   
1FEC   02 4F 52               DB   2,"OR"   
0148                          .ORG   vvCODE   
0148   E1                     POP   HL   
0149   78                     LD   A,B   
014A   B4                     OR   H   
014B   47                     LD   B,A   
014C   79                     LD   A,C   
014D   B5                     OR   L   
014E   4F                     LD   C,A   
014F                          ;*Macro unroll: 	mNEXT
014F   EB                     EX   DE,HL   
0150                          ;*Macro unroll:  mNEXTHL                         ; 34t
0150   FD E9                  JP   (IY)   ; 34t
0152                             ;   XOR         ( w w -- w )
0152                             ;               Bitwise exclusive
0152                          ;*Macro unroll: mCODE	3, 'XOR', XORR
0152                          ALIGN   2   
0152                XORR:        
0152                VVCODE:   .SET   $   
0152                VVLEN:    .SET   (3 & 01FH) / CELLL   
1FE0                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FE0                VVNAME:   .SET   $   
1FE0   52 01 EC 1F            DW   vvCODE,vvLINK   
1FE4                VVLINK:   .SET   $   
1FE4   03 58 4F 52            DB   3,"XOR"   
0152                          .ORG   vvCODE   
0152   E1                     POP   HL   
0153   78                     LD   A,B   
0154   AC                     XOR   H   
0155   47                     LD   B,A   
0156   79                     LD   A,C   
0157   AD                     XOR   L   
0158   4F                     LD   C,A   
0159                          ;*Macro unroll: 	mNEXT
0159   EB                     EX   DE,HL   
015A                          ;*Macro unroll:  mNEXTHL                         ; 34t
015A   FD E9                  JP   (IY)   ; 34t
015C                             ;   +           ( w w -- sum )
015C                             ;               Add top two items.
015C                          ;*Macro unroll: mCOLON	1,'+', PLUS
015C                          ;*Macro unroll:  mCODE 1, "+", PLUS
015C                          ALIGN   2   
015C                PLUS:        
015C                VVCODE:   .SET   $   
015C                VVLEN:    .SET   (1 & 01FH) / CELLL   
1FDA                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FDA                VVNAME:   .SET   $   
1FDA   5C 01 E4 1F            DW   vvCODE,vvLINK   
1FDE                VVLINK:   .SET   $   
1FDE   01 2B                  DB   1,"+"   
015C                          .ORG   vvCODE   
015C   00                     NOP      
015D   CD E0 05               CALL   doLIST   
0160   4A 02 FC 0F 16 06      DW   UMPlus,DROP,EXIT   
0166                             ;   NOT         ( w -- w )
0166                             ;               One's complement of tos.
0166                          ;*Macro unroll: mCOLON  3, 'NOT', INVER
0166                          ;*Macro unroll:  mCODE 3, "NOT", INVER
0166                          ALIGN   2   
0166                INVER:       
0166                VVCODE:   .SET   $   
0166                VVLEN:    .SET   (3 & 01FH) / CELLL   
1FD2                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FD2                VVNAME:   .SET   $   
1FD2   66 01 DE 1F            DW   vvCODE,vvLINK   
1FD6                VVLINK:   .SET   $   
1FD6   03 4E 4F 54            DB   3,"NOT"   
0166                          .ORG   vvCODE   
0166   00                     NOP      
0167   CD E0 05               CALL   doLIST   
016A   EE 05 FF FF 52 01 16 06 DW   DoLIT,-1,XORR,EXIT   
0172                             ;   NEGAT      ( n -- -n )
0172                             ;               Two's complement of tos.
0172                          ;*Macro unroll: mCOLON	6,'NEGATE',NEGAT
0172                          ;*Macro unroll:  mCODE 6, "NEGATE", NEGAT
0172                          ALIGN   2   
0172                NEGAT:       
0172                VVCODE:   .SET   $   
0172                VVLEN:    .SET   (6 & 01FH) / CELLL   
1FC6                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FC6                VVNAME:   .SET   $   
1FC6   72 01 D6 1F            DW   vvCODE,vvLINK   
1FCA                VVLINK:   .SET   $   
1FCA   06 4E 45 47 41 54 45   DB   6,"NEGATE"   
0172                          .ORG   vvCODE   
0172   00                     NOP      
0173   CD E0 05               CALL   doLIST   
0176   66 01 7C 01 16 06      DW   INVER,OnePlus,EXIT   
017C                             ;   1+		( n1|u1 -- n2|u2 )		
017C                             ;		Increase top of the stack item by 1.
017C                          ;*Macro unroll: mCOLON	2,'1+',OnePlus
017C                          ;*Macro unroll:  mCODE 2, "1+", OnePlus
017C                          ALIGN   2   
017C                ONEPLUS:      
017C                VVCODE:   .SET   $   
017C                VVLEN:    .SET   (2 & 01FH) / CELLL   
1FBE                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FBE                VVNAME:   .SET   $   
1FBE   7C 01 CA 1F            DW   vvCODE,vvLINK   
1FC2                VVLINK:   .SET   $   
1FC2   02 31 2B               DB   2,"1+"   
017C                          .ORG   vvCODE   
017C   00                     NOP      
017D   CD E0 05               CALL   doLIST   
0180   EE 05 01 00 5C 01 16 06 DW   DoLIT,1,Plus,EXIT   
0188                             ;   DNEGATE     ( d -- -d )
0188                             ;               Two's complement of top double.
0188                          ;*Macro unroll: mCOLON	7,'DNEGATE',DNEGA
0188                          ;*Macro unroll:  mCODE 7, "DNEGATE", DNEGA
0188                          ALIGN   2   
0188                DNEGA:       
0188                VVCODE:   .SET   $   
0188                VVLEN:    .SET   (7 & 01FH) / CELLL   
1FB2                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FB2                VVNAME:   .SET   $   
1FB2   88 01 C2 1F            DW   vvCODE,vvLINK   
1FB6                VVLINK:   .SET   $   
1FB6   07 44 4E 45 47 41 54 45 DB   7,"DNEGATE"   
0188                          .ORG   vvCODE   
0188   00                     NOP      
0189   CD E0 05               CALL   doLIST   
018C   66 01 DC 0F 66 01      DW   INVER,ToR,INVER   
0192   EE 05 01 00 4A 02      DW   DoLIT,1,UMPlus   
0198   EA 0F 5C 01 16 06      DW   RFrom,Plus,EXIT   
019E                             ;   -           ( n1 n2 -- n1-n2 )
019E                             ;               Subtraction.
019E                          ;*Macro unroll: mCOLON	1, '-', SUBB
019E                          ;*Macro unroll:  mCODE 1, "-", SUBB
019E                          ALIGN   2   
019E                SUBB:        
019E                VVCODE:   .SET   $   
019E                VVLEN:    .SET   (1 & 01FH) / CELLL   
1FAC                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FAC                VVNAME:   .SET   $   
1FAC   9E 01 B6 1F            DW   vvCODE,vvLINK   
1FB0                VVLINK:   .SET   $   
1FB0   01 2D                  DB   1,"-"   
019E                          .ORG   vvCODE   
019E   00                     NOP      
019F   CD E0 05               CALL   doLIST   
01A2   72 01 5C 01 16 06      DW   NEGAT,Plus,EXIT   
01A8                             ;   ABS         ( n -- n )
01A8                             ;               Return the absolute value of n.
01A8                          ;*Macro unroll: mCOLON	3,'ABS',ABSS
01A8                          ;*Macro unroll:  mCODE 3, "ABS", ABSS
01A8                          ALIGN   2   
01A8                ABSS:        
01A8                VVCODE:   .SET   $   
01A8                VVLEN:    .SET   (3 & 01FH) / CELLL   
1FA4                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FA4                VVNAME:   .SET   $   
1FA4   A8 01 B0 1F            DW   vvCODE,vvLINK   
1FA8                VVLINK:   .SET   $   
1FA8   03 41 42 53            DB   3,"ABS"   
01A8                          .ORG   vvCODE   
01A8   00                     NOP      
01A9   CD E0 05               CALL   doLIST   
01AC   F8 0F 36 01 E4 0D B6 01 DW   DUPP,ZLESS,QBRAN,ABS1   
01B4   72 01                  DW   NEGAT   
01B6                ABS1:        
01B6   16 06                  DW   EXIT   
01B8                             ;   =           ( w w -- t )
01B8                             ;               Return true if top two are equal.
01B8                          ;*Macro unroll: mCOLON	1, '=', EQUAL
01B8                          ;*Macro unroll:  mCODE 1, "=", EQUAL
01B8                          ALIGN   2   
01B8                EQUAL:       
01B8                VVCODE:   .SET   $   
01B8                VVLEN:    .SET   (1 & 01FH) / CELLL   
1F9E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F9E                VVNAME:   .SET   $   
1F9E   B8 01 A8 1F            DW   vvCODE,vvLINK   
1FA2                VVLINK:   .SET   $   
1FA2   01 3D                  DB   1,"="   
01B8                          .ORG   vvCODE   
01B8   00                     NOP      
01B9   CD E0 05               CALL   doLIST   
01BC   52 01 C2 01 16 06      DW   XORR,ZeroEquals,EXIT   
01C2                             ;   0=		( x -- flag )			\ CORE
01C2                             ;		Return true if x is zero.
01C2                          ;*Macro unroll: mCODE	2,'0=',ZeroEquals
01C2                          ALIGN   2   
01C2                ZEROEQUALS:      
01C2                VVCODE:   .SET   $   
01C2                VVLEN:    .SET   (2 & 01FH) / CELLL   
1F96                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F96                VVNAME:   .SET   $   
1F96   C2 01 A2 1F            DW   vvCODE,vvLINK   
1F9A                VVLINK:   .SET   $   
1F9A   02 30 3D               DB   2,"0="   
01C2                          .ORG   vvCODE   
01C2   78                     LD   A,B   
01C3   B1                     OR   C   ; result=0 if bc was 0
01C4   D6 01                  SUB   1   ; cy set   if bc was 0 ;;; ???? TODO: replace with DEC A
01C6   9F                     SBC   A,A   ; propagate cy through A
01C7   47                     LD   B,A   ; put 0000 or FFFF in TOS
01C8   4F                     LD   C,A   
01C9                          ;*Macro unroll: 	mNEXT
01C9   EB                     EX   DE,HL   
01CA                          ;*Macro unroll:  mNEXTHL                         ; 34t
01CA   FD E9                  JP   (IY)   ; 34t
01CC                             ;   U<          ( u u -- t )
01CC                             ;               Unsigned compare of top two items.
01CC                          ;*Macro unroll: mCOLON	2,'U<',ULESS
01CC                          ;*Macro unroll:  mCODE 2, "U<", ULESS
01CC                          ALIGN   2   
01CC                ULESS:       
01CC                VVCODE:   .SET   $   
01CC                VVLEN:    .SET   (2 & 01FH) / CELLL   
1F8E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F8E                VVNAME:   .SET   $   
1F8E   CC 01 9A 1F            DW   vvCODE,vvLINK   
1F92                VVLINK:   .SET   $   
1F92   02 55 3C               DB   2,"U<"   
01CC                          .ORG   vvCODE   
01CC   00                     NOP      
01CD   CD E0 05               CALL   doLIST   
01D0   36 10 52 01 36 01      DW   DDUP,XORR,ZLESS   
01D6   E4 0D E0 01            DW   QBRAN,ULES1   
01DA   E6 01 36 01 16 06      DW   NIP,ZLESS,EXIT   
01E0                ULES1:       
01E0   9E 01 36 01 16 06      DW   SUBB,ZLESS,EXIT   
01E6                             ;   NIP 	( n1 n2 -- n2 ) 		\ CORE EXT
01E6                             ;		Discard the second stack item.
01E6                          ;*Macro unroll: mCOLON	3,'NIP',NIP
01E6                          ;*Macro unroll:  mCODE 3, "NIP", NIP
01E6                          ALIGN   2   
01E6                NIP:         
01E6                VVCODE:   .SET   $   
01E6                VVLEN:    .SET   (3 & 01FH) / CELLL   
1F86                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F86                VVNAME:   .SET   $   
1F86   E6 01 92 1F            DW   vvCODE,vvLINK   
1F8A                VVLINK:   .SET   $   
1F8A   03 4E 49 50            DB   3,"NIP"   
01E6                          .ORG   vvCODE   
01E6   00                     NOP      
01E7   CD E0 05               CALL   doLIST   
01EA   00 10 FC 0F 16 06      DW   SWAP,DROP,EXIT   
01F0                             ;   <           ( n1 n2 -- t )
01F0                             ;               is less than
01F0                          ;*Macro unroll: mCOLON	1,'<',LESS
01F0                          ;*Macro unroll:  mCODE 1, "<", LESS
01F0                          ALIGN   2   
01F0                LESS:        
01F0                VVCODE:   .SET   $   
01F0                VVLEN:    .SET   (1 & 01FH) / CELLL   
1F80                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F80                VVNAME:   .SET   $   
1F80   F0 01 8A 1F            DW   vvCODE,vvLINK   
1F84                VVLINK:   .SET   $   
1F84   01 3C                  DB   1,"<"   
01F0                          .ORG   vvCODE   
01F0   00                     NOP      
01F1   CD E0 05               CALL   doLIST   
01F4   36 10 52 01 36 01 E4 0D 04 02 DW   DDUP,XORR,ZLESS,QBRAN,LESS1   
01FE   FC 0F 36 01 16 06      DW   DROP,ZLESS,EXIT   
0204                LESS1:       
0204   9E 01 36 01 16 06      DW   SUBB,ZLESS,EXIT   
020A                             ;   >           ( n1 n2 -- t )
020A                             ;               is greater than
020A                          ;*Macro unroll: mCOLON	1,'>',GreaterThan
020A                          ;*Macro unroll:  mCODE 1, ">", GreaterThan
020A                          ALIGN   2   
020A                GREATERTHAN:      
020A                VVCODE:   .SET   $   
020A                VVLEN:    .SET   (1 & 01FH) / CELLL   
1F7A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F7A                VVNAME:   .SET   $   
1F7A   0A 02 84 1F            DW   vvCODE,vvLINK   
1F7E                VVLINK:   .SET   $   
1F7E   01 3E                  DB   1,">"   
020A                          .ORG   vvCODE   
020A   00                     NOP      
020B   CD E0 05               CALL   doLIST   
020E   00 10 F0 01 16 06      DW   SWAP,LESS,EXIT   
0214                             ;   MAX         ( n n -- n )
0214                             ;               Return the greater of two top stack items.
0214                          ;*Macro unroll: mCOLON	3,'MAX',MAX
0214                          ;*Macro unroll:  mCODE 3, "MAX", MAX
0214                          ALIGN   2   
0214                MAX:         
0214                VVCODE:   .SET   $   
0214                VVLEN:    .SET   (3 & 01FH) / CELLL   
1F72                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F72                VVNAME:   .SET   $   
1F72   14 02 7E 1F            DW   vvCODE,vvLINK   
1F76                VVLINK:   .SET   $   
1F76   03 4D 41 58            DB   3,"MAX"   
0214                          .ORG   vvCODE   
0214   00                     NOP      
0215   CD E0 05               CALL   doLIST   
0218   36 10 F0 01 E4 0D 22 02 DW   DDUP,LESS,QBRAN,MAX1   
0220   00 10                  DW   SWAP   
0222                MAX1:        
0222   FC 0F 16 06            DW   DROP,EXIT   
0226                             ;   MIN         ( n n -- n )
0226                             ;               Return the smaller of top two stack items.
0226                          ;*Macro unroll: mCOLON	3,'MIN',MIN
0226                          ;*Macro unroll:  mCODE 3, "MIN", MIN
0226                          ALIGN   2   
0226                MIN:         
0226                VVCODE:   .SET   $   
0226                VVLEN:    .SET   (3 & 01FH) / CELLL   
1F6A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F6A                VVNAME:   .SET   $   
1F6A   26 02 76 1F            DW   vvCODE,vvLINK   
1F6E                VVLINK:   .SET   $   
1F6E   03 4D 49 4E            DB   3,"MIN"   
0226                          .ORG   vvCODE   
0226   00                     NOP      
0227   CD E0 05               CALL   doLIST   
022A   36 10 0A 02 E4 0D 34 02 DW   DDUP,GreaterThan,QBRAN,MIN1   
0232   00 10                  DW   SWAP   
0234                MIN1:        
0234   FC 0F 16 06            DW   DROP,EXIT   
0238                             ;   WITHIN      ( u ul uh -- t )
0238                             ;               Return true if u is within the range of ul and uh.
0238                          ;*Macro unroll: mCOLON	6,'WITHIN',WITHI
0238                          ;*Macro unroll:  mCODE 6, "WITHIN", WITHI
0238                          ALIGN   2   
0238                WITHI:       
0238                VVCODE:   .SET   $   
0238                VVLEN:    .SET   (6 & 01FH) / CELLL   
1F5E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F5E                VVNAME:   .SET   $   
1F5E   38 02 6E 1F            DW   vvCODE,vvLINK   
1F62                VVLINK:   .SET   $   
1F62   06 57 49 54 48 49 4E   DB   6,"WITHIN"   
0238                          .ORG   vvCODE   
0238   00                     NOP      
0239   CD E0 05               CALL   doLIST   
023C   08 10 9E 01 DC 0F      DW   OVER,SUBB,ToR   ;ul <= u < uh
0242   9E 01 EA 0F CC 01 16 06 DW   SUBB,RFrom,ULess,EXIT   
024A                             ;   UM+         ( w w -- w cy )
024A                             ;               Add two numbers, return the sum and carry flag.
024A                          ;*Macro unroll: mCODE	3,'um+',UMPlus
024A                          ALIGN   2   
024A                UMPLUS:      
024A                VVCODE:   .SET   $   
024A                VVLEN:    .SET   (3 & 01FH) / CELLL   
1F56                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F56                VVNAME:   .SET   $   
1F56   4A 02 62 1F            DW   vvCODE,vvLINK   
1F5A                VVLINK:   .SET   $   
1F5A   03 75 6D 2B            DB   3,"um+"   
024A                          .ORG   vvCODE   
024A   E1                     POP   HL   ;10t
024B   09                     ADD   HL,BC   ;11t
024C   E5                     PUSH   HL   ;11t
024D   01 00 00               LD   BC,0   ;10t
0250   30 01                  JR   NC,UMP1   ;12/7t
0252                UMP2:        
0252   03                     INC   BC   ; 6t
0253                UMP1:        
0253                          ;*Macro unroll:  mNEXT
0253   EB                     EX   DE,HL   
0254                          ;*Macro unroll:  mNEXTHL                         ; 34t
0254   FD E9                  JP   (IY)   ; 34t
0256                             ; UM/MOD      ( udl udh u -- ur uq )
0256                             ; Unsigned divide of a double by a single. Return mod and quotient.
0256                             ; Note: Less range than eForth because most significant word discarded TODO: fix
0256                          ;*Macro unroll: mCOLON  6,'UM/MOD',UMMOD
0256                          ;*Macro unroll:  mCODE 6, "UM/MOD", UMMOD
0256                          ALIGN   2   
0256                UMMOD:       
0256                VVCODE:   .SET   $   
0256                VVLEN:    .SET   (6 & 01FH) / CELLL   
1F4A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F4A                VVNAME:   .SET   $   
1F4A   56 02 5A 1F            DW   vvCODE,vvLINK   
1F4E                VVLINK:   .SET   $   
1F4E   06 55 4D 2F 4D 4F 44   DB   6,"UM/MOD"   
0256                          .ORG   vvCODE   
0256   00                     NOP      
0257   CD E0 05               CALL   doLIST   
025A   E6 01 60 02 16 06      DW   NIP,UMSLMOD2,EXIT   
0260                             ; UM/MOD2	( ud u1 -- u2 u3 )		
0260                             ; Unsigned division of a double-cell number ud by a single-cell
0260                             ; number u1. Return remainder u2 and quotient u3.
0260                             ; Note: Less range than eForth TODO: fix
0260                          ;*Macro unroll: mCODE	6,'UM/MOD2',UMSLMOD2
0260                          ALIGN   2   
0260                UMSLMOD2:      
0260                VVCODE:   .SET   $   
0260                VVLEN:    .SET   (6 & 01FH) / CELLL   
1F3E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F3E                VVNAME:   .SET   $   
1F3E   60 02 4E 1F            DW   vvCODE,vvLINK   
1F42                VVLINK:   .SET   $   
1F42   06 55 4D 2F 4D 4F 44 32 DB   6,"UM/MOD2"   
0260                          .ORG   vvCODE   
0260   78                     LD   A,B   
0261   B1                     OR   C   
0262   28 25                  JR   Z,UMMOD2   ;?zero divisor
0264                UMMOD11:      
0264   C5                     PUSH   BC   
0265   D9                     EXX      
0266   C1                     POP   BC   
0267   E1                     POP   HL   
0268   D1                     POP   DE   
0269   7D                     LD   A,L   
026A   91                     SUB   C   
026B   7C                     LD   A,H   
026C   98                     SBC   A,B   
026D   30 20                  JR   NC,UMMOD1   ;?too big
026F                UMMOD12:      
026F   7C                     LD   A,H   
0270   65                     LD   H,L   
0271   6A                     LD   L,D   
0272   16 08                  LD   D,8   
0274   D5                     PUSH   DE   
0275   CD A3 02               CALL   UMMOD3   
0278   D1                     POP   DE   
0279   E5                     PUSH   HL   
027A   6B                     LD   L,E   
027B   CD A3 02               CALL   UMMOD3   
027E   57                     LD   D,A   
027F   5C                     LD   E,H   
0280   C1                     POP   BC   
0281   61                     LD   H,C   
0282   D5                     PUSH   DE   
0283   E5                     PUSH   HL   
0284   D9                     EXX      
0285   C1                     POP   BC   
0286                          ;*Macro unroll: 	mNEXT
0286   EB                     EX   DE,HL   
0287                          ;*Macro unroll:  mNEXTHL                         ; 34t
0287   FD E9                  JP   (IY)   ; 34t
0289                UMMOD2:      
0289   01 B7 0F               LD   BC,ERR_DIVZERO   ; divide by 0
028C   C3 02 0E               JP   THROWX   
028F                UMMOD1:      
028F   01 C8 0F               LD   BC,ERR_OUTOFRANGE   ; result out of range
0292   C3 02 0E               JP   THROWX   
0295                UMMOD4:      
0295   5F                     LD   E,A   
0296   7C                     LD   A,H   
0297   91                     SUB   C   
0298   67                     LD   H,A   
0299   7B                     LD   A,E   
029A   98                     SBC   A,B   
029B   30 10                  JR   NC,UMMOD5   
029D                UMMOD13:      
029D   7C                     LD   A,H   
029E   81                     ADD   A,C   
029F   67                     LD   H,A   
02A0   7B                     LD   A,E   
02A1   15                     DEC   D   
02A2   C8                     RET   Z   
02A3                UMMOD3:      
02A3   29                     ADD   HL,HL   
02A4   17                     RLA      
02A5   30 EE                  JR   NC,UMMOD4   
02A7                UMMOD14:      
02A7   5F                     LD   E,A   
02A8   7C                     LD   A,H   
02A9   91                     SUB   C   
02AA   67                     LD   H,A   
02AB   7B                     LD   A,E   
02AC   98                     SBC   A,B   
02AD                UMMOD5:      
02AD   2C                     INC   L   
02AE   15                     DEC   D   
02AF   20 F2                  JR   NZ,UMMOD3   
02B1                UMMOD15:      
02B1   C9                     RET      
02B2                             ;   FM/MOD	( d n1 -- n2 n3 )		\ CORE
02B2                             ;		Signed floored divide of double by single. Return mod n2
02B2                             ;		and quotient n3.
02B2                             ; TODO: this is usually called M/MOD in eForth
02B2                          ;*Macro unroll: mCOLON	6,'M/MOD',MSMOD
02B2                          ;*Macro unroll:  mCODE 6, "M/MOD", MSMOD
02B2                          ALIGN   2   
02B2                MSMOD:       
02B2                VVCODE:   .SET   $   
02B2                VVLEN:    .SET   (6 & 01FH) / CELLL   
1F32                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F32                VVNAME:   .SET   $   
1F32   B2 02 42 1F            DW   vvCODE,vvLINK   
1F36                VVLINK:   .SET   $   
1F36   06 4D 2F 4D 4F 44      DB   6,"M/MOD"   
02B2                          .ORG   vvCODE   
02B2   00                     NOP      
02B3   CD E0 05               CALL   doLIST   
02B6   F8 0F 36 01 F8 0F DC 0F DW   DUPP,ZLESS,DUPP,TOR   
02BE   E4 0D CA 02            DW   QBRAN,MMOD1   
02C2   72 01 DC 0F 88 01 EA 0F DW   NEGAT,TOR,DNEGA,RFROM   
02CA                MMOD1:       
02CA   DC 0F F8 0F 36 01      DW   TOR,DUPP,ZLESS   
02D0   E4 0D D8 02            DW   QBRAN,MMOD2   
02D4   2C 0E 5C 01            DW   RAT,PLUS   
02D8                MMOD2:       
02D8   EA 0F 56 02 EA 0F      DW   RFROM,UMMOD,RFROM   
02DE   E4 0D E8 02            DW   QBRAN,MMOD3   
02E2   00 10 72 01 00 10      DW   SWAP,NEGAT,SWAP   
02E8                MMOD3:       
02E8   16 06                  DW   EXIT   
02EA                             ;   /MOD        ( n n -- r q )
02EA                             ;               Signed divide. Return mod and quotient.
02EA                          ;*Macro unroll: mCOLON	4,'/MOD',SLMOD
02EA                          ;*Macro unroll:  mCODE 4, "/MOD", SLMOD
02EA                          ALIGN   2   
02EA                SLMOD:       
02EA                VVCODE:   .SET   $   
02EA                VVLEN:    .SET   (4 & 01FH) / CELLL   
1F28                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F28                VVNAME:   .SET   $   
1F28   EA 02 36 1F            DW   vvCODE,vvLINK   
1F2C                VVLINK:   .SET   $   
1F2C   04 2F 4D 4F 44         DB   4,"/MOD"   
02EA                          .ORG   vvCODE   
02EA   00                     NOP      
02EB   CD E0 05               CALL   doLIST   
02EE   08 10 36 01 00 10 B2 02 16 06 DW   OVER,ZLESS,SWAP,MSMOD,EXIT   
02F8                             ;   MOD         ( n n -- r )
02F8                             ;               Signed divide. Return mod only.
02F8                          ;*Macro unroll: mCOLON	3,'MOD',MODD
02F8                          ;*Macro unroll:  mCODE 3, "MOD", MODD
02F8                          ALIGN   2   
02F8                MODD:        
02F8                VVCODE:   .SET   $   
02F8                VVLEN:    .SET   (3 & 01FH) / CELLL   
1F20                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F20                VVNAME:   .SET   $   
1F20   F8 02 2C 1F            DW   vvCODE,vvLINK   
1F24                VVLINK:   .SET   $   
1F24   03 4D 4F 44            DB   3,"MOD"   
02F8                          .ORG   vvCODE   
02F8   00                     NOP      
02F9   CD E0 05               CALL   doLIST   
02FC   EA 02 FC 0F 16 06      DW   SLMOD,DROP,EXIT   
0302                             ; 
0302                             ;   /           ( n n -- q )
0302                             ;               Signed divide. Return quotient only.
0302                          ;*Macro unroll: mCOLON	1,'/',SLASH
0302                          ;*Macro unroll:  mCODE 1, "/", SLASH
0302                          ALIGN   2   
0302                SLASH:       
0302                VVCODE:   .SET   $   
0302                VVLEN:    .SET   (1 & 01FH) / CELLL   
1F1A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F1A                VVNAME:   .SET   $   
1F1A   02 03 24 1F            DW   vvCODE,vvLINK   
1F1E                VVLINK:   .SET   $   
1F1E   01 2F                  DB   1,"/"   
0302                          .ORG   vvCODE   
0302   00                     NOP      
0303   CD E0 05               CALL   doLIST   
0306   EA 02 E6 01 16 06      DW   SLMOD,NIP,EXIT   
030C                             ; Multiply
030C                             ;   UM*         ( u u -- ud )
030C                             ;               Unsigned multiply. Return double product.
030C                          ;*Macro unroll: mCODE	3,'UM*',UMSTA
030C                          ALIGN   2   
030C                UMSTA:       
030C                VVCODE:   .SET   $   
030C                VVLEN:    .SET   (3 & 01FH) / CELLL   
1F12                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F12                VVNAME:   .SET   $   
1F12   0C 03 1E 1F            DW   vvCODE,vvLINK   
1F16                VVLINK:   .SET   $   
1F16   03 55 4D 2A            DB   3,"UM*"   
030C                          .ORG   vvCODE   
030C   EB                     EX   DE,HL   
030D   E3                     EX   (SP),HL   
030E   EB                     EX   DE,HL   
030F   21 00 00               LD   HL,0   
0312   3E 10                  LD   A,010h   
0314                UMSTA1:      
0314   29                     ADD   HL,HL   
0315   EB                     EX   DE,HL   
0316   ED 6A                  ADC   HL,HL   
0318   EB                     EX   DE,HL   
0319   30 04                  JR   NC,UMSTA3   
031B                UMSTA2:      
031B   09                     ADD   HL,BC   
031C   30 01                  JR   NC,UMSTA3   
031E                UMSTA5:      
031E   13                     INC   DE   
031F                UMSTA3:      
031F   3D                     DEC   A   
0320   20 F2                  JR   NZ,UMSTA1   
0322                UMSTA4:      
0322   42                     LD   B,D   
0323   4B                     LD   C,E   
0324   E3                     EX   (SP),HL   
0325                          ;*Macro unroll: 	mNEXTHL
0325   FD E9                  JP   (IY)   
0327                             ;   *           ( n n -- n )
0327                             ;               Signed multiply. Return single product.
0327                          ;*Macro unroll: mCOLON	1,'*',STAR
0327                          ;*Macro unroll:  mCODE 1, "*", STAR
0327                          ALIGN   2   
0328                STAR:        
0328                VVCODE:   .SET   $   
0328                VVLEN:    .SET   (1 & 01FH) / CELLL   
1F0C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F0C                VVNAME:   .SET   $   
1F0C   28 03 16 1F            DW   vvCODE,vvLINK   
1F10                VVLINK:   .SET   $   
1F10   01 2A                  DB   1,"*"   
0328                          .ORG   vvCODE   
0328   00                     NOP      
0329   CD E0 05               CALL   doLIST   
032C   0C 03 FC 0F 16 06      DW   UMSTA,DROP,EXIT   
0332                             ;   M*          ( n n -- d )
0332                             ;               Signed multiply. Return double product.
0332                          ;*Macro unroll: mCOLON	2,'M*',MSTAR,
0332                          ;*Macro unroll:  mCODE 2, "M*", MSTAR
0332                          ALIGN   2   
0332                MSTAR:       
0332                VVCODE:   .SET   $   
0332                VVLEN:    .SET   (2 & 01FH) / CELLL   
1F04                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F04                VVNAME:   .SET   $   
1F04   32 03 10 1F            DW   vvCODE,vvLINK   
1F08                VVLINK:   .SET   $   
1F08   02 4D 2A               DB   2,"M*"   
0332                          .ORG   vvCODE   
0332   00                     NOP      
0333   CD E0 05               CALL   doLIST   
0336   36 10 52 01 36 01 DC 0F A8 01 00 10 A8 01 DW   DDUP,XORR,ZLESS,ToR,ABSS,SWAP,ABSS   
0344   0C 03 EA 0F E4 0D 4E 03 DW   UMSTA,RFrom,QBRAN,MSTAR1   
034C   88 01                  DW   DNEGA   
034E                MSTAR1:      
034E   16 06                  DW   EXIT   
0350                             ;   */MOD       ( n1 n2 n3 -- r q )
0350                             ;               Multiply n1 and n2, then divide by n3. Return mod and quotient.
0350                          ;*Macro unroll: mCOLON	5,'*/MOD',SSMOD
0350                          ;*Macro unroll:  mCODE 5, "*/MOD", SSMOD
0350                          ALIGN   2   
0350                SSMOD:       
0350                VVCODE:   .SET   $   
0350                VVLEN:    .SET   (5 & 01FH) / CELLL   
1EFA                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1EFA                VVNAME:   .SET   $   
1EFA   50 03 08 1F            DW   vvCODE,vvLINK   
1EFE                VVLINK:   .SET   $   
1EFE   05 2A 2F 4D 4F 44      DB   5,"*/MOD"   
0350                          .ORG   vvCODE   
0350   00                     NOP      
0351   CD E0 05               CALL   doLIST   
0354   DC 0F 32 03 EA 0F B2 02 16 06 DW   ToR,MStar,RFrom,MSMOD,EXIT   
035E                             ;   */          ( n1 n2 n3 -- q )
035E                             ;               Multiply n1 by n2, then divide by n3. Return quotient only.
035E                          ;*Macro unroll: mCOLON	2,'*/',STASL
035E                          ;*Macro unroll:  mCODE 2, "*/", STASL
035E                          ALIGN   2   
035E                STASL:       
035E                VVCODE:   .SET   $   
035E                VVLEN:    .SET   (2 & 01FH) / CELLL   
1EF2                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1EF2                VVNAME:   .SET   $   
1EF2   5E 03 FE 1E            DW   vvCODE,vvLINK   
1EF6                VVLINK:   .SET   $   
1EF6   02 2A 2F               DB   2,"*/"   
035E                          .ORG   vvCODE   
035E   00                     NOP      
035F   CD E0 05               CALL   doLIST   
0362   50 03 E6 01 16 06      DW   SSMOD,NIP,EXIT   
0368                             ;   CELL+       ( a -- a )
0368                             ;               Add cell size in byte to address.
0368                          ;*Macro unroll: mCOLON	5,'CELL+',CELLP
0368                          ;*Macro unroll:  mCODE 5, "CELL+", CELLP
0368                          ALIGN   2   
0368                CELLP:       
0368                VVCODE:   .SET   $   
0368                VVLEN:    .SET   (5 & 01FH) / CELLL   
1EE8                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1EE8                VVNAME:   .SET   $   
1EE8   68 03 F6 1E            DW   vvCODE,vvLINK   
1EEC                VVLINK:   .SET   $   
1EEC   05 43 45 4C 4C 2B      DB   5,"CELL+"   
0368                          .ORG   vvCODE   
0368   00                     NOP      
0369   CD E0 05               CALL   doLIST   
036C   EE 05 02 00 5C 01 16 06 DW   DOLIT,CELLL,PLUS,EXIT   
0374                             ;   CELL-       ( a -- a )
0374                             ;               Subtract cell size in byte from address.
0374                          ;*Macro unroll: mCOLON	5,'CELL-',CELLM
0374                          ;*Macro unroll:  mCODE 5, "CELL-", CELLM
0374                          ALIGN   2   
0374                CELLM:       
0374                VVCODE:   .SET   $   
0374                VVLEN:    .SET   (5 & 01FH) / CELLL   
1EDE                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1EDE                VVNAME:   .SET   $   
1EDE   74 03 EC 1E            DW   vvCODE,vvLINK   
1EE2                VVLINK:   .SET   $   
1EE2   05 43 45 4C 4C 2D      DB   5,"CELL-"   
0374                          .ORG   vvCODE   
0374   00                     NOP      
0375   CD E0 05               CALL   doLIST   
0378   EE 05 FE FF 5C 01 16 06 DW   DOLIT,-CELLL,PLUS,EXIT   
0380                             ;   CELLS       ( n -- n )
0380                             ;               Multiply tos by cell size in bytes.
0380                          ;*Macro unroll: mCOLON	5,'CELLS',CELLS
0380                          ;*Macro unroll:  mCODE 5, "CELLS", CELLS
0380                          ALIGN   2   
0380                CELLS:       
0380                VVCODE:   .SET   $   
0380                VVLEN:    .SET   (5 & 01FH) / CELLL   
1ED4                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1ED4                VVNAME:   .SET   $   
1ED4   80 03 E2 1E            DW   vvCODE,vvLINK   
1ED8                VVLINK:   .SET   $   
1ED8   05 43 45 4C 4C 53      DB   5,"CELLS"   
0380                          .ORG   vvCODE   
0380   00                     NOP      
0381   CD E0 05               CALL   doLIST   
0384   EE 05 02 00 28 03 16 06 DW   DOLIT,CELLL,STAR,EXIT   
038C                             ; ;   2*		( x1 -- x2 )			
038C                             ; ;		Bit-shift left, filling the least significant bit with 0.
038C                             ; mCODE	2,"2*",TwoStar
038C                             ; 	SLA C
038C                             ; 	RL	B
038C                             ; 	mNEXT
038C                             ; ;   D+          ( d d -- d )
038C                             ; ;               Double addition, as an example using UM+.
038C                             ; mCOLON	2,"D+",DPlus
038C                             ; 	DW	ToR,SWAP,ToR,UMPlus
038C                             ; 	DW	RFrom,RFrom,Plus,Plus,EXIT
038C                             ; ;   1-		( n1|u1 -- n2|u2 )		\ COR
038C                             ; ;		Decrease top of the stack item by 1.
038C                             ; mCOLON	2,"1-",OneSUBB
038C                             ; 	DW	DoLIT,-1,Plus,EXIT
038C                             ; ;   S>D 	( n -- d )			\ CORE
038C                             ; ;		Convert a single-cell number n to double-cell number.
038C                             ; mCOLON	3,"S>D",SToD
038C                             ; 	DW	DUPP,ZLESS,EXIT
038C                             ; ;   CHAR+	( c-addr1 -- c-addr2 )		\ CORE
038C                             ; ;		Returns next character-aligned address.
038C                             ; ;
038C                             ; mCOLON	5,"CHAR+",CHARPlus
038C                             ;     DW	DoLIT,CHARR,Plus,EXIT
038C                             ;   '           ( -- ca )
038C                             ;               Search context vocabularies for the next word in input stream.
038C                          ;*Macro unroll: mCOLON  1,"'",TICK
038C                          ;*Macro unroll:  mCODE 1, "'", TICK
038C                          ALIGN   2   
038C                TICK:        
038C                VVCODE:   .SET   $   
038C                VVLEN:    .SET   (1 & 01FH) / CELLL   
1ECE                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1ECE                VVNAME:   .SET   $   
1ECE   8C 03 D8 1E            DW   vvCODE,vvLINK   
1ED2                VVLINK:   .SET   $   
1ED2   01 27                  DB   1,"'"   
038C                          .ORG   vvCODE   
038C   00                     NOP      
038D   CD E0 05               CALL   doLIST   
0390   60 09 42 0A            DW   TOKEN,NAMEQ   ;?defined
0394   E4 0D 9A 03            DW   QBRAN,TICK1   
0398   16 06                  DW   EXIT   ;yes, push code address
039A                TICK1:       
039A   A4 0A                  DW   THROW   ;no, error
039C                             ;   ALLOT       ( n -- )
039C                             ;               Allocate n bytes to the code dictionary.
039C                          ;*Macro unroll: mCOLON  5,'ALLOT',ALLOT
039C                          ;*Macro unroll:  mCODE 5, "ALLOT", ALLOT
039C                          ALIGN   2   
039C                ALLOT:       
039C                VVCODE:   .SET   $   
039C                VVLEN:    .SET   (5 & 01FH) / CELLL   
1EC4                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1EC4                VVNAME:   .SET   $   
1EC4   9C 03 D2 1E            DW   vvCODE,vvLINK   
1EC8                VVLINK:   .SET   $   
1EC8   05 41 4C 4C 4F 54      DB   5,"ALLOT"   
039C                          .ORG   vvCODE   
039C   00                     NOP      
039D   CD E0 05               CALL   doLIST   
03A0   18 11 58 0E 16 06      DW   CP,PSTOR,EXIT   ;adjust code pointer
03A6                             ;   ,           ( w -- )
03A6                             ;               Compile an integer into the code dictionary.
03A6                          ;*Macro unroll: mCOLON  1,',',COMMA
03A6                          ;*Macro unroll:  mCODE 1, ",", COMMA
03A6                          ALIGN   2   
03A6                COMMA:       
03A6                VVCODE:   .SET   $   
03A6                VVLEN:    .SET   (1 & 01FH) / CELLL   
1EBE                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1EBE                VVNAME:   .SET   $   
1EBE   A6 03 C8 1E            DW   vvCODE,vvLINK   
1EC2                VVLINK:   .SET   $   
1EC2   01 2C                  DB   1,","   
03A6                          .ORG   vvCODE   
03A6   00                     NOP      
03A7   CD E0 05               CALL   doLIST   
03AA   9C 0E F8 0F 68 03      DW   HERE,DUPP,CELLP   ;cell boundary
03B0   18 11 0A 0E 0A 0E 16 06 DW   CP,STORE,STORE,EXIT   ;adjust code pointer, compile
03B8                             ;   [COMPILE]   ( -- ; <string> )
03B8                             ;               Compile the next immediate word into code dictionary.
03B8                          ;*Macro unroll: mCOLON  IMEDD+9,'[COMPILE]',BCOMP
03B8                          ;*Macro unroll:  mCODE IMEDD+9, "[COMPILE]", BCOMP
03B8                          ALIGN   2   
03B8                BCOMP:       
03B8                VVCODE:   .SET   $   
03B8                VVLEN:    .SET   (IMEDD+9 & 01FH) / CELLL   
1E70                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1E70                VVNAME:   .SET   $   
1E70   B8 03 C2 1E            DW   vvCODE,vvLINK   
1E74                VVLINK:   .SET   $   
1E74   49 5B 43 4F 4D 50 49 4C 45 5D DB   IMEDD+9,"[COMPILE]"   
03B8                          .ORG   vvCODE   
03B8   00                     NOP      
03B9   CD E0 05               CALL   doLIST   
03BC   8C 03 A6 03 16 06      DW   TICK,COMMA,EXIT   
03C2                             ;   COMPILE     ( -- )
03C2                             ;               Compile the next address in colon list to code dictionary.
03C2                          ;*Macro unroll: mCOLON  COMPO+7,'COMPILE',COMPI
03C2                          ;*Macro unroll:  mCODE COMPO+7, "COMPILE", COMPI
03C2                          ALIGN   2   
03C2                COMPI:       
03C2                VVCODE:   .SET   $   
03C2                VVLEN:    .SET   (COMPO+7 & 01FH) / CELLL   
1E44                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1E44                VVNAME:   .SET   $   
1E44   C2 03 74 1E            DW   vvCODE,vvLINK   
1E48                VVLINK:   .SET   $   
1E48   27 43 4F 4D 50 49 4C 45 DB   COMPO+7,"COMPILE"   
03C2                          .ORG   vvCODE   
03C2   00                     NOP      
03C3   CD E0 05               CALL   doLIST   
03C6   EA 0F F8 0F 14 0E A6 03 DW   RFROM,DUPP,AT,COMMA   ;compile address
03CE   68 03 DC 0F 16 06      DW   CELLP,TOR,EXIT   ;adjust return address
03D4                             ;   LITERAL     ( w -- )
03D4                             ;               Compile tos to code dictionary as an integer literal.
03D4                          ;*Macro unroll: mCOLON  IMEDD+7,'LITERAL',LITER
03D4                          ;*Macro unroll:  mCODE IMEDD+7, "LITERAL", LITER
03D4                          ALIGN   2   
03D4                LITER:       
03D4                VVCODE:   .SET   $   
03D4                VVLEN:    .SET   (IMEDD+7 & 01FH) / CELLL   
1DF8                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1DF8                VVNAME:   .SET   $   
1DF8   D4 03 48 1E            DW   vvCODE,vvLINK   
1DFC                VVLINK:   .SET   $   
1DFC   47 4C 49 54 45 52 41 4C DB   IMEDD+7,"LITERAL"   
03D4                          .ORG   vvCODE   
03D4   00                     NOP      
03D5   CD E0 05               CALL   doLIST   
03D8   C2 03 EE 05 A6 03 16 06 DW   COMPI,DOLIT,COMMA,EXIT   
03E0                             ;   $,"         ( -- )
03E0                             ;               Compile a literal string up to next " .
03E0                          ;*Macro unroll: hCOLON  3,'$,|',STRCQ
03E0                          ;*Macro unroll:  hCODE 3, "$,|", STRCQ
03E0                          ALIGN   2   
03E0                STRCQ:       
03E0   00                     NOP      
03E1   CD E0 05               CALL   doLIST   
03E4   EE 05 22 00 7C 09      DW   DOLIT,$22,WORDD   ;move string to code dictionary
03EA   8A 0E 5C 01 82 0F      DW   COUNT,PLUS,ALGND   ;calculate aligned end of string
03F0   18 11 0A 0E 16 06      DW   CP,STORE,EXIT   ;adjust the code pointer
03F6                             ;   RECURSE     ( -- )
03F6                             ;               Make the current word available for compilation.
03F6                          ;*Macro unroll: mCOLON  IMEDD+7,'RECURSE',RECUR
03F6                          ;*Macro unroll:  mCODE IMEDD+7, "RECURSE", RECUR
03F6                          ALIGN   2   
03F6                RECUR:       
03F6                VVCODE:   .SET   $   
03F6                VVLEN:    .SET   (IMEDD+7 & 01FH) / CELLL   
1DAC                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1DAC                VVNAME:   .SET   $   
1DAC   F6 03 FC 1D            DW   vvCODE,vvLINK   
1DB0                VVLINK:   .SET   $   
1DB0   47 52 45 43 55 52 53 45 DB   IMEDD+7,"RECURSE"   
03F6                          .ORG   vvCODE   
03F6   00                     NOP      
03F7   CD E0 05               CALL   doLIST   
03FA   28 11 14 0E 88 09 A6 03 16 06 DW   LAST,AT,NAMET,COMMA,EXIT   
0404                             ;   ?UNIQUE     ( a -- a )
0404                             ;               Display a warning message if the word already exists.
0404                          ;*Macro unroll: mCOLON  7,'?UNIQUE',UNIQU
0404                          ;*Macro unroll:  mCODE 7, "?UNIQUE", UNIQU
0404                          ALIGN   2   
0404                UNIQU:       
0404                VVCODE:   .SET   $   
0404                VVLEN:    .SET   (7 & 01FH) / CELLL   
1DA0                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1DA0                VVNAME:   .SET   $   
1DA0   04 04 B0 1D            DW   vvCODE,vvLINK   
1DA4                VVLINK:   .SET   $   
1DA4   07 3F 55 4E 49 51 55 45 DB   7,"?UNIQUE"   
0404                          .ORG   vvCODE   
0404   00                     NOP      
0405   CD E0 05               CALL   doLIST   
0408   F8 0F 42 0A            DW   DUPP,NAMEQ   ;?name exists
040C   E4 0D 20 04            DW   QBRAN,UNIQ1   ;redefinitions are OK
0410                          ;*Macro unroll:  mDSTR   DOTQP,' reDef '         ;but warn the user
0410   60 0C                  DW   DOTQP   ;but warn the user
0412                VVLEN:    .SET   $   
0412   00 20 72 65 44 65 66 20 DB   0," reDef "   
041A                VVCODE:   .SET   $   
0412                          .ORG   vvLEN   
0412   07                     DB   vvCODE - vvLEN - 1   
041A                          .ORG   vvCODE   
041A   08 10 8A 0E 10 0C      DW   OVER,COUNT,TYPEE   ;just in case its not planned
0420                UNIQ1:       
0420   FC 0F 16 06            DW   DROP,EXIT   
0424                             ;   $,n         ( na -- )
0424                             ;               Build a new dictionary name using the string at na.
0424                          ;*Macro unroll: mCOLON  3,'$,n',SNAME
0424                          ;*Macro unroll:  mCODE 3, "$,n", SNAME
0424                          ALIGN   2   
0424                SNAME:       
0424                VVCODE:   .SET   $   
0424                VVLEN:    .SET   (3 & 01FH) / CELLL   
1D98                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1D98                VVNAME:   .SET   $   
1D98   24 04 A4 1D            DW   vvCODE,vvLINK   
1D9C                VVLINK:   .SET   $   
1D9C   03 24 2C 6E            DB   3,"$,n"   
0424                          .ORG   vvCODE   
0424   00                     NOP      
0425   CD E0 05               CALL   doLIST   
0428   F8 0F 24 0E            DW   DUPP,CAT   ;?null input
042C   E4 0D 56 04            DW   QBRAN,PNAM1   
0430   04 04                  DW   UNIQU   ;?redefinition
0432   F8 0F 28 11 0A 0E      DW   DUPP,LAST,STORE   ;save na for vocabulary link
0438   9C 0E 82 0F 00 10      DW   HERE,ALGND,SWAP   ;align code address
043E   74 03                  DW   CELLM   ;link address
0440   10 11 14 0E 14 0E 08 10 0A 0E DW   CRRNT,AT,AT,OVER,STORE   
044A   74 03 F8 0F 20 11 0A 0E DW   CELLM,DUPP,NP,STORE   ;adjust name pointer
0452   0A 0E 16 06            DW   STORE,EXIT   ;save code pointer
0456                PNAM1:       
0456                          ;*Macro unroll:  mDSTR   STRQP,' name'           ;null input
0456   58 0C                  DW   STRQP   ;null input
0458                VVLEN:    .SET   $   
0458   00 20 6E 61 6D 65      DB   0," name"   
045E                VVCODE:   .SET   $   
0458                          .ORG   vvLEN   
0458   05                     DB   vvCODE - vvLEN - 1   
045E                          .ORG   vvCODE   
045E   A4 0A                  DW   THROW   
0460                             ;   $COMPILE    ( a -- )
0460                             ;               Compile next word to code dictionary as a token or literal.
0460                          ;*Macro unroll: hCOLON  8,'$COMPILE',SCOMP
0460                          ;*Macro unroll:  hCODE 8, "$COMPILE", SCOMP
0460                          ALIGN   2   
0460                SCOMP:       
0460   00                     NOP      
0461   CD E0 05               CALL   doLIST   
0464   42 0A 10 10            DW   NAMEQ,QDUP   ;?defined
0468   E4 0D 80 04            DW   QBRAN,SCOM2   
046C   14 0E EE 05 40 00 3E 01 DW   AT,DOLIT,IMEDD,ANDD   ;?immediate
0474   E4 0D 7C 04            DW   QBRAN,SCOM1   
0478   E0 0D 16 06            DW   EXECU,EXIT   ;its immediate, execute
047C                SCOM1:       
047C   A6 03 16 06            DW   COMMA,EXIT   ;its not immediate, compile
0480                SCOM2:       
0480   F0 10 C0 0E            DW   TNUMB,ATEXE   ;try to convert to number
0484   E4 0D 8C 04            DW   QBRAN,SCOM3   
0488   D4 03 16 06            DW   LITER,EXIT   ;compile number as integer
048C   A4 0A        SCOM3:    DW   THROW   ;error
048E                             ;   OVERT       ( -- )
048E                             ;               Link a new word into the current vocabulary.
048E                          ;*Macro unroll: hCOLON  5,'OVERT',OVERT
048E                          ;*Macro unroll:  hCODE 5, "OVERT", OVERT
048E                          ALIGN   2   
048E                OVERT:       
048E   00                     NOP      
048F   CD E0 05               CALL   doLIST   
0492   28 11 14 0E 10 11 14 0E 0A 0E 16 06 DW   LAST,AT,CRRNT,AT,STORE,EXIT   
049E                             ;   ;           ( -- )
049E                             ;               Terminate a colon definition.
049E                          ;*Macro unroll: mCOLON  IMEDD+COMPO+1,';',SEMIS
049E                          ;*Macro unroll:  mCODE IMEDD+COMPO+1, ";", SEMIS
049E                          ALIGN   2   
049E                SEMIS:       
049E                VVCODE:   .SET   $   
049E                VVLEN:    .SET   (IMEDD+COMPO+1 & 01FH) / CELLL   
1D32                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1D32                VVNAME:   .SET   $   
1D32   9E 04 9C 1D            DW   vvCODE,vvLINK   
1D36                VVLINK:   .SET   $   
1D36   61 3B                  DB   IMEDD+COMPO+1,";"   
049E                          .ORG   vvCODE   
049E   00                     NOP      
049F   CD E0 05               CALL   doLIST   
04A2   C2 03 16 06 1E 0B 8E 04 16 06 DW   COMPI,EXIT,LBRAC,OVERT,EXIT   
04AC                             ;   ]           ( -- )
04AC                             ;               Start compiling the words in the input stream.
04AC                          ;*Macro unroll: mCOLON  1,']',RBRAC
04AC                          ;*Macro unroll:  mCODE 1, "]", RBRAC
04AC                          ALIGN   2   
04AC                RBRAC:       
04AC                VVCODE:   .SET   $   
04AC                VVLEN:    .SET   (1 & 01FH) / CELLL   
1D2C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1D2C                VVNAME:   .SET   $   
1D2C   AC 04 36 1D            DW   vvCODE,vvLINK   
1D30                VVLINK:   .SET   $   
1D30   01 5D                  DB   1,"]"   
04AC                          .ORG   vvCODE   
04AC   00                     NOP      
04AD   CD E0 05               CALL   doLIST   
04B0   EE 05 60 04 E8 10 0A 0E 16 06 DW   DOLIT,SCOMP,TEVAL,STORE,EXIT   
04BA                             ;   call,       ( ca -- )
04BA                             ;               Assemble a call instruction to ca.
04BA                          ;*Macro unroll: hCOLON  5,'call,',CALLC
04BA                          ;*Macro unroll:  hCODE 5, "call,", CALLC
04BA                          ALIGN   2   
04BA                CALLC:       
04BA   00                     NOP      
04BB   CD E0 05               CALL   doLIST   
04BE   EE 05 00 CD A6 03      DW   DOLIT,CALLL,COMMA   ;Direct Threaded Code
04C4   A6 03 16 06            DW   COMMA,EXIT   ;DTC 8086 relative call
04C8                             ;   :           ( -- ; <string> )
04C8                             ;               Start a new colon definition using next word as its name.
04C8                          ;*Macro unroll: mCOLON  1,':',COLON
04C8                          ;*Macro unroll:  mCODE 1, ":", COLON
04C8                          ALIGN   2   
04C8                COLON:       
04C8                VVCODE:   .SET   $   
04C8                VVLEN:    .SET   (1 & 01FH) / CELLL   
1D26                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1D26                VVNAME:   .SET   $   
1D26   C8 04 30 1D            DW   vvCODE,vvLINK   
1D2A                VVLINK:   .SET   $   
1D2A   01 3A                  DB   1,":"   
04C8                          .ORG   vvCODE   
04C8   00                     NOP      
04C9   CD E0 05               CALL   doLIST   
04CC   60 09 24 04 EE 05 E0 05 DW   TOKEN,SNAME,DOLIT,DoLIST   
04D4   BA 04 AC 04 16 06      DW   CALLC,RBRAC,EXIT   
04DA                             ;   IMMEDIATE   ( -- )
04DA                             ;               Make the last compiled word an immediate word.
04DA                          ;*Macro unroll: mCOLON  9,'IMMEDIATE',IMMED
04DA                          ;*Macro unroll:  mCODE 9, "IMMEDIATE", IMMED
04DA                          ALIGN   2   
04DA                IMMED:       
04DA                VVCODE:   .SET   $   
04DA                VVLEN:    .SET   (9 & 01FH) / CELLL   
1D18                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1D18                VVNAME:   .SET   $   
1D18   DA 04 2A 1D            DW   vvCODE,vvLINK   
1D1C                VVLINK:   .SET   $   
1D1C   09 49 4D 4D 45 44 49 41 54 45 DB   9,"IMMEDIATE"   
04DA                          .ORG   vvCODE   
04DA   00                     NOP      
04DB   CD E0 05               CALL   doLIST   
04DE   EE 05 40 00 28 11 14 0E 14 0E 48 01 DW   DOLIT,IMEDD,LAST,AT,AT,ORR   
04EA   28 11 14 0E 0A 0E 16 06 DW   LAST,AT,STORE,EXIT   
04F2                             ;   USER        ( u -- ; <string> )
04F2                             ;               Compile a new user variable.
04F2                          ;*Macro unroll: mCOLON  4,'USER',USER
04F2                          ;*Macro unroll:  mCODE 4, "USER", USER
04F2                          ALIGN   2   
04F2                USER:        
04F2                VVCODE:   .SET   $   
04F2                VVLEN:    .SET   (4 & 01FH) / CELLL   
1D0E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1D0E                VVNAME:   .SET   $   
1D0E   F2 04 1C 1D            DW   vvCODE,vvLINK   
1D12                VVLINK:   .SET   $   
1D12   04 55 53 45 52         DB   4,"USER"   
04F2                          .ORG   vvCODE   
04F2   00                     NOP      
04F3   CD E0 05               CALL   doLIST   
04F6   60 09 24 04 8E 04      DW   TOKEN,SNAME,OVERT   
04FC   EE 05 E0 05 BA 04      DW   DOLIT,DoLIST,CALLC   
0502   C2 03 06 06 A6 03 16 06 DW   COMPI,DOUSE,COMMA,EXIT   
050A                             ;   CREATE      ( -- ; <string> )
050A                             ;               Compile a new array entry without allocating code space.
050A                          ;*Macro unroll: mCOLON  6,'CREATE',CREAT
050A                          ;*Macro unroll:  mCODE 6, "CREATE", CREAT
050A                          ALIGN   2   
050A                CREAT:       
050A                VVCODE:   .SET   $   
050A                VVLEN:    .SET   (6 & 01FH) / CELLL   
1D02                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1D02                VVNAME:   .SET   $   
1D02   0A 05 12 1D            DW   vvCODE,vvLINK   
1D06                VVLINK:   .SET   $   
1D06   06 43 52 45 41 54 45   DB   6,"CREATE"   
050A                          .ORG   vvCODE   
050A   00                     NOP      
050B   CD E0 05               CALL   doLIST   
050E   60 09 24 04 8E 04      DW   TOKEN,SNAME,OVERT   
0514   EE 05 E0 05 BA 04      DW   DOLIT,DoLIST,CALLC   
051A   C2 03 F6 05 16 06      DW   COMPI,DOVAR,EXIT   
0520                             ;   VARIABLE    ( -- ; <string> )
0520                             ;               Compile a new variable initialized to 0.
0520                          ;*Macro unroll: mCOLON  8,'VARIABLE',VARIA
0520                          ;*Macro unroll:  mCODE 8, "VARIABLE", VARIA
0520                          ALIGN   2   
0520                VARIA:       
0520                VVCODE:   .SET   $   
0520                VVLEN:    .SET   (8 & 01FH) / CELLL   
1CF4                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1CF4                VVNAME:   .SET   $   
1CF4   20 05 06 1D            DW   vvCODE,vvLINK   
1CF8                VVLINK:   .SET   $   
1CF8   08 56 41 52 49 41 42 4C 45 DB   8,"VARIABLE"   
0520                          .ORG   vvCODE   
0520   00                     NOP      
0521   CD E0 05               CALL   doLIST   
0524   0A 05 EE 05 00 00 A6 03 16 06 DW   CREAT,DOLIT,0,COMMA,EXIT   
052E                             ;   FOR         ( -- a )
052E                             ;               Start a FOR-NEXT loop structure in a colon definition.
052E                          ;*Macro unroll: mCOLON  IMEDD+3,'FOR',FOR
052E                          ;*Macro unroll:  mCODE IMEDD+3, "FOR", FOR
052E                          ALIGN   2   
052E                FOR:         
052E                VVCODE:   .SET   $   
052E                VVLEN:    .SET   (IMEDD+3 & 01FH) / CELLL   
1CAC                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1CAC                VVNAME:   .SET   $   
1CAC   2E 05 F8 1C            DW   vvCODE,vvLINK   
1CB0                VVLINK:   .SET   $   
1CB0   43 46 4F 52            DB   IMEDD+3,"FOR"   
052E                          .ORG   vvCODE   
052E   00                     NOP      
052F   CD E0 05               CALL   doLIST   
0532   C2 03 DC 0F 9C 0E 16 06 DW   COMPI,TOR,HERE,EXIT   
053A                             ;   BEGIN       ( -- a )
053A                             ;               Start an infinite or indefinite loop structure.
053A                          ;*Macro unroll: mCOLON  IMEDD+5,'BEGIN',BEGIN
053A                          ;*Macro unroll:  mCODE IMEDD+5, "BEGIN", BEGIN
053A                          ALIGN   2   
053A                BEGIN:       
053A                VVCODE:   .SET   $   
053A                VVLEN:    .SET   (IMEDD+5 & 01FH) / CELLL   
1C62                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1C62                VVNAME:   .SET   $   
1C62   3A 05 B0 1C            DW   vvCODE,vvLINK   
1C66                VVLINK:   .SET   $   
1C66   45 42 45 47 49 4E      DB   IMEDD+5,"BEGIN"   
053A                          .ORG   vvCODE   
053A   00                     NOP      
053B   CD E0 05               CALL   doLIST   
053E   9C 0E 16 06            DW   HERE,EXIT   
0542                             ;   NEXT        ( a -- )
0542                             ;               Terminate a FOR-NEXT loop structure.
0542                          ;*Macro unroll: mCOLON  IMEDD+4,'NEXT',NEXT
0542                          ;*Macro unroll:  mCODE IMEDD+4, "NEXT", NEXT
0542                          ALIGN   2   
0542                NEXT:        
0542                VVCODE:   .SET   $   
0542                VVLEN:    .SET   (IMEDD+4 & 01FH) / CELLL   
1C18                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1C18                VVNAME:   .SET   $   
1C18   42 05 66 1C            DW   vvCODE,vvLINK   
1C1C                VVLINK:   .SET   $   
1C1C   44 4E 45 58 54         DB   IMEDD+4,"NEXT"   
0542                          .ORG   vvCODE   
0542   00                     NOP      
0543   CD E0 05               CALL   doLIST   
0546   C2 03 8C 06 A6 03 16 06 DW   COMPI,DONXT,COMMA,EXIT   
054E                             ;   UNTIL       ( a -- )
054E                             ;               Terminate a BEGIN-UNTIL indefinite loop structure.
054E                          ;*Macro unroll: mCOLON  IMEDD+5,'UNTIL',UNTIL
054E                          ;*Macro unroll:  mCODE IMEDD+5, "UNTIL", UNTIL
054E                          ALIGN   2   
054E                UNTIL:       
054E                VVCODE:   .SET   $   
054E                VVLEN:    .SET   (IMEDD+5 & 01FH) / CELLL   
1BCE                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1BCE                VVNAME:   .SET   $   
1BCE   4E 05 1C 1C            DW   vvCODE,vvLINK   
1BD2                VVLINK:   .SET   $   
1BD2   45 55 4E 54 49 4C      DB   IMEDD+5,"UNTIL"   
054E                          .ORG   vvCODE   
054E   00                     NOP      
054F   CD E0 05               CALL   doLIST   
0552   C2 03 E4 0D A6 03 16 06 DW   COMPI,QBRAN,COMMA,EXIT   
055A                             ;   AGAIN       ( a -- )
055A                             ;               Terminate a BEGIN-AGAIN infinite loop structure.
055A                          ;*Macro unroll: mCOLON  IMEDD+5,'AGAIN',AGAIN
055A                          ;*Macro unroll:  mCODE IMEDD+5, "AGAIN", AGAIN
055A                          ALIGN   2   
055A                AGAIN:       
055A                VVCODE:   .SET   $   
055A                VVLEN:    .SET   (IMEDD+5 & 01FH) / CELLL   
1B84                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1B84                VVNAME:   .SET   $   
1B84   5A 05 D2 1B            DW   vvCODE,vvLINK   
1B88                VVLINK:   .SET   $   
1B88   45 41 47 41 49 4E      DB   IMEDD+5,"AGAIN"   
055A                          .ORG   vvCODE   
055A   00                     NOP      
055B   CD E0 05               CALL   doLIST   
055E   C2 03 F0 0D A6 03 16 06 DW   COMPI,BRAN,COMMA,EXIT   
0566                             ;   IF          ( -- A )
0566                             ;               Begin a conditional branch structure.
0566                          ;*Macro unroll: mCOLON  IMEDD+2,'IF',IFF
0566                          ;*Macro unroll:  mCODE IMEDD+2, "IF", IFF
0566                          ALIGN   2   
0566                IFF:         
0566                VVCODE:   .SET   $   
0566                VVLEN:    .SET   (IMEDD+2 & 01FH) / CELLL   
1B3C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1B3C                VVNAME:   .SET   $   
1B3C   66 05 88 1B            DW   vvCODE,vvLINK   
1B40                VVLINK:   .SET   $   
1B40   42 49 46               DB   IMEDD+2,"IF"   
0566                          .ORG   vvCODE   
0566   00                     NOP      
0567   CD E0 05               CALL   doLIST   
056A   C2 03 E4 0D 9C 0E      DW   COMPI,QBRAN,HERE   
0570   EE 05 00 00 A6 03 16 06 DW   DOLIT,0,COMMA,EXIT   
0578                             ;   AHEAD       ( -- A )
0578                             ;               Compile a forward branch instruction.
0578                          ;*Macro unroll: mCOLON  IMEDD+5,'AHEAD',AHEAD
0578                          ;*Macro unroll:  mCODE IMEDD+5, "AHEAD", AHEAD
0578                          ALIGN   2   
0578                AHEAD:       
0578                VVCODE:   .SET   $   
0578                VVLEN:    .SET   (IMEDD+5 & 01FH) / CELLL   
1AF2                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1AF2                VVNAME:   .SET   $   
1AF2   78 05 40 1B            DW   vvCODE,vvLINK   
1AF6                VVLINK:   .SET   $   
1AF6   45 41 48 45 41 44      DB   IMEDD+5,"AHEAD"   
0578                          .ORG   vvCODE   
0578   00                     NOP      
0579   CD E0 05               CALL   doLIST   
057C   C2 03 F0 0D 9C 0E EE 05 00 00 A6 03 16 06 DW   COMPI,BRAN,HERE,DOLIT,0,COMMA,EXIT   
058A                             ;   REPEAT      ( A a -- )
058A                             ;               Terminate a BEGIN-WHILE-REPEAT indefinite loop.
058A                          ;*Macro unroll: mCOLON  IMEDD+6,'REPEAT',REPEA
058A                          ;*Macro unroll:  mCODE IMEDD+6, "REPEAT", REPEA
058A                          ALIGN   2   
058A                REPEA:       
058A                VVCODE:   .SET   $   
058A                VVLEN:    .SET   (IMEDD+6 & 01FH) / CELLL   
1AA6                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1AA6                VVNAME:   .SET   $   
1AA6   8A 05 F6 1A            DW   vvCODE,vvLINK   
1AAA                VVLINK:   .SET   $   
1AAA   46 52 45 50 45 41 54   DB   IMEDD+6,"REPEAT"   
058A                          .ORG   vvCODE   
058A   00                     NOP      
058B   CD E0 05               CALL   doLIST   
058E   5A 05 9C 0E 00 10 0A 0E 16 06 DW   AGAIN,HERE,SWAP,STORE,EXIT   
0598                             ;   THEN        ( A -- )
0598                             ;               Terminate a conditional branch structure.
0598                          ;*Macro unroll: mCOLON  IMEDD+4,'THEN',THENN
0598                          ;*Macro unroll:  mCODE IMEDD+4, "THEN", THENN
0598                          ALIGN   2   
0598                THENN:       
0598                VVCODE:   .SET   $   
0598                VVLEN:    .SET   (IMEDD+4 & 01FH) / CELLL   
1A5C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1A5C                VVNAME:   .SET   $   
1A5C   98 05 AA 1A            DW   vvCODE,vvLINK   
1A60                VVLINK:   .SET   $   
1A60   44 54 48 45 4E         DB   IMEDD+4,"THEN"   
0598                          .ORG   vvCODE   
0598   00                     NOP      
0599   CD E0 05               CALL   doLIST   
059C   9C 0E 00 10 0A 0E 16 06 DW   HERE,SWAP,STORE,EXIT   
05A4                             ;   AFT         ( a -- a A )
05A4                             ;               Jump to THEN in a FOR-AFT-THEN-NEXT loop the 1st time through.
05A4                          ;*Macro unroll: mCOLON  IMEDD+3,'AFT',AFT
05A4                          ;*Macro unroll:  mCODE IMEDD+3, "AFT", AFT
05A4                          ALIGN   2   
05A4                AFT:         
05A4                VVCODE:   .SET   $   
05A4                VVLEN:    .SET   (IMEDD+3 & 01FH) / CELLL   
1A14                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1A14                VVNAME:   .SET   $   
1A14   A4 05 60 1A            DW   vvCODE,vvLINK   
1A18                VVLINK:   .SET   $   
1A18   43 41 46 54            DB   IMEDD+3,"AFT"   
05A4                          .ORG   vvCODE   
05A4   00                     NOP      
05A5   CD E0 05               CALL   doLIST   
05A8   FC 0F 78 05 3A 05 00 10 16 06 DW   DROP,AHEAD,BEGIN,SWAP,EXIT   
05B2                             ;   ELSE        ( A -- A )
05B2                             ;               Start the false clause in an IF-ELSE-THEN structure.
05B2                          ;*Macro unroll: mCOLON  IMEDD+4,'ELSE',ELSEE
05B2                          ;*Macro unroll:  mCODE IMEDD+4, "ELSE", ELSEE
05B2                          ALIGN   2   
05B2                ELSEE:       
05B2                VVCODE:   .SET   $   
05B2                VVLEN:    .SET   (IMEDD+4 & 01FH) / CELLL   
19CA                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
19CA                VVNAME:   .SET   $   
19CA   B2 05 18 1A            DW   vvCODE,vvLINK   
19CE                VVLINK:   .SET   $   
19CE   44 45 4C 53 45         DB   IMEDD+4,"ELSE"   
05B2                          .ORG   vvCODE   
05B2   00                     NOP      
05B3   CD E0 05               CALL   doLIST   
05B6   78 05 00 10 98 05 16 06 DW   AHEAD,SWAP,THENN,EXIT   
05BE                             ;   WHILE       ( a -- A a )
05BE                             ;               Conditional branch out of a BEGIN-WHILE-REPEAT loop.
05BE                          ;*Macro unroll: mCOLON  IMEDD+5,'WHILE',WHILE
05BE                          ;*Macro unroll:  mCODE IMEDD+5, "WHILE", WHILE
05BE                          ALIGN   2   
05BE                WHILE:       
05BE                VVCODE:   .SET   $   
05BE                VVLEN:    .SET   (IMEDD+5 & 01FH) / CELLL   
1980                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1980                VVNAME:   .SET   $   
1980   BE 05 CE 19            DW   vvCODE,vvLINK   
1984                VVLINK:   .SET   $   
1984   45 57 48 49 4C 45      DB   IMEDD+5,"WHILE"   
05BE                          .ORG   vvCODE   
05BE   00                     NOP      
05BF   CD E0 05               CALL   doLIST   
05C2   66 05 00 10 16 06      DW   IFF,SWAP,EXIT   
05C8                             ;   ABORT"      ( -- ; <string> )
05C8                             ;               Conditional abort with an error message.
05C8                             ;   $"          ( -- ; <string> )
05C8                             ;               Compile an inline string literal.
05C8                             ;   ."          ( -- ; <string> )
05C8                             ;               Compile an inline string literal to be typed out at run time.
05C8                             ;   UNLOOP	( -- ) ( R: loop-sys -- )	\ CORE
05C8                             ;		Discard loop-control parameters for the current nesting level.
05C8                             ;		An UNLOOP is required for each nesting level before the
05C8                             ;		definition may be EXITed.
05C8                          ;*Macro unroll: mCOLON	COMPO+6,'UNLOOP',UNLOOP
05C8                          ;*Macro unroll:  mCODE COMPO+6, "UNLOOP", UNLOOP
05C8                          ALIGN   2   
05C8                UNLOOP:      
05C8                VVCODE:   .SET   $   
05C8                VVLEN:    .SET   (COMPO+6 & 01FH) / CELLL   
1954                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1954                VVNAME:   .SET   $   
1954   C8 05 84 19            DW   vvCODE,vvLINK   
1958                VVLINK:   .SET   $   
1958   26 55 4E 4C 4F 4F 50   DB   COMPO+6,"UNLOOP"   
05C8                          .ORG   vvCODE   
05C8   00                     NOP      
05C9   CD E0 05               CALL   doLIST   
05CC   EA 0F EA 0F EA 0F 2C 10 DC 0F 16 06 DW   RFrom,RFrom,RFrom,DDROP,ToR,EXIT   
05D8                             ;   doCONST	( -- x )
05D8                             ;	Run-time routine of CONSTANT and VARIABLE.
05D8                          ;*Macro unroll: hCODE	COMPO+7, 'doCONST', DoCONST
05D8                          ALIGN   2   
05D8                DOCONST:      
05D8   E1                     POP   HL   ;10t
05D9   C5                     PUSH   BC   ;11t
05DA   4E                     LD   C,(HL)   ; 7t
05DB   23                     INC   HL   ; 6t
05DC   46                     LD   B,(HL)   ; 7t
05DD                          ;*Macro unroll:  mNEXT
05DD   EB                     EX   DE,HL   
05DE                          ;*Macro unroll:  mNEXTHL                         ; 34t
05DE   FD E9                  JP   (IY)   ; 34t
05E0                             ;   doLIST	( -- ) ( R: -- nest-sys )
05E0                             ;	Process colon list.
05E0                          ;*Macro unroll: hCODE	COMPO+6, 'doLIST', DoLIST
05E0                          ALIGN   2   
05E0                DOLIST:      
05E0   DD 2B                  DEC   IX   ;10t
05E2   DD 72 00               LD   (IX+0),D   ;19t
05E5   DD 2B                  DEC   IX   ;10t
05E7   DD 73 00               LD   (IX+0),E   ;19t
05EA   E1                     POP   HL   ;10t
05EB                          ;*Macro unroll:  mNEXTHL							
05EB   FD E9                  JP   (IY)   
05ED                             ;   doLIT	( -- x )
05ED                             ;	Push an inline literal.
05ED                          ;*Macro unroll: hCODE	COMPO+5, 'doLIT', DoLIT
05ED                          ALIGN   2   
05EE                DOLIT:       
05EE   C5                     PUSH   BC   ; 11t
05EF   EB                     EX   DE,HL   ; 4t
05F0   4E                     LD   C,(HL)   ; 7t
05F1   23                     INC   HL   ; 6t
05F2   46                     LD   B,(HL)   ; 7t
05F3   23                     INC   HL   ; 6t
05F4                          ;*Macro unroll:  mNEXTHL
05F4   FD E9                  JP   (IY)   
05F6                             ;   doVAR       ( -- a )
05F6                             ;   Run time routine for VARIABLE and CREATE.
05F6                          ;*Macro unroll: hCOLON  COMPO+5, 'doVAR', DoVAR
05F6                          ;*Macro unroll:  hCODE COMPO+5, "doVAR", DoVAR
05F6                          ALIGN   2   
05F6                DOVAR:       
05F6   00                     NOP      
05F7   CD E0 05               CALL   doLIST   
05FA   EA 0F 16 06            DW   RFROM,EXIT   
05FE                             ;   UP          ( -- a )
05FE                             ;   Pointer to the user area.
05FE                          ;*Macro unroll: hCOLON  2, 'UP', UP
05FE                          ;*Macro unroll:  hCODE 2, "UP", UP
05FE                          ALIGN   2   
05FE                UP:          
05FE   00                     NOP      
05FF   CD E0 05               CALL   doLIST   
0602   F6 05                  DW   DoVAR   
0604   00 24                  DW   UPP   
0606                             ;   doUSER      ( -- a )
0606                             ;   Run time routine for user variables.
0606                          ;*Macro unroll: hCOLON  COMPO+6,'doUSER',DOUSE
0606                          ;*Macro unroll:  hCODE COMPO+6, "doUSER", DOUSE
0606                          ALIGN   2   
0606                DOUSE:       
0606   00                     NOP      
0607   CD E0 05               CALL   doLIST   
060A   EA 0F 14 0E FE 05 14 0E 5C 01 16 06 DW   RFROM,AT,UP,AT,PLUS,EXIT   
0616                             ;   EXIT	( -- ) ( R: nest-sys -- )	\ CORE
0616                             ;	Return control to the calling definition.
0616                          ;*Macro unroll: mCODE	COMPO+4, 'EXIT', EXIT
0616                          ALIGN   2   
0616                EXIT:        
0616                VVCODE:   .SET   $   
0616                VVLEN:    .SET   (COMPO+4 & 01FH) / CELLL   
192A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
192A                VVNAME:   .SET   $   
192A   16 06 58 19            DW   vvCODE,vvLINK   
192E                VVLINK:   .SET   $   
192E   24 45 58 49 54         DB   COMPO+4,"EXIT"   
0616                          .ORG   vvCODE   
0616   DD 6E 00               LD   L,(IX+0)   
0619   DD 23                  INC   IX   
061B   DD 66 00               LD   H,(IX+0)   
061E   DD 23                  INC   IX   
0620                          ;*Macro unroll:  mNEXTHL
0620   FD E9                  JP   (IY)   
0622                             ;   doDO	( n1|u1 n2|u2 -- ) ( R: -- n1 n2-n1-max_negative )
0622                             ;		Run-time funtion of DO.
0622                             ; 
0622                             ;   : doDO	>R max-negative + R> OVER - SWAP R> SWAP >R SWAP >R >R ;
0622                          ;*Macro unroll: hCOLON	COMPO+4,'doDO',DoDO
0622                          ;*Macro unroll:  hCODE COMPO+4, "doDO", DoDO
0622                          ALIGN   2   
0622                DODO:        
0622   00                     NOP      
0623   CD E0 05               CALL   doLIST   
0626   DC 0F EE 05 00 80 5C 01 EA 0F DW   ToR,DoLIT,MaxNegative,Plus,RFrom   
0630   08 10 9E 01 00 10 EA 0F 00 10 DC 0F 00 10 DC 0F DC 0F 16 06 DW   OVER,SUBB,SWAP,RFrom,SWAP,ToR,SWAP,ToR,ToR,EXIT   
0644                             ;   doLOOP	( -- ) ( R: loop-sys1 -- | loop-sys2 )
0644                             ;		Run time routine for LOOP.
0644                          ;*Macro unroll: hCODE	COMPO+6,'doLOOP',DoLOOP
0644                          ALIGN   2   
0644                DOLOOP:      
0644   DD E5                  PUSH   IX   ; 15t
0646   E1                     POP   HL   ; 10t
0647   34                     INC   (HL)   ; 11t
0648   28 07                  JR   Z,DOLOOP2   ; 12/7t a fast dec is ok, only
064A                DOLOOP1:      
064A   1A                     LD   A,(DE)   ; 7t go back to the loop
064B   6F                     LD   L,A   ; 4t
064C   13                     INC   DE   ; 6t
064D   1A                     LD   A,(DE)   ; 7t
064E   67                     LD   H,A   ; 4t
064F                          ;*Macro unroll: 	mNEXTHL
064F   FD E9                  JP   (IY)   
0651                DOLOOP2:      
0651   23                     INC   HL   ; 6t
0652   34                     INC   (HL)   ;11t
0653   E2 4A 06               JP   PO,DOLOOP1   ;10/7t ?loop end
0656   EB                     EX   DE,HL   ; 4t yes,continue past the BRAN offset
0657   11 04 00               LD   DE,4   ;10t clear return stack
065A   DD 19                  ADD   IX,DE   ;15h
065C   23                     INC   HL   ; 6t
065D   23                     INC   HL   ; 6t
065E                          ;*Macro unroll: 	mNEXTHL
065E   FD E9                  JP   (IY)   
0660                             ;   do+LOOP	( n -- ) ( R: loop-sys1 -- | loop-sys2 )
0660                             ;		Run time routine for +LOOP.
0660                          ;*Macro unroll: hCODE	COMPO+7,'do+LOOP',DoPLOOP
0660                          ALIGN   2   
0660                DOPLOOP:      
0660   E1                     POP   HL   ;10t this will be the new TOS
0661   C5                     PUSH   BC   ;11t
0662   44                     LD   B,H   ; 4t
0663   4D                     LD   C,L   ; 4t
0664   D9                     EXX      ; 4t
0665   C1                     POP   BC   ;10t old TOS = loop increment
0666   DD 6E 00               LD   L,(IX+0)   ;19t
0669   DD 66 01               LD   H,(IX+1)   ;19t
066C   B7                     OR   A   ; 4t clear carry
066D   ED 4A                  ADC   HL,BC   ;15t
066F   EA 80 06               JP   PE,DOPLP1   ;10/7t ?loop end
0672   DD 75 00               LD   (IX+0),L   ;19t   no, go back
0675   DD 74 01               LD   (IX+1),H   ;19t
0678   D9                     EXX      ; 4t
0679   1A                     LD   A,(DE)   ; 7t go back to the loop
067A   6F                     LD   L,A   ; 4t
067B   13                     INC   DE   ; 6t
067C   1A                     LD   A,(DE)   ; 7t
067D   67                     LD   H,A   ; 4t
067E                          ;*Macro unroll: 	mNEXTHL
067E   FD E9                  JP   (IY)   
0680                DOPLP1:      
0680   01 04 00               LD   BC,4   ;10t clear return stack
0683   DD 09                  ADD   IX,BC   ;15h
0685   D9                     EXX      ; 4t
0686   13                     INC   DE   ; 6t yes,continue past the BRAN offset
0687   13                     INC   DE   ; 6t
0688                          ;*Macro unroll: 	mNEXT
0688   EB                     EX   DE,HL   
0689                          ;*Macro unroll:  mNEXTHL                         ; 34t
0689   FD E9                  JP   (IY)   ; 34t
068B                             ;   next        ( -- )
068B                             ;               Run time code for the single index loop.
068B                             ;               : next ( -- ) \ hilevel model
068B                             ;                 r> r> dup if 1 - >r @ >r exit then drop cell+ >r ;
068B                          ;*Macro unroll: mCODE   COMPO+4,'next',DONXT
068B                          ALIGN   2   
068C                DONXT:       
068C                VVCODE:   .SET   $   
068C                VVLEN:    .SET   (COMPO+4 & 01FH) / CELLL   
1900                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1900                VVNAME:   .SET   $   
1900   8C 06 2E 19            DW   vvCODE,vvLINK   
1904                VVLINK:   .SET   $   
1904   24 6E 65 78 74         DB   COMPO+4,"next"   
068C                          .ORG   vvCODE   
068C   DD E5                  PUSH   IX   
068E   E1                     POP   HL   ; load rp into HL
068F   7E                     LD   A,(HL)   ; a = low byte of r@
0690   B7                     OR   A   
0691   20 10                  JR   NZ,DECLOW   ; low > 0 goto dec low
0693   23                     INC   HL   
0694   7E                     LD   A,(HL)   ; a = high byte of r@
0695   B7                     OR   A   
0696   20 09                  JR   NZ,DECHILO   ; high > 0 goto dec hi dec lo
0698   23                     INC   HL   
0699   E5                     PUSH   HL   
069A   DD E1                  POP   IX   ; pop r@
069C   13                     INC   DE   ; IP = skip following word
069D   13                     INC   DE   
069E                          ;*Macro unroll:  mNEXT                               ; continue
069E   EB                     EX   DE,HL   ; continue
069F                          ;*Macro unroll:  mNEXTHL                         ; 34t
069F   FD E9                  JP   (IY)   ; 34t
06A1                DECHILO:      
06A1   35                     DEC   (HL)   ; dec high byte of r@
06A2   2B                     DEC   HL   
06A3                DECLOW:      
06A3   35                     DEC   (HL)   ; dec low byte of r@
06A4   6B                     LD   L,E   ; DE points to location of loop address
06A5   62                     LD   H,D   
06A6   5E                     LD   E,(HL)   ; DE points to loop address
06A7   23                     INC   HL   
06A8   56                     LD   D,(HL)   
06A9                          ;*Macro unroll:  mNEXT                               ; continue to loop address
06A9   EB                     EX   DE,HL   ; continue to loop address
06AA                          ;*Macro unroll:  mNEXTHL                         ; 34t
06AA   FD E9                  JP   (IY)   ; 34t
06AC                             ;   DIGIT       ( u -- c )
06AC                             ;               Convert digit u to a character.
06AC                          ;*Macro unroll: hCOLON  5,'DIGIT',DIGIT
06AC                          ;*Macro unroll:  hCODE 5, "DIGIT", DIGIT
06AC                          ALIGN   2   
06AC                DIGIT:       
06AC   00                     NOP      
06AD   CD E0 05               CALL   doLIST   
06B0   EE 05 09 00 08 10 F0 01 DW   DOLIT,9,OVER,LESS   
06B8   EE 05 07 00 3E 01 5C 01 DW   DOLIT,7,ANDD,PLUS   
06C0   EE 05 5C 01 16 06      DW   DOLIT,"0",PLUS,EXIT   
06C6                             ;   EXTRACT     ( n base -- n c )
06C6                             ;               Extract the least significant digit from n.
06C6                          ;*Macro unroll: hCOLON  7,'EXTRACT',EXTRC
06C6                          ;*Macro unroll:  hCODE 7, "EXTRACT", EXTRC
06C6                          ALIGN   2   
06C6                EXTRC:       
06C6   00                     NOP      
06C7   CD E0 05               CALL   doLIST   
06CA   EE 05 00 00 00 10 56 02 DW   DOLIT,0,SWAP,UMMOD   
06D2   00 10 AC 06 16 06      DW   SWAP,DIGIT,EXIT   
06D8                             ;   <#          ( -- )
06D8                             ;               Initiate the numeric output process.
06D8                          ;*Macro unroll: mCOLON  2,'<#',BDIGS
06D8                          ;*Macro unroll:  mCODE 2, "<#", BDIGS
06D8                          ALIGN   2   
06D8                BDIGS:       
06D8                VVCODE:   .SET   $   
06D8                VVLEN:    .SET   (2 & 01FH) / CELLL   
18F8                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
18F8                VVNAME:   .SET   $   
18F8   D8 06 04 19            DW   vvCODE,vvLINK   
18FC                VVLINK:   .SET   $   
18FC   02 3C 23               DB   2,"<#"   
06D8                          .ORG   vvCODE   
06D8   00                     NOP      
06D9   CD E0 05               CALL   doLIST   
06DC   A6 0E F8 10 0A 0E 16 06 DW   PAD,HLD,STORE,EXIT   
06E4                             ;   HOLD        ( c -- )
06E4                             ;               Insert a character into the numeric output string.
06E4                          ;*Macro unroll: mCOLON  4,'HOLD',HOLD
06E4                          ;*Macro unroll:  mCODE 4, "HOLD", HOLD
06E4                          ALIGN   2   
06E4                HOLD:        
06E4                VVCODE:   .SET   $   
06E4                VVLEN:    .SET   (4 & 01FH) / CELLL   
18EE                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
18EE                VVNAME:   .SET   $   
18EE   E4 06 FC 18            DW   vvCODE,vvLINK   
18F2                VVLINK:   .SET   $   
18F2   04 48 4F 4C 44         DB   4,"HOLD"   
06E4                          .ORG   vvCODE   
06E4   00                     NOP      
06E5   CD E0 05               CALL   doLIST   
06E8   F8 10 14 0E EE 05 01 00 9E 01 DW   HLD,AT,DOLIT,1,SUBB   
06F2   F8 0F F8 10 0A 0E 1C 0E 16 06 DW   DUPP,HLD,STORE,CSTOR,EXIT   
06FC                             ;   #           ( u -- u )
06FC                             ;               Extract one digit from u and append the digit to output string.
06FC                          ;*Macro unroll: mCOLON  1,'#',DIG
06FC                          ;*Macro unroll:  mCODE 1, "#", DIG
06FC                          ALIGN   2   
06FC                DIG:         
06FC                VVCODE:   .SET   $   
06FC                VVLEN:    .SET   (1 & 01FH) / CELLL   
18E8                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
18E8                VVNAME:   .SET   $   
18E8   FC 06 F2 18            DW   vvCODE,vvLINK   
18EC                VVLINK:   .SET   $   
18EC   01 23                  DB   1,"#"   
06FC                          .ORG   vvCODE   
06FC   00                     NOP      
06FD   CD E0 05               CALL   doLIST   
0700   B8 10 14 0E C6 06 E4 06 16 06 DW   BASE,AT,EXTRC,HOLD,EXIT   
070A                             ;   #S          ( u -- 0 )
070A                             ;               Convert u until all digits are added to the output string.
070A                          ;*Macro unroll: mCOLON  2,'#S',DIGS
070A                          ;*Macro unroll:  mCODE 2, "#S", DIGS
070A                          ALIGN   2   
070A                DIGS:        
070A                VVCODE:   .SET   $   
070A                VVLEN:    .SET   (2 & 01FH) / CELLL   
18E0                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
18E0                VVNAME:   .SET   $   
18E0   0A 07 EC 18            DW   vvCODE,vvLINK   
18E4                VVLINK:   .SET   $   
18E4   02 23 53               DB   2,"#S"   
070A                          .ORG   vvCODE   
070A   00                     NOP      
070B   CD E0 05               CALL   doLIST   
070E                DIGS1:       
070E   FC 06 F8 0F            DW   DIG,DUPP   
0712   E4 0D 1A 07            DW   QBRAN,DIGS2   
0716   F0 0D 0E 07            DW   BRAN,DIGS1   
071A                DIGS2:       
071A   16 06                  DW   EXIT   
071C                             ;   SIGN        ( n -- )
071C                             ;               Add a minus sign to the numeric output string.
071C                          ;*Macro unroll: mCOLON	4,'SIGN',SIGN
071C                          ;*Macro unroll:  mCODE 4, "SIGN", SIGN
071C                          ALIGN   2   
071C                SIGN:        
071C                VVCODE:   .SET   $   
071C                VVLEN:    .SET   (4 & 01FH) / CELLL   
18D6                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
18D6                VVNAME:   .SET   $   
18D6   1C 07 E4 18            DW   vvCODE,vvLINK   
18DA                VVLINK:   .SET   $   
18DA   04 53 49 47 4E         DB   4,"SIGN"   
071C                          .ORG   vvCODE   
071C   00                     NOP      
071D   CD E0 05               CALL   doLIST   
0720   36 01 E4 0D 2C 07      DW   ZLESS,QBRAN,SIGN1   
0726   EE 05 2D 00 E4 06      DW   DoLIT,MINUSS,HOLD   
072C                SIGN1:       
072C   16 06                  DW   EXIT   
072E                             ;   #>          ( w -- b u )
072E                             ;               Prepare the output string to be TYPE'd.
072E                          ;*Macro unroll: mCOLON  2,'#>',EDIGS
072E                          ;*Macro unroll:  mCODE 2, "#>", EDIGS
072E                          ALIGN   2   
072E                EDIGS:       
072E                VVCODE:   .SET   $   
072E                VVLEN:    .SET   (2 & 01FH) / CELLL   
18CE                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
18CE                VVNAME:   .SET   $   
18CE   2E 07 DA 18            DW   vvCODE,vvLINK   
18D2                VVLINK:   .SET   $   
18D2   02 23 3E               DB   2,"#>"   
072E                          .ORG   vvCODE   
072E   00                     NOP      
072F   CD E0 05               CALL   doLIST   
0732   FC 0F F8 10 14 0E      DW   DROP,HLD,AT   
0738   A6 0E 08 10 9E 01 16 06 DW   PAD,OVER,SUBB,EXIT   
0740                             ;   str         ( n -- b u )
0740                             ;               Convert a signed integer to a numeric string.
0740                          ;*Macro unroll: hCOLON  3,'str',STR
0740                          ;*Macro unroll:  hCODE 3, "str", STR
0740                          ALIGN   2   
0740                STR:         
0740   00                     NOP      
0741   CD E0 05               CALL   doLIST   
0744   F8 0F DC 0F A8 01      DW   DUPP,TOR,ABSS   
074A   D8 06 0A 07 EA 0F      DW   BDIGS,DIGS,RFROM   
0750   1C 07 2E 07 16 06      DW   SIGN,EDIGS,EXIT   
0756                             ;   HEX         ( -- )
0756                             ;               Use radix 16 as base for numeric conversions.
0756                          ;*Macro unroll: mCOLON  3,'HEX',HEX
0756                          ;*Macro unroll:  mCODE 3, "HEX", HEX
0756                          ALIGN   2   
0756                HEX:         
0756                VVCODE:   .SET   $   
0756                VVLEN:    .SET   (3 & 01FH) / CELLL   
18C6                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
18C6                VVNAME:   .SET   $   
18C6   56 07 D2 18            DW   vvCODE,vvLINK   
18CA                VVLINK:   .SET   $   
18CA   03 48 45 58            DB   3,"HEX"   
0756                          .ORG   vvCODE   
0756   00                     NOP      
0757   CD E0 05               CALL   doLIST   
075A   EE 05 10 00 B8 10 0A 0E 16 06 DW   DOLIT,16,BASE,STORE,EXIT   
0764                             ;   DECIMAL     ( -- )
0764                             ;               Use radix 10 as base for numeric conversions.
0764                          ;*Macro unroll: mCOLON  7,'DECIMAL',DECIMAL
0764                          ;*Macro unroll:  mCODE 7, "DECIMAL", DECIMAL
0764                          ALIGN   2   
0764                DECIMAL:      
0764                VVCODE:   .SET   $   
0764                VVLEN:    .SET   (7 & 01FH) / CELLL   
18BA                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
18BA                VVNAME:   .SET   $   
18BA   64 07 CA 18            DW   vvCODE,vvLINK   
18BE                VVLINK:   .SET   $   
18BE   07 44 45 43 49 4D 41 4C DB   7,"DECIMAL"   
0764                          .ORG   vvCODE   
0764   00                     NOP      
0765   CD E0 05               CALL   doLIST   
0768   EE 05 10 00 B8 10 0A 0E 16 06 DW   DOLIT,16,BASE,STORE,EXIT   
0772                             ;   BL          ( -- 32 )
0772                             ;               Return 32, the blank character.
0772                          ;*Macro unroll: mCOLON	2,'BL',BLANK
0772                          ;*Macro unroll:  mCODE 2, "BL", BLANK
0772                          ALIGN   2   
0772                BLANK:       
0772                VVCODE:   .SET   $   
0772                VVLEN:    .SET   (2 & 01FH) / CELLL   
18B2                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
18B2                VVNAME:   .SET   $   
18B2   72 07 BE 18            DW   vvCODE,vvLINK   
18B6                VVLINK:   .SET   $   
18B6   02 42 4C               DB   2,"BL"   
0772                          .ORG   vvCODE   
0772   00                     NOP      
0773   CD E0 05               CALL   doLIST   
0776   EE 05 20 00 16 06      DW   DoLIT,SPACEE,EXIT   
077C                             ;   >CHAR       ( c -- c )
077C                             ;               Filter non-printing characters.
077C                          ;*Macro unroll: hCOLON  5,'>CHAR',TCHAR
077C                          ;*Macro unroll:  hCODE 5, ">CHAR", TCHAR
077C                          ALIGN   2   
077C                TCHAR:       
077C   00                     NOP      
077D   CD E0 05               CALL   doLIST   
0780   EE 05 7F 00 3E 01 F8 0F DW   DoLIT,$7F,ANDD,DUPP   ;mask msb
0788   EE 05 7F 00            DW   DoLIT,127   
078C   EE 05 20 00 38 02      DW   DoLIT,SPACEE,WITHI   ;check for printable
0792   E4 0D 9C 07            DW   QBRAN,TCHA1   
0796   FC 0F EE 05 5F 00      DW   DROP,DoLIT,UNDERSC   ;replace non-printables
079C                TCHA1:       
079C   16 06                  DW   EXIT   
079E                             ;   DIGIT?      ( c base -- u t )
079E                             ;               Convert a character to its numeric value. A flag indicates success.
079E                          ;*Macro unroll: hCOLON  6,'DIGIT?',DIGTQ
079E                          ;*Macro unroll:  hCODE 6, "DIGIT?", DIGTQ
079E                          ALIGN   2   
079E                DIGTQ:       
079E   00                     NOP      
079F   CD E0 05               CALL   doLIST   
07A2   DC 0F EE 05 9E 01      DW   TOR,DOLIT,"0",SUBB   
07A8   EE 05 09 00 08 10 F0 01 DW   DOLIT,9,OVER,LESS   
07B0   E4 0D C4 07            DW   QBRAN,DGTQ1   
07B4   EE 05 07 00 9E 01      DW   DOLIT,7,SUBB   
07BA   F8 0F EE 05 0A 00 F0 01 48 01 DW   DUPP,DOLIT,10,LESS,ORR   
07C4                DGTQ1:       
07C4   F8 0F EA 0F CC 01 16 06 DW   DUPP,RFROM,ULESS,EXIT   
07CC                             ;   NUMBER?     ( a -- n T | a F )
07CC                             ;               Convert a number string to integer. Push a flag on tos.
07CC                          ;*Macro unroll: hCOLON  7,'NUMBER?',NUMBQ
07CC                          ;*Macro unroll:  hCODE 7, "NUMBER?", NUMBQ
07CC                          ALIGN   2   
07CC                NUMBQ:       
07CC   00                     NOP      
07CD   CD E0 05               CALL   doLIST   
07D0   B8 10 14 0E DC 0F EE 05 00 00 08 10 8A 0E DW   BASE,AT,TOR,DOLIT,0,OVER,COUNT   
07DE   08 10 24 0E EE 05 B8 01 DW   OVER,CAT,DOLIT,"$",EQUAL   
07E6   E4 0D FC 07            DW   QBRAN,NUMQ1   
07EA   56 07 00 10 EE 05 01 00 5C 01 DW   HEX,SWAP,DOLIT,1,PLUS   
07F4   00 10 EE 05 01 00 9E 01 DW   SWAP,DOLIT,1,SUBB   
07FC                NUMQ1:       
07FC   08 10 24 0E EE 05 B8 01 DC 0F DW   OVER,CAT,DOLIT,"-",EQUAL,TOR   
0806   00 10 2C 0E 9E 01 00 10 2C 0E 5C 01 10 10 DW   SWAP,RAT,SUBB,SWAP,RAT,PLUS,QDUP   
0814   E4 0D 66 08            DW   QBRAN,NUMQ6   
0818   EE 05 01 00 9E 01 DC 0F DW   DOLIT,1,SUBB,TOR   
0820                NUMQ2:       
0820   F8 0F DC 0F 24 0E B8 10 14 0E 9E 07 DW   DUPP,TOR,CAT,BASE,AT,DIGTQ   
082C   E4 0D 58 08            DW   QBRAN,NUMQ4   
0830   00 10 B8 10 14 0E 28 03 5C 01 EA 0F DW   SWAP,BASE,AT,STAR,PLUS,RFROM   
083C   EE 05 01 00 5C 01      DW   DOLIT,1,PLUS   
0842   8C 06 20 08            DW   DONXT,NUMQ2   
0846   2C 0E 00 10 FC 0F      DW   RAT,SWAP,DROP   
084C   E4 0D 52 08            DW   QBRAN,NUMQ3   
0850   72 01                  DW   NEGAT   
0852                NUMQ3:       
0852   00 10                  DW   SWAP   
0854   F0 0D 64 08            DW   BRAN,NUMQ5   
0858                NUMQ4:       
0858   EA 0F EA 0F 2C 10 2C 10 EE 05 00 00 DW   RFROM,RFROM,DDROP,DDROP,DOLIT,0   
0864                NUMQ5:       
0864   F8 0F                  DW   DUPP   
0866                NUMQ6:       
0866   EA 0F 2C 10            DW   RFROM,DDROP   
086A   EA 0F B8 10 0A 0E 16 06 DW   RFROM,BASE,STORE,EXIT   
0872                             ;   parse       ( b u c -- b u delta ; <string> )
0872                             ;               Scan string delimited by c. Return found string and its offset.
0872                          ;*Macro unroll: hCOLON  5,'parse',PARS
0872                          ;*Macro unroll:  hCODE 5, "parse", PARS
0872                          ALIGN   2   
0872                PARS:        
0872   00                     NOP      
0873   CD E0 05               CALL   doLIST   
0876   C0 10 0A 0E 08 10 DC 0F F8 0F DW   TEMP,STORE,OVER,TOR,DUPP   
0880   E4 0D 0E 09            DW   QBRAN,PARS8   
0884   EE 05 01 00 9E 01 C0 10 14 0E 72 07 B8 01 DW   DOLIT,1,SUBB,TEMP,AT,BLANK,EQUAL   
0892   E4 0D C0 08            DW   QBRAN,PARS3   
0896   DC 0F                  DW   TOR   
0898                PARS1:       
0898   72 07 08 10 24 0E      DW   BLANK,OVER,CAT   ;skip leading blanks ONLY
089E   9E 01 36 01 66 01      DW   SUBB,ZLESS,INVER   
08A4   E4 0D BE 08            DW   QBRAN,PARS2   
08A8   EE 05 01 00 5C 01      DW   DOLIT,1,PLUS   
08AE   8C 06 98 08            DW   DONXT,PARS1   
08B2   EA 0F FC 0F EE 05 00 00 F8 0F 16 06 DW   RFROM,DROP,DOLIT,0,DUPP,EXIT   
08BE                PARS2:       
08BE   EA 0F                  DW   RFROM   
08C0                PARS3:       
08C0   08 10 00 10            DW   OVER,SWAP   
08C4   DC 0F                  DW   TOR   
08C6                PARS4:       
08C6   C0 10 14 0E 08 10 24 0E 9E 01 DW   TEMP,AT,OVER,CAT,SUBB   ;scan for delimiter
08D0   C0 10 14 0E 72 07 B8 01 DW   TEMP,AT,BLANK,EQUAL   
08D8   E4 0D DE 08            DW   QBRAN,PARS5   
08DC   36 01                  DW   ZLESS   
08DE                PARS5:       
08DE   E4 0D F4 08            DW   QBRAN,PARS6   
08E2   EE 05 01 00 5C 01      DW   DOLIT,1,PLUS   
08E8   8C 06 C6 08            DW   DONXT,PARS4   
08EC   F8 0F DC 0F            DW   DUPP,TOR   
08F0   F0 0D 02 09            DW   BRAN,PARS7   
08F4                PARS6:       
08F4   EA 0F FC 0F F8 0F      DW   RFROM,DROP,DUPP   
08FA   EE 05 01 00 5C 01 DC 0F DW   DOLIT,1,PLUS,TOR   
0902                PARS7:       
0902   08 10 9E 01            DW   OVER,SUBB   
0906   EA 0F EA 0F 9E 01 16 06 DW   RFROM,RFROM,SUBB,EXIT   
090E                PARS8:       
090E   08 10 EA 0F 9E 01 16 06 DW   OVER,RFROM,SUBB,EXIT   
0916                             ;   PARSE       ( c -- b u ; <string> )
0916                             ;               Scan input stream and return counted string delimited by c.
0916                          ;*Macro unroll: mCOLON  5,'PARSE',PARSE
0916                          ;*Macro unroll:  mCODE 5, "PARSE", PARSE
0916                          ALIGN   2   
0916                PARSE:       
0916                VVCODE:   .SET   $   
0916                VVLEN:    .SET   (5 & 01FH) / CELLL   
18A8                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
18A8                VVNAME:   .SET   $   
18A8   16 09 B6 18            DW   vvCODE,vvLINK   
18AC                VVLINK:   .SET   $   
18AC   05 50 41 52 53 45      DB   5,"PARSE"   
0916                          .ORG   vvCODE   
0916   00                     NOP      
0917   CD E0 05               CALL   doLIST   
091A   DC 0F B4 0E D0 10 14 0E 5C 01 DW   TOR,TIB,INN,AT,PLUS   ;current input buffer pointer
0924   D8 10 14 0E D0 10 14 0E 9E 01 DW   NTIB,AT,INN,AT,SUBB   ;remaining count
092E   EA 0F 72 08 D0 10 58 0E 16 06 DW   RFROM,PARS,INN,PSTOR,EXIT   
0938                             ;   (           ( -- )
0938                             ;               Ignore following string up to next ) . A comment.
0938                          ;*Macro unroll: mCOLON  IMEDD+1,'(',PAREN
0938                          ;*Macro unroll:  mCODE IMEDD+1, "(", PAREN
0938                          ALIGN   2   
0938                PAREN:       
0938                VVCODE:   .SET   $   
0938                VVLEN:    .SET   (IMEDD+1 & 01FH) / CELLL   
1862                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1862                VVNAME:   .SET   $   
1862   38 09 AC 18            DW   vvCODE,vvLINK   
1866                VVLINK:   .SET   $   
1866   41 28                  DB   IMEDD+1,"("   
0938                          .ORG   vvCODE   
0938   00                     NOP      
0939   CD E0 05               CALL   doLIST   
093C   EE 05 16 09 2C 10 16 06 DW   DOLIT,")",PARSE,DDROP,EXIT   
0944                             ;   \           ( -- )
0944                             ;               Ignore following text till the end of line.
0944                          ;*Macro unroll: mCOLON  IMEDD+1,'||',BKSLA
0944                          ;*Macro unroll:  mCODE IMEDD+1, "||", BKSLA
0944                          ALIGN   2   
0944                BKSLA:       
0944                VVCODE:   .SET   $   
0944                VVLEN:    .SET   (IMEDD+1 & 01FH) / CELLL   
181C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
181C                VVNAME:   .SET   $   
181C   44 09 66 18            DW   vvCODE,vvLINK   
1820                VVLINK:   .SET   $   
1820   41 7C 7C               DB   IMEDD+1,"||"   
0944                          .ORG   vvCODE   
0944   00                     NOP      
0945   CD E0 05               CALL   doLIST   
0948   D8 10 14 0E D0 10 0A 0E 16 06 DW   NTIB,AT,INN,STORE,EXIT   
0952                             ;   CHAR        ( -- c )
0952                             ;               Parse next word and return its first character.
0952                          ;*Macro unroll: mCOLON  4,'CHAR',CHAR
0952                          ;*Macro unroll:  mCODE 4, "CHAR", CHAR
0952                          ALIGN   2   
0952                CHAR:        
0952                VVCODE:   .SET   $   
0952                VVLEN:    .SET   (4 & 01FH) / CELLL   
1812                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1812                VVNAME:   .SET   $   
1812   52 09 20 18            DW   vvCODE,vvLINK   
1816                VVLINK:   .SET   $   
1816   04 43 48 41 52         DB   4,"CHAR"   
0952                          .ORG   vvCODE   
0952   00                     NOP      
0953   CD E0 05               CALL   doLIST   
0956   72 07 16 09 FC 0F 24 0E 16 06 DW   BLANK,PARSE,DROP,CAT,EXIT   
0960                             ;   TOKEN       ( -- a ; <string> )
0960                             ;               Parse a word from input stream and copy it to name dictionary.
0960                          ;*Macro unroll: hCOLON  5,'TOKEN',TOKEN
0960                          ;*Macro unroll:  hCODE 5, "TOKEN", TOKEN
0960                          ALIGN   2   
0960                TOKEN:       
0960   00                     NOP      
0961   CD E0 05               CALL   doLIST   
0964   72 07 16 09 EE 05 1F 00 26 02 DW   BLANK,PARSE,DOLIT,31,MIN   
096E   20 11 14 0E 08 10 9E 01 74 03 DW   NP,AT,OVER,SUBB,CELLM   
0978   48 0F 16 06            DW   PACKS,EXIT   
097C                             ;   WORD        ( c -- a ; <string> )
097C                             ;               Parse a word from input stream and copy it to code dictionary.
097C                          ;*Macro unroll: mCOLON  4,'WORD',WORDD
097C                          ;*Macro unroll:  mCODE 4, "WORD", WORDD
097C                          ALIGN   2   
097C                WORDD:       
097C                VVCODE:   .SET   $   
097C                VVLEN:    .SET   (4 & 01FH) / CELLL   
1808                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1808                VVNAME:   .SET   $   
1808   7C 09 16 18            DW   vvCODE,vvLINK   
180C                VVLINK:   .SET   $   
180C   04 57 4F 52 44         DB   4,"WORD"   
097C                          .ORG   vvCODE   
097C   00                     NOP      
097D   CD E0 05               CALL   doLIST   
0980   16 09 9C 0E 48 0F 16 06 DW   PARSE,HERE,PACKS,EXIT   
0988                             ;   NAME>       ( na -- ca )
0988                             ;               Return a code address given a name address.
0988                          ;*Macro unroll: hCOLON  5,'NAME>',NAMET
0988                          ;*Macro unroll:  hCODE 5, "NAME>", NAMET
0988                          ALIGN   2   
0988                NAMET:       
0988   00                     NOP      
0989   CD E0 05               CALL   doLIST   
098C   74 03 74 03 14 0E 16 06 DW   CELLM,CELLM,AT,EXIT   
0994                             ;   SAME?       ( a a u -- a a f \ -0+ )
0994                             ;               Compare u cells in two strings. Return 0 if identical.
0994                          ;*Macro unroll: hCOLON  5,'SAME?',SAMEQ
0994                          ;*Macro unroll:  hCODE 5, "SAME?", SAMEQ
0994                          ALIGN   2   
0994                SAMEQ:       
0994   00                     NOP      
0995   CD E0 05               CALL   doLIST   
0998   DC 0F                  DW   TOR   
099A   F0 0D C0 09            DW   BRAN,SAME2   
099E   08 10 2C 0E 80 03 5C 01 14 0E SAME1:   DW   OVER,RAT,CELLS,PLUS,AT   
09A8   08 10 2C 0E 80 03 5C 01 14 0E DW   OVER,RAT,CELLS,PLUS,AT   
09B2   9E 01 10 10            DW   SUBB,QDUP   
09B6   E4 0D C0 09            DW   QBRAN,SAME2   
09BA   EA 0F FC 0F 16 06      DW   RFROM,DROP,EXIT   ;strings not equal
09C0   8C 06 9E 09  SAME2:    DW   DONXT,SAME1   
09C4   EE 05 00 00 16 06      DW   DOLIT,0,EXIT   ;strings equal
09CA                             ;   find        ( a va -- ca na | a F )
09CA                             ;               Search a vocabulary for a string. Return ca and na if succeeded.
09CA                          ;*Macro unroll: mCOLON  4,'find',FIND
09CA                          ;*Macro unroll:  mCODE 4, "find", FIND
09CA                          ALIGN   2   
09CA                FIND:        
09CA                VVCODE:   .SET   $   
09CA                VVLEN:    .SET   (4 & 01FH) / CELLL   
17FE                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
17FE                VVNAME:   .SET   $   
17FE   CA 09 0C 18            DW   vvCODE,vvLINK   
1802                VVLINK:   .SET   $   
1802   04 66 69 6E 64         DB   4,"find"   
09CA                          .ORG   vvCODE   
09CA   00                     NOP      
09CB   CD E0 05               CALL   doLIST   
09CE   00 10 F8 0F 24 0E      DW   SWAP,DUPP,CAT   
09D4   EE 05 02 00 02 03 C0 10 0A 0E DW   DOLIT,CELLL,SLASH,TEMP,STORE   
09DE   F8 0F 14 0E DC 0F 68 03 00 10 DW   DUPP,AT,TOR,CELLP,SWAP   
09E8   14 0E F8 0F  FIND1:    DW   AT,DUPP   
09EC   E4 0D 18 0A            DW   QBRAN,FIND6   
09F0   F8 0F 14 0E EE 05 1F 00 3E 01 2C 0E 52 01 DW   DUPP,AT,DOLIT,MASKK,ANDD,RAT,XORR   
09FE   E4 0D 0C 0A            DW   QBRAN,FIND2   
0A02   68 03 EE 05 FF FF      DW   CELLP,DOLIT,-1   ;true flag
0A08   F0 0D 14 0A            DW   BRAN,FIND3   
0A0C   68 03 C0 10 14 0E 94 09 FIND2:   DW   CELLP,TEMP,AT,SAMEQ   
0A14   F0 0D 24 0A  FIND3:    DW   BRAN,FIND4   
0A18   EA 0F FC 0F  FIND6:    DW   RFROM,DROP   
0A1C   00 10 74 03 00 10 16 06 DW   SWAP,CELLM,SWAP,EXIT   
0A24   E4 0D 30 0A  FIND4:    DW   QBRAN,FIND5   
0A28   74 03 74 03            DW   CELLM,CELLM   
0A2C   F0 0D E8 09            DW   BRAN,FIND1   
0A30   EA 0F FC 0F 00 10 FC 0F FIND5:   DW   RFROM,DROP,SWAP,DROP   
0A38   74 03                  DW   CELLM   
0A3A   F8 0F 88 09 00 10 16 06 DW   DUPP,NAMET,SWAP,EXIT   
0A42                             ;   NAME?       ( a -- ca na | a F )
0A42                             ;               Search all context vocabularies for a string.
0A42                          ;*Macro unroll: hCOLON  5,'NAME?',NAMEQ
0A42                          ;*Macro unroll:  hCODE 5, "NAME?", NAMEQ
0A42                          ALIGN   2   
0A42                NAMEQ:       
0A42   00                     NOP      
0A43   CD E0 05               CALL   doLIST   
0A46   08 11 F8 0F 7A 0E 52 01 DW   CNTXT,DUPP,DAT,XORR   ;?context=also
0A4E   E4 0D 54 0A            DW   QBRAN,NAMQ1   
0A52   74 03                  DW   CELLM   ;no, start with context
0A54   DC 0F        NAMQ1:    DW   TOR   
0A56   EA 0F 68 03 F8 0F DC 0F NAMQ2:   DW   RFROM,CELLP,DUPP,TOR   ;next in search order
0A5E   14 0E 10 10            DW   AT,QDUP   
0A62   E4 0D 74 0A            DW   QBRAN,NAMQ3   
0A66   CA 09 10 10            DW   FIND,QDUP   ;search vocabulary
0A6A   E4 0D 56 0A            DW   QBRAN,NAMQ2   
0A6E   EA 0F FC 0F 16 06      DW   RFROM,DROP,EXIT   ;found name
0A74   EA 0F FC 0F  NAMQ3:    DW   RFROM,DROP   ;name not found
0A78   EE 05 00 00 16 06      DW   DOLIT,0,EXIT   ;false flag
0A7E                             ;   CATCH       ( ca -- 0 | err# )
0A7E                             ;               Execute word at ca and set up an error frame for it.
0A7E                          ;*Macro unroll: mCOLON  5,'CATCH',CATCH
0A7E                          ;*Macro unroll:  mCODE 5, "CATCH", CATCH
0A7E                          ALIGN   2   
0A7E                CATCH:       
0A7E                VVCODE:   .SET   $   
0A7E                VVLEN:    .SET   (5 & 01FH) / CELLL   
17F4                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
17F4                VVNAME:   .SET   $   
17F4   7E 0A 02 18            DW   vvCODE,vvLINK   
17F8                VVLINK:   .SET   $   
17F8   05 43 41 54 43 48      DB   5,"CATCH"   
0A7E                          .ORG   vvCODE   
0A7E   00                     NOP      
0A7F   CD E0 05               CALL   doLIST   
0A82   46 0E DC 0F 00 11 14 0E DC 0F DW   SPAT,TOR,HANDL,AT,TOR   ;save error frame
0A8C   36 0E 00 11 0A 0E E0 0D DW   RPAT,HANDL,STORE,EXECU   ;execute
0A94   EA 0F 00 11 0A 0E      DW   RFROM,HANDL,STORE   ;restore error frame
0A9A   EA 0F FC 0F EE 05 00 00 16 06 DW   RFROM,DROP,DOLIT,0,EXIT   ;no error
0AA4                             ;   THROW       ( err# -- err# )
0AA4                             ;               Reset system to current local error frame an update error flag.
0AA4                          ;*Macro unroll: mCOLON  5,'THROW',THROW
0AA4                          ;*Macro unroll:  mCODE 5, "THROW", THROW
0AA4                          ALIGN   2   
0AA4                THROW:       
0AA4                VVCODE:   .SET   $   
0AA4                VVLEN:    .SET   (5 & 01FH) / CELLL   
17EA                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
17EA                VVNAME:   .SET   $   
17EA   A4 0A F8 17            DW   vvCODE,vvLINK   
17EE                VVLINK:   .SET   $   
17EE   05 54 48 52 4F 57      DB   5,"THROW"   
0AA4                          .ORG   vvCODE   
0AA4   00                     NOP      
0AA5   CD E0 05               CALL   doLIST   
0AA8   00 11 14 0E 3E 0E      DW   HANDL,AT,RPSTO   ;restore return stack
0AAE   EA 0F 00 11 0A 0E      DW   RFROM,HANDL,STORE   ;restore handler frame
0AB4   EA 0F 00 10 DC 0F 50 0E DW   RFROM,SWAP,TOR,SPSTO   ;restore data stack
0ABC   FC 0F EA 0F 16 06      DW   DROP,RFROM,EXIT   
0AC2                             ;   NULL$       ( -- a )
0AC2                             ;               Return address of a null string with zero count.
0AC2                          ;*Macro unroll: hCOLON  5,'NULL$',NULLS
0AC2                          ;*Macro unroll:  hCODE 5, "NULL$", NULLS
0AC2                          ALIGN   2   
0AC2                NULLS:       
0AC2   00                     NOP      
0AC3   CD E0 05               CALL   doLIST   
0AC6   F6 05                  DW   DOVAR   ;emulate CREATE
0AC8   00 00                  DW   0   
0ACA   63 6F 79 6F 74 65      DB   99,111,121,111,116,101   
0AD0                          ALIGN   2   
0AD0                             ;   ABORT       ( -- )
0AD0                             ;               Reset data stack and jump to QUIT.
0AD0                          ;*Macro unroll: mCOLON  5,'ABORT',ABORT
0AD0                          ;*Macro unroll:  mCODE 5, "ABORT", ABORT
0AD0                          ALIGN   2   
0AD0                ABORT:       
0AD0                VVCODE:   .SET   $   
0AD0                VVLEN:    .SET   (5 & 01FH) / CELLL   
17E0                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
17E0                VVNAME:   .SET   $   
17E0   D0 0A EE 17            DW   vvCODE,vvLINK   
17E4                VVLINK:   .SET   $   
17E4   05 41 42 4F 52 54      DB   5,"ABORT"   
0AD0                          .ORG   vvCODE   
0AD0   00                     NOP      
0AD1   CD E0 05               CALL   doLIST   
0AD4   C2 0A A4 0A            DW   NULLS,THROW   
0AD8                             ;   abort"      ( f -- )
0AD8                             ;               Run time routine of ABORT" . Abort with a message.
0AD8                          ;*Macro unroll: mCOLON  COMPO+6,'abort|',ABORQ
0AD8                          ;*Macro unroll:  mCODE COMPO+6, "abort|", ABORQ
0AD8                          ALIGN   2   
0AD8                ABORQ:       
0AD8                VVCODE:   .SET   $   
0AD8                VVLEN:    .SET   (COMPO+6 & 01FH) / CELLL   
17B4                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
17B4                VVNAME:   .SET   $   
17B4   D8 0A E4 17            DW   vvCODE,vvLINK   
17B8                VVLINK:   .SET   $   
17B8   26 61 62 6F 72 74 7C   DB   COMPO+6,"abort|"   
0AD8                          .ORG   vvCODE   
0AD8   00                     NOP      
0AD9   CD E0 05               CALL   doLIST   
0ADC   E4 0D E4 0A            DW   QBRAN,ABOR1   ;text flag
0AE0   40 0C A4 0A            DW   DOSTR,THROW   ;pass error string
0AE4                ABOR1:       
0AE4   40 0C FC 0F 16 06      DW   DOSTR,DROP,EXIT   ;drop error
0AEA                             ;   $INTERPRET  ( a -- )
0AEA                             ;               Interpret a word. If failed, try to convert it to an integer.
0AEA                          ;*Macro unroll: hCOLON  10,'$INTERPRET',INTER
0AEA                          ;*Macro unroll:  hCODE 10, "$INTERPRET", INTER
0AEA                          ALIGN   2   
0AEA                INTER:       
0AEA   00                     NOP      
0AEB   CD E0 05               CALL   doLIST   
0AEE   42 0A 10 10            DW   NAMEQ,QDUP   ;?defined
0AF2   E4 0D 12 0B            DW   QBRAN,INTE1   
0AF6   14 0E EE 05 20 00 3E 01 DW   AT,DOLIT,COMPO,ANDD   ;?compile only lexicon bits
0AFE                          ;*Macro unroll:  mDSTR   ABORQ,' compile only'
0AFE   D8 0A                  DW   ABORQ   
0B00                VVLEN:    .SET   $   
0B00   00 20 63 6F 6D 70 69 6C 65 20 6F 6E 6C 79 DB   0," compile only"   
0B0E                VVCODE:   .SET   $   
0B00                          .ORG   vvLEN   
0B00   0D                     DB   vvCODE - vvLEN - 1   
0B0E                          .ORG   vvCODE   
0B0E   E0 0D 16 06            DW   EXECU,EXIT   ;execute defined word
0B12                INTE1:       
0B12   F0 10 C0 0E            DW   TNUMB,ATEXE   ;convert a number
0B16   E4 0D 1C 0B            DW   QBRAN,INTE2   
0B1A   16 06                  DW   EXIT   
0B1C                INTE2:       
0B1C   A4 0A                  DW   THROW   ;error
0B1E                             ;   [           ( -- )
0B1E                             ;               Start the text interpreter.
0B1E                          ;*Macro unroll: mCOLON  IMEDD+1,'[',LBRAC
0B1E                          ;*Macro unroll:  mCODE IMEDD+1, "[", LBRAC
0B1E                          ALIGN   2   
0B1E                LBRAC:       
0B1E                VVCODE:   .SET   $   
0B1E                VVLEN:    .SET   (IMEDD+1 & 01FH) / CELLL   
176E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
176E                VVNAME:   .SET   $   
176E   1E 0B B8 17            DW   vvCODE,vvLINK   
1772                VVLINK:   .SET   $   
1772   41 5B                  DB   IMEDD+1,"["   
0B1E                          .ORG   vvCODE   
0B1E   00                     NOP      
0B1F   CD E0 05               CALL   doLIST   
0B22   EE 05 EA 0A E8 10 0A 0E 16 06 DW   DOLIT,INTER,TEVAL,STORE,EXIT   
0B2C                             ;   .OK         ( -- )
0B2C                             ;               Display "ok" only while interpreting.
0B2C                          ;*Macro unroll: mCOLON  3,'.OK',DOTOK
0B2C                          ;*Macro unroll:  mCODE 3, ".OK", DOTOK
0B2C                          ALIGN   2   
0B2C                DOTOK:       
0B2C                VVCODE:   .SET   $   
0B2C                VVLEN:    .SET   (3 & 01FH) / CELLL   
1766                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1766                VVNAME:   .SET   $   
1766   2C 0B 72 17            DW   vvCODE,vvLINK   
176A                VVLINK:   .SET   $   
176A   03 2E 4F 4B            DB   3,".OK"   
0B2C                          .ORG   vvCODE   
0B2C   00                     NOP      
0B2D   CD E0 05               CALL   doLIST   
0B30   EE 05 EA 0A E8 10 14 0E B8 01 DW   DOLIT,INTER,TEVAL,AT,EQUAL   
0B3A   E4 0D 44 0B            DW   QBRAN,DOTO1   
0B3E                          ;*Macro unroll:  mDSTR      DOTQP,' ok'
0B3E   60 0C                  DW   DOTQP   
0B40                VVLEN:    .SET   $   
0B40   00 20 6F 6B            DB   0," ok"   
0B44                VVCODE:   .SET   $   
0B40                          .ORG   vvLEN   
0B40   03                     DB   vvCODE - vvLEN - 1   
0B44                          .ORG   vvCODE   
0B44   2E 0C 16 06  DOTO1:    DW   CR,EXIT   
0B48                             ;   ?STACK      ( -- )
0B48                             ;               Abort if the data stack underflows.
0B48                          ;*Macro unroll: hCOLON  6,'?STACK',QSTAC
0B48                          ;*Macro unroll:  hCODE 6, "?STACK", QSTAC
0B48                          ALIGN   2   
0B48                QSTAC:       
0B48   00                     NOP      
0B49   CD E0 05               CALL   doLIST   
0B4C   62 10 36 01            DW   DEPTH,ZLESS   ;check only for underflow
0B50                          ;*Macro unroll:  mDSTR      ABORQ,' underflow'
0B50   D8 0A                  DW   ABORQ   
0B52                VVLEN:    .SET   $   
0B52   00 20 75 6E 64 65 72 66 6C 6F 77 DB   0," underflow"   
0B5D                VVCODE:   .SET   $   
0B52                          .ORG   vvLEN   
0B52   0A                     DB   vvCODE - vvLEN - 1   
0B5D                          .ORG   vvCODE   
0B5D   16 06                  DW   EXIT   
0B5F                             ;   EVAL        ( -- )
0B5F                             ;               Interpret the input stream.
0B5F                          ;*Macro unroll: mCOLON  4,'EVAL',EVAL
0B5F                          ;*Macro unroll:  mCODE 4, "EVAL", EVAL
0B5F                          ALIGN   2   
0B60                EVAL:        
0B60                VVCODE:   .SET   $   
0B60                VVLEN:    .SET   (4 & 01FH) / CELLL   
175C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
175C                VVNAME:   .SET   $   
175C   60 0B 6A 17            DW   vvCODE,vvLINK   
1760                VVLINK:   .SET   $   
1760   04 45 56 41 4C         DB   4,"EVAL"   
0B60                          .ORG   vvCODE   
0B60   00                     NOP      
0B61   CD E0 05               CALL   doLIST   
0B64                EVAL1:       
0B64   60 09 F8 0F 24 0E      DW   TOKEN,DUPP,CAT   ;?input stream empty
0B6A   E4 0D 78 0B            DW   QBRAN,EVAL2   
0B6E   E8 10 C0 0E 48 0B      DW   TEVAL,ATEXE,QSTAC   ;evaluate input, check stack
0B74   F0 0D 64 0B            DW   BRAN,EVAL1   
0B78                EVAL2:       
0B78   FC 0F B0 10 C0 0E 16 06 DW   DROP,TPROM,ATEXE,EXIT   ;prompt
0B80                             ;   PC!         ( uc p --  )
0B80                             ;               output uc to IO port p
0B80                             ;   PC@         ( p -- uc )
0B80                             ;               output uc to IO port p
0B80                             ;   !IO         ( -- )
0B80                             ;               Initialize the serial I/O devices.
0B80                          ;*Macro unroll: mCODE   3,'!IO', STOIO ;
0B80                          ALIGN   2   ; 
0B80                STOIO:       
0B80                VVCODE:   .SET   $   
0B80                VVLEN:    .SET   (3 & 01FH) / CELLL   
1754                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1754                VVNAME:   .SET   $   
1754   80 0B 60 17            DW   vvCODE,vvLINK   
1758                VVLINK:   .SET   $   
1758   03 21 49 4F            DB   3,"!IO"   
0B80                          .ORG   vvCODE   
0B80   CD A1 00               CALL   INIT_IO   
0B83                          ;*Macro unroll:  mNEXT
0B83   EB                     EX   DE,HL   
0B84                          ;*Macro unroll:  mNEXTHL                         ; 34t
0B84   FD E9                  JP   (IY)   ; 34t
0B86                             ;   ?RX         ( -- c T | F )
0B86                             ;               Return input character and true, or a false if no input.
0B86                          ;*Macro unroll: mCODE	3, '?RX', QRX
0B86                          ALIGN   2   
0B86                QRX:         
0B86                VVCODE:   .SET   $   
0B86                VVLEN:    .SET   (3 & 01FH) / CELLL   
174C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
174C                VVNAME:   .SET   $   
174C   86 0B 58 17            DW   vvCODE,vvLINK   
1750                VVLINK:   .SET   $   
1750   03 3F 52 58            DB   3,"?RX"   
0B86                          .ORG   vvCODE   
0B86   C5                     PUSH   BC   
0B87   CD EB 00               CALL   CKINCHAR   
0B8A   20 05                  JR   nz,QRX1   
0B8C   01 00 00               LD   BC,FALSEE   
0B8F   18 0A                  JR   QRX2   
0B91                QRX1:        
0B91   CD B5 00               CALL   RXA   
0B94   4F                     LD   C,A   
0B95   06 00                  LD   B,0   
0B97   C5                     PUSH   BC   
0B98   01 FF FF               LD   BC,TRUEE   
0B9B                QRX2:        
0B9B                          ;*Macro unroll:  mNEXT
0B9B   EB                     EX   DE,HL   
0B9C                          ;*Macro unroll:  mNEXTHL                         ; 34t
0B9C   FD E9                  JP   (IY)   ; 34t
0B9E                             ;   TX!         ( c -- )
0B9E                             ;               Send character c to the output device.
0B9E                          ;*Macro unroll: mCODE	3,'TX!',TXSTO
0B9E                          ALIGN   2   
0B9E                TXSTO:       
0B9E                VVCODE:   .SET   $   
0B9E                VVLEN:    .SET   (3 & 01FH) / CELLL   
1744                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1744                VVNAME:   .SET   $   
1744   9E 0B 50 17            DW   vvCODE,vvLINK   
1748                VVLINK:   .SET   $   
1748   03 54 58 21            DB   3,"TX!"   
0B9E                          .ORG   vvCODE   
0B9E   79                     LD   A,C   
0B9F   CD E0 00               CALL   TXA   
0BA2   C1                     POP   BC   
0BA3                          ;*Macro unroll:  mNEXT
0BA3   EB                     EX   DE,HL   
0BA4                          ;*Macro unroll:  mNEXTHL                         ; 34t
0BA4   FD E9                  JP   (IY)   ; 34t
0BA6                             ;   ?KEY        ( -- c T | F )
0BA6                             ;               Return input character and true, or a false if no input.
0BA6                          ;*Macro unroll: mCOLON  4,'?KEY',QKEY
0BA6                          ;*Macro unroll:  mCODE 4, "?KEY", QKEY
0BA6                          ALIGN   2   
0BA6                QKEY:        
0BA6                VVCODE:   .SET   $   
0BA6                VVLEN:    .SET   (4 & 01FH) / CELLL   
173A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
173A                VVNAME:   .SET   $   
173A   A6 0B 48 17            DW   vvCODE,vvLINK   
173E                VVLINK:   .SET   $   
173E   04 3F 4B 45 59         DB   4,"?KEY"   
0BA6                          .ORG   vvCODE   
0BA6   00                     NOP      
0BA7   CD E0 05               CALL   doLIST   
0BAA   88 10 14 0E E0 0D 16 06 DW   TQKEY,AT,EXECU,EXIT   
0BB2                             ;   KEY         ( -- c )
0BB2                             ;               Wait for and return an input character.
0BB2                          ;*Macro unroll: mCOLON  3,'KEY',KEY
0BB2                          ;*Macro unroll:  mCODE 3, "KEY", KEY
0BB2                          ALIGN   2   
0BB2                KEY:         
0BB2                VVCODE:   .SET   $   
0BB2                VVLEN:    .SET   (3 & 01FH) / CELLL   
1732                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1732                VVNAME:   .SET   $   
1732   B2 0B 3E 17            DW   vvCODE,vvLINK   
1736                VVLINK:   .SET   $   
1736   03 4B 45 59            DB   3,"KEY"   
0BB2                          .ORG   vvCODE   
0BB2   00                     NOP      
0BB3   CD E0 05               CALL   doLIST   
0BB6                KEY1:        
0BB6   A6 0B                  DW   QKEY   
0BB8   E4 0D B6 0B            DW   QBRAN,KEY1   
0BBC   16 06                  DW   EXIT   
0BBE                             ;   EMIT        ( c -- )
0BBE                             ;               Send a character to the output device.
0BBE                          ;*Macro unroll: mCOLON  4, 'EMIT', EMIT
0BBE                          ;*Macro unroll:  mCODE 4, "EMIT", EMIT
0BBE                          ALIGN   2   
0BBE                EMIT:        
0BBE                VVCODE:   .SET   $   
0BBE                VVLEN:    .SET   (4 & 01FH) / CELLL   
1728                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1728                VVNAME:   .SET   $   
1728   BE 0B 36 17            DW   vvCODE,vvLINK   
172C                VVLINK:   .SET   $   
172C   04 45 4D 49 54         DB   4,"EMIT"   
0BBE                          .ORG   vvCODE   
0BBE   00                     NOP      
0BBF   CD E0 05               CALL   doLIST   
0BC2   90 10 14 0E E0 0D 16 06 DW   TEMIT,AT,EXECU,EXIT   
0BCA                             ;   NUF?        ( -- t )
0BCA                             ;               Return false if no input, else pause and if CR return true.
0BCA                          ;*Macro unroll: mCOLON  4,'NUF?',NUFQ
0BCA                          ;*Macro unroll:  mCODE 4, "NUF?", NUFQ
0BCA                          ALIGN   2   
0BCA                NUFQ:        
0BCA                VVCODE:   .SET   $   
0BCA                VVLEN:    .SET   (4 & 01FH) / CELLL   
171E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
171E                VVNAME:   .SET   $   
171E   CA 0B 2C 17            DW   vvCODE,vvLINK   
1722                VVLINK:   .SET   $   
1722   04 4E 55 46 3F         DB   4,"NUF?"   
0BCA                          .ORG   vvCODE   
0BCA   00                     NOP      
0BCB   CD E0 05               CALL   doLIST   
0BCE   A6 0B F8 0F            DW   QKEY,DUPP   
0BD2   E4 0D E0 0B            DW   QBRAN,NUFQ1   
0BD6   2C 10 B2 0B EE 05 0D 00 B8 01 DW   DDROP,KEY,DoLIT,CRR,EQUAL   
0BE0                NUFQ1:       
0BE0   16 06                  DW   EXIT   
0BE2                             ;   PACE        ( -- )
0BE2                             ;               Send a pace character for the file downloading process.
0BE2                          ;*Macro unroll: hCOLON  4,'PACE',PACE
0BE2                          ;*Macro unroll:  hCODE 4, "PACE", PACE
0BE2                          ALIGN   2   
0BE2                PACE:        
0BE2   00                     NOP      
0BE3   CD E0 05               CALL   doLIST   
0BE6   EE 05 0B 00 BE 0B 16 06 DW   DOLIT,11,EMIT,EXIT   
0BEE                             ;   SPACE       ( -- )
0BEE                             ;               Send the blank character to the output device.
0BEE                          ;*Macro unroll: mCOLON  5,'SPACE',SPACE
0BEE                          ;*Macro unroll:  mCODE 5, "SPACE", SPACE
0BEE                          ALIGN   2   
0BEE                SPACE:       
0BEE                VVCODE:   .SET   $   
0BEE                VVLEN:    .SET   (5 & 01FH) / CELLL   
1714                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1714                VVNAME:   .SET   $   
1714   EE 0B 22 17            DW   vvCODE,vvLINK   
1718                VVLINK:   .SET   $   
1718   05 53 50 41 43 45      DB   5,"SPACE"   
0BEE                          .ORG   vvCODE   
0BEE   00                     NOP      
0BEF   CD E0 05               CALL   doLIST   
0BF2   72 07 BE 0B 16 06      DW   BLANK,EMIT,EXIT   
0BF8                             ;   SPACES      ( +n -- )
0BF8                             ;               Send n spaces to the output device.
0BF8                          ;*Macro unroll: mCOLON  6,'SPACES',SPACS
0BF8                          ;*Macro unroll:  mCODE 6, "SPACES", SPACS
0BF8                          ALIGN   2   
0BF8                SPACS:       
0BF8                VVCODE:   .SET   $   
0BF8                VVLEN:    .SET   (6 & 01FH) / CELLL   
1708                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1708                VVNAME:   .SET   $   
1708   F8 0B 18 17            DW   vvCODE,vvLINK   
170C                VVLINK:   .SET   $   
170C   06 53 50 41 43 45 53   DB   6,"SPACES"   
0BF8                          .ORG   vvCODE   
0BF8   00                     NOP      
0BF9   CD E0 05               CALL   doLIST   
0BFC   EE 05 00 00 14 02 DC 0F DW   DOLIT,0,MAX,TOR   
0C04   F0 0D 0A 0C            DW   BRAN,CHAR2   
0C08                CHAR1:       
0C08   EE 0B                  DW   SPACE   
0C0A                CHAR2:       
0C0A   8C 06 08 0C            DW   DONXT,CHAR1   
0C0E   16 06                  DW   EXIT   
0C10                             ;   TYPE        ( b u -- )
0C10                             ;               Output u characters from b.
0C10                          ;*Macro unroll: mCOLON	4,'TYPE',TYPEE
0C10                          ;*Macro unroll:  mCODE 4, "TYPE", TYPEE
0C10                          ALIGN   2   
0C10                TYPEE:       
0C10                VVCODE:   .SET   $   
0C10                VVLEN:    .SET   (4 & 01FH) / CELLL   
16FE                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
16FE                VVNAME:   .SET   $   
16FE   10 0C 0C 17            DW   vvCODE,vvLINK   
1702                VVLINK:   .SET   $   
1702   04 54 59 50 45         DB   4,"TYPE"   
0C10                          .ORG   vvCODE   
0C10   00                     NOP      
0C11   CD E0 05               CALL   doLIST   
0C14   DC 0F                  DW   TOR   
0C16   F0 0D 26 0C            DW   BRAN,TYPE2   
0C1A                TYPE1:       
0C1A   F8 0F 24 0E BE 0B      DW   DUPP,CAT,EMIT   
0C20   EE 05 01 00 5C 01      DW   DOLIT,1,PLUS   
0C26                TYPE2:       
0C26   8C 06 1A 0C            DW   DONXT,TYPE1   
0C2A   FC 0F 16 06            DW   DROP,EXIT   
0C2E                             ;   CR          ( -- )
0C2E                             ;               Output a carriage return and a line feed.
0C2E                          ;*Macro unroll: mCOLON	2,'CR',CR
0C2E                          ;*Macro unroll:  mCODE 2, "CR", CR
0C2E                          ALIGN   2   
0C2E                CR:          
0C2E                VVCODE:   .SET   $   
0C2E                VVLEN:    .SET   (2 & 01FH) / CELLL   
16F6                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
16F6                VVNAME:   .SET   $   
16F6   2E 0C 02 17            DW   vvCODE,vvLINK   
16FA                VVLINK:   .SET   $   
16FA   02 43 52               DB   2,"CR"   
0C2E                          .ORG   vvCODE   
0C2E   00                     NOP      
0C2F   CD E0 05               CALL   doLIST   
0C32   EE 05 0D 00 BE 0B EE 05 0A 00 BE 0B 16 06 DW   DoLIT,CRR,EMIT,DoLIT,LFF,EMIT,EXIT   
0C40                             ;   do$         ( -- a )
0C40                             ;               Return the address of a compiled string.
0C40                          ;*Macro unroll: mCOLON  COMPO+3,'do$',DOSTR
0C40                          ;*Macro unroll:  mCODE COMPO+3, "do$", DOSTR
0C40                          ALIGN   2   
0C40                DOSTR:       
0C40                VVCODE:   .SET   $   
0C40                VVLEN:    .SET   (COMPO+3 & 01FH) / CELLL   
16CE                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
16CE                VVNAME:   .SET   $   
16CE   40 0C FA 16            DW   vvCODE,vvLINK   
16D2                VVLINK:   .SET   $   
16D2   23 64 6F 24            DB   COMPO+3,"do$"   
0C40                          .ORG   vvCODE   
0C40   00                     NOP      
0C41   CD E0 05               CALL   doLIST   
0C44   EA 0F 2C 0E EA 0F 8A 0E 5C 01 DW   RFROM,RAT,RFROM,COUNT,PLUS   
0C4E   82 0F DC 0F 00 10 DC 0F 16 06 DW   ALGND,TOR,SWAP,TOR,EXIT   
0C58                             ;   $"|         ( -- a )
0C58                             ;               Run time routine compiled by $". Return address of a compiled string.
0C58                          ;*Macro unroll: hCOLON  COMPO+3,'$||',STRQP
0C58                          ;*Macro unroll:  hCODE COMPO+3, "$||", STRQP
0C58                          ALIGN   2   
0C58                STRQP:       
0C58   00                     NOP      
0C59   CD E0 05               CALL   doLIST   
0C5C   40 0C 16 06            DW   DOSTR,EXIT   ;force a call to do$
0C60                             ;   ."|         ( -- )
0C60                             ;               Run time routine of ." . Output a compiled string.
0C60                          ;*Macro unroll: hCOLON  COMPO+3,'.||',DOTQP
0C60                          ;*Macro unroll:  hCODE COMPO+3, ".||", DOTQP
0C60                          ALIGN   2   
0C60                DOTQP:       
0C60   00                     NOP      
0C61   CD E0 05               CALL   doLIST   
0C64   40 0C 8A 0E 10 0C 16 06 DW   DOSTR,COUNT,TYPEE,EXIT   
0C6C                             ;   .R          ( n +n -- )
0C6C                             ;               Display an integer in a field of n columns, right justified.
0C6C                          ;*Macro unroll: mCOLON  2,'.R',DOTR
0C6C                          ;*Macro unroll:  mCODE 2, ".R", DOTR
0C6C                          ALIGN   2   
0C6C                DOTR:        
0C6C                VVCODE:   .SET   $   
0C6C                VVLEN:    .SET   (2 & 01FH) / CELLL   
16C6                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
16C6                VVNAME:   .SET   $   
16C6   6C 0C D2 16            DW   vvCODE,vvLINK   
16CA                VVLINK:   .SET   $   
16CA   02 2E 52               DB   2,".R"   
0C6C                          .ORG   vvCODE   
0C6C   00                     NOP      
0C6D   CD E0 05               CALL   doLIST   
0C70   DC 0F 40 07 EA 0F 08 10 9E 01 DW   TOR,STR,RFROM,OVER,SUBB   
0C7A   F8 0B 10 0C 16 06      DW   SPACS,TYPEE,EXIT   
0C80                             ;   U.R         ( u +n -- )
0C80                             ;               Display an unsigned integer in n column, right justified.
0C80                          ;*Macro unroll: mCOLON  3,'U.R',UDOTR
0C80                          ;*Macro unroll:  mCODE 3, "U.R", UDOTR
0C80                          ALIGN   2   
0C80                UDOTR:       
0C80                VVCODE:   .SET   $   
0C80                VVLEN:    .SET   (3 & 01FH) / CELLL   
16BE                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
16BE                VVNAME:   .SET   $   
16BE   80 0C CA 16            DW   vvCODE,vvLINK   
16C2                VVLINK:   .SET   $   
16C2   03 55 2E 52            DB   3,"U.R"   
0C80                          .ORG   vvCODE   
0C80   00                     NOP      
0C81   CD E0 05               CALL   doLIST   
0C84   DC 0F D8 06 0A 07 2E 07 DW   TOR,BDIGS,DIGS,EDIGS   
0C8C   EA 0F 08 10 9E 01      DW   RFROM,OVER,SUBB   
0C92   F8 0B 10 0C 16 06      DW   SPACS,TYPEE,EXIT   
0C98                             ;   U.          ( u -- )
0C98                             ;               Display an unsigned integer in free format.
0C98                          ;*Macro unroll: mCOLON  2,'U.',UDOT
0C98                          ;*Macro unroll:  mCODE 2, "U.", UDOT
0C98                          ALIGN   2   
0C98                UDOT:        
0C98                VVCODE:   .SET   $   
0C98                VVLEN:    .SET   (2 & 01FH) / CELLL   
16B6                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
16B6                VVNAME:   .SET   $   
16B6   98 0C C2 16            DW   vvCODE,vvLINK   
16BA                VVLINK:   .SET   $   
16BA   02 55 2E               DB   2,"U."   
0C98                          .ORG   vvCODE   
0C98   00                     NOP      
0C99   CD E0 05               CALL   doLIST   
0C9C   D8 06 0A 07 2E 07      DW   BDIGS,DIGS,EDIGS   
0CA2   EE 0B 10 0C 16 06      DW   SPACE,TYPEE,EXIT   
0CA8                             ;   .           ( w -- )
0CA8                             ;               Display an integer in free format, preceeded by a space.
0CA8                          ;*Macro unroll: mCOLON  1,'.',DOT
0CA8                          ;*Macro unroll:  mCODE 1, ".", DOT
0CA8                          ALIGN   2   
0CA8                DOT:         
0CA8                VVCODE:   .SET   $   
0CA8                VVLEN:    .SET   (1 & 01FH) / CELLL   
16B0                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
16B0                VVNAME:   .SET   $   
16B0   A8 0C BA 16            DW   vvCODE,vvLINK   
16B4                VVLINK:   .SET   $   
16B4   01 2E                  DB   1,"."   
0CA8                          .ORG   vvCODE   
0CA8   00                     NOP      
0CA9   CD E0 05               CALL   doLIST   
0CAC   B8 10 14 0E EE 05 0A 00 52 01 DW   BASE,AT,DOLIT,10,XORR   ;?decimal
0CB6   E4 0D BE 0C            DW   QBRAN,DOT1   
0CBA   98 0C 16 06            DW   UDOT,EXIT   ;no, display unsigned
0CBE                DOT1:        
0CBE   40 07 EE 0B 10 0C 16 06 DW   STR,SPACE,TYPEE,EXIT   ;yes, display signed
0CC6                             ;   .(          ( -- )
0CC6                             ;               Output following string up to next ) .
0CC6                          ;*Macro unroll: mCOLON  IMEDD+2,'.(',DOTPR
0CC6                          ;*Macro unroll:  mCODE IMEDD+2, ".(", DOTPR
0CC6                          ALIGN   2   
0CC6                DOTPR:       
0CC6                VVCODE:   .SET   $   
0CC6                VVLEN:    .SET   (IMEDD+2 & 01FH) / CELLL   
1668                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1668                VVNAME:   .SET   $   
1668   C6 0C B4 16            DW   vvCODE,vvLINK   
166C                VVLINK:   .SET   $   
166C   42 2E 28               DB   IMEDD+2,".("   
0CC6                          .ORG   vvCODE   
0CC6   00                     NOP      
0CC7   CD E0 05               CALL   doLIST   
0CCA   EE 05 16 09 10 0C 16 06 DW   DOLIT,")",PARSE,TYPEE,EXIT   
0CD2                             ;   ?           ( a -- )
0CD2                             ;               Display the contents in a memory cell.
0CD2                          ;*Macro unroll: mCOLON  1,'?',QUEST
0CD2                          ;*Macro unroll:  mCODE 1, "?", QUEST
0CD2                          ALIGN   2   
0CD2                QUEST:       
0CD2                VVCODE:   .SET   $   
0CD2                VVLEN:    .SET   (1 & 01FH) / CELLL   
1662                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1662                VVNAME:   .SET   $   
1662   D2 0C 6C 16            DW   vvCODE,vvLINK   
1666                VVLINK:   .SET   $   
1666   01 3F                  DB   1,"?"   
0CD2                          .ORG   vvCODE   
0CD2   00                     NOP      
0CD3   CD E0 05               CALL   doLIST   
0CD6   14 0E A8 0C 16 06      DW   AT,DOT,EXIT   
0CDC                             ;   ^H          ( bot eot cur -- bot eot cur )
0CDC                             ;               Backup the cursor by one character.
0CDC                          ;*Macro unroll: mCOLON  2,'^H',BKSP
0CDC                          ;*Macro unroll:  mCODE 2, "^H", BKSP
0CDC                          ALIGN   2   
0CDC                BKSP:        
0CDC                VVCODE:   .SET   $   
0CDC                VVLEN:    .SET   (2 & 01FH) / CELLL   
165A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
165A                VVNAME:   .SET   $   
165A   DC 0C 66 16            DW   vvCODE,vvLINK   
165E                VVLINK:   .SET   $   
165E   02 5E 48               DB   2,"^H"   
0CDC                          .ORG   vvCODE   
0CDC   00                     NOP      
0CDD   CD E0 05               CALL   doLIST   
0CE0   DC 0F 08 10 EA 0F 00 10 08 10 52 01 DW   TOR,OVER,RFROM,SWAP,OVER,XORR   
0CEC   E4 0D 0C 0D            DW   QBRAN,BACK1   
0CF0   EE 05 08 00 A8 10 C0 0E EE 05 01 00 9E 01 DW   DOLIT,BKSPP,TECHO,ATEXE,DOLIT,1,SUBB   
0CFE   72 07 A8 10 C0 0E      DW   BLANK,TECHO,ATEXE   
0D04   EE 05 08 00 A8 10 C0 0E DW   DOLIT,BKSPP,TECHO,ATEXE   
0D0C                BACK1:       
0D0C   16 06                  DW   EXIT   
0D0E                             ;   TAP         ( bot eot cur c -- bot eot cur )
0D0E                             ;               Accept and echo the key stroke and bump the cursor.
0D0E                          ;*Macro unroll: mCOLON  3,'TAP',TAP
0D0E                          ;*Macro unroll:  mCODE 3, "TAP", TAP
0D0E                          ALIGN   2   
0D0E                TAP:         
0D0E                VVCODE:   .SET   $   
0D0E                VVLEN:    .SET   (3 & 01FH) / CELLL   
1652                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1652                VVNAME:   .SET   $   
1652   0E 0D 5E 16            DW   vvCODE,vvLINK   
1656                VVLINK:   .SET   $   
1656   03 54 41 50            DB   3,"TAP"   
0D0E                          .ORG   vvCODE   
0D0E   00                     NOP      
0D0F   CD E0 05               CALL   doLIST   
0D12   F8 0F A8 10 C0 0E      DW   DUPP,TECHO,ATEXE   
0D18   08 10 1C 0E EE 05 01 00 5C 01 16 06 DW   OVER,CSTOR,DOLIT,1,PLUS,EXIT   
0D24                             ;   kTAP        ( bot eot cur c -- bot eot cur )
0D24                             ;               Process a key stroke, CR or backspace.
0D24                          ;*Macro unroll: mCOLON  4,'kTAP',KTAP
0D24                          ;*Macro unroll:  mCODE 4, "kTAP", KTAP
0D24                          ALIGN   2   
0D24                KTAP:        
0D24                VVCODE:   .SET   $   
0D24                VVLEN:    .SET   (4 & 01FH) / CELLL   
1648                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1648                VVNAME:   .SET   $   
1648   24 0D 56 16            DW   vvCODE,vvLINK   
164C                VVLINK:   .SET   $   
164C   04 6B 54 41 50         DB   4,"kTAP"   
0D24                          .ORG   vvCODE   
0D24   00                     NOP      
0D25   CD E0 05               CALL   doLIST   
0D28   F8 0F EE 05 0D 00 52 01 DW   DUPP,DOLIT,CRR,XORR   
0D30   E4 0D 48 0D            DW   QBRAN,KTAP2   
0D34   EE 05 08 00 52 01      DW   DOLIT,BKSPP,XORR   
0D3A   E4 0D 44 0D            DW   QBRAN,KTAP1   
0D3E   72 07 0E 0D 16 06      DW   BLANK,TAP,EXIT   
0D44                KTAP1:       
0D44   DC 0C 16 06            DW   BKSP,EXIT   
0D48                KTAP2:       
0D48   FC 0F 00 10 FC 0F F8 0F 16 06 DW   DROP,SWAP,DROP,DUPP,EXIT   
0D52                             ;   accept      ( b u -- b u )
0D52                             ;               Accept characters to input buffer. Return with actual count.
0D52                          ;*Macro unroll: mCOLON  6,'accept',ACCEP
0D52                          ;*Macro unroll:  mCODE 6, "accept", ACCEP
0D52                          ALIGN   2   
0D52                ACCEP:       
0D52                VVCODE:   .SET   $   
0D52                VVLEN:    .SET   (6 & 01FH) / CELLL   
163C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
163C                VVNAME:   .SET   $   
163C   52 0D 4C 16            DW   vvCODE,vvLINK   
1640                VVLINK:   .SET   $   
1640   06 61 63 63 65 70 74   DB   6,"accept"   
0D52                          .ORG   vvCODE   
0D52   00                     NOP      
0D53   CD E0 05               CALL   doLIST   
0D56   08 10 5C 01 08 10      DW   OVER,PLUS,OVER   
0D5C                ACCP1:       
0D5C   36 10 52 01            DW   DDUP,XORR   
0D60   E4 0D 82 0D            DW   QBRAN,ACCP4   
0D64   B2 0B F8 0F            DW   KEY,DUPP   
0D68   72 07 EE 05 7F 00 38 02 DW   BLANK,DOLIT,127,WITHI   
0D70   E4 0D 7A 0D            DW   QBRAN,ACCP2   
0D74   0E 0D                  DW   TAP   
0D76   F0 0D 7E 0D            DW   BRAN,ACCP3   
0D7A                ACCP2:       
0D7A   A0 10 C0 0E            DW   TTAP,ATEXE   
0D7E                ACCP3:       
0D7E   F0 0D 5C 0D            DW   BRAN,ACCP1   
0D82                ACCP4:       
0D82   FC 0F 08 10 9E 01 16 06 DW   DROP,OVER,SUBB,EXIT   
0D8A                             ;   EXPECT      ( b u -- )
0D8A                             ;               Accept input stream and store count in SPAN.
0D8A                          ;*Macro unroll: hCOLON  6,'EXPECT',EXPEC
0D8A                          ;*Macro unroll:  hCODE 6, "EXPECT", EXPEC
0D8A                          ALIGN   2   
0D8A                EXPEC:       
0D8A   00                     NOP      
0D8B   CD E0 05               CALL   doLIST   
0D8E   98 10 C0 0E C8 10 0A 0E FC 0F 16 06 DW   TEXPE,ATEXE,SPAN,STORE,DROP,EXIT   
0D9A                             ;   QUERY       ( -- )
0D9A                             ;               Accept input stream to terminal input buffer.
0D9A                          ;*Macro unroll: hCOLON  5,'QUERY',QUERY
0D9A                          ;*Macro unroll:  hCODE 5, "QUERY", QUERY
0D9A                          ALIGN   2   
0D9A                QUERY:       
0D9A   00                     NOP      
0D9B   CD E0 05               CALL   doLIST   
0D9E   B4 0E EE 05 50 00 98 10 C0 0E D8 10 0A 0E DW   TIB,DOLIT,80,TEXPE,ATEXE,NTIB,STORE   
0DAC   FC 0F EE 05 00 00 D0 10 0A 0E 16 06 DW   DROP,DOLIT,0,INN,STORE,EXIT   
0DB8                NEXT_STEP:      
0DB8   5E                     LD   E,(HL)   ; 7t
0DB9   23                     INC   HL   ; 6t
0DBA   56                     LD   D,(HL)   ; 7t
0DBB   23                     INC   HL   ; 6t
0DBC   EB                     EX   DE,HL   ; 4t
0DBD   E9                     JP   (HL)   ; 4t
0DBE                          ;*Macro unroll: mCOLON	4,'COLD',COLD
0DBE                          ;*Macro unroll:  mCODE 4, "COLD", COLD
0DBE                          ALIGN   2   
0DBE                COLD:        
0DBE                VVCODE:   .SET   $   
0DBE                VVLEN:    .SET   (4 & 01FH) / CELLL   
1632                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1632                VVNAME:   .SET   $   
1632   BE 0D 40 16            DW   vvCODE,vvLINK   
1636                VVLINK:   .SET   $   
1636   04 43 4F 4C 44         DB   4,"COLD"   
0DBE                          .ORG   vvCODE   
0DBE   00                     NOP      
0DBF   CD E0 05               CALL   doLIST   
0DC2   80 0B                  DW   STOIO   
0DC4                             ; DW	DOLIT, 65, EMIT
0DC4   EE 05 CE 0D 8A 0E 10 0C DW   DOLIT,HELLO,COUNT,TYPEE   
0DCC   DE 0D                  DW   QUIT   
0DCE   0F 48 65 6C 6C 6F 20 46 6F 72 74 68 21 20 0D 0A HELLO:   .PSTR   "Hello Forth! \r\n"   
0DDE                          ;*Macro unroll: mCODE  4, 'QUIT', QUIT
0DDE                          ALIGN   2   
0DDE                QUIT:        
0DDE                VVCODE:   .SET   $   
0DDE                VVLEN:    .SET   (4 & 01FH) / CELLL   
1628                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1628                VVNAME:   .SET   $   
1628   DE 0D 36 16            DW   vvCODE,vvLINK   
162C                VVLINK:   .SET   $   
162C   04 51 55 49 54         DB   4,"QUIT"   
0DDE                          .ORG   vvCODE   
0DDE   76                     HALT      
0DDF                             ;   EXECUTE	( i*x xt -- j*x )		\ CORE
0DDF                             ;		Perform the semantics indentified by execution token, xt.
0DDF                          ;*Macro unroll: mCODE	7,'EXECUTE', EXECU
0DDF                          ALIGN   2   
0DE0                EXECU:       
0DE0                VVCODE:   .SET   $   
0DE0                VVLEN:    .SET   (7 & 01FH) / CELLL   
161C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
161C                VVNAME:   .SET   $   
161C   E0 0D 2C 16            DW   vvCODE,vvLINK   
1620                VVLINK:   .SET   $   
1620   07 45 58 45 43 55 54 45 DB   7,"EXECUTE"   
0DE0                          .ORG   vvCODE   
0DE0   60                     LD   H,B   
0DE1   69                     LD   L,C   
0DE2   C1                     POP   BC   
0DE3   E9                     JP   (HL)   
0DE4                             ; 
0DE4                             ;   0BRAN	( flag -- )
0DE4                             ;		BRAN if flag is zero.
0DE4                          ;*Macro unroll: hCODE	COMPO+7,'?branch', QBRAN
0DE4                          ALIGN   2   
0DE4                QBRAN:       
0DE4   78                     LD   A,B   ; 4t
0DE5   B1                     OR   C   ; 4t
0DE6   C1                     POP   BC   ;10t
0DE7   CA F0 0D               JP   Z,BRAN   ;10/7t a fast dec is ok, only
0DEA   13                     INC   DE   ; 6t yes,continue past the BRAN offset
0DEB   13                     INC   DE   ; 6t
0DEC                          ;*Macro unroll: 	mNEXT
0DEC   EB                     EX   DE,HL   
0DED                          ;*Macro unroll:  mNEXTHL                         ; 34t
0DED   FD E9                  JP   (IY)   ; 34t
0DEF                             ;   BRAN	( -- )
0DEF                             ;		BRAN to an inline address.
0DEF                          ;*Macro unroll: hCODE	COMPO+6,'branch', BRAN
0DEF                          ALIGN   2   
0DF0                BRAN:        
0DF0   1A                     LD   A,(DE)   ; 7t go back to the loop
0DF1   6F                     LD   L,A   ; 4t
0DF2   13                     INC   DE   ; 6t
0DF3   1A                     LD   A,(DE)   ; 7t
0DF4   67                     LD   H,A   ; 4t
0DF5                          ;*Macro unroll: 	mNEXTHL
0DF5   FD E9                  JP   (IY)   
0DF7                             ; 
0DF7                             ;   TYPECSTR    ( cstr -- )
0DF7                             ;   Similar to TYPE but prints C null terminated strings
0DF7                          ;*Macro unroll: mCODE	3,'TYPESZ',TypeCStr
0DF7                          ALIGN   2   
0DF8                TYPECSTR:      
0DF8                VVCODE:   .SET   $   
0DF8                VVLEN:    .SET   (3 & 01FH) / CELLL   
1614                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1614                VVNAME:   .SET   $   
1614   F8 0D 20 16            DW   vvCODE,vvLINK   
1618                VVLINK:   .SET   $   
1618   03 54 59 50 45 53 5A   DB   3,"TYPESZ"   
0DF8                          .ORG   vvCODE   
0DF8   60                     LD   H,B   
0DF9   69                     LD   L,C   
0DFA   CD F1 00               CALL   PRINTSZ   
0DFD   C1                     POP   BC   
0DFE                          ;*Macro unroll:  mNEXT
0DFE   EB                     EX   DE,HL   
0DFF                          ;*Macro unroll:  mNEXTHL                         ; 34t
0DFF   FD E9                  JP   (IY)   ; 34t
0E01                             ;   THROW    ( cstr -- )
0E01                             ;   Prints string message and returns TODO: restart Forth interpreter QUIT
0E01                          ;*Macro unroll: mCOLON	5,'THROWX',THROWX
0E01                          ;*Macro unroll:  mCODE 5, "THROWX", THROWX
0E01                          ALIGN   2   
0E02                THROWX:      
0E02                VVCODE:   .SET   $   
0E02                VVLEN:    .SET   (5 & 01FH) / CELLL   
160A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
160A                VVNAME:   .SET   $   
160A   02 0E 18 16            DW   vvCODE,vvLINK   
160E                VVLINK:   .SET   $   
160E   05 54 48 52 4F 57 58   DB   5,"THROWX"   
0E02                          .ORG   vvCODE   
0E02   00                     NOP      
0E03   CD E0 05               CALL   doLIST   
0E06   F8 0D 16 06            DW   TypeCStr,EXIT   
0E0A                             ;   !           ( w a -- )
0E0A                             ;               Pop the data stack to memory.
0E0A                          ;*Macro unroll: mCODE	1,'!',Store
0E0A                          ALIGN   2   
0E0A                STORE:       
0E0A                VVCODE:   .SET   $   
0E0A                VVLEN:    .SET   (1 & 01FH) / CELLL   
1604                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1604                VVNAME:   .SET   $   
1604   0A 0E 0E 16            DW   vvCODE,vvLINK   
1608                VVLINK:   .SET   $   
1608   01 21                  DB   1,"!"   
0E0A                          .ORG   vvCODE   
0E0A   60                     LD   H,B   
0E0B   69                     LD   L,C   
0E0C   C1                     POP   BC   
0E0D   71                     LD   (HL),C   
0E0E   23                     INC   HL   
0E0F   70                     LD   (HL),B   
0E10   C1                     POP   BC   
0E11                          ;*Macro unroll: 	mNEXT
0E11   EB                     EX   DE,HL   
0E12                          ;*Macro unroll:  mNEXTHL                         ; 34t
0E12   FD E9                  JP   (IY)   ; 34t
0E14                             ;   @           ( a -- w )
0E14                             ;               Push memory location to the data stack.
0E14                          ;*Macro unroll: mCODE	1,'@', AT
0E14                          ALIGN   2   
0E14                AT:          
0E14                VVCODE:   .SET   $   
0E14                VVLEN:    .SET   (1 & 01FH) / CELLL   
15FE                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
15FE                VVNAME:   .SET   $   
15FE   14 0E 08 16            DW   vvCODE,vvLINK   
1602                VVLINK:   .SET   $   
1602   01 40                  DB   1,"@"   
0E14                          .ORG   vvCODE   
0E14   60                     LD   H,B   
0E15   69                     LD   L,C   
0E16   4E                     LD   C,(HL)   
0E17   23                     INC   HL   
0E18   46                     LD   B,(HL)   
0E19                          ;*Macro unroll: 	mNEXT
0E19   EB                     EX   DE,HL   
0E1A                          ;*Macro unroll:  mNEXTHL                         ; 34t
0E1A   FD E9                  JP   (IY)   ; 34t
0E1C                             ;   C!          ( c b -- )
0E1C                             ;               Pop the data stack to byte memory.
0E1C                          ;*Macro unroll: mCODE	2,'C!',CSTOR
0E1C                          ALIGN   2   
0E1C                CSTOR:       
0E1C                VVCODE:   .SET   $   
0E1C                VVLEN:    .SET   (2 & 01FH) / CELLL   
15F6                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
15F6                VVNAME:   .SET   $   
15F6   1C 0E 02 16            DW   vvCODE,vvLINK   
15FA                VVLINK:   .SET   $   
15FA   02 43 21               DB   2,"C!"   
0E1C                          .ORG   vvCODE   
0E1C   60                     LD   H,B   
0E1D   69                     LD   L,C   
0E1E   C1                     POP   BC   
0E1F   71                     LD   (HL),C   
0E20   C1                     POP   BC   
0E21                          ;*Macro unroll: 	mNEXT
0E21   EB                     EX   DE,HL   
0E22                          ;*Macro unroll:  mNEXTHL                         ; 34t
0E22   FD E9                  JP   (IY)   ; 34t
0E24                             ;   C@          ( b -- c )
0E24                             ;               Push byte memory location to the data stack.
0E24                          ;*Macro unroll: mCODE	2,'C@',CAT
0E24                          ALIGN   2   
0E24                CAT:         
0E24                VVCODE:   .SET   $   
0E24                VVLEN:    .SET   (2 & 01FH) / CELLL   
15EE                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
15EE                VVNAME:   .SET   $   
15EE   24 0E FA 15            DW   vvCODE,vvLINK   
15F2                VVLINK:   .SET   $   
15F2   02 43 40               DB   2,"C@"   
0E24                          .ORG   vvCODE   
0E24   0A                     LD   A,(BC)   
0E25   4F                     LD   C,A   
0E26   06 00                  LD   B,0   
0E28                          ;*Macro unroll: 	mNEXT
0E28   EB                     EX   DE,HL   
0E29                          ;*Macro unroll:  mNEXTHL                         ; 34t
0E29   FD E9                  JP   (IY)   ; 34t
0E2B                             ;   R@          ( -- w )
0E2B                             ;               Copy top of return stack to the data stack.
0E2B                          ;*Macro unroll: mCODE	COMPO+2,'R@',RAT
0E2B                          ALIGN   2   
0E2C                RAT:         
0E2C                VVCODE:   .SET   $   
0E2C                VVLEN:    .SET   (COMPO+2 & 01FH) / CELLL   
15C6                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
15C6                VVNAME:   .SET   $   
15C6   2C 0E F2 15            DW   vvCODE,vvLINK   
15CA                VVLINK:   .SET   $   
15CA   22 52 40               DB   COMPO+2,"R@"   
0E2C                          .ORG   vvCODE   
0E2C   C5                     PUSH   BC   
0E2D   DD 4E 00               LD   C,(IX+0)   
0E30   DD 46 01               LD   B,(IX+1)   
0E33                          ;*Macro unroll: 	mNEXT
0E33   EB                     EX   DE,HL   
0E34                          ;*Macro unroll:  mNEXTHL                         ; 34t
0E34   FD E9                  JP   (IY)   ; 34t
0E36                             ;   RP@         ( -- a )
0E36                             ;               Push the current RP to the data stack
0E36                          ;*Macro unroll: mCODE	COMPO+3, 'rp@', RPAT
0E36                          ALIGN   2   
0E36                RPAT:        
0E36                VVCODE:   .SET   $   
0E36                VVLEN:    .SET   (COMPO+3 & 01FH) / CELLL   
159E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
159E                VVNAME:   .SET   $   
159E   36 0E CA 15            DW   vvCODE,vvLINK   
15A2                VVLINK:   .SET   $   
15A2   23 72 70 40            DB   COMPO+3,"rp@"   
0E36                          .ORG   vvCODE   
0E36   C5                     DB   0C5h   ; PUSH	BC	;11t
0E37   DD E5                  DB   0DDh,0E5h   ; PUSH IX	;15t
0E39   C1                     DB   0C1h   ; POP	BC	;10t
0E3A                          ;*Macro unroll:  mNEXT
0E3A   EB                     EX   DE,HL   
0E3B                          ;*Macro unroll:  mNEXTHL                         ; 34t
0E3B   FD E9                  JP   (IY)   ; 34t
0E3D                             ;   RP!         ( a -- )
0E3D                             ;               Set the return stack pointer.
0E3D                          ;*Macro unroll: mCODE	COMPO+3,'rp!',RPSTO
0E3D                          ALIGN   2   
0E3E                RPSTO:       
0E3E                VVCODE:   .SET   $   
0E3E                VVLEN:    .SET   (COMPO+3 & 01FH) / CELLL   
1576                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1576                VVNAME:   .SET   $   
1576   3E 0E A2 15            DW   vvCODE,vvLINK   
157A                VVLINK:   .SET   $   
157A   23 72 70 21            DB   COMPO+3,"rp!"   
0E3E                          .ORG   vvCODE   
0E3E   C5                     DB   0C5h   ; PUSH	BC	;11t
0E3F   DD E1                  DB   0DDh,0E1h   ; POP IX	;14t
0E41   C1                     DB   0C1h   ; POP	BC	;10t
0E42                          ;*Macro unroll: 	mNEXT
0E42   EB                     EX   DE,HL   
0E43                          ;*Macro unroll:  mNEXTHL                         ; 34t
0E43   FD E9                  JP   (IY)   ; 34t
0E45                             ;   SP@         ( -- a )
0E45                             ;               Push the current data stack pointer.
0E45                          ;*Macro unroll: mCODE	3, 'sp@', SPAT
0E45                          ALIGN   2   
0E46                SPAT:        
0E46                VVCODE:   .SET   $   
0E46                VVLEN:    .SET   (3 & 01FH) / CELLL   
156E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
156E                VVNAME:   .SET   $   
156E   46 0E 7A 15            DW   vvCODE,vvLINK   
1572                VVLINK:   .SET   $   
1572   03 73 70 40            DB   3,"sp@"   
0E46                          .ORG   vvCODE   
0E46   C5                     DB   0C5h   ; PUSH	BC	;11t
0E47   21                     DB   021h   ; LD	HL,0	;10t
0E48   00 00                  DW   0   
0E4A   39                     DB   039h   ; ADD	HL,SP	;11t
0E4B   44                     DB   044h   ; LD	B,H	; 4t
0E4C   4D                     DB   04Dh   ; LD	C,L	; 4t
0E4D                          ;*Macro unroll: 	mNEXT
0E4D   EB                     EX   DE,HL   
0E4E                          ;*Macro unroll:  mNEXTHL                         ; 34t
0E4E   FD E9                  JP   (IY)   ; 34t
0E50                             ;   SP!         ( a -- )
0E50                             ;               Set the data stack pointer.
0E50                          ;*Macro unroll: mCODE	3,'sp!',SPSTO
0E50                          ALIGN   2   
0E50                SPSTO:       
0E50                VVCODE:   .SET   $   
0E50                VVLEN:    .SET   (3 & 01FH) / CELLL   
1566                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1566                VVNAME:   .SET   $   
1566   50 0E 72 15            DW   vvCODE,vvLINK   
156A                VVLINK:   .SET   $   
156A   03 73 70 21            DB   3,"sp!"   
0E50                          .ORG   vvCODE   
0E50   60                     DB   060h   ; LD	H,B	; 4t
0E51   69                     DB   069h   ; LD	L,C	; 4t
0E52   F9                     DB   0F9h   ; LD	SP,HL	; 6t
0E53   C1                     DB   0C1h   ; POP	BC	;10t
0E54                          ;*Macro unroll: 	mNEXT
0E54   EB                     EX   DE,HL   
0E55                          ;*Macro unroll:  mNEXTHL                         ; 34t
0E55   FD E9                  JP   (IY)   ; 34t
0E57                             ;   +!          ( n a -- )
0E57                             ;               Add n to the contents at address a.
0E57                          ;*Macro unroll: mCOLON  2,'+!',PSTOR
0E57                          ;*Macro unroll:  mCODE 2, "+!", PSTOR
0E57                          ALIGN   2   
0E58                PSTOR:       
0E58                VVCODE:   .SET   $   
0E58                VVLEN:    .SET   (2 & 01FH) / CELLL   
155E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
155E                VVNAME:   .SET   $   
155E   58 0E 6A 15            DW   vvCODE,vvLINK   
1562                VVLINK:   .SET   $   
1562   02 2B 21               DB   2,"+!"   
0E58                          .ORG   vvCODE   
0E58   00                     NOP      
0E59   CD E0 05               CALL   doLIST   
0E5C   00 10 08 10 14 0E 5C 01 DW   SWAP,OVER,AT,PLUS   
0E64   00 10 0A 0E 16 06      DW   SWAP,STORE,EXIT   
0E6A                             ;   2!          ( d a -- )
0E6A                             ;               Store the double integer to address a.
0E6A                          ;*Macro unroll: mCOLON  2,'2!',DSTOR
0E6A                          ;*Macro unroll:  mCODE 2, "2!", DSTOR
0E6A                          ALIGN   2   
0E6A                DSTOR:       
0E6A                VVCODE:   .SET   $   
0E6A                VVLEN:    .SET   (2 & 01FH) / CELLL   
1556                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1556                VVNAME:   .SET   $   
1556   6A 0E 62 15            DW   vvCODE,vvLINK   
155A                VVLINK:   .SET   $   
155A   02 32 21               DB   2,"2!"   
0E6A                          .ORG   vvCODE   
0E6A   00                     NOP      
0E6B   CD E0 05               CALL   doLIST   
0E6E   00 10 08 10 0A 0E      DW   SWAP,OVER,STORE   
0E74   68 03 0A 0E 16 06      DW   CELLP,STORE,EXIT   
0E7A                             ;   2@          ( a -- d )
0E7A                             ;               Fetch double integer from address a.
0E7A                          ;*Macro unroll: mCOLON  2,'2@',DAT
0E7A                          ;*Macro unroll:  mCODE 2, "2@", DAT
0E7A                          ALIGN   2   
0E7A                DAT:         
0E7A                VVCODE:   .SET   $   
0E7A                VVLEN:    .SET   (2 & 01FH) / CELLL   
154E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
154E                VVNAME:   .SET   $   
154E   7A 0E 5A 15            DW   vvCODE,vvLINK   
1552                VVLINK:   .SET   $   
1552   02 32 40               DB   2,"2@"   
0E7A                          .ORG   vvCODE   
0E7A   00                     NOP      
0E7B   CD E0 05               CALL   doLIST   
0E7E   F8 0F 68 03 14 0E      DW   DUPP,CELLP,AT   
0E84   00 10 14 0E 16 06      DW   SWAP,AT,EXIT   
0E8A                             ;   COUNT       ( b -- b +n )
0E8A                             ;               Return count byte of a string and add 1 to byte address.
0E8A                          ;*Macro unroll: mCOLON  5,'COUNT',COUNT
0E8A                          ;*Macro unroll:  mCODE 5, "COUNT", COUNT
0E8A                          ALIGN   2   
0E8A                COUNT:       
0E8A                VVCODE:   .SET   $   
0E8A                VVLEN:    .SET   (5 & 01FH) / CELLL   
1544                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1544                VVNAME:   .SET   $   
1544   8A 0E 52 15            DW   vvCODE,vvLINK   
1548                VVLINK:   .SET   $   
1548   05 43 4F 55 4E 54      DB   5,"COUNT"   
0E8A                          .ORG   vvCODE   
0E8A   00                     NOP      
0E8B   CD E0 05               CALL   doLIST   
0E8E   F8 0F EE 05 01 00 5C 01 DW   DUPP,DOLIT,1,PLUS   
0E96   00 10 24 0E 16 06      DW   SWAP,CAT,EXIT   
0E9C                             ;   HERE        ( -- a )
0E9C                             ;               Return the top of the code dictionary.
0E9C                          ;*Macro unroll: mCOLON  4,'HERE',HERE
0E9C                          ;*Macro unroll:  mCODE 4, "HERE", HERE
0E9C                          ALIGN   2   
0E9C                HERE:        
0E9C                VVCODE:   .SET   $   
0E9C                VVLEN:    .SET   (4 & 01FH) / CELLL   
153A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
153A                VVNAME:   .SET   $   
153A   9C 0E 48 15            DW   vvCODE,vvLINK   
153E                VVLINK:   .SET   $   
153E   04 48 45 52 45         DB   4,"HERE"   
0E9C                          .ORG   vvCODE   
0E9C   00                     NOP      
0E9D   CD E0 05               CALL   doLIST   
0EA0   18 11 14 0E 16 06      DW   CP,AT,EXIT   
0EA6                             ;   PAD         ( -- a )
0EA6                             ;               Return the address of a temporary buffer.
0EA6                          ;*Macro unroll: mCOLON  3,'PAD',PAD
0EA6                          ;*Macro unroll:  mCODE 3, "PAD", PAD
0EA6                          ALIGN   2   
0EA6                PAD:         
0EA6                VVCODE:   .SET   $   
0EA6                VVLEN:    .SET   (3 & 01FH) / CELLL   
1532                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1532                VVNAME:   .SET   $   
1532   A6 0E 3E 15            DW   vvCODE,vvLINK   
1536                VVLINK:   .SET   $   
1536   03 50 41 44            DB   3,"PAD"   
0EA6                          .ORG   vvCODE   
0EA6   00                     NOP      
0EA7   CD E0 05               CALL   doLIST   
0EAA   9C 0E EE 05 50 00 5C 01 16 06 DW   HERE,DOLIT,80,PLUS,EXIT   
0EB4                             ;   TIB         ( -- a )
0EB4                             ;               Return the address of the terminal input buffer.
0EB4                          ;*Macro unroll: mCOLON  3,'TIB',TIB
0EB4                          ;*Macro unroll:  mCODE 3, "TIB", TIB
0EB4                          ALIGN   2   
0EB4                TIB:         
0EB4                VVCODE:   .SET   $   
0EB4                VVLEN:    .SET   (3 & 01FH) / CELLL   
152A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
152A                VVNAME:   .SET   $   
152A   B4 0E 36 15            DW   vvCODE,vvLINK   
152E                VVLINK:   .SET   $   
152E   03 54 49 42            DB   3,"TIB"   
0EB4                          .ORG   vvCODE   
0EB4   00                     NOP      
0EB5   CD E0 05               CALL   doLIST   
0EB8   D8 10 68 03 14 0E 16 06 DW   NTIB,CELLP,AT,EXIT   
0EC0                             ;   @EXECUTE    ( a -- )
0EC0                             ;               Execute vector stored in address a.
0EC0                          ;*Macro unroll: hCOLON  8,'@EXECUTE',ATEXE
0EC0                          ;*Macro unroll:  hCODE 8, "@EXECUTE", ATEXE
0EC0                          ALIGN   2   
0EC0                ATEXE:       
0EC0   00                     NOP      
0EC1   CD E0 05               CALL   doLIST   
0EC4   14 0E 10 10            DW   AT,QDUP   ;?address or zero
0EC8   E4 0D CE 0E            DW   QBRAN,EXE1   
0ECC   E0 0D                  DW   EXECU   ;execute if non-zero
0ECE                EXE1:        
0ECE   16 06                  DW   EXIT   ;do nothing if zero
0ED0                             ;   CMOVE       ( b1 b2 u -- )
0ED0                             ;               Copy u bytes from b1 to b2.
0ED0                          ;*Macro unroll: mCOLON  5,'CMOVE',CMOVE
0ED0                          ;*Macro unroll:  mCODE 5, "CMOVE", CMOVE
0ED0                          ALIGN   2   
0ED0                CMOVE:       
0ED0                VVCODE:   .SET   $   
0ED0                VVLEN:    .SET   (5 & 01FH) / CELLL   
1520                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1520                VVNAME:   .SET   $   
1520   D0 0E 2E 15            DW   vvCODE,vvLINK   
1524                VVLINK:   .SET   $   
1524   05 43 4D 4F 56 45      DB   5,"CMOVE"   
0ED0                          .ORG   vvCODE   
0ED0   00                     NOP      
0ED1   CD E0 05               CALL   doLIST   
0ED4   DC 0F                  DW   TOR   
0ED6   F0 0D F2 0E            DW   BRAN,CMOV2   
0EDA                CMOV1:       
0EDA   DC 0F F8 0F 24 0E      DW   TOR,DUPP,CAT   
0EE0   2C 0E 1C 0E            DW   RAT,CSTOR   
0EE4   EE 05 01 00 5C 01      DW   DOLIT,1,PLUS   
0EEA   EA 0F EE 05 01 00 5C 01 DW   RFROM,DOLIT,1,PLUS   
0EF2                CMOV2:       
0EF2   8C 06 DA 0E            DW   DONXT,CMOV1   
0EF6   2C 10 16 06            DW   DDROP,EXIT   
0EFA                             ;   FILL        ( b u c -- )
0EFA                             ;               Fill u bytes of character c to area beginning at b.
0EFA                          ;*Macro unroll: mCOLON  4,'FILL',FILL
0EFA                          ;*Macro unroll:  mCODE 4, "FILL", FILL
0EFA                          ALIGN   2   
0EFA                FILL:        
0EFA                VVCODE:   .SET   $   
0EFA                VVLEN:    .SET   (4 & 01FH) / CELLL   
1516                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1516                VVNAME:   .SET   $   
1516   FA 0E 24 15            DW   vvCODE,vvLINK   
151A                VVLINK:   .SET   $   
151A   04 46 49 4C 4C         DB   4,"FILL"   
0EFA                          .ORG   vvCODE   
0EFA   00                     NOP      
0EFB   CD E0 05               CALL   doLIST   
0EFE   00 10 DC 0F 00 10      DW   SWAP,TOR,SWAP   
0F04   F0 0D 12 0F            DW   BRAN,FILL2   
0F08                FILL1:       
0F08   36 10 1C 0E EE 05 01 00 5C 01 DW   DDUP,CSTOR,DOLIT,1,PLUS   
0F12                FILL2:       
0F12   8C 06 08 0F            DW   DONXT,FILL1   
0F16   2C 10 16 06            DW   DDROP,EXIT   
0F1A                             ;   -TRAILING   ( b u -- b u )
0F1A                             ;               Adjust the count to eliminate trailing white space.
0F1A                          ;*Macro unroll: mCOLON  9,'-TRAILING',DTRAI
0F1A                          ;*Macro unroll:  mCODE 9, "-TRAILING", DTRAI
0F1A                          ALIGN   2   
0F1A                DTRAI:       
0F1A                VVCODE:   .SET   $   
0F1A                VVLEN:    .SET   (9 & 01FH) / CELLL   
1508                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1508                VVNAME:   .SET   $   
1508   1A 0F 1A 15            DW   vvCODE,vvLINK   
150C                VVLINK:   .SET   $   
150C   09 2D 54 52 41 49 4C 49 4E 47 DB   9,"-TRAILING"   
0F1A                          .ORG   vvCODE   
0F1A   00                     NOP      
0F1B   CD E0 05               CALL   doLIST   
0F1E   DC 0F                  DW   TOR   
0F20   F0 0D 3E 0F            DW   BRAN,DTRA2   
0F24                DTRA1:       
0F24   72 07 08 10 2C 0E 5C 01 24 0E F0 01 DW   BLANK,OVER,RAT,PLUS,CAT,LESS   
0F30   E4 0D 3E 0F            DW   QBRAN,DTRA2   
0F34   EA 0F EE 05 01 00 5C 01 16 06 DW   RFROM,DOLIT,1,PLUS,EXIT   ;adjusted count
0F3E                DTRA2:       
0F3E   8C 06 24 0F            DW   DONXT,DTRA1   
0F42   EE 05 00 00 16 06      DW   DOLIT,0,EXIT   ;count=0
0F48                             ;   PACK$       ( b u a -- a )
0F48                             ;               Build a counted string with u characters from b. Null fill.
0F48                          ;*Macro unroll: mCOLON  5,'PACK$',PACKS
0F48                          ;*Macro unroll:  mCODE 5, "PACK$", PACKS
0F48                          ALIGN   2   
0F48                PACKS:       
0F48                VVCODE:   .SET   $   
0F48                VVLEN:    .SET   (5 & 01FH) / CELLL   
14FE                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
14FE                VVNAME:   .SET   $   
14FE   48 0F 0C 15            DW   vvCODE,vvLINK   
1502                VVLINK:   .SET   $   
1502   05 50 41 43 4B 24      DB   5,"PACK$"   
0F48                          .ORG   vvCODE   
0F48   00                     NOP      
0F49   CD E0 05               CALL   doLIST   
0F4C   82 0F F8 0F DC 0F      DW   ALGND,DUPP,TOR   ;strings only on cell boundary
0F52   08 10 F8 0F EE 05 00 00 DW   OVER,DUPP,DOLIT,0   
0F5A   EE 05 02 00 56 02 FC 0F DW   DOLIT,CELLL,UMMOD,DROP   ;count mod cell
0F62   9E 01 08 10 5C 01      DW   SUBB,OVER,PLUS   
0F68   EE 05 00 00 00 10 0A 0E DW   DOLIT,0,SWAP,STORE   ;null fill cell
0F70   36 10 1C 0E EE 05 01 00 5C 01 DW   DDUP,CSTOR,DOLIT,1,PLUS   ;save count
0F7A   00 10 D0 0E EA 0F 16 06 DW   SWAP,CMOVE,RFROM,EXIT   ;move string
0F82                             ;   ALIGNED     ( b -- a )
0F82                             ;               Align address to the cell boundary.
0F82                          ;*Macro unroll: mCOLON  7,'ALIGNED', ALGND
0F82                          ;*Macro unroll:  mCODE 7, "ALIGNED", ALGND
0F82                          ALIGN   2   
0F82                ALGND:       
0F82                VVCODE:   .SET   $   
0F82                VVLEN:    .SET   (7 & 01FH) / CELLL   
14F2                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
14F2                VVNAME:   .SET   $   
14F2   82 0F 02 15            DW   vvCODE,vvLINK   
14F6                VVLINK:   .SET   $   
14F6   07 41 4C 49 47 4E 45 44 DB   7,"ALIGNED"   
0F82                          .ORG   vvCODE   
0F82   00                     NOP      
0F83   CD E0 05               CALL   doLIST   
0F86   F8 0F EE 05 00 00 EE 05 02 00 DW   DUPP,DOLIT,0,DOLIT,CELLL   
0F90   56 02 FC 0F F8 0F      DW   UMMOD,DROP,DUPP   
0F96   E4 0D A2 0F            DW   QBRAN,ALGN1   
0F9A   EE 05 02 00 00 10 9E 01 DW   DoLIT,CELLL,SWAP,SUBB   
0FA2                ALGN1:       
0FA2   5C 01 16 06            DW   PLUS,EXIT   
0FA6   54 79 70 65 20 73 6F 6D 65 74 68 69 6E 67 0D 0A 00 GREETING:   .CSTR   "Type something\r\n"   
0FB7                             ; ERR_ABORT:	    .cstr	"ABORT" ;-01
0FB7                             ; ERR_ABORTDQ:    .cstr	"ABORT"";-02
0FB7                             ; ERR_STACKOF:    .cstr	"stack overflow";-03
0FB7                             ; ERR_STACKUF:	.cstr	"stack underflow"       ;-04
0FB7                             ; ERR_RETOF:    	.cstr	"return stack overflow" ;-05
0FB7                             ; ERR_RETUF:     	.cstr	"return stack underflow";-06
0FB7                             ; ERR_DONEST:   	.cstr	"do-loops nested too deeply during execution"   ;-07
0FB7                             ; ERR_DICTOF     	.cstr	"dictionary overflow"   ;-08
0FB7                             ; ERR_MEMADDR   	.cstr	"invalid memory address";-09
0FB7   64 69 76 69 73 69 6F 6E 20 62 79 20 7A 65 72 6F 00 ERR_DIVZERO:   .CSTR   "division by zero"   ;-10
0FC8   72 65 73 75 6C 74 20 6F 75 74 20 6F 66 20 72 61 6E 67 65 00 ERR_OUTOFRANGE:   .CSTR   "result out of range"   ;-11
0FDC                             ; ERR_MISMATCH    .cstr	"argument type mismatch";-12
0FDC                             ; ERR_UNDEFINED 	.cstr	"undefined word";-13
0FDC                             ; ERR_COMPONLY	.cstr	"interpreting a compile-only word"      ;-14
0FDC                             ; ERR_FORGET  	.cstr	"invalid FORGET";-15
0FDC                             ; ERR_ZEROSTR   	.cstr	"attempt to use zero-length string as a name"   ;-16
0FDC                             ; ERR_FORMAT  	.cstr	"pictured numeric output string overflow"       ;-17
0FDC                             ; ERR_PARSE     	.cstr	"parsed string overflow";-18
0FDC                             ; ERR_TOOLONG    	.cstr	"definition name too long"      ;-19
0FDC                             ; ERR_READONLY	.cstr	"write to a read-only location" ;-20
0FDC                             ; ERR_UNSUPPORTED .cstr	"unsupported operation" ;-21
0FDC                             ; ERR_UNSTRUCT	.cstr	"control structure mismatch"    ;-22
0FDC                             ; ERR_ADDRALIGN 	.cstr	"address alignment exception"   ;-23
0FDC                             ; ERR_NUMERIC     .cstr	"invalid numeric argument"      ;-24
0FDC                             ; ERR_IMBALANCE   .cstr	"return stack imbalance";-25
0FDC                             ; ERR_LOOPPARAM   .cstr	"loop parameters unavailable"   ;-26
0FDC                             ; ERR_RECURSION   .cstr	"invalid recursion"     ;-27
0FDC                             ; ERR_INTERRUPT   .cstr	"user interrupt";-28
0FDC                             ; ERR_NESTING    	.cstr	"compiler nesting"      ;-29
0FDC                             ; ERR_OBSOLETE    .cstr	"obsolescent feature"   ;-30
0FDC                             ; ERR_NONCREATE   .cstr	">BODY used on non-CREATEd definition"  ;-31
0FDC                             ; ERR_NAME    	.cstr	"invalid name argument (e.g., TO xxx)"  ;-32
0FDC                             ; ERR_BLOCKREAD   .cstr	"block read exception"  ;-33
0FDC                             ; ERR_BLOCKWRITE  .cstr	"block write exception" ;-34
0FDC                             ; ERR_BLOCKNUM    .cstr	"invalid block number"  ;-35
0FDC                             ; ERR_FILEPOS    	.cstr	"invalid file position" ;-36
0FDC                             ; ERR_FILEIO    	.cstr	"file I/O exception"    ;-37
0FDC                             ; ERR_FILEEXIST   .cstr	"non-existent file"     ;-38
0FDC                             ; ERR_FILEEOF    	.cstr	"unexpected end of file";-39
0FDC                             ; ERR_BASE    	.cstr	"invalid BASE for floating point conversion"    ;-40
0FDC                             ; ERR_PRECISION   .cstr	"loss of precision"     ;-41
0FDC                             ; ERR_FDIVZERO    .cstr	"floating-point divide by zero" ;-42
0FDC                             ; ERR_FRANGE    	.cstr	"floating-point result out of range"    ;-43
0FDC                             ; ERR_FSOF    	.cstr	"floating-point stack overflow" ;-44
0FDC                             ; ERR_FSUF    	.cstr	"floating-point stack underflow";-45
0FDC                             ; ERR_FINVALID    .cstr	"floating-point invalid argument"       ;-46
0FDC                             ; ERR_WORDLIST    .cstr	"compilation word list deleted" ;-47
0FDC                             ; ERR_POSTPONE    .cstr	"invalid POSTPONE"      ;-48
0FDC                             ; ERR_SEARCHOF    .cstr	"search-order overflow" ;-49
0FDC                             ; ERR_SEARCHUF    .cstr	"search-order underflow";-50
0FDC                             ; ERR_WORDLISTCHG .cstr	"compilation word list changed" ;-51
0FDC                             ; ERR_CONTROLOF   .cstr	"control-flow stack overflow"   ;-52
0FDC                             ; ERR_CONTROLUF   .cstr	"exception stack overflow"      ;-53
0FDC                             ; ERR_FPUF    	.cstr	"floating-point underflow"      ;-54
0FDC                             ; ERR_FPFAULT    	.cstr	"floating-point unidentified fault"     ;-55
0FDC                             ; ERR_QUIT    	.cstr	"QUIT"  ;-56
0FDC                             ; ERR_IO    	    .cstr	"exception in sending or receiving a character" ;-57
0FDC                             ; ERR_IF    	    .cstr	"[IF], [ELSE], or [THEN] exception"     ;-58
0FDC                             ;   >R          ( w -- )
0FDC                             ;               Push the data stack to the return stack.
0FDC                          ;*Macro unroll: mCODE	COMPO+2, '>R', ToR
0FDC                          ALIGN   2   
0FDC                TOR:         
0FDC                VVCODE:   .SET   $   
0FDC                VVLEN:    .SET   (COMPO+2 & 01FH) / CELLL   
14CA                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
14CA                VVNAME:   .SET   $   
14CA   DC 0F F6 14            DW   vvCODE,vvLINK   
14CE                VVLINK:   .SET   $   
14CE   22 3E 52               DB   COMPO+2,">R"   
0FDC                          .ORG   vvCODE   
0FDC   DD 2B                  DEC   IX   
0FDE   DD 70 00               LD   (IX+0),B   
0FE1   DD 2B                  DEC   IX   
0FE3   DD 71 00               LD   (IX+0),C   
0FE6   C1                     POP   BC   
0FE7                          ;*Macro unroll: 	mNEXT
0FE7   EB                     EX   DE,HL   
0FE8                          ;*Macro unroll:  mNEXTHL                         ; 34t
0FE8   FD E9                  JP   (IY)   ; 34t
0FEA                             ;   R>          ( -- w )
0FEA                             ;               Pop the return stack to the data stack.
0FEA                          ;*Macro unroll: mCODE	COMPO+2, 'R>', RFrom
0FEA                          ALIGN   2   
0FEA                RFROM:       
0FEA                VVCODE:   .SET   $   
0FEA                VVLEN:    .SET   (COMPO+2 & 01FH) / CELLL   
14A2                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
14A2                VVNAME:   .SET   $   
14A2   EA 0F CE 14            DW   vvCODE,vvLINK   
14A6                VVLINK:   .SET   $   
14A6   22 52 3E               DB   COMPO+2,"R>"   
0FEA                          .ORG   vvCODE   
0FEA   C5                     PUSH   BC   
0FEB   DD 4E 00               LD   C,(IX+0)   
0FEE   DD 23                  INC   IX   
0FF0   DD 46 00               LD   B,(IX+0)   
0FF3   DD 23                  INC   IX   
0FF5                          ;*Macro unroll: 	mNEXT
0FF5   EB                     EX   DE,HL   
0FF6                          ;*Macro unroll:  mNEXTHL                         ; 34t
0FF6   FD E9                  JP   (IY)   ; 34t
0FF8                             ;   DUP         ( w -- w w )
0FF8                             ;               Duplicate the top stack item.
0FF8                          ;*Macro unroll: mCODE	3, 'DUP', DUPP
0FF8                          ALIGN   2   
0FF8                DUPP:        
0FF8                VVCODE:   .SET   $   
0FF8                VVLEN:    .SET   (3 & 01FH) / CELLL   
149A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
149A                VVNAME:   .SET   $   
149A   F8 0F A6 14            DW   vvCODE,vvLINK   
149E                VVLINK:   .SET   $   
149E   03 44 55 50            DB   3,"DUP"   
0FF8                          .ORG   vvCODE   
0FF8   C5                     PUSH   BC   
0FF9                          ;*Macro unroll:  mNEXT
0FF9   EB                     EX   DE,HL   
0FFA                          ;*Macro unroll:  mNEXTHL                         ; 34t
0FFA   FD E9                  JP   (IY)   ; 34t
0FFC                             ;   DROP	( x -- )			\ CORE
0FFC                             ;		Discard top stack item.
0FFC                          ;*Macro unroll: mCODE	4, 'DROP', DROP
0FFC                          ALIGN   2   
0FFC                DROP:        
0FFC                VVCODE:   .SET   $   
0FFC                VVLEN:    .SET   (4 & 01FH) / CELLL   
1490                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1490                VVNAME:   .SET   $   
1490   FC 0F 9E 14            DW   vvCODE,vvLINK   
1494                VVLINK:   .SET   $   
1494   04 44 52 4F 50         DB   4,"DROP"   
0FFC                          .ORG   vvCODE   
0FFC   C1                     POP   BC   
0FFD                          ;*Macro unroll:  mNEXT
0FFD   EB                     EX   DE,HL   
0FFE                          ;*Macro unroll:  mNEXTHL                         ; 34t
0FFE   FD E9                  JP   (IY)   ; 34t
1000                             ;   SWAP        ( w1 w2 -- w2 w1 )
1000                             ;               Exchange top two stack items.
1000                          ;*Macro unroll: mCODE	4, 'SWAP', SWAP
1000                          ALIGN   2   
1000                SWAP:        
1000                VVCODE:   .SET   $   
1000                VVLEN:    .SET   (4 & 01FH) / CELLL   
1486                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1486                VVNAME:   .SET   $   
1486   00 10 94 14            DW   vvCODE,vvLINK   
148A                VVLINK:   .SET   $   
148A   04 53 57 41 50         DB   4,"SWAP"   
1000                          .ORG   vvCODE   
1000   E1                     POP   HL   
1001   C5                     PUSH   BC   
1002   44                     LD   B,H   
1003   4D                     LD   C,L   
1004                          ;*Macro unroll: 	mNEXT
1004   EB                     EX   DE,HL   
1005                          ;*Macro unroll:  mNEXTHL                         ; 34t
1005   FD E9                  JP   (IY)   ; 34t
1007                             ;   OVER        ( w1 w2 -- w1 w2 w1 )
1007                             ;               Copy second stack item to top.
1007                          ;*Macro unroll: mCODE	4, 'OVER', OVER
1007                          ALIGN   2   
1008                OVER:        
1008                VVCODE:   .SET   $   
1008                VVLEN:    .SET   (4 & 01FH) / CELLL   
147C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
147C                VVNAME:   .SET   $   
147C   08 10 8A 14            DW   vvCODE,vvLINK   
1480                VVLINK:   .SET   $   
1480   04 4F 56 45 52         DB   4,"OVER"   
1008                          .ORG   vvCODE   
1008   E1                     POP   HL   
1009   E5                     PUSH   HL   
100A   C5                     PUSH   BC   
100B   44                     LD   B,H   
100C   4D                     LD   C,L   
100D                          ;*Macro unroll: 	mNEXT
100D   EB                     EX   DE,HL   
100E                          ;*Macro unroll:  mNEXTHL                         ; 34t
100E   FD E9                  JP   (IY)   ; 34t
1010                             ;   ?DUP        ( w -- w w | 0 )
1010                             ;               Dup tos if its is not zero.
1010                          ;*Macro unroll: mCOLON	4,'?DUP', QDUP
1010                          ;*Macro unroll:  mCODE 4, "?DUP", QDUP
1010                          ALIGN   2   
1010                QDUP:        
1010                VVCODE:   .SET   $   
1010                VVLEN:    .SET   (4 & 01FH) / CELLL   
1472                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1472                VVNAME:   .SET   $   
1472   10 10 80 14            DW   vvCODE,vvLINK   
1476                VVLINK:   .SET   $   
1476   04 3F 44 55 50         DB   4,"?DUP"   
1010                          .ORG   vvCODE   
1010   00                     NOP      
1011   CD E0 05               CALL   doLIST   
1014   F8 0F E4 0D 1C 10      DW   DUPP,QBRAN,QDUP1   
101A   F8 0F                  DW   DUPP   
101C                QDUP1:       
101C   16 06                  DW   EXIT   
101E                             ;   ROT         ( w1 w2 w3 -- w2 w3 w1 )
101E                             ;               Rot 3rd item to top.
101E                          ;*Macro unroll: mCOLON	3,'ROT', ROT
101E                          ;*Macro unroll:  mCODE 3, "ROT", ROT
101E                          ALIGN   2   
101E                ROT:         
101E                VVCODE:   .SET   $   
101E                VVLEN:    .SET   (3 & 01FH) / CELLL   
146A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
146A                VVNAME:   .SET   $   
146A   1E 10 76 14            DW   vvCODE,vvLINK   
146E                VVLINK:   .SET   $   
146E   03 52 4F 54            DB   3,"ROT"   
101E                          .ORG   vvCODE   
101E   00                     NOP      
101F   CD E0 05               CALL   doLIST   
1022   DC 0F 00 10 EA 0F 00 10 16 06 DW   ToR,SWAP,RFrom,SWAP,EXIT   
102C                             ;   2DROP       ( w w -- )
102C                             ;               Discard two items on stack.
102C                          ;*Macro unroll: mCOLON	5,'2DROP',DDROP
102C                          ;*Macro unroll:  mCODE 5, "2DROP", DDROP
102C                          ALIGN   2   
102C                DDROP:       
102C                VVCODE:   .SET   $   
102C                VVLEN:    .SET   (5 & 01FH) / CELLL   
1460                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1460                VVNAME:   .SET   $   
1460   2C 10 6E 14            DW   vvCODE,vvLINK   
1464                VVLINK:   .SET   $   
1464   05 32 44 52 4F 50      DB   5,"2DROP"   
102C                          .ORG   vvCODE   
102C   00                     NOP      
102D   CD E0 05               CALL   doLIST   
1030   FC 0F FC 0F 16 06      DW   DROP,DROP,EXIT   
1036                             ;   2DUP        ( w1 w2 -- w1 w2 w1 w2 )
1036                             ;               Duplicate top two items.
1036                          ;*Macro unroll: mCOLON	4,'2DUP',DDUP
1036                          ;*Macro unroll:  mCODE 4, "2DUP", DDUP
1036                          ALIGN   2   
1036                DDUP:        
1036                VVCODE:   .SET   $   
1036                VVLEN:    .SET   (4 & 01FH) / CELLL   
1456                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1456                VVNAME:   .SET   $   
1456   36 10 64 14            DW   vvCODE,vvLINK   
145A                VVLINK:   .SET   $   
145A   04 32 44 55 50         DB   4,"2DUP"   
1036                          .ORG   vvCODE   
1036   00                     NOP      
1037   CD E0 05               CALL   doLIST   
103A   08 10 08 10 16 06      DW   OVER,OVER,EXIT   
1040                             ;   2SWAP        ( w1 w2 w3 w4 -- w3 w4 w1 w2 )
1040                             ;               Exchange top two items.
1040                          ;*Macro unroll: mCOLON	5,'2SWAP',TwoSWAP
1040                          ;*Macro unroll:  mCODE 5, "2SWAP", TwoSWAP
1040                          ALIGN   2   
1040                TWOSWAP:      
1040                VVCODE:   .SET   $   
1040                VVLEN:    .SET   (5 & 01FH) / CELLL   
144C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
144C                VVNAME:   .SET   $   
144C   40 10 5A 14            DW   vvCODE,vvLINK   
1450                VVLINK:   .SET   $   
1450   05 32 53 57 41 50      DB   5,"2SWAP"   
1040                          .ORG   vvCODE   
1040   00                     NOP      
1041   CD E0 05               CALL   doLIST   
1044   1E 10 DC 0F 1E 10 EA 0F 16 06 DW   ROT,ToR,ROT,RFrom,EXIT   
104E                             ;   PICK        ( ... +n -- ... w )
104E                             ;               Copy the nth stack item to tos.
104E                          ;*Macro unroll: mCOLON  4,'PICK',PICK
104E                          ;*Macro unroll:  mCODE 4, "PICK", PICK
104E                          ALIGN   2   
104E                PICK:        
104E                VVCODE:   .SET   $   
104E                VVLEN:    .SET   (4 & 01FH) / CELLL   
1442                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1442                VVNAME:   .SET   $   
1442   4E 10 50 14            DW   vvCODE,vvLINK   
1446                VVLINK:   .SET   $   
1446   04 50 49 43 4B         DB   4,"PICK"   
104E                          .ORG   vvCODE   
104E   00                     NOP      
104F   CD E0 05               CALL   doLIST   
1052   EE 05 01 00 5C 01 80 03 DW   DOLIT,1,PLUS,CELLS   
105A   46 0E 5C 01 14 0E 16 06 DW   SPAT,PLUS,AT,EXIT   
1062                             ;   DEPTH       ( -- n )
1062                             ;               Return the depth of the data stack.
1062                          ;*Macro unroll: mCOLON	5,'DEPTH',DEPTH
1062                          ;*Macro unroll:  mCODE 5, "DEPTH", DEPTH
1062                          ALIGN   2   
1062                DEPTH:       
1062                VVCODE:   .SET   $   
1062                VVLEN:    .SET   (5 & 01FH) / CELLL   
1438                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1438                VVNAME:   .SET   $   
1438   62 10 46 14            DW   vvCODE,vvLINK   
143C                VVLINK:   .SET   $   
143C   05 44 45 50 54 48      DB   5,"DEPTH"   
1062                          .ORG   vvCODE   
1062   00                     NOP      
1063   CD E0 05               CALL   doLIST   
1066   46 0E 78 10 14 0E 00 10 9E 01 DW   SPAT,SZero,AT,SWAP,SUBB   
1070   EE 05 02 00 02 03 16 06 DW   DoLIT,CELLL,Slash,EXIT   
1078                             ;   SP0         ( -- a )
1078                             ;               Pointer to bottom of the data stack.
1078                          ;*Macro unroll: mUSER   3,'SP0',SZERO
1078                          ;*Macro unroll: 	mCODE 3, "SP0", SZERO
1078                          ALIGN   2   
1078                SZERO:       
1078                VVCODE:   .SET   $   
1078                VVLEN:    .SET   (3 & 01FH) / CELLL   
1430                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1430                VVNAME:   .SET   $   
1430   78 10 3C 14            DW   vvCODE,vvLINK   
1434                VVLINK:   .SET   $   
1434   03 53 50 30            DB   3,"SP0"   
1078                          .ORG   vvCODE   
1078   00                     NOP      
1079   CD E0 05               CALL   doLIST   
107C   06 06 00 00            DW   DoUSE,vvUSER   
1080                VVUSER:   .SET   vvUSER + CELLL   
1080                             ;   RP0         ( -- a )
1080                             ;               Pointer to bottom of the return stack.
1080                          ;*Macro unroll: mUSER   3,'RP0',RZERO
1080                          ;*Macro unroll: 	mCODE 3, "RP0", RZERO
1080                          ALIGN   2   
1080                RZERO:       
1080                VVCODE:   .SET   $   
1080                VVLEN:    .SET   (3 & 01FH) / CELLL   
1428                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1428                VVNAME:   .SET   $   
1428   80 10 34 14            DW   vvCODE,vvLINK   
142C                VVLINK:   .SET   $   
142C   03 52 50 30            DB   3,"RP0"   
1080                          .ORG   vvCODE   
1080   00                     NOP      
1081   CD E0 05               CALL   doLIST   
1084   06 06 02 00            DW   DoUSE,vvUSER   
1088                VVUSER:   .SET   vvUSER + CELLL   
1088                             ;   '?KEY       ( -- a )
1088                             ;               Execution vector of ?KEY.
1088                          ;*Macro unroll: hUSER   5,"'?KEY",TQKEY
1088                          ;*Macro unroll: 	hCODE 5, "'?KEY", TQKEY
1088                          ALIGN   2   
1088                TQKEY:       
1088   00                     NOP      
1089   CD E0 05               CALL   doLIST   
108C   06 06 04 00            DW   DoUSE,vvUSER   
1090                VVUSER:   .SET   vvUSER + CELLL   
1090                             ;   'EMIT       ( -- a )
1090                             ;               Execution vector of EMIT.
1090                          ;*Macro unroll: hUSER   5,"'EMIT",TEMIT
1090                          ;*Macro unroll: 	hCODE 5, "'EMIT", TEMIT
1090                          ALIGN   2   
1090                TEMIT:       
1090   00                     NOP      
1091   CD E0 05               CALL   doLIST   
1094   06 06 06 00            DW   DoUSE,vvUSER   
1098                VVUSER:   .SET   vvUSER + CELLL   
1098                             ;   'EXPECT     ( -- a )
1098                             ;               Execution vector of EXPECT.
1098                          ;*Macro unroll: hUSER   7,"'EXPECT",TEXPE
1098                          ;*Macro unroll: 	hCODE 7, "'EXPECT", TEXPE
1098                          ALIGN   2   
1098                TEXPE:       
1098   00                     NOP      
1099   CD E0 05               CALL   doLIST   
109C   06 06 08 00            DW   DoUSE,vvUSER   
10A0                VVUSER:   .SET   vvUSER + CELLL   
10A0                             ;   'TAP        ( -- a )
10A0                             ;               Execution vector of TAP.
10A0                          ;*Macro unroll: hUSER   4,"'TAP",TTAP
10A0                          ;*Macro unroll: 	hCODE 4, "'TAP", TTAP
10A0                          ALIGN   2   
10A0                TTAP:        
10A0   00                     NOP      
10A1   CD E0 05               CALL   doLIST   
10A4   06 06 0A 00            DW   DoUSE,vvUSER   
10A8                VVUSER:   .SET   vvUSER + CELLL   
10A8                             ;   'ECHO       ( -- a )
10A8                             ;               Execution vector of ECHO.
10A8                          ;*Macro unroll: hUSER   5,"'ECHO",TECHO
10A8                          ;*Macro unroll: 	hCODE 5, "'ECHO", TECHO
10A8                          ALIGN   2   
10A8                TECHO:       
10A8   00                     NOP      
10A9   CD E0 05               CALL   doLIST   
10AC   06 06 0C 00            DW   DoUSE,vvUSER   
10B0                VVUSER:   .SET   vvUSER + CELLL   
10B0                             ;   'PROMPT     ( -- a )
10B0                             ;               Execution vector of PROMPT.
10B0                          ;*Macro unroll: hUSER   7,"'PROMPT",TPROM
10B0                          ;*Macro unroll: 	hCODE 7, "'PROMPT", TPROM
10B0                          ALIGN   2   
10B0                TPROM:       
10B0   00                     NOP      
10B1   CD E0 05               CALL   doLIST   
10B4   06 06 0E 00            DW   DoUSE,vvUSER   
10B8                VVUSER:   .SET   vvUSER + CELLL   
10B8                             ;   BASE        ( -- a )
10B8                             ;               Storage of the radix base for numeric I/O.
10B8                          ;*Macro unroll: mUSER   4,'BASE',BASE
10B8                          ;*Macro unroll: 	mCODE 4, "BASE", BASE
10B8                          ALIGN   2   
10B8                BASE:        
10B8                VVCODE:   .SET   $   
10B8                VVLEN:    .SET   (4 & 01FH) / CELLL   
141E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
141E                VVNAME:   .SET   $   
141E   B8 10 2C 14            DW   vvCODE,vvLINK   
1422                VVLINK:   .SET   $   
1422   04 42 41 53 45         DB   4,"BASE"   
10B8                          .ORG   vvCODE   
10B8   00                     NOP      
10B9   CD E0 05               CALL   doLIST   
10BC   06 06 10 00            DW   DoUSE,vvUSER   
10C0                VVUSER:   .SET   vvUSER + CELLL   
10C0                             ;   tmp         ( -- a )
10C0                             ;               A temporary storage location used in parse and find.
10C0                          ;*Macro unroll: mUSER   COMPO+3,'tmp',TEMP
10C0                          ;*Macro unroll: 	mCODE COMPO+3, "tmp", TEMP
10C0                          ALIGN   2   
10C0                TEMP:        
10C0                VVCODE:   .SET   $   
10C0                VVLEN:    .SET   (COMPO+3 & 01FH) / CELLL   
13F6                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
13F6                VVNAME:   .SET   $   
13F6   C0 10 22 14            DW   vvCODE,vvLINK   
13FA                VVLINK:   .SET   $   
13FA   23 74 6D 70            DB   COMPO+3,"tmp"   
10C0                          .ORG   vvCODE   
10C0   00                     NOP      
10C1   CD E0 05               CALL   doLIST   
10C4   06 06 12 00            DW   DoUSE,vvUSER   
10C8                VVUSER:   .SET   vvUSER + CELLL   
10C8                             ;   SPAN        ( -- a )
10C8                             ;               Hold character count received by EXPECT.
10C8                          ;*Macro unroll: hUSER   4,'SPAN',SPAN
10C8                          ;*Macro unroll: 	hCODE 4, "SPAN", SPAN
10C8                          ALIGN   2   
10C8                SPAN:        
10C8   00                     NOP      
10C9   CD E0 05               CALL   doLIST   
10CC   06 06 14 00            DW   DoUSE,vvUSER   
10D0                VVUSER:   .SET   vvUSER + CELLL   
10D0                             ;   >IN         ( -- a )
10D0                             ;               Hold the character pointer while parsing input stream.
10D0                          ;*Macro unroll: mUSER   3,'>IN',INN
10D0                          ;*Macro unroll: 	mCODE 3, ">IN", INN
10D0                          ALIGN   2   
10D0                INN:         
10D0                VVCODE:   .SET   $   
10D0                VVLEN:    .SET   (3 & 01FH) / CELLL   
13EE                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
13EE                VVNAME:   .SET   $   
13EE   D0 10 FA 13            DW   vvCODE,vvLINK   
13F2                VVLINK:   .SET   $   
13F2   03 3E 49 4E            DB   3,">IN"   
10D0                          .ORG   vvCODE   
10D0   00                     NOP      
10D1   CD E0 05               CALL   doLIST   
10D4   06 06 16 00            DW   DoUSE,vvUSER   
10D8                VVUSER:   .SET   vvUSER + CELLL   
10D8                             ;   #TIB        ( -- a )
10D8                             ;               Hold the current count and address of the terminal input buffer.
10D8                          ;*Macro unroll: hUSER   4,'#TIB',NTIB
10D8                          ;*Macro unroll: 	hCODE 4, "#TIB", NTIB
10D8                          ALIGN   2   
10D8                NTIB:        
10D8   00                     NOP      
10D9   CD E0 05               CALL   doLIST   
10DC   06 06 18 00            DW   DoUSE,vvUSER   
10E0                VVUSER:   .SET   vvUSER + CELLL   
10E0                VVUSER:   .SET   vvUSER + CELLL   
10E0                             ;   CSP         ( -- a )
10E0                             ;               Hold the stack pointer for error checking.
10E0                          ;*Macro unroll: hUSER   3,'CSP',CSP
10E0                          ;*Macro unroll: 	hCODE 3, "CSP", CSP
10E0                          ALIGN   2   
10E0                CSP:         
10E0   00                     NOP      
10E1   CD E0 05               CALL   doLIST   
10E4   06 06 1C 00            DW   DoUSE,vvUSER   
10E8                VVUSER:   .SET   vvUSER + CELLL   
10E8                             ;   'EVAL       ( -- a )
10E8                             ;               Execution vector of EVAL.
10E8                          ;*Macro unroll: hUSER   5,"'EVAL",TEVAL
10E8                          ;*Macro unroll: 	hCODE 5, "'EVAL", TEVAL
10E8                          ALIGN   2   
10E8                TEVAL:       
10E8   00                     NOP      
10E9   CD E0 05               CALL   doLIST   
10EC   06 06 1E 00            DW   DoUSE,vvUSER   
10F0                VVUSER:   .SET   vvUSER + CELLL   
10F0                             ;   'NUMBER     ( -- a )
10F0                             ;               Execution vector of NUMBER?.
10F0                          ;*Macro unroll: hUSER   7,"'NUMBER",TNUMB
10F0                          ;*Macro unroll: 	hCODE 7, "'NUMBER", TNUMB
10F0                          ALIGN   2   
10F0                TNUMB:       
10F0   00                     NOP      
10F1   CD E0 05               CALL   doLIST   
10F4   06 06 20 00            DW   DoUSE,vvUSER   
10F8                VVUSER:   .SET   vvUSER + CELLL   
10F8                             ;   HLD         ( -- a )
10F8                             ;               Hold a pointer in building a numeric output string.
10F8                          ;*Macro unroll: hUSER   3,'HLD',HLD
10F8                          ;*Macro unroll: 	hCODE 3, "HLD", HLD
10F8                          ALIGN   2   
10F8                HLD:         
10F8   00                     NOP      
10F9   CD E0 05               CALL   doLIST   
10FC   06 06 22 00            DW   DoUSE,vvUSER   
1100                VVUSER:   .SET   vvUSER + CELLL   
1100                             ;   HANDLER     ( -- a )
1100                             ;               Hold the return stack pointer for error handling.
1100                          ;*Macro unroll: hUSER   7,'HANDLER',HANDL
1100                          ;*Macro unroll: 	hCODE 7, "HANDLER", HANDL
1100                          ALIGN   2   
1100                HANDL:       
1100   00                     NOP      
1101   CD E0 05               CALL   doLIST   
1104   06 06 24 00            DW   DoUSE,vvUSER   
1108                VVUSER:   .SET   vvUSER + CELLL   
1108                             ;   CONTEXT     ( -- a )
1108                             ;               A area to specify vocabulary search order.
1108                          ;*Macro unroll: hUSER   7,'CONTEXT',CNTXT
1108                          ;*Macro unroll: 	hCODE 7, "CONTEXT", CNTXT
1108                          ALIGN   2   
1108                CNTXT:       
1108   00                     NOP      
1109   CD E0 05               CALL   doLIST   
110C   06 06 26 00            DW   DoUSE,vvUSER   
1110                VVUSER:   .SET   vvUSER + CELLL   
1110                VVUSER:   .SET   vvUSER + VOCSS * CELLL   ;vocabulary stack
1110                             ;   CURRENT     ( -- a )
1110                             ;               Point to the vocabulary to be extended.
1110                          ;*Macro unroll: hUSER   7,'CURRENT',CRRNT
1110                          ;*Macro unroll: 	hCODE 7, "CURRENT", CRRNT
1110                          ALIGN   2   
1110                CRRNT:       
1110   00                     NOP      
1111   CD E0 05               CALL   doLIST   
1114   06 06 38 00            DW   DoUSE,vvUSER   
1118                VVUSER:   .SET   vvUSER + CELLL   
1118                VVUSER:   .SET   vvUSER + CELLL   ;vocabulary link pointer
1118                             ;   CP          ( -- a )
1118                             ;               Point to the top of the code dictionary.
1118                          ;*Macro unroll: hUSER   2,'CP',CP
1118                          ;*Macro unroll: 	hCODE 2, "CP", CP
1118                          ALIGN   2   
1118                CP:          
1118   00                     NOP      
1119   CD E0 05               CALL   doLIST   
111C   06 06 3C 00            DW   DoUSE,vvUSER   
1120                VVUSER:   .SET   vvUSER + CELLL   
1120                             ;   NP          ( -- a )
1120                             ;               Point to the bottom of the name dictionary.
1120                          ;*Macro unroll: hUSER   2,'NP',NP
1120                          ;*Macro unroll: 	hCODE 2, "NP", NP
1120                          ALIGN   2   
1120                NP:          
1120   00                     NOP      
1121   CD E0 05               CALL   doLIST   
1124   06 06 3E 00            DW   DoUSE,vvUSER   
1128                VVUSER:   .SET   vvUSER + CELLL   
1128                             ;   LAST        ( -- a )
1128                             ;               Point to the last name in the name dictionary.
1128                          ;*Macro unroll: mUSER   4,'LAST',LAST
1128                          ;*Macro unroll: 	mCODE 4, "LAST", LAST
1128                          ALIGN   2   
1128                LAST:        
1128                VVCODE:   .SET   $   
1128                VVLEN:    .SET   (4 & 01FH) / CELLL   
13E4                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
13E4                VVNAME:   .SET   $   
13E4   28 11 F2 13            DW   vvCODE,vvLINK   
13E8                VVLINK:   .SET   $   
13E8   04 4C 41 53 54         DB   4,"LAST"   
1128                          .ORG   vvCODE   
1128   00                     NOP      
1129   CD E0 05               CALL   doLIST   
112C   06 06 40 00            DW   DoUSE,vvUSER   
1130                VVUSER:   .SET   vvUSER + CELLL   
1130                             ;   forth       ( -- a )
1130                             ;               Point to the last name in the name dictionary.
1130                          ;*Macro unroll: hUSER   5,'forth',VFRTH
1130                          ;*Macro unroll: 	hCODE 5, "forth", VFRTH
1130                          ALIGN   2   
1130                VFRTH:       
1130   00                     NOP      
1131   CD E0 05               CALL   doLIST   
1134   06 06 42 00            DW   DoUSE,vvUSER   
1138                VVUSER:   .SET   vvUSER + CELLL   
1138                             ;   _TYPE       ( b u -- )
1138                             ;               Display a string. Filter non-printing characters.
1138                          ;*Macro unroll: mCOLON  5,'_TYPE',UTYPE
1138                          ;*Macro unroll:  mCODE 5, "_TYPE", UTYPE
1138                          ALIGN   2   
1138                UTYPE:       
1138                VVCODE:   .SET   $   
1138                VVLEN:    .SET   (5 & 01FH) / CELLL   
13DA                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
13DA                VVNAME:   .SET   $   
13DA   38 11 E8 13            DW   vvCODE,vvLINK   
13DE                VVLINK:   .SET   $   
13DE   05 5F 54 59 50 45      DB   5,"_TYPE"   
1138                          .ORG   vvCODE   
1138   00                     NOP      
1139   CD E0 05               CALL   doLIST   
113C   DC 0F                  DW   TOR   ;start count down loop
113E   F0 0D 50 11            DW   BRAN,UTYP2   ;skip first pass
1142                UTYP1:       
1142   F8 0F 24 0E 7C 07 BE 0B DW   DUPP,CAT,TCHAR,EMIT   ;display only printable
114A   EE 05 01 00 5C 01      DW   DOLIT,1,PLUS   ;increment address
1150                UTYP2:       
1150   8C 06 42 11            DW   DONXT,UTYP1   ;loop till done
1154   FC 0F 16 06            DW   DROP,EXIT   
1158                             ;   dm+         ( a u -- a )
1158                             ;               Dump u bytes from , leaving a+u on the stack.
1158                          ;*Macro unroll: hCOLON  3,'dm+',DMP
1158                          ;*Macro unroll:  hCODE 3, "dm+", DMP
1158                          ALIGN   2   
1158                DMP:         
1158   00                     NOP      
1159   CD E0 05               CALL   doLIST   
115C   08 10 EE 05 04 00 80 0C DW   OVER,DOLIT,4,UDOTR   ;display address
1164   EE 0B DC 0F            DW   SPACE,TOR   ;start count down loop
1168   F0 0D 7C 11            DW   BRAN,PDUM2   ;skip first pass
116C                PDUM1:       
116C   F8 0F 24 0E EE 05 03 00 80 0C DW   DUPP,CAT,DOLIT,3,UDOTR   ;display numeric data
1176   EE 05 01 00 5C 01      DW   DOLIT,1,PLUS   ;increment address
117C                PDUM2:       
117C   8C 06 6C 11            DW   DONXT,PDUM1   ;loop till done
1180   16 06                  DW   EXIT   
1182                             ;   DUMP        ( a u -- )
1182                             ;               Dump u bytes from a, in a formatted manner.
1182                          ;*Macro unroll: mCOLON  4,'DUMP',DUMP
1182                          ;*Macro unroll:  mCODE 4, "DUMP", DUMP
1182                          ALIGN   2   
1182                DUMP:        
1182                VVCODE:   .SET   $   
1182                VVLEN:    .SET   (4 & 01FH) / CELLL   
13D0                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
13D0                VVNAME:   .SET   $   
13D0   82 11 DE 13            DW   vvCODE,vvLINK   
13D4                VVLINK:   .SET   $   
13D4   04 44 55 4D 50         DB   4,"DUMP"   
1182                          .ORG   vvCODE   
1182   00                     NOP      
1183   CD E0 05               CALL   doLIST   
1186   B8 10 14 0E DC 0F 56 07 DW   BASE,AT,TOR,HEX   ;save radix, set hex
118E   EE 05 10 00 02 03      DW   DOLIT,16,SLASH   ;change count to lines
1194   DC 0F                  DW   TOR   ;start count down loop
1196                DUMP1:       
1196   2E 0C EE 05 10 00 36 10 58 11 DW   CR,DOLIT,16,DDUP,DMP   ;display numeric
11A0   1E 10 1E 10            DW   ROT,ROT   
11A4   EE 0B EE 0B 38 11      DW   SPACE,SPACE,UTYPE   ;display printable characters
11AA   CA 0B 66 01            DW   NUFQ,INVER   ;user control
11AE   E4 0D BA 11            DW   QBRAN,DUMP2   
11B2   8C 06 96 11            DW   DONXT,DUMP1   ;loop till done
11B6   F0 0D BE 11            DW   BRAN,DUMP3   
11BA                DUMP2:       
11BA   EA 0F FC 0F            DW   RFROM,DROP   ;cleanup loop stack, early exit
11BE                DUMP3:       
11BE   FC 0F EA 0F B8 10 0A 0E DW   DROP,RFROM,BASE,STORE   ;restore radix
11C6   16 06                  DW   EXIT   
11C8                             ;   .S          ( ... -- ... )
11C8                             ;               Display the contents of the data stack.
11C8                          ;*Macro unroll: mCOLON  2,'.S',DOTS
11C8                          ;*Macro unroll:  mCODE 2, ".S", DOTS
11C8                          ALIGN   2   
11C8                DOTS:        
11C8                VVCODE:   .SET   $   
11C8                VVLEN:    .SET   (2 & 01FH) / CELLL   
13C8                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
13C8                VVNAME:   .SET   $   
13C8   C8 11 D4 13            DW   vvCODE,vvLINK   
13CC                VVLINK:   .SET   $   
13CC   02 2E 53               DB   2,".S"   
11C8                          .ORG   vvCODE   
11C8   00                     NOP      
11C9   CD E0 05               CALL   doLIST   
11CC   2E 0C 62 10            DW   CR,DEPTH   ;stack depth
11D0   DC 0F                  DW   TOR   ;start count down loop
11D2   F0 0D DC 11            DW   BRAN,DOTS2   ;skip first pass
11D6                DOTS1:       
11D6   2C 0E 4E 10 A8 0C      DW   RAT,PICK,DOT   ;index stack, display contents
11DC                DOTS2:       
11DC   8C 06 D6 11            DW   DONXT,DOTS1   ;loop till done
11E0                          ;*Macro unroll:  mDSTR DOTQP,' <sp'
11E0   60 0C                  DW   DOTQP   
11E2                VVLEN:    .SET   $   
11E2   00 20 3C 73 70         DB   0," <sp"   
11E7                VVCODE:   .SET   $   
11E2                          .ORG   vvLEN   
11E2   04                     DB   vvCODE - vvLEN - 1   
11E7                          .ORG   vvCODE   
11E7   16 06                  DW   EXIT   
11E9                             ;   !CSP        ( -- )
11E9                             ;               Save stack pointer in CSP for error checking.
11E9                             ;   ?CSP        ( -- )
11E9                             ;               Abort if stack pointer differs from that saved in CSP.
11E9                             ;   >NAME       ( ca -- na | F )
11E9                             ;               Convert code address to a name address.
11E9                             ;   .ID         ( na -- )
11E9                             ;               Display the name at address.
11E9                             ;   SEE         ( -- ; <string> )
11E9                             ;               A simple decompiler.
11E9                             ;   WORDS       ( -- )
11E9                             ;               Display the names in the context vocabulary.
11E9                             ;   COLD        ( -- )
11E9                             ;               The hilevel cold start sequence.
2000                          .ORG   END_ROM   
2000                          .ORG   START_RAM   
2000                          IF   TESTMODE   
                    TESTS_START:      
                              LD   HL,DONE   
                              CALL   PRINTSZ   
                              HALT      
                    DONE:     .CSTR   "Done!\r\n"   
2000                          ENDIF      
2000                          DS   DTS   ; data stack size
2200                SPP:         ; SP0 grows down
2200                TIBB:        
2200                          DS   RTS   ; return stack size
2400                RPP:         ; RP0 grows down (into TIBB)
2400                UPP:         
2400   00 00        VARSPP:   DW   0   ; SP0
2402   00 00        VARRPP:   DW   0   ; RP0
2404   00 00        VARQKEY:   DW   0   ; '?KEY
2406   00 00        VARTEMIT:   DW   0   ; 'EMIT
2408   00 00        VARTEXPECT:   DW   0   ; 'EXPECT
240A   00 00        VARTTAP:   DW   0   ; 'TAP
240C   00 00        VARTECHO:   DW   0   ; 'ECHO
240E   00 00        VARTPROMPT:   DW   0   ; 'PROMPT
2410   00 00        VARBASE:   DW   0   ; BASE
2412   00 00        VARTMP:   DW   0   ; tmp
2414   00 00        VARSPAN:   DW   0   ; SPAN
2416   00 00        VARPIN:   DW   0   ; >IN
2418   00 00        VARNTIB:   DW   0   ; #TIB
241A   00 00        VARTIB:   DW   0   ; TIB
241C   00 00        VARCSP:   DW   0   ; CSP
241E   00 00        VARTEVAL:   DW   0   ; 'EVAL
2420   00 00        VARTNUM:   DW   0   ; 'NUMBER
2422   00 00        VARHLD:   DW   0   ; HLD
2424   00 00        VARHANDLER:   DW   0   ; HANDLER
2426   00 00        VARCONTEXT:   DW   0   ; CONTEXT pointer
2428   00 00        VARVOCABS:   DW   0   ; vocabulary stack    ???
242A   00 00        VARCURRENT:   DW   0   ; CURRENT pointer
242C   00 00        VARVOCABLP:   DW   0   ; vocabulary link pointer ???
242E   00 00        VARCP:    DW   0   ; CP  for runing phase on RAM
2430   00 00        VARNP:    DW   0   ; NP  for runing phase on RAM
2432   00 00        VARLAST:   DW   0   ; LAST
2434   00 00        VARFORTH:   DW   0   ; FORTH   \ mullti-user ???
2436   00 00        VARVOCABL:   DW   0   ; vocabulary link       ???
2438   00 00        SERINPTR:   DW   0   
243A   00 00        SERRDPTR:   DW   0   
243C   00 00        SERBUFUSED:   DW   0   
243E                SERBUF:   DS   SER_BUFSIZE   
247D                CPP:         ; grows up
FFFE                          .ORG   END_RAM - 2   
FFFE                NPP:         ; grows down
FFFE                          .END      


TESTMODE:           0000 DEFINED AT LINE 3
MEM_SIZE:           10000 DEFINED AT LINE 1 IN constants.z80
                    > USED AT LINE 3 IN constants.z80
                    > USED AT LINE 12 IN constants.z80
ROM_SIZE:           2000 DEFINED AT LINE 2 IN constants.z80
                    > USED AT LINE 3 IN constants.z80
                    > USED AT LINE 6 IN constants.z80
                    > USED AT LINE 8 IN constants.z80
RAM_SIZE:           E000 DEFINED AT LINE 3 IN constants.z80
                    > USED AT LINE 9 IN constants.z80
START_ROM:          0000 DEFINED AT LINE 5 IN constants.z80
                    > USED AT LINE 8
END_ROM:            2000 DEFINED AT LINE 6 IN constants.z80
                    > USED AT LINE 4 IN word.macro.z80
                    > USED AT LINE 62
START_RAM:          2000 DEFINED AT LINE 8 IN constants.z80
                    > USED AT LINE 9 IN constants.z80
                    > USED AT LINE 63
END_RAM:            10000 DEFINED AT LINE 9 IN constants.z80
                    > USED AT LINE 44 IN variables.z80
BM:                 0000 DEFINED AT LINE 11 IN constants.z80
                    > USED AT LINE 5 IN constants.z80
                    > USED AT LINE 6 IN constants.z80
                    > USED AT LINE 8 IN constants.z80
                    > USED AT LINE 12 IN constants.z80
EM:                 10000 DEFINED AT LINE 12 IN constants.z80
COMPO:              0020 DEFINED AT LINE 14 IN constants.z80
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
IMEDD:              0040 DEFINED AT LINE 15 IN constants.z80
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 133 IN core-compiler.z80
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
MASKK:              001F DEFINED AT LINE 16 IN constants.z80
CHARR:              0001 DEFINED AT LINE 18 IN constants.z80
CELLL:              0002 DEFINED AT LINE 19 IN constants.z80
                    > USED AT LINE 39 IN constants.z80
                    > USED AT LINE 40 IN constants.z80
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 341 IN core-alu.z80
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 346 IN core-alu.z80
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 351 IN core-alu.z80
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 145 IN core-interpret.z80
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 184 IN core-memory.z80
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 196 IN core-memory.z80
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 90 IN core-stacks.z80
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 33
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 33
                    > USED AT LINE 63
                    > USED AT LINE 63
                    > USED AT LINE 63
                    > USED AT LINE 63
                    > USED AT LINE 63
                    > USED AT LINE 63
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 33
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 33
                    > USED AT LINE 63
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 33
                    > USED AT LINE 63
                    > USED AT LINE 65 IN core-user.z80
                    > USED AT LINE 63
                    > USED AT LINE 63
                    > USED AT LINE 63
                    > USED AT LINE 63
                    > USED AT LINE 63
                    > USED AT LINE 63
                    > USED AT LINE 96 IN core-user.z80
                    > USED AT LINE 63
                    > USED AT LINE 102 IN core-user.z80
                    > USED AT LINE 63
                    > USED AT LINE 63
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 33
                    > USED AT LINE 63
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
BASEE:              000A DEFINED AT LINE 20 IN constants.z80
VOCSS:              0008 DEFINED AT LINE 21 IN constants.z80
                    > USED AT LINE 96 IN core-user.z80
MAXCHAR:            00FF DEFINED AT LINE 23 IN constants.z80
MAXSIGNED:          7FFF DEFINED AT LINE 24 IN constants.z80
MAXUNSIGNED:        FFFF DEFINED AT LINE 25 IN constants.z80
MAXNEGATIVE:        8000 DEFINED AT LINE 26 IN constants.z80
BKSPP:              0008 DEFINED AT LINE 28 IN constants.z80
                    > USED AT LINE 164 IN core-io.z80
                    > USED AT LINE 166 IN core-io.z80
                    > USED AT LINE 181 IN core-io.z80
LFF:                000A DEFINED AT LINE 29 IN constants.z80
CRR:                000D DEFINED AT LINE 30 IN constants.z80
                    > USED AT LINE 102 IN core-io.z80
SPACEE:             0020 DEFINED AT LINE 31 IN constants.z80
                    > USED AT LINE 77 IN core-format.z80
                    > USED AT LINE 84 IN core-format.z80
TIC:                0027 DEFINED AT LINE 32 IN constants.z80
MINUSS:             002D DEFINED AT LINE 33 IN constants.z80
                    > USED AT LINE 44 IN core-format.z80
UNDERSC:            005F DEFINED AT LINE 34 IN constants.z80
CALLL:              CD00 DEFINED AT LINE 36 IN constants.z80
                    > USED AT LINE 119 IN core-compiler.z80
US:                 003A DEFINED AT LINE 38 IN constants.z80
                    > USED AT LINE 21
RTS:                0200 DEFINED AT LINE 39 IN constants.z80
                    > USED AT LINE 5 IN variables.z80
DTS:                0200 DEFINED AT LINE 40 IN constants.z80
                    > USED AT LINE 2 IN variables.z80
RET_STACK_SIZE:     0100 DEFINED AT LINE 42 IN constants.z80
DATA_STACK_SIZE:    0100 DEFINED AT LINE 43 IN constants.z80
INT_ADDR:           0038 DEFINED AT LINE 45 IN constants.z80
                    > USED AT LINE 1 IN interrupt.z80
SER_BUFSIZE:        003F DEFINED AT LINE 46 IN constants.z80
                    > USED AT LINE 12 IN interrupt.z80
                    > USED AT LINE 20 IN interrupt.z80
                    > USED AT LINE 25 IN serial.z80
                    > USED AT LINE 41 IN variables.z80
SER_FULLSIZE:       0030 DEFINED AT LINE 47 IN constants.z80
                    > USED AT LINE 29 IN interrupt.z80
SER_EMPTYSIZE:      0005 DEFINED AT LINE 48 IN constants.z80
                    > USED AT LINE 34 IN serial.z80
RTS_HIGH:           00D6 DEFINED AT LINE 50 IN constants.z80
                    > USED AT LINE 31 IN interrupt.z80
RTS_LOW:            0096 DEFINED AT LINE 51 IN constants.z80
                    > USED AT LINE 11 IN serial.z80
                    > USED AT LINE 36 IN serial.z80
TRUEE:              00-1 DEFINED AT LINE 53 IN constants.z80
                    > USED AT LINE 26 IN core-io.z80
FALSEE:             0000 DEFINED AT LINE 54 IN constants.z80
                    > USED AT LINE 19 IN core-io.z80
VVCODE:             11E7 DEFINED AT LINE 40
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 42
                    > USED AT LINE 43
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 42
                    > USED AT LINE 43
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 42
                    > USED AT LINE 43
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 42
                    > USED AT LINE 43
                    > USED AT LINE 42
                    > USED AT LINE 43
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 42
                    > USED AT LINE 43
VVNAME:             13C8 DEFINED AT LINE 15
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
VVLINK:             13CC DEFINED AT LINE 17
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
VVUSER:             113A DEFINED AT LINE 63
                    > USED AT LINE 32
                    > USED AT LINE 33
                    > USED AT LINE 32
                    > USED AT LINE 33
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 32
                    > USED AT LINE 33
                    > USED AT LINE 32
                    > USED AT LINE 33
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 32
                    > USED AT LINE 33
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 65 IN core-user.z80
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 96 IN core-user.z80
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 102 IN core-user.z80
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 32
                    > USED AT LINE 33
                    > USED AT LINE 62
                    > USED AT LINE 63
RESET:              0000 DEFINED AT LINE 10
                    > USED AT LINE 28
SERIALINT:          0038 DEFINED AT LINE 2 IN interrupt.z80
NOTFULL:            004D DEFINED AT LINE 17 IN interrupt.z80
                    > USED AT LINE 13 IN interrupt.z80
NOTWRAP:            0059 DEFINED AT LINE 23 IN interrupt.z80
                    > USED AT LINE 21 IN interrupt.z80
RTS0:               006D DEFINED AT LINE 33 IN interrupt.z80
                    > USED AT LINE 7 IN interrupt.z80
                    > USED AT LINE 15 IN interrupt.z80
                    > USED AT LINE 30 IN interrupt.z80
INIT:               0072 DEFINED AT LINE 15
                    > USED AT LINE 11
LOOP:               0098 DEFINED AT LINE 37
                    > USED AT LINE 40
INIT_IO:            00A1 DEFINED AT LINE 4 IN serial.z80
                    > USED AT LINE 10 IN core-io.z80
RXA:                00B5 DEFINED AT LINE 16 IN serial.z80
                    > USED AT LINE 38
                    > USED AT LINE 22 IN core-io.z80
WAITFORCHAR:        00B5 DEFINED AT LINE 17 IN serial.z80
                    > USED AT LINE 20 IN serial.z80
NOTRDWRAP:          00C9 DEFINED AT LINE 28 IN serial.z80
                    > USED AT LINE 26 IN serial.z80
RTS1:               00DC DEFINED AT LINE 38 IN serial.z80
                    > USED AT LINE 35 IN serial.z80
TXA:                00E0 DEFINED AT LINE 44 IN serial.z80
                    > USED AT LINE 39
                    > USED AT LINE 63 IN serial.z80
                    > USED AT LINE 34 IN core-io.z80
CONOUT1:            00E1 DEFINED AT LINE 46 IN serial.z80
                    > USED AT LINE 49 IN serial.z80
CKINCHAR:           00EB DEFINED AT LINE 54 IN serial.z80
                    > USED AT LINE 17 IN core-io.z80
PRINTSZ:            00F1 DEFINED AT LINE 59 IN serial.z80
                    > USED AT LINE 36
                    > USED AT LINE 65 IN serial.z80
                    > USED AT LINE 53 IN core-kernel.z80
DEFAULTS:           00FB DEFINED AT LINE 3 IN defaults.z80
                    > USED AT LINE 38 IN constants.z80
                    > USED AT LINE 19
DEFSP0:             00FB DEFINED AT LINE 5 IN defaults.z80
DEFRP0:             00FD DEFINED AT LINE 6 IN defaults.z80
DEFQKEY:            00FF DEFINED AT LINE 7 IN defaults.z80
DEFTEMIT:           0101 DEFINED AT LINE 8 IN defaults.z80
DEFTEXPECT:         0103 DEFINED AT LINE 9 IN defaults.z80
DEFTTAP:            0105 DEFINED AT LINE 10 IN defaults.z80
DEFTECHO:           0107 DEFINED AT LINE 11 IN defaults.z80
DEFTPROMPT:         0109 DEFINED AT LINE 12 IN defaults.z80
DEFBASE:            010B DEFINED AT LINE 13 IN defaults.z80
DEFTMP:             010D DEFINED AT LINE 14 IN defaults.z80
DEFSPAN:            010F DEFINED AT LINE 15 IN defaults.z80
DEFPIN:             0111 DEFINED AT LINE 16 IN defaults.z80
DEFNTIB:            0113 DEFINED AT LINE 17 IN defaults.z80
DEFTIB:             0115 DEFINED AT LINE 18 IN defaults.z80
DEFCSP:             0117 DEFINED AT LINE 19 IN defaults.z80
DEFTEVAL:           0119 DEFINED AT LINE 20 IN defaults.z80
DEFTNUM:            011B DEFINED AT LINE 21 IN defaults.z80
DEFHLD:             011D DEFINED AT LINE 22 IN defaults.z80
DEFHANDLER:         011F DEFINED AT LINE 23 IN defaults.z80
DEFCONTEXT:         0121 DEFINED AT LINE 24 IN defaults.z80
DEFVOCABS:          0123 DEFINED AT LINE 25 IN defaults.z80
DEFCURRENT:         0125 DEFINED AT LINE 26 IN defaults.z80
DEFVOCABLP:         0127 DEFINED AT LINE 27 IN defaults.z80
DEFCP:              0129 DEFINED AT LINE 28 IN defaults.z80
DEFNP:              012B DEFINED AT LINE 29 IN defaults.z80
DEFLAST:            012D DEFINED AT LINE 30 IN defaults.z80
DEFFORTH:           012F DEFINED AT LINE 31 IN defaults.z80
DEFVOCABL:          0131 DEFINED AT LINE 32 IN defaults.z80
DEFCOLD:            0133 DEFINED AT LINE 33 IN defaults.z80
END_DEFAULTS:       0135 DEFINED AT LINE 34 IN defaults.z80
                    > USED AT LINE 38 IN constants.z80
ZLESS:              0136 DEFINED AT LINE 11
                    > USED AT LINE 82 IN core-alu.z80
                    > USED AT LINE 109 IN core-alu.z80
                    > USED AT LINE 111 IN core-alu.z80
                    > USED AT LINE 122 IN core-alu.z80
                    > USED AT LINE 124 IN core-alu.z80
                    > USED AT LINE 255 IN core-alu.z80
                    > USED AT LINE 272 IN core-alu.z80
                    > USED AT LINE 43 IN core-format.z80
                    > USED AT LINE 57 IN core-interpret.z80
                    > USED AT LINE 71 IN core-interpret.z80
                    > USED AT LINE 256 IN core-interpret.z80
VVLEN:              11E2 DEFINED AT LINE 38
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 41
                    > USED AT LINE 42
                    > USED AT LINE 14
                    > USED AT LINE 41
                    > USED AT LINE 42
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 41
                    > USED AT LINE 42
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 41
                    > USED AT LINE 42
                    > USED AT LINE 41
                    > USED AT LINE 42
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 41
                    > USED AT LINE 42
ANDD:               013E DEFINED AT LINE 11
ORR:                0148 DEFINED AT LINE 11
XORR:               0152 DEFINED AT LINE 11
                    > USED AT LINE 90 IN core-alu.z80
                    > USED AT LINE 107 IN core-alu.z80
                    > USED AT LINE 121 IN core-alu.z80
                    > USED AT LINE 322 IN core-alu.z80
                    > USED AT LINE 194 IN core-io.z80
PLUS:               015C DEFINED AT LINE 11
                    > USED AT LINE 72 IN core-alu.z80
                    > USED AT LINE 77 IN core-alu.z80
                    > USED AT LINE 261 IN core-alu.z80
                    > USED AT LINE 44 IN core-compiler.z80
                    > USED AT LINE 192 IN core-io.z80
                    > USED AT LINE 198 IN core-memory.z80
                    > USED AT LINE 84 IN core-stacks.z80
INVER:              0166 DEFINED AT LINE 11
                    > USED AT LINE 60 IN core-alu.z80
                    > USED AT LINE 70 IN core-alu.z80
                    > USED AT LINE 37 IN core-utils.z80
NEGAT:              0172 DEFINED AT LINE 11
                    > USED AT LINE 77 IN core-alu.z80
                    > USED AT LINE 83 IN core-alu.z80
                    > USED AT LINE 257 IN core-alu.z80
                    > USED AT LINE 265 IN core-alu.z80
                    > USED AT LINE 34 IN core-interpret.z80
ONEPLUS:            017C DEFINED AT LINE 11
                    > USED AT LINE 60 IN core-alu.z80
DNEGA:              0188 DEFINED AT LINE 11
                    > USED AT LINE 324 IN core-alu.z80
SUBB:               019E DEFINED AT LINE 11
                    > USED AT LINE 111 IN core-alu.z80
                    > USED AT LINE 124 IN core-alu.z80
                    > USED AT LINE 150 IN core-alu.z80
                    > USED AT LINE 151 IN core-alu.z80
                    > USED AT LINE 65 IN core-does.z80
                    > USED AT LINE 57 IN core-interpret.z80
                    > USED AT LINE 82 IN core-interpret.z80
                    > USED AT LINE 135 IN core-interpret.z80
                    > USED AT LINE 185 IN core-memory.z80
ABSS:               01A8 DEFINED AT LINE 11
ABS1:               01B6 DEFINED AT LINE 84 IN core-alu.z80
EQUAL:              01B8 DEFINED AT LINE 11
ZEROEQUALS:         01C2 DEFINED AT LINE 11
                    > USED AT LINE 90 IN core-alu.z80
ULESS:              01CC DEFINED AT LINE 11
ULES1:              01E0 DEFINED AT LINE 110 IN core-alu.z80
                    > USED AT LINE 108 IN core-alu.z80
NIP:                01E6 DEFINED AT LINE 11
                    > USED AT LINE 109 IN core-alu.z80
                    > USED AT LINE 170 IN core-alu.z80
                    > USED AT LINE 282 IN core-alu.z80
                    > USED AT LINE 336 IN core-alu.z80
LESS:               01F0 DEFINED AT LINE 11
                    > USED AT LINE 129 IN core-alu.z80
                    > USED AT LINE 134 IN core-alu.z80
LESS1:              0204 DEFINED AT LINE 123 IN core-alu.z80
GREATERTHAN:        020A DEFINED AT LINE 11
                    > USED AT LINE 142 IN core-alu.z80
MAX:                0214 DEFINED AT LINE 11
MAX1:               0222 DEFINED AT LINE 136 IN core-alu.z80
MIN:                0226 DEFINED AT LINE 11
MIN1:               0234 DEFINED AT LINE 144 IN core-alu.z80
WITHI:              0238 DEFINED AT LINE 11
UMPLUS:             024A DEFINED AT LINE 11
                    > USED AT LINE 50 IN core-alu.z80
UMP2:               0252 DEFINED AT LINE 161 IN core-alu.z80
UMP1:               0253 DEFINED AT LINE 163 IN core-alu.z80
                    > USED AT LINE 160 IN core-alu.z80
UMMOD:              0256 DEFINED AT LINE 11
                    > USED AT LINE 263 IN core-alu.z80
                    > USED AT LINE 194 IN core-memory.z80
UMSLMOD2:           0260 DEFINED AT LINE 11
                    > USED AT LINE 170 IN core-alu.z80
UMMOD11:            0264 DEFINED AT LINE 180 IN core-alu.z80
UMMOD12:            026F DEFINED AT LINE 191 IN core-alu.z80
UMMOD2:             0289 DEFINED AT LINE 211 IN core-alu.z80
                    > USED AT LINE 179 IN core-alu.z80
UMMOD1:             028F DEFINED AT LINE 214 IN core-alu.z80
                    > USED AT LINE 190 IN core-alu.z80
UMMOD4:             0295 DEFINED AT LINE 217 IN core-alu.z80
                    > USED AT LINE 235 IN core-alu.z80
UMMOD13:            029D DEFINED AT LINE 225 IN core-alu.z80
UMMOD3:             02A3 DEFINED AT LINE 232 IN core-alu.z80
                    > USED AT LINE 197 IN core-alu.z80
                    > USED AT LINE 201 IN core-alu.z80
                    > USED AT LINE 246 IN core-alu.z80
UMMOD14:            02A7 DEFINED AT LINE 236 IN core-alu.z80
UMMOD5:             02AD DEFINED AT LINE 243 IN core-alu.z80
                    > USED AT LINE 224 IN core-alu.z80
UMMOD15:            02B1 DEFINED AT LINE 247 IN core-alu.z80
MSMOD:              02B2 DEFINED AT LINE 11
MMOD1:              02CA DEFINED AT LINE 258 IN core-alu.z80
                    > USED AT LINE 256 IN core-alu.z80
MMOD2:              02D8 DEFINED AT LINE 262 IN core-alu.z80
                    > USED AT LINE 260 IN core-alu.z80
MMOD3:              02E8 DEFINED AT LINE 266 IN core-alu.z80
                    > USED AT LINE 264 IN core-alu.z80
SLMOD:              02EA DEFINED AT LINE 11
                    > USED AT LINE 277 IN core-alu.z80
                    > USED AT LINE 282 IN core-alu.z80
MODD:               02F8 DEFINED AT LINE 11
SLASH:              0302 DEFINED AT LINE 11
UMSTA:              030C DEFINED AT LINE 11
                    > USED AT LINE 317 IN core-alu.z80
                    > USED AT LINE 323 IN core-alu.z80
UMSTA1:             0314 DEFINED AT LINE 294 IN core-alu.z80
                    > USED AT LINE 307 IN core-alu.z80
UMSTA2:             031B DEFINED AT LINE 300 IN core-alu.z80
UMSTA5:             031E DEFINED AT LINE 303 IN core-alu.z80
UMSTA3:             031F DEFINED AT LINE 305 IN core-alu.z80
                    > USED AT LINE 299 IN core-alu.z80
                    > USED AT LINE 302 IN core-alu.z80
UMSTA4:             0322 DEFINED AT LINE 308 IN core-alu.z80
STAR:               0328 DEFINED AT LINE 11
MSTAR:              0332 DEFINED AT LINE 11
                    > USED AT LINE 331 IN core-alu.z80
MSTAR1:             034E DEFINED AT LINE 325 IN core-alu.z80
SSMOD:              0350 DEFINED AT LINE 11
                    > USED AT LINE 336 IN core-alu.z80
STASL:              035E DEFINED AT LINE 11
CELLP:              0368 DEFINED AT LINE 11
                    > USED AT LINE 32 IN core-compiler.z80
                    > USED AT LINE 151 IN core-interpret.z80
                    > USED AT LINE 153 IN core-interpret.z80
                    > USED AT LINE 171 IN core-interpret.z80
                    > USED AT LINE 97 IN core-memory.z80
                    > USED AT LINE 102 IN core-memory.z80
                    > USED AT LINE 125 IN core-memory.z80
CELLM:              0374 DEFINED AT LINE 11
                    > USED AT LINE 72 IN core-compiler.z80
                    > USED AT LINE 74 IN core-compiler.z80
                    > USED AT LINE 126 IN core-interpret.z80
                    > USED AT LINE 126 IN core-interpret.z80
                    > USED AT LINE 156 IN core-interpret.z80
                    > USED AT LINE 158 IN core-interpret.z80
                    > USED AT LINE 158 IN core-interpret.z80
                    > USED AT LINE 161 IN core-interpret.z80
                    > USED AT LINE 169 IN core-interpret.z80
CELLS:              0380 DEFINED AT LINE 11
TICK:               038C DEFINED AT LINE 11
                    > USED AT LINE 25 IN core-compiler.z80
TICK1:              039A DEFINED AT LINE 7 IN core-compiler.z80
                    > USED AT LINE 5 IN core-compiler.z80
ALLOT:              039C DEFINED AT LINE 11
COMMA:              03A6 DEFINED AT LINE 11
                    > USED AT LINE 25 IN core-compiler.z80
                    > USED AT LINE 90 IN core-compiler.z80
                    > USED AT LINE 120 IN core-compiler.z80
BCOMP:              03B8 DEFINED AT LINE 11
COMPI:              03C2 DEFINED AT LINE 11
                    > USED AT LINE 38 IN core-compiler.z80
                    > USED AT LINE 107 IN core-compiler.z80
                    > USED AT LINE 142 IN core-compiler.z80
                    > USED AT LINE 150 IN core-compiler.z80
                    > USED AT LINE 4 IN core-control.z80
                    > USED AT LINE 14 IN core-control.z80
                    > USED AT LINE 19 IN core-control.z80
                    > USED AT LINE 24 IN core-control.z80
                    > USED AT LINE 30 IN core-control.z80
                    > USED AT LINE 37 IN core-control.z80
LITER:              03D4 DEFINED AT LINE 11
                    > USED AT LINE 94 IN core-compiler.z80
STRCQ:              03E0 DEFINED AT LINE 49
RECUR:              03F6 DEFINED AT LINE 11
UNIQU:              0404 DEFINED AT LINE 11
                    > USED AT LINE 69 IN core-compiler.z80
UNIQ1:              0420 DEFINED AT LINE 60 IN core-compiler.z80
                    > USED AT LINE 57 IN core-compiler.z80
SNAME:              0424 DEFINED AT LINE 11
                    > USED AT LINE 126 IN core-compiler.z80
                    > USED AT LINE 140 IN core-compiler.z80
                    > USED AT LINE 148 IN core-compiler.z80
PNAM1:              0456 DEFINED AT LINE 76 IN core-compiler.z80
                    > USED AT LINE 68 IN core-compiler.z80
SCOMP:              0460 DEFINED AT LINE 49
                    > USED AT LINE 113 IN core-compiler.z80
SCOM1:              047C DEFINED AT LINE 89 IN core-compiler.z80
                    > USED AT LINE 87 IN core-compiler.z80
SCOM2:              0480 DEFINED AT LINE 91 IN core-compiler.z80
                    > USED AT LINE 85 IN core-compiler.z80
SCOM3:              048C DEFINED AT LINE 95 IN core-compiler.z80
                    > USED AT LINE 93 IN core-compiler.z80
OVERT:              048E DEFINED AT LINE 49
SEMIS:              049E DEFINED AT LINE 11
RBRAC:              04AC DEFINED AT LINE 11
                    > USED AT LINE 127 IN core-compiler.z80
CALLC:              04BA DEFINED AT LINE 49
                    > USED AT LINE 127 IN core-compiler.z80
COLON:              04C8 DEFINED AT LINE 11
IMMED:              04DA DEFINED AT LINE 11
USER:               04F2 DEFINED AT LINE 11
CREAT:              050A DEFINED AT LINE 11
                    > USED AT LINE 156 IN core-compiler.z80
VARIA:              0520 DEFINED AT LINE 11
FOR:                052E DEFINED AT LINE 11
BEGIN:              053A DEFINED AT LINE 11
NEXT:               0542 DEFINED AT LINE 11
UNTIL:              054E DEFINED AT LINE 11
AGAIN:              055A DEFINED AT LINE 11
                    > USED AT LINE 43 IN core-control.z80
IFF:                0566 DEFINED AT LINE 11
                    > USED AT LINE 64 IN core-control.z80
AHEAD:              0578 DEFINED AT LINE 11
                    > USED AT LINE 54 IN core-control.z80
                    > USED AT LINE 59 IN core-control.z80
REPEA:              058A DEFINED AT LINE 11
THENN:              0598 DEFINED AT LINE 11
AFT:                05A4 DEFINED AT LINE 11
ELSEE:              05B2 DEFINED AT LINE 11
WHILE:              05BE DEFINED AT LINE 11
UNLOOP:             05C8 DEFINED AT LINE 11
DOCONST:            05D8 DEFINED AT LINE 49
DOLIST:             05E0 DEFINED AT LINE 49
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 141 IN core-compiler.z80
                    > USED AT LINE 25
                    > USED AT LINE 149 IN core-compiler.z80
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 31
                    > USED AT LINE 31
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 31
                    > USED AT LINE 31
                    > USED AT LINE 61
                    > USED AT LINE 31
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 31
                    > USED AT LINE 61
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
DOLIT:              05EE DEFINED AT LINE 49
                    > USED AT LINE 55 IN core-alu.z80
                    > USED AT LINE 65 IN core-alu.z80
                    > USED AT LINE 71 IN core-alu.z80
                    > USED AT LINE 341 IN core-alu.z80
                    > USED AT LINE 346 IN core-alu.z80
                    > USED AT LINE 351 IN core-alu.z80
                    > USED AT LINE 38 IN core-compiler.z80
                    > USED AT LINE 43 IN core-compiler.z80
                    > USED AT LINE 86 IN core-compiler.z80
                    > USED AT LINE 113 IN core-compiler.z80
                    > USED AT LINE 119 IN core-compiler.z80
                    > USED AT LINE 133 IN core-compiler.z80
                    > USED AT LINE 141 IN core-compiler.z80
                    > USED AT LINE 149 IN core-compiler.z80
                    > USED AT LINE 156 IN core-compiler.z80
                    > USED AT LINE 31 IN core-control.z80
                    > USED AT LINE 64 IN core-does.z80
                    > USED AT LINE 4 IN core-format.z80
                    > USED AT LINE 5 IN core-format.z80
                    > USED AT LINE 6 IN core-format.z80
                    > USED AT LINE 11 IN core-format.z80
                    > USED AT LINE 44 IN core-format.z80
                    > USED AT LINE 67 IN core-format.z80
                    > USED AT LINE 72 IN core-format.z80
                    > USED AT LINE 77 IN core-format.z80
                    > USED AT LINE 82 IN core-format.z80
                    > USED AT LINE 83 IN core-format.z80
                    > USED AT LINE 84 IN core-format.z80
                    > USED AT LINE 86 IN core-format.z80
                    > USED AT LINE 5 IN core-interpret.z80
                    > USED AT LINE 6 IN core-interpret.z80
                    > USED AT LINE 8 IN core-interpret.z80
                    > USED AT LINE 9 IN core-interpret.z80
                    > USED AT LINE 20 IN core-interpret.z80
                    > USED AT LINE 25 IN core-interpret.z80
                    > USED AT LINE 30 IN core-interpret.z80
                    > USED AT LINE 52 IN core-interpret.z80
                    > USED AT LINE 59 IN core-interpret.z80
                    > USED AT LINE 74 IN core-interpret.z80
                    > USED AT LINE 80 IN core-interpret.z80
                    > USED AT LINE 99 IN core-interpret.z80
                    > USED AT LINE 139 IN core-interpret.z80
                    > USED AT LINE 145 IN core-interpret.z80
                    > USED AT LINE 151 IN core-interpret.z80
                    > USED AT LINE 178 IN core-interpret.z80
                    > USED AT LINE 227 IN core-interpret.z80
                    > USED AT LINE 241 IN core-interpret.z80
                    > USED AT LINE 247 IN core-interpret.z80
                    > USED AT LINE 69 IN core-io.z80
                    > USED AT LINE 79 IN core-io.z80
                    > USED AT LINE 94 IN core-io.z80
                    > USED AT LINE 102 IN core-io.z80
                    > USED AT LINE 152 IN core-io.z80
                    > USED AT LINE 164 IN core-io.z80
                    > USED AT LINE 166 IN core-io.z80
                    > USED AT LINE 179 IN core-io.z80
                    > USED AT LINE 181 IN core-io.z80
                    > USED AT LINE 197 IN core-io.z80
                    > USED AT LINE 216 IN core-io.z80
                    > USED AT LINE 217 IN core-io.z80
                    > USED AT LINE 12 IN core-kernel.z80
                    > USED AT LINE 108 IN core-memory.z80
                    > USED AT LINE 119 IN core-memory.z80
                    > USED AT LINE 146 IN core-memory.z80
                    > USED AT LINE 147 IN core-memory.z80
                    > USED AT LINE 173 IN core-memory.z80
                    > USED AT LINE 176 IN core-memory.z80
                    > USED AT LINE 184 IN core-memory.z80
                    > USED AT LINE 186 IN core-memory.z80
                    > USED AT LINE 193 IN core-memory.z80
                    > USED AT LINE 196 IN core-memory.z80
                    > USED AT LINE 83 IN core-stacks.z80
                    > USED AT LINE 90 IN core-stacks.z80
                    > USED AT LINE 8 IN core-utils.z80
                    > USED AT LINE 16 IN core-utils.z80
                    > USED AT LINE 21 IN core-utils.z80
                    > USED AT LINE 31 IN core-utils.z80
                    > USED AT LINE 34 IN core-utils.z80
DOVAR:              05F6 DEFINED AT LINE 49
                    > USED AT LINE 150 IN core-compiler.z80
                    > USED AT LINE 41 IN core-does.z80
                    > USED AT LINE 201 IN core-interpret.z80
UP:                 05FE DEFINED AT LINE 49
DOUSE:              0606 DEFINED AT LINE 49
                    > USED AT LINE 142 IN core-compiler.z80
                    > USED AT LINE 32
                    > USED AT LINE 32
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 32
                    > USED AT LINE 32
                    > USED AT LINE 62
                    > USED AT LINE 32
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 32
                    > USED AT LINE 62
EXIT:               0616 DEFINED AT LINE 11
                    > USED AT LINE 85 IN core-alu.z80
                    > USED AT LINE 137 IN core-alu.z80
                    > USED AT LINE 145 IN core-alu.z80
                    > USED AT LINE 267 IN core-alu.z80
                    > USED AT LINE 326 IN core-alu.z80
                    > USED AT LINE 6 IN core-compiler.z80
                    > USED AT LINE 61 IN core-compiler.z80
                    > USED AT LINE 75 IN core-compiler.z80
                    > USED AT LINE 88 IN core-compiler.z80
                    > USED AT LINE 90 IN core-compiler.z80
                    > USED AT LINE 94 IN core-compiler.z80
                    > USED AT LINE 107 IN core-compiler.z80
                    > USED AT LINE 120 IN core-compiler.z80
                    > USED AT LINE 9 IN core-control.z80
                    > USED AT LINE 36 IN core-does.z80
                    > USED AT LINE 38 IN core-format.z80
                    > USED AT LINE 46 IN core-format.z80
                    > USED AT LINE 88 IN core-format.z80
                    > USED AT LINE 116 IN core-interpret.z80
                    > USED AT LINE 229 IN core-interpret.z80
                    > USED AT LINE 233 IN core-interpret.z80
                    > USED AT LINE 250 IN core-interpret.z80
                    > USED AT LINE 258 IN core-interpret.z80
                    > USED AT LINE 49 IN core-io.z80
                    > USED AT LINE 64 IN core-io.z80
                    > USED AT LINE 85 IN core-io.z80
                    > USED AT LINE 97 IN core-io.z80
                    > USED AT LINE 114 IN core-io.z80
                    > USED AT LINE 145 IN core-io.z80
                    > USED AT LINE 168 IN core-io.z80
                    > USED AT LINE 185 IN core-io.z80
                    > USED AT LINE 60 IN core-kernel.z80
                    > USED AT LINE 135 IN core-memory.z80
                    > USED AT LINE 150 IN core-memory.z80
                    > USED AT LINE 162 IN core-memory.z80
                    > USED AT LINE 198 IN core-memory.z80
                    > USED AT LINE 58 IN core-stacks.z80
                    > USED AT LINE 11 IN core-utils.z80
                    > USED AT LINE 24 IN core-utils.z80
                    > USED AT LINE 45 IN core-utils.z80
                    > USED AT LINE 58 IN core-utils.z80
DODO:               0622 DEFINED AT LINE 49
DOLOOP:             0644 DEFINED AT LINE 49
DOLOOP1:            064A DEFINED AT LINE 75 IN core-does.z80
                    > USED AT LINE 85 IN core-does.z80
DOLOOP2:            0651 DEFINED AT LINE 82 IN core-does.z80
                    > USED AT LINE 74 IN core-does.z80
DOPLOOP:            0660 DEFINED AT LINE 49
DOPLP1:             0680 DEFINED AT LINE 117 IN core-does.z80
                    > USED AT LINE 107 IN core-does.z80
DONXT:              068C DEFINED AT LINE 11
                    > USED AT LINE 14 IN core-control.z80
                    > USED AT LINE 31 IN core-interpret.z80
                    > USED AT LINE 60 IN core-interpret.z80
                    > USED AT LINE 75 IN core-interpret.z80
                    > USED AT LINE 138 IN core-interpret.z80
                    > USED AT LINE 84 IN core-io.z80
                    > USED AT LINE 96 IN core-io.z80
                    > USED AT LINE 149 IN core-memory.z80
                    > USED AT LINE 161 IN core-memory.z80
                    > USED AT LINE 175 IN core-memory.z80
                    > USED AT LINE 10 IN core-utils.z80
                    > USED AT LINE 23 IN core-utils.z80
                    > USED AT LINE 39 IN core-utils.z80
                    > USED AT LINE 56 IN core-utils.z80
DECHILO:            06A1 DEFINED AT LINE 146 IN core-does.z80
                    > USED AT LINE 139 IN core-does.z80
DECLOW:             06A3 DEFINED AT LINE 149 IN core-does.z80
                    > USED AT LINE 135 IN core-does.z80
DIGIT:              06AC DEFINED AT LINE 49
                    > USED AT LINE 12 IN core-format.z80
EXTRC:              06C6 DEFINED AT LINE 49
BDIGS:              06D8 DEFINED AT LINE 11
                    > USED AT LINE 60 IN core-format.z80
                    > USED AT LINE 130 IN core-io.z80
                    > USED AT LINE 137 IN core-io.z80
HOLD:               06E4 DEFINED AT LINE 11
DIG:                06FC DEFINED AT LINE 11
                    > USED AT LINE 34 IN core-format.z80
DIGS:               070A DEFINED AT LINE 11
                    > USED AT LINE 60 IN core-format.z80
                    > USED AT LINE 137 IN core-io.z80
DIGS1:              070E DEFINED AT LINE 33 IN core-format.z80
                    > USED AT LINE 36 IN core-format.z80
DIGS2:              071A DEFINED AT LINE 37 IN core-format.z80
                    > USED AT LINE 35 IN core-format.z80
SIGN:               071C DEFINED AT LINE 11
                    > USED AT LINE 61 IN core-format.z80
SIGN1:              072C DEFINED AT LINE 45 IN core-format.z80
EDIGS:              072E DEFINED AT LINE 11
                    > USED AT LINE 61 IN core-format.z80
STR:                0740 DEFINED AT LINE 49
                    > USED AT LINE 124 IN core-io.z80
                    > USED AT LINE 147 IN core-io.z80
HEX:                0756 DEFINED AT LINE 11
                    > USED AT LINE 19 IN core-interpret.z80
DECIMAL:            0764 DEFINED AT LINE 11
BLANK:              0772 DEFINED AT LINE 11
                    > USED AT LINE 56 IN core-interpret.z80
                    > USED AT LINE 109 IN core-interpret.z80
                    > USED AT LINE 114 IN core-interpret.z80
                    > USED AT LINE 74 IN core-io.z80
                    > USED AT LINE 165 IN core-io.z80
                    > USED AT LINE 183 IN core-io.z80
                    > USED AT LINE 197 IN core-io.z80
                    > USED AT LINE 171 IN core-memory.z80
TCHAR:              077C DEFINED AT LINE 49
TCHA1:              079C DEFINED AT LINE 87 IN core-format.z80
                    > USED AT LINE 85 IN core-format.z80
DIGTQ:              079E DEFINED AT LINE 49
DGTQ1:              07C4 DEFINED AT LINE 10 IN core-interpret.z80
                    > USED AT LINE 7 IN core-interpret.z80
NUMBQ:              07CC DEFINED AT LINE 49
NUMQ1:              07FC DEFINED AT LINE 21 IN core-interpret.z80
                    > USED AT LINE 18 IN core-interpret.z80
NUMQ2:              0820 DEFINED AT LINE 26 IN core-interpret.z80
                    > USED AT LINE 31 IN core-interpret.z80
NUMQ3:              0852 DEFINED AT LINE 35 IN core-interpret.z80
                    > USED AT LINE 33 IN core-interpret.z80
NUMQ4:              0858 DEFINED AT LINE 38 IN core-interpret.z80
                    > USED AT LINE 28 IN core-interpret.z80
NUMQ5:              0864 DEFINED AT LINE 40 IN core-interpret.z80
                    > USED AT LINE 37 IN core-interpret.z80
NUMQ6:              0866 DEFINED AT LINE 42 IN core-interpret.z80
                    > USED AT LINE 24 IN core-interpret.z80
PARS:               0872 DEFINED AT LINE 49
                    > USED AT LINE 93 IN core-interpret.z80
PARS1:              0898 DEFINED AT LINE 55 IN core-interpret.z80
                    > USED AT LINE 60 IN core-interpret.z80
PARS2:              08BE DEFINED AT LINE 62 IN core-interpret.z80
                    > USED AT LINE 58 IN core-interpret.z80
PARS3:              08C0 DEFINED AT LINE 64 IN core-interpret.z80
                    > USED AT LINE 53 IN core-interpret.z80
PARS4:              08C6 DEFINED AT LINE 67 IN core-interpret.z80
                    > USED AT LINE 75 IN core-interpret.z80
PARS5:              08DE DEFINED AT LINE 72 IN core-interpret.z80
                    > USED AT LINE 70 IN core-interpret.z80
PARS6:              08F4 DEFINED AT LINE 78 IN core-interpret.z80
                    > USED AT LINE 73 IN core-interpret.z80
PARS7:              0902 DEFINED AT LINE 81 IN core-interpret.z80
                    > USED AT LINE 77 IN core-interpret.z80
PARS8:              090E DEFINED AT LINE 84 IN core-interpret.z80
                    > USED AT LINE 51 IN core-interpret.z80
PARSE:              0916 DEFINED AT LINE 11
                    > USED AT LINE 109 IN core-interpret.z80
                    > USED AT LINE 114 IN core-interpret.z80
                    > USED AT LINE 121 IN core-interpret.z80
PAREN:              0938 DEFINED AT LINE 11
BKSLA:              0944 DEFINED AT LINE 11
CHAR:               0952 DEFINED AT LINE 11
TOKEN:              0960 DEFINED AT LINE 49
                    > USED AT LINE 4 IN core-compiler.z80
                    > USED AT LINE 126 IN core-compiler.z80
                    > USED AT LINE 140 IN core-compiler.z80
                    > USED AT LINE 148 IN core-compiler.z80
                    > USED AT LINE 265 IN core-interpret.z80
WORDD:              097C DEFINED AT LINE 11
NAMET:              0988 DEFINED AT LINE 49
                    > USED AT LINE 162 IN core-interpret.z80
SAMEQ:              0994 DEFINED AT LINE 49
SAME1:              099E DEFINED AT LINE 133 IN core-interpret.z80
                    > USED AT LINE 138 IN core-interpret.z80
SAME2:              09C0 DEFINED AT LINE 138 IN core-interpret.z80
                    > USED AT LINE 132 IN core-interpret.z80
                    > USED AT LINE 136 IN core-interpret.z80
FIND:               09CA DEFINED AT LINE 11
                    > USED AT LINE 174 IN core-interpret.z80
FIND1:              09E8 DEFINED AT LINE 147 IN core-interpret.z80
                    > USED AT LINE 159 IN core-interpret.z80
FIND2:              0A0C DEFINED AT LINE 153 IN core-interpret.z80
                    > USED AT LINE 150 IN core-interpret.z80
FIND3:              0A14 DEFINED AT LINE 154 IN core-interpret.z80
                    > USED AT LINE 152 IN core-interpret.z80
FIND6:              0A18 DEFINED AT LINE 155 IN core-interpret.z80
                    > USED AT LINE 148 IN core-interpret.z80
FIND4:              0A24 DEFINED AT LINE 157 IN core-interpret.z80
                    > USED AT LINE 154 IN core-interpret.z80
FIND5:              0A30 DEFINED AT LINE 160 IN core-interpret.z80
                    > USED AT LINE 157 IN core-interpret.z80
NAMEQ:              0A42 DEFINED AT LINE 49
                    > USED AT LINE 4 IN core-compiler.z80
                    > USED AT LINE 56 IN core-compiler.z80
                    > USED AT LINE 84 IN core-compiler.z80
                    > USED AT LINE 225 IN core-interpret.z80
NAMQ1:              0A54 DEFINED AT LINE 170 IN core-interpret.z80
                    > USED AT LINE 168 IN core-interpret.z80
NAMQ2:              0A56 DEFINED AT LINE 171 IN core-interpret.z80
                    > USED AT LINE 175 IN core-interpret.z80
NAMQ3:              0A74 DEFINED AT LINE 177 IN core-interpret.z80
                    > USED AT LINE 173 IN core-interpret.z80
CATCH:              0A7E DEFINED AT LINE 11
THROW:              0AA4 DEFINED AT LINE 11
                    > USED AT LINE 8 IN core-compiler.z80
                    > USED AT LINE 78 IN core-compiler.z80
                    > USED AT LINE 95 IN core-compiler.z80
                    > USED AT LINE 210 IN core-interpret.z80
                    > USED AT LINE 217 IN core-interpret.z80
                    > USED AT LINE 235 IN core-interpret.z80
NULLS:              0AC2 DEFINED AT LINE 49
                    > USED AT LINE 210 IN core-interpret.z80
ABORT:              0AD0 DEFINED AT LINE 11
ABORQ:              0AD8 DEFINED AT LINE 11
                    > USED AT LINE 37
                    > USED AT LINE 37
ABOR1:              0AE4 DEFINED AT LINE 218 IN core-interpret.z80
                    > USED AT LINE 216 IN core-interpret.z80
INTER:              0AEA DEFINED AT LINE 49
                    > USED AT LINE 241 IN core-interpret.z80
                    > USED AT LINE 247 IN core-interpret.z80
INTE1:              0B12 DEFINED AT LINE 230 IN core-interpret.z80
                    > USED AT LINE 226 IN core-interpret.z80
INTE2:              0B1C DEFINED AT LINE 234 IN core-interpret.z80
                    > USED AT LINE 232 IN core-interpret.z80
LBRAC:              0B1E DEFINED AT LINE 11
DOTOK:              0B2C DEFINED AT LINE 11
DOTO1:              0B44 DEFINED AT LINE 250 IN core-interpret.z80
                    > USED AT LINE 248 IN core-interpret.z80
QSTAC:              0B48 DEFINED AT LINE 49
EVAL:               0B60 DEFINED AT LINE 11
EVAL1:              0B64 DEFINED AT LINE 264 IN core-interpret.z80
                    > USED AT LINE 268 IN core-interpret.z80
EVAL2:              0B78 DEFINED AT LINE 269 IN core-interpret.z80
                    > USED AT LINE 266 IN core-interpret.z80
STOIO:              0B80 DEFINED AT LINE 11
                    > USED AT LINE 10 IN core-kernel.z80
QRX:                0B86 DEFINED AT LINE 11
                    > USED AT LINE 7 IN defaults.z80
QRX1:               0B91 DEFINED AT LINE 21 IN core-io.z80
                    > USED AT LINE 18 IN core-io.z80
QRX2:               0B9B DEFINED AT LINE 27 IN core-io.z80
                    > USED AT LINE 20 IN core-io.z80
TXSTO:              0B9E DEFINED AT LINE 11
                    > USED AT LINE 8 IN defaults.z80
                    > USED AT LINE 11 IN defaults.z80
QKEY:               0BA6 DEFINED AT LINE 11
                    > USED AT LINE 47 IN core-io.z80
                    > USED AT LINE 60 IN core-io.z80
KEY:                0BB2 DEFINED AT LINE 11
                    > USED AT LINE 62 IN core-io.z80
                    > USED AT LINE 196 IN core-io.z80
KEY1:               0BB6 DEFINED AT LINE 46 IN core-io.z80
                    > USED AT LINE 48 IN core-io.z80
EMIT:               0BBE DEFINED AT LINE 11
                    > USED AT LINE 74 IN core-io.z80
NUFQ:               0BCA DEFINED AT LINE 11
                    > USED AT LINE 37 IN core-utils.z80
NUFQ1:              0BE0 DEFINED AT LINE 63 IN core-io.z80
                    > USED AT LINE 61 IN core-io.z80
PACE:               0BE2 DEFINED AT LINE 49
SPACE:              0BEE DEFINED AT LINE 11
                    > USED AT LINE 82 IN core-io.z80
                    > USED AT LINE 138 IN core-io.z80
                    > USED AT LINE 147 IN core-io.z80
                    > USED AT LINE 17 IN core-utils.z80
                    > USED AT LINE 36 IN core-utils.z80
                    > USED AT LINE 36 IN core-utils.z80
SPACS:              0BF8 DEFINED AT LINE 11
                    > USED AT LINE 125 IN core-io.z80
                    > USED AT LINE 132 IN core-io.z80
CHAR1:              0C08 DEFINED AT LINE 81 IN core-io.z80
                    > USED AT LINE 84 IN core-io.z80
CHAR2:              0C0A DEFINED AT LINE 83 IN core-io.z80
                    > USED AT LINE 80 IN core-io.z80
TYPEE:              0C10 DEFINED AT LINE 11
                    > USED AT LINE 125 IN core-io.z80
                    > USED AT LINE 132 IN core-io.z80
                    > USED AT LINE 138 IN core-io.z80
TYPE1:              0C1A DEFINED AT LINE 92 IN core-io.z80
                    > USED AT LINE 96 IN core-io.z80
TYPE2:              0C26 DEFINED AT LINE 95 IN core-io.z80
                    > USED AT LINE 91 IN core-io.z80
CR:                 0C2E DEFINED AT LINE 11
                    > USED AT LINE 250 IN core-interpret.z80
                    > USED AT LINE 34 IN core-utils.z80
                    > USED AT LINE 50 IN core-utils.z80
DOSTR:              0C40 DEFINED AT LINE 11
                    > USED AT LINE 217 IN core-interpret.z80
                    > USED AT LINE 219 IN core-interpret.z80
                    > USED AT LINE 114 IN core-io.z80
                    > USED AT LINE 119 IN core-io.z80
STRQP:              0C58 DEFINED AT LINE 49
                    > USED AT LINE 37
DOTQP:              0C60 DEFINED AT LINE 49
                    > USED AT LINE 37
                    > USED AT LINE 37
                    > USED AT LINE 37
DOTR:               0C6C DEFINED AT LINE 11
UDOTR:              0C80 DEFINED AT LINE 11
UDOT:               0C98 DEFINED AT LINE 11
                    > USED AT LINE 145 IN core-io.z80
DOT:                0CA8 DEFINED AT LINE 11
                    > USED AT LINE 157 IN core-io.z80
DOT1:               0CBE DEFINED AT LINE 146 IN core-io.z80
                    > USED AT LINE 144 IN core-io.z80
DOTPR:              0CC6 DEFINED AT LINE 11
QUEST:              0CD2 DEFINED AT LINE 11
BKSP:               0CDC DEFINED AT LINE 11
                    > USED AT LINE 185 IN core-io.z80
BACK1:              0D0C DEFINED AT LINE 167 IN core-io.z80
                    > USED AT LINE 163 IN core-io.z80
TAP:                0D0E DEFINED AT LINE 11
                    > USED AT LINE 183 IN core-io.z80
                    > USED AT LINE 199 IN core-io.z80
KTAP:               0D24 DEFINED AT LINE 11
KTAP1:              0D44 DEFINED AT LINE 184 IN core-io.z80
                    > USED AT LINE 182 IN core-io.z80
KTAP2:              0D48 DEFINED AT LINE 186 IN core-io.z80
                    > USED AT LINE 180 IN core-io.z80
ACCEP:              0D52 DEFINED AT LINE 11
ACCP1:              0D5C DEFINED AT LINE 193 IN core-io.z80
                    > USED AT LINE 204 IN core-io.z80
ACCP2:              0D7A DEFINED AT LINE 201 IN core-io.z80
                    > USED AT LINE 198 IN core-io.z80
ACCP3:              0D7E DEFINED AT LINE 203 IN core-io.z80
                    > USED AT LINE 200 IN core-io.z80
ACCP4:              0D82 DEFINED AT LINE 205 IN core-io.z80
                    > USED AT LINE 195 IN core-io.z80
EXPEC:              0D8A DEFINED AT LINE 49
QUERY:              0D9A DEFINED AT LINE 49
NEXT_STEP:          0DB8 DEFINED AT LINE 1 IN core-kernel.z80
                    > USED AT LINE 25
COLD:               0DBE DEFINED AT LINE 11
                    > USED AT LINE 29
HELLO:              0DCE DEFINED AT LINE 14 IN core-kernel.z80
                    > USED AT LINE 12 IN core-kernel.z80
QUIT:               0DDE DEFINED AT LINE 11
                    > USED AT LINE 13 IN core-kernel.z80
EXECU:              0DE0 DEFINED AT LINE 11
                    > USED AT LINE 88 IN core-compiler.z80
                    > USED AT LINE 229 IN core-interpret.z80
                    > USED AT LINE 133 IN core-memory.z80
QBRAN:              0DE4 DEFINED AT LINE 49
                    > USED AT LINE 108 IN core-alu.z80
                    > USED AT LINE 256 IN core-alu.z80
                    > USED AT LINE 260 IN core-alu.z80
                    > USED AT LINE 264 IN core-alu.z80
                    > USED AT LINE 5 IN core-compiler.z80
                    > USED AT LINE 57 IN core-compiler.z80
                    > USED AT LINE 68 IN core-compiler.z80
                    > USED AT LINE 85 IN core-compiler.z80
                    > USED AT LINE 87 IN core-compiler.z80
                    > USED AT LINE 93 IN core-compiler.z80
                    > USED AT LINE 19 IN core-control.z80
                    > USED AT LINE 30 IN core-control.z80
                    > USED AT LINE 35 IN core-format.z80
                    > USED AT LINE 43 IN core-format.z80
                    > USED AT LINE 85 IN core-format.z80
                    > USED AT LINE 7 IN core-interpret.z80
                    > USED AT LINE 18 IN core-interpret.z80
                    > USED AT LINE 24 IN core-interpret.z80
                    > USED AT LINE 28 IN core-interpret.z80
                    > USED AT LINE 33 IN core-interpret.z80
                    > USED AT LINE 51 IN core-interpret.z80
                    > USED AT LINE 53 IN core-interpret.z80
                    > USED AT LINE 58 IN core-interpret.z80
                    > USED AT LINE 70 IN core-interpret.z80
                    > USED AT LINE 73 IN core-interpret.z80
                    > USED AT LINE 136 IN core-interpret.z80
                    > USED AT LINE 148 IN core-interpret.z80
                    > USED AT LINE 150 IN core-interpret.z80
                    > USED AT LINE 157 IN core-interpret.z80
                    > USED AT LINE 168 IN core-interpret.z80
                    > USED AT LINE 173 IN core-interpret.z80
                    > USED AT LINE 175 IN core-interpret.z80
                    > USED AT LINE 216 IN core-interpret.z80
                    > USED AT LINE 226 IN core-interpret.z80
                    > USED AT LINE 232 IN core-interpret.z80
                    > USED AT LINE 248 IN core-interpret.z80
                    > USED AT LINE 266 IN core-interpret.z80
                    > USED AT LINE 48 IN core-io.z80
                    > USED AT LINE 61 IN core-io.z80
                    > USED AT LINE 144 IN core-io.z80
                    > USED AT LINE 163 IN core-io.z80
                    > USED AT LINE 180 IN core-io.z80
                    > USED AT LINE 182 IN core-io.z80
                    > USED AT LINE 195 IN core-io.z80
                    > USED AT LINE 198 IN core-io.z80
                    > USED AT LINE 132 IN core-memory.z80
                    > USED AT LINE 172 IN core-memory.z80
                    > USED AT LINE 195 IN core-memory.z80
                    > USED AT LINE 55 IN core-stacks.z80
                    > USED AT LINE 38 IN core-utils.z80
BRAN:               0DF0 DEFINED AT LINE 49
                    > USED AT LINE 24 IN core-control.z80
                    > USED AT LINE 37 IN core-control.z80
                    > USED AT LINE 36 IN core-format.z80
                    > USED AT LINE 37 IN core-interpret.z80
                    > USED AT LINE 77 IN core-interpret.z80
                    > USED AT LINE 132 IN core-interpret.z80
                    > USED AT LINE 152 IN core-interpret.z80
                    > USED AT LINE 154 IN core-interpret.z80
                    > USED AT LINE 159 IN core-interpret.z80
                    > USED AT LINE 268 IN core-interpret.z80
                    > USED AT LINE 80 IN core-io.z80
                    > USED AT LINE 91 IN core-io.z80
                    > USED AT LINE 200 IN core-io.z80
                    > USED AT LINE 204 IN core-io.z80
                    > USED AT LINE 33 IN core-kernel.z80
                    > USED AT LINE 142 IN core-memory.z80
                    > USED AT LINE 157 IN core-memory.z80
                    > USED AT LINE 169 IN core-memory.z80
                    > USED AT LINE 5 IN core-utils.z80
                    > USED AT LINE 18 IN core-utils.z80
                    > USED AT LINE 40 IN core-utils.z80
                    > USED AT LINE 52 IN core-utils.z80
TYPECSTR:           0DF8 DEFINED AT LINE 11
                    > USED AT LINE 60 IN core-kernel.z80
THROWX:             0E02 DEFINED AT LINE 11
                    > USED AT LINE 213 IN core-alu.z80
                    > USED AT LINE 216 IN core-alu.z80
STORE:              0E0A DEFINED AT LINE 11
                    > USED AT LINE 19 IN core-compiler.z80
                    > USED AT LINE 45 IN core-compiler.z80
                    > USED AT LINE 75 IN core-compiler.z80
                    > USED AT LINE 50 IN core-interpret.z80
                    > USED AT LINE 91 IN core-memory.z80
                    > USED AT LINE 97 IN core-memory.z80
AT:                 0E14 DEFINED AT LINE 11
                    > USED AT LINE 50 IN core-compiler.z80
                    > USED AT LINE 73 IN core-compiler.z80
                    > USED AT LINE 86 IN core-compiler.z80
                    > USED AT LINE 101 IN core-compiler.z80
                    > USED AT LINE 134 IN core-compiler.z80
                    > USED AT LINE 47 IN core-does.z80
                    > USED AT LINE 22 IN core-format.z80
                    > USED AT LINE 28 IN core-format.z80
                    > USED AT LINE 16 IN core-interpret.z80
                    > USED AT LINE 68 IN core-interpret.z80
                    > USED AT LINE 69 IN core-interpret.z80
                    > USED AT LINE 92 IN core-interpret.z80
                    > USED AT LINE 104 IN core-interpret.z80
                    > USED AT LINE 115 IN core-interpret.z80
                    > USED AT LINE 146 IN core-interpret.z80
                    > USED AT LINE 147 IN core-interpret.z80
                    > USED AT LINE 149 IN core-interpret.z80
                    > USED AT LINE 172 IN core-interpret.z80
                    > USED AT LINE 192 IN core-interpret.z80
                    > USED AT LINE 227 IN core-interpret.z80
                    > USED AT LINE 41 IN core-io.z80
                    > USED AT LINE 54 IN core-io.z80
                    > USED AT LINE 143 IN core-io.z80
                    > USED AT LINE 157 IN core-io.z80
                    > USED AT LINE 103 IN core-memory.z80
                    > USED AT LINE 114 IN core-memory.z80
                    > USED AT LINE 131 IN core-memory.z80
                    > USED AT LINE 30 IN core-utils.z80
CSTOR:              0E1C DEFINED AT LINE 11
                    > USED AT LINE 174 IN core-io.z80
                    > USED AT LINE 145 IN core-memory.z80
                    > USED AT LINE 159 IN core-memory.z80
                    > USED AT LINE 187 IN core-memory.z80
CAT:                0E24 DEFINED AT LINE 11
                    > USED AT LINE 67 IN core-compiler.z80
                    > USED AT LINE 17 IN core-interpret.z80
                    > USED AT LINE 22 IN core-interpret.z80
                    > USED AT LINE 93 IN core-io.z80
                    > USED AT LINE 109 IN core-memory.z80
                    > USED AT LINE 7 IN core-utils.z80
                    > USED AT LINE 20 IN core-utils.z80
RAT:                0E2C DEFINED AT LINE 11
                    > USED AT LINE 261 IN core-alu.z80
                    > USED AT LINE 23 IN core-interpret.z80
                    > USED AT LINE 32 IN core-interpret.z80
                    > USED AT LINE 133 IN core-interpret.z80
                    > USED AT LINE 134 IN core-interpret.z80
                    > USED AT LINE 107 IN core-io.z80
                    > USED AT LINE 145 IN core-memory.z80
                    > USED AT LINE 54 IN core-utils.z80
RPAT:               0E36 DEFINED AT LINE 11
                    > USED AT LINE 185 IN core-interpret.z80
RPSTO:              0E3E DEFINED AT LINE 11
SPAT:               0E46 DEFINED AT LINE 11
                    > USED AT LINE 184 IN core-interpret.z80
                    > USED AT LINE 84 IN core-stacks.z80
                    > USED AT LINE 89 IN core-stacks.z80
SPSTO:              0E50 DEFINED AT LINE 11
PSTOR:              0E58 DEFINED AT LINE 11
                    > USED AT LINE 13 IN core-compiler.z80
DSTOR:              0E6A DEFINED AT LINE 11
DAT:                0E7A DEFINED AT LINE 11
COUNT:              0E8A DEFINED AT LINE 11
                    > USED AT LINE 44 IN core-compiler.z80
                    > USED AT LINE 59 IN core-compiler.z80
                    > USED AT LINE 119 IN core-io.z80
HERE:               0E9C DEFINED AT LINE 11
                    > USED AT LINE 18 IN core-compiler.z80
                    > USED AT LINE 71 IN core-compiler.z80
                    > USED AT LINE 9 IN core-control.z80
                    > USED AT LINE 43 IN core-control.z80
                    > USED AT LINE 48 IN core-control.z80
                    > USED AT LINE 121 IN core-interpret.z80
                    > USED AT LINE 119 IN core-memory.z80
PAD:                0EA6 DEFINED AT LINE 11
                    > USED AT LINE 17 IN core-format.z80
                    > USED AT LINE 53 IN core-format.z80
TIB:                0EB4 DEFINED AT LINE 11
                    > USED AT LINE 91 IN core-interpret.z80
                    > USED AT LINE 216 IN core-io.z80
ATEXE:              0EC0 DEFINED AT LINE 49
                    > USED AT LINE 92 IN core-compiler.z80
                    > USED AT LINE 231 IN core-interpret.z80
                    > USED AT LINE 267 IN core-interpret.z80
                    > USED AT LINE 202 IN core-io.z80
                    > USED AT LINE 211 IN core-io.z80
EXE1:               0ECE DEFINED AT LINE 134 IN core-memory.z80
                    > USED AT LINE 132 IN core-memory.z80
CMOVE:              0ED0 DEFINED AT LINE 11
                    > USED AT LINE 188 IN core-memory.z80
CMOV1:              0EDA DEFINED AT LINE 143 IN core-memory.z80
                    > USED AT LINE 149 IN core-memory.z80
CMOV2:              0EF2 DEFINED AT LINE 148 IN core-memory.z80
                    > USED AT LINE 142 IN core-memory.z80
FILL:               0EFA DEFINED AT LINE 11
FILL1:              0F08 DEFINED AT LINE 158 IN core-memory.z80
                    > USED AT LINE 161 IN core-memory.z80
FILL2:              0F12 DEFINED AT LINE 160 IN core-memory.z80
                    > USED AT LINE 157 IN core-memory.z80
DTRAI:              0F1A DEFINED AT LINE 11
DTRA1:              0F24 DEFINED AT LINE 170 IN core-memory.z80
                    > USED AT LINE 175 IN core-memory.z80
DTRA2:              0F3E DEFINED AT LINE 174 IN core-memory.z80
                    > USED AT LINE 169 IN core-memory.z80
                    > USED AT LINE 172 IN core-memory.z80
PACKS:              0F48 DEFINED AT LINE 11
                    > USED AT LINE 116 IN core-interpret.z80
ALGND:              0F82 DEFINED AT LINE 11
                    > USED AT LINE 71 IN core-compiler.z80
                    > USED AT LINE 108 IN core-io.z80
                    > USED AT LINE 182 IN core-memory.z80
ALGN1:              0FA2 DEFINED AT LINE 197 IN core-memory.z80
                    > USED AT LINE 195 IN core-memory.z80
GREETING:           0FA6 DEFINED AT LINE 1 IN core-messages.z80
                    > USED AT LINE 35
ERR_DIVZERO:        0FB7 DEFINED AT LINE 12 IN core-messages.z80
                    > USED AT LINE 212 IN core-alu.z80
ERR_OUTOFRANGE:     0FC8 DEFINED AT LINE 13 IN core-messages.z80
                    > USED AT LINE 215 IN core-alu.z80
TOR:                0FDC DEFINED AT LINE 11
                    > USED AT LINE 70 IN core-alu.z80
                    > USED AT LINE 257 IN core-alu.z80
                    > USED AT LINE 259 IN core-alu.z80
                    > USED AT LINE 331 IN core-alu.z80
                    > USED AT LINE 32 IN core-compiler.z80
                    > USED AT LINE 4 IN core-control.z80
                    > USED AT LINE 64 IN core-does.z80
                    > USED AT LINE 59 IN core-format.z80
                    > USED AT LINE 5 IN core-interpret.z80
                    > USED AT LINE 27 IN core-interpret.z80
                    > USED AT LINE 54 IN core-interpret.z80
                    > USED AT LINE 66 IN core-interpret.z80
                    > USED AT LINE 76 IN core-interpret.z80
                    > USED AT LINE 91 IN core-interpret.z80
                    > USED AT LINE 131 IN core-interpret.z80
                    > USED AT LINE 170 IN core-interpret.z80
                    > USED AT LINE 184 IN core-interpret.z80
                    > USED AT LINE 90 IN core-io.z80
                    > USED AT LINE 108 IN core-io.z80
                    > USED AT LINE 124 IN core-io.z80
                    > USED AT LINE 130 IN core-io.z80
                    > USED AT LINE 162 IN core-io.z80
                    > USED AT LINE 141 IN core-memory.z80
                    > USED AT LINE 144 IN core-memory.z80
                    > USED AT LINE 156 IN core-memory.z80
                    > USED AT LINE 168 IN core-memory.z80
                    > USED AT LINE 63 IN core-stacks.z80
                    > USED AT LINE 78 IN core-stacks.z80
                    > USED AT LINE 4 IN core-utils.z80
                    > USED AT LINE 17 IN core-utils.z80
                    > USED AT LINE 32 IN core-utils.z80
                    > USED AT LINE 51 IN core-utils.z80
RFROM:              0FEA DEFINED AT LINE 11
                    > USED AT LINE 72 IN core-alu.z80
                    > USED AT LINE 151 IN core-alu.z80
                    > USED AT LINE 263 IN core-alu.z80
                    > USED AT LINE 323 IN core-alu.z80
                    > USED AT LINE 31 IN core-compiler.z80
                    > USED AT LINE 82 IN core-control.z80
                    > USED AT LINE 82 IN core-control.z80
                    > USED AT LINE 36 IN core-does.z80
                    > USED AT LINE 47 IN core-does.z80
                    > USED AT LINE 11 IN core-interpret.z80
                    > USED AT LINE 39 IN core-interpret.z80
                    > USED AT LINE 39 IN core-interpret.z80
                    > USED AT LINE 43 IN core-interpret.z80
                    > USED AT LINE 44 IN core-interpret.z80
                    > USED AT LINE 61 IN core-interpret.z80
                    > USED AT LINE 63 IN core-interpret.z80
                    > USED AT LINE 79 IN core-interpret.z80
                    > USED AT LINE 83 IN core-interpret.z80
                    > USED AT LINE 83 IN core-interpret.z80
                    > USED AT LINE 85 IN core-interpret.z80
                    > USED AT LINE 93 IN core-interpret.z80
                    > USED AT LINE 137 IN core-interpret.z80
                    > USED AT LINE 155 IN core-interpret.z80
                    > USED AT LINE 160 IN core-interpret.z80
                    > USED AT LINE 171 IN core-interpret.z80
                    > USED AT LINE 176 IN core-interpret.z80
                    > USED AT LINE 177 IN core-interpret.z80
                    > USED AT LINE 186 IN core-interpret.z80
                    > USED AT LINE 187 IN core-interpret.z80
                    > USED AT LINE 193 IN core-interpret.z80
                    > USED AT LINE 194 IN core-interpret.z80
                    > USED AT LINE 195 IN core-interpret.z80
                    > USED AT LINE 107 IN core-io.z80
                    > USED AT LINE 131 IN core-io.z80
                    > USED AT LINE 147 IN core-memory.z80
                    > USED AT LINE 173 IN core-memory.z80
                    > USED AT LINE 42 IN core-utils.z80
                    > USED AT LINE 44 IN core-utils.z80
DUPP:               0FF8 DEFINED AT LINE 11
                    > USED AT LINE 82 IN core-alu.z80
                    > USED AT LINE 255 IN core-alu.z80
                    > USED AT LINE 259 IN core-alu.z80
                    > USED AT LINE 18 IN core-compiler.z80
                    > USED AT LINE 31 IN core-compiler.z80
                    > USED AT LINE 56 IN core-compiler.z80
                    > USED AT LINE 67 IN core-compiler.z80
                    > USED AT LINE 70 IN core-compiler.z80
                    > USED AT LINE 74 IN core-compiler.z80
                    > USED AT LINE 23 IN core-format.z80
                    > USED AT LINE 34 IN core-format.z80
                    > USED AT LINE 59 IN core-format.z80
                    > USED AT LINE 9 IN core-interpret.z80
                    > USED AT LINE 11 IN core-interpret.z80
                    > USED AT LINE 27 IN core-interpret.z80
                    > USED AT LINE 41 IN core-interpret.z80
                    > USED AT LINE 76 IN core-interpret.z80
                    > USED AT LINE 144 IN core-interpret.z80
                    > USED AT LINE 146 IN core-interpret.z80
                    > USED AT LINE 147 IN core-interpret.z80
                    > USED AT LINE 149 IN core-interpret.z80
                    > USED AT LINE 162 IN core-interpret.z80
                    > USED AT LINE 167 IN core-interpret.z80
                    > USED AT LINE 265 IN core-interpret.z80
                    > USED AT LINE 60 IN core-io.z80
                    > USED AT LINE 93 IN core-io.z80
                    > USED AT LINE 173 IN core-io.z80
                    > USED AT LINE 179 IN core-io.z80
                    > USED AT LINE 196 IN core-io.z80
                    > USED AT LINE 102 IN core-memory.z80
                    > USED AT LINE 108 IN core-memory.z80
                    > USED AT LINE 144 IN core-memory.z80
                    > USED AT LINE 182 IN core-memory.z80
                    > USED AT LINE 183 IN core-memory.z80
                    > USED AT LINE 193 IN core-memory.z80
                    > USED AT LINE 55 IN core-stacks.z80
                    > USED AT LINE 56 IN core-stacks.z80
                    > USED AT LINE 7 IN core-utils.z80
                    > USED AT LINE 20 IN core-utils.z80
DROP:               0FFC DEFINED AT LINE 11
                    > USED AT LINE 50 IN core-alu.z80
                    > USED AT LINE 116 IN core-alu.z80
                    > USED AT LINE 122 IN core-alu.z80
                    > USED AT LINE 137 IN core-alu.z80
                    > USED AT LINE 145 IN core-alu.z80
                    > USED AT LINE 277 IN core-alu.z80
                    > USED AT LINE 317 IN core-alu.z80
                    > USED AT LINE 61 IN core-compiler.z80
                    > USED AT LINE 54 IN core-control.z80
                    > USED AT LINE 52 IN core-format.z80
                    > USED AT LINE 86 IN core-format.z80
                    > USED AT LINE 61 IN core-interpret.z80
                    > USED AT LINE 79 IN core-interpret.z80
                    > USED AT LINE 137 IN core-interpret.z80
                    > USED AT LINE 155 IN core-interpret.z80
                    > USED AT LINE 160 IN core-interpret.z80
                    > USED AT LINE 176 IN core-interpret.z80
                    > USED AT LINE 177 IN core-interpret.z80
                    > USED AT LINE 187 IN core-interpret.z80
                    > USED AT LINE 195 IN core-interpret.z80
                    > USED AT LINE 219 IN core-interpret.z80
                    > USED AT LINE 270 IN core-interpret.z80
                    > USED AT LINE 97 IN core-io.z80
                    > USED AT LINE 187 IN core-io.z80
                    > USED AT LINE 206 IN core-io.z80
                    > USED AT LINE 217 IN core-io.z80
                    > USED AT LINE 194 IN core-memory.z80
                    > USED AT LINE 68 IN core-stacks.z80
                    > USED AT LINE 68 IN core-stacks.z80
                    > USED AT LINE 11 IN core-utils.z80
                    > USED AT LINE 42 IN core-utils.z80
                    > USED AT LINE 44 IN core-utils.z80
SWAP:               1000 DEFINED AT LINE 11
                    > USED AT LINE 116 IN core-alu.z80
                    > USED AT LINE 129 IN core-alu.z80
                    > USED AT LINE 135 IN core-alu.z80
                    > USED AT LINE 143 IN core-alu.z80
                    > USED AT LINE 265 IN core-alu.z80
                    > USED AT LINE 48 IN core-control.z80
                    > USED AT LINE 59 IN core-control.z80
                    > USED AT LINE 64 IN core-control.z80
                    > USED AT LINE 12 IN core-format.z80
                    > USED AT LINE 19 IN core-interpret.z80
                    > USED AT LINE 20 IN core-interpret.z80
                    > USED AT LINE 23 IN core-interpret.z80
                    > USED AT LINE 29 IN core-interpret.z80
                    > USED AT LINE 32 IN core-interpret.z80
                    > USED AT LINE 36 IN core-interpret.z80
                    > USED AT LINE 65 IN core-interpret.z80
                    > USED AT LINE 144 IN core-interpret.z80
                    > USED AT LINE 156 IN core-interpret.z80
                    > USED AT LINE 194 IN core-interpret.z80
                    > USED AT LINE 187 IN core-io.z80
                    > USED AT LINE 90 IN core-memory.z80
                    > USED AT LINE 91 IN core-memory.z80
                    > USED AT LINE 96 IN core-memory.z80
                    > USED AT LINE 103 IN core-memory.z80
                    > USED AT LINE 109 IN core-memory.z80
                    > USED AT LINE 156 IN core-memory.z80
                    > USED AT LINE 188 IN core-memory.z80
                    > USED AT LINE 63 IN core-stacks.z80
OVER:               1008 DEFINED AT LINE 11
                    > USED AT LINE 150 IN core-alu.z80
                    > USED AT LINE 272 IN core-alu.z80
                    > USED AT LINE 59 IN core-compiler.z80
                    > USED AT LINE 65 IN core-does.z80
                    > USED AT LINE 53 IN core-format.z80
                    > USED AT LINE 17 IN core-interpret.z80
                    > USED AT LINE 22 IN core-interpret.z80
                    > USED AT LINE 56 IN core-interpret.z80
                    > USED AT LINE 65 IN core-interpret.z80
                    > USED AT LINE 82 IN core-interpret.z80
                    > USED AT LINE 85 IN core-interpret.z80
                    > USED AT LINE 133 IN core-interpret.z80
                    > USED AT LINE 134 IN core-interpret.z80
                    > USED AT LINE 131 IN core-io.z80
                    > USED AT LINE 162 IN core-io.z80
                    > USED AT LINE 174 IN core-io.z80
                    > USED AT LINE 192 IN core-io.z80
                    > USED AT LINE 206 IN core-io.z80
                    > USED AT LINE 90 IN core-memory.z80
                    > USED AT LINE 96 IN core-memory.z80
                    > USED AT LINE 171 IN core-memory.z80
                    > USED AT LINE 183 IN core-memory.z80
                    > USED AT LINE 185 IN core-memory.z80
                    > USED AT LINE 73 IN core-stacks.z80
                    > USED AT LINE 73 IN core-stacks.z80
                    > USED AT LINE 16 IN core-utils.z80
QDUP:               1010 DEFINED AT LINE 11
                    > USED AT LINE 84 IN core-compiler.z80
                    > USED AT LINE 135 IN core-interpret.z80
                    > USED AT LINE 172 IN core-interpret.z80
                    > USED AT LINE 174 IN core-interpret.z80
                    > USED AT LINE 225 IN core-interpret.z80
                    > USED AT LINE 131 IN core-memory.z80
QDUP1:              101C DEFINED AT LINE 57 IN core-stacks.z80
ROT:                101E DEFINED AT LINE 11
                    > USED AT LINE 78 IN core-stacks.z80
                    > USED AT LINE 35 IN core-utils.z80
                    > USED AT LINE 35 IN core-utils.z80
DDROP:              102C DEFINED AT LINE 11
                    > USED AT LINE 43 IN core-interpret.z80
                    > USED AT LINE 62 IN core-io.z80
                    > USED AT LINE 150 IN core-memory.z80
                    > USED AT LINE 162 IN core-memory.z80
DDUP:               1036 DEFINED AT LINE 11
                    > USED AT LINE 107 IN core-alu.z80
                    > USED AT LINE 121 IN core-alu.z80
                    > USED AT LINE 134 IN core-alu.z80
                    > USED AT LINE 142 IN core-alu.z80
                    > USED AT LINE 322 IN core-alu.z80
                    > USED AT LINE 194 IN core-io.z80
                    > USED AT LINE 159 IN core-memory.z80
                    > USED AT LINE 187 IN core-memory.z80
TWOSWAP:            1040 DEFINED AT LINE 11
PICK:               104E DEFINED AT LINE 11
                    > USED AT LINE 54 IN core-utils.z80
DEPTH:              1062 DEFINED AT LINE 11
                    > USED AT LINE 256 IN core-interpret.z80
                    > USED AT LINE 50 IN core-utils.z80
SZERO:              1078 DEFINED AT LINE 11
                    > USED AT LINE 89 IN core-stacks.z80
RZERO:              1080 DEFINED AT LINE 11
TQKEY:              1088 DEFINED AT LINE 49
                    > USED AT LINE 41 IN core-io.z80
TEMIT:              1090 DEFINED AT LINE 49
                    > USED AT LINE 54 IN core-io.z80
TEXPE:              1098 DEFINED AT LINE 49
                    > USED AT LINE 211 IN core-io.z80
TTAP:               10A0 DEFINED AT LINE 49
                    > USED AT LINE 202 IN core-io.z80
TECHO:              10A8 DEFINED AT LINE 49
                    > USED AT LINE 165 IN core-io.z80
                    > USED AT LINE 173 IN core-io.z80
TPROM:              10B0 DEFINED AT LINE 49
                    > USED AT LINE 270 IN core-interpret.z80
BASE:               10B8 DEFINED AT LINE 11
                    > USED AT LINE 28 IN core-format.z80
                    > USED AT LINE 16 IN core-interpret.z80
                    > USED AT LINE 29 IN core-interpret.z80
                    > USED AT LINE 44 IN core-interpret.z80
                    > USED AT LINE 143 IN core-io.z80
                    > USED AT LINE 30 IN core-utils.z80
TEMP:               10C0 DEFINED AT LINE 11
                    > USED AT LINE 50 IN core-interpret.z80
                    > USED AT LINE 68 IN core-interpret.z80
                    > USED AT LINE 69 IN core-interpret.z80
                    > USED AT LINE 153 IN core-interpret.z80
SPAN:               10C8 DEFINED AT LINE 49
INN:                10D0 DEFINED AT LINE 11
NTIB:               10D8 DEFINED AT LINE 49
                    > USED AT LINE 92 IN core-interpret.z80
                    > USED AT LINE 104 IN core-interpret.z80
                    > USED AT LINE 125 IN core-memory.z80
CSP:                10E0 DEFINED AT LINE 49
TEVAL:              10E8 DEFINED AT LINE 49
                    > USED AT LINE 267 IN core-interpret.z80
TNUMB:              10F0 DEFINED AT LINE 49
                    > USED AT LINE 92 IN core-compiler.z80
                    > USED AT LINE 231 IN core-interpret.z80
HLD:                10F8 DEFINED AT LINE 49
                    > USED AT LINE 17 IN core-format.z80
                    > USED AT LINE 22 IN core-format.z80
                    > USED AT LINE 23 IN core-format.z80
                    > USED AT LINE 52 IN core-format.z80
HANDL:              1100 DEFINED AT LINE 49
                    > USED AT LINE 185 IN core-interpret.z80
                    > USED AT LINE 186 IN core-interpret.z80
                    > USED AT LINE 192 IN core-interpret.z80
                    > USED AT LINE 193 IN core-interpret.z80
CNTXT:              1108 DEFINED AT LINE 49
                    > USED AT LINE 167 IN core-interpret.z80
CRRNT:              1110 DEFINED AT LINE 49
                    > USED AT LINE 73 IN core-compiler.z80
CP:                 1118 DEFINED AT LINE 49
                    > USED AT LINE 13 IN core-compiler.z80
                    > USED AT LINE 19 IN core-compiler.z80
                    > USED AT LINE 45 IN core-compiler.z80
                    > USED AT LINE 114 IN core-memory.z80
NP:                 1120 DEFINED AT LINE 49
                    > USED AT LINE 115 IN core-interpret.z80
LAST:               1128 DEFINED AT LINE 11
                    > USED AT LINE 50 IN core-compiler.z80
                    > USED AT LINE 70 IN core-compiler.z80
                    > USED AT LINE 101 IN core-compiler.z80
                    > USED AT LINE 134 IN core-compiler.z80
VFRTH:              1130 DEFINED AT LINE 49
UTYPE:              1138 DEFINED AT LINE 11
UTYP1:              1142 DEFINED AT LINE 6 IN core-utils.z80
                    > USED AT LINE 10 IN core-utils.z80
UTYP2:              1150 DEFINED AT LINE 9 IN core-utils.z80
                    > USED AT LINE 5 IN core-utils.z80
DMP:                1158 DEFINED AT LINE 49
PDUM1:              116C DEFINED AT LINE 19 IN core-utils.z80
                    > USED AT LINE 23 IN core-utils.z80
PDUM2:              117C DEFINED AT LINE 22 IN core-utils.z80
                    > USED AT LINE 18 IN core-utils.z80
DUMP:               1182 DEFINED AT LINE 11
DUMP1:              1196 DEFINED AT LINE 33 IN core-utils.z80
                    > USED AT LINE 39 IN core-utils.z80
DUMP2:              11BA DEFINED AT LINE 41 IN core-utils.z80
                    > USED AT LINE 38 IN core-utils.z80
DUMP3:              11BE DEFINED AT LINE 43 IN core-utils.z80
                    > USED AT LINE 40 IN core-utils.z80
DOTS:               11C8 DEFINED AT LINE 11
DOTS1:              11D6 DEFINED AT LINE 53 IN core-utils.z80
                    > USED AT LINE 56 IN core-utils.z80
DOTS2:              11DC DEFINED AT LINE 55 IN core-utils.z80
                    > USED AT LINE 52 IN core-utils.z80
SPP:                2200 DEFINED AT LINE 3 IN variables.z80
                    > USED AT LINE 16
                    > USED AT LINE 5 IN defaults.z80
TIBB:               2200 DEFINED AT LINE 4 IN variables.z80
                    > USED AT LINE 18 IN defaults.z80
RPP:                2400 DEFINED AT LINE 6 IN variables.z80
                    > USED AT LINE 24
                    > USED AT LINE 6 IN defaults.z80
UPP:                2400 DEFINED AT LINE 7 IN variables.z80
                    > USED AT LINE 20
                    > USED AT LINE 42 IN core-does.z80
VARSPP:             2400 DEFINED AT LINE 9 IN variables.z80
VARRPP:             2402 DEFINED AT LINE 10 IN variables.z80
VARQKEY:            2404 DEFINED AT LINE 11 IN variables.z80
VARTEMIT:           2406 DEFINED AT LINE 12 IN variables.z80
VARTEXPECT:         2408 DEFINED AT LINE 13 IN variables.z80
VARTTAP:            240A DEFINED AT LINE 14 IN variables.z80
VARTECHO:           240C DEFINED AT LINE 15 IN variables.z80
VARTPROMPT:         240E DEFINED AT LINE 16 IN variables.z80
VARBASE:            2410 DEFINED AT LINE 17 IN variables.z80
VARTMP:             2412 DEFINED AT LINE 18 IN variables.z80
VARSPAN:            2414 DEFINED AT LINE 19 IN variables.z80
VARPIN:             2416 DEFINED AT LINE 20 IN variables.z80
VARNTIB:            2418 DEFINED AT LINE 21 IN variables.z80
VARTIB:             241A DEFINED AT LINE 22 IN variables.z80
VARCSP:             241C DEFINED AT LINE 23 IN variables.z80
VARTEVAL:           241E DEFINED AT LINE 24 IN variables.z80
VARTNUM:            2420 DEFINED AT LINE 25 IN variables.z80
VARHLD:             2422 DEFINED AT LINE 26 IN variables.z80
VARHANDLER:         2424 DEFINED AT LINE 27 IN variables.z80
VARCONTEXT:         2426 DEFINED AT LINE 28 IN variables.z80
VARVOCABS:          2428 DEFINED AT LINE 29 IN variables.z80
VARCURRENT:         242A DEFINED AT LINE 30 IN variables.z80
VARVOCABLP:         242C DEFINED AT LINE 31 IN variables.z80
VARCP:              242E DEFINED AT LINE 32 IN variables.z80
VARNP:              2430 DEFINED AT LINE 33 IN variables.z80
VARLAST:            2432 DEFINED AT LINE 34 IN variables.z80
VARFORTH:           2434 DEFINED AT LINE 35 IN variables.z80
VARVOCABL:          2436 DEFINED AT LINE 36 IN variables.z80
SERINPTR:           2438 DEFINED AT LINE 38 IN variables.z80
                    > USED AT LINE 17 IN interrupt.z80
                    > USED AT LINE 23 IN interrupt.z80
                    > USED AT LINE 7 IN serial.z80
SERRDPTR:           243A DEFINED AT LINE 39 IN variables.z80
                    > USED AT LINE 8 IN serial.z80
                    > USED AT LINE 22 IN serial.z80
                    > USED AT LINE 30 IN serial.z80
SERBUFUSED:         243C DEFINED AT LINE 40 IN variables.z80
                    > USED AT LINE 11 IN interrupt.z80
                    > USED AT LINE 26 IN interrupt.z80
                    > USED AT LINE 28 IN interrupt.z80
                    > USED AT LINE 10 IN serial.z80
                    > USED AT LINE 18 IN serial.z80
                    > USED AT LINE 31 IN serial.z80
                    > USED AT LINE 33 IN serial.z80
                    > USED AT LINE 55 IN serial.z80
SERBUF:             243E DEFINED AT LINE 41 IN variables.z80
                    > USED AT LINE 20 IN interrupt.z80
                    > USED AT LINE 22 IN interrupt.z80
                    > USED AT LINE 6 IN serial.z80
                    > USED AT LINE 25 IN serial.z80
                    > USED AT LINE 27 IN serial.z80
CPP:                247D DEFINED AT LINE 43 IN variables.z80
                    > USED AT LINE 28 IN defaults.z80
NPP:                FFFE DEFINED AT LINE 45 IN variables.z80
                    > USED AT LINE 29 IN defaults.z80

0000                          .ENGINE   mycomputer   
0000                TESTMODE:   EQU   0   
0000                MEM_SIZE:   EQU   $10000   ; MEM is 64K
0000                ROM_SIZE:   EQU   $2000   ; ROM is 8K
0000                RAM_SIZE:   EQU   MEM_SIZE - ROM_SIZE   ; RAM is 64K - 8K
0000                START_ROM:   EQU   BM   ; inclusive
0000                END_ROM:   EQU   BM + ROM_SIZE   ; exclusive
0000                START_RAM:   EQU   BM + ROM_SIZE   ; inclusive
0000                END_RAM:   EQU   START_RAM + RAM_SIZE   ; exclusive
0000                BM:       EQU   0   ; bottom of ROM memory
0000                EM:       EQU   BM + MEM_SIZE   
0000                COMPO:    EQU   $20   ;lexicon compile only bit
0000                IMEDD:    EQU   $40   ;lexicon immediate bit
0000                MASKK:    EQU   $1F   ;lexicon bit mask
0000                CHARR:    EQU   1   ;byte size of a character
0000                CELLL:    EQU   2   
0000                BASEE:    EQU   10   ;BASE
0000                VOCSS:    EQU   8   ;depth of vocabulary stack
0000                MAXCHAR:   EQU   0FFh   ;Extended character set					                    ;  Use 07Fh for ASCII only
0000                MAXSIGNED:   EQU   07FFFh   ;max value of signed integer
0000                MAXUNSIGNED:   EQU   0FFFFh   ;max value of unsigned integer
0000                MAXNEGATIVE:   EQU   8000h   ;max value of negative integer
0000                BKSPP:    EQU   8   ;backspace
0000                LFF:      EQU   $0A   ;line feed
0000                CRR:      EQU   $0D   ;carriage return
0000                SPACEE:   EQU   $20   
0000                TIC:      EQU   $27   ;tick
0000                MINUSS:   EQU   $2D   
0000                UNDERSC:   EQU   $5F   
0000                CALLL:    EQU   $CD00   ; NOP followed by CALL opcodes
0000                US:       EQU   END_DEFAULTS - DEFAULTS   ;user area size
0000                RTS:      EQU   $100 * CELLL   ;return stack/TIB size
0000                DTS:      EQU   $100 * CELLL   ;data stack size
0000                RET_STACK_SIZE:   EQU   $100   
0000                DATA_STACK_SIZE:   EQU   $100   
0000                INT_ADDR:   EQU   $0038   
0000                SER_BUFSIZE:   EQU   $3F   
0000                SER_FULLSIZE:   EQU   $30   
0000                SER_EMPTYSIZE:   EQU   5   
0000                RTS_HIGH:   EQU   $D6   
0000                RTS_LOW:   EQU   $96   
0000                TRUEE:    EQU   -1   
0000                FALSEE:   EQU   0   
0000                             ; Initialize assembly variables
0000                VVCODE:   .SET   0   
0000                VVNAME:   .SET   END_ROM   
0000                VVLINK:   .SET   0   ;force a null link
0000                VVUSER:   .SET   0   ;first user variable offset
0000                .macro MCODE,aaLEX,aaNAME,aaLABEL
0000                             ; 
0000                 .align 2                                         ;;force to cell boundary
0000                aaLABEL:                                              ;;assembly label
0000                 vvCODE .set $
0000                 vvLEN  .set (aaLEX & 01FH) / CELLL              ;;string cell count, round down
0000                 ORG vvNAME - ((vvLEN + 3) * CELLL)                                     ; ? needed
0000                 vvNAME .set $
0000                 DW vvCODE, vvLINK                               ;;token pointer and link
0000                 vvLINK .set $                                   ;;link points to a name string
0000                 DB aaLEX, aaNAME                                    ;;name string
0000                 ORG vvCODE                                      ;;restore code pointer
0000                .endm
0000                 
0000                .macro MCOLON,aaLEX,aaNAME,aaLABEL
0000                             ; 
0000                 mCODE aaLEX, aaNAME, aaLABEL
0000                 nop
0000                 CALL doLIST
0000                .endm
0000                 
0000                .macro MUSER,aaLEX,aaNAME,aaLABEL
0000                             ; 
0000                	mCODE aaLEX, aaNAME, aaLABEL
0000                 nop
0000                 CALL doLIST
0000                 DW DoUSE,vvUSER
0000                 vvUSER .set vvUSER + CELLL
0000                .endm
0000                 
0000                             ; .align 2
0000                .macro MDSTR,aaFUNC,aaSTR
0000                             ; 
0000                 DW aaFUNC                       ;;function
0000                 vvLEN .set $                    ;;save address of count byte
0000                 DB 0,aaSTR                      ;;count byte and string
0000                 vvCODE .set $                   ;;save code pointer
0000                ORG vvLEN                           ;;point to count byte
0000                 DB vvCODE - vvLEN - 1           ;;set count
0000                ORG vvCODE                          ;;restore code pointer
0000                .endm
0000                 
0000                .macro HCODE,aaLEX,aaNAME,aaLABEL
0000                             ; 
0000                 .align 2                                         ;;force to cell boundary
0000                aaLABEL:                                              ;;assembly label
0000                .endm
0000                 
0000                .macro HCOLON,aaLEX,aaNAME,aaLABEL
0000                             ; 
0000                 hCODE aaLEX, aaNAME, aaLABEL
0000                 nop
0000                 CALL doLIST
0000                .endm
0000                 
0000                .macro HUSER,aaLEX,aaNAME,aaLABEL
0000                             ; 
0000                	hCODE aaLEX, aaNAME, aaLABEL
0000                 nop
0000                 CALL doLIST
0000                 DW DoUSE,vvUSER
0000                 vvUSER .set vvUSER + CELLL
0000                .endm
0000                 
0000                             ; 	LD	E,(HL)	                    ; 7t
0000                             ; 	INC	HL	                        ; 6t
0000                             ; 	LD	D,(HL)	                    ; 7t
0000                             ; 	INC	HL	                        ; 6t
0000                             ; 	EX	DE,HL	                    ; 4t
0000                             ; 	JP	(HL)	                    ; 4t
0000                .macro MNEXTHL,
0000                             ; 
0000                 JP (IY)
0000                .endm
0000                 
0000                .macro MNEXT,
0000                             ; 
0000                	EX	DE,HL	                    ; 4t
0000                 mNEXTHL                         ; 34t
0000                .endm
0000                 
0000                          .ORG   START_ROM   
0000                RESET:       
0000   C3 72 00               JP   INIT   ; C3 veclo vechi
0038                          .ORG   INT_ADDR   ; RST 38 - INTERRUPT VECTOR [ for IM 1 ]
0038   F5           SERIALINT:   PUSH   AF   
0039   E5                     PUSH   HL   
003A   DB 80                  IN   A,($80)   
003C   E6 01                  AND   $01   ; Check if interupt due to read buffer full
003E   28 2D                  JR   Z,rts0   ; if not, ignore
0040   DB 81                  IN   A,($81)   
0042   F5                     PUSH   AF   
0043   3A 3C 24               LD   A,(serBufUsed)   
0046   FE 3F                  CP   SER_BUFSIZE   ; If full then ignore
0048   20 03                  JR   NZ,notFull   
004A   F1                     POP   AF   
004B   18 20                  JR   rts0   
004D   2A 38 24     NOTFULL:   LD   HL,(serInPtr)   
0050   23                     INC   HL   
0051   7D                     LD   A,L   ; Only need to check low byte becasuse buffer<256 bytes
0052   FE 7D                  CP   (serBuf+SER_BUFSIZE) & $FF   
0054   20 03                  JR   NZ,notWrap   
0056   21 3E 24               LD   HL,serBuf   
0059   22 38 24     NOTWRAP:   LD   (serInPtr),HL   
005C   F1                     POP   AF   
005D   77                     LD   (HL),A   
005E   3A 3C 24               LD   A,(serBufUsed)   
0061   3C                     INC   A   
0062   32 3C 24               LD   (serBufUsed),A   
0065   FE 30                  CP   SER_FULLSIZE   
0067   38 04                  JR   C,rts0   
0069   3E D6                  LD   A,RTS_HIGH   
006B   D3 80                  OUT   ($80),A   
006D   E1           RTS0:     POP   HL   
006E   F1                     POP   AF   
006F   FB                     EI      
0070   ED 4D                  RETI      
0072                INIT:        
0072   21 00 22               LD   HL,SPP   ; Setup Forth data stack
0075   F9                     LD   SP,HL   ; also used as return stack by interrupts etc
0076   21 FB 00               LD   HL,DEFAULTS   ; initialize user variables with defaults
0079   11 00 24               LD   DE,UPP   
007C   01 3A 00               LD   BC,US   
007F   ED B0                  LDIR      
0081   DD 21 00 24            LD   IX,RPP   ; set up Forth return stack
0085   FD 21 08 0E            LD   IY,NEXT_STEP   
0089   01 FF FF               LD   BC,-1   ; empty stack marker
008C   11 01 00               LD   DE,RESET + 1   ; contains reset vector
008F   C3 0E 0E               JP   COLD   
0092                          IF   TESTMODE   
                              JP   TESTS_START   
0092                          ELSE      
0092   21 F6 0F               LD   HL,GREETING   
0095   CD F1 00               CALL   PRINTSZ   
0098                LOOP:        
0098   CD B5 00               CALL   RXA   
009B   CD E0 00               CALL   TXA   
009E   C3 98 00               JP   LOOP   
00A1                          ENDIF      
00A1                             ; Modified from code by Grant Searle
00A1                             ; Minimum 6850 ACIA interrupt driven serial I/O
00A1                INIT_IO:      
00A1   F3                     DI      ; Disable interrupts
00A2   21 3E 24               LD   HL,serBuf   
00A5   22 38 24               LD   (serInPtr),HL   
00A8   22 3A 24               LD   (serRdPtr),HL   
00AB   AF                     XOR   A   
00AC   32 3C 24               LD   (serBufUsed),A   
00AF   3E 96                  LD   A,RTS_LOW   
00B1   D3 80                  OUT   ($80),A   ; Initialise ACIA
00B3   FB                     EI      
00B4   C9                     RET      
00B5                RXA:         
00B5                WAITFORCHAR:      
00B5   3A 3C 24               LD   A,(serBufUsed)   
00B8   FE 00                  CP   $00   
00BA   28 F9                  JR   Z,waitForChar   
00BC   E5                     PUSH   HL   
00BD   2A 3A 24               LD   HL,(serRdPtr)   
00C0   23                     INC   HL   
00C1   7D                     LD   A,L   ; Only need to check low byte becasuse buffer<256 bytes
00C2   FE 7D                  CP   (serBuf+SER_BUFSIZE) & $FF   
00C4   20 03                  JR   NZ,notRdWrap   
00C6   21 3E 24               LD   HL,serBuf   
00C9                NOTRDWRAP:      
00C9   F3                     DI      
00CA   22 3A 24               LD   (serRdPtr),HL   
00CD   3A 3C 24               LD   A,(serBufUsed)   
00D0   3D                     DEC   A   
00D1   32 3C 24               LD   (serBufUsed),A   
00D4   FE 05                  CP   SER_EMPTYSIZE   
00D6   30 04                  JR   NC,rts1   
00D8   3E 96                  LD   A,RTS_LOW   
00DA   D3 80                  OUT   ($80),A   
00DC                RTS1:        
00DC   7E                     LD   A,(HL)   
00DD   FB                     EI      
00DE   E1                     POP   HL   
00DF   C9                     RET      ; Char ready in A
00E0                TXA:         
00E0   F5                     PUSH   AF   ; Store character
00E1                CONOUT1:      
00E1   DB 80                  IN   A,($80)   ; Status byte
00E3   CB 4F                  BIT   1,A   ; Set Zero flag if still transmitting character
00E5   28 FA                  JR   Z,conout1   ; Loop until flag signals ready
00E7   F1                     POP   AF   ; Retrieve character
00E8   D3 81                  OUT   ($81),A   ; Output the character
00EA   C9                     RET      
00EB                CKINCHAR:      
00EB   3A 3C 24               LD   A,(serBufUsed)   
00EE   FE 00                  CP   $0   
00F0   C9                     RET      
00F1                PRINTSZ:      
00F1   7E                     LD   A,(HL)   ; Get character
00F2   B7                     OR   A   ; Is it $00 ?
00F3   C8                     RET   Z   ; Then RETurn on terminator
00F4   CD E0 00               CALL   TXA   ; Print it
00F7   23                     INC   HL   ; Next Character
00F8   18 F7                  JR   PRINTSZ   ; Continue until $00
00FA   C9                     RET      
00FB                             ; .align 2
00FB                DEFAULTS:      
00FB   00 22        DEFSP0:   DW   SPP   ; SP0
00FD   00 24        DEFRP0:   DW   RPP   ; RP0
00FF   D6 0B        DEFQKEY:   DW   QRX   ; '?KEY
0101   EE 0B        DEFTEMIT:   DW   TXSTO   ; 'EMIT
0103   00 00        DEFTEXPECT:   DW   0   ; 'EXPECT
0105   00 00        DEFTTAP:   DW   0   ; 'TAP
0107   EE 0B        DEFTECHO:   DW   TXSTO   ; 'ECHO
0109   00 00        DEFTPROMPT:   DW   0   ; 'PROMPT
010B   00 00        DEFBASE:   DW   0   ; BASE
010D   00 00        DEFTMP:   DW   0   ; tmp
010F   00 00        DEFSPAN:   DW   0   ; SPAN
0111   00 00        DEFPIN:   DW   0   ; >IN
0113   00 00        DEFNTIB:   DW   0   ; #TIB
0115   00 22        DEFTIB:   DW   TIBB   ; TIB
0117   00 00        DEFCSP:   DW   0   ; CSP
0119   00 00        DEFTEVAL:   DW   0   ; 'EVAL
011B   00 00        DEFTNUM:   DW   0   ; 'NUMBER
011D   00 00        DEFHLD:   DW   0   ; HLD
011F   00 00        DEFHANDLER:   DW   0   ; HANDLER
0121   00 00        DEFCONTEXT:   DW   0   ; CONTEXT pointer
0123   00 00        DEFVOCABS:   DW   0   ; vocabulary stack    ???
0125   00 00        DEFCURRENT:   DW   0   ; CURRENT pointer
0127   00 00        DEFVOCABLP:   DW   0   ; vocabulary link pointer ???
0129   7D 24        DEFCP:    DW   CPP   ; CP  for runing phase on RAM
012B   FE FF        DEFNP:    DW   NPP   ; NP  for runing phase on RAM
012D   00 00        DEFLAST:   DW   0   ; LAST
012F   00 00        DEFFORTH:   DW   0   ; FORTH   \ mullti-user ???
0131   00 00        DEFVOCABL:   DW   0   ; vocabulary link       ???
0133   00 00        DEFCOLD:   DW   0   ; "COLD"
0135                END_DEFAULTS:      
0135                VVCODE:   .SET   $   
0135                             ;   2*		( x1 -- x2 )			
0135                             ;		Bit-shift left, filling the least significant bit with 0.
0135                          ;*Macro unroll: mCODE	2,'2*',TwoStar
0135                          ALIGN   2   
0136                TWOSTAR:      
0136                VVCODE:   .SET   $   
0136                VVLEN:    .SET   (2 & 01FH) / CELLL   
1FF8                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FF8                VVNAME:   .SET   $   
1FF8   36 01 00 00            DW   vvCODE,vvLINK   
1FFC                VVLINK:   .SET   $   
1FFC   02 32 2A               DB   2,"2*"   
0136                          .ORG   vvCODE   
0136   CB 21                  SLA   C   
0138   CB 10                  RL   B   
013A                          ;*Macro unroll: 	mNEXT
013A   EB                     EX   DE,HL   
013B                          ;*Macro unroll:  mNEXTHL                         ; 34t
013B   FD E9                  JP   (IY)   ; 34t
013D                             ;   0<          ( n -- t )
013D                             ;               Return true if n is negative.
013D                          ;*Macro unroll: mCODE	2,'0<', ZLESS
013D                          ALIGN   2   
013E                ZLESS:       
013E                VVCODE:   .SET   $   
013E                VVLEN:    .SET   (2 & 01FH) / CELLL   
1FF0                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FF0                VVNAME:   .SET   $   
1FF0   3E 01 FC 1F            DW   vvCODE,vvLINK   
1FF4                VVLINK:   .SET   $   
1FF4   02 30 3C               DB   2,"0<"   
013E                          .ORG   vvCODE   
013E   CB 20                  SLA   B   ; sign bit -> cy flag
0140   9F                     SBC   A,A   ; propagate cy through A
0141   47                     LD   B,A   ; put 0000 or FFFF in TOS
0142   4F                     LD   C,A   
0143                          ;*Macro unroll: 	mNEXT
0143   EB                     EX   DE,HL   
0144                          ;*Macro unroll:  mNEXTHL                         ; 34t
0144   FD E9                  JP   (IY)   ; 34t
0146                             ;   AND         ( w w -- w )
0146                             ;               Bitwise AND.
0146                          ;*Macro unroll: mCODE	3, 'AND', ANDD
0146                          ALIGN   2   
0146                ANDD:        
0146                VVCODE:   .SET   $   
0146                VVLEN:    .SET   (3 & 01FH) / CELLL   
1FE8                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FE8                VVNAME:   .SET   $   
1FE8   46 01 F4 1F            DW   vvCODE,vvLINK   
1FEC                VVLINK:   .SET   $   
1FEC   03 41 4E 44            DB   3,"AND"   
0146                          .ORG   vvCODE   
0146   E1                     POP   HL   
0147   78                     LD   A,B   
0148   A4                     AND   H   
0149   47                     LD   B,A   
014A   79                     LD   A,C   
014B   A5                     AND   L   
014C   4F                     LD   C,A   
014D                          ;*Macro unroll: 	mNEXT
014D   EB                     EX   DE,HL   
014E                          ;*Macro unroll:  mNEXTHL                         ; 34t
014E   FD E9                  JP   (IY)   ; 34t
0150                             ;   OR          ( w w -- w )
0150                             ;               Bitwise inclusive OR.
0150                          ;*Macro unroll: mCODE	2,'OR', ORR
0150                          ALIGN   2   
0150                ORR:         
0150                VVCODE:   .SET   $   
0150                VVLEN:    .SET   (2 & 01FH) / CELLL   
1FE0                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FE0                VVNAME:   .SET   $   
1FE0   50 01 EC 1F            DW   vvCODE,vvLINK   
1FE4                VVLINK:   .SET   $   
1FE4   02 4F 52               DB   2,"OR"   
0150                          .ORG   vvCODE   
0150   E1                     POP   HL   
0151   78                     LD   A,B   
0152   B4                     OR   H   
0153   47                     LD   B,A   
0154   79                     LD   A,C   
0155   B5                     OR   L   
0156   4F                     LD   C,A   
0157                          ;*Macro unroll: 	mNEXT
0157   EB                     EX   DE,HL   
0158                          ;*Macro unroll:  mNEXTHL                         ; 34t
0158   FD E9                  JP   (IY)   ; 34t
015A                             ;   XOR         ( w w -- w )
015A                             ;               Bitwise exclusive
015A                          ;*Macro unroll: mCODE	3, 'XOR', XORR
015A                          ALIGN   2   
015A                XORR:        
015A                VVCODE:   .SET   $   
015A                VVLEN:    .SET   (3 & 01FH) / CELLL   
1FD8                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FD8                VVNAME:   .SET   $   
1FD8   5A 01 E4 1F            DW   vvCODE,vvLINK   
1FDC                VVLINK:   .SET   $   
1FDC   03 58 4F 52            DB   3,"XOR"   
015A                          .ORG   vvCODE   
015A   E1                     POP   HL   
015B   78                     LD   A,B   
015C   AC                     XOR   H   
015D   47                     LD   B,A   
015E   79                     LD   A,C   
015F   AD                     XOR   L   
0160   4F                     LD   C,A   
0161                          ;*Macro unroll: 	mNEXT
0161   EB                     EX   DE,HL   
0162                          ;*Macro unroll:  mNEXTHL                         ; 34t
0162   FD E9                  JP   (IY)   ; 34t
0164                             ;   +           ( w w -- sum )
0164                             ;               Add top two items.
0164                          ;*Macro unroll: mCOLON	1,'+', PLUS
0164                          ;*Macro unroll:  mCODE 1, "+", PLUS
0164                          ALIGN   2   
0164                PLUS:        
0164                VVCODE:   .SET   $   
0164                VVLEN:    .SET   (1 & 01FH) / CELLL   
1FD2                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FD2                VVNAME:   .SET   $   
1FD2   64 01 DC 1F            DW   vvCODE,vvLINK   
1FD6                VVLINK:   .SET   $   
1FD6   01 2B                  DB   1,"+"   
0164                          .ORG   vvCODE   
0164   00                     NOP      
0165   CD 56 06               CALL   doLIST   
0168   68 02 4C 10 8C 06      DW   UMPlus,DROP,EXIT   
016E                             ;   D+          ( d d -- d )
016E                             ;               Double addition, as an example using UM+.
016E                          ;*Macro unroll: mCOLON	2,'D+',DPlus
016E                          ;*Macro unroll:  mCODE 2, "D+", DPlus
016E                          ALIGN   2   
016E                DPLUS:       
016E                VVCODE:   .SET   $   
016E                VVLEN:    .SET   (2 & 01FH) / CELLL   
1FCA                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FCA                VVNAME:   .SET   $   
1FCA   6E 01 D6 1F            DW   vvCODE,vvLINK   
1FCE                VVLINK:   .SET   $   
1FCE   02 44 2B               DB   2,"D+"   
016E                          .ORG   vvCODE   
016E   00                     NOP      
016F   CD 56 06               CALL   doLIST   
0172   2C 10 50 10 2C 10 68 02 DW   ToR,SWAP,ToR,UMPlus   
017A   3A 10 3A 10 64 01 64 01 8C 06 DW   RFrom,RFrom,Plus,Plus,EXIT   
0184                             ;   NOT         ( w -- w )
0184                             ;               One's complement of tos.
0184                          ;*Macro unroll: mCOLON  3, 'NOT', INVER
0184                          ;*Macro unroll:  mCODE 3, "NOT", INVER
0184                          ALIGN   2   
0184                INVER:       
0184                VVCODE:   .SET   $   
0184                VVLEN:    .SET   (3 & 01FH) / CELLL   
1FC2                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FC2                VVNAME:   .SET   $   
1FC2   84 01 CE 1F            DW   vvCODE,vvLINK   
1FC6                VVLINK:   .SET   $   
1FC6   03 4E 4F 54            DB   3,"NOT"   
0184                          .ORG   vvCODE   
0184   00                     NOP      
0185   CD 56 06               CALL   doLIST   
0188   64 06 FF FF 5A 01 8C 06 DW   DoLIT,-1,XORR,EXIT   
0190                             ;   NEGAT      ( n -- -n )
0190                             ;               Two's complement of tos.
0190                          ;*Macro unroll: mCOLON	6,'NEGATE',NEGAT
0190                          ;*Macro unroll:  mCODE 6, "NEGATE", NEGAT
0190                          ALIGN   2   
0190                NEGAT:       
0190                VVCODE:   .SET   $   
0190                VVLEN:    .SET   (6 & 01FH) / CELLL   
1FB6                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FB6                VVNAME:   .SET   $   
1FB6   90 01 C6 1F            DW   vvCODE,vvLINK   
1FBA                VVLINK:   .SET   $   
1FBA   06 4E 45 47 41 54 45   DB   6,"NEGATE"   
0190                          .ORG   vvCODE   
0190   00                     NOP      
0191   CD 56 06               CALL   doLIST   
0194   84 01 9A 01 8C 06      DW   INVER,OnePlus,EXIT   
019A                             ;   1+		( n1|u1 -- n2|u2 )		
019A                             ;		Increase top of the stack item by 1.
019A                          ;*Macro unroll: mCOLON	2,'1+',OnePlus
019A                          ;*Macro unroll:  mCODE 2, "1+", OnePlus
019A                          ALIGN   2   
019A                ONEPLUS:      
019A                VVCODE:   .SET   $   
019A                VVLEN:    .SET   (2 & 01FH) / CELLL   
1FAE                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FAE                VVNAME:   .SET   $   
1FAE   9A 01 BA 1F            DW   vvCODE,vvLINK   
1FB2                VVLINK:   .SET   $   
1FB2   02 31 2B               DB   2,"1+"   
019A                          .ORG   vvCODE   
019A   00                     NOP      
019B   CD 56 06               CALL   doLIST   
019E   64 06 01 00 64 01 8C 06 DW   DoLIT,1,Plus,EXIT   
01A6                             ;   DNEGATE     ( d -- -d )
01A6                             ;               Two's complement of top double.
01A6                          ;*Macro unroll: mCOLON	7,'DNEGATE',DNEGATE
01A6                          ;*Macro unroll:  mCODE 7, "DNEGATE", DNEGATE
01A6                          ALIGN   2   
01A6                DNEGATE:      
01A6                VVCODE:   .SET   $   
01A6                VVLEN:    .SET   (7 & 01FH) / CELLL   
1FA2                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FA2                VVNAME:   .SET   $   
1FA2   A6 01 B2 1F            DW   vvCODE,vvLINK   
1FA6                VVLINK:   .SET   $   
1FA6   07 44 4E 45 47 41 54 45 DB   7,"DNEGATE"   
01A6                          .ORG   vvCODE   
01A6   00                     NOP      
01A7   CD 56 06               CALL   doLIST   
01AA   84 01 2C 10 84 01      DW   INVER,ToR,INVER   
01B0   64 06 01 00 68 02      DW   DoLIT,1,UMPlus   
01B6   3A 10 64 01 8C 06      DW   RFrom,Plus,EXIT   
01BC                             ;   -           ( n1 n2 -- n1-n2 )
01BC                             ;               Subtraction.
01BC                          ;*Macro unroll: mCOLON	1, '-', SUBB
01BC                          ;*Macro unroll:  mCODE 1, "-", SUBB
01BC                          ALIGN   2   
01BC                SUBB:        
01BC                VVCODE:   .SET   $   
01BC                VVLEN:    .SET   (1 & 01FH) / CELLL   
1F9C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F9C                VVNAME:   .SET   $   
1F9C   BC 01 A6 1F            DW   vvCODE,vvLINK   
1FA0                VVLINK:   .SET   $   
1FA0   01 2D                  DB   1,"-"   
01BC                          .ORG   vvCODE   
01BC   00                     NOP      
01BD   CD 56 06               CALL   doLIST   
01C0   90 01 64 01 8C 06      DW   NEGAT,Plus,EXIT   
01C6                             ;   ABS         ( n -- n )
01C6                             ;               Return the absolute value of n.
01C6                          ;*Macro unroll: mCOLON	3,'ABS',ABSS
01C6                          ;*Macro unroll:  mCODE 3, "ABS", ABSS
01C6                          ALIGN   2   
01C6                ABSS:        
01C6                VVCODE:   .SET   $   
01C6                VVLEN:    .SET   (3 & 01FH) / CELLL   
1F94                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F94                VVNAME:   .SET   $   
1F94   C6 01 A0 1F            DW   vvCODE,vvLINK   
1F98                VVLINK:   .SET   $   
1F98   03 41 42 53            DB   3,"ABS"   
01C6                          .ORG   vvCODE   
01C6   00                     NOP      
01C7   CD 56 06               CALL   doLIST   
01CA   48 10 3E 01 34 0E D4 01 DW   DUPP,ZLESS,QBRAN,ABS1   
01D2   90 01                  DW   NEGAT   
01D4                ABS1:        
01D4   8C 06                  DW   EXIT   
01D6                             ;   =           ( w w -- t )
01D6                             ;               Return true if top two are equal.
01D6                          ;*Macro unroll: mCOLON	1, '=', EQUAL
01D6                          ;*Macro unroll:  mCODE 1, "=", EQUAL
01D6                          ALIGN   2   
01D6                EQUAL:       
01D6                VVCODE:   .SET   $   
01D6                VVLEN:    .SET   (1 & 01FH) / CELLL   
1F8E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F8E                VVNAME:   .SET   $   
1F8E   D6 01 98 1F            DW   vvCODE,vvLINK   
1F92                VVLINK:   .SET   $   
1F92   01 3D                  DB   1,"="   
01D6                          .ORG   vvCODE   
01D6   00                     NOP      
01D7   CD 56 06               CALL   doLIST   
01DA   5A 01 E0 01 8C 06      DW   XORR,ZeroEquals,EXIT   
01E0                             ;   0=		( x -- flag )			\ CORE
01E0                             ;		Return true if x is zero.
01E0                          ;*Macro unroll: mCODE	2,'0=',ZeroEquals,_FLINK
01E0                          ALIGN   2   
01E0                ZEROEQUALS:      
01E0                VVCODE:   .SET   $   
01E0                VVLEN:    .SET   (2 & 01FH) / CELLL   
1F86                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F86                VVNAME:   .SET   $   
1F86   E0 01 92 1F            DW   vvCODE,vvLINK   
1F8A                VVLINK:   .SET   $   
1F8A   02 30 3D               DB   2,"0="   
01E0                          .ORG   vvCODE   
01E0   78                     LD   A,B   
01E1   B1                     OR   C   ; result=0 if bc was 0
01E2   D6 01                  SUB   1   ; cy set   if bc was 0 ;;; ???? TODO: replace with DEC A
01E4   9F                     SBC   A,A   ; propagate cy through A
01E5   47                     LD   B,A   ; put 0000 or FFFF in TOS
01E6   4F                     LD   C,A   
01E7                          ;*Macro unroll: 	mNEXT
01E7   EB                     EX   DE,HL   
01E8                          ;*Macro unroll:  mNEXTHL                         ; 34t
01E8   FD E9                  JP   (IY)   ; 34t
01EA                             ;   U<          ( u u -- t )
01EA                             ;               Unsigned compare of top two items.
01EA                          ;*Macro unroll: mCOLON	2,'U<',ULess
01EA                          ;*Macro unroll:  mCODE 2, "U<", ULess
01EA                          ALIGN   2   
01EA                ULESS:       
01EA                VVCODE:   .SET   $   
01EA                VVLEN:    .SET   (2 & 01FH) / CELLL   
1F7E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F7E                VVNAME:   .SET   $   
1F7E   EA 01 8A 1F            DW   vvCODE,vvLINK   
1F82                VVLINK:   .SET   $   
1F82   02 55 3C               DB   2,"U<"   
01EA                          .ORG   vvCODE   
01EA   00                     NOP      
01EB   CD 56 06               CALL   doLIST   
01EE   86 10 5A 01 3E 01      DW   DDUP,XORR,ZLESS   
01F4   34 0E FE 01            DW   QBRAN,ULES1   
01F8   04 02 3E 01 8C 06      DW   NIP,ZLESS,EXIT   
01FE                ULES1:       
01FE   BC 01 3E 01 8C 06      DW   SUBB,ZLESS,EXIT   
0204                             ;   NIP 	( n1 n2 -- n2 ) 		\ CORE EXT
0204                             ;		Discard the second stack item.
0204                          ;*Macro unroll: mCOLON	3,'NIP',NIP
0204                          ;*Macro unroll:  mCODE 3, "NIP", NIP
0204                          ALIGN   2   
0204                NIP:         
0204                VVCODE:   .SET   $   
0204                VVLEN:    .SET   (3 & 01FH) / CELLL   
1F76                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F76                VVNAME:   .SET   $   
1F76   04 02 82 1F            DW   vvCODE,vvLINK   
1F7A                VVLINK:   .SET   $   
1F7A   03 4E 49 50            DB   3,"NIP"   
0204                          .ORG   vvCODE   
0204   00                     NOP      
0205   CD 56 06               CALL   doLIST   
0208   50 10 4C 10 8C 06      DW   SWAP,DROP,EXIT   
020E                             ;   <           ( n1 n2 -- t )
020E                             ;               is less than
020E                          ;*Macro unroll: mCOLON	1,'<',LESS
020E                          ;*Macro unroll:  mCODE 1, "<", LESS
020E                          ALIGN   2   
020E                LESS:        
020E                VVCODE:   .SET   $   
020E                VVLEN:    .SET   (1 & 01FH) / CELLL   
1F70                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F70                VVNAME:   .SET   $   
1F70   0E 02 7A 1F            DW   vvCODE,vvLINK   
1F74                VVLINK:   .SET   $   
1F74   01 3C                  DB   1,"<"   
020E                          .ORG   vvCODE   
020E   00                     NOP      
020F   CD 56 06               CALL   doLIST   
0212   86 10 5A 01 3E 01 34 0E 22 02 DW   DDUP,XORR,ZLESS,QBRAN,LESS1   
021C   4C 10 3E 01 8C 06      DW   DROP,ZLESS,EXIT   
0222                LESS1:       
0222   BC 01 3E 01 8C 06      DW   SUBB,ZLESS,EXIT   
0228                             ;   >           ( n1 n2 -- t )
0228                             ;               is greater than
0228                          ;*Macro unroll: mCOLON	1,'>',GreaterThan
0228                          ;*Macro unroll:  mCODE 1, ">", GreaterThan
0228                          ALIGN   2   
0228                GREATERTHAN:      
0228                VVCODE:   .SET   $   
0228                VVLEN:    .SET   (1 & 01FH) / CELLL   
1F6A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F6A                VVNAME:   .SET   $   
1F6A   28 02 74 1F            DW   vvCODE,vvLINK   
1F6E                VVLINK:   .SET   $   
1F6E   01 3E                  DB   1,">"   
0228                          .ORG   vvCODE   
0228   00                     NOP      
0229   CD 56 06               CALL   doLIST   
022C   50 10 0E 02 8C 06      DW   SWAP,LESS,EXIT   
0232                             ;   MAX         ( n n -- n )
0232                             ;               Return the greater of two top stack items.
0232                          ;*Macro unroll: mCOLON	3,'MAX',MAX
0232                          ;*Macro unroll:  mCODE 3, "MAX", MAX
0232                          ALIGN   2   
0232                MAX:         
0232                VVCODE:   .SET   $   
0232                VVLEN:    .SET   (3 & 01FH) / CELLL   
1F62                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F62                VVNAME:   .SET   $   
1F62   32 02 6E 1F            DW   vvCODE,vvLINK   
1F66                VVLINK:   .SET   $   
1F66   03 4D 41 58            DB   3,"MAX"   
0232                          .ORG   vvCODE   
0232   00                     NOP      
0233   CD 56 06               CALL   doLIST   
0236   86 10 0E 02 34 0E 40 02 DW   DDUP,LESS,QBRAN,MAX1   
023E   50 10                  DW   SWAP   
0240                MAX1:        
0240   4C 10 8C 06            DW   DROP,EXIT   
0244                             ;   MIN         ( n n -- n )
0244                             ;               Return the smaller of top two stack items.
0244                          ;*Macro unroll: mCOLON	3,'MIN',MIN
0244                          ;*Macro unroll:  mCODE 3, "MIN", MIN
0244                          ALIGN   2   
0244                MIN:         
0244                VVCODE:   .SET   $   
0244                VVLEN:    .SET   (3 & 01FH) / CELLL   
1F5A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F5A                VVNAME:   .SET   $   
1F5A   44 02 66 1F            DW   vvCODE,vvLINK   
1F5E                VVLINK:   .SET   $   
1F5E   03 4D 49 4E            DB   3,"MIN"   
0244                          .ORG   vvCODE   
0244   00                     NOP      
0245   CD 56 06               CALL   doLIST   
0248   86 10 28 02 34 0E 52 02 DW   DDUP,GreaterThan,QBRAN,MIN1   
0250   50 10                  DW   SWAP   
0252                MIN1:        
0252   4C 10 8C 06            DW   DROP,EXIT   
0256                             ;   WITHIN      ( u ul uh -- t )
0256                             ;               Return true if u is within the range of ul and uh.
0256                          ;*Macro unroll: mCOLON	6,'WITHIN',WITHI
0256                          ;*Macro unroll:  mCODE 6, "WITHIN", WITHI
0256                          ALIGN   2   
0256                WITHI:       
0256                VVCODE:   .SET   $   
0256                VVLEN:    .SET   (6 & 01FH) / CELLL   
1F4E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F4E                VVNAME:   .SET   $   
1F4E   56 02 5E 1F            DW   vvCODE,vvLINK   
1F52                VVLINK:   .SET   $   
1F52   06 57 49 54 48 49 4E   DB   6,"WITHIN"   
0256                          .ORG   vvCODE   
0256   00                     NOP      
0257   CD 56 06               CALL   doLIST   
025A   58 10 BC 01 2C 10      DW   OVER,SUBB,ToR   ;ul <= u < uh
0260   BC 01 3A 10 EA 01 8C 06 DW   SUBB,RFrom,ULess,EXIT   
0268                             ;   UM+         ( w w -- w cy )
0268                             ;               Add two numbers, return the sum and carry flag.
0268                          ;*Macro unroll: mCODE	3,'um+',UMPlus
0268                          ALIGN   2   
0268                UMPLUS:      
0268                VVCODE:   .SET   $   
0268                VVLEN:    .SET   (3 & 01FH) / CELLL   
1F46                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F46                VVNAME:   .SET   $   
1F46   68 02 52 1F            DW   vvCODE,vvLINK   
1F4A                VVLINK:   .SET   $   
1F4A   03 75 6D 2B            DB   3,"um+"   
0268                          .ORG   vvCODE   
0268   E1                     POP   HL   ;10t
0269   09                     ADD   HL,BC   ;11t
026A   E5                     PUSH   HL   ;11t
026B   01 00 00               LD   BC,0   ;10t
026E   30 01                  JR   NC,UMP1   ;12/7t
0270                UMP2:        
0270   03                     INC   BC   ; 6t
0271                UMP1:        
0271                          ;*Macro unroll:  mNEXT
0271   EB                     EX   DE,HL   
0272                          ;*Macro unroll:  mNEXTHL                         ; 34t
0272   FD E9                  JP   (IY)   ; 34t
0274                             ; UM/MOD      ( udl udh u -- ur uq )
0274                             ; Unsigned divide of a double by a single. Return mod and quotient.
0274                             ; Note: Less range than eForth because most significant word discarded TODO: fix
0274                          ;*Macro unroll: mCOLON  6,'UM/MOD',UMMOD
0274                          ;*Macro unroll:  mCODE 6, "UM/MOD", UMMOD
0274                          ALIGN   2   
0274                UMMOD:       
0274                VVCODE:   .SET   $   
0274                VVLEN:    .SET   (6 & 01FH) / CELLL   
1F3A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F3A                VVNAME:   .SET   $   
1F3A   74 02 4A 1F            DW   vvCODE,vvLINK   
1F3E                VVLINK:   .SET   $   
1F3E   06 55 4D 2F 4D 4F 44   DB   6,"UM/MOD"   
0274                          .ORG   vvCODE   
0274   00                     NOP      
0275   CD 56 06               CALL   doLIST   
0278   04 02 7E 02 8C 06      DW   NIP,UMSlashMOD2,EXIT   
027E                             ; UM/MOD2	( ud u1 -- u2 u3 )		
027E                             ; Unsigned division of a double-cell number ud by a single-cell
027E                             ; number u1. Return remainder u2 and quotient u3.
027E                             ; Note: Less range than eForth TODO: fix
027E                          ;*Macro unroll: mCODE	6,'UM/MOD2',UMSlashMOD2
027E                          ALIGN   2   
027E                UMSLASHMOD2:      
027E                VVCODE:   .SET   $   
027E                VVLEN:    .SET   (6 & 01FH) / CELLL   
1F2E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F2E                VVNAME:   .SET   $   
1F2E   7E 02 3E 1F            DW   vvCODE,vvLINK   
1F32                VVLINK:   .SET   $   
1F32   06 55 4D 2F 4D 4F 44 32 DB   6,"UM/MOD2"   
027E                          .ORG   vvCODE   
027E   78                     LD   A,B   
027F   B1                     OR   C   
0280   28 25                  JR   Z,UMMOD2   ;?zero divisor
0282                UMMOD11:      
0282   C5                     PUSH   BC   
0283   D9                     EXX      
0284   C1                     POP   BC   
0285   E1                     POP   HL   
0286   D1                     POP   DE   
0287   7D                     LD   A,L   
0288   91                     SUB   C   
0289   7C                     LD   A,H   
028A   98                     SBC   A,B   
028B   30 20                  JR   NC,UMMOD1   ;?too big
028D                UMMOD12:      
028D   7C                     LD   A,H   
028E   65                     LD   H,L   
028F   6A                     LD   L,D   
0290   16 08                  LD   D,8   
0292   D5                     PUSH   DE   
0293   CD C1 02               CALL   UMMOD3   
0296   D1                     POP   DE   
0297   E5                     PUSH   HL   
0298   6B                     LD   L,E   
0299   CD C1 02               CALL   UMMOD3   
029C   57                     LD   D,A   
029D   5C                     LD   E,H   
029E   C1                     POP   BC   
029F   61                     LD   H,C   
02A0   D5                     PUSH   DE   
02A1   E5                     PUSH   HL   
02A2   D9                     EXX      
02A3   C1                     POP   BC   
02A4                          ;*Macro unroll: 	mNEXT
02A4   EB                     EX   DE,HL   
02A5                          ;*Macro unroll:  mNEXTHL                         ; 34t
02A5   FD E9                  JP   (IY)   ; 34t
02A7                UMMOD2:      
02A7   01 07 10               LD   BC,ERR_DIVZERO   ; divide by 0
02AA   C3 52 0E               JP   THROWX   
02AD                UMMOD1:      
02AD   01 18 10               LD   BC,ERR_OUTOFRANGE   ; result out of range
02B0   C3 52 0E               JP   THROWX   
02B3                UMMOD4:      
02B3   5F                     LD   E,A   
02B4   7C                     LD   A,H   
02B5   91                     SUB   C   
02B6   67                     LD   H,A   
02B7   7B                     LD   A,E   
02B8   98                     SBC   A,B   
02B9   30 10                  JR   NC,UMMOD5   
02BB                UMMOD13:      
02BB   7C                     LD   A,H   
02BC   81                     ADD   A,C   
02BD   67                     LD   H,A   
02BE   7B                     LD   A,E   
02BF   15                     DEC   D   
02C0   C8                     RET   Z   
02C1                UMMOD3:      
02C1   29                     ADD   HL,HL   
02C2   17                     RLA      
02C3   30 EE                  JR   NC,UMMOD4   
02C5                UMMOD14:      
02C5   5F                     LD   E,A   
02C6   7C                     LD   A,H   
02C7   91                     SUB   C   
02C8   67                     LD   H,A   
02C9   7B                     LD   A,E   
02CA   98                     SBC   A,B   
02CB                UMMOD5:      
02CB   2C                     INC   L   
02CC   15                     DEC   D   
02CD   20 F2                  JR   NZ,UMMOD3   
02CF                UMMOD15:      
02CF   C9                     RET      
02D0                             ;   FM/MOD	( d n1 -- n2 n3 )		\ CORE
02D0                             ;		Signed floored divide of double by single. Return mod n2
02D0                             ;		and quotient n3.
02D0                             ; TODO: this is usually called M/MOD in eForth
02D0                          ;*Macro unroll: mCOLON	6,'FM/MOD',FMSlashMOD
02D0                          ;*Macro unroll:  mCODE 6, "FM/MOD", FMSlashMOD
02D0                          ALIGN   2   
02D0                FMSLASHMOD:      
02D0                VVCODE:   .SET   $   
02D0                VVLEN:    .SET   (6 & 01FH) / CELLL   
1F22                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F22                VVNAME:   .SET   $   
1F22   D0 02 32 1F            DW   vvCODE,vvLINK   
1F26                VVLINK:   .SET   $   
1F26   06 46 4D 2F 4D 4F 44   DB   6,"FM/MOD"   
02D0                          .ORG   vvCODE   
02D0   00                     NOP      
02D1   CD 56 06               CALL   doLIST   
02D4   48 10 2C 10 86 10 5A 01 2C 10 2C 10 48 10 3E 01 DW   DUPP,ToR,DDUP,XORR,ToR,ToR,DUPP,ZLESS   
02E4   34 0E EA 02            DW   QBRAN,FMMOD1   
02E8   A6 01                  DW   DNEGATE   
02EA                FMMOD1:      
02EA   7C 0E C6 01 7E 02      DW   rat,ABSS,UMSlashMOD2   
02F0   3A 10 3E 01 34 0E FE 02 DW   RFrom,ZLESS,QBRAN,FMMOD2   
02F8   50 10 90 01 50 10      DW   SWAP,NEGAT,SWAP   
02FE                FMMOD2:      
02FE   3A 10 3E 01 34 0E 30 03 DW   RFrom,ZLESS,QBRAN,FMMOD3   
0306   90 01 58 10 34 0E 18 03 DW   NEGAT,OVER,QBRAN,FMMOD4   
030E   7C 0E 6E 10 BC 01 50 10 42 03 DW   rat,ROT,SUBB,SWAP,OneSUBB   
0318                FMMOD4:      
0318   3A 10 4C 10            DW   RFrom,DROP   
031C   64 06 00 00 58 10 0E 02 34 0E 2E 03 DW   DoLIT,0,OVER,LESS,QBRAN,FMMOD6   
0328   64 06 18 10 52 0E      DW   DoLIT,ERR_OUTOFRANGE,THROWX   
032E                FMMOD6:      
032E   8C 06                  DW   EXIT   
0330                FMMOD3:      
0330   3A 10 4C 10 48 10 3E 01 34 0E 2E 03 DW   RFrom,DROP,DUPP,ZLESS,QBRAN,FMMOD6   
033C   64 06 18 10 52 0E      DW   DoLIT,ERR_OUTOFRANGE,THROWX   
0342                             ;   1-		( n1|u1 -- n2|u2 )		\ COR
0342                             ;		Decrease top of the stack item by 1.
0342                          ;*Macro unroll: mCOLON	2,'1-',OneSUBB,_FLINK
0342                          ;*Macro unroll:  mCODE 2, "1-", OneSUBB
0342                          ALIGN   2   
0342                ONESUBB:      
0342                VVCODE:   .SET   $   
0342                VVLEN:    .SET   (2 & 01FH) / CELLL   
1F1A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F1A                VVNAME:   .SET   $   
1F1A   42 03 26 1F            DW   vvCODE,vvLINK   
1F1E                VVLINK:   .SET   $   
1F1E   02 31 2D               DB   2,"1-"   
0342                          .ORG   vvCODE   
0342   00                     NOP      
0343   CD 56 06               CALL   doLIST   
0346   64 06 FF FF 64 01 8C 06 DW   DoLIT,-1,Plus,EXIT   
034E                             ;   S>D 	( n -- d )			\ CORE
034E                             ;		Convert a single-cell number n to double-cell number.
034E                          ;*Macro unroll: mCOLON	3,'S>D',SToD,_FLINK
034E                          ;*Macro unroll:  mCODE 3, "S>D", SToD
034E                          ALIGN   2   
034E                STOD:        
034E                VVCODE:   .SET   $   
034E                VVLEN:    .SET   (3 & 01FH) / CELLL   
1F12                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F12                VVNAME:   .SET   $   
1F12   4E 03 1E 1F            DW   vvCODE,vvLINK   
1F16                VVLINK:   .SET   $   
1F16   03 53 3E 44            DB   3,"S>D"   
034E                          .ORG   vvCODE   
034E   00                     NOP      
034F   CD 56 06               CALL   doLIST   
0352   48 10 3E 01 8C 06      DW   DUPP,ZLESS,EXIT   
0358                             ;   /MOD        ( n n -- r q )
0358                             ;               Signed divide. Return mod and quotient.
0358                          ;*Macro unroll: mCOLON	4,'/MOD',SlashMOD
0358                          ;*Macro unroll:  mCODE 4, "/MOD", SlashMOD
0358                          ALIGN   2   
0358                SLASHMOD:      
0358                VVCODE:   .SET   $   
0358                VVLEN:    .SET   (4 & 01FH) / CELLL   
1F08                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F08                VVNAME:   .SET   $   
1F08   58 03 16 1F            DW   vvCODE,vvLINK   
1F0C                VVLINK:   .SET   $   
1F0C   04 2F 4D 4F 44         DB   4,"/MOD"   
0358                          .ORG   vvCODE   
0358   00                     NOP      
0359   CD 56 06               CALL   doLIST   
035C   2C 10 4E 03 3A 10 D0 02 8C 06 DW   ToR,SToD,RFrom,FMSlashMOD,EXIT   
0366                             ;   MOD         ( n n -- r )
0366                             ;               Signed divide. Return mod only.
0366                          ;*Macro unroll: mCOLON	3,'MOD',MODD
0366                          ;*Macro unroll:  mCODE 3, "MOD", MODD
0366                          ALIGN   2   
0366                MODD:        
0366                VVCODE:   .SET   $   
0366                VVLEN:    .SET   (3 & 01FH) / CELLL   
1F00                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F00                VVNAME:   .SET   $   
1F00   66 03 0C 1F            DW   vvCODE,vvLINK   
1F04                VVLINK:   .SET   $   
1F04   03 4D 4F 44            DB   3,"MOD"   
0366                          .ORG   vvCODE   
0366   00                     NOP      
0367   CD 56 06               CALL   doLIST   
036A   58 03 4C 10 8C 06      DW   SlashMOD,DROP,EXIT   
0370                             ; 
0370                             ;   /           ( n n -- q )
0370                             ;               Signed divide. Return quotient only.
0370                          ;*Macro unroll: mCOLON	1,'/',Slash
0370                          ;*Macro unroll:  mCODE 1, "/", Slash
0370                          ALIGN   2   
0370                SLASH:       
0370                VVCODE:   .SET   $   
0370                VVLEN:    .SET   (1 & 01FH) / CELLL   
1EFA                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1EFA                VVNAME:   .SET   $   
1EFA   70 03 04 1F            DW   vvCODE,vvLINK   
1EFE                VVLINK:   .SET   $   
1EFE   01 2F                  DB   1,"/"   
0370                          .ORG   vvCODE   
0370   00                     NOP      
0371   CD 56 06               CALL   doLIST   
0374   58 03 04 02 8C 06      DW   SlashMOD,NIP,EXIT   
037A                             ; Multiply
037A                             ;   UM*         ( u u -- ud )
037A                             ;               Unsigned multiply. Return double product.
037A                          ;*Macro unroll: mCODE	3,'UM*',UMStar,_FLINK
037A                          ALIGN   2   
037A                UMSTAR:      
037A                VVCODE:   .SET   $   
037A                VVLEN:    .SET   (3 & 01FH) / CELLL   
1EF2                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1EF2                VVNAME:   .SET   $   
1EF2   7A 03 FE 1E            DW   vvCODE,vvLINK   
1EF6                VVLINK:   .SET   $   
1EF6   03 55 4D 2A            DB   3,"UM*"   
037A                          .ORG   vvCODE   
037A   EB                     EX   DE,HL   
037B   E3                     EX   (SP),HL   
037C   EB                     EX   DE,HL   
037D   21 00 00               LD   HL,0   
0380   3E 10                  LD   A,010h   
0382                UMSTAR1:      
0382   29                     ADD   HL,HL   
0383   EB                     EX   DE,HL   
0384   ED 6A                  ADC   HL,HL   
0386   EB                     EX   DE,HL   
0387   30 04                  JR   NC,UMSTAR3   
0389                UMSTAR2:      
0389   09                     ADD   HL,BC   
038A   30 01                  JR   NC,UMSTAR3   
038C                UMSTAR5:      
038C   13                     INC   DE   
038D                UMSTAR3:      
038D   3D                     DEC   A   
038E   20 F2                  JR   NZ,UMSTAR1   
0390                UMSTAR4:      
0390   42                     LD   B,D   
0391   4B                     LD   C,E   
0392   E3                     EX   (SP),HL   
0393                          ;*Macro unroll: 	mNEXTHL
0393   FD E9                  JP   (IY)   
0395                             ;   *           ( n n -- n )
0395                             ;               Signed multiply. Return single product.
0395                          ;*Macro unroll: mCOLON	1,'*',Star
0395                          ;*Macro unroll:  mCODE 1, "*", Star
0395                          ALIGN   2   
0396                STAR:        
0396                VVCODE:   .SET   $   
0396                VVLEN:    .SET   (1 & 01FH) / CELLL   
1EEC                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1EEC                VVNAME:   .SET   $   
1EEC   96 03 F6 1E            DW   vvCODE,vvLINK   
1EF0                VVLINK:   .SET   $   
1EF0   01 2A                  DB   1,"*"   
0396                          .ORG   vvCODE   
0396   00                     NOP      
0397   CD 56 06               CALL   doLIST   
039A   7A 03 4C 10 8C 06      DW   UMStar,DROP,EXIT   
03A0                             ;   M*          ( n n -- d )
03A0                             ;               Signed multiply. Return double product.
03A0                          ;*Macro unroll: mCOLON	2,'M*',MStar,
03A0                          ;*Macro unroll:  mCODE 2, "M*", MStar
03A0                          ALIGN   2   
03A0                MSTAR:       
03A0                VVCODE:   .SET   $   
03A0                VVLEN:    .SET   (2 & 01FH) / CELLL   
1EE4                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1EE4                VVNAME:   .SET   $   
1EE4   A0 03 F0 1E            DW   vvCODE,vvLINK   
1EE8                VVLINK:   .SET   $   
1EE8   02 4D 2A               DB   2,"M*"   
03A0                          .ORG   vvCODE   
03A0   00                     NOP      
03A1   CD 56 06               CALL   doLIST   
03A4   86 10 5A 01 3E 01 2C 10 C6 01 50 10 C6 01 DW   DDUP,XORR,ZLESS,ToR,ABSS,SWAP,ABSS   
03B2   7A 03 3A 10 34 0E BC 03 DW   UMStar,RFrom,QBRAN,MSTAR1   
03BA   A6 01                  DW   DNEGATE   
03BC                MSTAR1:      
03BC   8C 06                  DW   EXIT   
03BE                             ;   */MOD       ( n1 n2 n3 -- r q )
03BE                             ;               Multiply n1 and n2, then divide by n3. Return mod and quotient.
03BE                          ;*Macro unroll: mCOLON	5,'*/MOD',StarSlashMOD
03BE                          ;*Macro unroll:  mCODE 5, "*/MOD", StarSlashMOD
03BE                          ALIGN   2   
03BE                STARSLASHMOD:      
03BE                VVCODE:   .SET   $   
03BE                VVLEN:    .SET   (5 & 01FH) / CELLL   
1EDA                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1EDA                VVNAME:   .SET   $   
1EDA   BE 03 E8 1E            DW   vvCODE,vvLINK   
1EDE                VVLINK:   .SET   $   
1EDE   05 2A 2F 4D 4F 44      DB   5,"*/MOD"   
03BE                          .ORG   vvCODE   
03BE   00                     NOP      
03BF   CD 56 06               CALL   doLIST   
03C2   2C 10 A0 03 3A 10 D0 02 8C 06 DW   ToR,MStar,RFrom,FMSlashMOD,EXIT   
03CC                             ;   */          ( n1 n2 n3 -- q )
03CC                             ;               Multiply n1 by n2, then divide by n3. Return quotient only.
03CC                          ;*Macro unroll: mCOLON	2,'*/',StarSlash
03CC                          ;*Macro unroll:  mCODE 2, "*/", StarSlash
03CC                          ALIGN   2   
03CC                STARSLASH:      
03CC                VVCODE:   .SET   $   
03CC                VVLEN:    .SET   (2 & 01FH) / CELLL   
1ED2                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1ED2                VVNAME:   .SET   $   
1ED2   CC 03 DE 1E            DW   vvCODE,vvLINK   
1ED6                VVLINK:   .SET   $   
1ED6   02 2A 2F               DB   2,"*/"   
03CC                          .ORG   vvCODE   
03CC   00                     NOP      
03CD   CD 56 06               CALL   doLIST   
03D0   BE 03 04 02 8C 06      DW   StarSlashMOD,NIP,EXIT   
03D6                             ;   CELL+       ( a -- a )
03D6                             ;               Add cell size in byte to address.
03D6                          ;*Macro unroll: mCOLON	5,'CELL+',CELLP
03D6                          ;*Macro unroll:  mCODE 5, "CELL+", CELLP
03D6                          ALIGN   2   
03D6                CELLP:       
03D6                VVCODE:   .SET   $   
03D6                VVLEN:    .SET   (5 & 01FH) / CELLL   
1EC8                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1EC8                VVNAME:   .SET   $   
1EC8   D6 03 D6 1E            DW   vvCODE,vvLINK   
1ECC                VVLINK:   .SET   $   
1ECC   05 43 45 4C 4C 2B      DB   5,"CELL+"   
03D6                          .ORG   vvCODE   
03D6   00                     NOP      
03D7   CD 56 06               CALL   doLIST   
03DA   64 06 02 00 64 01 8C 06 DW   DOLIT,CELLL,PLUS,EXIT   
03E2                             ;   CELL-       ( a -- a )
03E2                             ;               Subtract cell size in byte from address.
03E2                          ;*Macro unroll: mCOLON	5,'CELL-',CELLM
03E2                          ;*Macro unroll:  mCODE 5, "CELL-", CELLM
03E2                          ALIGN   2   
03E2                CELLM:       
03E2                VVCODE:   .SET   $   
03E2                VVLEN:    .SET   (5 & 01FH) / CELLL   
1EBE                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1EBE                VVNAME:   .SET   $   
1EBE   E2 03 CC 1E            DW   vvCODE,vvLINK   
1EC2                VVLINK:   .SET   $   
1EC2   05 43 45 4C 4C 2D      DB   5,"CELL-"   
03E2                          .ORG   vvCODE   
03E2   00                     NOP      
03E3   CD 56 06               CALL   doLIST   
03E6   64 06 FE FF 64 01 8C 06 DW   DOLIT,-CELLL,PLUS,EXIT   
03EE                             ;   CELLS       ( n -- n )
03EE                             ;               Multiply tos by cell size in bytes.
03EE                          ;*Macro unroll: mCOLON	5,'CELLS',CELLS
03EE                          ;*Macro unroll:  mCODE 5, "CELLS", CELLS
03EE                          ALIGN   2   
03EE                CELLS:       
03EE                VVCODE:   .SET   $   
03EE                VVLEN:    .SET   (5 & 01FH) / CELLL   
1EB4                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1EB4                VVNAME:   .SET   $   
1EB4   EE 03 C2 1E            DW   vvCODE,vvLINK   
1EB8                VVLINK:   .SET   $   
1EB8   05 43 45 4C 4C 53      DB   5,"CELLS"   
03EE                          .ORG   vvCODE   
03EE   00                     NOP      
03EF   CD 56 06               CALL   doLIST   
03F2   36 01 8C 06            DW   TwoStar,EXIT   
03F6                             ;   CHAR+	( c-addr1 -- c-addr2 )		\ CORE
03F6                             ;		Returns next character-aligned address.
03F6                             ; 
03F6                          ;*Macro unroll: mCOLON	5,'CHAR+',CHARPlus
03F6                          ;*Macro unroll:  mCODE 5, "CHAR+", CHARPlus
03F6                          ALIGN   2   
03F6                CHARPLUS:      
03F6                VVCODE:   .SET   $   
03F6                VVLEN:    .SET   (5 & 01FH) / CELLL   
1EAA                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1EAA                VVNAME:   .SET   $   
1EAA   F6 03 B8 1E            DW   vvCODE,vvLINK   
1EAE                VVLINK:   .SET   $   
1EAE   05 43 48 41 52 2B      DB   5,"CHAR+"   
03F6                          .ORG   vvCODE   
03F6   00                     NOP      
03F7   CD 56 06               CALL   doLIST   
03FA   64 06 01 00 64 01 8C 06 DW   DoLIT,CHARR,Plus,EXIT   
0402                             ;   '           ( -- ca )
0402                             ;               Search context vocabularies for the next word in input stream.
0402                          ;*Macro unroll: mCOLON  1,"'",TICK
0402                          ;*Macro unroll:  mCODE 1, "'", TICK
0402                          ALIGN   2   
0402                TICK:        
0402                VVCODE:   .SET   $   
0402                VVLEN:    .SET   (1 & 01FH) / CELLL   
1EA4                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1EA4                VVNAME:   .SET   $   
1EA4   02 04 AE 1E            DW   vvCODE,vvLINK   
1EA8                VVLINK:   .SET   $   
1EA8   01 27                  DB   1,"'"   
0402                          .ORG   vvCODE   
0402   00                     NOP      
0403   CD 56 06               CALL   doLIST   
0406   D6 09 B8 0A            DW   TOKEN,NAMEQ   ;?defined
040A   34 0E 10 04            DW   QBRAN,TICK1   
040E   8C 06                  DW   EXIT   ;yes, push code address
0410                TICK1:       
0410   F4 0A                  DW   THROW   ;no, error
0412                             ;   ALLOT       ( n -- )
0412                             ;               Allocate n bytes to the code dictionary.
0412                          ;*Macro unroll: mCOLON  5,'ALLOT',ALLOT
0412                          ;*Macro unroll:  mCODE 5, "ALLOT", ALLOT
0412                          ALIGN   2   
0412                ALLOT:       
0412                VVCODE:   .SET   $   
0412                VVLEN:    .SET   (5 & 01FH) / CELLL   
1E9A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1E9A                VVNAME:   .SET   $   
1E9A   12 04 A8 1E            DW   vvCODE,vvLINK   
1E9E                VVLINK:   .SET   $   
1E9E   05 41 4C 4C 4F 54      DB   5,"ALLOT"   
0412                          .ORG   vvCODE   
0412   00                     NOP      
0413   CD 56 06               CALL   doLIST   
0416   68 11 A8 0E 8C 06      DW   CP,PSTOR,EXIT   ;adjust code pointer
041C                             ;   ,           ( w -- )
041C                             ;               Compile an integer into the code dictionary.
041C                          ;*Macro unroll: mCOLON  1,',',COMMA
041C                          ;*Macro unroll:  mCODE 1, ",", COMMA
041C                          ALIGN   2   
041C                COMMA:       
041C                VVCODE:   .SET   $   
041C                VVLEN:    .SET   (1 & 01FH) / CELLL   
1E94                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1E94                VVNAME:   .SET   $   
1E94   1C 04 9E 1E            DW   vvCODE,vvLINK   
1E98                VVLINK:   .SET   $   
1E98   01 2C                  DB   1,","   
041C                          .ORG   vvCODE   
041C   00                     NOP      
041D   CD 56 06               CALL   doLIST   
0420   EC 0E 48 10 D6 03      DW   HERE,DUPP,CELLP   ;cell boundary
0426   68 11 5A 0E 5A 0E 8C 06 DW   CP,STORE,STORE,EXIT   ;adjust code pointer, compile
042E                             ;   [COMPILE]   ( -- ; <string> )
042E                             ;               Compile the next immediate word into code dictionary.
042E                          ;*Macro unroll: mCOLON  IMEDD+9,'[COMPILE]',BCOMP
042E                          ;*Macro unroll:  mCODE IMEDD+9, "[COMPILE]", BCOMP
042E                          ALIGN   2   
042E                BCOMP:       
042E                VVCODE:   .SET   $   
042E                VVLEN:    .SET   (IMEDD+9 & 01FH) / CELLL   
1E46                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1E46                VVNAME:   .SET   $   
1E46   2E 04 98 1E            DW   vvCODE,vvLINK   
1E4A                VVLINK:   .SET   $   
1E4A   49 5B 43 4F 4D 50 49 4C 45 5D DB   IMEDD+9,"[COMPILE]"   
042E                          .ORG   vvCODE   
042E   00                     NOP      
042F   CD 56 06               CALL   doLIST   
0432   02 04 1C 04 8C 06      DW   TICK,COMMA,EXIT   
0438                             ;   COMPILE     ( -- )
0438                             ;               Compile the next address in colon list to code dictionary.
0438                          ;*Macro unroll: mCOLON  COMPO+7,'COMPILE',COMPI
0438                          ;*Macro unroll:  mCODE COMPO+7, "COMPILE", COMPI
0438                          ALIGN   2   
0438                COMPI:       
0438                VVCODE:   .SET   $   
0438                VVLEN:    .SET   (COMPO+7 & 01FH) / CELLL   
1E1A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1E1A                VVNAME:   .SET   $   
1E1A   38 04 4A 1E            DW   vvCODE,vvLINK   
1E1E                VVLINK:   .SET   $   
1E1E   27 43 4F 4D 50 49 4C 45 DB   COMPO+7,"COMPILE"   
0438                          .ORG   vvCODE   
0438   00                     NOP      
0439   CD 56 06               CALL   doLIST   
043C   3A 10 48 10 64 0E 1C 04 DW   RFROM,DUPP,AT,COMMA   ;compile address
0444   D6 03 2C 10 8C 06      DW   CELLP,TOR,EXIT   ;adjust return address
044A                             ;   LITERAL     ( w -- )
044A                             ;               Compile tos to code dictionary as an integer literal.
044A                          ;*Macro unroll: mCOLON  IMEDD+7,'LITERAL',LITER
044A                          ;*Macro unroll:  mCODE IMEDD+7, "LITERAL", LITER
044A                          ALIGN   2   
044A                LITER:       
044A                VVCODE:   .SET   $   
044A                VVLEN:    .SET   (IMEDD+7 & 01FH) / CELLL   
1DCE                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1DCE                VVNAME:   .SET   $   
1DCE   4A 04 1E 1E            DW   vvCODE,vvLINK   
1DD2                VVLINK:   .SET   $   
1DD2   47 4C 49 54 45 52 41 4C DB   IMEDD+7,"LITERAL"   
044A                          .ORG   vvCODE   
044A   00                     NOP      
044B   CD 56 06               CALL   doLIST   
044E   38 04 64 06 1C 04 8C 06 DW   COMPI,DOLIT,COMMA,EXIT   
0456                             ;   $,"         ( -- )
0456                             ;               Compile a literal string up to next " .
0456                          ;*Macro unroll: hCOLON  3,'$,|',STRCQ
0456                          ;*Macro unroll:  hCODE 3, "$,|", STRCQ
0456                          ALIGN   2   
0456                STRCQ:       
0456   00                     NOP      
0457   CD 56 06               CALL   doLIST   
045A   64 06 22 00 F2 09      DW   DOLIT,$22,WORDD   ;move string to code dictionary
0460   DA 0E 64 01 D2 0F      DW   COUNT,PLUS,ALGND   ;calculate aligned end of string
0466   68 11 5A 0E 8C 06      DW   CP,STORE,EXIT   ;adjust the code pointer
046C                             ;   RECURSE     ( -- )
046C                             ;               Make the current word available for compilation.
046C                          ;*Macro unroll: mCOLON  IMEDD+7,'RECURSE',RECUR
046C                          ;*Macro unroll:  mCODE IMEDD+7, "RECURSE", RECUR
046C                          ALIGN   2   
046C                RECUR:       
046C                VVCODE:   .SET   $   
046C                VVLEN:    .SET   (IMEDD+7 & 01FH) / CELLL   
1D82                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1D82                VVNAME:   .SET   $   
1D82   6C 04 D2 1D            DW   vvCODE,vvLINK   
1D86                VVLINK:   .SET   $   
1D86   47 52 45 43 55 52 53 45 DB   IMEDD+7,"RECURSE"   
046C                          .ORG   vvCODE   
046C   00                     NOP      
046D   CD 56 06               CALL   doLIST   
0470   78 11 64 0E FE 09 1C 04 8C 06 DW   LAST,AT,NAMET,COMMA,EXIT   
047A                             ;   ?UNIQUE     ( a -- a )
047A                             ;               Display a warning message if the word already exists.
047A                          ;*Macro unroll: mCOLON  7,'?UNIQUE',UNIQU
047A                          ;*Macro unroll:  mCODE 7, "?UNIQUE", UNIQU
047A                          ALIGN   2   
047A                UNIQU:       
047A                VVCODE:   .SET   $   
047A                VVLEN:    .SET   (7 & 01FH) / CELLL   
1D76                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1D76                VVNAME:   .SET   $   
1D76   7A 04 86 1D            DW   vvCODE,vvLINK   
1D7A                VVLINK:   .SET   $   
1D7A   07 3F 55 4E 49 51 55 45 DB   7,"?UNIQUE"   
047A                          .ORG   vvCODE   
047A   00                     NOP      
047B   CD 56 06               CALL   doLIST   
047E   48 10 B8 0A            DW   DUPP,NAMEQ   ;?name exists
0482   34 0E 96 04            DW   QBRAN,UNIQ1   ;redefinitions are OK
0486                          ;*Macro unroll:  mDSTR   DOTQP,' reDef '         ;but warn the user
0486   B0 0C                  DW   DOTQP   ;but warn the user
0488                VVLEN:    .SET   $   
0488   00 20 72 65 44 65 66 20 DB   0," reDef "   
0490                VVCODE:   .SET   $   
0488                          .ORG   vvLEN   
0488   07                     DB   vvCODE - vvLEN - 1   
0490                          .ORG   vvCODE   
0490   58 10 DA 0E 60 0C      DW   OVER,COUNT,TYPEE   ;just in case its not planned
0496                UNIQ1:       
0496   4C 10 8C 06            DW   DROP,EXIT   
049A                             ;   $,n         ( na -- )
049A                             ;               Build a new dictionary name using the string at na.
049A                          ;*Macro unroll: mCOLON  3,'$,n',SNAME
049A                          ;*Macro unroll:  mCODE 3, "$,n", SNAME
049A                          ALIGN   2   
049A                SNAME:       
049A                VVCODE:   .SET   $   
049A                VVLEN:    .SET   (3 & 01FH) / CELLL   
1D6E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1D6E                VVNAME:   .SET   $   
1D6E   9A 04 7A 1D            DW   vvCODE,vvLINK   
1D72                VVLINK:   .SET   $   
1D72   03 24 2C 6E            DB   3,"$,n"   
049A                          .ORG   vvCODE   
049A   00                     NOP      
049B   CD 56 06               CALL   doLIST   
049E   48 10 74 0E            DW   DUPP,CAT   ;?null input
04A2   34 0E CC 04            DW   QBRAN,PNAM1   
04A6   7A 04                  DW   UNIQU   ;?redefinition
04A8   48 10 78 11 5A 0E      DW   DUPP,LAST,STORE   ;save na for vocabulary link
04AE   EC 0E D2 0F 50 10      DW   HERE,ALGND,SWAP   ;align code address
04B4   E2 03                  DW   CELLM   ;link address
04B6   60 11 64 0E 64 0E 58 10 5A 0E DW   CRRNT,AT,AT,OVER,STORE   
04C0   E2 03 48 10 70 11 5A 0E DW   CELLM,DUPP,NP,STORE   ;adjust name pointer
04C8   5A 0E 8C 06            DW   STORE,EXIT   ;save code pointer
04CC                PNAM1:       
04CC                          ;*Macro unroll:  mDSTR   STRQP,' name'           ;null input
04CC   A8 0C                  DW   STRQP   ;null input
04CE                VVLEN:    .SET   $   
04CE   00 20 6E 61 6D 65      DB   0," name"   
04D4                VVCODE:   .SET   $   
04CE                          .ORG   vvLEN   
04CE   05                     DB   vvCODE - vvLEN - 1   
04D4                          .ORG   vvCODE   
04D4   F4 0A                  DW   THROW   
04D6                             ;   $COMPILE    ( a -- )
04D6                             ;               Compile next word to code dictionary as a token or literal.
04D6                          ;*Macro unroll: hCOLON  8,'$COMPILE',SCOMP
04D6                          ;*Macro unroll:  hCODE 8, "$COMPILE", SCOMP
04D6                          ALIGN   2   
04D6                SCOMP:       
04D6   00                     NOP      
04D7   CD 56 06               CALL   doLIST   
04DA   B8 0A 60 10            DW   NAMEQ,QDUP   ;?defined
04DE   34 0E F6 04            DW   QBRAN,SCOM2   
04E2   64 0E 64 06 40 00 46 01 DW   AT,DOLIT,IMEDD,ANDD   ;?immediate
04EA   34 0E F2 04            DW   QBRAN,SCOM1   
04EE   30 0E 8C 06            DW   EXECU,EXIT   ;its immediate, execute
04F2                SCOM1:       
04F2   1C 04 8C 06            DW   COMMA,EXIT   ;its not immediate, compile
04F6                SCOM2:       
04F6   40 11 10 0F            DW   TNUMB,ATEXE   ;try to convert to number
04FA   34 0E 02 05            DW   QBRAN,SCOM3   
04FE   4A 04 8C 06            DW   LITER,EXIT   ;compile number as integer
0502   F4 0A        SCOM3:    DW   THROW   ;error
0504                             ;   OVERT       ( -- )
0504                             ;               Link a new word into the current vocabulary.
0504                          ;*Macro unroll: hCOLON  5,'OVERT',OVERT
0504                          ;*Macro unroll:  hCODE 5, "OVERT", OVERT
0504                          ALIGN   2   
0504                OVERT:       
0504   00                     NOP      
0505   CD 56 06               CALL   doLIST   
0508   78 11 64 0E 60 11 64 0E 5A 0E 8C 06 DW   LAST,AT,CRRNT,AT,STORE,EXIT   
0514                             ;   ;           ( -- )
0514                             ;               Terminate a colon definition.
0514                          ;*Macro unroll: mCOLON  IMEDD+COMPO+1,';',SEMIS
0514                          ;*Macro unroll:  mCODE IMEDD+COMPO+1, ";", SEMIS
0514                          ALIGN   2   
0514                SEMIS:       
0514                VVCODE:   .SET   $   
0514                VVLEN:    .SET   (IMEDD+COMPO+1 & 01FH) / CELLL   
1D08                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1D08                VVNAME:   .SET   $   
1D08   14 05 72 1D            DW   vvCODE,vvLINK   
1D0C                VVLINK:   .SET   $   
1D0C   61 3B                  DB   IMEDD+COMPO+1,";"   
0514                          .ORG   vvCODE   
0514   00                     NOP      
0515   CD 56 06               CALL   doLIST   
0518   38 04 8C 06 6E 0B 04 05 8C 06 DW   COMPI,EXIT,LBRAC,OVERT,EXIT   
0522                             ;   ]           ( -- )
0522                             ;               Start compiling the words in the input stream.
0522                          ;*Macro unroll: mCOLON  1,']',RBRAC
0522                          ;*Macro unroll:  mCODE 1, "]", RBRAC
0522                          ALIGN   2   
0522                RBRAC:       
0522                VVCODE:   .SET   $   
0522                VVLEN:    .SET   (1 & 01FH) / CELLL   
1D02                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1D02                VVNAME:   .SET   $   
1D02   22 05 0C 1D            DW   vvCODE,vvLINK   
1D06                VVLINK:   .SET   $   
1D06   01 5D                  DB   1,"]"   
0522                          .ORG   vvCODE   
0522   00                     NOP      
0523   CD 56 06               CALL   doLIST   
0526   64 06 D6 04 38 11 5A 0E 8C 06 DW   DOLIT,SCOMP,TEVAL,STORE,EXIT   
0530                             ;   call,       ( ca -- )
0530                             ;               Assemble a call instruction to ca.
0530                          ;*Macro unroll: hCOLON  5,'call,',CALLC
0530                          ;*Macro unroll:  hCODE 5, "call,", CALLC
0530                          ALIGN   2   
0530                CALLC:       
0530   00                     NOP      
0531   CD 56 06               CALL   doLIST   
0534   64 06 00 CD 1C 04      DW   DOLIT,CALLL,COMMA   ;Direct Threaded Code
053A   1C 04 8C 06            DW   COMMA,EXIT   ;DTC 8086 relative call
053E                             ;   :           ( -- ; <string> )
053E                             ;               Start a new colon definition using next word as its name.
053E                          ;*Macro unroll: mCOLON  1,':',COLON
053E                          ;*Macro unroll:  mCODE 1, ":", COLON
053E                          ALIGN   2   
053E                COLON:       
053E                VVCODE:   .SET   $   
053E                VVLEN:    .SET   (1 & 01FH) / CELLL   
1CFC                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1CFC                VVNAME:   .SET   $   
1CFC   3E 05 06 1D            DW   vvCODE,vvLINK   
1D00                VVLINK:   .SET   $   
1D00   01 3A                  DB   1,":"   
053E                          .ORG   vvCODE   
053E   00                     NOP      
053F   CD 56 06               CALL   doLIST   
0542   D6 09 9A 04 64 06 56 06 DW   TOKEN,SNAME,DOLIT,DoLIST   
054A   30 05 22 05 8C 06      DW   CALLC,RBRAC,EXIT   
0550                             ;   IMMEDIATE   ( -- )
0550                             ;               Make the last compiled word an immediate word.
0550                          ;*Macro unroll: mCOLON  9,'IMMEDIATE',IMMED
0550                          ;*Macro unroll:  mCODE 9, "IMMEDIATE", IMMED
0550                          ALIGN   2   
0550                IMMED:       
0550                VVCODE:   .SET   $   
0550                VVLEN:    .SET   (9 & 01FH) / CELLL   
1CEE                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1CEE                VVNAME:   .SET   $   
1CEE   50 05 00 1D            DW   vvCODE,vvLINK   
1CF2                VVLINK:   .SET   $   
1CF2   09 49 4D 4D 45 44 49 41 54 45 DB   9,"IMMEDIATE"   
0550                          .ORG   vvCODE   
0550   00                     NOP      
0551   CD 56 06               CALL   doLIST   
0554   64 06 40 00 78 11 64 0E 64 0E 50 01 DW   DOLIT,IMEDD,LAST,AT,AT,ORR   
0560   78 11 64 0E 5A 0E 8C 06 DW   LAST,AT,STORE,EXIT   
0568                             ;   USER        ( u -- ; <string> )
0568                             ;               Compile a new user variable.
0568                          ;*Macro unroll: mCOLON  4,'USER',USER
0568                          ;*Macro unroll:  mCODE 4, "USER", USER
0568                          ALIGN   2   
0568                USER:        
0568                VVCODE:   .SET   $   
0568                VVLEN:    .SET   (4 & 01FH) / CELLL   
1CE4                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1CE4                VVNAME:   .SET   $   
1CE4   68 05 F2 1C            DW   vvCODE,vvLINK   
1CE8                VVLINK:   .SET   $   
1CE8   04 55 53 45 52         DB   4,"USER"   
0568                          .ORG   vvCODE   
0568   00                     NOP      
0569   CD 56 06               CALL   doLIST   
056C   D6 09 9A 04 04 05      DW   TOKEN,SNAME,OVERT   
0572   64 06 56 06 30 05      DW   DOLIT,DoLIST,CALLC   
0578   38 04 7C 06 1C 04 8C 06 DW   COMPI,DOUSE,COMMA,EXIT   
0580                             ;   CREATE      ( -- ; <string> )
0580                             ;               Compile a new array entry without allocating code space.
0580                          ;*Macro unroll: mCOLON  6,'CREATE',CREAT
0580                          ;*Macro unroll:  mCODE 6, "CREATE", CREAT
0580                          ALIGN   2   
0580                CREAT:       
0580                VVCODE:   .SET   $   
0580                VVLEN:    .SET   (6 & 01FH) / CELLL   
1CD8                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1CD8                VVNAME:   .SET   $   
1CD8   80 05 E8 1C            DW   vvCODE,vvLINK   
1CDC                VVLINK:   .SET   $   
1CDC   06 43 52 45 41 54 45   DB   6,"CREATE"   
0580                          .ORG   vvCODE   
0580   00                     NOP      
0581   CD 56 06               CALL   doLIST   
0584   D6 09 9A 04 04 05      DW   TOKEN,SNAME,OVERT   
058A   64 06 56 06 30 05      DW   DOLIT,DoLIST,CALLC   
0590   38 04 6C 06 8C 06      DW   COMPI,DOVAR,EXIT   
0596                             ;   VARIABLE    ( -- ; <string> )
0596                             ;               Compile a new variable initialized to 0.
0596                          ;*Macro unroll: mCOLON  8,'VARIABLE',VARIA
0596                          ;*Macro unroll:  mCODE 8, "VARIABLE", VARIA
0596                          ALIGN   2   
0596                VARIA:       
0596                VVCODE:   .SET   $   
0596                VVLEN:    .SET   (8 & 01FH) / CELLL   
1CCA                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1CCA                VVNAME:   .SET   $   
1CCA   96 05 DC 1C            DW   vvCODE,vvLINK   
1CCE                VVLINK:   .SET   $   
1CCE   08 56 41 52 49 41 42 4C 45 DB   8,"VARIABLE"   
0596                          .ORG   vvCODE   
0596   00                     NOP      
0597   CD 56 06               CALL   doLIST   
059A   80 05 64 06 00 00 1C 04 8C 06 DW   CREAT,DOLIT,0,COMMA,EXIT   
05A4                             ;   FOR         ( -- a )
05A4                             ;               Start a FOR-NEXT loop structure in a colon definition.
05A4                          ;*Macro unroll: mCOLON  IMEDD+3,'FOR',FOR
05A4                          ;*Macro unroll:  mCODE IMEDD+3, "FOR", FOR
05A4                          ALIGN   2   
05A4                FOR:         
05A4                VVCODE:   .SET   $   
05A4                VVLEN:    .SET   (IMEDD+3 & 01FH) / CELLL   
1C82                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1C82                VVNAME:   .SET   $   
1C82   A4 05 CE 1C            DW   vvCODE,vvLINK   
1C86                VVLINK:   .SET   $   
1C86   43 46 4F 52            DB   IMEDD+3,"FOR"   
05A4                          .ORG   vvCODE   
05A4   00                     NOP      
05A5   CD 56 06               CALL   doLIST   
05A8   38 04 2C 10 EC 0E 8C 06 DW   COMPI,TOR,HERE,EXIT   
05B0                             ;   BEGIN       ( -- a )
05B0                             ;               Start an infinite or indefinite loop structure.
05B0                          ;*Macro unroll: mCOLON  IMEDD+5,'BEGIN',BEGIN
05B0                          ;*Macro unroll:  mCODE IMEDD+5, "BEGIN", BEGIN
05B0                          ALIGN   2   
05B0                BEGIN:       
05B0                VVCODE:   .SET   $   
05B0                VVLEN:    .SET   (IMEDD+5 & 01FH) / CELLL   
1C38                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1C38                VVNAME:   .SET   $   
1C38   B0 05 86 1C            DW   vvCODE,vvLINK   
1C3C                VVLINK:   .SET   $   
1C3C   45 42 45 47 49 4E      DB   IMEDD+5,"BEGIN"   
05B0                          .ORG   vvCODE   
05B0   00                     NOP      
05B1   CD 56 06               CALL   doLIST   
05B4   EC 0E 8C 06            DW   HERE,EXIT   
05B8                             ;   NEXT        ( a -- )
05B8                             ;               Terminate a FOR-NEXT loop structure.
05B8                          ;*Macro unroll: mCOLON  IMEDD+4,'NEXT',NEXT
05B8                          ;*Macro unroll:  mCODE IMEDD+4, "NEXT", NEXT
05B8                          ALIGN   2   
05B8                NEXT:        
05B8                VVCODE:   .SET   $   
05B8                VVLEN:    .SET   (IMEDD+4 & 01FH) / CELLL   
1BEE                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1BEE                VVNAME:   .SET   $   
1BEE   B8 05 3C 1C            DW   vvCODE,vvLINK   
1BF2                VVLINK:   .SET   $   
1BF2   44 4E 45 58 54         DB   IMEDD+4,"NEXT"   
05B8                          .ORG   vvCODE   
05B8   00                     NOP      
05B9   CD 56 06               CALL   doLIST   
05BC   38 04 02 07 1C 04 8C 06 DW   COMPI,DONXT,COMMA,EXIT   
05C4                             ;   UNTIL       ( a -- )
05C4                             ;               Terminate a BEGIN-UNTIL indefinite loop structure.
05C4                          ;*Macro unroll: mCOLON  IMEDD+5,'UNTIL',UNTIL
05C4                          ;*Macro unroll:  mCODE IMEDD+5, "UNTIL", UNTIL
05C4                          ALIGN   2   
05C4                UNTIL:       
05C4                VVCODE:   .SET   $   
05C4                VVLEN:    .SET   (IMEDD+5 & 01FH) / CELLL   
1BA4                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1BA4                VVNAME:   .SET   $   
1BA4   C4 05 F2 1B            DW   vvCODE,vvLINK   
1BA8                VVLINK:   .SET   $   
1BA8   45 55 4E 54 49 4C      DB   IMEDD+5,"UNTIL"   
05C4                          .ORG   vvCODE   
05C4   00                     NOP      
05C5   CD 56 06               CALL   doLIST   
05C8   38 04 34 0E 1C 04 8C 06 DW   COMPI,QBRAN,COMMA,EXIT   
05D0                             ;   AGAIN       ( a -- )
05D0                             ;               Terminate a BEGIN-AGAIN infinite loop structure.
05D0                          ;*Macro unroll: mCOLON  IMEDD+5,'AGAIN',AGAIN
05D0                          ;*Macro unroll:  mCODE IMEDD+5, "AGAIN", AGAIN
05D0                          ALIGN   2   
05D0                AGAIN:       
05D0                VVCODE:   .SET   $   
05D0                VVLEN:    .SET   (IMEDD+5 & 01FH) / CELLL   
1B5A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1B5A                VVNAME:   .SET   $   
1B5A   D0 05 A8 1B            DW   vvCODE,vvLINK   
1B5E                VVLINK:   .SET   $   
1B5E   45 41 47 41 49 4E      DB   IMEDD+5,"AGAIN"   
05D0                          .ORG   vvCODE   
05D0   00                     NOP      
05D1   CD 56 06               CALL   doLIST   
05D4   38 04 40 0E 1C 04 8C 06 DW   COMPI,BRAN,COMMA,EXIT   
05DC                             ;   IF          ( -- A )
05DC                             ;               Begin a conditional branch structure.
05DC                          ;*Macro unroll: mCOLON  IMEDD+2,'IF',IFF
05DC                          ;*Macro unroll:  mCODE IMEDD+2, "IF", IFF
05DC                          ALIGN   2   
05DC                IFF:         
05DC                VVCODE:   .SET   $   
05DC                VVLEN:    .SET   (IMEDD+2 & 01FH) / CELLL   
1B12                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1B12                VVNAME:   .SET   $   
1B12   DC 05 5E 1B            DW   vvCODE,vvLINK   
1B16                VVLINK:   .SET   $   
1B16   42 49 46               DB   IMEDD+2,"IF"   
05DC                          .ORG   vvCODE   
05DC   00                     NOP      
05DD   CD 56 06               CALL   doLIST   
05E0   38 04 34 0E EC 0E      DW   COMPI,QBRAN,HERE   
05E6   64 06 00 00 1C 04 8C 06 DW   DOLIT,0,COMMA,EXIT   
05EE                             ;   AHEAD       ( -- A )
05EE                             ;               Compile a forward branch instruction.
05EE                          ;*Macro unroll: mCOLON  IMEDD+5,'AHEAD',AHEAD
05EE                          ;*Macro unroll:  mCODE IMEDD+5, "AHEAD", AHEAD
05EE                          ALIGN   2   
05EE                AHEAD:       
05EE                VVCODE:   .SET   $   
05EE                VVLEN:    .SET   (IMEDD+5 & 01FH) / CELLL   
1AC8                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1AC8                VVNAME:   .SET   $   
1AC8   EE 05 16 1B            DW   vvCODE,vvLINK   
1ACC                VVLINK:   .SET   $   
1ACC   45 41 48 45 41 44      DB   IMEDD+5,"AHEAD"   
05EE                          .ORG   vvCODE   
05EE   00                     NOP      
05EF   CD 56 06               CALL   doLIST   
05F2   38 04 40 0E EC 0E 64 06 00 00 1C 04 8C 06 DW   COMPI,BRAN,HERE,DOLIT,0,COMMA,EXIT   
0600                             ;   REPEAT      ( A a -- )
0600                             ;               Terminate a BEGIN-WHILE-REPEAT indefinite loop.
0600                          ;*Macro unroll: mCOLON  IMEDD+6,'REPEAT',REPEA
0600                          ;*Macro unroll:  mCODE IMEDD+6, "REPEAT", REPEA
0600                          ALIGN   2   
0600                REPEA:       
0600                VVCODE:   .SET   $   
0600                VVLEN:    .SET   (IMEDD+6 & 01FH) / CELLL   
1A7C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1A7C                VVNAME:   .SET   $   
1A7C   00 06 CC 1A            DW   vvCODE,vvLINK   
1A80                VVLINK:   .SET   $   
1A80   46 52 45 50 45 41 54   DB   IMEDD+6,"REPEAT"   
0600                          .ORG   vvCODE   
0600   00                     NOP      
0601   CD 56 06               CALL   doLIST   
0604   D0 05 EC 0E 50 10 5A 0E 8C 06 DW   AGAIN,HERE,SWAP,STORE,EXIT   
060E                             ;   THEN        ( A -- )
060E                             ;               Terminate a conditional branch structure.
060E                          ;*Macro unroll: mCOLON  IMEDD+4,'THEN',THENN
060E                          ;*Macro unroll:  mCODE IMEDD+4, "THEN", THENN
060E                          ALIGN   2   
060E                THENN:       
060E                VVCODE:   .SET   $   
060E                VVLEN:    .SET   (IMEDD+4 & 01FH) / CELLL   
1A32                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1A32                VVNAME:   .SET   $   
1A32   0E 06 80 1A            DW   vvCODE,vvLINK   
1A36                VVLINK:   .SET   $   
1A36   44 54 48 45 4E         DB   IMEDD+4,"THEN"   
060E                          .ORG   vvCODE   
060E   00                     NOP      
060F   CD 56 06               CALL   doLIST   
0612   EC 0E 50 10 5A 0E 8C 06 DW   HERE,SWAP,STORE,EXIT   
061A                             ;   AFT         ( a -- a A )
061A                             ;               Jump to THEN in a FOR-AFT-THEN-NEXT loop the 1st time through.
061A                          ;*Macro unroll: mCOLON  IMEDD+3,'AFT',AFT
061A                          ;*Macro unroll:  mCODE IMEDD+3, "AFT", AFT
061A                          ALIGN   2   
061A                AFT:         
061A                VVCODE:   .SET   $   
061A                VVLEN:    .SET   (IMEDD+3 & 01FH) / CELLL   
19EA                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
19EA                VVNAME:   .SET   $   
19EA   1A 06 36 1A            DW   vvCODE,vvLINK   
19EE                VVLINK:   .SET   $   
19EE   43 41 46 54            DB   IMEDD+3,"AFT"   
061A                          .ORG   vvCODE   
061A   00                     NOP      
061B   CD 56 06               CALL   doLIST   
061E   4C 10 EE 05 B0 05 50 10 8C 06 DW   DROP,AHEAD,BEGIN,SWAP,EXIT   
0628                             ;   ELSE        ( A -- A )
0628                             ;               Start the false clause in an IF-ELSE-THEN structure.
0628                          ;*Macro unroll: mCOLON  IMEDD+4,'ELSE',ELSEE
0628                          ;*Macro unroll:  mCODE IMEDD+4, "ELSE", ELSEE
0628                          ALIGN   2   
0628                ELSEE:       
0628                VVCODE:   .SET   $   
0628                VVLEN:    .SET   (IMEDD+4 & 01FH) / CELLL   
19A0                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
19A0                VVNAME:   .SET   $   
19A0   28 06 EE 19            DW   vvCODE,vvLINK   
19A4                VVLINK:   .SET   $   
19A4   44 45 4C 53 45         DB   IMEDD+4,"ELSE"   
0628                          .ORG   vvCODE   
0628   00                     NOP      
0629   CD 56 06               CALL   doLIST   
062C   EE 05 50 10 0E 06 8C 06 DW   AHEAD,SWAP,THENN,EXIT   
0634                             ;   WHILE       ( a -- A a )
0634                             ;               Conditional branch out of a BEGIN-WHILE-REPEAT loop.
0634                          ;*Macro unroll: mCOLON  IMEDD+5,'WHILE',WHILE
0634                          ;*Macro unroll:  mCODE IMEDD+5, "WHILE", WHILE
0634                          ALIGN   2   
0634                WHILE:       
0634                VVCODE:   .SET   $   
0634                VVLEN:    .SET   (IMEDD+5 & 01FH) / CELLL   
1956                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1956                VVNAME:   .SET   $   
1956   34 06 A4 19            DW   vvCODE,vvLINK   
195A                VVLINK:   .SET   $   
195A   45 57 48 49 4C 45      DB   IMEDD+5,"WHILE"   
0634                          .ORG   vvCODE   
0634   00                     NOP      
0635   CD 56 06               CALL   doLIST   
0638   DC 05 50 10 8C 06      DW   IFF,SWAP,EXIT   
063E                             ;   ABORT"      ( -- ; <string> )
063E                             ;               Conditional abort with an error message.
063E                             ;   $"          ( -- ; <string> )
063E                             ;               Compile an inline string literal.
063E                             ;   ."          ( -- ; <string> )
063E                             ;               Compile an inline string literal to be typed out at run time.
063E                             ;   UNLOOP	( -- ) ( R: loop-sys -- )	\ CORE
063E                             ;		Discard loop-control parameters for the current nesting level.
063E                             ;		An UNLOOP is required for each nesting level before the
063E                             ;		definition may be EXITed.
063E                          ;*Macro unroll: mCOLON	COMPO+6,'UNLOOP',UNLOOP
063E                          ;*Macro unroll:  mCODE COMPO+6, "UNLOOP", UNLOOP
063E                          ALIGN   2   
063E                UNLOOP:      
063E                VVCODE:   .SET   $   
063E                VVLEN:    .SET   (COMPO+6 & 01FH) / CELLL   
192A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
192A                VVNAME:   .SET   $   
192A   3E 06 5A 19            DW   vvCODE,vvLINK   
192E                VVLINK:   .SET   $   
192E   26 55 4E 4C 4F 4F 50   DB   COMPO+6,"UNLOOP"   
063E                          .ORG   vvCODE   
063E   00                     NOP      
063F   CD 56 06               CALL   doLIST   
0642   3A 10 3A 10 3A 10 7C 10 2C 10 8C 06 DW   RFrom,RFrom,RFrom,DDROP,ToR,EXIT   
064E                             ;   doCONST	( -- x )
064E                             ;	Run-time routine of CONSTANT and VARIABLE.
064E                          ;*Macro unroll: hCODE	COMPO+7, 'doCONST', DoCONST
064E                          ALIGN   2   
064E                DOCONST:      
064E   E1                     POP   HL   ;10t
064F   C5                     PUSH   BC   ;11t
0650   4E                     LD   C,(HL)   ; 7t
0651   23                     INC   HL   ; 6t
0652   46                     LD   B,(HL)   ; 7t
0653                          ;*Macro unroll:  mNEXT
0653   EB                     EX   DE,HL   
0654                          ;*Macro unroll:  mNEXTHL                         ; 34t
0654   FD E9                  JP   (IY)   ; 34t
0656                             ;   doLIST	( -- ) ( R: -- nest-sys )
0656                             ;	Process colon list.
0656                          ;*Macro unroll: hCODE	COMPO+6, 'doLIST', DoLIST
0656                          ALIGN   2   
0656                DOLIST:      
0656   DD 2B                  DEC   IX   ;10t
0658   DD 72 00               LD   (IX+0),D   ;19t
065B   DD 2B                  DEC   IX   ;10t
065D   DD 73 00               LD   (IX+0),E   ;19t
0660   E1                     POP   HL   ;10t
0661                          ;*Macro unroll:  mNEXTHL							
0661   FD E9                  JP   (IY)   
0663                             ;   doLIT	( -- x )
0663                             ;	Push an inline literal.
0663                          ;*Macro unroll: hCODE	COMPO+5, 'doLIT', DoLIT
0663                          ALIGN   2   
0664                DOLIT:       
0664   C5                     PUSH   BC   ; 11t
0665   EB                     EX   DE,HL   ; 4t
0666   4E                     LD   C,(HL)   ; 7t
0667   23                     INC   HL   ; 6t
0668   46                     LD   B,(HL)   ; 7t
0669   23                     INC   HL   ; 6t
066A                          ;*Macro unroll:  mNEXTHL
066A   FD E9                  JP   (IY)   
066C                             ;   doVAR       ( -- a )
066C                             ;   Run time routine for VARIABLE and CREATE.
066C                          ;*Macro unroll: hCOLON  COMPO+5, 'doVAR', DoVAR
066C                          ;*Macro unroll:  hCODE COMPO+5, "doVAR", DoVAR
066C                          ALIGN   2   
066C                DOVAR:       
066C   00                     NOP      
066D   CD 56 06               CALL   doLIST   
0670   3A 10 8C 06            DW   RFROM,EXIT   
0674                             ;   UP          ( -- a )
0674                             ;   Pointer to the user area.
0674                          ;*Macro unroll: hCOLON  2, 'UP', UP
0674                          ;*Macro unroll:  hCODE 2, "UP", UP
0674                          ALIGN   2   
0674                UP:          
0674   00                     NOP      
0675   CD 56 06               CALL   doLIST   
0678   6C 06                  DW   DoVAR   
067A   00 24                  DW   UPP   
067C                             ;   doUSER      ( -- a )
067C                             ;   Run time routine for user variables.
067C                          ;*Macro unroll: hCOLON  COMPO+6,'doUSER',DOUSE
067C                          ;*Macro unroll:  hCODE COMPO+6, "doUSER", DOUSE
067C                          ALIGN   2   
067C                DOUSE:       
067C   00                     NOP      
067D   CD 56 06               CALL   doLIST   
0680   3A 10 64 0E 74 06 64 0E 64 01 8C 06 DW   RFROM,AT,UP,AT,PLUS,EXIT   
068C                             ;   EXIT	( -- ) ( R: nest-sys -- )	\ CORE
068C                             ;	Return control to the calling definition.
068C                          ;*Macro unroll: mCODE	COMPO+4, 'EXIT', EXIT
068C                          ALIGN   2   
068C                EXIT:        
068C                VVCODE:   .SET   $   
068C                VVLEN:    .SET   (COMPO+4 & 01FH) / CELLL   
1900                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1900                VVNAME:   .SET   $   
1900   8C 06 2E 19            DW   vvCODE,vvLINK   
1904                VVLINK:   .SET   $   
1904   24 45 58 49 54         DB   COMPO+4,"EXIT"   
068C                          .ORG   vvCODE   
068C   DD 6E 00               LD   L,(IX+0)   
068F   DD 23                  INC   IX   
0691   DD 66 00               LD   H,(IX+0)   
0694   DD 23                  INC   IX   
0696                          ;*Macro unroll:  mNEXTHL
0696   FD E9                  JP   (IY)   
0698                             ;   doDO	( n1|u1 n2|u2 -- ) ( R: -- n1 n2-n1-max_negative )
0698                             ;		Run-time funtion of DO.
0698                             ; 
0698                             ;   : doDO	>R max-negative + R> OVER - SWAP R> SWAP >R SWAP >R >R ;
0698                          ;*Macro unroll: hCOLON	COMPO+4,'doDO',DoDO
0698                          ;*Macro unroll:  hCODE COMPO+4, "doDO", DoDO
0698                          ALIGN   2   
0698                DODO:        
0698   00                     NOP      
0699   CD 56 06               CALL   doLIST   
069C   2C 10 64 06 00 80 64 01 3A 10 DW   ToR,DoLIT,MaxNegative,Plus,RFrom   
06A6   58 10 BC 01 50 10 3A 10 50 10 2C 10 50 10 2C 10 2C 10 8C 06 DW   OVER,SUBB,SWAP,RFrom,SWAP,ToR,SWAP,ToR,ToR,EXIT   
06BA                             ;   doLOOP	( -- ) ( R: loop-sys1 -- | loop-sys2 )
06BA                             ;		Run time routine for LOOP.
06BA                          ;*Macro unroll: hCODE	COMPO+6,'doLOOP',DoLOOP
06BA                          ALIGN   2   
06BA                DOLOOP:      
06BA   DD E5                  PUSH   IX   ; 15t
06BC   E1                     POP   HL   ; 10t
06BD   34                     INC   (HL)   ; 11t
06BE   28 07                  JR   Z,DOLOOP2   ; 12/7t a fast dec is ok, only
06C0                DOLOOP1:      
06C0   1A                     LD   A,(DE)   ; 7t go back to the loop
06C1   6F                     LD   L,A   ; 4t
06C2   13                     INC   DE   ; 6t
06C3   1A                     LD   A,(DE)   ; 7t
06C4   67                     LD   H,A   ; 4t
06C5                          ;*Macro unroll: 	mNEXTHL
06C5   FD E9                  JP   (IY)   
06C7                DOLOOP2:      
06C7   23                     INC   HL   ; 6t
06C8   34                     INC   (HL)   ;11t
06C9   E2 C0 06               JP   PO,DOLOOP1   ;10/7t ?loop end
06CC   EB                     EX   DE,HL   ; 4t yes,continue past the BRAN offset
06CD   11 04 00               LD   DE,4   ;10t clear return stack
06D0   DD 19                  ADD   IX,DE   ;15h
06D2   23                     INC   HL   ; 6t
06D3   23                     INC   HL   ; 6t
06D4                          ;*Macro unroll: 	mNEXTHL
06D4   FD E9                  JP   (IY)   
06D6                             ;   do+LOOP	( n -- ) ( R: loop-sys1 -- | loop-sys2 )
06D6                             ;		Run time routine for +LOOP.
06D6                          ;*Macro unroll: hCODE	COMPO+7,'do+LOOP',DoPLOOP
06D6                          ALIGN   2   
06D6                DOPLOOP:      
06D6   E1                     POP   HL   ;10t this will be the new TOS
06D7   C5                     PUSH   BC   ;11t
06D8   44                     LD   B,H   ; 4t
06D9   4D                     LD   C,L   ; 4t
06DA   D9                     EXX      ; 4t
06DB   C1                     POP   BC   ;10t old TOS = loop increment
06DC   DD 6E 00               LD   L,(IX+0)   ;19t
06DF   DD 66 01               LD   H,(IX+1)   ;19t
06E2   B7                     OR   A   ; 4t clear carry
06E3   ED 4A                  ADC   HL,BC   ;15t
06E5   EA F6 06               JP   PE,DOPLP1   ;10/7t ?loop end
06E8   DD 75 00               LD   (IX+0),L   ;19t   no, go back
06EB   DD 74 01               LD   (IX+1),H   ;19t
06EE   D9                     EXX      ; 4t
06EF   1A                     LD   A,(DE)   ; 7t go back to the loop
06F0   6F                     LD   L,A   ; 4t
06F1   13                     INC   DE   ; 6t
06F2   1A                     LD   A,(DE)   ; 7t
06F3   67                     LD   H,A   ; 4t
06F4                          ;*Macro unroll: 	mNEXTHL
06F4   FD E9                  JP   (IY)   
06F6                DOPLP1:      
06F6   01 04 00               LD   BC,4   ;10t clear return stack
06F9   DD 09                  ADD   IX,BC   ;15h
06FB   D9                     EXX      ; 4t
06FC   13                     INC   DE   ; 6t yes,continue past the BRAN offset
06FD   13                     INC   DE   ; 6t
06FE                          ;*Macro unroll: 	mNEXT
06FE   EB                     EX   DE,HL   
06FF                          ;*Macro unroll:  mNEXTHL                         ; 34t
06FF   FD E9                  JP   (IY)   ; 34t
0701                             ;   next        ( -- )
0701                             ;               Run time code for the single index loop.
0701                             ;               : next ( -- ) \ hilevel model
0701                             ;                 r> r> dup if 1 - >r @ >r exit then drop cell+ >r ;
0701                          ;*Macro unroll: mCODE   COMPO+4,'next',DONXT
0701                          ALIGN   2   
0702                DONXT:       
0702                VVCODE:   .SET   $   
0702                VVLEN:    .SET   (COMPO+4 & 01FH) / CELLL   
18D6                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
18D6                VVNAME:   .SET   $   
18D6   02 07 04 19            DW   vvCODE,vvLINK   
18DA                VVLINK:   .SET   $   
18DA   24 6E 65 78 74         DB   COMPO+4,"next"   
0702                          .ORG   vvCODE   
0702   DD E5                  PUSH   IX   
0704   E1                     POP   HL   ; load rp into HL
0705   7E                     LD   A,(HL)   ; a = low byte of r@
0706   B7                     OR   A   
0707   20 10                  JR   NZ,DECLOW   ; low > 0 goto dec low
0709   23                     INC   HL   
070A   7E                     LD   A,(HL)   ; a = high byte of r@
070B   B7                     OR   A   
070C   20 09                  JR   NZ,DECHILO   ; high > 0 goto dec hi dec lo
070E   23                     INC   HL   
070F   E5                     PUSH   HL   
0710   DD E1                  POP   IX   ; pop r@
0712   13                     INC   DE   ; IP = skip following word
0713   13                     INC   DE   
0714                          ;*Macro unroll:  mNEXT                               ; continue
0714   EB                     EX   DE,HL   ; continue
0715                          ;*Macro unroll:  mNEXTHL                         ; 34t
0715   FD E9                  JP   (IY)   ; 34t
0717                DECHILO:      
0717   35                     DEC   (HL)   ; dec high byte of r@
0718   2B                     DEC   HL   
0719                DECLOW:      
0719   35                     DEC   (HL)   ; dec low byte of r@
071A   6B                     LD   L,E   ; DE points to location of loop address
071B   62                     LD   H,D   
071C   5E                     LD   E,(HL)   ; DE points to loop address
071D   23                     INC   HL   
071E   56                     LD   D,(HL)   
071F                          ;*Macro unroll:  mNEXT                               ; continue to loop address
071F   EB                     EX   DE,HL   ; continue to loop address
0720                          ;*Macro unroll:  mNEXTHL                         ; 34t
0720   FD E9                  JP   (IY)   ; 34t
0722                             ;   DIGIT       ( u -- c )
0722                             ;               Convert digit u to a character.
0722                          ;*Macro unroll: hCOLON  5,'DIGIT',DIGIT
0722                          ;*Macro unroll:  hCODE 5, "DIGIT", DIGIT
0722                          ALIGN   2   
0722                DIGIT:       
0722   00                     NOP      
0723   CD 56 06               CALL   doLIST   
0726   64 06 09 00 58 10 0E 02 DW   DOLIT,9,OVER,LESS   
072E   64 06 07 00 46 01 64 01 DW   DOLIT,7,ANDD,PLUS   
0736   64 06 64 01 8C 06      DW   DOLIT,"0",PLUS,EXIT   
073C                             ;   EXTRACT     ( n base -- n c )
073C                             ;               Extract the least significant digit from n.
073C                          ;*Macro unroll: hCOLON  7,'EXTRACT',EXTRC
073C                          ;*Macro unroll:  hCODE 7, "EXTRACT", EXTRC
073C                          ALIGN   2   
073C                EXTRC:       
073C   00                     NOP      
073D   CD 56 06               CALL   doLIST   
0740   64 06 00 00 50 10 74 02 DW   DOLIT,0,SWAP,UMMOD   
0748   50 10 22 07 8C 06      DW   SWAP,DIGIT,EXIT   
074E                             ;   <#          ( -- )
074E                             ;               Initiate the numeric output process.
074E                          ;*Macro unroll: mCOLON  2,'<#',BDIGS
074E                          ;*Macro unroll:  mCODE 2, "<#", BDIGS
074E                          ALIGN   2   
074E                BDIGS:       
074E                VVCODE:   .SET   $   
074E                VVLEN:    .SET   (2 & 01FH) / CELLL   
18CE                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
18CE                VVNAME:   .SET   $   
18CE   4E 07 DA 18            DW   vvCODE,vvLINK   
18D2                VVLINK:   .SET   $   
18D2   02 3C 23               DB   2,"<#"   
074E                          .ORG   vvCODE   
074E   00                     NOP      
074F   CD 56 06               CALL   doLIST   
0752   F6 0E 48 11 5A 0E 8C 06 DW   PAD,HLD,STORE,EXIT   
075A                             ;   HOLD        ( c -- )
075A                             ;               Insert a character into the numeric output string.
075A                          ;*Macro unroll: mCOLON  4,'HOLD',HOLD
075A                          ;*Macro unroll:  mCODE 4, "HOLD", HOLD
075A                          ALIGN   2   
075A                HOLD:        
075A                VVCODE:   .SET   $   
075A                VVLEN:    .SET   (4 & 01FH) / CELLL   
18C4                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
18C4                VVNAME:   .SET   $   
18C4   5A 07 D2 18            DW   vvCODE,vvLINK   
18C8                VVLINK:   .SET   $   
18C8   04 48 4F 4C 44         DB   4,"HOLD"   
075A                          .ORG   vvCODE   
075A   00                     NOP      
075B   CD 56 06               CALL   doLIST   
075E   48 11 64 0E 64 06 01 00 BC 01 DW   HLD,AT,DOLIT,1,SUBB   
0768   48 10 48 11 5A 0E 6C 0E 8C 06 DW   DUPP,HLD,STORE,CSTOR,EXIT   
0772                             ;   #           ( u -- u )
0772                             ;               Extract one digit from u and append the digit to output string.
0772                          ;*Macro unroll: mCOLON  1,'#',DIG
0772                          ;*Macro unroll:  mCODE 1, "#", DIG
0772                          ALIGN   2   
0772                DIG:         
0772                VVCODE:   .SET   $   
0772                VVLEN:    .SET   (1 & 01FH) / CELLL   
18BE                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
18BE                VVNAME:   .SET   $   
18BE   72 07 C8 18            DW   vvCODE,vvLINK   
18C2                VVLINK:   .SET   $   
18C2   01 23                  DB   1,"#"   
0772                          .ORG   vvCODE   
0772   00                     NOP      
0773   CD 56 06               CALL   doLIST   
0776   08 11 64 0E 3C 07 5A 07 8C 06 DW   BASE,AT,EXTRC,HOLD,EXIT   
0780                             ;   #S          ( u -- 0 )
0780                             ;               Convert u until all digits are added to the output string.
0780                          ;*Macro unroll: mCOLON  2,'#S',DIGS
0780                          ;*Macro unroll:  mCODE 2, "#S", DIGS
0780                          ALIGN   2   
0780                DIGS:        
0780                VVCODE:   .SET   $   
0780                VVLEN:    .SET   (2 & 01FH) / CELLL   
18B6                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
18B6                VVNAME:   .SET   $   
18B6   80 07 C2 18            DW   vvCODE,vvLINK   
18BA                VVLINK:   .SET   $   
18BA   02 23 53               DB   2,"#S"   
0780                          .ORG   vvCODE   
0780   00                     NOP      
0781   CD 56 06               CALL   doLIST   
0784                DIGS1:       
0784   72 07 48 10            DW   DIG,DUPP   
0788   34 0E 90 07            DW   QBRAN,DIGS2   
078C   40 0E 84 07            DW   BRAN,DIGS1   
0790                DIGS2:       
0790   8C 06                  DW   EXIT   
0792                             ;   SIGN        ( n -- )
0792                             ;               Add a minus sign to the numeric output string.
0792                          ;*Macro unroll: mCOLON	4,'SIGN',SIGN
0792                          ;*Macro unroll:  mCODE 4, "SIGN", SIGN
0792                          ALIGN   2   
0792                SIGN:        
0792                VVCODE:   .SET   $   
0792                VVLEN:    .SET   (4 & 01FH) / CELLL   
18AC                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
18AC                VVNAME:   .SET   $   
18AC   92 07 BA 18            DW   vvCODE,vvLINK   
18B0                VVLINK:   .SET   $   
18B0   04 53 49 47 4E         DB   4,"SIGN"   
0792                          .ORG   vvCODE   
0792   00                     NOP      
0793   CD 56 06               CALL   doLIST   
0796   3E 01 34 0E A2 07      DW   ZLESS,QBRAN,SIGN1   
079C   64 06 2D 00 5A 07      DW   DoLIT,MINUSS,HOLD   
07A2                SIGN1:       
07A2   8C 06                  DW   EXIT   
07A4                             ;   #>          ( w -- b u )
07A4                             ;               Prepare the output string to be TYPE'd.
07A4                          ;*Macro unroll: mCOLON  2,'#>',EDIGS
07A4                          ;*Macro unroll:  mCODE 2, "#>", EDIGS
07A4                          ALIGN   2   
07A4                EDIGS:       
07A4                VVCODE:   .SET   $   
07A4                VVLEN:    .SET   (2 & 01FH) / CELLL   
18A4                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
18A4                VVNAME:   .SET   $   
18A4   A4 07 B0 18            DW   vvCODE,vvLINK   
18A8                VVLINK:   .SET   $   
18A8   02 23 3E               DB   2,"#>"   
07A4                          .ORG   vvCODE   
07A4   00                     NOP      
07A5   CD 56 06               CALL   doLIST   
07A8   4C 10 48 11 64 0E      DW   DROP,HLD,AT   
07AE   F6 0E 58 10 BC 01 8C 06 DW   PAD,OVER,SUBB,EXIT   
07B6                             ;   str         ( n -- b u )
07B6                             ;               Convert a signed integer to a numeric string.
07B6                          ;*Macro unroll: hCOLON  3,'str',STR
07B6                          ;*Macro unroll:  hCODE 3, "str", STR
07B6                          ALIGN   2   
07B6                STR:         
07B6   00                     NOP      
07B7   CD 56 06               CALL   doLIST   
07BA   48 10 2C 10 C6 01      DW   DUPP,TOR,ABSS   
07C0   4E 07 80 07 3A 10      DW   BDIGS,DIGS,RFROM   
07C6   92 07 A4 07 8C 06      DW   SIGN,EDIGS,EXIT   
07CC                             ;   HEX         ( -- )
07CC                             ;               Use radix 16 as base for numeric conversions.
07CC                          ;*Macro unroll: mCOLON  3,'HEX',HEX
07CC                          ;*Macro unroll:  mCODE 3, "HEX", HEX
07CC                          ALIGN   2   
07CC                HEX:         
07CC                VVCODE:   .SET   $   
07CC                VVLEN:    .SET   (3 & 01FH) / CELLL   
189C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
189C                VVNAME:   .SET   $   
189C   CC 07 A8 18            DW   vvCODE,vvLINK   
18A0                VVLINK:   .SET   $   
18A0   03 48 45 58            DB   3,"HEX"   
07CC                          .ORG   vvCODE   
07CC   00                     NOP      
07CD   CD 56 06               CALL   doLIST   
07D0   64 06 10 00 08 11 5A 0E 8C 06 DW   DOLIT,16,BASE,STORE,EXIT   
07DA                             ;   DECIMAL     ( -- )
07DA                             ;               Use radix 10 as base for numeric conversions.
07DA                          ;*Macro unroll: mCOLON  7,'DECIMAL',DECIMAL
07DA                          ;*Macro unroll:  mCODE 7, "DECIMAL", DECIMAL
07DA                          ALIGN   2   
07DA                DECIMAL:      
07DA                VVCODE:   .SET   $   
07DA                VVLEN:    .SET   (7 & 01FH) / CELLL   
1890                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1890                VVNAME:   .SET   $   
1890   DA 07 A0 18            DW   vvCODE,vvLINK   
1894                VVLINK:   .SET   $   
1894   07 44 45 43 49 4D 41 4C DB   7,"DECIMAL"   
07DA                          .ORG   vvCODE   
07DA   00                     NOP      
07DB   CD 56 06               CALL   doLIST   
07DE   64 06 10 00 08 11 5A 0E 8C 06 DW   DOLIT,16,BASE,STORE,EXIT   
07E8                             ;   BL          ( -- 32 )
07E8                             ;               Return 32, the blank character.
07E8                          ;*Macro unroll: mCOLON	2,'BL',BLANK
07E8                          ;*Macro unroll:  mCODE 2, "BL", BLANK
07E8                          ALIGN   2   
07E8                BLANK:       
07E8                VVCODE:   .SET   $   
07E8                VVLEN:    .SET   (2 & 01FH) / CELLL   
1888                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1888                VVNAME:   .SET   $   
1888   E8 07 94 18            DW   vvCODE,vvLINK   
188C                VVLINK:   .SET   $   
188C   02 42 4C               DB   2,"BL"   
07E8                          .ORG   vvCODE   
07E8   00                     NOP      
07E9   CD 56 06               CALL   doLIST   
07EC   64 06 20 00 8C 06      DW   DoLIT,SPACEE,EXIT   
07F2                             ;   >CHAR       ( c -- c )
07F2                             ;               Filter non-printing characters.
07F2                          ;*Macro unroll: hCOLON  5,'>CHAR',TCHAR
07F2                          ;*Macro unroll:  hCODE 5, ">CHAR", TCHAR
07F2                          ALIGN   2   
07F2                TCHAR:       
07F2   00                     NOP      
07F3   CD 56 06               CALL   doLIST   
07F6   64 06 7F 00 46 01 48 10 DW   DoLIT,$7F,ANDD,DUPP   ;mask msb
07FE   64 06 7F 00            DW   DoLIT,127   
0802   64 06 20 00 56 02      DW   DoLIT,SPACEE,WITHI   ;check for printable
0808   34 0E 12 08            DW   QBRAN,TCHA1   
080C   4C 10 64 06 5F 00      DW   DROP,DoLIT,UNDERSC   ;replace non-printables
0812                TCHA1:       
0812   8C 06                  DW   EXIT   
0814                             ;   DIGIT?      ( c base -- u t )
0814                             ;               Convert a character to its numeric value. A flag indicates success.
0814                          ;*Macro unroll: hCOLON  6,'DIGIT?',DIGTQ
0814                          ;*Macro unroll:  hCODE 6, "DIGIT?", DIGTQ
0814                          ALIGN   2   
0814                DIGTQ:       
0814   00                     NOP      
0815   CD 56 06               CALL   doLIST   
0818   2C 10 64 06 BC 01      DW   TOR,DOLIT,"0",SUBB   
081E   64 06 09 00 58 10 0E 02 DW   DOLIT,9,OVER,LESS   
0826   34 0E 3A 08            DW   QBRAN,DGTQ1   
082A   64 06 07 00 BC 01      DW   DOLIT,7,SUBB   
0830   48 10 64 06 0A 00 0E 02 50 01 DW   DUPP,DOLIT,10,LESS,ORR   
083A                DGTQ1:       
083A   48 10 3A 10 EA 01 8C 06 DW   DUPP,RFROM,ULESS,EXIT   
0842                             ;   NUMBER?     ( a -- n T | a F )
0842                             ;               Convert a number string to integer. Push a flag on tos.
0842                          ;*Macro unroll: hCOLON  7,'NUMBER?',NUMBQ
0842                          ;*Macro unroll:  hCODE 7, "NUMBER?", NUMBQ
0842                          ALIGN   2   
0842                NUMBQ:       
0842   00                     NOP      
0843   CD 56 06               CALL   doLIST   
0846   08 11 64 0E 2C 10 64 06 00 00 58 10 DA 0E DW   BASE,AT,TOR,DOLIT,0,OVER,COUNT   
0854   58 10 74 0E 64 06 D6 01 DW   OVER,CAT,DOLIT,"$",EQUAL   
085C   34 0E 72 08            DW   QBRAN,NUMQ1   
0860   CC 07 50 10 64 06 01 00 64 01 DW   HEX,SWAP,DOLIT,1,PLUS   
086A   50 10 64 06 01 00 BC 01 DW   SWAP,DOLIT,1,SUBB   
0872                NUMQ1:       
0872   58 10 74 0E 64 06 D6 01 2C 10 DW   OVER,CAT,DOLIT,"-",EQUAL,TOR   
087C   50 10 7C 0E BC 01 50 10 7C 0E 64 01 60 10 DW   SWAP,RAT,SUBB,SWAP,RAT,PLUS,QDUP   
088A   34 0E DC 08            DW   QBRAN,NUMQ6   
088E   64 06 01 00 BC 01 2C 10 DW   DOLIT,1,SUBB,TOR   
0896                NUMQ2:       
0896   48 10 2C 10 74 0E 08 11 64 0E 14 08 DW   DUPP,TOR,CAT,BASE,AT,DIGTQ   
08A2   34 0E CE 08            DW   QBRAN,NUMQ4   
08A6   50 10 08 11 64 0E 96 03 64 01 3A 10 DW   SWAP,BASE,AT,STAR,PLUS,RFROM   
08B2   64 06 01 00 64 01      DW   DOLIT,1,PLUS   
08B8   02 07 96 08            DW   DONXT,NUMQ2   
08BC   7C 0E 50 10 4C 10      DW   RAT,SWAP,DROP   
08C2   34 0E C8 08            DW   QBRAN,NUMQ3   
08C6   90 01                  DW   NEGAT   
08C8                NUMQ3:       
08C8   50 10                  DW   SWAP   
08CA   40 0E DA 08            DW   BRAN,NUMQ5   
08CE                NUMQ4:       
08CE   3A 10 3A 10 7C 10 7C 10 64 06 00 00 DW   RFROM,RFROM,DDROP,DDROP,DOLIT,0   
08DA                NUMQ5:       
08DA   48 10                  DW   DUPP   
08DC                NUMQ6:       
08DC   3A 10 7C 10            DW   RFROM,DDROP   
08E0   3A 10 08 11 5A 0E 8C 06 DW   RFROM,BASE,STORE,EXIT   
08E8                             ;   parse       ( b u c -- b u delta ; <string> )
08E8                             ;               Scan string delimited by c. Return found string and its offset.
08E8                          ;*Macro unroll: hCOLON  5,'parse',PARS
08E8                          ;*Macro unroll:  hCODE 5, "parse", PARS
08E8                          ALIGN   2   
08E8                PARS:        
08E8   00                     NOP      
08E9   CD 56 06               CALL   doLIST   
08EC   10 11 5A 0E 58 10 2C 10 48 10 DW   TEMP,STORE,OVER,TOR,DUPP   
08F6   34 0E 84 09            DW   QBRAN,PARS8   
08FA   64 06 01 00 BC 01 10 11 64 0E E8 07 D6 01 DW   DOLIT,1,SUBB,TEMP,AT,BLANK,EQUAL   
0908   34 0E 36 09            DW   QBRAN,PARS3   
090C   2C 10                  DW   TOR   
090E                PARS1:       
090E   E8 07 58 10 74 0E      DW   BLANK,OVER,CAT   ;skip leading blanks ONLY
0914   BC 01 3E 01 84 01      DW   SUBB,ZLESS,INVER   
091A   34 0E 34 09            DW   QBRAN,PARS2   
091E   64 06 01 00 64 01      DW   DOLIT,1,PLUS   
0924   02 07 0E 09            DW   DONXT,PARS1   
0928   3A 10 4C 10 64 06 00 00 48 10 8C 06 DW   RFROM,DROP,DOLIT,0,DUPP,EXIT   
0934                PARS2:       
0934   3A 10                  DW   RFROM   
0936                PARS3:       
0936   58 10 50 10            DW   OVER,SWAP   
093A   2C 10                  DW   TOR   
093C                PARS4:       
093C   10 11 64 0E 58 10 74 0E BC 01 DW   TEMP,AT,OVER,CAT,SUBB   ;scan for delimiter
0946   10 11 64 0E E8 07 D6 01 DW   TEMP,AT,BLANK,EQUAL   
094E   34 0E 54 09            DW   QBRAN,PARS5   
0952   3E 01                  DW   ZLESS   
0954                PARS5:       
0954   34 0E 6A 09            DW   QBRAN,PARS6   
0958   64 06 01 00 64 01      DW   DOLIT,1,PLUS   
095E   02 07 3C 09            DW   DONXT,PARS4   
0962   48 10 2C 10            DW   DUPP,TOR   
0966   40 0E 78 09            DW   BRAN,PARS7   
096A                PARS6:       
096A   3A 10 4C 10 48 10      DW   RFROM,DROP,DUPP   
0970   64 06 01 00 64 01 2C 10 DW   DOLIT,1,PLUS,TOR   
0978                PARS7:       
0978   58 10 BC 01            DW   OVER,SUBB   
097C   3A 10 3A 10 BC 01 8C 06 DW   RFROM,RFROM,SUBB,EXIT   
0984                PARS8:       
0984   58 10 3A 10 BC 01 8C 06 DW   OVER,RFROM,SUBB,EXIT   
098C                             ;   PARSE       ( c -- b u ; <string> )
098C                             ;               Scan input stream and return counted string delimited by c.
098C                          ;*Macro unroll: mCOLON  5,'PARSE',PARSE
098C                          ;*Macro unroll:  mCODE 5, "PARSE", PARSE
098C                          ALIGN   2   
098C                PARSE:       
098C                VVCODE:   .SET   $   
098C                VVLEN:    .SET   (5 & 01FH) / CELLL   
187E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
187E                VVNAME:   .SET   $   
187E   8C 09 8C 18            DW   vvCODE,vvLINK   
1882                VVLINK:   .SET   $   
1882   05 50 41 52 53 45      DB   5,"PARSE"   
098C                          .ORG   vvCODE   
098C   00                     NOP      
098D   CD 56 06               CALL   doLIST   
0990   2C 10 04 0F 20 11 64 0E 64 01 DW   TOR,TIB,INN,AT,PLUS   ;current input buffer pointer
099A   28 11 64 0E 20 11 64 0E BC 01 DW   NTIB,AT,INN,AT,SUBB   ;remaining count
09A4   3A 10 E8 08 20 11 A8 0E 8C 06 DW   RFROM,PARS,INN,PSTOR,EXIT   
09AE                             ;   (           ( -- )
09AE                             ;               Ignore following string up to next ) . A comment.
09AE                          ;*Macro unroll: mCOLON  IMEDD+1,'(',PAREN
09AE                          ;*Macro unroll:  mCODE IMEDD+1, "(", PAREN
09AE                          ALIGN   2   
09AE                PAREN:       
09AE                VVCODE:   .SET   $   
09AE                VVLEN:    .SET   (IMEDD+1 & 01FH) / CELLL   
1838                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1838                VVNAME:   .SET   $   
1838   AE 09 82 18            DW   vvCODE,vvLINK   
183C                VVLINK:   .SET   $   
183C   41 28                  DB   IMEDD+1,"("   
09AE                          .ORG   vvCODE   
09AE   00                     NOP      
09AF   CD 56 06               CALL   doLIST   
09B2   64 06 8C 09 7C 10 8C 06 DW   DOLIT,")",PARSE,DDROP,EXIT   
09BA                             ;   \           ( -- )
09BA                             ;               Ignore following text till the end of line.
09BA                          ;*Macro unroll: mCOLON  IMEDD+1,'||',BKSLA
09BA                          ;*Macro unroll:  mCODE IMEDD+1, "||", BKSLA
09BA                          ALIGN   2   
09BA                BKSLA:       
09BA                VVCODE:   .SET   $   
09BA                VVLEN:    .SET   (IMEDD+1 & 01FH) / CELLL   
17F2                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
17F2                VVNAME:   .SET   $   
17F2   BA 09 3C 18            DW   vvCODE,vvLINK   
17F6                VVLINK:   .SET   $   
17F6   41 7C 7C               DB   IMEDD+1,"||"   
09BA                          .ORG   vvCODE   
09BA   00                     NOP      
09BB   CD 56 06               CALL   doLIST   
09BE   28 11 64 0E 20 11 5A 0E 8C 06 DW   NTIB,AT,INN,STORE,EXIT   
09C8                             ;   CHAR        ( -- c )
09C8                             ;               Parse next word and return its first character.
09C8                          ;*Macro unroll: mCOLON  4,'CHAR',CHAR
09C8                          ;*Macro unroll:  mCODE 4, "CHAR", CHAR
09C8                          ALIGN   2   
09C8                CHAR:        
09C8                VVCODE:   .SET   $   
09C8                VVLEN:    .SET   (4 & 01FH) / CELLL   
17E8                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
17E8                VVNAME:   .SET   $   
17E8   C8 09 F6 17            DW   vvCODE,vvLINK   
17EC                VVLINK:   .SET   $   
17EC   04 43 48 41 52         DB   4,"CHAR"   
09C8                          .ORG   vvCODE   
09C8   00                     NOP      
09C9   CD 56 06               CALL   doLIST   
09CC   E8 07 8C 09 4C 10 74 0E 8C 06 DW   BLANK,PARSE,DROP,CAT,EXIT   
09D6                             ;   TOKEN       ( -- a ; <string> )
09D6                             ;               Parse a word from input stream and copy it to name dictionary.
09D6                          ;*Macro unroll: hCOLON  5,'TOKEN',TOKEN
09D6                          ;*Macro unroll:  hCODE 5, "TOKEN", TOKEN
09D6                          ALIGN   2   
09D6                TOKEN:       
09D6   00                     NOP      
09D7   CD 56 06               CALL   doLIST   
09DA   E8 07 8C 09 64 06 1F 00 44 02 DW   BLANK,PARSE,DOLIT,31,MIN   
09E4   70 11 64 0E 58 10 BC 01 E2 03 DW   NP,AT,OVER,SUBB,CELLM   
09EE   98 0F 8C 06            DW   PACKS,EXIT   
09F2                             ;   WORD        ( c -- a ; <string> )
09F2                             ;               Parse a word from input stream and copy it to code dictionary.
09F2                          ;*Macro unroll: mCOLON  4,'WORD',WORDD
09F2                          ;*Macro unroll:  mCODE 4, "WORD", WORDD
09F2                          ALIGN   2   
09F2                WORDD:       
09F2                VVCODE:   .SET   $   
09F2                VVLEN:    .SET   (4 & 01FH) / CELLL   
17DE                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
17DE                VVNAME:   .SET   $   
17DE   F2 09 EC 17            DW   vvCODE,vvLINK   
17E2                VVLINK:   .SET   $   
17E2   04 57 4F 52 44         DB   4,"WORD"   
09F2                          .ORG   vvCODE   
09F2   00                     NOP      
09F3   CD 56 06               CALL   doLIST   
09F6   8C 09 EC 0E 98 0F 8C 06 DW   PARSE,HERE,PACKS,EXIT   
09FE                             ;   NAME>       ( na -- ca )
09FE                             ;               Return a code address given a name address.
09FE                          ;*Macro unroll: hCOLON  5,'NAME>',NAMET
09FE                          ;*Macro unroll:  hCODE 5, "NAME>", NAMET
09FE                          ALIGN   2   
09FE                NAMET:       
09FE   00                     NOP      
09FF   CD 56 06               CALL   doLIST   
0A02   E2 03 E2 03 64 0E 8C 06 DW   CELLM,CELLM,AT,EXIT   
0A0A                             ;   SAME?       ( a a u -- a a f \ -0+ )
0A0A                             ;               Compare u cells in two strings. Return 0 if identical.
0A0A                          ;*Macro unroll: hCOLON  5,'SAME?',SAMEQ
0A0A                          ;*Macro unroll:  hCODE 5, "SAME?", SAMEQ
0A0A                          ALIGN   2   
0A0A                SAMEQ:       
0A0A   00                     NOP      
0A0B   CD 56 06               CALL   doLIST   
0A0E   2C 10                  DW   TOR   
0A10   40 0E 36 0A            DW   BRAN,SAME2   
0A14   58 10 7C 0E EE 03 64 01 64 0E SAME1:   DW   OVER,RAT,CELLS,PLUS,AT   
0A1E   58 10 7C 0E EE 03 64 01 64 0E DW   OVER,RAT,CELLS,PLUS,AT   
0A28   BC 01 60 10            DW   SUBB,QDUP   
0A2C   34 0E 36 0A            DW   QBRAN,SAME2   
0A30   3A 10 4C 10 8C 06      DW   RFROM,DROP,EXIT   ;strings not equal
0A36   02 07 14 0A  SAME2:    DW   DONXT,SAME1   
0A3A   64 06 00 00 8C 06      DW   DOLIT,0,EXIT   ;strings equal
0A40                             ;   find        ( a va -- ca na | a F )
0A40                             ;               Search a vocabulary for a string. Return ca and na if succeeded.
0A40                          ;*Macro unroll: mCOLON  4,'find',FIND
0A40                          ;*Macro unroll:  mCODE 4, "find", FIND
0A40                          ALIGN   2   
0A40                FIND:        
0A40                VVCODE:   .SET   $   
0A40                VVLEN:    .SET   (4 & 01FH) / CELLL   
17D4                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
17D4                VVNAME:   .SET   $   
17D4   40 0A E2 17            DW   vvCODE,vvLINK   
17D8                VVLINK:   .SET   $   
17D8   04 66 69 6E 64         DB   4,"find"   
0A40                          .ORG   vvCODE   
0A40   00                     NOP      
0A41   CD 56 06               CALL   doLIST   
0A44   50 10 48 10 74 0E      DW   SWAP,DUPP,CAT   
0A4A   64 06 02 00 70 03 10 11 5A 0E DW   DOLIT,CELLL,SLASH,TEMP,STORE   
0A54   48 10 64 0E 2C 10 D6 03 50 10 DW   DUPP,AT,TOR,CELLP,SWAP   
0A5E   64 0E 48 10  FIND1:    DW   AT,DUPP   
0A62   34 0E 8E 0A            DW   QBRAN,FIND6   
0A66   48 10 64 0E 64 06 1F 00 46 01 7C 0E 5A 01 DW   DUPP,AT,DOLIT,MASKK,ANDD,RAT,XORR   
0A74   34 0E 82 0A            DW   QBRAN,FIND2   
0A78   D6 03 64 06 FF FF      DW   CELLP,DOLIT,-1   ;true flag
0A7E   40 0E 8A 0A            DW   BRAN,FIND3   
0A82   D6 03 10 11 64 0E 0A 0A FIND2:   DW   CELLP,TEMP,AT,SAMEQ   
0A8A   40 0E 9A 0A  FIND3:    DW   BRAN,FIND4   
0A8E   3A 10 4C 10  FIND6:    DW   RFROM,DROP   
0A92   50 10 E2 03 50 10 8C 06 DW   SWAP,CELLM,SWAP,EXIT   
0A9A   34 0E A6 0A  FIND4:    DW   QBRAN,FIND5   
0A9E   E2 03 E2 03            DW   CELLM,CELLM   
0AA2   40 0E 5E 0A            DW   BRAN,FIND1   
0AA6   3A 10 4C 10 50 10 4C 10 FIND5:   DW   RFROM,DROP,SWAP,DROP   
0AAE   E2 03                  DW   CELLM   
0AB0   48 10 FE 09 50 10 8C 06 DW   DUPP,NAMET,SWAP,EXIT   
0AB8                             ;   NAME?       ( a -- ca na | a F )
0AB8                             ;               Search all context vocabularies for a string.
0AB8                          ;*Macro unroll: hCOLON  5,'NAME?',NAMEQ
0AB8                          ;*Macro unroll:  hCODE 5, "NAME?", NAMEQ
0AB8                          ALIGN   2   
0AB8                NAMEQ:       
0AB8   00                     NOP      
0AB9   CD 56 06               CALL   doLIST   
0ABC   58 11 48 10 CA 0E 5A 01 DW   CNTXT,DUPP,DAT,XORR   ;?context=also
0AC4   34 0E CA 0A            DW   QBRAN,NAMQ1   
0AC8   E2 03                  DW   CELLM   ;no, start with context
0ACA   2C 10        NAMQ1:    DW   TOR   
0ACC   3A 10 D6 03 48 10 2C 10 NAMQ2:   DW   RFROM,CELLP,DUPP,TOR   ;next in search order
0AD4   64 0E 60 10            DW   AT,QDUP   
0AD8   34 0E EA 0A            DW   QBRAN,NAMQ3   
0ADC   40 0A 60 10            DW   FIND,QDUP   ;search vocabulary
0AE0   34 0E CC 0A            DW   QBRAN,NAMQ2   
0AE4   3A 10 4C 10 8C 06      DW   RFROM,DROP,EXIT   ;found name
0AEA   3A 10 4C 10  NAMQ3:    DW   RFROM,DROP   ;name not found
0AEE   64 06 00 00 8C 06      DW   DOLIT,0,EXIT   ;false flag
0AF4                             ; ;   CATCH       ( ca -- 0 | err# )
0AF4                             ; ;               Execute word at ca and set up an error frame for it.
0AF4                             ; mCOLON  5,"CATCH",CATCH
0AF4                             ;     DW      SPAT,TOR,HANDL,AT,TOR   ;save error frame
0AF4                             ;     DW      RPAT,HANDL,STORE,EXECU  ;execute
0AF4                             ;     DW      RFROM,HANDL,STORE       ;restore error frame
0AF4                             ;     DW      RFROM,DROP,DOLIT,0,EXIT ;no error
0AF4                             ;   THROW       ( err# -- err# )
0AF4                             ;               Reset system to current local error frame an update error flag.
0AF4                          ;*Macro unroll: mCOLON  5,'THROW',THROW
0AF4                          ;*Macro unroll:  mCODE 5, "THROW", THROW
0AF4                          ALIGN   2   
0AF4                THROW:       
0AF4                VVCODE:   .SET   $   
0AF4                VVLEN:    .SET   (5 & 01FH) / CELLL   
17CA                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
17CA                VVNAME:   .SET   $   
17CA   F4 0A D8 17            DW   vvCODE,vvLINK   
17CE                VVLINK:   .SET   $   
17CE   05 54 48 52 4F 57      DB   5,"THROW"   
0AF4                          .ORG   vvCODE   
0AF4   00                     NOP      
0AF5   CD 56 06               CALL   doLIST   
0AF8   50 11 64 0E 8E 0E      DW   HANDL,AT,RPSTO   ;restore return stack
0AFE   3A 10 50 11 5A 0E      DW   RFROM,HANDL,STORE   ;restore handler frame
0B04   3A 10 50 10 2C 10 A0 0E DW   RFROM,SWAP,TOR,SPSTO   ;restore data stack
0B0C   4C 10 3A 10 8C 06      DW   DROP,RFROM,EXIT   
0B12                             ;   NULL$       ( -- a )
0B12                             ;               Return address of a null string with zero count.
0B12                          ;*Macro unroll: hCOLON  5,'NULL$',NULLS
0B12                          ;*Macro unroll:  hCODE 5, "NULL$", NULLS
0B12                          ALIGN   2   
0B12                NULLS:       
0B12   00                     NOP      
0B13   CD 56 06               CALL   doLIST   
0B16   6C 06                  DW   DOVAR   ;emulate CREATE
0B18   00 00                  DW   0   
0B1A   63 6F 79 6F 74 65      DB   99,111,121,111,116,101   
0B20                          ALIGN   2   
0B20                             ;   ABORT       ( -- )
0B20                             ;               Reset data stack and jump to QUIT.
0B20                          ;*Macro unroll: mCOLON  5,'ABORT',ABORT
0B20                          ;*Macro unroll:  mCODE 5, "ABORT", ABORT
0B20                          ALIGN   2   
0B20                ABORT:       
0B20                VVCODE:   .SET   $   
0B20                VVLEN:    .SET   (5 & 01FH) / CELLL   
17C0                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
17C0                VVNAME:   .SET   $   
17C0   20 0B CE 17            DW   vvCODE,vvLINK   
17C4                VVLINK:   .SET   $   
17C4   05 41 42 4F 52 54      DB   5,"ABORT"   
0B20                          .ORG   vvCODE   
0B20   00                     NOP      
0B21   CD 56 06               CALL   doLIST   
0B24   12 0B F4 0A            DW   NULLS,THROW   
0B28                             ;   abort"      ( f -- )
0B28                             ;               Run time routine of ABORT" . Abort with a message.
0B28                          ;*Macro unroll: mCOLON  COMPO+6,'abort|',ABORQ
0B28                          ;*Macro unroll:  mCODE COMPO+6, "abort|", ABORQ
0B28                          ALIGN   2   
0B28                ABORQ:       
0B28                VVCODE:   .SET   $   
0B28                VVLEN:    .SET   (COMPO+6 & 01FH) / CELLL   
1794                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1794                VVNAME:   .SET   $   
1794   28 0B C4 17            DW   vvCODE,vvLINK   
1798                VVLINK:   .SET   $   
1798   26 61 62 6F 72 74 7C   DB   COMPO+6,"abort|"   
0B28                          .ORG   vvCODE   
0B28   00                     NOP      
0B29   CD 56 06               CALL   doLIST   
0B2C   34 0E 34 0B            DW   QBRAN,ABOR1   ;text flag
0B30   90 0C F4 0A            DW   DOSTR,THROW   ;pass error string
0B34                ABOR1:       
0B34   90 0C 4C 10 8C 06      DW   DOSTR,DROP,EXIT   ;drop error
0B3A                             ;   $INTERPRET  ( a -- )
0B3A                             ;               Interpret a word. If failed, try to convert it to an integer.
0B3A                          ;*Macro unroll: hCOLON  10,'$INTERPRET',INTER
0B3A                          ;*Macro unroll:  hCODE 10, "$INTERPRET", INTER
0B3A                          ALIGN   2   
0B3A                INTER:       
0B3A   00                     NOP      
0B3B   CD 56 06               CALL   doLIST   
0B3E   B8 0A 60 10            DW   NAMEQ,QDUP   ;?defined
0B42   34 0E 62 0B            DW   QBRAN,INTE1   
0B46   64 0E 64 06 20 00 46 01 DW   AT,DOLIT,COMPO,ANDD   ;?compile only lexicon bits
0B4E                          ;*Macro unroll:  mDSTR   ABORQ,' compile only'
0B4E   28 0B                  DW   ABORQ   
0B50                VVLEN:    .SET   $   
0B50   00 20 63 6F 6D 70 69 6C 65 20 6F 6E 6C 79 DB   0," compile only"   
0B5E                VVCODE:   .SET   $   
0B50                          .ORG   vvLEN   
0B50   0D                     DB   vvCODE - vvLEN - 1   
0B5E                          .ORG   vvCODE   
0B5E   30 0E 8C 06            DW   EXECU,EXIT   ;execute defined word
0B62                INTE1:       
0B62   40 11 10 0F            DW   TNUMB,ATEXE   ;convert a number
0B66   34 0E 6C 0B            DW   QBRAN,INTE2   
0B6A   8C 06                  DW   EXIT   
0B6C                INTE2:       
0B6C   F4 0A                  DW   THROW   ;error
0B6E                             ;   [           ( -- )
0B6E                             ;               Start the text interpreter.
0B6E                          ;*Macro unroll: mCOLON  IMEDD+1,'[',LBRAC
0B6E                          ;*Macro unroll:  mCODE IMEDD+1, "[", LBRAC
0B6E                          ALIGN   2   
0B6E                LBRAC:       
0B6E                VVCODE:   .SET   $   
0B6E                VVLEN:    .SET   (IMEDD+1 & 01FH) / CELLL   
174E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
174E                VVNAME:   .SET   $   
174E   6E 0B 98 17            DW   vvCODE,vvLINK   
1752                VVLINK:   .SET   $   
1752   41 5B                  DB   IMEDD+1,"["   
0B6E                          .ORG   vvCODE   
0B6E   00                     NOP      
0B6F   CD 56 06               CALL   doLIST   
0B72   64 06 3A 0B 38 11 5A 0E 8C 06 DW   DOLIT,INTER,TEVAL,STORE,EXIT   
0B7C                             ;   .OK         ( -- )
0B7C                             ;               Display "ok" only while interpreting.
0B7C                          ;*Macro unroll: mCOLON  3,'.OK',DOTOK
0B7C                          ;*Macro unroll:  mCODE 3, ".OK", DOTOK
0B7C                          ALIGN   2   
0B7C                DOTOK:       
0B7C                VVCODE:   .SET   $   
0B7C                VVLEN:    .SET   (3 & 01FH) / CELLL   
1746                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1746                VVNAME:   .SET   $   
1746   7C 0B 52 17            DW   vvCODE,vvLINK   
174A                VVLINK:   .SET   $   
174A   03 2E 4F 4B            DB   3,".OK"   
0B7C                          .ORG   vvCODE   
0B7C   00                     NOP      
0B7D   CD 56 06               CALL   doLIST   
0B80   64 06 3A 0B 38 11 64 0E D6 01 DW   DOLIT,INTER,TEVAL,AT,EQUAL   
0B8A   34 0E 94 0B            DW   QBRAN,DOTO1   
0B8E                          ;*Macro unroll:  mDSTR      DOTQP,' ok'
0B8E   B0 0C                  DW   DOTQP   
0B90                VVLEN:    .SET   $   
0B90   00 20 6F 6B            DB   0," ok"   
0B94                VVCODE:   .SET   $   
0B90                          .ORG   vvLEN   
0B90   03                     DB   vvCODE - vvLEN - 1   
0B94                          .ORG   vvCODE   
0B94   7E 0C 8C 06  DOTO1:    DW   CR,EXIT   
0B98                             ;   ?STACK      ( -- )
0B98                             ;               Abort if the data stack underflows.
0B98                          ;*Macro unroll: hCOLON  6,'?STACK',QSTAC
0B98                          ;*Macro unroll:  hCODE 6, "?STACK", QSTAC
0B98                          ALIGN   2   
0B98                QSTAC:       
0B98   00                     NOP      
0B99   CD 56 06               CALL   doLIST   
0B9C   B2 10 3E 01            DW   DEPTH,ZLESS   ;check only for underflow
0BA0                          ;*Macro unroll:  mDSTR      ABORQ,' underflow'
0BA0   28 0B                  DW   ABORQ   
0BA2                VVLEN:    .SET   $   
0BA2   00 20 75 6E 64 65 72 66 6C 6F 77 DB   0," underflow"   
0BAD                VVCODE:   .SET   $   
0BA2                          .ORG   vvLEN   
0BA2   0A                     DB   vvCODE - vvLEN - 1   
0BAD                          .ORG   vvCODE   
0BAD   8C 06                  DW   EXIT   
0BAF                             ;   EVAL        ( -- )
0BAF                             ;               Interpret the input stream.
0BAF                          ;*Macro unroll: mCOLON  4,'EVAL',EVAL
0BAF                          ;*Macro unroll:  mCODE 4, "EVAL", EVAL
0BAF                          ALIGN   2   
0BB0                EVAL:        
0BB0                VVCODE:   .SET   $   
0BB0                VVLEN:    .SET   (4 & 01FH) / CELLL   
173C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
173C                VVNAME:   .SET   $   
173C   B0 0B 4A 17            DW   vvCODE,vvLINK   
1740                VVLINK:   .SET   $   
1740   04 45 56 41 4C         DB   4,"EVAL"   
0BB0                          .ORG   vvCODE   
0BB0   00                     NOP      
0BB1   CD 56 06               CALL   doLIST   
0BB4                EVAL1:       
0BB4   D6 09 48 10 74 0E      DW   TOKEN,DUPP,CAT   ;?input stream empty
0BBA   34 0E C8 0B            DW   QBRAN,EVAL2   
0BBE   38 11 10 0F 98 0B      DW   TEVAL,ATEXE,QSTAC   ;evaluate input, check stack
0BC4   40 0E B4 0B            DW   BRAN,EVAL1   
0BC8                EVAL2:       
0BC8   4C 10 00 11 10 0F 8C 06 DW   DROP,TPROM,ATEXE,EXIT   ;prompt
0BD0                             ;   PC!         ( uc p --  )
0BD0                             ;               output uc to IO port p
0BD0                             ;   PC@         ( p -- uc )
0BD0                             ;               output uc to IO port p
0BD0                             ;   !IO         ( -- )
0BD0                             ;               Initialize the serial I/O devices.
0BD0                          ;*Macro unroll: mCODE   3,'!IO', STOIO ;
0BD0                          ALIGN   2   ; 
0BD0                STOIO:       
0BD0                VVCODE:   .SET   $   
0BD0                VVLEN:    .SET   (3 & 01FH) / CELLL   
1734                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1734                VVNAME:   .SET   $   
1734   D0 0B 40 17            DW   vvCODE,vvLINK   
1738                VVLINK:   .SET   $   
1738   03 21 49 4F            DB   3,"!IO"   
0BD0                          .ORG   vvCODE   
0BD0   CD A1 00               CALL   INIT_IO   
0BD3                          ;*Macro unroll:  mNEXT
0BD3   EB                     EX   DE,HL   
0BD4                          ;*Macro unroll:  mNEXTHL                         ; 34t
0BD4   FD E9                  JP   (IY)   ; 34t
0BD6                             ;   ?RX         ( -- c T | F )
0BD6                             ;               Return input character and true, or a false if no input.
0BD6                          ;*Macro unroll: mCODE	3, '?RX', QRX
0BD6                          ALIGN   2   
0BD6                QRX:         
0BD6                VVCODE:   .SET   $   
0BD6                VVLEN:    .SET   (3 & 01FH) / CELLL   
172C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
172C                VVNAME:   .SET   $   
172C   D6 0B 38 17            DW   vvCODE,vvLINK   
1730                VVLINK:   .SET   $   
1730   03 3F 52 58            DB   3,"?RX"   
0BD6                          .ORG   vvCODE   
0BD6   C5                     PUSH   BC   
0BD7   CD EB 00               CALL   CKINCHAR   
0BDA   20 05                  JR   nz,QRX1   
0BDC   01 00 00               LD   BC,FALSEE   
0BDF   18 0A                  JR   QRX2   
0BE1                QRX1:        
0BE1   CD B5 00               CALL   RXA   
0BE4   4F                     LD   C,A   
0BE5   06 00                  LD   B,0   
0BE7   C5                     PUSH   BC   
0BE8   01 FF FF               LD   BC,TRUEE   
0BEB                QRX2:        
0BEB                          ;*Macro unroll:  mNEXT
0BEB   EB                     EX   DE,HL   
0BEC                          ;*Macro unroll:  mNEXTHL                         ; 34t
0BEC   FD E9                  JP   (IY)   ; 34t
0BEE                             ;   TX!         ( c -- )
0BEE                             ;               Send character c to the output device.
0BEE                          ;*Macro unroll: mCODE	3,'TX!',TXSTO
0BEE                          ALIGN   2   
0BEE                TXSTO:       
0BEE                VVCODE:   .SET   $   
0BEE                VVLEN:    .SET   (3 & 01FH) / CELLL   
1724                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1724                VVNAME:   .SET   $   
1724   EE 0B 30 17            DW   vvCODE,vvLINK   
1728                VVLINK:   .SET   $   
1728   03 54 58 21            DB   3,"TX!"   
0BEE                          .ORG   vvCODE   
0BEE   79                     LD   A,C   
0BEF   CD E0 00               CALL   TXA   
0BF2   C1                     POP   BC   
0BF3                          ;*Macro unroll:  mNEXT
0BF3   EB                     EX   DE,HL   
0BF4                          ;*Macro unroll:  mNEXTHL                         ; 34t
0BF4   FD E9                  JP   (IY)   ; 34t
0BF6                             ;   ?KEY        ( -- c T | F )
0BF6                             ;               Return input character and true, or a false if no input.
0BF6                          ;*Macro unroll: mCOLON  4,'?KEY',QKEY
0BF6                          ;*Macro unroll:  mCODE 4, "?KEY", QKEY
0BF6                          ALIGN   2   
0BF6                QKEY:        
0BF6                VVCODE:   .SET   $   
0BF6                VVLEN:    .SET   (4 & 01FH) / CELLL   
171A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
171A                VVNAME:   .SET   $   
171A   F6 0B 28 17            DW   vvCODE,vvLINK   
171E                VVLINK:   .SET   $   
171E   04 3F 4B 45 59         DB   4,"?KEY"   
0BF6                          .ORG   vvCODE   
0BF6   00                     NOP      
0BF7   CD 56 06               CALL   doLIST   
0BFA   D8 10 64 0E 30 0E 8C 06 DW   TQKEY,AT,EXECU,EXIT   
0C02                             ;   KEY         ( -- c )
0C02                             ;               Wait for and return an input character.
0C02                          ;*Macro unroll: mCOLON  3,'KEY',KEY
0C02                          ;*Macro unroll:  mCODE 3, "KEY", KEY
0C02                          ALIGN   2   
0C02                KEY:         
0C02                VVCODE:   .SET   $   
0C02                VVLEN:    .SET   (3 & 01FH) / CELLL   
1712                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1712                VVNAME:   .SET   $   
1712   02 0C 1E 17            DW   vvCODE,vvLINK   
1716                VVLINK:   .SET   $   
1716   03 4B 45 59            DB   3,"KEY"   
0C02                          .ORG   vvCODE   
0C02   00                     NOP      
0C03   CD 56 06               CALL   doLIST   
0C06                KEY1:        
0C06   F6 0B                  DW   QKEY   
0C08   34 0E 06 0C            DW   QBRAN,KEY1   
0C0C   8C 06                  DW   EXIT   
0C0E                             ;   EMIT        ( c -- )
0C0E                             ;               Send a character to the output device.
0C0E                          ;*Macro unroll: mCOLON  4, 'EMIT', EMIT
0C0E                          ;*Macro unroll:  mCODE 4, "EMIT", EMIT
0C0E                          ALIGN   2   
0C0E                EMIT:        
0C0E                VVCODE:   .SET   $   
0C0E                VVLEN:    .SET   (4 & 01FH) / CELLL   
1708                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1708                VVNAME:   .SET   $   
1708   0E 0C 16 17            DW   vvCODE,vvLINK   
170C                VVLINK:   .SET   $   
170C   04 45 4D 49 54         DB   4,"EMIT"   
0C0E                          .ORG   vvCODE   
0C0E   00                     NOP      
0C0F   CD 56 06               CALL   doLIST   
0C12   E0 10 64 0E 30 0E 8C 06 DW   TEMIT,AT,EXECU,EXIT   
0C1A                             ;   NUF?        ( -- t )
0C1A                             ;               Return false if no input, else pause and if CR return true.
0C1A                          ;*Macro unroll: mCOLON  4,'NUF?',NUFQ
0C1A                          ;*Macro unroll:  mCODE 4, "NUF?", NUFQ
0C1A                          ALIGN   2   
0C1A                NUFQ:        
0C1A                VVCODE:   .SET   $   
0C1A                VVLEN:    .SET   (4 & 01FH) / CELLL   
16FE                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
16FE                VVNAME:   .SET   $   
16FE   1A 0C 0C 17            DW   vvCODE,vvLINK   
1702                VVLINK:   .SET   $   
1702   04 4E 55 46 3F         DB   4,"NUF?"   
0C1A                          .ORG   vvCODE   
0C1A   00                     NOP      
0C1B   CD 56 06               CALL   doLIST   
0C1E   F6 0B 48 10            DW   QKEY,DUPP   
0C22   34 0E 30 0C            DW   QBRAN,NUFQ1   
0C26   7C 10 02 0C 64 06 0D 00 D6 01 DW   DDROP,KEY,DoLIT,CRR,EQUAL   
0C30                NUFQ1:       
0C30   8C 06                  DW   EXIT   
0C32                             ;   PACE        ( -- )
0C32                             ;               Send a pace character for the file downloading process.
0C32                          ;*Macro unroll: hCOLON  4,'PACE',PACE
0C32                          ;*Macro unroll:  hCODE 4, "PACE", PACE
0C32                          ALIGN   2   
0C32                PACE:        
0C32   00                     NOP      
0C33   CD 56 06               CALL   doLIST   
0C36   64 06 0B 00 0E 0C 8C 06 DW   DOLIT,11,EMIT,EXIT   
0C3E                             ;   SPACE       ( -- )
0C3E                             ;               Send the blank character to the output device.
0C3E                          ;*Macro unroll: mCOLON  5,'SPACE',SPACE
0C3E                          ;*Macro unroll:  mCODE 5, "SPACE", SPACE
0C3E                          ALIGN   2   
0C3E                SPACE:       
0C3E                VVCODE:   .SET   $   
0C3E                VVLEN:    .SET   (5 & 01FH) / CELLL   
16F4                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
16F4                VVNAME:   .SET   $   
16F4   3E 0C 02 17            DW   vvCODE,vvLINK   
16F8                VVLINK:   .SET   $   
16F8   05 53 50 41 43 45      DB   5,"SPACE"   
0C3E                          .ORG   vvCODE   
0C3E   00                     NOP      
0C3F   CD 56 06               CALL   doLIST   
0C42   E8 07 0E 0C 8C 06      DW   BLANK,EMIT,EXIT   
0C48                             ;   SPACES      ( +n -- )
0C48                             ;               Send n spaces to the output device.
0C48                          ;*Macro unroll: mCOLON  6,'SPACES',SPACS
0C48                          ;*Macro unroll:  mCODE 6, "SPACES", SPACS
0C48                          ALIGN   2   
0C48                SPACS:       
0C48                VVCODE:   .SET   $   
0C48                VVLEN:    .SET   (6 & 01FH) / CELLL   
16E8                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
16E8                VVNAME:   .SET   $   
16E8   48 0C F8 16            DW   vvCODE,vvLINK   
16EC                VVLINK:   .SET   $   
16EC   06 53 50 41 43 45 53   DB   6,"SPACES"   
0C48                          .ORG   vvCODE   
0C48   00                     NOP      
0C49   CD 56 06               CALL   doLIST   
0C4C   64 06 00 00 32 02 2C 10 DW   DOLIT,0,MAX,TOR   
0C54   40 0E 5A 0C            DW   BRAN,CHAR2   
0C58                CHAR1:       
0C58   3E 0C                  DW   SPACE   
0C5A                CHAR2:       
0C5A   02 07 58 0C            DW   DONXT,CHAR1   
0C5E   8C 06                  DW   EXIT   
0C60                             ;   TYPE        ( b u -- )
0C60                             ;               Output u characters from b.
0C60                          ;*Macro unroll: mCOLON	4,'TYPE',TYPEE
0C60                          ;*Macro unroll:  mCODE 4, "TYPE", TYPEE
0C60                          ALIGN   2   
0C60                TYPEE:       
0C60                VVCODE:   .SET   $   
0C60                VVLEN:    .SET   (4 & 01FH) / CELLL   
16DE                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
16DE                VVNAME:   .SET   $   
16DE   60 0C EC 16            DW   vvCODE,vvLINK   
16E2                VVLINK:   .SET   $   
16E2   04 54 59 50 45         DB   4,"TYPE"   
0C60                          .ORG   vvCODE   
0C60   00                     NOP      
0C61   CD 56 06               CALL   doLIST   
0C64   2C 10                  DW   TOR   
0C66   40 0E 76 0C            DW   BRAN,TYPE2   
0C6A                TYPE1:       
0C6A   48 10 74 0E 0E 0C      DW   DUPP,CAT,EMIT   
0C70   64 06 01 00 64 01      DW   DOLIT,1,PLUS   
0C76                TYPE2:       
0C76   02 07 6A 0C            DW   DONXT,TYPE1   
0C7A   4C 10 8C 06            DW   DROP,EXIT   
0C7E                             ;   CR          ( -- )
0C7E                             ;               Output a carriage return and a line feed.
0C7E                          ;*Macro unroll: mCOLON	2,'CR',CR
0C7E                          ;*Macro unroll:  mCODE 2, "CR", CR
0C7E                          ALIGN   2   
0C7E                CR:          
0C7E                VVCODE:   .SET   $   
0C7E                VVLEN:    .SET   (2 & 01FH) / CELLL   
16D6                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
16D6                VVNAME:   .SET   $   
16D6   7E 0C E2 16            DW   vvCODE,vvLINK   
16DA                VVLINK:   .SET   $   
16DA   02 43 52               DB   2,"CR"   
0C7E                          .ORG   vvCODE   
0C7E   00                     NOP      
0C7F   CD 56 06               CALL   doLIST   
0C82   64 06 0D 00 0E 0C 64 06 0A 00 0E 0C 8C 06 DW   DoLIT,CRR,EMIT,DoLIT,LFF,EMIT,EXIT   
0C90                             ;   do$         ( -- a )
0C90                             ;               Return the address of a compiled string.
0C90                          ;*Macro unroll: mCOLON  COMPO+3,'do$',DOSTR
0C90                          ;*Macro unroll:  mCODE COMPO+3, "do$", DOSTR
0C90                          ALIGN   2   
0C90                DOSTR:       
0C90                VVCODE:   .SET   $   
0C90                VVLEN:    .SET   (COMPO+3 & 01FH) / CELLL   
16AE                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
16AE                VVNAME:   .SET   $   
16AE   90 0C DA 16            DW   vvCODE,vvLINK   
16B2                VVLINK:   .SET   $   
16B2   23 64 6F 24            DB   COMPO+3,"do$"   
0C90                          .ORG   vvCODE   
0C90   00                     NOP      
0C91   CD 56 06               CALL   doLIST   
0C94   3A 10 7C 0E 3A 10 DA 0E 64 01 DW   RFROM,RAT,RFROM,COUNT,PLUS   
0C9E   D2 0F 2C 10 50 10 2C 10 8C 06 DW   ALGND,TOR,SWAP,TOR,EXIT   
0CA8                             ;   $"|         ( -- a )
0CA8                             ;               Run time routine compiled by $". Return address of a compiled string.
0CA8                          ;*Macro unroll: hCOLON  COMPO+3,'$||',STRQP
0CA8                          ;*Macro unroll:  hCODE COMPO+3, "$||", STRQP
0CA8                          ALIGN   2   
0CA8                STRQP:       
0CA8   00                     NOP      
0CA9   CD 56 06               CALL   doLIST   
0CAC   90 0C 8C 06            DW   DOSTR,EXIT   ;force a call to do$
0CB0                             ;   ."|         ( -- )
0CB0                             ;               Run time routine of ." . Output a compiled string.
0CB0                          ;*Macro unroll: hCOLON  COMPO+3,'.||',DOTQP
0CB0                          ;*Macro unroll:  hCODE COMPO+3, ".||", DOTQP
0CB0                          ALIGN   2   
0CB0                DOTQP:       
0CB0   00                     NOP      
0CB1   CD 56 06               CALL   doLIST   
0CB4   90 0C DA 0E 60 0C 8C 06 DW   DOSTR,COUNT,TYPEE,EXIT   
0CBC                             ;   .R          ( n +n -- )
0CBC                             ;               Display an integer in a field of n columns, right justified.
0CBC                          ;*Macro unroll: mCOLON  2,'.R',DOTR
0CBC                          ;*Macro unroll:  mCODE 2, ".R", DOTR
0CBC                          ALIGN   2   
0CBC                DOTR:        
0CBC                VVCODE:   .SET   $   
0CBC                VVLEN:    .SET   (2 & 01FH) / CELLL   
16A6                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
16A6                VVNAME:   .SET   $   
16A6   BC 0C B2 16            DW   vvCODE,vvLINK   
16AA                VVLINK:   .SET   $   
16AA   02 2E 52               DB   2,".R"   
0CBC                          .ORG   vvCODE   
0CBC   00                     NOP      
0CBD   CD 56 06               CALL   doLIST   
0CC0   2C 10 B6 07 3A 10 58 10 BC 01 DW   TOR,STR,RFROM,OVER,SUBB   
0CCA   48 0C 60 0C 8C 06      DW   SPACS,TYPEE,EXIT   
0CD0                             ;   U.R         ( u +n -- )
0CD0                             ;               Display an unsigned integer in n column, right justified.
0CD0                          ;*Macro unroll: mCOLON  3,'U.R',UDOTR
0CD0                          ;*Macro unroll:  mCODE 3, "U.R", UDOTR
0CD0                          ALIGN   2   
0CD0                UDOTR:       
0CD0                VVCODE:   .SET   $   
0CD0                VVLEN:    .SET   (3 & 01FH) / CELLL   
169E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
169E                VVNAME:   .SET   $   
169E   D0 0C AA 16            DW   vvCODE,vvLINK   
16A2                VVLINK:   .SET   $   
16A2   03 55 2E 52            DB   3,"U.R"   
0CD0                          .ORG   vvCODE   
0CD0   00                     NOP      
0CD1   CD 56 06               CALL   doLIST   
0CD4   2C 10 4E 07 80 07 A4 07 DW   TOR,BDIGS,DIGS,EDIGS   
0CDC   3A 10 58 10 BC 01      DW   RFROM,OVER,SUBB   
0CE2   48 0C 60 0C 8C 06      DW   SPACS,TYPEE,EXIT   
0CE8                             ;   U.          ( u -- )
0CE8                             ;               Display an unsigned integer in free format.
0CE8                          ;*Macro unroll: mCOLON  2,'U.',UDOT
0CE8                          ;*Macro unroll:  mCODE 2, "U.", UDOT
0CE8                          ALIGN   2   
0CE8                UDOT:        
0CE8                VVCODE:   .SET   $   
0CE8                VVLEN:    .SET   (2 & 01FH) / CELLL   
1696                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1696                VVNAME:   .SET   $   
1696   E8 0C A2 16            DW   vvCODE,vvLINK   
169A                VVLINK:   .SET   $   
169A   02 55 2E               DB   2,"U."   
0CE8                          .ORG   vvCODE   
0CE8   00                     NOP      
0CE9   CD 56 06               CALL   doLIST   
0CEC   4E 07 80 07 A4 07      DW   BDIGS,DIGS,EDIGS   
0CF2   3E 0C 60 0C 8C 06      DW   SPACE,TYPEE,EXIT   
0CF8                             ;   .           ( w -- )
0CF8                             ;               Display an integer in free format, preceeded by a space.
0CF8                          ;*Macro unroll: mCOLON  1,'.',DOT
0CF8                          ;*Macro unroll:  mCODE 1, ".", DOT
0CF8                          ALIGN   2   
0CF8                DOT:         
0CF8                VVCODE:   .SET   $   
0CF8                VVLEN:    .SET   (1 & 01FH) / CELLL   
1690                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1690                VVNAME:   .SET   $   
1690   F8 0C 9A 16            DW   vvCODE,vvLINK   
1694                VVLINK:   .SET   $   
1694   01 2E                  DB   1,"."   
0CF8                          .ORG   vvCODE   
0CF8   00                     NOP      
0CF9   CD 56 06               CALL   doLIST   
0CFC   08 11 64 0E 64 06 0A 00 5A 01 DW   BASE,AT,DOLIT,10,XORR   ;?decimal
0D06   34 0E 0E 0D            DW   QBRAN,DOT1   
0D0A   E8 0C 8C 06            DW   UDOT,EXIT   ;no, display unsigned
0D0E                DOT1:        
0D0E   B6 07 3E 0C 60 0C 8C 06 DW   STR,SPACE,TYPEE,EXIT   ;yes, display signed
0D16                             ;   .(          ( -- )
0D16                             ;               Output following string up to next ) .
0D16                          ;*Macro unroll: mCOLON  IMEDD+2,'.(',DOTPR
0D16                          ;*Macro unroll:  mCODE IMEDD+2, ".(", DOTPR
0D16                          ALIGN   2   
0D16                DOTPR:       
0D16                VVCODE:   .SET   $   
0D16                VVLEN:    .SET   (IMEDD+2 & 01FH) / CELLL   
1648                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1648                VVNAME:   .SET   $   
1648   16 0D 94 16            DW   vvCODE,vvLINK   
164C                VVLINK:   .SET   $   
164C   42 2E 28               DB   IMEDD+2,".("   
0D16                          .ORG   vvCODE   
0D16   00                     NOP      
0D17   CD 56 06               CALL   doLIST   
0D1A   64 06 8C 09 60 0C 8C 06 DW   DOLIT,")",PARSE,TYPEE,EXIT   
0D22                             ;   ?           ( a -- )
0D22                             ;               Display the contents in a memory cell.
0D22                          ;*Macro unroll: mCOLON  1,'?',QUEST
0D22                          ;*Macro unroll:  mCODE 1, "?", QUEST
0D22                          ALIGN   2   
0D22                QUEST:       
0D22                VVCODE:   .SET   $   
0D22                VVLEN:    .SET   (1 & 01FH) / CELLL   
1642                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1642                VVNAME:   .SET   $   
1642   22 0D 4C 16            DW   vvCODE,vvLINK   
1646                VVLINK:   .SET   $   
1646   01 3F                  DB   1,"?"   
0D22                          .ORG   vvCODE   
0D22   00                     NOP      
0D23   CD 56 06               CALL   doLIST   
0D26   64 0E F8 0C 8C 06      DW   AT,DOT,EXIT   
0D2C                             ;   ^H          ( bot eot cur -- bot eot cur )
0D2C                             ;               Backup the cursor by one character.
0D2C                          ;*Macro unroll: mCOLON  2,'^H',BKSP
0D2C                          ;*Macro unroll:  mCODE 2, "^H", BKSP
0D2C                          ALIGN   2   
0D2C                BKSP:        
0D2C                VVCODE:   .SET   $   
0D2C                VVLEN:    .SET   (2 & 01FH) / CELLL   
163A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
163A                VVNAME:   .SET   $   
163A   2C 0D 46 16            DW   vvCODE,vvLINK   
163E                VVLINK:   .SET   $   
163E   02 5E 48               DB   2,"^H"   
0D2C                          .ORG   vvCODE   
0D2C   00                     NOP      
0D2D   CD 56 06               CALL   doLIST   
0D30   2C 10 58 10 3A 10 50 10 58 10 5A 01 DW   TOR,OVER,RFROM,SWAP,OVER,XORR   
0D3C   34 0E 5C 0D            DW   QBRAN,BACK1   
0D40   64 06 08 00 F8 10 10 0F 64 06 01 00 BC 01 DW   DOLIT,BKSPP,TECHO,ATEXE,DOLIT,1,SUBB   
0D4E   E8 07 F8 10 10 0F      DW   BLANK,TECHO,ATEXE   
0D54   64 06 08 00 F8 10 10 0F DW   DOLIT,BKSPP,TECHO,ATEXE   
0D5C                BACK1:       
0D5C   8C 06                  DW   EXIT   
0D5E                             ;   TAP         ( bot eot cur c -- bot eot cur )
0D5E                             ;               Accept and echo the key stroke and bump the cursor.
0D5E                          ;*Macro unroll: mCOLON  3,'TAP',TAP
0D5E                          ;*Macro unroll:  mCODE 3, "TAP", TAP
0D5E                          ALIGN   2   
0D5E                TAP:         
0D5E                VVCODE:   .SET   $   
0D5E                VVLEN:    .SET   (3 & 01FH) / CELLL   
1632                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1632                VVNAME:   .SET   $   
1632   5E 0D 3E 16            DW   vvCODE,vvLINK   
1636                VVLINK:   .SET   $   
1636   03 54 41 50            DB   3,"TAP"   
0D5E                          .ORG   vvCODE   
0D5E   00                     NOP      
0D5F   CD 56 06               CALL   doLIST   
0D62   48 10 F8 10 10 0F      DW   DUPP,TECHO,ATEXE   
0D68   58 10 6C 0E 64 06 01 00 64 01 8C 06 DW   OVER,CSTOR,DOLIT,1,PLUS,EXIT   
0D74                             ;   kTAP        ( bot eot cur c -- bot eot cur )
0D74                             ;               Process a key stroke, CR or backspace.
0D74                          ;*Macro unroll: mCOLON  4,'kTAP',KTAP
0D74                          ;*Macro unroll:  mCODE 4, "kTAP", KTAP
0D74                          ALIGN   2   
0D74                KTAP:        
0D74                VVCODE:   .SET   $   
0D74                VVLEN:    .SET   (4 & 01FH) / CELLL   
1628                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1628                VVNAME:   .SET   $   
1628   74 0D 36 16            DW   vvCODE,vvLINK   
162C                VVLINK:   .SET   $   
162C   04 6B 54 41 50         DB   4,"kTAP"   
0D74                          .ORG   vvCODE   
0D74   00                     NOP      
0D75   CD 56 06               CALL   doLIST   
0D78   48 10 64 06 0D 00 5A 01 DW   DUPP,DOLIT,CRR,XORR   
0D80   34 0E 98 0D            DW   QBRAN,KTAP2   
0D84   64 06 08 00 5A 01      DW   DOLIT,BKSPP,XORR   
0D8A   34 0E 94 0D            DW   QBRAN,KTAP1   
0D8E   E8 07 5E 0D 8C 06      DW   BLANK,TAP,EXIT   
0D94                KTAP1:       
0D94   2C 0D 8C 06            DW   BKSP,EXIT   
0D98                KTAP2:       
0D98   4C 10 50 10 4C 10 48 10 8C 06 DW   DROP,SWAP,DROP,DUPP,EXIT   
0DA2                             ;   accept      ( b u -- b u )
0DA2                             ;               Accept characters to input buffer. Return with actual count.
0DA2                          ;*Macro unroll: mCOLON  6,'accept',ACCEP
0DA2                          ;*Macro unroll:  mCODE 6, "accept", ACCEP
0DA2                          ALIGN   2   
0DA2                ACCEP:       
0DA2                VVCODE:   .SET   $   
0DA2                VVLEN:    .SET   (6 & 01FH) / CELLL   
161C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
161C                VVNAME:   .SET   $   
161C   A2 0D 2C 16            DW   vvCODE,vvLINK   
1620                VVLINK:   .SET   $   
1620   06 61 63 63 65 70 74   DB   6,"accept"   
0DA2                          .ORG   vvCODE   
0DA2   00                     NOP      
0DA3   CD 56 06               CALL   doLIST   
0DA6   58 10 64 01 58 10      DW   OVER,PLUS,OVER   
0DAC                ACCP1:       
0DAC   86 10 5A 01            DW   DDUP,XORR   
0DB0   34 0E D2 0D            DW   QBRAN,ACCP4   
0DB4   02 0C 48 10            DW   KEY,DUPP   
0DB8   E8 07 64 06 7F 00 56 02 DW   BLANK,DOLIT,127,WITHI   
0DC0   34 0E CA 0D            DW   QBRAN,ACCP2   
0DC4   5E 0D                  DW   TAP   
0DC6   40 0E CE 0D            DW   BRAN,ACCP3   
0DCA                ACCP2:       
0DCA   F0 10 10 0F            DW   TTAP,ATEXE   
0DCE                ACCP3:       
0DCE   40 0E AC 0D            DW   BRAN,ACCP1   
0DD2                ACCP4:       
0DD2   4C 10 58 10 BC 01 8C 06 DW   DROP,OVER,SUBB,EXIT   
0DDA                             ;   EXPECT      ( b u -- )
0DDA                             ;               Accept input stream and store count in SPAN.
0DDA                          ;*Macro unroll: hCOLON  6,'EXPECT',EXPEC
0DDA                          ;*Macro unroll:  hCODE 6, "EXPECT", EXPEC
0DDA                          ALIGN   2   
0DDA                EXPEC:       
0DDA   00                     NOP      
0DDB   CD 56 06               CALL   doLIST   
0DDE   E8 10 10 0F 18 11 5A 0E 4C 10 8C 06 DW   TEXPE,ATEXE,SPAN,STORE,DROP,EXIT   
0DEA                             ;   QUERY       ( -- )
0DEA                             ;               Accept input stream to terminal input buffer.
0DEA                          ;*Macro unroll: hCOLON  5,'QUERY',QUERY
0DEA                          ;*Macro unroll:  hCODE 5, "QUERY", QUERY
0DEA                          ALIGN   2   
0DEA                QUERY:       
0DEA   00                     NOP      
0DEB   CD 56 06               CALL   doLIST   
0DEE   04 0F 64 06 50 00 E8 10 10 0F 28 11 5A 0E DW   TIB,DOLIT,80,TEXPE,ATEXE,NTIB,STORE   
0DFC   4C 10 64 06 00 00 20 11 5A 0E 8C 06 DW   DROP,DOLIT,0,INN,STORE,EXIT   
0E08                NEXT_STEP:      
0E08   5E                     LD   E,(HL)   ; 7t
0E09   23                     INC   HL   ; 6t
0E0A   56                     LD   D,(HL)   ; 7t
0E0B   23                     INC   HL   ; 6t
0E0C   EB                     EX   DE,HL   ; 4t
0E0D   E9                     JP   (HL)   ; 4t
0E0E                          ;*Macro unroll: mCOLON	4,'COLD',COLD
0E0E                          ;*Macro unroll:  mCODE 4, "COLD", COLD
0E0E                          ALIGN   2   
0E0E                COLD:        
0E0E                VVCODE:   .SET   $   
0E0E                VVLEN:    .SET   (4 & 01FH) / CELLL   
1612                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1612                VVNAME:   .SET   $   
1612   0E 0E 20 16            DW   vvCODE,vvLINK   
1616                VVLINK:   .SET   $   
1616   04 43 4F 4C 44         DB   4,"COLD"   
0E0E                          .ORG   vvCODE   
0E0E   00                     NOP      
0E0F   CD 56 06               CALL   doLIST   
0E12   D0 0B                  DW   STOIO   
0E14                             ; DW	DOLIT, 65, EMIT
0E14   64 06 1E 0E DA 0E 60 0C DW   DOLIT,HELLO,COUNT,TYPEE   
0E1C   2E 0E                  DW   QUIT   
0E1E   0F 48 65 6C 6C 6F 20 46 6F 72 74 68 21 20 0D 0A HELLO:   .PSTR   "Hello Forth! \r\n"   
0E2E                          ;*Macro unroll: mCODE  4, 'QUIT', QUIT
0E2E                          ALIGN   2   
0E2E                QUIT:        
0E2E                VVCODE:   .SET   $   
0E2E                VVLEN:    .SET   (4 & 01FH) / CELLL   
1608                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1608                VVNAME:   .SET   $   
1608   2E 0E 16 16            DW   vvCODE,vvLINK   
160C                VVLINK:   .SET   $   
160C   04 51 55 49 54         DB   4,"QUIT"   
0E2E                          .ORG   vvCODE   
0E2E   76                     HALT      
0E2F                             ;   EXECUTE	( i*x xt -- j*x )		\ CORE
0E2F                             ;		Perform the semantics indentified by execution token, xt.
0E2F                          ;*Macro unroll: mCODE	7,'EXECUTE', EXECU
0E2F                          ALIGN   2   
0E30                EXECU:       
0E30                VVCODE:   .SET   $   
0E30                VVLEN:    .SET   (7 & 01FH) / CELLL   
15FC                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
15FC                VVNAME:   .SET   $   
15FC   30 0E 0C 16            DW   vvCODE,vvLINK   
1600                VVLINK:   .SET   $   
1600   07 45 58 45 43 55 54 45 DB   7,"EXECUTE"   
0E30                          .ORG   vvCODE   
0E30   60                     LD   H,B   
0E31   69                     LD   L,C   
0E32   C1                     POP   BC   
0E33   E9                     JP   (HL)   
0E34                             ; 
0E34                             ;   0BRAN	( flag -- )
0E34                             ;		BRAN if flag is zero.
0E34                          ;*Macro unroll: hCODE	COMPO+7,'?branch', QBRAN
0E34                          ALIGN   2   
0E34                QBRAN:       
0E34   78                     LD   A,B   ; 4t
0E35   B1                     OR   C   ; 4t
0E36   C1                     POP   BC   ;10t
0E37   CA 40 0E               JP   Z,BRAN   ;10/7t a fast dec is ok, only
0E3A   13                     INC   DE   ; 6t yes,continue past the BRAN offset
0E3B   13                     INC   DE   ; 6t
0E3C                          ;*Macro unroll: 	mNEXT
0E3C   EB                     EX   DE,HL   
0E3D                          ;*Macro unroll:  mNEXTHL                         ; 34t
0E3D   FD E9                  JP   (IY)   ; 34t
0E3F                             ;   BRAN	( -- )
0E3F                             ;		BRAN to an inline address.
0E3F                          ;*Macro unroll: hCODE	COMPO+6,'branch', BRAN
0E3F                          ALIGN   2   
0E40                BRAN:        
0E40   1A                     LD   A,(DE)   ; 7t go back to the loop
0E41   6F                     LD   L,A   ; 4t
0E42   13                     INC   DE   ; 6t
0E43   1A                     LD   A,(DE)   ; 7t
0E44   67                     LD   H,A   ; 4t
0E45                          ;*Macro unroll: 	mNEXTHL
0E45   FD E9                  JP   (IY)   
0E47                             ; 
0E47                             ;   TYPECSTR    ( cstr -- )
0E47                             ;   Similar to TYPE but prints C null terminated strings
0E47                          ;*Macro unroll: mCODE	3,'TYPESZ',TypeCStr
0E47                          ALIGN   2   
0E48                TYPECSTR:      
0E48                VVCODE:   .SET   $   
0E48                VVLEN:    .SET   (3 & 01FH) / CELLL   
15F4                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
15F4                VVNAME:   .SET   $   
15F4   48 0E 00 16            DW   vvCODE,vvLINK   
15F8                VVLINK:   .SET   $   
15F8   03 54 59 50 45 53 5A   DB   3,"TYPESZ"   
0E48                          .ORG   vvCODE   
0E48   60                     LD   H,B   
0E49   69                     LD   L,C   
0E4A   CD F1 00               CALL   PRINTSZ   
0E4D   C1                     POP   BC   
0E4E                          ;*Macro unroll:  mNEXT
0E4E   EB                     EX   DE,HL   
0E4F                          ;*Macro unroll:  mNEXTHL                         ; 34t
0E4F   FD E9                  JP   (IY)   ; 34t
0E51                             ;   THROW    ( cstr -- )
0E51                             ;   Prints string message and returns TODO: restart Forth interpreter QUIT
0E51                          ;*Macro unroll: mCOLON	5,'THROWX',THROWX
0E51                          ;*Macro unroll:  mCODE 5, "THROWX", THROWX
0E51                          ALIGN   2   
0E52                THROWX:      
0E52                VVCODE:   .SET   $   
0E52                VVLEN:    .SET   (5 & 01FH) / CELLL   
15EA                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
15EA                VVNAME:   .SET   $   
15EA   52 0E F8 15            DW   vvCODE,vvLINK   
15EE                VVLINK:   .SET   $   
15EE   05 54 48 52 4F 57 58   DB   5,"THROWX"   
0E52                          .ORG   vvCODE   
0E52   00                     NOP      
0E53   CD 56 06               CALL   doLIST   
0E56   48 0E 8C 06            DW   TypeCStr,EXIT   
0E5A                             ;   !           ( w a -- )
0E5A                             ;               Pop the data stack to memory.
0E5A                          ;*Macro unroll: mCODE	1,'!',Store
0E5A                          ALIGN   2   
0E5A                STORE:       
0E5A                VVCODE:   .SET   $   
0E5A                VVLEN:    .SET   (1 & 01FH) / CELLL   
15E4                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
15E4                VVNAME:   .SET   $   
15E4   5A 0E EE 15            DW   vvCODE,vvLINK   
15E8                VVLINK:   .SET   $   
15E8   01 21                  DB   1,"!"   
0E5A                          .ORG   vvCODE   
0E5A   60                     LD   H,B   
0E5B   69                     LD   L,C   
0E5C   C1                     POP   BC   
0E5D   71                     LD   (HL),C   
0E5E   23                     INC   HL   
0E5F   70                     LD   (HL),B   
0E60   C1                     POP   BC   
0E61                          ;*Macro unroll: 	mNEXT
0E61   EB                     EX   DE,HL   
0E62                          ;*Macro unroll:  mNEXTHL                         ; 34t
0E62   FD E9                  JP   (IY)   ; 34t
0E64                             ;   @           ( a -- w )
0E64                             ;               Push memory location to the data stack.
0E64                          ;*Macro unroll: mCODE	1,'@', AT
0E64                          ALIGN   2   
0E64                AT:          
0E64                VVCODE:   .SET   $   
0E64                VVLEN:    .SET   (1 & 01FH) / CELLL   
15DE                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
15DE                VVNAME:   .SET   $   
15DE   64 0E E8 15            DW   vvCODE,vvLINK   
15E2                VVLINK:   .SET   $   
15E2   01 40                  DB   1,"@"   
0E64                          .ORG   vvCODE   
0E64   60                     LD   H,B   
0E65   69                     LD   L,C   
0E66   4E                     LD   C,(HL)   
0E67   23                     INC   HL   
0E68   46                     LD   B,(HL)   
0E69                          ;*Macro unroll: 	mNEXT
0E69   EB                     EX   DE,HL   
0E6A                          ;*Macro unroll:  mNEXTHL                         ; 34t
0E6A   FD E9                  JP   (IY)   ; 34t
0E6C                             ;   C!          ( c b -- )
0E6C                             ;               Pop the data stack to byte memory.
0E6C                          ;*Macro unroll: mCODE	2,'C!',CSTOR
0E6C                          ALIGN   2   
0E6C                CSTOR:       
0E6C                VVCODE:   .SET   $   
0E6C                VVLEN:    .SET   (2 & 01FH) / CELLL   
15D6                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
15D6                VVNAME:   .SET   $   
15D6   6C 0E E2 15            DW   vvCODE,vvLINK   
15DA                VVLINK:   .SET   $   
15DA   02 43 21               DB   2,"C!"   
0E6C                          .ORG   vvCODE   
0E6C   60                     LD   H,B   
0E6D   69                     LD   L,C   
0E6E   C1                     POP   BC   
0E6F   71                     LD   (HL),C   
0E70   C1                     POP   BC   
0E71                          ;*Macro unroll: 	mNEXT
0E71   EB                     EX   DE,HL   
0E72                          ;*Macro unroll:  mNEXTHL                         ; 34t
0E72   FD E9                  JP   (IY)   ; 34t
0E74                             ;   C@          ( b -- c )
0E74                             ;               Push byte memory location to the data stack.
0E74                          ;*Macro unroll: mCODE	2,'C@',CAT
0E74                          ALIGN   2   
0E74                CAT:         
0E74                VVCODE:   .SET   $   
0E74                VVLEN:    .SET   (2 & 01FH) / CELLL   
15CE                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
15CE                VVNAME:   .SET   $   
15CE   74 0E DA 15            DW   vvCODE,vvLINK   
15D2                VVLINK:   .SET   $   
15D2   02 43 40               DB   2,"C@"   
0E74                          .ORG   vvCODE   
0E74   0A                     LD   A,(BC)   
0E75   4F                     LD   C,A   
0E76   06 00                  LD   B,0   
0E78                          ;*Macro unroll: 	mNEXT
0E78   EB                     EX   DE,HL   
0E79                          ;*Macro unroll:  mNEXTHL                         ; 34t
0E79   FD E9                  JP   (IY)   ; 34t
0E7B                             ;   R@          ( -- w )
0E7B                             ;               Copy top of return stack to the data stack.
0E7B                          ;*Macro unroll: mCODE	COMPO+2,'R@',RAT
0E7B                          ALIGN   2   
0E7C                RAT:         
0E7C                VVCODE:   .SET   $   
0E7C                VVLEN:    .SET   (COMPO+2 & 01FH) / CELLL   
15A6                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
15A6                VVNAME:   .SET   $   
15A6   7C 0E D2 15            DW   vvCODE,vvLINK   
15AA                VVLINK:   .SET   $   
15AA   22 52 40               DB   COMPO+2,"R@"   
0E7C                          .ORG   vvCODE   
0E7C   C5                     PUSH   BC   
0E7D   DD 4E 00               LD   C,(IX+0)   
0E80   DD 46 01               LD   B,(IX+1)   
0E83                          ;*Macro unroll: 	mNEXT
0E83   EB                     EX   DE,HL   
0E84                          ;*Macro unroll:  mNEXTHL                         ; 34t
0E84   FD E9                  JP   (IY)   ; 34t
0E86                             ;   RP@         ( -- a )
0E86                             ;               Push the current RP to the data stack
0E86                          ;*Macro unroll: mCODE	COMPO+3, 'rp@', RPAT
0E86                          ALIGN   2   
0E86                RPAT:        
0E86                VVCODE:   .SET   $   
0E86                VVLEN:    .SET   (COMPO+3 & 01FH) / CELLL   
157E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
157E                VVNAME:   .SET   $   
157E   86 0E AA 15            DW   vvCODE,vvLINK   
1582                VVLINK:   .SET   $   
1582   23 72 70 40            DB   COMPO+3,"rp@"   
0E86                          .ORG   vvCODE   
0E86   C5                     DB   0C5h   ; PUSH	BC	;11t
0E87   DD E5                  DB   0DDh,0E5h   ; PUSH IX	;15t
0E89   C1                     DB   0C1h   ; POP	BC	;10t
0E8A                          ;*Macro unroll:  mNEXT
0E8A   EB                     EX   DE,HL   
0E8B                          ;*Macro unroll:  mNEXTHL                         ; 34t
0E8B   FD E9                  JP   (IY)   ; 34t
0E8D                             ;   RP!         ( a -- )
0E8D                             ;               Set the return stack pointer.
0E8D                          ;*Macro unroll: mCODE	COMPO+3,'rp!',RPSTO
0E8D                          ALIGN   2   
0E8E                RPSTO:       
0E8E                VVCODE:   .SET   $   
0E8E                VVLEN:    .SET   (COMPO+3 & 01FH) / CELLL   
1556                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1556                VVNAME:   .SET   $   
1556   8E 0E 82 15            DW   vvCODE,vvLINK   
155A                VVLINK:   .SET   $   
155A   23 72 70 21            DB   COMPO+3,"rp!"   
0E8E                          .ORG   vvCODE   
0E8E   C5                     DB   0C5h   ; PUSH	BC	;11t
0E8F   DD E1                  DB   0DDh,0E1h   ; POP IX	;14t
0E91   C1                     DB   0C1h   ; POP	BC	;10t
0E92                          ;*Macro unroll: 	mNEXT
0E92   EB                     EX   DE,HL   
0E93                          ;*Macro unroll:  mNEXTHL                         ; 34t
0E93   FD E9                  JP   (IY)   ; 34t
0E95                             ;   SP@         ( -- a )
0E95                             ;               Push the current data stack pointer.
0E95                          ;*Macro unroll: mCODE	3, 'sp@', SPAT
0E95                          ALIGN   2   
0E96                SPAT:        
0E96                VVCODE:   .SET   $   
0E96                VVLEN:    .SET   (3 & 01FH) / CELLL   
154E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
154E                VVNAME:   .SET   $   
154E   96 0E 5A 15            DW   vvCODE,vvLINK   
1552                VVLINK:   .SET   $   
1552   03 73 70 40            DB   3,"sp@"   
0E96                          .ORG   vvCODE   
0E96   C5                     DB   0C5h   ; PUSH	BC	;11t
0E97   21                     DB   021h   ; LD	HL,0	;10t
0E98   00 00                  DW   0   
0E9A   39                     DB   039h   ; ADD	HL,SP	;11t
0E9B   44                     DB   044h   ; LD	B,H	; 4t
0E9C   4D                     DB   04Dh   ; LD	C,L	; 4t
0E9D                          ;*Macro unroll: 	mNEXT
0E9D   EB                     EX   DE,HL   
0E9E                          ;*Macro unroll:  mNEXTHL                         ; 34t
0E9E   FD E9                  JP   (IY)   ; 34t
0EA0                             ;   SP!         ( a -- )
0EA0                             ;               Set the data stack pointer.
0EA0                          ;*Macro unroll: mCODE	3,'sp!',SPSTO
0EA0                          ALIGN   2   
0EA0                SPSTO:       
0EA0                VVCODE:   .SET   $   
0EA0                VVLEN:    .SET   (3 & 01FH) / CELLL   
1546                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1546                VVNAME:   .SET   $   
1546   A0 0E 52 15            DW   vvCODE,vvLINK   
154A                VVLINK:   .SET   $   
154A   03 73 70 21            DB   3,"sp!"   
0EA0                          .ORG   vvCODE   
0EA0   60                     DB   060h   ; LD	H,B	; 4t
0EA1   69                     DB   069h   ; LD	L,C	; 4t
0EA2   F9                     DB   0F9h   ; LD	SP,HL	; 6t
0EA3   C1                     DB   0C1h   ; POP	BC	;10t
0EA4                          ;*Macro unroll: 	mNEXT
0EA4   EB                     EX   DE,HL   
0EA5                          ;*Macro unroll:  mNEXTHL                         ; 34t
0EA5   FD E9                  JP   (IY)   ; 34t
0EA7                             ;   +!          ( n a -- )
0EA7                             ;               Add n to the contents at address a.
0EA7                          ;*Macro unroll: mCOLON  2,'+!',PSTOR
0EA7                          ;*Macro unroll:  mCODE 2, "+!", PSTOR
0EA7                          ALIGN   2   
0EA8                PSTOR:       
0EA8                VVCODE:   .SET   $   
0EA8                VVLEN:    .SET   (2 & 01FH) / CELLL   
153E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
153E                VVNAME:   .SET   $   
153E   A8 0E 4A 15            DW   vvCODE,vvLINK   
1542                VVLINK:   .SET   $   
1542   02 2B 21               DB   2,"+!"   
0EA8                          .ORG   vvCODE   
0EA8   00                     NOP      
0EA9   CD 56 06               CALL   doLIST   
0EAC   50 10 58 10 64 0E 64 01 DW   SWAP,OVER,AT,PLUS   
0EB4   50 10 5A 0E 8C 06      DW   SWAP,STORE,EXIT   
0EBA                             ;   2!          ( d a -- )
0EBA                             ;               Store the double integer to address a.
0EBA                          ;*Macro unroll: mCOLON  2,'2!',DSTOR
0EBA                          ;*Macro unroll:  mCODE 2, "2!", DSTOR
0EBA                          ALIGN   2   
0EBA                DSTOR:       
0EBA                VVCODE:   .SET   $   
0EBA                VVLEN:    .SET   (2 & 01FH) / CELLL   
1536                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1536                VVNAME:   .SET   $   
1536   BA 0E 42 15            DW   vvCODE,vvLINK   
153A                VVLINK:   .SET   $   
153A   02 32 21               DB   2,"2!"   
0EBA                          .ORG   vvCODE   
0EBA   00                     NOP      
0EBB   CD 56 06               CALL   doLIST   
0EBE   50 10 58 10 5A 0E      DW   SWAP,OVER,STORE   
0EC4   D6 03 5A 0E 8C 06      DW   CELLP,STORE,EXIT   
0ECA                             ;   2@          ( a -- d )
0ECA                             ;               Fetch double integer from address a.
0ECA                          ;*Macro unroll: mCOLON  2,'2@',DAT
0ECA                          ;*Macro unroll:  mCODE 2, "2@", DAT
0ECA                          ALIGN   2   
0ECA                DAT:         
0ECA                VVCODE:   .SET   $   
0ECA                VVLEN:    .SET   (2 & 01FH) / CELLL   
152E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
152E                VVNAME:   .SET   $   
152E   CA 0E 3A 15            DW   vvCODE,vvLINK   
1532                VVLINK:   .SET   $   
1532   02 32 40               DB   2,"2@"   
0ECA                          .ORG   vvCODE   
0ECA   00                     NOP      
0ECB   CD 56 06               CALL   doLIST   
0ECE   48 10 D6 03 64 0E      DW   DUPP,CELLP,AT   
0ED4   50 10 64 0E 8C 06      DW   SWAP,AT,EXIT   
0EDA                             ;   COUNT       ( b -- b +n )
0EDA                             ;               Return count byte of a string and add 1 to byte address.
0EDA                          ;*Macro unroll: mCOLON  5,'COUNT',COUNT
0EDA                          ;*Macro unroll:  mCODE 5, "COUNT", COUNT
0EDA                          ALIGN   2   
0EDA                COUNT:       
0EDA                VVCODE:   .SET   $   
0EDA                VVLEN:    .SET   (5 & 01FH) / CELLL   
1524                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1524                VVNAME:   .SET   $   
1524   DA 0E 32 15            DW   vvCODE,vvLINK   
1528                VVLINK:   .SET   $   
1528   05 43 4F 55 4E 54      DB   5,"COUNT"   
0EDA                          .ORG   vvCODE   
0EDA   00                     NOP      
0EDB   CD 56 06               CALL   doLIST   
0EDE   48 10 64 06 01 00 64 01 DW   DUPP,DOLIT,1,PLUS   
0EE6   50 10 74 0E 8C 06      DW   SWAP,CAT,EXIT   
0EEC                             ;   HERE        ( -- a )
0EEC                             ;               Return the top of the code dictionary.
0EEC                          ;*Macro unroll: mCOLON  4,'HERE',HERE
0EEC                          ;*Macro unroll:  mCODE 4, "HERE", HERE
0EEC                          ALIGN   2   
0EEC                HERE:        
0EEC                VVCODE:   .SET   $   
0EEC                VVLEN:    .SET   (4 & 01FH) / CELLL   
151A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
151A                VVNAME:   .SET   $   
151A   EC 0E 28 15            DW   vvCODE,vvLINK   
151E                VVLINK:   .SET   $   
151E   04 48 45 52 45         DB   4,"HERE"   
0EEC                          .ORG   vvCODE   
0EEC   00                     NOP      
0EED   CD 56 06               CALL   doLIST   
0EF0   68 11 64 0E 8C 06      DW   CP,AT,EXIT   
0EF6                             ;   PAD         ( -- a )
0EF6                             ;               Return the address of a temporary buffer.
0EF6                          ;*Macro unroll: mCOLON  3,'PAD',PAD
0EF6                          ;*Macro unroll:  mCODE 3, "PAD", PAD
0EF6                          ALIGN   2   
0EF6                PAD:         
0EF6                VVCODE:   .SET   $   
0EF6                VVLEN:    .SET   (3 & 01FH) / CELLL   
1512                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1512                VVNAME:   .SET   $   
1512   F6 0E 1E 15            DW   vvCODE,vvLINK   
1516                VVLINK:   .SET   $   
1516   03 50 41 44            DB   3,"PAD"   
0EF6                          .ORG   vvCODE   
0EF6   00                     NOP      
0EF7   CD 56 06               CALL   doLIST   
0EFA   EC 0E 64 06 50 00 64 01 8C 06 DW   HERE,DOLIT,80,PLUS,EXIT   
0F04                             ;   TIB         ( -- a )
0F04                             ;               Return the address of the terminal input buffer.
0F04                          ;*Macro unroll: mCOLON  3,'TIB',TIB
0F04                          ;*Macro unroll:  mCODE 3, "TIB", TIB
0F04                          ALIGN   2   
0F04                TIB:         
0F04                VVCODE:   .SET   $   
0F04                VVLEN:    .SET   (3 & 01FH) / CELLL   
150A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
150A                VVNAME:   .SET   $   
150A   04 0F 16 15            DW   vvCODE,vvLINK   
150E                VVLINK:   .SET   $   
150E   03 54 49 42            DB   3,"TIB"   
0F04                          .ORG   vvCODE   
0F04   00                     NOP      
0F05   CD 56 06               CALL   doLIST   
0F08   28 11 D6 03 64 0E 8C 06 DW   NTIB,CELLP,AT,EXIT   
0F10                             ;   @EXECUTE    ( a -- )
0F10                             ;               Execute vector stored in address a.
0F10                          ;*Macro unroll: hCOLON  8,'@EXECUTE',ATEXE
0F10                          ;*Macro unroll:  hCODE 8, "@EXECUTE", ATEXE
0F10                          ALIGN   2   
0F10                ATEXE:       
0F10   00                     NOP      
0F11   CD 56 06               CALL   doLIST   
0F14   64 0E 60 10            DW   AT,QDUP   ;?address or zero
0F18   34 0E 1E 0F            DW   QBRAN,EXE1   
0F1C   30 0E                  DW   EXECU   ;execute if non-zero
0F1E                EXE1:        
0F1E   8C 06                  DW   EXIT   ;do nothing if zero
0F20                             ;   CMOVE       ( b1 b2 u -- )
0F20                             ;               Copy u bytes from b1 to b2.
0F20                          ;*Macro unroll: mCOLON  5,'CMOVE',CMOVE
0F20                          ;*Macro unroll:  mCODE 5, "CMOVE", CMOVE
0F20                          ALIGN   2   
0F20                CMOVE:       
0F20                VVCODE:   .SET   $   
0F20                VVLEN:    .SET   (5 & 01FH) / CELLL   
1500                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1500                VVNAME:   .SET   $   
1500   20 0F 0E 15            DW   vvCODE,vvLINK   
1504                VVLINK:   .SET   $   
1504   05 43 4D 4F 56 45      DB   5,"CMOVE"   
0F20                          .ORG   vvCODE   
0F20   00                     NOP      
0F21   CD 56 06               CALL   doLIST   
0F24   2C 10                  DW   TOR   
0F26   40 0E 42 0F            DW   BRAN,CMOV2   
0F2A                CMOV1:       
0F2A   2C 10 48 10 74 0E      DW   TOR,DUPP,CAT   
0F30   7C 0E 6C 0E            DW   RAT,CSTOR   
0F34   64 06 01 00 64 01      DW   DOLIT,1,PLUS   
0F3A   3A 10 64 06 01 00 64 01 DW   RFROM,DOLIT,1,PLUS   
0F42                CMOV2:       
0F42   02 07 2A 0F            DW   DONXT,CMOV1   
0F46   7C 10 8C 06            DW   DDROP,EXIT   
0F4A                             ;   FILL        ( b u c -- )
0F4A                             ;               Fill u bytes of character c to area beginning at b.
0F4A                          ;*Macro unroll: mCOLON  4,'FILL',FILL
0F4A                          ;*Macro unroll:  mCODE 4, "FILL", FILL
0F4A                          ALIGN   2   
0F4A                FILL:        
0F4A                VVCODE:   .SET   $   
0F4A                VVLEN:    .SET   (4 & 01FH) / CELLL   
14F6                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
14F6                VVNAME:   .SET   $   
14F6   4A 0F 04 15            DW   vvCODE,vvLINK   
14FA                VVLINK:   .SET   $   
14FA   04 46 49 4C 4C         DB   4,"FILL"   
0F4A                          .ORG   vvCODE   
0F4A   00                     NOP      
0F4B   CD 56 06               CALL   doLIST   
0F4E   50 10 2C 10 50 10      DW   SWAP,TOR,SWAP   
0F54   40 0E 62 0F            DW   BRAN,FILL2   
0F58                FILL1:       
0F58   86 10 6C 0E 64 06 01 00 64 01 DW   DDUP,CSTOR,DOLIT,1,PLUS   
0F62                FILL2:       
0F62   02 07 58 0F            DW   DONXT,FILL1   
0F66   7C 10 8C 06            DW   DDROP,EXIT   
0F6A                             ;   -TRAILING   ( b u -- b u )
0F6A                             ;               Adjust the count to eliminate trailing white space.
0F6A                          ;*Macro unroll: mCOLON  9,'-TRAILING',DTRAI
0F6A                          ;*Macro unroll:  mCODE 9, "-TRAILING", DTRAI
0F6A                          ALIGN   2   
0F6A                DTRAI:       
0F6A                VVCODE:   .SET   $   
0F6A                VVLEN:    .SET   (9 & 01FH) / CELLL   
14E8                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
14E8                VVNAME:   .SET   $   
14E8   6A 0F FA 14            DW   vvCODE,vvLINK   
14EC                VVLINK:   .SET   $   
14EC   09 2D 54 52 41 49 4C 49 4E 47 DB   9,"-TRAILING"   
0F6A                          .ORG   vvCODE   
0F6A   00                     NOP      
0F6B   CD 56 06               CALL   doLIST   
0F6E   2C 10                  DW   TOR   
0F70   40 0E 8E 0F            DW   BRAN,DTRA2   
0F74                DTRA1:       
0F74   E8 07 58 10 7C 0E 64 01 74 0E 0E 02 DW   BLANK,OVER,RAT,PLUS,CAT,LESS   
0F80   34 0E 8E 0F            DW   QBRAN,DTRA2   
0F84   3A 10 64 06 01 00 64 01 8C 06 DW   RFROM,DOLIT,1,PLUS,EXIT   ;adjusted count
0F8E                DTRA2:       
0F8E   02 07 74 0F            DW   DONXT,DTRA1   
0F92   64 06 00 00 8C 06      DW   DOLIT,0,EXIT   ;count=0
0F98                             ;   PACK$       ( b u a -- a )
0F98                             ;               Build a counted string with u characters from b. Null fill.
0F98                          ;*Macro unroll: mCOLON  5,'PACK$',PACKS
0F98                          ;*Macro unroll:  mCODE 5, "PACK$", PACKS
0F98                          ALIGN   2   
0F98                PACKS:       
0F98                VVCODE:   .SET   $   
0F98                VVLEN:    .SET   (5 & 01FH) / CELLL   
14DE                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
14DE                VVNAME:   .SET   $   
14DE   98 0F EC 14            DW   vvCODE,vvLINK   
14E2                VVLINK:   .SET   $   
14E2   05 50 41 43 4B 24      DB   5,"PACK$"   
0F98                          .ORG   vvCODE   
0F98   00                     NOP      
0F99   CD 56 06               CALL   doLIST   
0F9C   D2 0F 48 10 2C 10      DW   ALGND,DUPP,TOR   ;strings only on cell boundary
0FA2   58 10 48 10 64 06 00 00 DW   OVER,DUPP,DOLIT,0   
0FAA   64 06 02 00 74 02 4C 10 DW   DOLIT,CELLL,UMMOD,DROP   ;count mod cell
0FB2   BC 01 58 10 64 01      DW   SUBB,OVER,PLUS   
0FB8   64 06 00 00 50 10 5A 0E DW   DOLIT,0,SWAP,STORE   ;null fill cell
0FC0   86 10 6C 0E 64 06 01 00 64 01 DW   DDUP,CSTOR,DOLIT,1,PLUS   ;save count
0FCA   50 10 20 0F 3A 10 8C 06 DW   SWAP,CMOVE,RFROM,EXIT   ;move string
0FD2                             ;   ALIGNED     ( b -- a )
0FD2                             ;               Align address to the cell boundary.
0FD2                          ;*Macro unroll: mCOLON  7,'ALIGNED', ALGND
0FD2                          ;*Macro unroll:  mCODE 7, "ALIGNED", ALGND
0FD2                          ALIGN   2   
0FD2                ALGND:       
0FD2                VVCODE:   .SET   $   
0FD2                VVLEN:    .SET   (7 & 01FH) / CELLL   
14D2                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
14D2                VVNAME:   .SET   $   
14D2   D2 0F E2 14            DW   vvCODE,vvLINK   
14D6                VVLINK:   .SET   $   
14D6   07 41 4C 49 47 4E 45 44 DB   7,"ALIGNED"   
0FD2                          .ORG   vvCODE   
0FD2   00                     NOP      
0FD3   CD 56 06               CALL   doLIST   
0FD6   48 10 64 06 00 00 64 06 02 00 DW   DUPP,DOLIT,0,DOLIT,CELLL   
0FE0   74 02 4C 10 48 10      DW   UMMOD,DROP,DUPP   
0FE6   34 0E F2 0F            DW   QBRAN,ALGN1   
0FEA   64 06 02 00 50 10 BC 01 DW   DoLIT,CELLL,SWAP,SUBB   
0FF2                ALGN1:       
0FF2   64 01 8C 06            DW   PLUS,EXIT   
0FF6   54 79 70 65 20 73 6F 6D 65 74 68 69 6E 67 0D 0A 00 GREETING:   .CSTR   "Type something\r\n"   
1007                             ; ERR_ABORT:	    .cstr	"ABORT" ;-01
1007                             ; ERR_ABORTDQ:    .cstr	"ABORT"";-02
1007                             ; ERR_STACKOF:    .cstr	"stack overflow";-03
1007                             ; ERR_STACKUF:	.cstr	"stack underflow"       ;-04
1007                             ; ERR_RETOF:    	.cstr	"return stack overflow" ;-05
1007                             ; ERR_RETUF:     	.cstr	"return stack underflow";-06
1007                             ; ERR_DONEST:   	.cstr	"do-loops nested too deeply during execution"   ;-07
1007                             ; ERR_DICTOF     	.cstr	"dictionary overflow"   ;-08
1007                             ; ERR_MEMADDR   	.cstr	"invalid memory address";-09
1007   64 69 76 69 73 69 6F 6E 20 62 79 20 7A 65 72 6F 00 ERR_DIVZERO:   .CSTR   "division by zero"   ;-10
1018   72 65 73 75 6C 74 20 6F 75 74 20 6F 66 20 72 61 6E 67 65 00 ERR_OUTOFRANGE:   .CSTR   "result out of range"   ;-11
102C                             ; ERR_MISMATCH    .cstr	"argument type mismatch";-12
102C                             ; ERR_UNDEFINED 	.cstr	"undefined word";-13
102C                             ; ERR_COMPONLY	.cstr	"interpreting a compile-only word"      ;-14
102C                             ; ERR_FORGET  	.cstr	"invalid FORGET";-15
102C                             ; ERR_ZEROSTR   	.cstr	"attempt to use zero-length string as a name"   ;-16
102C                             ; ERR_FORMAT  	.cstr	"pictured numeric output string overflow"       ;-17
102C                             ; ERR_PARSE     	.cstr	"parsed string overflow";-18
102C                             ; ERR_TOOLONG    	.cstr	"definition name too long"      ;-19
102C                             ; ERR_READONLY	.cstr	"write to a read-only location" ;-20
102C                             ; ERR_UNSUPPORTED .cstr	"unsupported operation" ;-21
102C                             ; ERR_UNSTRUCT	.cstr	"control structure mismatch"    ;-22
102C                             ; ERR_ADDRALIGN 	.cstr	"address alignment exception"   ;-23
102C                             ; ERR_NUMERIC     .cstr	"invalid numeric argument"      ;-24
102C                             ; ERR_IMBALANCE   .cstr	"return stack imbalance";-25
102C                             ; ERR_LOOPPARAM   .cstr	"loop parameters unavailable"   ;-26
102C                             ; ERR_RECURSION   .cstr	"invalid recursion"     ;-27
102C                             ; ERR_INTERRUPT   .cstr	"user interrupt";-28
102C                             ; ERR_NESTING    	.cstr	"compiler nesting"      ;-29
102C                             ; ERR_OBSOLETE    .cstr	"obsolescent feature"   ;-30
102C                             ; ERR_NONCREATE   .cstr	">BODY used on non-CREATEd definition"  ;-31
102C                             ; ERR_NAME    	.cstr	"invalid name argument (e.g., TO xxx)"  ;-32
102C                             ; ERR_BLOCKREAD   .cstr	"block read exception"  ;-33
102C                             ; ERR_BLOCKWRITE  .cstr	"block write exception" ;-34
102C                             ; ERR_BLOCKNUM    .cstr	"invalid block number"  ;-35
102C                             ; ERR_FILEPOS    	.cstr	"invalid file position" ;-36
102C                             ; ERR_FILEIO    	.cstr	"file I/O exception"    ;-37
102C                             ; ERR_FILEEXIST   .cstr	"non-existent file"     ;-38
102C                             ; ERR_FILEEOF    	.cstr	"unexpected end of file";-39
102C                             ; ERR_BASE    	.cstr	"invalid BASE for floating point conversion"    ;-40
102C                             ; ERR_PRECISION   .cstr	"loss of precision"     ;-41
102C                             ; ERR_FDIVZERO    .cstr	"floating-point divide by zero" ;-42
102C                             ; ERR_FRANGE    	.cstr	"floating-point result out of range"    ;-43
102C                             ; ERR_FSOF    	.cstr	"floating-point stack overflow" ;-44
102C                             ; ERR_FSUF    	.cstr	"floating-point stack underflow";-45
102C                             ; ERR_FINVALID    .cstr	"floating-point invalid argument"       ;-46
102C                             ; ERR_WORDLIST    .cstr	"compilation word list deleted" ;-47
102C                             ; ERR_POSTPONE    .cstr	"invalid POSTPONE"      ;-48
102C                             ; ERR_SEARCHOF    .cstr	"search-order overflow" ;-49
102C                             ; ERR_SEARCHUF    .cstr	"search-order underflow";-50
102C                             ; ERR_WORDLISTCHG .cstr	"compilation word list changed" ;-51
102C                             ; ERR_CONTROLOF   .cstr	"control-flow stack overflow"   ;-52
102C                             ; ERR_CONTROLUF   .cstr	"exception stack overflow"      ;-53
102C                             ; ERR_FPUF    	.cstr	"floating-point underflow"      ;-54
102C                             ; ERR_FPFAULT    	.cstr	"floating-point unidentified fault"     ;-55
102C                             ; ERR_QUIT    	.cstr	"QUIT"  ;-56
102C                             ; ERR_IO    	    .cstr	"exception in sending or receiving a character" ;-57
102C                             ; ERR_IF    	    .cstr	"[IF], [ELSE], or [THEN] exception"     ;-58
102C                             ;   >R          ( w -- )
102C                             ;               Push the data stack to the return stack.
102C                          ;*Macro unroll: mCODE	COMPO+2, '>R', ToR
102C                          ALIGN   2   
102C                TOR:         
102C                VVCODE:   .SET   $   
102C                VVLEN:    .SET   (COMPO+2 & 01FH) / CELLL   
14AA                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
14AA                VVNAME:   .SET   $   
14AA   2C 10 D6 14            DW   vvCODE,vvLINK   
14AE                VVLINK:   .SET   $   
14AE   22 3E 52               DB   COMPO+2,">R"   
102C                          .ORG   vvCODE   
102C   DD 2B                  DEC   IX   
102E   DD 70 00               LD   (IX+0),B   
1031   DD 2B                  DEC   IX   
1033   DD 71 00               LD   (IX+0),C   
1036   C1                     POP   BC   
1037                          ;*Macro unroll: 	mNEXT
1037   EB                     EX   DE,HL   
1038                          ;*Macro unroll:  mNEXTHL                         ; 34t
1038   FD E9                  JP   (IY)   ; 34t
103A                             ;   R>          ( -- w )
103A                             ;               Pop the return stack to the data stack.
103A                          ;*Macro unroll: mCODE	COMPO+2, 'R>', RFrom
103A                          ALIGN   2   
103A                RFROM:       
103A                VVCODE:   .SET   $   
103A                VVLEN:    .SET   (COMPO+2 & 01FH) / CELLL   
1482                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1482                VVNAME:   .SET   $   
1482   3A 10 AE 14            DW   vvCODE,vvLINK   
1486                VVLINK:   .SET   $   
1486   22 52 3E               DB   COMPO+2,"R>"   
103A                          .ORG   vvCODE   
103A   C5                     PUSH   BC   
103B   DD 4E 00               LD   C,(IX+0)   
103E   DD 23                  INC   IX   
1040   DD 46 00               LD   B,(IX+0)   
1043   DD 23                  INC   IX   
1045                          ;*Macro unroll: 	mNEXT
1045   EB                     EX   DE,HL   
1046                          ;*Macro unroll:  mNEXTHL                         ; 34t
1046   FD E9                  JP   (IY)   ; 34t
1048                             ;   DUP         ( w -- w w )
1048                             ;               Duplicate the top stack item.
1048                          ;*Macro unroll: mCODE	3, 'DUP', DUPP
1048                          ALIGN   2   
1048                DUPP:        
1048                VVCODE:   .SET   $   
1048                VVLEN:    .SET   (3 & 01FH) / CELLL   
147A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
147A                VVNAME:   .SET   $   
147A   48 10 86 14            DW   vvCODE,vvLINK   
147E                VVLINK:   .SET   $   
147E   03 44 55 50            DB   3,"DUP"   
1048                          .ORG   vvCODE   
1048   C5                     PUSH   BC   
1049                          ;*Macro unroll:  mNEXT
1049   EB                     EX   DE,HL   
104A                          ;*Macro unroll:  mNEXTHL                         ; 34t
104A   FD E9                  JP   (IY)   ; 34t
104C                             ;   DROP	( x -- )			\ CORE
104C                             ;		Discard top stack item.
104C                          ;*Macro unroll: mCODE	4, 'DROP', DROP
104C                          ALIGN   2   
104C                DROP:        
104C                VVCODE:   .SET   $   
104C                VVLEN:    .SET   (4 & 01FH) / CELLL   
1470                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1470                VVNAME:   .SET   $   
1470   4C 10 7E 14            DW   vvCODE,vvLINK   
1474                VVLINK:   .SET   $   
1474   04 44 52 4F 50         DB   4,"DROP"   
104C                          .ORG   vvCODE   
104C   C1                     POP   BC   
104D                          ;*Macro unroll:  mNEXT
104D   EB                     EX   DE,HL   
104E                          ;*Macro unroll:  mNEXTHL                         ; 34t
104E   FD E9                  JP   (IY)   ; 34t
1050                             ;   SWAP        ( w1 w2 -- w2 w1 )
1050                             ;               Exchange top two stack items.
1050                          ;*Macro unroll: mCODE	4, 'SWAP', SWAP
1050                          ALIGN   2   
1050                SWAP:        
1050                VVCODE:   .SET   $   
1050                VVLEN:    .SET   (4 & 01FH) / CELLL   
1466                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1466                VVNAME:   .SET   $   
1466   50 10 74 14            DW   vvCODE,vvLINK   
146A                VVLINK:   .SET   $   
146A   04 53 57 41 50         DB   4,"SWAP"   
1050                          .ORG   vvCODE   
1050   E1                     POP   HL   
1051   C5                     PUSH   BC   
1052   44                     LD   B,H   
1053   4D                     LD   C,L   
1054                          ;*Macro unroll: 	mNEXT
1054   EB                     EX   DE,HL   
1055                          ;*Macro unroll:  mNEXTHL                         ; 34t
1055   FD E9                  JP   (IY)   ; 34t
1057                             ;   OVER        ( w1 w2 -- w1 w2 w1 )
1057                             ;               Copy second stack item to top.
1057                          ;*Macro unroll: mCODE	4, 'OVER', OVER
1057                          ALIGN   2   
1058                OVER:        
1058                VVCODE:   .SET   $   
1058                VVLEN:    .SET   (4 & 01FH) / CELLL   
145C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
145C                VVNAME:   .SET   $   
145C   58 10 6A 14            DW   vvCODE,vvLINK   
1460                VVLINK:   .SET   $   
1460   04 4F 56 45 52         DB   4,"OVER"   
1058                          .ORG   vvCODE   
1058   E1                     POP   HL   
1059   E5                     PUSH   HL   
105A   C5                     PUSH   BC   
105B   44                     LD   B,H   
105C   4D                     LD   C,L   
105D                          ;*Macro unroll: 	mNEXT
105D   EB                     EX   DE,HL   
105E                          ;*Macro unroll:  mNEXTHL                         ; 34t
105E   FD E9                  JP   (IY)   ; 34t
1060                             ;   ?DUP        ( w -- w w | 0 )
1060                             ;               Dup tos if its is not zero.
1060                          ;*Macro unroll: mCOLON	4,'?DUP', QDUP
1060                          ;*Macro unroll:  mCODE 4, "?DUP", QDUP
1060                          ALIGN   2   
1060                QDUP:        
1060                VVCODE:   .SET   $   
1060                VVLEN:    .SET   (4 & 01FH) / CELLL   
1452                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1452                VVNAME:   .SET   $   
1452   60 10 60 14            DW   vvCODE,vvLINK   
1456                VVLINK:   .SET   $   
1456   04 3F 44 55 50         DB   4,"?DUP"   
1060                          .ORG   vvCODE   
1060   00                     NOP      
1061   CD 56 06               CALL   doLIST   
1064   48 10 34 0E 6C 10      DW   DUPP,QBRAN,QDUP1   
106A   48 10                  DW   DUPP   
106C                QDUP1:       
106C   8C 06                  DW   EXIT   
106E                             ;   ROT         ( w1 w2 w3 -- w2 w3 w1 )
106E                             ;               Rot 3rd item to top.
106E                          ;*Macro unroll: mCOLON	3,'ROT', ROT
106E                          ;*Macro unroll:  mCODE 3, "ROT", ROT
106E                          ALIGN   2   
106E                ROT:         
106E                VVCODE:   .SET   $   
106E                VVLEN:    .SET   (3 & 01FH) / CELLL   
144A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
144A                VVNAME:   .SET   $   
144A   6E 10 56 14            DW   vvCODE,vvLINK   
144E                VVLINK:   .SET   $   
144E   03 52 4F 54            DB   3,"ROT"   
106E                          .ORG   vvCODE   
106E   00                     NOP      
106F   CD 56 06               CALL   doLIST   
1072   2C 10 50 10 3A 10 50 10 8C 06 DW   ToR,SWAP,RFrom,SWAP,EXIT   
107C                             ;   2DROP       ( w w -- )
107C                             ;               Discard two items on stack.
107C                          ;*Macro unroll: mCOLON	5,'2DROP',DDROP
107C                          ;*Macro unroll:  mCODE 5, "2DROP", DDROP
107C                          ALIGN   2   
107C                DDROP:       
107C                VVCODE:   .SET   $   
107C                VVLEN:    .SET   (5 & 01FH) / CELLL   
1440                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1440                VVNAME:   .SET   $   
1440   7C 10 4E 14            DW   vvCODE,vvLINK   
1444                VVLINK:   .SET   $   
1444   05 32 44 52 4F 50      DB   5,"2DROP"   
107C                          .ORG   vvCODE   
107C   00                     NOP      
107D   CD 56 06               CALL   doLIST   
1080   4C 10 4C 10 8C 06      DW   DROP,DROP,EXIT   
1086                             ;   2DUP        ( w1 w2 -- w1 w2 w1 w2 )
1086                             ;               Duplicate top two items.
1086                          ;*Macro unroll: mCOLON	4,'2DUP',DDUP
1086                          ;*Macro unroll:  mCODE 4, "2DUP", DDUP
1086                          ALIGN   2   
1086                DDUP:        
1086                VVCODE:   .SET   $   
1086                VVLEN:    .SET   (4 & 01FH) / CELLL   
1436                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1436                VVNAME:   .SET   $   
1436   86 10 44 14            DW   vvCODE,vvLINK   
143A                VVLINK:   .SET   $   
143A   04 32 44 55 50         DB   4,"2DUP"   
1086                          .ORG   vvCODE   
1086   00                     NOP      
1087   CD 56 06               CALL   doLIST   
108A   58 10 58 10 8C 06      DW   OVER,OVER,EXIT   
1090                             ;   2SWAP        ( w1 w2 w3 w4 -- w3 w4 w1 w2 )
1090                             ;               Exchange top two items.
1090                          ;*Macro unroll: mCOLON	5,'2SWAP',TwoSWAP
1090                          ;*Macro unroll:  mCODE 5, "2SWAP", TwoSWAP
1090                          ALIGN   2   
1090                TWOSWAP:      
1090                VVCODE:   .SET   $   
1090                VVLEN:    .SET   (5 & 01FH) / CELLL   
142C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
142C                VVNAME:   .SET   $   
142C   90 10 3A 14            DW   vvCODE,vvLINK   
1430                VVLINK:   .SET   $   
1430   05 32 53 57 41 50      DB   5,"2SWAP"   
1090                          .ORG   vvCODE   
1090   00                     NOP      
1091   CD 56 06               CALL   doLIST   
1094   6E 10 2C 10 6E 10 3A 10 8C 06 DW   ROT,ToR,ROT,RFrom,EXIT   
109E                             ;   PICK        ( ... +n -- ... w )
109E                             ;               Copy the nth stack item to tos.
109E                          ;*Macro unroll: mCOLON  4,'PICK',PICK
109E                          ;*Macro unroll:  mCODE 4, "PICK", PICK
109E                          ALIGN   2   
109E                PICK:        
109E                VVCODE:   .SET   $   
109E                VVLEN:    .SET   (4 & 01FH) / CELLL   
1422                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1422                VVNAME:   .SET   $   
1422   9E 10 30 14            DW   vvCODE,vvLINK   
1426                VVLINK:   .SET   $   
1426   04 50 49 43 4B         DB   4,"PICK"   
109E                          .ORG   vvCODE   
109E   00                     NOP      
109F   CD 56 06               CALL   doLIST   
10A2   64 06 01 00 64 01 EE 03 DW   DOLIT,1,PLUS,CELLS   
10AA   96 0E 64 01 64 0E 8C 06 DW   SPAT,PLUS,AT,EXIT   
10B2                             ;   DEPTH       ( -- n )
10B2                             ;               Return the depth of the data stack.
10B2                          ;*Macro unroll: mCOLON	5,'DEPTH',DEPTH
10B2                          ;*Macro unroll:  mCODE 5, "DEPTH", DEPTH
10B2                          ALIGN   2   
10B2                DEPTH:       
10B2                VVCODE:   .SET   $   
10B2                VVLEN:    .SET   (5 & 01FH) / CELLL   
1418                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1418                VVNAME:   .SET   $   
1418   B2 10 26 14            DW   vvCODE,vvLINK   
141C                VVLINK:   .SET   $   
141C   05 44 45 50 54 48      DB   5,"DEPTH"   
10B2                          .ORG   vvCODE   
10B2   00                     NOP      
10B3   CD 56 06               CALL   doLIST   
10B6   96 0E C8 10 64 0E 50 10 BC 01 DW   SPAT,SZero,AT,SWAP,SUBB   
10C0   64 06 02 00 70 03 8C 06 DW   DoLIT,CELLL,Slash,EXIT   
10C8                             ;   SP0         ( -- a )
10C8                             ;               Pointer to bottom of the data stack.
10C8                          ;*Macro unroll: mUSER   3,'SP0',SZERO
10C8                          ;*Macro unroll: 	mCODE 3, "SP0", SZERO
10C8                          ALIGN   2   
10C8                SZERO:       
10C8                VVCODE:   .SET   $   
10C8                VVLEN:    .SET   (3 & 01FH) / CELLL   
1410                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1410                VVNAME:   .SET   $   
1410   C8 10 1C 14            DW   vvCODE,vvLINK   
1414                VVLINK:   .SET   $   
1414   03 53 50 30            DB   3,"SP0"   
10C8                          .ORG   vvCODE   
10C8   00                     NOP      
10C9   CD 56 06               CALL   doLIST   
10CC   7C 06 00 00            DW   DoUSE,vvUSER   
10D0                VVUSER:   .SET   vvUSER + CELLL   
10D0                             ;   RP0         ( -- a )
10D0                             ;               Pointer to bottom of the return stack.
10D0                          ;*Macro unroll: mUSER   3,'RP0',RZERO
10D0                          ;*Macro unroll: 	mCODE 3, "RP0", RZERO
10D0                          ALIGN   2   
10D0                RZERO:       
10D0                VVCODE:   .SET   $   
10D0                VVLEN:    .SET   (3 & 01FH) / CELLL   
1408                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1408                VVNAME:   .SET   $   
1408   D0 10 14 14            DW   vvCODE,vvLINK   
140C                VVLINK:   .SET   $   
140C   03 52 50 30            DB   3,"RP0"   
10D0                          .ORG   vvCODE   
10D0   00                     NOP      
10D1   CD 56 06               CALL   doLIST   
10D4   7C 06 02 00            DW   DoUSE,vvUSER   
10D8                VVUSER:   .SET   vvUSER + CELLL   
10D8                             ;   '?KEY       ( -- a )
10D8                             ;               Execution vector of ?KEY.
10D8                          ;*Macro unroll: hUSER   5,"'?KEY",TQKEY
10D8                          ;*Macro unroll: 	hCODE 5, "'?KEY", TQKEY
10D8                          ALIGN   2   
10D8                TQKEY:       
10D8   00                     NOP      
10D9   CD 56 06               CALL   doLIST   
10DC   7C 06 04 00            DW   DoUSE,vvUSER   
10E0                VVUSER:   .SET   vvUSER + CELLL   
10E0                             ;   'EMIT       ( -- a )
10E0                             ;               Execution vector of EMIT.
10E0                          ;*Macro unroll: hUSER   5,"'EMIT",TEMIT
10E0                          ;*Macro unroll: 	hCODE 5, "'EMIT", TEMIT
10E0                          ALIGN   2   
10E0                TEMIT:       
10E0   00                     NOP      
10E1   CD 56 06               CALL   doLIST   
10E4   7C 06 06 00            DW   DoUSE,vvUSER   
10E8                VVUSER:   .SET   vvUSER + CELLL   
10E8                             ;   'EXPECT     ( -- a )
10E8                             ;               Execution vector of EXPECT.
10E8                          ;*Macro unroll: hUSER   7,"'EXPECT",TEXPE
10E8                          ;*Macro unroll: 	hCODE 7, "'EXPECT", TEXPE
10E8                          ALIGN   2   
10E8                TEXPE:       
10E8   00                     NOP      
10E9   CD 56 06               CALL   doLIST   
10EC   7C 06 08 00            DW   DoUSE,vvUSER   
10F0                VVUSER:   .SET   vvUSER + CELLL   
10F0                             ;   'TAP        ( -- a )
10F0                             ;               Execution vector of TAP.
10F0                          ;*Macro unroll: hUSER   4,"'TAP",TTAP
10F0                          ;*Macro unroll: 	hCODE 4, "'TAP", TTAP
10F0                          ALIGN   2   
10F0                TTAP:        
10F0   00                     NOP      
10F1   CD 56 06               CALL   doLIST   
10F4   7C 06 0A 00            DW   DoUSE,vvUSER   
10F8                VVUSER:   .SET   vvUSER + CELLL   
10F8                             ;   'ECHO       ( -- a )
10F8                             ;               Execution vector of ECHO.
10F8                          ;*Macro unroll: hUSER   5,"'ECHO",TECHO
10F8                          ;*Macro unroll: 	hCODE 5, "'ECHO", TECHO
10F8                          ALIGN   2   
10F8                TECHO:       
10F8   00                     NOP      
10F9   CD 56 06               CALL   doLIST   
10FC   7C 06 0C 00            DW   DoUSE,vvUSER   
1100                VVUSER:   .SET   vvUSER + CELLL   
1100                             ;   'PROMPT     ( -- a )
1100                             ;               Execution vector of PROMPT.
1100                          ;*Macro unroll: hUSER   7,"'PROMPT",TPROM
1100                          ;*Macro unroll: 	hCODE 7, "'PROMPT", TPROM
1100                          ALIGN   2   
1100                TPROM:       
1100   00                     NOP      
1101   CD 56 06               CALL   doLIST   
1104   7C 06 0E 00            DW   DoUSE,vvUSER   
1108                VVUSER:   .SET   vvUSER + CELLL   
1108                             ;   BASE        ( -- a )
1108                             ;               Storage of the radix base for numeric I/O.
1108                          ;*Macro unroll: mUSER   4,'BASE',BASE
1108                          ;*Macro unroll: 	mCODE 4, "BASE", BASE
1108                          ALIGN   2   
1108                BASE:        
1108                VVCODE:   .SET   $   
1108                VVLEN:    .SET   (4 & 01FH) / CELLL   
13FE                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
13FE                VVNAME:   .SET   $   
13FE   08 11 0C 14            DW   vvCODE,vvLINK   
1402                VVLINK:   .SET   $   
1402   04 42 41 53 45         DB   4,"BASE"   
1108                          .ORG   vvCODE   
1108   00                     NOP      
1109   CD 56 06               CALL   doLIST   
110C   7C 06 10 00            DW   DoUSE,vvUSER   
1110                VVUSER:   .SET   vvUSER + CELLL   
1110                             ;   tmp         ( -- a )
1110                             ;               A temporary storage location used in parse and find.
1110                          ;*Macro unroll: mUSER   COMPO+3,'tmp',TEMP
1110                          ;*Macro unroll: 	mCODE COMPO+3, "tmp", TEMP
1110                          ALIGN   2   
1110                TEMP:        
1110                VVCODE:   .SET   $   
1110                VVLEN:    .SET   (COMPO+3 & 01FH) / CELLL   
13D6                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
13D6                VVNAME:   .SET   $   
13D6   10 11 02 14            DW   vvCODE,vvLINK   
13DA                VVLINK:   .SET   $   
13DA   23 74 6D 70            DB   COMPO+3,"tmp"   
1110                          .ORG   vvCODE   
1110   00                     NOP      
1111   CD 56 06               CALL   doLIST   
1114   7C 06 12 00            DW   DoUSE,vvUSER   
1118                VVUSER:   .SET   vvUSER + CELLL   
1118                             ;   SPAN        ( -- a )
1118                             ;               Hold character count received by EXPECT.
1118                          ;*Macro unroll: mUSER   4,'SPAN',SPAN
1118                          ;*Macro unroll: 	mCODE 4, "SPAN", SPAN
1118                          ALIGN   2   
1118                SPAN:        
1118                VVCODE:   .SET   $   
1118                VVLEN:    .SET   (4 & 01FH) / CELLL   
13CC                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
13CC                VVNAME:   .SET   $   
13CC   18 11 DA 13            DW   vvCODE,vvLINK   
13D0                VVLINK:   .SET   $   
13D0   04 53 50 41 4E         DB   4,"SPAN"   
1118                          .ORG   vvCODE   
1118   00                     NOP      
1119   CD 56 06               CALL   doLIST   
111C   7C 06 14 00            DW   DoUSE,vvUSER   
1120                VVUSER:   .SET   vvUSER + CELLL   
1120                             ;   >IN         ( -- a )
1120                             ;               Hold the character pointer while parsing input stream.
1120                          ;*Macro unroll: mUSER   3,'>IN',INN
1120                          ;*Macro unroll: 	mCODE 3, ">IN", INN
1120                          ALIGN   2   
1120                INN:         
1120                VVCODE:   .SET   $   
1120                VVLEN:    .SET   (3 & 01FH) / CELLL   
13C4                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
13C4                VVNAME:   .SET   $   
13C4   20 11 D0 13            DW   vvCODE,vvLINK   
13C8                VVLINK:   .SET   $   
13C8   03 3E 49 4E            DB   3,">IN"   
1120                          .ORG   vvCODE   
1120   00                     NOP      
1121   CD 56 06               CALL   doLIST   
1124   7C 06 16 00            DW   DoUSE,vvUSER   
1128                VVUSER:   .SET   vvUSER + CELLL   
1128                             ;   #TIB        ( -- a )
1128                             ;               Hold the current count and address of the terminal input buffer.
1128                          ;*Macro unroll: hUSER   4,'#TIB',NTIB
1128                          ;*Macro unroll: 	hCODE 4, "#TIB", NTIB
1128                          ALIGN   2   
1128                NTIB:        
1128   00                     NOP      
1129   CD 56 06               CALL   doLIST   
112C   7C 06 18 00            DW   DoUSE,vvUSER   
1130                VVUSER:   .SET   vvUSER + CELLL   
1130                VVUSER:   .SET   vvUSER + CELLL   
1130                             ;   CSP         ( -- a )
1130                             ;               Hold the stack pointer for error checking.
1130                          ;*Macro unroll: hUSER   3,'CSP',CSP
1130                          ;*Macro unroll: 	hCODE 3, "CSP", CSP
1130                          ALIGN   2   
1130                CSP:         
1130   00                     NOP      
1131   CD 56 06               CALL   doLIST   
1134   7C 06 1C 00            DW   DoUSE,vvUSER   
1138                VVUSER:   .SET   vvUSER + CELLL   
1138                             ;   'EVAL       ( -- a )
1138                             ;               Execution vector of EVAL.
1138                          ;*Macro unroll: hUSER   5,"'EVAL",TEVAL
1138                          ;*Macro unroll: 	hCODE 5, "'EVAL", TEVAL
1138                          ALIGN   2   
1138                TEVAL:       
1138   00                     NOP      
1139   CD 56 06               CALL   doLIST   
113C   7C 06 1E 00            DW   DoUSE,vvUSER   
1140                VVUSER:   .SET   vvUSER + CELLL   
1140                             ;   'NUMBER     ( -- a )
1140                             ;               Execution vector of NUMBER?.
1140                          ;*Macro unroll: hUSER   7,"'NUMBER",TNUMB
1140                          ;*Macro unroll: 	hCODE 7, "'NUMBER", TNUMB
1140                          ALIGN   2   
1140                TNUMB:       
1140   00                     NOP      
1141   CD 56 06               CALL   doLIST   
1144   7C 06 20 00            DW   DoUSE,vvUSER   
1148                VVUSER:   .SET   vvUSER + CELLL   
1148                             ;   HLD         ( -- a )
1148                             ;               Hold a pointer in building a numeric output string.
1148                          ;*Macro unroll: hUSER   3,'HLD',HLD
1148                          ;*Macro unroll: 	hCODE 3, "HLD", HLD
1148                          ALIGN   2   
1148                HLD:         
1148   00                     NOP      
1149   CD 56 06               CALL   doLIST   
114C   7C 06 22 00            DW   DoUSE,vvUSER   
1150                VVUSER:   .SET   vvUSER + CELLL   
1150                             ;   HANDLER     ( -- a )
1150                             ;               Hold the return stack pointer for error handling.
1150                          ;*Macro unroll: hUSER   7,'HANDLER',HANDL
1150                          ;*Macro unroll: 	hCODE 7, "HANDLER", HANDL
1150                          ALIGN   2   
1150                HANDL:       
1150   00                     NOP      
1151   CD 56 06               CALL   doLIST   
1154   7C 06 24 00            DW   DoUSE,vvUSER   
1158                VVUSER:   .SET   vvUSER + CELLL   
1158                             ;   CONTEXT     ( -- a )
1158                             ;               A area to specify vocabulary search order.
1158                          ;*Macro unroll: hUSER   7,'CONTEXT',CNTXT
1158                          ;*Macro unroll: 	hCODE 7, "CONTEXT", CNTXT
1158                          ALIGN   2   
1158                CNTXT:       
1158   00                     NOP      
1159   CD 56 06               CALL   doLIST   
115C   7C 06 26 00            DW   DoUSE,vvUSER   
1160                VVUSER:   .SET   vvUSER + CELLL   
1160                VVUSER:   .SET   vvUSER + VOCSS * CELLL   ;vocabulary stack
1160                             ;   CURRENT     ( -- a )
1160                             ;               Point to the vocabulary to be extended.
1160                          ;*Macro unroll: hUSER   7,'CURRENT',CRRNT
1160                          ;*Macro unroll: 	hCODE 7, "CURRENT", CRRNT
1160                          ALIGN   2   
1160                CRRNT:       
1160   00                     NOP      
1161   CD 56 06               CALL   doLIST   
1164   7C 06 38 00            DW   DoUSE,vvUSER   
1168                VVUSER:   .SET   vvUSER + CELLL   
1168                VVUSER:   .SET   vvUSER + CELLL   ;vocabulary link pointer
1168                             ;   CP          ( -- a )
1168                             ;               Point to the top of the code dictionary.
1168                          ;*Macro unroll: hUSER   2,'CP',CP
1168                          ;*Macro unroll: 	hCODE 2, "CP", CP
1168                          ALIGN   2   
1168                CP:          
1168   00                     NOP      
1169   CD 56 06               CALL   doLIST   
116C   7C 06 3C 00            DW   DoUSE,vvUSER   
1170                VVUSER:   .SET   vvUSER + CELLL   
1170                             ;   NP          ( -- a )
1170                             ;               Point to the bottom of the name dictionary.
1170                          ;*Macro unroll: hUSER   2,'NP',NP
1170                          ;*Macro unroll: 	hCODE 2, "NP", NP
1170                          ALIGN   2   
1170                NP:          
1170   00                     NOP      
1171   CD 56 06               CALL   doLIST   
1174   7C 06 3E 00            DW   DoUSE,vvUSER   
1178                VVUSER:   .SET   vvUSER + CELLL   
1178                             ;   LAST        ( -- a )
1178                             ;               Point to the last name in the name dictionary.
1178                          ;*Macro unroll: mUSER   4,'LAST',LAST
1178                          ;*Macro unroll: 	mCODE 4, "LAST", LAST
1178                          ALIGN   2   
1178                LAST:        
1178                VVCODE:   .SET   $   
1178                VVLEN:    .SET   (4 & 01FH) / CELLL   
13BA                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
13BA                VVNAME:   .SET   $   
13BA   78 11 C8 13            DW   vvCODE,vvLINK   
13BE                VVLINK:   .SET   $   
13BE   04 4C 41 53 54         DB   4,"LAST"   
1178                          .ORG   vvCODE   
1178   00                     NOP      
1179   CD 56 06               CALL   doLIST   
117C   7C 06 40 00            DW   DoUSE,vvUSER   
1180                VVUSER:   .SET   vvUSER + CELLL   
1180                             ;   forth       ( -- a )
1180                             ;               Point to the last name in the name dictionary.
1180                          ;*Macro unroll: hUSER   5,'forth',VFRTH
1180                          ;*Macro unroll: 	hCODE 5, "forth", VFRTH
1180                          ALIGN   2   
1180                VFRTH:       
1180   00                     NOP      
1181   CD 56 06               CALL   doLIST   
1184   7C 06 42 00            DW   DoUSE,vvUSER   
1188                VVUSER:   .SET   vvUSER + CELLL   
1188                             ;   _TYPE       ( b u -- )
1188                             ;               Display a string. Filter non-printing characters.
1188                          ;*Macro unroll: mCOLON  5,'_TYPE',UTYPE
1188                          ;*Macro unroll:  mCODE 5, "_TYPE", UTYPE
1188                          ALIGN   2   
1188                UTYPE:       
1188                VVCODE:   .SET   $   
1188                VVLEN:    .SET   (5 & 01FH) / CELLL   
13B0                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
13B0                VVNAME:   .SET   $   
13B0   88 11 BE 13            DW   vvCODE,vvLINK   
13B4                VVLINK:   .SET   $   
13B4   05 5F 54 59 50 45      DB   5,"_TYPE"   
1188                          .ORG   vvCODE   
1188   00                     NOP      
1189   CD 56 06               CALL   doLIST   
118C   2C 10                  DW   TOR   ;start count down loop
118E   40 0E A0 11            DW   BRAN,UTYP2   ;skip first pass
1192                UTYP1:       
1192   48 10 74 0E F2 07 0E 0C DW   DUPP,CAT,TCHAR,EMIT   ;display only printable
119A   64 06 01 00 64 01      DW   DOLIT,1,PLUS   ;increment address
11A0                UTYP2:       
11A0   02 07 92 11            DW   DONXT,UTYP1   ;loop till done
11A4   4C 10 8C 06            DW   DROP,EXIT   
11A8                             ;   dm+         ( a u -- a )
11A8                             ;               Dump u bytes from , leaving a+u on the stack.
11A8                          ;*Macro unroll: hCOLON  3,'dm+',DMP
11A8                          ;*Macro unroll:  hCODE 3, "dm+", DMP
11A8                          ALIGN   2   
11A8                DMP:         
11A8   00                     NOP      
11A9   CD 56 06               CALL   doLIST   
11AC   58 10 64 06 04 00 D0 0C DW   OVER,DOLIT,4,UDOTR   ;display address
11B4   3E 0C 2C 10            DW   SPACE,TOR   ;start count down loop
11B8   40 0E CC 11            DW   BRAN,PDUM2   ;skip first pass
11BC                PDUM1:       
11BC   48 10 74 0E 64 06 03 00 D0 0C DW   DUPP,CAT,DOLIT,3,UDOTR   ;display numeric data
11C6   64 06 01 00 64 01      DW   DOLIT,1,PLUS   ;increment address
11CC                PDUM2:       
11CC   02 07 BC 11            DW   DONXT,PDUM1   ;loop till done
11D0   8C 06                  DW   EXIT   
11D2                             ;   DUMP        ( a u -- )
11D2                             ;               Dump u bytes from a, in a formatted manner.
11D2                          ;*Macro unroll: mCOLON  4,'DUMP',DUMP
11D2                          ;*Macro unroll:  mCODE 4, "DUMP", DUMP
11D2                          ALIGN   2   
11D2                DUMP:        
11D2                VVCODE:   .SET   $   
11D2                VVLEN:    .SET   (4 & 01FH) / CELLL   
13A6                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
13A6                VVNAME:   .SET   $   
13A6   D2 11 B4 13            DW   vvCODE,vvLINK   
13AA                VVLINK:   .SET   $   
13AA   04 44 55 4D 50         DB   4,"DUMP"   
11D2                          .ORG   vvCODE   
11D2   00                     NOP      
11D3   CD 56 06               CALL   doLIST   
11D6   08 11 64 0E 2C 10 CC 07 DW   BASE,AT,TOR,HEX   ;save radix, set hex
11DE   64 06 10 00 70 03      DW   DOLIT,16,SLASH   ;change count to lines
11E4   2C 10                  DW   TOR   ;start count down loop
11E6                DUMP1:       
11E6   7E 0C 64 06 10 00 86 10 A8 11 DW   CR,DOLIT,16,DDUP,DMP   ;display numeric
11F0   6E 10 6E 10            DW   ROT,ROT   
11F4   3E 0C 3E 0C 88 11      DW   SPACE,SPACE,UTYPE   ;display printable characters
11FA   1A 0C 84 01            DW   NUFQ,INVER   ;user control
11FE   34 0E 0A 12            DW   QBRAN,DUMP2   
1202   02 07 E6 11            DW   DONXT,DUMP1   ;loop till done
1206   40 0E 0E 12            DW   BRAN,DUMP3   
120A                DUMP2:       
120A   3A 10 4C 10            DW   RFROM,DROP   ;cleanup loop stack, early exit
120E                DUMP3:       
120E   4C 10 3A 10 08 11 5A 0E DW   DROP,RFROM,BASE,STORE   ;restore radix
1216   8C 06                  DW   EXIT   
1218                             ;   .S          ( ... -- ... )
1218                             ;               Display the contents of the data stack.
1218                          ;*Macro unroll: mCOLON  2,'.S',DOTS
1218                          ;*Macro unroll:  mCODE 2, ".S", DOTS
1218                          ALIGN   2   
1218                DOTS:        
1218                VVCODE:   .SET   $   
1218                VVLEN:    .SET   (2 & 01FH) / CELLL   
139E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
139E                VVNAME:   .SET   $   
139E   18 12 AA 13            DW   vvCODE,vvLINK   
13A2                VVLINK:   .SET   $   
13A2   02 2E 53               DB   2,".S"   
1218                          .ORG   vvCODE   
1218   00                     NOP      
1219   CD 56 06               CALL   doLIST   
121C   7E 0C B2 10            DW   CR,DEPTH   ;stack depth
1220   2C 10                  DW   TOR   ;start count down loop
1222   40 0E 2C 12            DW   BRAN,DOTS2   ;skip first pass
1226                DOTS1:       
1226   7C 0E 9E 10 F8 0C      DW   RAT,PICK,DOT   ;index stack, display contents
122C                DOTS2:       
122C   02 07 26 12            DW   DONXT,DOTS1   ;loop till done
1230                          ;*Macro unroll:  mDSTR DOTQP,' <sp'
1230   B0 0C                  DW   DOTQP   
1232                VVLEN:    .SET   $   
1232   00 20 3C 73 70         DB   0," <sp"   
1237                VVCODE:   .SET   $   
1232                          .ORG   vvLEN   
1232   04                     DB   vvCODE - vvLEN - 1   
1237                          .ORG   vvCODE   
1237   8C 06                  DW   EXIT   
1239                             ;   !CSP        ( -- )
1239                             ;               Save stack pointer in CSP for error checking.
1239                             ;   ?CSP        ( -- )
1239                             ;               Abort if stack pointer differs from that saved in CSP.
1239                             ;   >NAME       ( ca -- na | F )
1239                             ;               Convert code address to a name address.
1239                             ;   .ID         ( na -- )
1239                             ;               Display the name at address.
1239                             ;   SEE         ( -- ; <string> )
1239                             ;               A simple decompiler.
1239                             ;   WORDS       ( -- )
1239                             ;               Display the names in the context vocabulary.
1239                             ;   COLD        ( -- )
1239                             ;               The hilevel cold start sequence.
2000                          .ORG   END_ROM   
2000                          .ORG   START_RAM   
2000                          IF   TESTMODE   
                    TESTS_START:      
                              LD   HL,DONE   
                              CALL   PRINTSZ   
                              HALT      
                    DONE:     .CSTR   "Done!\r\n"   
2000                          ENDIF      
2000                          DS   DTS   ; data stack size
2200                SPP:         ; SP0 grows down
2200                TIBB:        
2200                          DS   RTS   ; return stack size
2400                RPP:         ; RP0 grows down (into TIBB)
2400                UPP:         
2400   00 00        VARSPP:   DW   0   ; SP0
2402   00 00        VARRPP:   DW   0   ; RP0
2404   00 00        VARQKEY:   DW   0   ; '?KEY
2406   00 00        VARTEMIT:   DW   0   ; 'EMIT
2408   00 00        VARTEXPECT:   DW   0   ; 'EXPECT
240A   00 00        VARTTAP:   DW   0   ; 'TAP
240C   00 00        VARTECHO:   DW   0   ; 'ECHO
240E   00 00        VARTPROMPT:   DW   0   ; 'PROMPT
2410   00 00        VARBASE:   DW   0   ; BASE
2412   00 00        VARTMP:   DW   0   ; tmp
2414   00 00        VARSPAN:   DW   0   ; SPAN
2416   00 00        VARPIN:   DW   0   ; >IN
2418   00 00        VARNTIB:   DW   0   ; #TIB
241A   00 00        VARTIB:   DW   0   ; TIB
241C   00 00        VARCSP:   DW   0   ; CSP
241E   00 00        VARTEVAL:   DW   0   ; 'EVAL
2420   00 00        VARTNUM:   DW   0   ; 'NUMBER
2422   00 00        VARHLD:   DW   0   ; HLD
2424   00 00        VARHANDLER:   DW   0   ; HANDLER
2426   00 00        VARCONTEXT:   DW   0   ; CONTEXT pointer
2428   00 00        VARVOCABS:   DW   0   ; vocabulary stack    ???
242A   00 00        VARCURRENT:   DW   0   ; CURRENT pointer
242C   00 00        VARVOCABLP:   DW   0   ; vocabulary link pointer ???
242E   00 00        VARCP:    DW   0   ; CP  for runing phase on RAM
2430   00 00        VARNP:    DW   0   ; NP  for runing phase on RAM
2432   00 00        VARLAST:   DW   0   ; LAST
2434   00 00        VARFORTH:   DW   0   ; FORTH   \ mullti-user ???
2436   00 00        VARVOCABL:   DW   0   ; vocabulary link       ???
2438   00 00        SERINPTR:   DW   0   
243A   00 00        SERRDPTR:   DW   0   
243C   00 00        SERBUFUSED:   DW   0   
243E                SERBUF:   DS   SER_BUFSIZE   
247D                CPP:         ; grows up
FFFE                          .ORG   END_RAM - 2   
FFFE                NPP:         ; grows down
FFFE                          .END      


TESTMODE:           0000 DEFINED AT LINE 3
MEM_SIZE:           10000 DEFINED AT LINE 1 IN constants.z80
                    > USED AT LINE 3 IN constants.z80
                    > USED AT LINE 12 IN constants.z80
ROM_SIZE:           2000 DEFINED AT LINE 2 IN constants.z80
                    > USED AT LINE 3 IN constants.z80
                    > USED AT LINE 6 IN constants.z80
                    > USED AT LINE 8 IN constants.z80
RAM_SIZE:           E000 DEFINED AT LINE 3 IN constants.z80
                    > USED AT LINE 9 IN constants.z80
START_ROM:          0000 DEFINED AT LINE 5 IN constants.z80
                    > USED AT LINE 8
END_ROM:            2000 DEFINED AT LINE 6 IN constants.z80
                    > USED AT LINE 4 IN word.macro.z80
                    > USED AT LINE 62
START_RAM:          2000 DEFINED AT LINE 8 IN constants.z80
                    > USED AT LINE 9 IN constants.z80
                    > USED AT LINE 63
END_RAM:            10000 DEFINED AT LINE 9 IN constants.z80
                    > USED AT LINE 44 IN variables.z80
BM:                 0000 DEFINED AT LINE 11 IN constants.z80
                    > USED AT LINE 5 IN constants.z80
                    > USED AT LINE 6 IN constants.z80
                    > USED AT LINE 8 IN constants.z80
                    > USED AT LINE 12 IN constants.z80
EM:                 10000 DEFINED AT LINE 12 IN constants.z80
COMPO:              0020 DEFINED AT LINE 14 IN constants.z80
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
IMEDD:              0040 DEFINED AT LINE 15 IN constants.z80
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 133 IN core-compiler.z80
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
MASKK:              001F DEFINED AT LINE 16 IN constants.z80
CHARR:              0001 DEFINED AT LINE 18 IN constants.z80
                    > USED AT LINE 386 IN core-alu.z80
CELLL:              0002 DEFINED AT LINE 19 IN constants.z80
                    > USED AT LINE 39 IN constants.z80
                    > USED AT LINE 40 IN constants.z80
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 370 IN core-alu.z80
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 375 IN core-alu.z80
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 145 IN core-interpret.z80
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 184 IN core-memory.z80
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 196 IN core-memory.z80
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 90 IN core-stacks.z80
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 33
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 33
                    > USED AT LINE 63
                    > USED AT LINE 63
                    > USED AT LINE 63
                    > USED AT LINE 63
                    > USED AT LINE 63
                    > USED AT LINE 63
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 33
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 33
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 33
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 33
                    > USED AT LINE 63
                    > USED AT LINE 65 IN core-user.z80
                    > USED AT LINE 63
                    > USED AT LINE 63
                    > USED AT LINE 63
                    > USED AT LINE 63
                    > USED AT LINE 63
                    > USED AT LINE 63
                    > USED AT LINE 96 IN core-user.z80
                    > USED AT LINE 63
                    > USED AT LINE 102 IN core-user.z80
                    > USED AT LINE 63
                    > USED AT LINE 63
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 33
                    > USED AT LINE 63
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
BASEE:              000A DEFINED AT LINE 20 IN constants.z80
VOCSS:              0008 DEFINED AT LINE 21 IN constants.z80
                    > USED AT LINE 96 IN core-user.z80
MAXCHAR:            00FF DEFINED AT LINE 23 IN constants.z80
MAXSIGNED:          7FFF DEFINED AT LINE 24 IN constants.z80
MAXUNSIGNED:        FFFF DEFINED AT LINE 25 IN constants.z80
MAXNEGATIVE:        8000 DEFINED AT LINE 26 IN constants.z80
BKSPP:              0008 DEFINED AT LINE 28 IN constants.z80
                    > USED AT LINE 164 IN core-io.z80
                    > USED AT LINE 166 IN core-io.z80
                    > USED AT LINE 181 IN core-io.z80
LFF:                000A DEFINED AT LINE 29 IN constants.z80
CRR:                000D DEFINED AT LINE 30 IN constants.z80
                    > USED AT LINE 102 IN core-io.z80
SPACEE:             0020 DEFINED AT LINE 31 IN constants.z80
                    > USED AT LINE 77 IN core-format.z80
                    > USED AT LINE 84 IN core-format.z80
TIC:                0027 DEFINED AT LINE 32 IN constants.z80
MINUSS:             002D DEFINED AT LINE 33 IN constants.z80
                    > USED AT LINE 44 IN core-format.z80
UNDERSC:            005F DEFINED AT LINE 34 IN constants.z80
CALLL:              CD00 DEFINED AT LINE 36 IN constants.z80
                    > USED AT LINE 119 IN core-compiler.z80
US:                 003A DEFINED AT LINE 38 IN constants.z80
                    > USED AT LINE 21
RTS:                0200 DEFINED AT LINE 39 IN constants.z80
                    > USED AT LINE 5 IN variables.z80
DTS:                0200 DEFINED AT LINE 40 IN constants.z80
                    > USED AT LINE 2 IN variables.z80
RET_STACK_SIZE:     0100 DEFINED AT LINE 42 IN constants.z80
DATA_STACK_SIZE:    0100 DEFINED AT LINE 43 IN constants.z80
INT_ADDR:           0038 DEFINED AT LINE 45 IN constants.z80
                    > USED AT LINE 1 IN interrupt.z80
SER_BUFSIZE:        003F DEFINED AT LINE 46 IN constants.z80
                    > USED AT LINE 12 IN interrupt.z80
                    > USED AT LINE 20 IN interrupt.z80
                    > USED AT LINE 25 IN serial.z80
                    > USED AT LINE 41 IN variables.z80
SER_FULLSIZE:       0030 DEFINED AT LINE 47 IN constants.z80
                    > USED AT LINE 29 IN interrupt.z80
SER_EMPTYSIZE:      0005 DEFINED AT LINE 48 IN constants.z80
                    > USED AT LINE 34 IN serial.z80
RTS_HIGH:           00D6 DEFINED AT LINE 50 IN constants.z80
                    > USED AT LINE 31 IN interrupt.z80
RTS_LOW:            0096 DEFINED AT LINE 51 IN constants.z80
                    > USED AT LINE 11 IN serial.z80
                    > USED AT LINE 36 IN serial.z80
TRUEE:              00-1 DEFINED AT LINE 53 IN constants.z80
                    > USED AT LINE 26 IN core-io.z80
FALSEE:             0000 DEFINED AT LINE 54 IN constants.z80
                    > USED AT LINE 19 IN core-io.z80
VVCODE:             1237 DEFINED AT LINE 40
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 42
                    > USED AT LINE 43
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 42
                    > USED AT LINE 43
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 42
                    > USED AT LINE 43
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 42
                    > USED AT LINE 43
                    > USED AT LINE 42
                    > USED AT LINE 43
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 42
                    > USED AT LINE 43
VVNAME:             139E DEFINED AT LINE 15
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
VVLINK:             13A2 DEFINED AT LINE 17
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
VVUSER:             118A DEFINED AT LINE 63
                    > USED AT LINE 32
                    > USED AT LINE 33
                    > USED AT LINE 32
                    > USED AT LINE 33
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 32
                    > USED AT LINE 33
                    > USED AT LINE 32
                    > USED AT LINE 33
                    > USED AT LINE 32
                    > USED AT LINE 33
                    > USED AT LINE 32
                    > USED AT LINE 33
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 65 IN core-user.z80
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 96 IN core-user.z80
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 102 IN core-user.z80
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 32
                    > USED AT LINE 33
                    > USED AT LINE 62
                    > USED AT LINE 63
RESET:              0000 DEFINED AT LINE 10
                    > USED AT LINE 28
SERIALINT:          0038 DEFINED AT LINE 2 IN interrupt.z80
NOTFULL:            004D DEFINED AT LINE 17 IN interrupt.z80
                    > USED AT LINE 13 IN interrupt.z80
NOTWRAP:            0059 DEFINED AT LINE 23 IN interrupt.z80
                    > USED AT LINE 21 IN interrupt.z80
RTS0:               006D DEFINED AT LINE 33 IN interrupt.z80
                    > USED AT LINE 7 IN interrupt.z80
                    > USED AT LINE 15 IN interrupt.z80
                    > USED AT LINE 30 IN interrupt.z80
INIT:               0072 DEFINED AT LINE 15
                    > USED AT LINE 11
LOOP:               0098 DEFINED AT LINE 37
                    > USED AT LINE 40
INIT_IO:            00A1 DEFINED AT LINE 4 IN serial.z80
                    > USED AT LINE 10 IN core-io.z80
RXA:                00B5 DEFINED AT LINE 16 IN serial.z80
                    > USED AT LINE 38
                    > USED AT LINE 22 IN core-io.z80
WAITFORCHAR:        00B5 DEFINED AT LINE 17 IN serial.z80
                    > USED AT LINE 20 IN serial.z80
NOTRDWRAP:          00C9 DEFINED AT LINE 28 IN serial.z80
                    > USED AT LINE 26 IN serial.z80
RTS1:               00DC DEFINED AT LINE 38 IN serial.z80
                    > USED AT LINE 35 IN serial.z80
TXA:                00E0 DEFINED AT LINE 44 IN serial.z80
                    > USED AT LINE 39
                    > USED AT LINE 63 IN serial.z80
                    > USED AT LINE 34 IN core-io.z80
CONOUT1:            00E1 DEFINED AT LINE 46 IN serial.z80
                    > USED AT LINE 49 IN serial.z80
CKINCHAR:           00EB DEFINED AT LINE 54 IN serial.z80
                    > USED AT LINE 17 IN core-io.z80
PRINTSZ:            00F1 DEFINED AT LINE 59 IN serial.z80
                    > USED AT LINE 36
                    > USED AT LINE 65 IN serial.z80
                    > USED AT LINE 53 IN core-kernel.z80
DEFAULTS:           00FB DEFINED AT LINE 3 IN defaults.z80
                    > USED AT LINE 38 IN constants.z80
                    > USED AT LINE 19
DEFSP0:             00FB DEFINED AT LINE 5 IN defaults.z80
DEFRP0:             00FD DEFINED AT LINE 6 IN defaults.z80
DEFQKEY:            00FF DEFINED AT LINE 7 IN defaults.z80
DEFTEMIT:           0101 DEFINED AT LINE 8 IN defaults.z80
DEFTEXPECT:         0103 DEFINED AT LINE 9 IN defaults.z80
DEFTTAP:            0105 DEFINED AT LINE 10 IN defaults.z80
DEFTECHO:           0107 DEFINED AT LINE 11 IN defaults.z80
DEFTPROMPT:         0109 DEFINED AT LINE 12 IN defaults.z80
DEFBASE:            010B DEFINED AT LINE 13 IN defaults.z80
DEFTMP:             010D DEFINED AT LINE 14 IN defaults.z80
DEFSPAN:            010F DEFINED AT LINE 15 IN defaults.z80
DEFPIN:             0111 DEFINED AT LINE 16 IN defaults.z80
DEFNTIB:            0113 DEFINED AT LINE 17 IN defaults.z80
DEFTIB:             0115 DEFINED AT LINE 18 IN defaults.z80
DEFCSP:             0117 DEFINED AT LINE 19 IN defaults.z80
DEFTEVAL:           0119 DEFINED AT LINE 20 IN defaults.z80
DEFTNUM:            011B DEFINED AT LINE 21 IN defaults.z80
DEFHLD:             011D DEFINED AT LINE 22 IN defaults.z80
DEFHANDLER:         011F DEFINED AT LINE 23 IN defaults.z80
DEFCONTEXT:         0121 DEFINED AT LINE 24 IN defaults.z80
DEFVOCABS:          0123 DEFINED AT LINE 25 IN defaults.z80
DEFCURRENT:         0125 DEFINED AT LINE 26 IN defaults.z80
DEFVOCABLP:         0127 DEFINED AT LINE 27 IN defaults.z80
DEFCP:              0129 DEFINED AT LINE 28 IN defaults.z80
DEFNP:              012B DEFINED AT LINE 29 IN defaults.z80
DEFLAST:            012D DEFINED AT LINE 30 IN defaults.z80
DEFFORTH:           012F DEFINED AT LINE 31 IN defaults.z80
DEFVOCABL:          0131 DEFINED AT LINE 32 IN defaults.z80
DEFCOLD:            0133 DEFINED AT LINE 33 IN defaults.z80
END_DEFAULTS:       0135 DEFINED AT LINE 34 IN defaults.z80
                    > USED AT LINE 38 IN constants.z80
TWOSTAR:            0136 DEFINED AT LINE 11
                    > USED AT LINE 380 IN core-alu.z80
VVLEN:              1232 DEFINED AT LINE 38
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 41
                    > USED AT LINE 42
                    > USED AT LINE 14
                    > USED AT LINE 41
                    > USED AT LINE 42
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 41
                    > USED AT LINE 42
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 41
                    > USED AT LINE 42
                    > USED AT LINE 41
                    > USED AT LINE 42
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 41
                    > USED AT LINE 42
ZLESS:              013E DEFINED AT LINE 11
                    > USED AT LINE 94 IN core-alu.z80
                    > USED AT LINE 121 IN core-alu.z80
                    > USED AT LINE 123 IN core-alu.z80
                    > USED AT LINE 134 IN core-alu.z80
                    > USED AT LINE 136 IN core-alu.z80
                    > USED AT LINE 272 IN core-alu.z80
                    > USED AT LINE 275 IN core-alu.z80
                    > USED AT LINE 296 IN core-alu.z80
                    > USED AT LINE 43 IN core-format.z80
                    > USED AT LINE 57 IN core-interpret.z80
                    > USED AT LINE 71 IN core-interpret.z80
                    > USED AT LINE 256 IN core-interpret.z80
ANDD:               0146 DEFINED AT LINE 11
ORR:                0150 DEFINED AT LINE 11
XORR:               015A DEFINED AT LINE 11
                    > USED AT LINE 102 IN core-alu.z80
                    > USED AT LINE 119 IN core-alu.z80
                    > USED AT LINE 133 IN core-alu.z80
                    > USED AT LINE 351 IN core-alu.z80
                    > USED AT LINE 194 IN core-io.z80
PLUS:               0164 DEFINED AT LINE 11
                    > USED AT LINE 84 IN core-alu.z80
                    > USED AT LINE 89 IN core-alu.z80
                    > USED AT LINE 44 IN core-compiler.z80
                    > USED AT LINE 192 IN core-io.z80
                    > USED AT LINE 198 IN core-memory.z80
                    > USED AT LINE 84 IN core-stacks.z80
DPLUS:              016E DEFINED AT LINE 11
INVER:              0184 DEFINED AT LINE 11
                    > USED AT LINE 72 IN core-alu.z80
                    > USED AT LINE 82 IN core-alu.z80
                    > USED AT LINE 37 IN core-utils.z80
NEGAT:              0190 DEFINED AT LINE 11
                    > USED AT LINE 89 IN core-alu.z80
                    > USED AT LINE 95 IN core-alu.z80
                    > USED AT LINE 273 IN core-alu.z80
                    > USED AT LINE 276 IN core-alu.z80
                    > USED AT LINE 34 IN core-interpret.z80
ONEPLUS:            019A DEFINED AT LINE 11
                    > USED AT LINE 72 IN core-alu.z80
DNEGATE:            01A6 DEFINED AT LINE 11
                    > USED AT LINE 269 IN core-alu.z80
                    > USED AT LINE 353 IN core-alu.z80
SUBB:               01BC DEFINED AT LINE 11
                    > USED AT LINE 123 IN core-alu.z80
                    > USED AT LINE 136 IN core-alu.z80
                    > USED AT LINE 162 IN core-alu.z80
                    > USED AT LINE 163 IN core-alu.z80
                    > USED AT LINE 65 IN core-does.z80
                    > USED AT LINE 57 IN core-interpret.z80
                    > USED AT LINE 82 IN core-interpret.z80
                    > USED AT LINE 135 IN core-interpret.z80
                    > USED AT LINE 185 IN core-memory.z80
ABSS:               01C6 DEFINED AT LINE 11
                    > USED AT LINE 271 IN core-alu.z80
ABS1:               01D4 DEFINED AT LINE 96 IN core-alu.z80
EQUAL:              01D6 DEFINED AT LINE 11
ZEROEQUALS:         01E0 DEFINED AT LINE 11
                    > USED AT LINE 102 IN core-alu.z80
ULESS:              01EA DEFINED AT LINE 11
ULES1:              01FE DEFINED AT LINE 122 IN core-alu.z80
                    > USED AT LINE 120 IN core-alu.z80
NIP:                0204 DEFINED AT LINE 11
                    > USED AT LINE 121 IN core-alu.z80
                    > USED AT LINE 182 IN core-alu.z80
                    > USED AT LINE 311 IN core-alu.z80
                    > USED AT LINE 365 IN core-alu.z80
LESS:               020E DEFINED AT LINE 11
                    > USED AT LINE 141 IN core-alu.z80
                    > USED AT LINE 146 IN core-alu.z80
LESS1:              0222 DEFINED AT LINE 135 IN core-alu.z80
GREATERTHAN:        0228 DEFINED AT LINE 11
                    > USED AT LINE 154 IN core-alu.z80
MAX:                0232 DEFINED AT LINE 11
MAX1:               0240 DEFINED AT LINE 148 IN core-alu.z80
MIN:                0244 DEFINED AT LINE 11
MIN1:               0252 DEFINED AT LINE 156 IN core-alu.z80
WITHI:              0256 DEFINED AT LINE 11
UMPLUS:             0268 DEFINED AT LINE 11
                    > USED AT LINE 56 IN core-alu.z80
UMP2:               0270 DEFINED AT LINE 173 IN core-alu.z80
UMP1:               0271 DEFINED AT LINE 175 IN core-alu.z80
                    > USED AT LINE 172 IN core-alu.z80
UMMOD:              0274 DEFINED AT LINE 11
                    > USED AT LINE 194 IN core-memory.z80
UMSLASHMOD2:        027E DEFINED AT LINE 11
                    > USED AT LINE 182 IN core-alu.z80
UMMOD11:            0282 DEFINED AT LINE 192 IN core-alu.z80
UMMOD12:            028D DEFINED AT LINE 203 IN core-alu.z80
UMMOD2:             02A7 DEFINED AT LINE 223 IN core-alu.z80
                    > USED AT LINE 191 IN core-alu.z80
UMMOD1:             02AD DEFINED AT LINE 226 IN core-alu.z80
                    > USED AT LINE 202 IN core-alu.z80
UMMOD4:             02B3 DEFINED AT LINE 229 IN core-alu.z80
                    > USED AT LINE 247 IN core-alu.z80
UMMOD13:            02BB DEFINED AT LINE 237 IN core-alu.z80
UMMOD3:             02C1 DEFINED AT LINE 244 IN core-alu.z80
                    > USED AT LINE 209 IN core-alu.z80
                    > USED AT LINE 213 IN core-alu.z80
                    > USED AT LINE 258 IN core-alu.z80
UMMOD14:            02C5 DEFINED AT LINE 248 IN core-alu.z80
UMMOD5:             02CB DEFINED AT LINE 255 IN core-alu.z80
                    > USED AT LINE 236 IN core-alu.z80
UMMOD15:            02CF DEFINED AT LINE 259 IN core-alu.z80
FMSLASHMOD:         02D0 DEFINED AT LINE 11
FMMOD1:             02EA DEFINED AT LINE 270 IN core-alu.z80
                    > USED AT LINE 268 IN core-alu.z80
FMMOD2:             02FE DEFINED AT LINE 274 IN core-alu.z80
FMMOD4:             0318 DEFINED AT LINE 278 IN core-alu.z80
FMMOD6:             032E DEFINED AT LINE 282 IN core-alu.z80
FMMOD3:             0330 DEFINED AT LINE 284 IN core-alu.z80
ONESUBB:            0342 DEFINED AT LINE 11
STOD:               034E DEFINED AT LINE 11
                    > USED AT LINE 301 IN core-alu.z80
SLASHMOD:           0358 DEFINED AT LINE 11
                    > USED AT LINE 306 IN core-alu.z80
                    > USED AT LINE 311 IN core-alu.z80
MODD:               0366 DEFINED AT LINE 11
SLASH:              0370 DEFINED AT LINE 11
UMSTAR:             037A DEFINED AT LINE 11
                    > USED AT LINE 346 IN core-alu.z80
                    > USED AT LINE 352 IN core-alu.z80
UMSTAR1:            0382 DEFINED AT LINE 323 IN core-alu.z80
                    > USED AT LINE 336 IN core-alu.z80
UMSTAR2:            0389 DEFINED AT LINE 329 IN core-alu.z80
UMSTAR5:            038C DEFINED AT LINE 332 IN core-alu.z80
UMSTAR3:            038D DEFINED AT LINE 334 IN core-alu.z80
                    > USED AT LINE 328 IN core-alu.z80
                    > USED AT LINE 331 IN core-alu.z80
UMSTAR4:            0390 DEFINED AT LINE 337 IN core-alu.z80
STAR:               0396 DEFINED AT LINE 11
MSTAR:              03A0 DEFINED AT LINE 11
                    > USED AT LINE 360 IN core-alu.z80
MSTAR1:             03BC DEFINED AT LINE 354 IN core-alu.z80
STARSLASHMOD:       03BE DEFINED AT LINE 11
                    > USED AT LINE 365 IN core-alu.z80
STARSLASH:          03CC DEFINED AT LINE 11
CELLP:              03D6 DEFINED AT LINE 11
                    > USED AT LINE 32 IN core-compiler.z80
                    > USED AT LINE 151 IN core-interpret.z80
                    > USED AT LINE 153 IN core-interpret.z80
                    > USED AT LINE 171 IN core-interpret.z80
                    > USED AT LINE 97 IN core-memory.z80
                    > USED AT LINE 102 IN core-memory.z80
                    > USED AT LINE 125 IN core-memory.z80
CELLM:              03E2 DEFINED AT LINE 11
                    > USED AT LINE 72 IN core-compiler.z80
                    > USED AT LINE 74 IN core-compiler.z80
                    > USED AT LINE 126 IN core-interpret.z80
                    > USED AT LINE 126 IN core-interpret.z80
                    > USED AT LINE 156 IN core-interpret.z80
                    > USED AT LINE 158 IN core-interpret.z80
                    > USED AT LINE 158 IN core-interpret.z80
                    > USED AT LINE 161 IN core-interpret.z80
                    > USED AT LINE 169 IN core-interpret.z80
CELLS:              03EE DEFINED AT LINE 11
CHARPLUS:           03F6 DEFINED AT LINE 11
TICK:               0402 DEFINED AT LINE 11
                    > USED AT LINE 25 IN core-compiler.z80
TICK1:              0410 DEFINED AT LINE 7 IN core-compiler.z80
                    > USED AT LINE 5 IN core-compiler.z80
ALLOT:              0412 DEFINED AT LINE 11
COMMA:              041C DEFINED AT LINE 11
                    > USED AT LINE 25 IN core-compiler.z80
                    > USED AT LINE 90 IN core-compiler.z80
                    > USED AT LINE 120 IN core-compiler.z80
BCOMP:              042E DEFINED AT LINE 11
COMPI:              0438 DEFINED AT LINE 11
                    > USED AT LINE 38 IN core-compiler.z80
                    > USED AT LINE 107 IN core-compiler.z80
                    > USED AT LINE 142 IN core-compiler.z80
                    > USED AT LINE 150 IN core-compiler.z80
                    > USED AT LINE 4 IN core-control.z80
                    > USED AT LINE 14 IN core-control.z80
                    > USED AT LINE 19 IN core-control.z80
                    > USED AT LINE 24 IN core-control.z80
                    > USED AT LINE 30 IN core-control.z80
                    > USED AT LINE 37 IN core-control.z80
LITER:              044A DEFINED AT LINE 11
                    > USED AT LINE 94 IN core-compiler.z80
STRCQ:              0456 DEFINED AT LINE 49
RECUR:              046C DEFINED AT LINE 11
UNIQU:              047A DEFINED AT LINE 11
                    > USED AT LINE 69 IN core-compiler.z80
UNIQ1:              0496 DEFINED AT LINE 60 IN core-compiler.z80
                    > USED AT LINE 57 IN core-compiler.z80
SNAME:              049A DEFINED AT LINE 11
                    > USED AT LINE 126 IN core-compiler.z80
                    > USED AT LINE 140 IN core-compiler.z80
                    > USED AT LINE 148 IN core-compiler.z80
PNAM1:              04CC DEFINED AT LINE 76 IN core-compiler.z80
                    > USED AT LINE 68 IN core-compiler.z80
SCOMP:              04D6 DEFINED AT LINE 49
                    > USED AT LINE 113 IN core-compiler.z80
SCOM1:              04F2 DEFINED AT LINE 89 IN core-compiler.z80
                    > USED AT LINE 87 IN core-compiler.z80
SCOM2:              04F6 DEFINED AT LINE 91 IN core-compiler.z80
                    > USED AT LINE 85 IN core-compiler.z80
SCOM3:              0502 DEFINED AT LINE 95 IN core-compiler.z80
                    > USED AT LINE 93 IN core-compiler.z80
OVERT:              0504 DEFINED AT LINE 49
SEMIS:              0514 DEFINED AT LINE 11
RBRAC:              0522 DEFINED AT LINE 11
                    > USED AT LINE 127 IN core-compiler.z80
CALLC:              0530 DEFINED AT LINE 49
                    > USED AT LINE 127 IN core-compiler.z80
COLON:              053E DEFINED AT LINE 11
IMMED:              0550 DEFINED AT LINE 11
USER:               0568 DEFINED AT LINE 11
CREAT:              0580 DEFINED AT LINE 11
                    > USED AT LINE 156 IN core-compiler.z80
VARIA:              0596 DEFINED AT LINE 11
FOR:                05A4 DEFINED AT LINE 11
BEGIN:              05B0 DEFINED AT LINE 11
NEXT:               05B8 DEFINED AT LINE 11
UNTIL:              05C4 DEFINED AT LINE 11
AGAIN:              05D0 DEFINED AT LINE 11
                    > USED AT LINE 43 IN core-control.z80
IFF:                05DC DEFINED AT LINE 11
                    > USED AT LINE 64 IN core-control.z80
AHEAD:              05EE DEFINED AT LINE 11
                    > USED AT LINE 54 IN core-control.z80
                    > USED AT LINE 59 IN core-control.z80
REPEA:              0600 DEFINED AT LINE 11
THENN:              060E DEFINED AT LINE 11
AFT:                061A DEFINED AT LINE 11
ELSEE:              0628 DEFINED AT LINE 11
WHILE:              0634 DEFINED AT LINE 11
UNLOOP:             063E DEFINED AT LINE 11
DOCONST:            064E DEFINED AT LINE 49
DOLIST:             0656 DEFINED AT LINE 49
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 141 IN core-compiler.z80
                    > USED AT LINE 25
                    > USED AT LINE 149 IN core-compiler.z80
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 31
                    > USED AT LINE 31
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 31
                    > USED AT LINE 31
                    > USED AT LINE 31
                    > USED AT LINE 31
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 31
                    > USED AT LINE 61
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
DOLIT:              0664 DEFINED AT LINE 49
                    > USED AT LINE 67 IN core-alu.z80
                    > USED AT LINE 77 IN core-alu.z80
                    > USED AT LINE 83 IN core-alu.z80
                    > USED AT LINE 280 IN core-alu.z80
                    > USED AT LINE 281 IN core-alu.z80
                    > USED AT LINE 286 IN core-alu.z80
                    > USED AT LINE 291 IN core-alu.z80
                    > USED AT LINE 370 IN core-alu.z80
                    > USED AT LINE 375 IN core-alu.z80
                    > USED AT LINE 386 IN core-alu.z80
                    > USED AT LINE 38 IN core-compiler.z80
                    > USED AT LINE 43 IN core-compiler.z80
                    > USED AT LINE 86 IN core-compiler.z80
                    > USED AT LINE 113 IN core-compiler.z80
                    > USED AT LINE 119 IN core-compiler.z80
                    > USED AT LINE 133 IN core-compiler.z80
                    > USED AT LINE 141 IN core-compiler.z80
                    > USED AT LINE 149 IN core-compiler.z80
                    > USED AT LINE 156 IN core-compiler.z80
                    > USED AT LINE 31 IN core-control.z80
                    > USED AT LINE 64 IN core-does.z80
                    > USED AT LINE 4 IN core-format.z80
                    > USED AT LINE 5 IN core-format.z80
                    > USED AT LINE 6 IN core-format.z80
                    > USED AT LINE 11 IN core-format.z80
                    > USED AT LINE 44 IN core-format.z80
                    > USED AT LINE 67 IN core-format.z80
                    > USED AT LINE 72 IN core-format.z80
                    > USED AT LINE 77 IN core-format.z80
                    > USED AT LINE 82 IN core-format.z80
                    > USED AT LINE 83 IN core-format.z80
                    > USED AT LINE 84 IN core-format.z80
                    > USED AT LINE 86 IN core-format.z80
                    > USED AT LINE 5 IN core-interpret.z80
                    > USED AT LINE 6 IN core-interpret.z80
                    > USED AT LINE 8 IN core-interpret.z80
                    > USED AT LINE 9 IN core-interpret.z80
                    > USED AT LINE 20 IN core-interpret.z80
                    > USED AT LINE 25 IN core-interpret.z80
                    > USED AT LINE 30 IN core-interpret.z80
                    > USED AT LINE 52 IN core-interpret.z80
                    > USED AT LINE 59 IN core-interpret.z80
                    > USED AT LINE 74 IN core-interpret.z80
                    > USED AT LINE 80 IN core-interpret.z80
                    > USED AT LINE 99 IN core-interpret.z80
                    > USED AT LINE 139 IN core-interpret.z80
                    > USED AT LINE 145 IN core-interpret.z80
                    > USED AT LINE 151 IN core-interpret.z80
                    > USED AT LINE 178 IN core-interpret.z80
                    > USED AT LINE 227 IN core-interpret.z80
                    > USED AT LINE 241 IN core-interpret.z80
                    > USED AT LINE 247 IN core-interpret.z80
                    > USED AT LINE 69 IN core-io.z80
                    > USED AT LINE 79 IN core-io.z80
                    > USED AT LINE 94 IN core-io.z80
                    > USED AT LINE 102 IN core-io.z80
                    > USED AT LINE 152 IN core-io.z80
                    > USED AT LINE 164 IN core-io.z80
                    > USED AT LINE 166 IN core-io.z80
                    > USED AT LINE 179 IN core-io.z80
                    > USED AT LINE 181 IN core-io.z80
                    > USED AT LINE 197 IN core-io.z80
                    > USED AT LINE 216 IN core-io.z80
                    > USED AT LINE 217 IN core-io.z80
                    > USED AT LINE 12 IN core-kernel.z80
                    > USED AT LINE 108 IN core-memory.z80
                    > USED AT LINE 119 IN core-memory.z80
                    > USED AT LINE 146 IN core-memory.z80
                    > USED AT LINE 147 IN core-memory.z80
                    > USED AT LINE 173 IN core-memory.z80
                    > USED AT LINE 176 IN core-memory.z80
                    > USED AT LINE 184 IN core-memory.z80
                    > USED AT LINE 186 IN core-memory.z80
                    > USED AT LINE 193 IN core-memory.z80
                    > USED AT LINE 196 IN core-memory.z80
                    > USED AT LINE 83 IN core-stacks.z80
                    > USED AT LINE 90 IN core-stacks.z80
                    > USED AT LINE 8 IN core-utils.z80
                    > USED AT LINE 16 IN core-utils.z80
                    > USED AT LINE 21 IN core-utils.z80
                    > USED AT LINE 31 IN core-utils.z80
                    > USED AT LINE 34 IN core-utils.z80
DOVAR:              066C DEFINED AT LINE 49
                    > USED AT LINE 150 IN core-compiler.z80
                    > USED AT LINE 41 IN core-does.z80
                    > USED AT LINE 201 IN core-interpret.z80
UP:                 0674 DEFINED AT LINE 49
DOUSE:              067C DEFINED AT LINE 49
                    > USED AT LINE 142 IN core-compiler.z80
                    > USED AT LINE 32
                    > USED AT LINE 32
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 32
                    > USED AT LINE 32
                    > USED AT LINE 32
                    > USED AT LINE 32
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 32
                    > USED AT LINE 62
EXIT:               068C DEFINED AT LINE 11
                    > USED AT LINE 97 IN core-alu.z80
                    > USED AT LINE 149 IN core-alu.z80
                    > USED AT LINE 157 IN core-alu.z80
                    > USED AT LINE 283 IN core-alu.z80
                    > USED AT LINE 355 IN core-alu.z80
                    > USED AT LINE 380 IN core-alu.z80
                    > USED AT LINE 6 IN core-compiler.z80
                    > USED AT LINE 61 IN core-compiler.z80
                    > USED AT LINE 75 IN core-compiler.z80
                    > USED AT LINE 88 IN core-compiler.z80
                    > USED AT LINE 90 IN core-compiler.z80
                    > USED AT LINE 94 IN core-compiler.z80
                    > USED AT LINE 107 IN core-compiler.z80
                    > USED AT LINE 120 IN core-compiler.z80
                    > USED AT LINE 9 IN core-control.z80
                    > USED AT LINE 36 IN core-does.z80
                    > USED AT LINE 38 IN core-format.z80
                    > USED AT LINE 46 IN core-format.z80
                    > USED AT LINE 88 IN core-format.z80
                    > USED AT LINE 116 IN core-interpret.z80
                    > USED AT LINE 229 IN core-interpret.z80
                    > USED AT LINE 233 IN core-interpret.z80
                    > USED AT LINE 250 IN core-interpret.z80
                    > USED AT LINE 258 IN core-interpret.z80
                    > USED AT LINE 49 IN core-io.z80
                    > USED AT LINE 64 IN core-io.z80
                    > USED AT LINE 85 IN core-io.z80
                    > USED AT LINE 97 IN core-io.z80
                    > USED AT LINE 114 IN core-io.z80
                    > USED AT LINE 145 IN core-io.z80
                    > USED AT LINE 168 IN core-io.z80
                    > USED AT LINE 185 IN core-io.z80
                    > USED AT LINE 60 IN core-kernel.z80
                    > USED AT LINE 135 IN core-memory.z80
                    > USED AT LINE 150 IN core-memory.z80
                    > USED AT LINE 162 IN core-memory.z80
                    > USED AT LINE 198 IN core-memory.z80
                    > USED AT LINE 58 IN core-stacks.z80
                    > USED AT LINE 11 IN core-utils.z80
                    > USED AT LINE 24 IN core-utils.z80
                    > USED AT LINE 45 IN core-utils.z80
                    > USED AT LINE 58 IN core-utils.z80
DODO:               0698 DEFINED AT LINE 49
DOLOOP:             06BA DEFINED AT LINE 49
DOLOOP1:            06C0 DEFINED AT LINE 75 IN core-does.z80
                    > USED AT LINE 85 IN core-does.z80
DOLOOP2:            06C7 DEFINED AT LINE 82 IN core-does.z80
                    > USED AT LINE 74 IN core-does.z80
DOPLOOP:            06D6 DEFINED AT LINE 49
DOPLP1:             06F6 DEFINED AT LINE 117 IN core-does.z80
                    > USED AT LINE 107 IN core-does.z80
DONXT:              0702 DEFINED AT LINE 11
                    > USED AT LINE 14 IN core-control.z80
                    > USED AT LINE 31 IN core-interpret.z80
                    > USED AT LINE 60 IN core-interpret.z80
                    > USED AT LINE 75 IN core-interpret.z80
                    > USED AT LINE 138 IN core-interpret.z80
                    > USED AT LINE 84 IN core-io.z80
                    > USED AT LINE 96 IN core-io.z80
                    > USED AT LINE 149 IN core-memory.z80
                    > USED AT LINE 161 IN core-memory.z80
                    > USED AT LINE 175 IN core-memory.z80
                    > USED AT LINE 10 IN core-utils.z80
                    > USED AT LINE 23 IN core-utils.z80
                    > USED AT LINE 39 IN core-utils.z80
                    > USED AT LINE 56 IN core-utils.z80
DECHILO:            0717 DEFINED AT LINE 146 IN core-does.z80
                    > USED AT LINE 139 IN core-does.z80
DECLOW:             0719 DEFINED AT LINE 149 IN core-does.z80
                    > USED AT LINE 135 IN core-does.z80
DIGIT:              0722 DEFINED AT LINE 49
                    > USED AT LINE 12 IN core-format.z80
EXTRC:              073C DEFINED AT LINE 49
BDIGS:              074E DEFINED AT LINE 11
                    > USED AT LINE 60 IN core-format.z80
                    > USED AT LINE 130 IN core-io.z80
                    > USED AT LINE 137 IN core-io.z80
HOLD:               075A DEFINED AT LINE 11
DIG:                0772 DEFINED AT LINE 11
                    > USED AT LINE 34 IN core-format.z80
DIGS:               0780 DEFINED AT LINE 11
                    > USED AT LINE 60 IN core-format.z80
                    > USED AT LINE 137 IN core-io.z80
DIGS1:              0784 DEFINED AT LINE 33 IN core-format.z80
                    > USED AT LINE 36 IN core-format.z80
DIGS2:              0790 DEFINED AT LINE 37 IN core-format.z80
                    > USED AT LINE 35 IN core-format.z80
SIGN:               0792 DEFINED AT LINE 11
                    > USED AT LINE 61 IN core-format.z80
SIGN1:              07A2 DEFINED AT LINE 45 IN core-format.z80
EDIGS:              07A4 DEFINED AT LINE 11
                    > USED AT LINE 61 IN core-format.z80
STR:                07B6 DEFINED AT LINE 49
                    > USED AT LINE 124 IN core-io.z80
                    > USED AT LINE 147 IN core-io.z80
HEX:                07CC DEFINED AT LINE 11
                    > USED AT LINE 19 IN core-interpret.z80
DECIMAL:            07DA DEFINED AT LINE 11
BLANK:              07E8 DEFINED AT LINE 11
                    > USED AT LINE 56 IN core-interpret.z80
                    > USED AT LINE 109 IN core-interpret.z80
                    > USED AT LINE 114 IN core-interpret.z80
                    > USED AT LINE 74 IN core-io.z80
                    > USED AT LINE 165 IN core-io.z80
                    > USED AT LINE 183 IN core-io.z80
                    > USED AT LINE 197 IN core-io.z80
                    > USED AT LINE 171 IN core-memory.z80
TCHAR:              07F2 DEFINED AT LINE 49
TCHA1:              0812 DEFINED AT LINE 87 IN core-format.z80
                    > USED AT LINE 85 IN core-format.z80
DIGTQ:              0814 DEFINED AT LINE 49
DGTQ1:              083A DEFINED AT LINE 10 IN core-interpret.z80
                    > USED AT LINE 7 IN core-interpret.z80
NUMBQ:              0842 DEFINED AT LINE 49
NUMQ1:              0872 DEFINED AT LINE 21 IN core-interpret.z80
                    > USED AT LINE 18 IN core-interpret.z80
NUMQ2:              0896 DEFINED AT LINE 26 IN core-interpret.z80
                    > USED AT LINE 31 IN core-interpret.z80
NUMQ3:              08C8 DEFINED AT LINE 35 IN core-interpret.z80
                    > USED AT LINE 33 IN core-interpret.z80
NUMQ4:              08CE DEFINED AT LINE 38 IN core-interpret.z80
                    > USED AT LINE 28 IN core-interpret.z80
NUMQ5:              08DA DEFINED AT LINE 40 IN core-interpret.z80
                    > USED AT LINE 37 IN core-interpret.z80
NUMQ6:              08DC DEFINED AT LINE 42 IN core-interpret.z80
                    > USED AT LINE 24 IN core-interpret.z80
PARS:               08E8 DEFINED AT LINE 49
                    > USED AT LINE 93 IN core-interpret.z80
PARS1:              090E DEFINED AT LINE 55 IN core-interpret.z80
                    > USED AT LINE 60 IN core-interpret.z80
PARS2:              0934 DEFINED AT LINE 62 IN core-interpret.z80
                    > USED AT LINE 58 IN core-interpret.z80
PARS3:              0936 DEFINED AT LINE 64 IN core-interpret.z80
                    > USED AT LINE 53 IN core-interpret.z80
PARS4:              093C DEFINED AT LINE 67 IN core-interpret.z80
                    > USED AT LINE 75 IN core-interpret.z80
PARS5:              0954 DEFINED AT LINE 72 IN core-interpret.z80
                    > USED AT LINE 70 IN core-interpret.z80
PARS6:              096A DEFINED AT LINE 78 IN core-interpret.z80
                    > USED AT LINE 73 IN core-interpret.z80
PARS7:              0978 DEFINED AT LINE 81 IN core-interpret.z80
                    > USED AT LINE 77 IN core-interpret.z80
PARS8:              0984 DEFINED AT LINE 84 IN core-interpret.z80
                    > USED AT LINE 51 IN core-interpret.z80
PARSE:              098C DEFINED AT LINE 11
                    > USED AT LINE 109 IN core-interpret.z80
                    > USED AT LINE 114 IN core-interpret.z80
                    > USED AT LINE 121 IN core-interpret.z80
PAREN:              09AE DEFINED AT LINE 11
BKSLA:              09BA DEFINED AT LINE 11
CHAR:               09C8 DEFINED AT LINE 11
TOKEN:              09D6 DEFINED AT LINE 49
                    > USED AT LINE 4 IN core-compiler.z80
                    > USED AT LINE 126 IN core-compiler.z80
                    > USED AT LINE 140 IN core-compiler.z80
                    > USED AT LINE 148 IN core-compiler.z80
                    > USED AT LINE 265 IN core-interpret.z80
WORDD:              09F2 DEFINED AT LINE 11
NAMET:              09FE DEFINED AT LINE 49
                    > USED AT LINE 162 IN core-interpret.z80
SAMEQ:              0A0A DEFINED AT LINE 49
SAME1:              0A14 DEFINED AT LINE 133 IN core-interpret.z80
                    > USED AT LINE 138 IN core-interpret.z80
SAME2:              0A36 DEFINED AT LINE 138 IN core-interpret.z80
                    > USED AT LINE 132 IN core-interpret.z80
                    > USED AT LINE 136 IN core-interpret.z80
FIND:               0A40 DEFINED AT LINE 11
                    > USED AT LINE 174 IN core-interpret.z80
FIND1:              0A5E DEFINED AT LINE 147 IN core-interpret.z80
                    > USED AT LINE 159 IN core-interpret.z80
FIND2:              0A82 DEFINED AT LINE 153 IN core-interpret.z80
                    > USED AT LINE 150 IN core-interpret.z80
FIND3:              0A8A DEFINED AT LINE 154 IN core-interpret.z80
                    > USED AT LINE 152 IN core-interpret.z80
FIND6:              0A8E DEFINED AT LINE 155 IN core-interpret.z80
                    > USED AT LINE 148 IN core-interpret.z80
FIND4:              0A9A DEFINED AT LINE 157 IN core-interpret.z80
                    > USED AT LINE 154 IN core-interpret.z80
FIND5:              0AA6 DEFINED AT LINE 160 IN core-interpret.z80
                    > USED AT LINE 157 IN core-interpret.z80
NAMEQ:              0AB8 DEFINED AT LINE 49
                    > USED AT LINE 4 IN core-compiler.z80
                    > USED AT LINE 56 IN core-compiler.z80
                    > USED AT LINE 84 IN core-compiler.z80
                    > USED AT LINE 225 IN core-interpret.z80
NAMQ1:              0ACA DEFINED AT LINE 170 IN core-interpret.z80
                    > USED AT LINE 168 IN core-interpret.z80
NAMQ2:              0ACC DEFINED AT LINE 171 IN core-interpret.z80
                    > USED AT LINE 175 IN core-interpret.z80
NAMQ3:              0AEA DEFINED AT LINE 177 IN core-interpret.z80
                    > USED AT LINE 173 IN core-interpret.z80
THROW:              0AF4 DEFINED AT LINE 11
                    > USED AT LINE 8 IN core-compiler.z80
                    > USED AT LINE 78 IN core-compiler.z80
                    > USED AT LINE 95 IN core-compiler.z80
                    > USED AT LINE 210 IN core-interpret.z80
                    > USED AT LINE 217 IN core-interpret.z80
                    > USED AT LINE 235 IN core-interpret.z80
NULLS:              0B12 DEFINED AT LINE 49
                    > USED AT LINE 210 IN core-interpret.z80
ABORT:              0B20 DEFINED AT LINE 11
ABORQ:              0B28 DEFINED AT LINE 11
                    > USED AT LINE 37
                    > USED AT LINE 37
ABOR1:              0B34 DEFINED AT LINE 218 IN core-interpret.z80
                    > USED AT LINE 216 IN core-interpret.z80
INTER:              0B3A DEFINED AT LINE 49
                    > USED AT LINE 241 IN core-interpret.z80
                    > USED AT LINE 247 IN core-interpret.z80
INTE1:              0B62 DEFINED AT LINE 230 IN core-interpret.z80
                    > USED AT LINE 226 IN core-interpret.z80
INTE2:              0B6C DEFINED AT LINE 234 IN core-interpret.z80
                    > USED AT LINE 232 IN core-interpret.z80
LBRAC:              0B6E DEFINED AT LINE 11
DOTOK:              0B7C DEFINED AT LINE 11
DOTO1:              0B94 DEFINED AT LINE 250 IN core-interpret.z80
                    > USED AT LINE 248 IN core-interpret.z80
QSTAC:              0B98 DEFINED AT LINE 49
EVAL:               0BB0 DEFINED AT LINE 11
EVAL1:              0BB4 DEFINED AT LINE 264 IN core-interpret.z80
                    > USED AT LINE 268 IN core-interpret.z80
EVAL2:              0BC8 DEFINED AT LINE 269 IN core-interpret.z80
                    > USED AT LINE 266 IN core-interpret.z80
STOIO:              0BD0 DEFINED AT LINE 11
                    > USED AT LINE 10 IN core-kernel.z80
QRX:                0BD6 DEFINED AT LINE 11
                    > USED AT LINE 7 IN defaults.z80
QRX1:               0BE1 DEFINED AT LINE 21 IN core-io.z80
                    > USED AT LINE 18 IN core-io.z80
QRX2:               0BEB DEFINED AT LINE 27 IN core-io.z80
                    > USED AT LINE 20 IN core-io.z80
TXSTO:              0BEE DEFINED AT LINE 11
                    > USED AT LINE 8 IN defaults.z80
                    > USED AT LINE 11 IN defaults.z80
QKEY:               0BF6 DEFINED AT LINE 11
                    > USED AT LINE 47 IN core-io.z80
                    > USED AT LINE 60 IN core-io.z80
KEY:                0C02 DEFINED AT LINE 11
                    > USED AT LINE 62 IN core-io.z80
                    > USED AT LINE 196 IN core-io.z80
KEY1:               0C06 DEFINED AT LINE 46 IN core-io.z80
                    > USED AT LINE 48 IN core-io.z80
EMIT:               0C0E DEFINED AT LINE 11
                    > USED AT LINE 74 IN core-io.z80
NUFQ:               0C1A DEFINED AT LINE 11
                    > USED AT LINE 37 IN core-utils.z80
NUFQ1:              0C30 DEFINED AT LINE 63 IN core-io.z80
                    > USED AT LINE 61 IN core-io.z80
PACE:               0C32 DEFINED AT LINE 49
SPACE:              0C3E DEFINED AT LINE 11
                    > USED AT LINE 82 IN core-io.z80
                    > USED AT LINE 138 IN core-io.z80
                    > USED AT LINE 147 IN core-io.z80
                    > USED AT LINE 17 IN core-utils.z80
                    > USED AT LINE 36 IN core-utils.z80
                    > USED AT LINE 36 IN core-utils.z80
SPACS:              0C48 DEFINED AT LINE 11
                    > USED AT LINE 125 IN core-io.z80
                    > USED AT LINE 132 IN core-io.z80
CHAR1:              0C58 DEFINED AT LINE 81 IN core-io.z80
                    > USED AT LINE 84 IN core-io.z80
CHAR2:              0C5A DEFINED AT LINE 83 IN core-io.z80
                    > USED AT LINE 80 IN core-io.z80
TYPEE:              0C60 DEFINED AT LINE 11
                    > USED AT LINE 125 IN core-io.z80
                    > USED AT LINE 132 IN core-io.z80
                    > USED AT LINE 138 IN core-io.z80
TYPE1:              0C6A DEFINED AT LINE 92 IN core-io.z80
                    > USED AT LINE 96 IN core-io.z80
TYPE2:              0C76 DEFINED AT LINE 95 IN core-io.z80
                    > USED AT LINE 91 IN core-io.z80
CR:                 0C7E DEFINED AT LINE 11
                    > USED AT LINE 250 IN core-interpret.z80
                    > USED AT LINE 34 IN core-utils.z80
                    > USED AT LINE 50 IN core-utils.z80
DOSTR:              0C90 DEFINED AT LINE 11
                    > USED AT LINE 217 IN core-interpret.z80
                    > USED AT LINE 219 IN core-interpret.z80
                    > USED AT LINE 114 IN core-io.z80
                    > USED AT LINE 119 IN core-io.z80
STRQP:              0CA8 DEFINED AT LINE 49
                    > USED AT LINE 37
DOTQP:              0CB0 DEFINED AT LINE 49
                    > USED AT LINE 37
                    > USED AT LINE 37
                    > USED AT LINE 37
DOTR:               0CBC DEFINED AT LINE 11
UDOTR:              0CD0 DEFINED AT LINE 11
UDOT:               0CE8 DEFINED AT LINE 11
                    > USED AT LINE 145 IN core-io.z80
DOT:                0CF8 DEFINED AT LINE 11
                    > USED AT LINE 157 IN core-io.z80
DOT1:               0D0E DEFINED AT LINE 146 IN core-io.z80
                    > USED AT LINE 144 IN core-io.z80
DOTPR:              0D16 DEFINED AT LINE 11
QUEST:              0D22 DEFINED AT LINE 11
BKSP:               0D2C DEFINED AT LINE 11
                    > USED AT LINE 185 IN core-io.z80
BACK1:              0D5C DEFINED AT LINE 167 IN core-io.z80
                    > USED AT LINE 163 IN core-io.z80
TAP:                0D5E DEFINED AT LINE 11
                    > USED AT LINE 183 IN core-io.z80
                    > USED AT LINE 199 IN core-io.z80
KTAP:               0D74 DEFINED AT LINE 11
KTAP1:              0D94 DEFINED AT LINE 184 IN core-io.z80
                    > USED AT LINE 182 IN core-io.z80
KTAP2:              0D98 DEFINED AT LINE 186 IN core-io.z80
                    > USED AT LINE 180 IN core-io.z80
ACCEP:              0DA2 DEFINED AT LINE 11
ACCP1:              0DAC DEFINED AT LINE 193 IN core-io.z80
                    > USED AT LINE 204 IN core-io.z80
ACCP2:              0DCA DEFINED AT LINE 201 IN core-io.z80
                    > USED AT LINE 198 IN core-io.z80
ACCP3:              0DCE DEFINED AT LINE 203 IN core-io.z80
                    > USED AT LINE 200 IN core-io.z80
ACCP4:              0DD2 DEFINED AT LINE 205 IN core-io.z80
                    > USED AT LINE 195 IN core-io.z80
EXPEC:              0DDA DEFINED AT LINE 49
QUERY:              0DEA DEFINED AT LINE 49
NEXT_STEP:          0E08 DEFINED AT LINE 1 IN core-kernel.z80
                    > USED AT LINE 25
COLD:               0E0E DEFINED AT LINE 11
                    > USED AT LINE 29
HELLO:              0E1E DEFINED AT LINE 14 IN core-kernel.z80
                    > USED AT LINE 12 IN core-kernel.z80
QUIT:               0E2E DEFINED AT LINE 11
                    > USED AT LINE 13 IN core-kernel.z80
EXECU:              0E30 DEFINED AT LINE 11
                    > USED AT LINE 88 IN core-compiler.z80
                    > USED AT LINE 229 IN core-interpret.z80
                    > USED AT LINE 133 IN core-memory.z80
QBRAN:              0E34 DEFINED AT LINE 49
                    > USED AT LINE 120 IN core-alu.z80
                    > USED AT LINE 268 IN core-alu.z80
                    > USED AT LINE 5 IN core-compiler.z80
                    > USED AT LINE 57 IN core-compiler.z80
                    > USED AT LINE 68 IN core-compiler.z80
                    > USED AT LINE 85 IN core-compiler.z80
                    > USED AT LINE 87 IN core-compiler.z80
                    > USED AT LINE 93 IN core-compiler.z80
                    > USED AT LINE 19 IN core-control.z80
                    > USED AT LINE 30 IN core-control.z80
                    > USED AT LINE 35 IN core-format.z80
                    > USED AT LINE 43 IN core-format.z80
                    > USED AT LINE 85 IN core-format.z80
                    > USED AT LINE 7 IN core-interpret.z80
                    > USED AT LINE 18 IN core-interpret.z80
                    > USED AT LINE 24 IN core-interpret.z80
                    > USED AT LINE 28 IN core-interpret.z80
                    > USED AT LINE 33 IN core-interpret.z80
                    > USED AT LINE 51 IN core-interpret.z80
                    > USED AT LINE 53 IN core-interpret.z80
                    > USED AT LINE 58 IN core-interpret.z80
                    > USED AT LINE 70 IN core-interpret.z80
                    > USED AT LINE 73 IN core-interpret.z80
                    > USED AT LINE 136 IN core-interpret.z80
                    > USED AT LINE 148 IN core-interpret.z80
                    > USED AT LINE 150 IN core-interpret.z80
                    > USED AT LINE 157 IN core-interpret.z80
                    > USED AT LINE 168 IN core-interpret.z80
                    > USED AT LINE 173 IN core-interpret.z80
                    > USED AT LINE 175 IN core-interpret.z80
                    > USED AT LINE 216 IN core-interpret.z80
                    > USED AT LINE 226 IN core-interpret.z80
                    > USED AT LINE 232 IN core-interpret.z80
                    > USED AT LINE 248 IN core-interpret.z80
                    > USED AT LINE 266 IN core-interpret.z80
                    > USED AT LINE 48 IN core-io.z80
                    > USED AT LINE 61 IN core-io.z80
                    > USED AT LINE 144 IN core-io.z80
                    > USED AT LINE 163 IN core-io.z80
                    > USED AT LINE 180 IN core-io.z80
                    > USED AT LINE 182 IN core-io.z80
                    > USED AT LINE 195 IN core-io.z80
                    > USED AT LINE 198 IN core-io.z80
                    > USED AT LINE 132 IN core-memory.z80
                    > USED AT LINE 172 IN core-memory.z80
                    > USED AT LINE 195 IN core-memory.z80
                    > USED AT LINE 55 IN core-stacks.z80
                    > USED AT LINE 38 IN core-utils.z80
BRAN:               0E40 DEFINED AT LINE 49
                    > USED AT LINE 24 IN core-control.z80
                    > USED AT LINE 37 IN core-control.z80
                    > USED AT LINE 36 IN core-format.z80
                    > USED AT LINE 37 IN core-interpret.z80
                    > USED AT LINE 77 IN core-interpret.z80
                    > USED AT LINE 132 IN core-interpret.z80
                    > USED AT LINE 152 IN core-interpret.z80
                    > USED AT LINE 154 IN core-interpret.z80
                    > USED AT LINE 159 IN core-interpret.z80
                    > USED AT LINE 268 IN core-interpret.z80
                    > USED AT LINE 80 IN core-io.z80
                    > USED AT LINE 91 IN core-io.z80
                    > USED AT LINE 200 IN core-io.z80
                    > USED AT LINE 204 IN core-io.z80
                    > USED AT LINE 33 IN core-kernel.z80
                    > USED AT LINE 142 IN core-memory.z80
                    > USED AT LINE 157 IN core-memory.z80
                    > USED AT LINE 169 IN core-memory.z80
                    > USED AT LINE 5 IN core-utils.z80
                    > USED AT LINE 18 IN core-utils.z80
                    > USED AT LINE 40 IN core-utils.z80
                    > USED AT LINE 52 IN core-utils.z80
TYPECSTR:           0E48 DEFINED AT LINE 11
                    > USED AT LINE 60 IN core-kernel.z80
THROWX:             0E52 DEFINED AT LINE 11
                    > USED AT LINE 225 IN core-alu.z80
                    > USED AT LINE 228 IN core-alu.z80
STORE:              0E5A DEFINED AT LINE 11
                    > USED AT LINE 19 IN core-compiler.z80
                    > USED AT LINE 45 IN core-compiler.z80
                    > USED AT LINE 75 IN core-compiler.z80
                    > USED AT LINE 50 IN core-interpret.z80
                    > USED AT LINE 91 IN core-memory.z80
                    > USED AT LINE 97 IN core-memory.z80
AT:                 0E64 DEFINED AT LINE 11
                    > USED AT LINE 50 IN core-compiler.z80
                    > USED AT LINE 73 IN core-compiler.z80
                    > USED AT LINE 86 IN core-compiler.z80
                    > USED AT LINE 101 IN core-compiler.z80
                    > USED AT LINE 134 IN core-compiler.z80
                    > USED AT LINE 47 IN core-does.z80
                    > USED AT LINE 22 IN core-format.z80
                    > USED AT LINE 28 IN core-format.z80
                    > USED AT LINE 16 IN core-interpret.z80
                    > USED AT LINE 68 IN core-interpret.z80
                    > USED AT LINE 69 IN core-interpret.z80
                    > USED AT LINE 92 IN core-interpret.z80
                    > USED AT LINE 104 IN core-interpret.z80
                    > USED AT LINE 115 IN core-interpret.z80
                    > USED AT LINE 146 IN core-interpret.z80
                    > USED AT LINE 147 IN core-interpret.z80
                    > USED AT LINE 149 IN core-interpret.z80
                    > USED AT LINE 172 IN core-interpret.z80
                    > USED AT LINE 192 IN core-interpret.z80
                    > USED AT LINE 227 IN core-interpret.z80
                    > USED AT LINE 41 IN core-io.z80
                    > USED AT LINE 54 IN core-io.z80
                    > USED AT LINE 143 IN core-io.z80
                    > USED AT LINE 157 IN core-io.z80
                    > USED AT LINE 103 IN core-memory.z80
                    > USED AT LINE 114 IN core-memory.z80
                    > USED AT LINE 131 IN core-memory.z80
                    > USED AT LINE 30 IN core-utils.z80
CSTOR:              0E6C DEFINED AT LINE 11
                    > USED AT LINE 174 IN core-io.z80
                    > USED AT LINE 145 IN core-memory.z80
                    > USED AT LINE 159 IN core-memory.z80
                    > USED AT LINE 187 IN core-memory.z80
CAT:                0E74 DEFINED AT LINE 11
                    > USED AT LINE 67 IN core-compiler.z80
                    > USED AT LINE 17 IN core-interpret.z80
                    > USED AT LINE 22 IN core-interpret.z80
                    > USED AT LINE 93 IN core-io.z80
                    > USED AT LINE 109 IN core-memory.z80
                    > USED AT LINE 7 IN core-utils.z80
                    > USED AT LINE 20 IN core-utils.z80
RAT:                0E7C DEFINED AT LINE 11
                    > USED AT LINE 271 IN core-alu.z80
                    > USED AT LINE 277 IN core-alu.z80
                    > USED AT LINE 23 IN core-interpret.z80
                    > USED AT LINE 32 IN core-interpret.z80
                    > USED AT LINE 133 IN core-interpret.z80
                    > USED AT LINE 134 IN core-interpret.z80
                    > USED AT LINE 107 IN core-io.z80
                    > USED AT LINE 145 IN core-memory.z80
                    > USED AT LINE 54 IN core-utils.z80
RPAT:               0E86 DEFINED AT LINE 11
RPSTO:              0E8E DEFINED AT LINE 11
SPAT:               0E96 DEFINED AT LINE 11
                    > USED AT LINE 84 IN core-stacks.z80
                    > USED AT LINE 89 IN core-stacks.z80
SPSTO:              0EA0 DEFINED AT LINE 11
PSTOR:              0EA8 DEFINED AT LINE 11
                    > USED AT LINE 13 IN core-compiler.z80
DSTOR:              0EBA DEFINED AT LINE 11
DAT:                0ECA DEFINED AT LINE 11
COUNT:              0EDA DEFINED AT LINE 11
                    > USED AT LINE 44 IN core-compiler.z80
                    > USED AT LINE 59 IN core-compiler.z80
                    > USED AT LINE 119 IN core-io.z80
HERE:               0EEC DEFINED AT LINE 11
                    > USED AT LINE 18 IN core-compiler.z80
                    > USED AT LINE 71 IN core-compiler.z80
                    > USED AT LINE 9 IN core-control.z80
                    > USED AT LINE 43 IN core-control.z80
                    > USED AT LINE 48 IN core-control.z80
                    > USED AT LINE 121 IN core-interpret.z80
                    > USED AT LINE 119 IN core-memory.z80
PAD:                0EF6 DEFINED AT LINE 11
                    > USED AT LINE 17 IN core-format.z80
                    > USED AT LINE 53 IN core-format.z80
TIB:                0F04 DEFINED AT LINE 11
                    > USED AT LINE 91 IN core-interpret.z80
                    > USED AT LINE 216 IN core-io.z80
ATEXE:              0F10 DEFINED AT LINE 49
                    > USED AT LINE 92 IN core-compiler.z80
                    > USED AT LINE 231 IN core-interpret.z80
                    > USED AT LINE 267 IN core-interpret.z80
                    > USED AT LINE 202 IN core-io.z80
                    > USED AT LINE 211 IN core-io.z80
EXE1:               0F1E DEFINED AT LINE 134 IN core-memory.z80
                    > USED AT LINE 132 IN core-memory.z80
CMOVE:              0F20 DEFINED AT LINE 11
                    > USED AT LINE 188 IN core-memory.z80
CMOV1:              0F2A DEFINED AT LINE 143 IN core-memory.z80
                    > USED AT LINE 149 IN core-memory.z80
CMOV2:              0F42 DEFINED AT LINE 148 IN core-memory.z80
                    > USED AT LINE 142 IN core-memory.z80
FILL:               0F4A DEFINED AT LINE 11
FILL1:              0F58 DEFINED AT LINE 158 IN core-memory.z80
                    > USED AT LINE 161 IN core-memory.z80
FILL2:              0F62 DEFINED AT LINE 160 IN core-memory.z80
                    > USED AT LINE 157 IN core-memory.z80
DTRAI:              0F6A DEFINED AT LINE 11
DTRA1:              0F74 DEFINED AT LINE 170 IN core-memory.z80
                    > USED AT LINE 175 IN core-memory.z80
DTRA2:              0F8E DEFINED AT LINE 174 IN core-memory.z80
                    > USED AT LINE 169 IN core-memory.z80
                    > USED AT LINE 172 IN core-memory.z80
PACKS:              0F98 DEFINED AT LINE 11
                    > USED AT LINE 116 IN core-interpret.z80
ALGND:              0FD2 DEFINED AT LINE 11
                    > USED AT LINE 71 IN core-compiler.z80
                    > USED AT LINE 108 IN core-io.z80
                    > USED AT LINE 182 IN core-memory.z80
ALGN1:              0FF2 DEFINED AT LINE 197 IN core-memory.z80
                    > USED AT LINE 195 IN core-memory.z80
GREETING:           0FF6 DEFINED AT LINE 1 IN core-messages.z80
                    > USED AT LINE 35
ERR_DIVZERO:        1007 DEFINED AT LINE 12 IN core-messages.z80
                    > USED AT LINE 224 IN core-alu.z80
ERR_OUTOFRANGE:     1018 DEFINED AT LINE 13 IN core-messages.z80
                    > USED AT LINE 227 IN core-alu.z80
                    > USED AT LINE 281 IN core-alu.z80
                    > USED AT LINE 286 IN core-alu.z80
TOR:                102C DEFINED AT LINE 11
                    > USED AT LINE 61 IN core-alu.z80
                    > USED AT LINE 82 IN core-alu.z80
                    > USED AT LINE 267 IN core-alu.z80
                    > USED AT LINE 301 IN core-alu.z80
                    > USED AT LINE 360 IN core-alu.z80
                    > USED AT LINE 32 IN core-compiler.z80
                    > USED AT LINE 4 IN core-control.z80
                    > USED AT LINE 64 IN core-does.z80
                    > USED AT LINE 59 IN core-format.z80
                    > USED AT LINE 5 IN core-interpret.z80
                    > USED AT LINE 27 IN core-interpret.z80
                    > USED AT LINE 54 IN core-interpret.z80
                    > USED AT LINE 66 IN core-interpret.z80
                    > USED AT LINE 76 IN core-interpret.z80
                    > USED AT LINE 91 IN core-interpret.z80
                    > USED AT LINE 131 IN core-interpret.z80
                    > USED AT LINE 170 IN core-interpret.z80
                    > USED AT LINE 90 IN core-io.z80
                    > USED AT LINE 108 IN core-io.z80
                    > USED AT LINE 124 IN core-io.z80
                    > USED AT LINE 130 IN core-io.z80
                    > USED AT LINE 162 IN core-io.z80
                    > USED AT LINE 141 IN core-memory.z80
                    > USED AT LINE 144 IN core-memory.z80
                    > USED AT LINE 156 IN core-memory.z80
                    > USED AT LINE 168 IN core-memory.z80
                    > USED AT LINE 63 IN core-stacks.z80
                    > USED AT LINE 78 IN core-stacks.z80
                    > USED AT LINE 4 IN core-utils.z80
                    > USED AT LINE 17 IN core-utils.z80
                    > USED AT LINE 32 IN core-utils.z80
                    > USED AT LINE 51 IN core-utils.z80
RFROM:              103A DEFINED AT LINE 11
                    > USED AT LINE 62 IN core-alu.z80
                    > USED AT LINE 62 IN core-alu.z80
                    > USED AT LINE 84 IN core-alu.z80
                    > USED AT LINE 163 IN core-alu.z80
                    > USED AT LINE 272 IN core-alu.z80
                    > USED AT LINE 275 IN core-alu.z80
                    > USED AT LINE 279 IN core-alu.z80
                    > USED AT LINE 285 IN core-alu.z80
                    > USED AT LINE 352 IN core-alu.z80
                    > USED AT LINE 31 IN core-compiler.z80
                    > USED AT LINE 82 IN core-control.z80
                    > USED AT LINE 82 IN core-control.z80
                    > USED AT LINE 36 IN core-does.z80
                    > USED AT LINE 47 IN core-does.z80
                    > USED AT LINE 11 IN core-interpret.z80
                    > USED AT LINE 39 IN core-interpret.z80
                    > USED AT LINE 39 IN core-interpret.z80
                    > USED AT LINE 43 IN core-interpret.z80
                    > USED AT LINE 44 IN core-interpret.z80
                    > USED AT LINE 61 IN core-interpret.z80
                    > USED AT LINE 63 IN core-interpret.z80
                    > USED AT LINE 79 IN core-interpret.z80
                    > USED AT LINE 83 IN core-interpret.z80
                    > USED AT LINE 83 IN core-interpret.z80
                    > USED AT LINE 85 IN core-interpret.z80
                    > USED AT LINE 93 IN core-interpret.z80
                    > USED AT LINE 137 IN core-interpret.z80
                    > USED AT LINE 155 IN core-interpret.z80
                    > USED AT LINE 160 IN core-interpret.z80
                    > USED AT LINE 171 IN core-interpret.z80
                    > USED AT LINE 176 IN core-interpret.z80
                    > USED AT LINE 177 IN core-interpret.z80
                    > USED AT LINE 193 IN core-interpret.z80
                    > USED AT LINE 194 IN core-interpret.z80
                    > USED AT LINE 195 IN core-interpret.z80
                    > USED AT LINE 107 IN core-io.z80
                    > USED AT LINE 131 IN core-io.z80
                    > USED AT LINE 147 IN core-memory.z80
                    > USED AT LINE 173 IN core-memory.z80
                    > USED AT LINE 42 IN core-utils.z80
                    > USED AT LINE 44 IN core-utils.z80
DUPP:               1048 DEFINED AT LINE 11
                    > USED AT LINE 94 IN core-alu.z80
                    > USED AT LINE 267 IN core-alu.z80
                    > USED AT LINE 296 IN core-alu.z80
                    > USED AT LINE 18 IN core-compiler.z80
                    > USED AT LINE 31 IN core-compiler.z80
                    > USED AT LINE 56 IN core-compiler.z80
                    > USED AT LINE 67 IN core-compiler.z80
                    > USED AT LINE 70 IN core-compiler.z80
                    > USED AT LINE 74 IN core-compiler.z80
                    > USED AT LINE 23 IN core-format.z80
                    > USED AT LINE 34 IN core-format.z80
                    > USED AT LINE 59 IN core-format.z80
                    > USED AT LINE 9 IN core-interpret.z80
                    > USED AT LINE 11 IN core-interpret.z80
                    > USED AT LINE 27 IN core-interpret.z80
                    > USED AT LINE 41 IN core-interpret.z80
                    > USED AT LINE 76 IN core-interpret.z80
                    > USED AT LINE 144 IN core-interpret.z80
                    > USED AT LINE 146 IN core-interpret.z80
                    > USED AT LINE 147 IN core-interpret.z80
                    > USED AT LINE 149 IN core-interpret.z80
                    > USED AT LINE 162 IN core-interpret.z80
                    > USED AT LINE 167 IN core-interpret.z80
                    > USED AT LINE 265 IN core-interpret.z80
                    > USED AT LINE 60 IN core-io.z80
                    > USED AT LINE 93 IN core-io.z80
                    > USED AT LINE 173 IN core-io.z80
                    > USED AT LINE 179 IN core-io.z80
                    > USED AT LINE 196 IN core-io.z80
                    > USED AT LINE 102 IN core-memory.z80
                    > USED AT LINE 108 IN core-memory.z80
                    > USED AT LINE 144 IN core-memory.z80
                    > USED AT LINE 182 IN core-memory.z80
                    > USED AT LINE 183 IN core-memory.z80
                    > USED AT LINE 193 IN core-memory.z80
                    > USED AT LINE 55 IN core-stacks.z80
                    > USED AT LINE 56 IN core-stacks.z80
                    > USED AT LINE 7 IN core-utils.z80
                    > USED AT LINE 20 IN core-utils.z80
DROP:               104C DEFINED AT LINE 11
                    > USED AT LINE 56 IN core-alu.z80
                    > USED AT LINE 128 IN core-alu.z80
                    > USED AT LINE 134 IN core-alu.z80
                    > USED AT LINE 149 IN core-alu.z80
                    > USED AT LINE 157 IN core-alu.z80
                    > USED AT LINE 279 IN core-alu.z80
                    > USED AT LINE 285 IN core-alu.z80
                    > USED AT LINE 306 IN core-alu.z80
                    > USED AT LINE 346 IN core-alu.z80
                    > USED AT LINE 61 IN core-compiler.z80
                    > USED AT LINE 54 IN core-control.z80
                    > USED AT LINE 52 IN core-format.z80
                    > USED AT LINE 86 IN core-format.z80
                    > USED AT LINE 61 IN core-interpret.z80
                    > USED AT LINE 79 IN core-interpret.z80
                    > USED AT LINE 137 IN core-interpret.z80
                    > USED AT LINE 155 IN core-interpret.z80
                    > USED AT LINE 160 IN core-interpret.z80
                    > USED AT LINE 176 IN core-interpret.z80
                    > USED AT LINE 177 IN core-interpret.z80
                    > USED AT LINE 195 IN core-interpret.z80
                    > USED AT LINE 219 IN core-interpret.z80
                    > USED AT LINE 270 IN core-interpret.z80
                    > USED AT LINE 97 IN core-io.z80
                    > USED AT LINE 187 IN core-io.z80
                    > USED AT LINE 206 IN core-io.z80
                    > USED AT LINE 217 IN core-io.z80
                    > USED AT LINE 194 IN core-memory.z80
                    > USED AT LINE 68 IN core-stacks.z80
                    > USED AT LINE 68 IN core-stacks.z80
                    > USED AT LINE 11 IN core-utils.z80
                    > USED AT LINE 42 IN core-utils.z80
                    > USED AT LINE 44 IN core-utils.z80
SWAP:               1050 DEFINED AT LINE 11
                    > USED AT LINE 61 IN core-alu.z80
                    > USED AT LINE 128 IN core-alu.z80
                    > USED AT LINE 141 IN core-alu.z80
                    > USED AT LINE 147 IN core-alu.z80
                    > USED AT LINE 155 IN core-alu.z80
                    > USED AT LINE 273 IN core-alu.z80
                    > USED AT LINE 48 IN core-control.z80
                    > USED AT LINE 59 IN core-control.z80
                    > USED AT LINE 64 IN core-control.z80
                    > USED AT LINE 12 IN core-format.z80
                    > USED AT LINE 19 IN core-interpret.z80
                    > USED AT LINE 20 IN core-interpret.z80
                    > USED AT LINE 23 IN core-interpret.z80
                    > USED AT LINE 29 IN core-interpret.z80
                    > USED AT LINE 32 IN core-interpret.z80
                    > USED AT LINE 36 IN core-interpret.z80
                    > USED AT LINE 65 IN core-interpret.z80
                    > USED AT LINE 144 IN core-interpret.z80
                    > USED AT LINE 156 IN core-interpret.z80
                    > USED AT LINE 194 IN core-interpret.z80
                    > USED AT LINE 187 IN core-io.z80
                    > USED AT LINE 90 IN core-memory.z80
                    > USED AT LINE 91 IN core-memory.z80
                    > USED AT LINE 96 IN core-memory.z80
                    > USED AT LINE 103 IN core-memory.z80
                    > USED AT LINE 109 IN core-memory.z80
                    > USED AT LINE 156 IN core-memory.z80
                    > USED AT LINE 188 IN core-memory.z80
                    > USED AT LINE 63 IN core-stacks.z80
OVER:               1058 DEFINED AT LINE 11
                    > USED AT LINE 162 IN core-alu.z80
                    > USED AT LINE 276 IN core-alu.z80
                    > USED AT LINE 59 IN core-compiler.z80
                    > USED AT LINE 65 IN core-does.z80
                    > USED AT LINE 53 IN core-format.z80
                    > USED AT LINE 17 IN core-interpret.z80
                    > USED AT LINE 22 IN core-interpret.z80
                    > USED AT LINE 56 IN core-interpret.z80
                    > USED AT LINE 65 IN core-interpret.z80
                    > USED AT LINE 82 IN core-interpret.z80
                    > USED AT LINE 85 IN core-interpret.z80
                    > USED AT LINE 133 IN core-interpret.z80
                    > USED AT LINE 134 IN core-interpret.z80
                    > USED AT LINE 131 IN core-io.z80
                    > USED AT LINE 162 IN core-io.z80
                    > USED AT LINE 174 IN core-io.z80
                    > USED AT LINE 192 IN core-io.z80
                    > USED AT LINE 206 IN core-io.z80
                    > USED AT LINE 90 IN core-memory.z80
                    > USED AT LINE 96 IN core-memory.z80
                    > USED AT LINE 171 IN core-memory.z80
                    > USED AT LINE 183 IN core-memory.z80
                    > USED AT LINE 185 IN core-memory.z80
                    > USED AT LINE 73 IN core-stacks.z80
                    > USED AT LINE 73 IN core-stacks.z80
                    > USED AT LINE 16 IN core-utils.z80
QDUP:               1060 DEFINED AT LINE 11
                    > USED AT LINE 84 IN core-compiler.z80
                    > USED AT LINE 135 IN core-interpret.z80
                    > USED AT LINE 172 IN core-interpret.z80
                    > USED AT LINE 174 IN core-interpret.z80
                    > USED AT LINE 225 IN core-interpret.z80
                    > USED AT LINE 131 IN core-memory.z80
QDUP1:              106C DEFINED AT LINE 57 IN core-stacks.z80
ROT:                106E DEFINED AT LINE 11
                    > USED AT LINE 277 IN core-alu.z80
                    > USED AT LINE 78 IN core-stacks.z80
                    > USED AT LINE 35 IN core-utils.z80
                    > USED AT LINE 35 IN core-utils.z80
DDROP:              107C DEFINED AT LINE 11
                    > USED AT LINE 43 IN core-interpret.z80
                    > USED AT LINE 62 IN core-io.z80
                    > USED AT LINE 150 IN core-memory.z80
                    > USED AT LINE 162 IN core-memory.z80
DDUP:               1086 DEFINED AT LINE 11
                    > USED AT LINE 119 IN core-alu.z80
                    > USED AT LINE 133 IN core-alu.z80
                    > USED AT LINE 146 IN core-alu.z80
                    > USED AT LINE 154 IN core-alu.z80
                    > USED AT LINE 351 IN core-alu.z80
                    > USED AT LINE 194 IN core-io.z80
                    > USED AT LINE 159 IN core-memory.z80
                    > USED AT LINE 187 IN core-memory.z80
TWOSWAP:            1090 DEFINED AT LINE 11
PICK:               109E DEFINED AT LINE 11
                    > USED AT LINE 54 IN core-utils.z80
DEPTH:              10B2 DEFINED AT LINE 11
                    > USED AT LINE 256 IN core-interpret.z80
                    > USED AT LINE 50 IN core-utils.z80
SZERO:              10C8 DEFINED AT LINE 11
                    > USED AT LINE 89 IN core-stacks.z80
RZERO:              10D0 DEFINED AT LINE 11
TQKEY:              10D8 DEFINED AT LINE 49
                    > USED AT LINE 41 IN core-io.z80
TEMIT:              10E0 DEFINED AT LINE 49
                    > USED AT LINE 54 IN core-io.z80
TEXPE:              10E8 DEFINED AT LINE 49
                    > USED AT LINE 211 IN core-io.z80
TTAP:               10F0 DEFINED AT LINE 49
                    > USED AT LINE 202 IN core-io.z80
TECHO:              10F8 DEFINED AT LINE 49
                    > USED AT LINE 165 IN core-io.z80
                    > USED AT LINE 173 IN core-io.z80
TPROM:              1100 DEFINED AT LINE 49
                    > USED AT LINE 270 IN core-interpret.z80
BASE:               1108 DEFINED AT LINE 11
                    > USED AT LINE 28 IN core-format.z80
                    > USED AT LINE 16 IN core-interpret.z80
                    > USED AT LINE 29 IN core-interpret.z80
                    > USED AT LINE 44 IN core-interpret.z80
                    > USED AT LINE 143 IN core-io.z80
                    > USED AT LINE 30 IN core-utils.z80
TEMP:               1110 DEFINED AT LINE 11
                    > USED AT LINE 50 IN core-interpret.z80
                    > USED AT LINE 68 IN core-interpret.z80
                    > USED AT LINE 69 IN core-interpret.z80
                    > USED AT LINE 153 IN core-interpret.z80
SPAN:               1118 DEFINED AT LINE 11
INN:                1120 DEFINED AT LINE 11
NTIB:               1128 DEFINED AT LINE 49
                    > USED AT LINE 92 IN core-interpret.z80
                    > USED AT LINE 104 IN core-interpret.z80
                    > USED AT LINE 125 IN core-memory.z80
CSP:                1130 DEFINED AT LINE 49
TEVAL:              1138 DEFINED AT LINE 49
                    > USED AT LINE 267 IN core-interpret.z80
TNUMB:              1140 DEFINED AT LINE 49
                    > USED AT LINE 92 IN core-compiler.z80
                    > USED AT LINE 231 IN core-interpret.z80
HLD:                1148 DEFINED AT LINE 49
                    > USED AT LINE 17 IN core-format.z80
                    > USED AT LINE 22 IN core-format.z80
                    > USED AT LINE 23 IN core-format.z80
                    > USED AT LINE 52 IN core-format.z80
HANDL:              1150 DEFINED AT LINE 49
                    > USED AT LINE 192 IN core-interpret.z80
                    > USED AT LINE 193 IN core-interpret.z80
CNTXT:              1158 DEFINED AT LINE 49
                    > USED AT LINE 167 IN core-interpret.z80
CRRNT:              1160 DEFINED AT LINE 49
                    > USED AT LINE 73 IN core-compiler.z80
CP:                 1168 DEFINED AT LINE 49
                    > USED AT LINE 13 IN core-compiler.z80
                    > USED AT LINE 19 IN core-compiler.z80
                    > USED AT LINE 45 IN core-compiler.z80
                    > USED AT LINE 114 IN core-memory.z80
NP:                 1170 DEFINED AT LINE 49
                    > USED AT LINE 115 IN core-interpret.z80
LAST:               1178 DEFINED AT LINE 11
                    > USED AT LINE 50 IN core-compiler.z80
                    > USED AT LINE 70 IN core-compiler.z80
                    > USED AT LINE 101 IN core-compiler.z80
                    > USED AT LINE 134 IN core-compiler.z80
VFRTH:              1180 DEFINED AT LINE 49
UTYPE:              1188 DEFINED AT LINE 11
UTYP1:              1192 DEFINED AT LINE 6 IN core-utils.z80
                    > USED AT LINE 10 IN core-utils.z80
UTYP2:              11A0 DEFINED AT LINE 9 IN core-utils.z80
                    > USED AT LINE 5 IN core-utils.z80
DMP:                11A8 DEFINED AT LINE 49
PDUM1:              11BC DEFINED AT LINE 19 IN core-utils.z80
                    > USED AT LINE 23 IN core-utils.z80
PDUM2:              11CC DEFINED AT LINE 22 IN core-utils.z80
                    > USED AT LINE 18 IN core-utils.z80
DUMP:               11D2 DEFINED AT LINE 11
DUMP1:              11E6 DEFINED AT LINE 33 IN core-utils.z80
                    > USED AT LINE 39 IN core-utils.z80
DUMP2:              120A DEFINED AT LINE 41 IN core-utils.z80
                    > USED AT LINE 38 IN core-utils.z80
DUMP3:              120E DEFINED AT LINE 43 IN core-utils.z80
                    > USED AT LINE 40 IN core-utils.z80
DOTS:               1218 DEFINED AT LINE 11
DOTS1:              1226 DEFINED AT LINE 53 IN core-utils.z80
                    > USED AT LINE 56 IN core-utils.z80
DOTS2:              122C DEFINED AT LINE 55 IN core-utils.z80
                    > USED AT LINE 52 IN core-utils.z80
SPP:                2200 DEFINED AT LINE 3 IN variables.z80
                    > USED AT LINE 16
                    > USED AT LINE 5 IN defaults.z80
TIBB:               2200 DEFINED AT LINE 4 IN variables.z80
                    > USED AT LINE 18 IN defaults.z80
RPP:                2400 DEFINED AT LINE 6 IN variables.z80
                    > USED AT LINE 24
                    > USED AT LINE 6 IN defaults.z80
UPP:                2400 DEFINED AT LINE 7 IN variables.z80
                    > USED AT LINE 20
                    > USED AT LINE 42 IN core-does.z80
VARSPP:             2400 DEFINED AT LINE 9 IN variables.z80
VARRPP:             2402 DEFINED AT LINE 10 IN variables.z80
VARQKEY:            2404 DEFINED AT LINE 11 IN variables.z80
VARTEMIT:           2406 DEFINED AT LINE 12 IN variables.z80
VARTEXPECT:         2408 DEFINED AT LINE 13 IN variables.z80
VARTTAP:            240A DEFINED AT LINE 14 IN variables.z80
VARTECHO:           240C DEFINED AT LINE 15 IN variables.z80
VARTPROMPT:         240E DEFINED AT LINE 16 IN variables.z80
VARBASE:            2410 DEFINED AT LINE 17 IN variables.z80
VARTMP:             2412 DEFINED AT LINE 18 IN variables.z80
VARSPAN:            2414 DEFINED AT LINE 19 IN variables.z80
VARPIN:             2416 DEFINED AT LINE 20 IN variables.z80
VARNTIB:            2418 DEFINED AT LINE 21 IN variables.z80
VARTIB:             241A DEFINED AT LINE 22 IN variables.z80
VARCSP:             241C DEFINED AT LINE 23 IN variables.z80
VARTEVAL:           241E DEFINED AT LINE 24 IN variables.z80
VARTNUM:            2420 DEFINED AT LINE 25 IN variables.z80
VARHLD:             2422 DEFINED AT LINE 26 IN variables.z80
VARHANDLER:         2424 DEFINED AT LINE 27 IN variables.z80
VARCONTEXT:         2426 DEFINED AT LINE 28 IN variables.z80
VARVOCABS:          2428 DEFINED AT LINE 29 IN variables.z80
VARCURRENT:         242A DEFINED AT LINE 30 IN variables.z80
VARVOCABLP:         242C DEFINED AT LINE 31 IN variables.z80
VARCP:              242E DEFINED AT LINE 32 IN variables.z80
VARNP:              2430 DEFINED AT LINE 33 IN variables.z80
VARLAST:            2432 DEFINED AT LINE 34 IN variables.z80
VARFORTH:           2434 DEFINED AT LINE 35 IN variables.z80
VARVOCABL:          2436 DEFINED AT LINE 36 IN variables.z80
SERINPTR:           2438 DEFINED AT LINE 38 IN variables.z80
                    > USED AT LINE 17 IN interrupt.z80
                    > USED AT LINE 23 IN interrupt.z80
                    > USED AT LINE 7 IN serial.z80
SERRDPTR:           243A DEFINED AT LINE 39 IN variables.z80
                    > USED AT LINE 8 IN serial.z80
                    > USED AT LINE 22 IN serial.z80
                    > USED AT LINE 30 IN serial.z80
SERBUFUSED:         243C DEFINED AT LINE 40 IN variables.z80
                    > USED AT LINE 11 IN interrupt.z80
                    > USED AT LINE 26 IN interrupt.z80
                    > USED AT LINE 28 IN interrupt.z80
                    > USED AT LINE 10 IN serial.z80
                    > USED AT LINE 18 IN serial.z80
                    > USED AT LINE 31 IN serial.z80
                    > USED AT LINE 33 IN serial.z80
                    > USED AT LINE 55 IN serial.z80
SERBUF:             243E DEFINED AT LINE 41 IN variables.z80
                    > USED AT LINE 20 IN interrupt.z80
                    > USED AT LINE 22 IN interrupt.z80
                    > USED AT LINE 6 IN serial.z80
                    > USED AT LINE 25 IN serial.z80
                    > USED AT LINE 27 IN serial.z80
CPP:                247D DEFINED AT LINE 43 IN variables.z80
                    > USED AT LINE 28 IN defaults.z80
NPP:                FFFE DEFINED AT LINE 45 IN variables.z80
                    > USED AT LINE 29 IN defaults.z80

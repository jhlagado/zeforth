0000                          .ENGINE   mycomputer   
0000                TESTMODE:   EQU   0   
0000                MEM_SIZE:   EQU   $10000   ; MEM is 64K
0000                ROM_SIZE:   EQU   $2000   ; ROM is 8K
0000                RAM_SIZE:   EQU   MEM_SIZE - ROM_SIZE   ; RAM is 64K - 8K
0000                START_ROM:   EQU   BM   ; inclusive
0000                END_ROM:   EQU   BM + ROM_SIZE   ; exclusive
0000                START_RAM:   EQU   BM + ROM_SIZE   ; inclusive
0000                END_RAM:   EQU   START_RAM + RAM_SIZE   ; exclusive
0000                BM:       EQU   0   ; bottom of ROM memory
0000                EM:       EQU   BM + MEM_SIZE   
0000                COMPO:    EQU   $20   ;lexicon compile only bit
0000                IMEDD:    EQU   $40   ;lexicon immediate bit
0000                MASKK:    EQU   $1F   ;lexicon bit mask
0000                CHARR:    EQU   1   ;byte size of a character
0000                CELLL:    EQU   2   
0000                BASEE:    EQU   10   ;BASE
0000                VOCSS:    EQU   8   ;depth of vocabulary stack
0000                MAXCHAR:   EQU   0FFh   ;Extended character set					                    ;  Use 07Fh for ASCII only
0000                MAXSIGNED:   EQU   07FFFh   ;max value of signed integer
0000                MAXUNSIGNED:   EQU   0FFFFh   ;max value of unsigned integer
0000                MAXNEGATIVE:   EQU   8000h   ;max value of negative integer
0000                BKSPP:    EQU   8   ;backspace
0000                LFF:      EQU   $0A   ;line feed
0000                CRR:      EQU   $0D   ;carriage return
0000                SPACEE:   EQU   $20   
0000                TIC:      EQU   $27   ;tick
0000                MINUSS:   EQU   $2D   
0000                UNDERSC:   EQU   $5F   
0000                CALLL:    EQU   $CD00   ; NOP followed by CALL opcodes
0000                US:       EQU   END_DEFAULTS - DEFAULTS   ;user area size
0000                RTS:      EQU   $100 * CELLL   ;return stack/TIB size
0000                DTS:      EQU   $100 * CELLL   ;data stack size
0000                RET_STACK_SIZE:   EQU   $100   
0000                DATA_STACK_SIZE:   EQU   $100   
0000                INT_ADDR:   EQU   $0038   
0000                SER_BUFSIZE:   EQU   $3F   
0000                SER_FULLSIZE:   EQU   $30   
0000                SER_EMPTYSIZE:   EQU   5   
0000                RTS_HIGH:   EQU   $D6   
0000                RTS_LOW:   EQU   $96   
0000                TRUEE:    EQU   -1   
0000                FALSEE:   EQU   0   
0000                             ; Initialize assembly variables
0000                VVCODE:   .SET   0   
0000                VVNAME:   .SET   END_ROM   
0000                VVLINK:   .SET   0   ;force a null link
0000                VVUSER:   .SET   0   ;first user variable offset
0000                .macro MCODE,aaLEX,aaNAME,aaLABEL
0000                             ; 
0000                 .align 2                                         ; force to cell boundary
0000                aaLABEL:                                              ; assembly label
0000                 vvCODE .set $
0000                 vvLEN  .set (aaLEX & 01FH) / CELLL              ; string cell count, round down
0000                 ORG vvNAME - ((vvLEN + 3) * CELLL)                                     ; ? needed
0000                 vvNAME .set $
0000                 DW vvCODE, vvLINK                               ; token pointer and link
0000                 vvLINK .set $                                   ; link points to a name string
0000                 DB aaLEX, aaNAME                                    ; name string
0000                 ORG vvCODE                                      ; restore code pointer
0000                .endm
0000                 
0000                .macro MCOLON,aaLEX,aaNAME,aaLABEL
0000                             ; 
0000                 mCODE aaLEX, aaNAME, aaLABEL
0000                 nop
0000                 CALL doLIST
0000                .endm
0000                 
0000                .macro MUSER,aaLEX,aaNAME,aaLABEL
0000                             ; 
0000                	mCODE aaLEX, aaNAME, aaLABEL
0000                 nop
0000                 CALL doLIST
0000                 DW DoUSE,vvUSER
0000                 vvUSER .set vvUSER + CELLL
0000                .endm
0000                 
0000                             ; .align 2
0000                .macro MDSTR,aaFUNC,aaSTR
0000                             ; 
0000                 DW aaFUNC                       ; function
0000                 vvLEN .set $                    ; save address of count byte
0000                 DB 0,aaSTR                      ; count byte and string
0000                 vvCODE .set $                   ; save code pointer
0000                ORG vvLEN                           ; point to count byte
0000                 DB vvCODE - vvLEN - 1           ; set count
0000                ORG vvCODE                          ; restore code pointer
0000                .endm
0000                 
0000                .macro HCODE,aaLEX,aaNAME,aaLABEL
0000                             ; 
0000                 .align 2                                         ; force to cell boundary
0000                aaLABEL:                                              ; assembly label
0000                .endm
0000                 
0000                .macro HCOLON,aaLEX,aaNAME,aaLABEL
0000                             ; 
0000                 hCODE aaLEX, aaNAME, aaLABEL
0000                 nop
0000                 CALL doLIST
0000                .endm
0000                 
0000                .macro HUSER,aaLEX,aaNAME,aaLABEL
0000                             ; 
0000                	hCODE aaLEX, aaNAME, aaLABEL
0000                 nop
0000                 CALL doLIST
0000                 DW DoUSE,vvUSER
0000                 vvUSER .set vvUSER + CELLL
0000                .endm
0000                 
0000                             ; 	LD	E,(HL)	                    ; 7t
0000                             ; 	INC	HL	                        ; 6t
0000                             ; 	LD	D,(HL)	                    ; 7t
0000                             ; 	INC	HL	                        ; 6t
0000                             ; 	EX	DE,HL	                    ; 4t
0000                             ; 	JP	(HL)	                    ; 4t
0000                .macro MNEXTHL,
0000                             ; 
0000                 JP (IY)
0000                .endm
0000                 
0000                .macro MNEXT,
0000                             ; 
0000                	EX	DE,HL	                    ; 4t
0000                 mNEXTHL                         ; 34t
0000                .endm
0000                 
0000                          .ORG   START_ROM   
0000   C3 6C 00     RESET:    JP   INIT   
0008                          .ORG   $08   
0008   FD 2A 7D 24  RST08:    LD   IY,(vRST08)   
000C   FD E9                  JP   (IY)   
0010                          .ORG   $10   
0010   FD 2A 7F 24  RST10:    LD   IY,(vRST10)   
0014   FD E9                  JP   (IY)   
0018                          .ORG   $18   
0018   FD 2A 81 24  RST18:    LD   IY,(vRST18)   
001C   FD E9                  JP   (IY)   
0020                          .ORG   $20   
0020   FD 2A 83 24  RST20:    LD   IY,(vRST20)   
0024   FD E9                  JP   (IY)   
0028                          .ORG   $28   
0028   FD 2A 85 24  RST28:    LD   IY,(vRST28)   
002C   FD E9                  JP   (IY)   
0030                          .ORG   $30   
0030   FD 2A 87 24  RST30:    LD   IY,(vRST30)   
0034   FD E9                  JP   (IY)   
0038                          .ORG   $38   
0038   FD 2A 89 24  RST38:    LD   IY,(vINT)   
003C   FD E9                  JP   (IY)   
0066                          .ORG   $66   
0066   FD 2A 8B 24  RST66:    LD   IY,(vNMI)   
006A   FD E9                  JP   (IY)   
006C                INIT:        
006C   21 98 00               LD   HL,serialInt   
006F   22 89 24               LD   (vINT),HL   
0072   21 00 22               LD   HL,SPP   ; Setup Forth data stack
0075   F9                     LD   SP,HL   ; also used as return stack by interrupts etc
0076   21 26 01               LD   HL,DEFAULTS   ; initialize user variables with defaults
0079   11 00 24               LD   DE,UPP   
007C   01 3A 00               LD   BC,US   
007F   ED B0                  LDIR      
0081   DD 21 00 24            LD   IX,RPP   ; set up Forth return stack
0085   FD 21 F5 0D            LD   IY,NEXT_STEP   
0089   01 FF FF               LD   BC,-1   ; empty stack marker
008C   C3 DE 0D               JP   HI   
008F                          IF   TESTMODE   
                              JP   TESTS_START   
008F                          ELSE      
008F                             ; LD      HL,GREETING
008F                             ; CALL    PRINTSZ
008F                LOOP:        
008F   CD EA 00               CALL   RXA   
0092   CD 15 01               CALL   TXA   
0095   C3 8F 00               JP   LOOP   
0098                          ENDIF      
0098   F5           SERIALINT:   PUSH   AF   
0099   E5                     PUSH   HL   
009A   DB 80                  IN   A,($80)   
009C   E6 01                  AND   $01   ; Check if interupt due to read buffer full
009E   28 2D                  JR   Z,rts0   ; if not, ignore
00A0   DB 81                  IN   A,($81)   
00A2   F5                     PUSH   AF   
00A3   3A 3C 24               LD   A,(serBufUsed)   
00A6   FE 3F                  CP   SER_BUFSIZE   ; If full then ignore
00A8   20 03                  JR   NZ,notFull   
00AA   F1                     POP   AF   
00AB   18 20                  JR   rts0   
00AD   2A 38 24     NOTFULL:   LD   HL,(serInPtr)   
00B0   23                     INC   HL   
00B1   7D                     LD   A,L   ; Only need to check low byte becasuse buffer<256 bytes
00B2   FE 7D                  CP   (serBuf+SER_BUFSIZE) & $FF   
00B4   20 03                  JR   NZ,notWrap   
00B6   21 3E 24               LD   HL,serBuf   
00B9   22 38 24     NOTWRAP:   LD   (serInPtr),HL   
00BC   F1                     POP   AF   
00BD   77                     LD   (HL),A   
00BE   3A 3C 24               LD   A,(serBufUsed)   
00C1   3C                     INC   A   
00C2   32 3C 24               LD   (serBufUsed),A   
00C5   FE 30                  CP   SER_FULLSIZE   
00C7   38 04                  JR   C,rts0   
00C9   3E D6                  LD   A,RTS_HIGH   
00CB   D3 80                  OUT   ($80),A   
00CD   E1           RTS0:     POP   HL   
00CE   F1                     POP   AF   
00CF   FD 21 F5 0D            LD   IY,NEXT_STEP   
00D3   FB                     EI      
00D4   ED 4D                  RETI      
00D6                             ; Modified from code by Grant Searle
00D6                             ; Minimum 6850 ACIA interrupt driven serial I/O
00D6                INIT_IO:      
00D6   F3                     DI      ; Disable interrupts
00D7   21 3E 24               LD   HL,serBuf   
00DA   22 38 24               LD   (serInPtr),HL   
00DD   22 3A 24               LD   (serRdPtr),HL   
00E0   AF                     XOR   A   
00E1   32 3C 24               LD   (serBufUsed),A   
00E4   3E 96                  LD   A,RTS_LOW   
00E6   D3 80                  OUT   ($80),A   ; Initialise ACIA
00E8   FB                     EI      
00E9   C9                     RET      
00EA                RXA:         
00EA                WAITFORCHAR:      
00EA   3A 3C 24               LD   A,(serBufUsed)   
00ED   FE 00                  CP   $00   
00EF   28 F9                  JR   Z,waitForChar   
00F1                RXA1:        
00F1   E5                     PUSH   HL   
00F2   2A 3A 24               LD   HL,(serRdPtr)   
00F5   23                     INC   HL   
00F6   7D                     LD   A,L   ; Only need to check low byte becasuse buffer<256 bytes
00F7   FE 7D                  CP   (serBuf+SER_BUFSIZE) & $FF   
00F9   20 03                  JR   NZ,notRdWrap   
00FB   21 3E 24               LD   HL,serBuf   
00FE                NOTRDWRAP:      
00FE   F3                     DI      
00FF   22 3A 24               LD   (serRdPtr),HL   
0102   3A 3C 24               LD   A,(serBufUsed)   
0105   3D                     DEC   A   
0106   32 3C 24               LD   (serBufUsed),A   
0109   FE 05                  CP   SER_EMPTYSIZE   
010B   30 04                  JR   NC,rts1   
010D   3E 96                  LD   A,RTS_LOW   
010F   D3 80                  OUT   ($80),A   
0111                RTS1:        
0111   7E                     LD   A,(HL)   
0112   FB                     EI      
0113   E1                     POP   HL   
0114   C9                     RET      ; Char ready in A
0115                TXA:         
0115   F5                     PUSH   AF   ; Store character
0116                CONOUT1:      
0116   DB 80                  IN   A,($80)   ; Status byte
0118   CB 4F                  BIT   1,A   ; Set Zero flag if still transmitting character
011A   28 FA                  JR   Z,conout1   ; Loop until flag signals ready
011C   F1                     POP   AF   ; Retrieve character
011D   D3 81                  OUT   ($81),A   ; Output the character
011F   C9                     RET      
0120                QRXA:        
0120   3A 3C 24               LD   A,(serBufUsed)   
0123   FE 00                  CP   $0   
0125   C9                     RET      
0126                             ; .align 2
0126                DEFAULTS:      
0126                UZERO:       
0126   00 22        DEFSZERO:   DW   SPP   ; SP0
0128   00 24        DEFRZERO:   DW   RPP   ; RP0
012A   78 0B        DEFTQKEY:   DW   QRX   ; '?KEY
012C   90 0B        DEFTEMIT:   DW   TXSTO   ; 'EMIT
012E   50 0D        DEFTEXPE:   DW   ACCEP   ; 'EXPECT
0130   22 0D        DEFTTAP:   DW   KTAP   ; 'TAP
0132   90 0B        DEFTECHO:   DW   TXSTO   ; 'ECHO
0134   08 0B        DEFTPROM:   DW   DOTOK   ; 'PROMPT
0136   0A 00        DEFBASE:   DW   BASEE   ; BASE
0138   00 00        DEFTEMP:   DW   0   ; tmp
013A   00 00        DEFSPAN:   DW   0   ; SPAN
013C   00 00        DEFINN:   DW   0   ; >IN
013E   00 00        DEFNTIB:   DW   0   ; #TIB
0140   00 22        DEFTIB:   DW   TIBB   ; TIB
0142   00 00        DEFCSP:   DW   0   ; CSP
0144   C6 0A        DEFTEVAL:   DW   INTER   ; 'EVAL
0146   A8 07        DEFTNUMB:   DW   NUMBQ   ; 'NUMBER
0148   00 00        DEFHLD:   DW   0   ; HLD
014A   00 00        DEFHANDL:   DW   0   ; HANDLER
014C   00 00        DEFCNTXT:   DW   0   ; CONTEXT pointer
014E   00 00        DEFVOCABS:   DW   0   ; vocabulary stack    ???
0150   00 00        DEFCRRENT:   DW   0   ; CURRENT pointer
0152   00 00        DEFVOCABLP:   DW   0   ; vocabulary link pointer ???
0154   8D 24        DEFCP:    DW   CPP   ; CP  for runing phase on RAM
0156   FE FF        DEFNP:    DW   NPP   ; NP  for runing phase on RAM
0158   9A 13        DEFLAST:   DW   LASTN   ; LAST
015A   9A 13        DEFVFRTH:   DW   LASTN   ; FORTH   \ mullti-user ???
015C   00 00        DEFVOCABL:   DW   0   ; vocabulary link       ???
015E   00 00        DEFCOLD:   DW   0   ; "COLD"
0160                ULAST:       
0160                END_DEFAULTS:      
0160                VVCODE:   .SET   $   
0160                             ;   0<          ( n -- t )
0160                             ;               Return true if n is negative.
0160                          ;*Macro unroll: mCODE	2,'0<', ZLESS
0160                          ALIGN   2   
0160                ZLESS:       
0160                VVCODE:   .SET   $   
0160                VVLEN:    .SET   (2 & 01FH) / CELLL   
1FF8                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FF8                VVNAME:   .SET   $   
1FF8   60 01 00 00            DW   vvCODE,vvLINK   
1FFC                VVLINK:   .SET   $   
1FFC   02 30 3C               DB   2,"0<"   
0160                          .ORG   vvCODE   
0160   CB 20                  SLA   B   ; sign bit -> cy flag
0162   9F                     SBC   A,A   ; propagate cy through A
0163   47                     LD   B,A   ; put 0000 or FFFF in TOS
0164   4F                     LD   C,A   
0165                          ;*Macro unroll: 	mNEXT
0165   EB                     EX   DE,HL   
0166                          ;*Macro unroll:  mNEXTHL                         ; 34t
0166   FD E9                  JP   (IY)   ; 34t
0168                             ;   AND         ( w w -- w )
0168                             ;               Bitwise AND.
0168                          ;*Macro unroll: mCODE	3, 'AND', ANDD
0168                          ALIGN   2   
0168                ANDD:        
0168                VVCODE:   .SET   $   
0168                VVLEN:    .SET   (3 & 01FH) / CELLL   
1FF0                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FF0                VVNAME:   .SET   $   
1FF0   68 01 FC 1F            DW   vvCODE,vvLINK   
1FF4                VVLINK:   .SET   $   
1FF4   03 41 4E 44            DB   3,"AND"   
0168                          .ORG   vvCODE   
0168   E1                     POP   HL   
0169   78                     LD   A,B   
016A   A4                     AND   H   
016B   47                     LD   B,A   
016C   79                     LD   A,C   
016D   A5                     AND   L   
016E   4F                     LD   C,A   
016F                          ;*Macro unroll: 	mNEXT
016F   EB                     EX   DE,HL   
0170                          ;*Macro unroll:  mNEXTHL                         ; 34t
0170   FD E9                  JP   (IY)   ; 34t
0172                             ;   OR          ( w w -- w )
0172                             ;               Bitwise inclusive OR.
0172                          ;*Macro unroll: mCODE	2,'OR', ORR
0172                          ALIGN   2   
0172                ORR:         
0172                VVCODE:   .SET   $   
0172                VVLEN:    .SET   (2 & 01FH) / CELLL   
1FE8                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FE8                VVNAME:   .SET   $   
1FE8   72 01 F4 1F            DW   vvCODE,vvLINK   
1FEC                VVLINK:   .SET   $   
1FEC   02 4F 52               DB   2,"OR"   
0172                          .ORG   vvCODE   
0172   E1                     POP   HL   
0173   78                     LD   A,B   
0174   B4                     OR   H   
0175   47                     LD   B,A   
0176   79                     LD   A,C   
0177   B5                     OR   L   
0178   4F                     LD   C,A   
0179                          ;*Macro unroll: 	mNEXT
0179   EB                     EX   DE,HL   
017A                          ;*Macro unroll:  mNEXTHL                         ; 34t
017A   FD E9                  JP   (IY)   ; 34t
017C                             ;   XOR         ( w w -- w )
017C                             ;               Bitwise exclusive
017C                          ;*Macro unroll: mCODE	3, 'XOR', XORR
017C                          ALIGN   2   
017C                XORR:        
017C                VVCODE:   .SET   $   
017C                VVLEN:    .SET   (3 & 01FH) / CELLL   
1FE0                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FE0                VVNAME:   .SET   $   
1FE0   7C 01 EC 1F            DW   vvCODE,vvLINK   
1FE4                VVLINK:   .SET   $   
1FE4   03 58 4F 52            DB   3,"XOR"   
017C                          .ORG   vvCODE   
017C   E1                     POP   HL   
017D   78                     LD   A,B   
017E   AC                     XOR   H   
017F   47                     LD   B,A   
0180   79                     LD   A,C   
0181   AD                     XOR   L   
0182   4F                     LD   C,A   
0183                          ;*Macro unroll: 	mNEXT
0183   EB                     EX   DE,HL   
0184                          ;*Macro unroll:  mNEXTHL                         ; 34t
0184   FD E9                  JP   (IY)   ; 34t
0186                             ;   +           ( w w -- sum )
0186                             ;               Add top two items.
0186                          ;*Macro unroll: mCOLON	1,'+', PLUS
0186                          ;*Macro unroll:  mCODE 1, "+", PLUS
0186                          ALIGN   2   
0186                PLUS:        
0186                VVCODE:   .SET   $   
0186                VVLEN:    .SET   (1 & 01FH) / CELLL   
1FDA                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FDA                VVNAME:   .SET   $   
1FDA   86 01 E4 1F            DW   vvCODE,vvLINK   
1FDE                VVLINK:   .SET   $   
1FDE   01 2B                  DB   1,"+"   
0186                          .ORG   vvCODE   
0186   00                     NOP      
0187   CD 0E 06               CALL   doLIST   
018A   5E 02 06 10 5C 06      DW   UMPlus,DROP,EXIT   
0190                             ;   NOT         ( w -- w )
0190                             ;               One's complement of tos.
0190                          ;*Macro unroll: mCOLON  3, 'NOT', INVER
0190                          ;*Macro unroll:  mCODE 3, "NOT", INVER
0190                          ALIGN   2   
0190                INVER:       
0190                VVCODE:   .SET   $   
0190                VVLEN:    .SET   (3 & 01FH) / CELLL   
1FD2                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FD2                VVNAME:   .SET   $   
1FD2   90 01 DE 1F            DW   vvCODE,vvLINK   
1FD6                VVLINK:   .SET   $   
1FD6   03 4E 4F 54            DB   3,"NOT"   
0190                          .ORG   vvCODE   
0190   00                     NOP      
0191   CD 0E 06               CALL   doLIST   
0194   1C 06 FF FF 7C 01 5C 06 DW   DOLIT,-1,XORR,EXIT   
019C                             ;   NEGAT      ( n -- -n )
019C                             ;               Two's complement of tos.
019C                          ;*Macro unroll: mCOLON	6,'NEGATE',NEGAT
019C                          ;*Macro unroll:  mCODE 6, "NEGATE", NEGAT
019C                          ALIGN   2   
019C                NEGAT:       
019C                VVCODE:   .SET   $   
019C                VVLEN:    .SET   (6 & 01FH) / CELLL   
1FC6                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FC6                VVNAME:   .SET   $   
1FC6   9C 01 D6 1F            DW   vvCODE,vvLINK   
1FCA                VVLINK:   .SET   $   
1FCA   06 4E 45 47 41 54 45   DB   6,"NEGATE"   
019C                          .ORG   vvCODE   
019C   00                     NOP      
019D   CD 0E 06               CALL   doLIST   
01A0   90 01 1C 06 01 00 86 01 5C 06 DW   INVER,DOLIT,1,Plus,EXIT   
01AA                             ;   DNEGATE     ( d -- -d )
01AA                             ;               Two's complement of top double.
01AA                          ;*Macro unroll: mCOLON	7,'DNEGATE',DNEGA
01AA                          ;*Macro unroll:  mCODE 7, "DNEGATE", DNEGA
01AA                          ALIGN   2   
01AA                DNEGA:       
01AA                VVCODE:   .SET   $   
01AA                VVLEN:    .SET   (7 & 01FH) / CELLL   
1FBA                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FBA                VVNAME:   .SET   $   
1FBA   AA 01 CA 1F            DW   vvCODE,vvLINK   
1FBE                VVLINK:   .SET   $   
1FBE   07 44 4E 45 47 41 54 45 DB   7,"DNEGATE"   
01AA                          .ORG   vvCODE   
01AA   00                     NOP      
01AB   CD 0E 06               CALL   doLIST   
01AE   90 01 E6 0F 90 01      DW   INVER,ToR,INVER   
01B4   1C 06 01 00 5E 02      DW   DOLIT,1,UMPlus   
01BA   F4 0F 86 01 5C 06      DW   RFrom,Plus,EXIT   
01C0                             ;   -           ( n1 n2 -- n1-n2 )
01C0                             ;               Subtraction.
01C0                          ;*Macro unroll: mCOLON	1, '-', SUBB
01C0                          ;*Macro unroll:  mCODE 1, "-", SUBB
01C0                          ALIGN   2   
01C0                SUBB:        
01C0                VVCODE:   .SET   $   
01C0                VVLEN:    .SET   (1 & 01FH) / CELLL   
1FB4                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FB4                VVNAME:   .SET   $   
1FB4   C0 01 BE 1F            DW   vvCODE,vvLINK   
1FB8                VVLINK:   .SET   $   
1FB8   01 2D                  DB   1,"-"   
01C0                          .ORG   vvCODE   
01C0   00                     NOP      
01C1   CD 0E 06               CALL   doLIST   
01C4   9C 01 86 01 5C 06      DW   NEGAT,Plus,EXIT   
01CA                             ;   ABS         ( n -- n )
01CA                             ;               Return the absolute value of n.
01CA                          ;*Macro unroll: mCOLON	3,'ABS',ABSS
01CA                          ;*Macro unroll:  mCODE 3, "ABS", ABSS
01CA                          ALIGN   2   
01CA                ABSS:        
01CA                VVCODE:   .SET   $   
01CA                VVLEN:    .SET   (3 & 01FH) / CELLL   
1FAC                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FAC                VVNAME:   .SET   $   
1FAC   CA 01 B8 1F            DW   vvCODE,vvLINK   
1FB0                VVLINK:   .SET   $   
1FB0   03 41 42 53            DB   3,"ABS"   
01CA                          .ORG   vvCODE   
01CA   00                     NOP      
01CB   CD 0E 06               CALL   doLIST   
01CE   02 10 60 01 32 0E D8 01 DW   DUPP,ZLESS,QBRAN,ABS1   
01D6   9C 01                  DW   NEGAT   
01D8                ABS1:        
01D8   5C 06                  DW   EXIT   
01DA                             ;   =           ( w w -- t )
01DA                             ;               Return true if top two are equal.
01DA                          ;*Macro unroll: mCOLON	1, '=', EQUAL
01DA                          ;*Macro unroll:  mCODE 1, "=", EQUAL
01DA                          ALIGN   2   
01DA                EQUAL:       
01DA                VVCODE:   .SET   $   
01DA                VVLEN:    .SET   (1 & 01FH) / CELLL   
1FA6                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FA6                VVNAME:   .SET   $   
1FA6   DA 01 B0 1F            DW   vvCODE,vvLINK   
1FAA                VVLINK:   .SET   $   
1FAA   01 3D                  DB   1,"="   
01DA                          .ORG   vvCODE   
01DA   00                     NOP      
01DB   CD 0E 06               CALL   doLIST   
01DE   7C 01                  DW   XORR   
01E0   32 0E EA 01            DW   QBRAN,EQU1   
01E4   1C 06 00 00 5C 06      DW   DOLIT,0,EXIT   ;false flag
01EA                EQU1:        
01EA   1C 06 FF FF 5C 06      DW   DOLIT,-1,EXIT   ;true flag
01F0                             ;   U<          ( u u -- t )
01F0                             ;               Unsigned compare of top two items.
01F0                          ;*Macro unroll: mCOLON	2,'U<',ULESS
01F0                          ;*Macro unroll:  mCODE 2, "U<", ULESS
01F0                          ALIGN   2   
01F0                ULESS:       
01F0                VVCODE:   .SET   $   
01F0                VVLEN:    .SET   (2 & 01FH) / CELLL   
1F9E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F9E                VVNAME:   .SET   $   
1F9E   F0 01 AA 1F            DW   vvCODE,vvLINK   
1FA2                VVLINK:   .SET   $   
1FA2   02 55 3C               DB   2,"U<"   
01F0                          .ORG   vvCODE   
01F0   00                     NOP      
01F1   CD 0E 06               CALL   doLIST   
01F4   40 10 7C 01 60 01      DW   DDUP,XORR,ZLESS   
01FA   32 0E 06 02            DW   QBRAN,ULES1   
01FE   0A 10 06 10 60 01 5C 06 DW   SWAP,DROP,ZLESS,EXIT   
0206                ULES1:       
0206   C0 01 60 01 5C 06      DW   SUBB,ZLESS,EXIT   
020C                             ;   <           ( n1 n2 -- t )
020C                             ;               is less than
020C                          ;*Macro unroll: mCOLON	1,'<',LESS
020C                          ;*Macro unroll:  mCODE 1, "<", LESS
020C                          ALIGN   2   
020C                LESS:        
020C                VVCODE:   .SET   $   
020C                VVLEN:    .SET   (1 & 01FH) / CELLL   
1F98                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F98                VVNAME:   .SET   $   
1F98   0C 02 A2 1F            DW   vvCODE,vvLINK   
1F9C                VVLINK:   .SET   $   
1F9C   01 3C                  DB   1,"<"   
020C                          .ORG   vvCODE   
020C   00                     NOP      
020D   CD 0E 06               CALL   doLIST   
0210   40 10 7C 01 60 01 32 0E 20 02 DW   DDUP,XORR,ZLESS,QBRAN,LESS1   
021A   06 10 60 01 5C 06      DW   DROP,ZLESS,EXIT   
0220                LESS1:       
0220   C0 01 60 01 5C 06      DW   SUBB,ZLESS,EXIT   
0226                             ;   MAX         ( n n -- n )
0226                             ;               Return the greater of two top stack items.
0226                          ;*Macro unroll: mCOLON	3,'MAX',MAX
0226                          ;*Macro unroll:  mCODE 3, "MAX", MAX
0226                          ALIGN   2   
0226                MAX:         
0226                VVCODE:   .SET   $   
0226                VVLEN:    .SET   (3 & 01FH) / CELLL   
1F90                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F90                VVNAME:   .SET   $   
1F90   26 02 9C 1F            DW   vvCODE,vvLINK   
1F94                VVLINK:   .SET   $   
1F94   03 4D 41 58            DB   3,"MAX"   
0226                          .ORG   vvCODE   
0226   00                     NOP      
0227   CD 0E 06               CALL   doLIST   
022A   40 10 0C 02 32 0E 34 02 DW   DDUP,LESS,QBRAN,MAX1   
0232   0A 10                  DW   SWAP   
0234                MAX1:        
0234   06 10 5C 06            DW   DROP,EXIT   
0238                             ;   MIN         ( n n -- n )
0238                             ;               Return the smaller of top two stack items.
0238                          ;*Macro unroll: mCOLON	3,'MIN',MIN
0238                          ;*Macro unroll:  mCODE 3, "MIN", MIN
0238                          ALIGN   2   
0238                MIN:         
0238                VVCODE:   .SET   $   
0238                VVLEN:    .SET   (3 & 01FH) / CELLL   
1F88                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F88                VVNAME:   .SET   $   
1F88   38 02 94 1F            DW   vvCODE,vvLINK   
1F8C                VVLINK:   .SET   $   
1F8C   03 4D 49 4E            DB   3,"MIN"   
0238                          .ORG   vvCODE   
0238   00                     NOP      
0239   CD 0E 06               CALL   doLIST   
023C   40 10 0A 10 0C 02      DW   DDUP,SWAP,LESS   
0242   32 0E 48 02            DW   QBRAN,MIN1   
0246   0A 10                  DW   SWAP   
0248                MIN1:        
0248   06 10 5C 06            DW   DROP,EXIT   
024C                             ;   WITHIN      ( u ul uh -- t )
024C                             ;               Return true if u is within the range of ul and uh.
024C                          ;*Macro unroll: mCOLON	6,'WITHIN',WITHI
024C                          ;*Macro unroll:  mCODE 6, "WITHIN", WITHI
024C                          ALIGN   2   
024C                WITHI:       
024C                VVCODE:   .SET   $   
024C                VVLEN:    .SET   (6 & 01FH) / CELLL   
1F7C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F7C                VVNAME:   .SET   $   
1F7C   4C 02 8C 1F            DW   vvCODE,vvLINK   
1F80                VVLINK:   .SET   $   
1F80   06 57 49 54 48 49 4E   DB   6,"WITHIN"   
024C                          .ORG   vvCODE   
024C   00                     NOP      
024D   CD 0E 06               CALL   doLIST   
0250   12 10 C0 01 E6 0F      DW   OVER,SUBB,ToR   ;ul <= u < uh
0256   C0 01 F4 0F F0 01 5C 06 DW   SUBB,RFrom,ULess,EXIT   
025E                             ;   UM+         ( w w -- w cy )
025E                             ;               Add two numbers, return the sum and carry flag.
025E                          ;*Macro unroll: hCODE	3,'um+',UMPlus
025E                          ALIGN   2   
025E                UMPLUS:      
025E   E1                     POP   HL   ;10t
025F   09                     ADD   HL,BC   ;11t
0260   E5                     PUSH   HL   ;11t
0261   01 00 00               LD   BC,0   ;10t
0264   30 01                  JR   NC,UMP1   ;12/7t
0266                UMP2:        
0266   03                     INC   BC   ; 6t
0267                UMP1:        
0267                          ;*Macro unroll:  mNEXT
0267   EB                     EX   DE,HL   
0268                          ;*Macro unroll:  mNEXTHL                         ; 34t
0268   FD E9                  JP   (IY)   ; 34t
026A                             ; UM/MOD      ( udl udh u -- ur uq )
026A                             ; Unsigned divide of a double by a single. Return mod and quotient.
026A                             ; Note: Less range than eForth because most significant word discarded TODO: fix
026A                          ;*Macro unroll: mCOLON  6,'UM/MOD',UMMOD
026A                          ;*Macro unroll:  mCODE 6, "UM/MOD", UMMOD
026A                          ALIGN   2   
026A                UMMOD:       
026A                VVCODE:   .SET   $   
026A                VVLEN:    .SET   (6 & 01FH) / CELLL   
1F70                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F70                VVNAME:   .SET   $   
1F70   6A 02 80 1F            DW   vvCODE,vvLINK   
1F74                VVLINK:   .SET   $   
1F74   06 55 4D 2F 4D 4F 44   DB   6,"UM/MOD"   
026A                          .ORG   vvCODE   
026A   00                     NOP      
026B   CD 0E 06               CALL   doLIST   
026E   0A 10 06 10 76 02 5C 06 DW   SWAP,DROP,UMSLMOD2,EXIT   
0276                             ; UM/MOD2	( ud u1 -- u2 u3 )		
0276                             ; Unsigned division of a double-cell number ud by a single-cell
0276                             ; number u1. Return remainder u2 and quotient u3.
0276                             ; Note: Less range than eForth TODO: fix
0276                          ;*Macro unroll: mCODE	6,'UM/MOD2',UMSLMOD2
0276                          ALIGN   2   
0276                UMSLMOD2:      
0276                VVCODE:   .SET   $   
0276                VVLEN:    .SET   (6 & 01FH) / CELLL   
1F64                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F64                VVNAME:   .SET   $   
1F64   76 02 74 1F            DW   vvCODE,vvLINK   
1F68                VVLINK:   .SET   $   
1F68   06 55 4D 2F 4D 4F 44 32 DB   6,"UM/MOD2"   
0276                          .ORG   vvCODE   
0276   78                     LD   A,B   
0277   B1                     OR   C   
0278   28 25                  JR   Z,UMMOD2   ;?zero divisor
027A                UMMOD11:      
027A   C5                     PUSH   BC   
027B   D9                     EXX      
027C   C1                     POP   BC   
027D   E1                     POP   HL   
027E   D1                     POP   DE   
027F   7D                     LD   A,L   
0280   91                     SUB   C   
0281   7C                     LD   A,H   
0282   98                     SBC   A,B   
0283   30 20                  JR   NC,UMMOD1   ;?too big
0285                UMMOD12:      
0285   7C                     LD   A,H   
0286   65                     LD   H,L   
0287   6A                     LD   L,D   
0288   16 08                  LD   D,8   
028A   D5                     PUSH   DE   
028B   CD B9 02               CALL   UMMOD3   
028E   D1                     POP   DE   
028F   E5                     PUSH   HL   
0290   6B                     LD   L,E   
0291   CD B9 02               CALL   UMMOD3   
0294   57                     LD   D,A   
0295   5C                     LD   E,H   
0296   C1                     POP   BC   
0297   61                     LD   H,C   
0298   D5                     PUSH   DE   
0299   E5                     PUSH   HL   
029A   D9                     EXX      
029B   C1                     POP   BC   
029C                          ;*Macro unroll: 	mNEXT
029C   EB                     EX   DE,HL   
029D                          ;*Macro unroll:  mNEXTHL                         ; 34t
029D   FD E9                  JP   (IY)   ; 34t
029F                UMMOD2:      
029F   01 CC 0F               LD   BC,ERR_DIVZERO   ; divide by 0
02A2   C3 46 0E               JP   THROWX   
02A5                UMMOD1:      
02A5   01 D8 0F               LD   BC,ERR_OUTOFRANGE   ; result out of range
02A8   C3 46 0E               JP   THROWX   
02AB                UMMOD4:      
02AB   5F                     LD   E,A   
02AC   7C                     LD   A,H   
02AD   91                     SUB   C   
02AE   67                     LD   H,A   
02AF   7B                     LD   A,E   
02B0   98                     SBC   A,B   
02B1   30 10                  JR   NC,UMMOD5   
02B3                UMMOD13:      
02B3   7C                     LD   A,H   
02B4   81                     ADD   A,C   
02B5   67                     LD   H,A   
02B6   7B                     LD   A,E   
02B7   15                     DEC   D   
02B8   C8                     RET   Z   
02B9                UMMOD3:      
02B9   29                     ADD   HL,HL   
02BA   17                     RLA      
02BB   30 EE                  JR   NC,UMMOD4   
02BD                UMMOD14:      
02BD   5F                     LD   E,A   
02BE   7C                     LD   A,H   
02BF   91                     SUB   C   
02C0   67                     LD   H,A   
02C1   7B                     LD   A,E   
02C2   98                     SBC   A,B   
02C3                UMMOD5:      
02C3   2C                     INC   L   
02C4   15                     DEC   D   
02C5   20 F2                  JR   NZ,UMMOD3   
02C7                UMMOD15:      
02C7   C9                     RET      
02C8                             ;   FM/MOD	( d n1 -- n2 n3 )		\ CORE
02C8                             ;		Signed floored divide of double by single. Return mod n2
02C8                             ;		and quotient n3.
02C8                             ; TODO: this is usually called M/MOD in eForth
02C8                          ;*Macro unroll: mCOLON	6,'M/MOD',MSMOD
02C8                          ;*Macro unroll:  mCODE 6, "M/MOD", MSMOD
02C8                          ALIGN   2   
02C8                MSMOD:       
02C8                VVCODE:   .SET   $   
02C8                VVLEN:    .SET   (6 & 01FH) / CELLL   
1F58                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F58                VVNAME:   .SET   $   
1F58   C8 02 68 1F            DW   vvCODE,vvLINK   
1F5C                VVLINK:   .SET   $   
1F5C   06 4D 2F 4D 4F 44      DB   6,"M/MOD"   
02C8                          .ORG   vvCODE   
02C8   00                     NOP      
02C9   CD 0E 06               CALL   doLIST   
02CC   02 10 60 01 02 10 E6 0F DW   DUPP,ZLESS,DUPP,TOR   
02D4   32 0E E0 02            DW   QBRAN,MMOD1   
02D8   9C 01 E6 0F AA 01 F4 0F DW   NEGAT,TOR,DNEGA,RFROM   
02E0                MMOD1:       
02E0   E6 0F 02 10 60 01      DW   TOR,DUPP,ZLESS   
02E6   32 0E EE 02            DW   QBRAN,MMOD2   
02EA   70 0E 86 01            DW   RAT,PLUS   
02EE                MMOD2:       
02EE   F4 0F 6A 02 F4 0F      DW   RFROM,UMMOD,RFROM   
02F4   32 0E FE 02            DW   QBRAN,MMOD3   
02F8   0A 10 9C 01 0A 10      DW   SWAP,NEGAT,SWAP   
02FE                MMOD3:       
02FE   5C 06                  DW   EXIT   
0300                             ;   /MOD        ( n n -- r q )
0300                             ;               Signed divide. Return mod and quotient.
0300                          ;*Macro unroll: mCOLON	4,'/MOD',SLMOD
0300                          ;*Macro unroll:  mCODE 4, "/MOD", SLMOD
0300                          ALIGN   2   
0300                SLMOD:       
0300                VVCODE:   .SET   $   
0300                VVLEN:    .SET   (4 & 01FH) / CELLL   
1F4E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F4E                VVNAME:   .SET   $   
1F4E   00 03 5C 1F            DW   vvCODE,vvLINK   
1F52                VVLINK:   .SET   $   
1F52   04 2F 4D 4F 44         DB   4,"/MOD"   
0300                          .ORG   vvCODE   
0300   00                     NOP      
0301   CD 0E 06               CALL   doLIST   
0304   12 10 60 01 0A 10 C8 02 5C 06 DW   OVER,ZLESS,SWAP,MSMOD,EXIT   
030E                             ;   MOD         ( n n -- r )
030E                             ;               Signed divide. Return mod only.
030E                          ;*Macro unroll: mCOLON	3,'MOD',MODD
030E                          ;*Macro unroll:  mCODE 3, "MOD", MODD
030E                          ALIGN   2   
030E                MODD:        
030E                VVCODE:   .SET   $   
030E                VVLEN:    .SET   (3 & 01FH) / CELLL   
1F46                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F46                VVNAME:   .SET   $   
1F46   0E 03 52 1F            DW   vvCODE,vvLINK   
1F4A                VVLINK:   .SET   $   
1F4A   03 4D 4F 44            DB   3,"MOD"   
030E                          .ORG   vvCODE   
030E   00                     NOP      
030F   CD 0E 06               CALL   doLIST   
0312   00 03 06 10 5C 06      DW   SLMOD,DROP,EXIT   
0318                             ; 
0318                             ;   /           ( n n -- q )
0318                             ;               Signed divide. Return quotient only.
0318                          ;*Macro unroll: mCOLON	1,'/',SLASH
0318                          ;*Macro unroll:  mCODE 1, "/", SLASH
0318                          ALIGN   2   
0318                SLASH:       
0318                VVCODE:   .SET   $   
0318                VVLEN:    .SET   (1 & 01FH) / CELLL   
1F40                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F40                VVNAME:   .SET   $   
1F40   18 03 4A 1F            DW   vvCODE,vvLINK   
1F44                VVLINK:   .SET   $   
1F44   01 2F                  DB   1,"/"   
0318                          .ORG   vvCODE   
0318   00                     NOP      
0319   CD 0E 06               CALL   doLIST   
031C   00 03 0A 10 06 10 5C 06 DW   SLMOD,SWAP,DROP,EXIT   
0324                             ; Multiply
0324                             ;   UM*         ( u u -- ud )
0324                             ;               Unsigned multiply. Return double product.
0324                          ;*Macro unroll: mCODE	3,'UM*',UMSTA
0324                          ALIGN   2   
0324                UMSTA:       
0324                VVCODE:   .SET   $   
0324                VVLEN:    .SET   (3 & 01FH) / CELLL   
1F38                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F38                VVNAME:   .SET   $   
1F38   24 03 44 1F            DW   vvCODE,vvLINK   
1F3C                VVLINK:   .SET   $   
1F3C   03 55 4D 2A            DB   3,"UM*"   
0324                          .ORG   vvCODE   
0324   EB                     EX   DE,HL   
0325   E3                     EX   (SP),HL   
0326   EB                     EX   DE,HL   
0327   21 00 00               LD   HL,0   
032A   3E 10                  LD   A,010h   
032C                UMSTA1:      
032C   29                     ADD   HL,HL   
032D   EB                     EX   DE,HL   
032E   ED 6A                  ADC   HL,HL   
0330   EB                     EX   DE,HL   
0331   30 04                  JR   NC,UMSTA3   
0333                UMSTA2:      
0333   09                     ADD   HL,BC   
0334   30 01                  JR   NC,UMSTA3   
0336                UMSTA5:      
0336   13                     INC   DE   
0337                UMSTA3:      
0337   3D                     DEC   A   
0338   20 F2                  JR   NZ,UMSTA1   
033A                UMSTA4:      
033A   42                     LD   B,D   
033B   4B                     LD   C,E   
033C   E3                     EX   (SP),HL   
033D                          ;*Macro unroll: 	mNEXTHL
033D   FD E9                  JP   (IY)   
033F                             ;   *           ( n n -- n )
033F                             ;               Signed multiply. Return single product.
033F                          ;*Macro unroll: mCOLON	1,'*',STAR
033F                          ;*Macro unroll:  mCODE 1, "*", STAR
033F                          ALIGN   2   
0340                STAR:        
0340                VVCODE:   .SET   $   
0340                VVLEN:    .SET   (1 & 01FH) / CELLL   
1F32                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F32                VVNAME:   .SET   $   
1F32   40 03 3C 1F            DW   vvCODE,vvLINK   
1F36                VVLINK:   .SET   $   
1F36   01 2A                  DB   1,"*"   
0340                          .ORG   vvCODE   
0340   00                     NOP      
0341   CD 0E 06               CALL   doLIST   
0344   24 03 06 10 5C 06      DW   UMSTA,DROP,EXIT   
034A                             ;   M*          ( n n -- d )
034A                             ;               Signed multiply. Return double product.
034A                          ;*Macro unroll: mCOLON	2,'M*',MSTAR,
034A                          ;*Macro unroll:  mCODE 2, "M*", MSTAR
034A                          ALIGN   2   
034A                MSTAR:       
034A                VVCODE:   .SET   $   
034A                VVLEN:    .SET   (2 & 01FH) / CELLL   
1F2A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F2A                VVNAME:   .SET   $   
1F2A   4A 03 36 1F            DW   vvCODE,vvLINK   
1F2E                VVLINK:   .SET   $   
1F2E   02 4D 2A               DB   2,"M*"   
034A                          .ORG   vvCODE   
034A   00                     NOP      
034B   CD 0E 06               CALL   doLIST   
034E   40 10 7C 01 60 01 E6 0F CA 01 0A 10 CA 01 DW   DDUP,XORR,ZLESS,ToR,ABSS,SWAP,ABSS   
035C   24 03 F4 0F 32 0E 66 03 DW   UMSTA,RFrom,QBRAN,MSTAR1   
0364   AA 01                  DW   DNEGA   
0366                MSTAR1:      
0366   5C 06                  DW   EXIT   
0368                             ;   */MOD       ( n1 n2 n3 -- r q )
0368                             ;               Multiply n1 and n2, then divide by n3. Return mod and quotient.
0368                          ;*Macro unroll: mCOLON	5,'*/MOD',SSMOD
0368                          ;*Macro unroll:  mCODE 5, "*/MOD", SSMOD
0368                          ALIGN   2   
0368                SSMOD:       
0368                VVCODE:   .SET   $   
0368                VVLEN:    .SET   (5 & 01FH) / CELLL   
1F20                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F20                VVNAME:   .SET   $   
1F20   68 03 2E 1F            DW   vvCODE,vvLINK   
1F24                VVLINK:   .SET   $   
1F24   05 2A 2F 4D 4F 44      DB   5,"*/MOD"   
0368                          .ORG   vvCODE   
0368   00                     NOP      
0369   CD 0E 06               CALL   doLIST   
036C   E6 0F 4A 03 F4 0F C8 02 5C 06 DW   ToR,MStar,RFrom,MSMOD,EXIT   
0376                             ;   */          ( n1 n2 n3 -- q )
0376                             ;               Multiply n1 by n2, then divide by n3. Return quotient only.
0376                          ;*Macro unroll: mCOLON	2,'*/',STASL
0376                          ;*Macro unroll:  mCODE 2, "*/", STASL
0376                          ALIGN   2   
0376                STASL:       
0376                VVCODE:   .SET   $   
0376                VVLEN:    .SET   (2 & 01FH) / CELLL   
1F18                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F18                VVNAME:   .SET   $   
1F18   76 03 24 1F            DW   vvCODE,vvLINK   
1F1C                VVLINK:   .SET   $   
1F1C   02 2A 2F               DB   2,"*/"   
0376                          .ORG   vvCODE   
0376   00                     NOP      
0377   CD 0E 06               CALL   doLIST   
037A   68 03 0A 10 06 10 5C 06 DW   SSMOD,SWAP,DROP,EXIT   
0382                             ;   CELL+       ( a -- a )
0382                             ;               Add cell size in byte to address.
0382                          ;*Macro unroll: mCOLON	5,'CELL+',CELLP
0382                          ;*Macro unroll:  mCODE 5, "CELL+", CELLP
0382                          ALIGN   2   
0382                CELLP:       
0382                VVCODE:   .SET   $   
0382                VVLEN:    .SET   (5 & 01FH) / CELLL   
1F0E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F0E                VVNAME:   .SET   $   
1F0E   82 03 1C 1F            DW   vvCODE,vvLINK   
1F12                VVLINK:   .SET   $   
1F12   05 43 45 4C 4C 2B      DB   5,"CELL+"   
0382                          .ORG   vvCODE   
0382   00                     NOP      
0383   CD 0E 06               CALL   doLIST   
0386   1C 06 02 00 86 01 5C 06 DW   DOLIT,CELLL,PLUS,EXIT   
038E                             ;   CELL-       ( a -- a )
038E                             ;               Subtract cell size in byte from address.
038E                          ;*Macro unroll: mCOLON	5,'CELL-',CELLM
038E                          ;*Macro unroll:  mCODE 5, "CELL-", CELLM
038E                          ALIGN   2   
038E                CELLM:       
038E                VVCODE:   .SET   $   
038E                VVLEN:    .SET   (5 & 01FH) / CELLL   
1F04                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F04                VVNAME:   .SET   $   
1F04   8E 03 12 1F            DW   vvCODE,vvLINK   
1F08                VVLINK:   .SET   $   
1F08   05 43 45 4C 4C 2D      DB   5,"CELL-"   
038E                          .ORG   vvCODE   
038E   00                     NOP      
038F   CD 0E 06               CALL   doLIST   
0392   1C 06 FE FF 86 01 5C 06 DW   DOLIT,-CELLL,PLUS,EXIT   
039A                             ;   CELLS       ( n -- n )
039A                             ;               Multiply tos by cell size in bytes.
039A                          ;*Macro unroll: mCOLON	5,'CELLS',CELLS
039A                          ;*Macro unroll:  mCODE 5, "CELLS", CELLS
039A                          ALIGN   2   
039A                CELLS:       
039A                VVCODE:   .SET   $   
039A                VVLEN:    .SET   (5 & 01FH) / CELLL   
1EFA                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1EFA                VVNAME:   .SET   $   
1EFA   9A 03 08 1F            DW   vvCODE,vvLINK   
1EFE                VVLINK:   .SET   $   
1EFE   05 43 45 4C 4C 53      DB   5,"CELLS"   
039A                          .ORG   vvCODE   
039A   00                     NOP      
039B   CD 0E 06               CALL   doLIST   
039E   1C 06 02 00 40 03 5C 06 DW   DOLIT,CELLL,STAR,EXIT   
03A6                             ;   '           ( -- ca )
03A6                             ;               Search context vocabularies for the next word in input stream.
03A6                          ;*Macro unroll: mCOLON  1,"'",TICK
03A6                          ;*Macro unroll:  mCODE 1, "'", TICK
03A6                          ALIGN   2   
03A6                TICK:        
03A6                VVCODE:   .SET   $   
03A6                VVLEN:    .SET   (1 & 01FH) / CELLL   
1EF4                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1EF4                VVNAME:   .SET   $   
1EF4   A6 03 FE 1E            DW   vvCODE,vvLINK   
1EF8                VVLINK:   .SET   $   
1EF8   01 27                  DB   1,"'"   
03A6                          .ORG   vvCODE   
03A6   00                     NOP      
03A7   CD 0E 06               CALL   doLIST   
03AA   3C 09 1E 0A            DW   TOKEN,NAMEQ   ;?defined
03AE   32 0E B4 03            DW   QBRAN,TICK1   
03B2   5C 06                  DW   EXIT   ;yes, push code address
03B4                TICK1:       
03B4   80 0A                  DW   THROW   ;no, error
03B6                             ;   ALLOT       ( n -- )
03B6                             ;               Allocate n bytes to the code dictionary.
03B6                          ;*Macro unroll: mCOLON  5,'ALLOT',ALLOT
03B6                          ;*Macro unroll:  mCODE 5, "ALLOT", ALLOT
03B6                          ALIGN   2   
03B6                ALLOT:       
03B6                VVCODE:   .SET   $   
03B6                VVLEN:    .SET   (5 & 01FH) / CELLL   
1EEA                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1EEA                VVNAME:   .SET   $   
1EEA   B6 03 F8 1E            DW   vvCODE,vvLINK   
1EEE                VVLINK:   .SET   $   
1EEE   05 41 4C 4C 4F 54      DB   5,"ALLOT"   
03B6                          .ORG   vvCODE   
03B6   00                     NOP      
03B7   CD 0E 06               CALL   doLIST   
03BA   22 11 9C 0E 5C 06      DW   CP,PSTOR,EXIT   ;adjust code pointer
03C0                             ;   ,           ( w -- )
03C0                             ;               Compile an integer into the code dictionary.
03C0                          ;*Macro unroll: mCOLON  1,',',COMMA
03C0                          ;*Macro unroll:  mCODE 1, ",", COMMA
03C0                          ALIGN   2   
03C0                COMMA:       
03C0                VVCODE:   .SET   $   
03C0                VVLEN:    .SET   (1 & 01FH) / CELLL   
1EE4                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1EE4                VVNAME:   .SET   $   
1EE4   C0 03 EE 1E            DW   vvCODE,vvLINK   
1EE8                VVLINK:   .SET   $   
1EE8   01 2C                  DB   1,","   
03C0                          .ORG   vvCODE   
03C0   00                     NOP      
03C1   CD 0E 06               CALL   doLIST   
03C4   E0 0E 02 10 82 03      DW   HERE,DUPP,CELLP   ;cell boundary
03CA   22 11 4E 0E 4E 0E 5C 06 DW   CP,STORE,STORE,EXIT   ;adjust code pointer, compile
03D2                             ;   [COMPILE]   ( -- ; <string> )
03D2                             ;               Compile the next immediate word into code dictionary.
03D2                          ;*Macro unroll: mCOLON  IMEDD+9,'[COMPILE]',BCOMP
03D2                          ;*Macro unroll:  mCODE IMEDD+9, "[COMPILE]", BCOMP
03D2                          ALIGN   2   
03D2                BCOMP:       
03D2                VVCODE:   .SET   $   
03D2                VVLEN:    .SET   (IMEDD+9 & 01FH) / CELLL   
1E96                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1E96                VVNAME:   .SET   $   
1E96   D2 03 E8 1E            DW   vvCODE,vvLINK   
1E9A                VVLINK:   .SET   $   
1E9A   49 5B 43 4F 4D 50 49 4C 45 5D DB   IMEDD+9,"[COMPILE]"   
03D2                          .ORG   vvCODE   
03D2   00                     NOP      
03D3   CD 0E 06               CALL   doLIST   
03D6   A6 03 C0 03 5C 06      DW   TICK,COMMA,EXIT   
03DC                             ;   COMPILE     ( -- )
03DC                             ;               Compile the next address in colon list to code dictionary.
03DC                          ;*Macro unroll: mCOLON  COMPO+7,'COMPILE',COMPI
03DC                          ;*Macro unroll:  mCODE COMPO+7, "COMPILE", COMPI
03DC                          ALIGN   2   
03DC                COMPI:       
03DC                VVCODE:   .SET   $   
03DC                VVLEN:    .SET   (COMPO+7 & 01FH) / CELLL   
1E6A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1E6A                VVNAME:   .SET   $   
1E6A   DC 03 9A 1E            DW   vvCODE,vvLINK   
1E6E                VVLINK:   .SET   $   
1E6E   27 43 4F 4D 50 49 4C 45 DB   COMPO+7,"COMPILE"   
03DC                          .ORG   vvCODE   
03DC   00                     NOP      
03DD   CD 0E 06               CALL   doLIST   
03E0   F4 0F 02 10 58 0E C0 03 DW   RFROM,DUPP,AT,COMMA   ;compile address
03E8   82 03 E6 0F 5C 06      DW   CELLP,TOR,EXIT   ;adjust return address
03EE                             ;   LITERAL     ( w -- )
03EE                             ;               Compile tos to code dictionary as an integer literal.
03EE                          ;*Macro unroll: mCOLON  IMEDD+7,'LITERAL',LITER
03EE                          ;*Macro unroll:  mCODE IMEDD+7, "LITERAL", LITER
03EE                          ALIGN   2   
03EE                LITER:       
03EE                VVCODE:   .SET   $   
03EE                VVLEN:    .SET   (IMEDD+7 & 01FH) / CELLL   
1E1E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1E1E                VVNAME:   .SET   $   
1E1E   EE 03 6E 1E            DW   vvCODE,vvLINK   
1E22                VVLINK:   .SET   $   
1E22   47 4C 49 54 45 52 41 4C DB   IMEDD+7,"LITERAL"   
03EE                          .ORG   vvCODE   
03EE   00                     NOP      
03EF   CD 0E 06               CALL   doLIST   
03F2   DC 03 1C 06 C0 03 5C 06 DW   COMPI,DOLIT,COMMA,EXIT   
03FA                             ;   $,"         ( -- )
03FA                             ;               Compile a literal string up to next " .
03FA                          ;*Macro unroll: hCOLON  3,'$,|',STRCQ
03FA                          ;*Macro unroll:  hCODE 3, "$,|", STRCQ
03FA                          ALIGN   2   
03FA                STRCQ:       
03FA   00                     NOP      
03FB   CD 0E 06               CALL   doLIST   
03FE   1C 06 22 00 58 09      DW   DOLIT,$22,WORDD   ;move string to code dictionary
0404   CE 0E 86 01 C6 0F      DW   COUNT,PLUS,ALGND   ;calculate aligned end of string
040A   22 11 4E 0E 5C 06      DW   CP,STORE,EXIT   ;adjust the code pointer
0410                             ;   RECURSE     ( -- )
0410                             ;               Make the current word available for compilation.
0410                          ;*Macro unroll: mCOLON  IMEDD+7,'RECURSE',RECUR
0410                          ;*Macro unroll:  mCODE IMEDD+7, "RECURSE", RECUR
0410                          ALIGN   2   
0410                RECUR:       
0410                VVCODE:   .SET   $   
0410                VVLEN:    .SET   (IMEDD+7 & 01FH) / CELLL   
1DD2                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1DD2                VVNAME:   .SET   $   
1DD2   10 04 22 1E            DW   vvCODE,vvLINK   
1DD6                VVLINK:   .SET   $   
1DD6   47 52 45 43 55 52 53 45 DB   IMEDD+7,"RECURSE"   
0410                          .ORG   vvCODE   
0410   00                     NOP      
0411   CD 0E 06               CALL   doLIST   
0414   32 11 58 0E 64 09 C0 03 5C 06 DW   LAST,AT,NAMET,COMMA,EXIT   
041E                             ;   ?UNIQUE     ( a -- a )
041E                             ;               Display a warning message if the word already exists.
041E                          ;*Macro unroll: mCOLON  7,'?UNIQUE',UNIQU
041E                          ;*Macro unroll:  mCODE 7, "?UNIQUE", UNIQU
041E                          ALIGN   2   
041E                UNIQU:       
041E                VVCODE:   .SET   $   
041E                VVLEN:    .SET   (7 & 01FH) / CELLL   
1DC6                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1DC6                VVNAME:   .SET   $   
1DC6   1E 04 D6 1D            DW   vvCODE,vvLINK   
1DCA                VVLINK:   .SET   $   
1DCA   07 3F 55 4E 49 51 55 45 DB   7,"?UNIQUE"   
041E                          .ORG   vvCODE   
041E   00                     NOP      
041F   CD 0E 06               CALL   doLIST   
0422   02 10 1E 0A            DW   DUPP,NAMEQ   ;?name exists
0426   32 0E 3A 04            DW   QBRAN,UNIQ1   ;redefinitions are OK
042A                          ;*Macro unroll:  mDSTR   DOTQP,' reDef '         ;but warn the user
042A   5E 0C                  DW   DOTQP   ;but warn the user
042C                VVLEN:    .SET   $   
042C   00 20 72 65 44 65 66 20 DB   0," reDef "   
0434                VVCODE:   .SET   $   
042C                          .ORG   vvLEN   
042C   07                     DB   vvCODE - vvLEN - 1   
0434                          .ORG   vvCODE   
0434   12 10 CE 0E 08 0C      DW   OVER,COUNT,TYPEE   ;just in case its not planned
043A                UNIQ1:       
043A   06 10 5C 06            DW   DROP,EXIT   
043E                             ;   $,n         ( na -- )
043E                             ;               Build a new dictionary name using the string at na.
043E                          ;*Macro unroll: mCOLON  3,'$,n',SNAME
043E                          ;*Macro unroll:  mCODE 3, "$,n", SNAME
043E                          ALIGN   2   
043E                SNAME:       
043E                VVCODE:   .SET   $   
043E                VVLEN:    .SET   (3 & 01FH) / CELLL   
1DBE                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1DBE                VVNAME:   .SET   $   
1DBE   3E 04 CA 1D            DW   vvCODE,vvLINK   
1DC2                VVLINK:   .SET   $   
1DC2   03 24 2C 6E            DB   3,"$,n"   
043E                          .ORG   vvCODE   
043E   00                     NOP      
043F   CD 0E 06               CALL   doLIST   
0442   02 10 68 0E            DW   DUPP,CAT   ;?null input
0446   32 0E 70 04            DW   QBRAN,PNAM1   
044A   1E 04                  DW   UNIQU   ;?redefinition
044C   02 10 32 11 4E 0E      DW   DUPP,LAST,STORE   ;save na for vocabulary link
0452   E0 0E C6 0F 0A 10      DW   HERE,ALGND,SWAP   ;align code address
0458   8E 03                  DW   CELLM   ;link address
045A   1A 11 58 0E 58 0E 12 10 4E 0E DW   CRRNT,AT,AT,OVER,STORE   
0464   8E 03 02 10 2A 11 4E 0E DW   CELLM,DUPP,NP,STORE   ;adjust name pointer
046C   4E 0E 5C 06            DW   STORE,EXIT   ;save code pointer
0470                PNAM1:       
0470                          ;*Macro unroll:  mDSTR   STRQP,' name'           ;null input
0470   56 0C                  DW   STRQP   ;null input
0472                VVLEN:    .SET   $   
0472   00 20 6E 61 6D 65      DB   0," name"   
0478                VVCODE:   .SET   $   
0472                          .ORG   vvLEN   
0472   05                     DB   vvCODE - vvLEN - 1   
0478                          .ORG   vvCODE   
0478   80 0A                  DW   THROW   
047A                             ;   $COMPILE    ( a -- )
047A                             ;               Compile next word to code dictionary as a token or literal.
047A                          ;*Macro unroll: hCOLON  8,'$COMPILE',SCOMP
047A                          ;*Macro unroll:  hCODE 8, "$COMPILE", SCOMP
047A                          ALIGN   2   
047A                SCOMP:       
047A   00                     NOP      
047B   CD 0E 06               CALL   doLIST   
047E   1E 0A 1A 10            DW   NAMEQ,QDUP   ;?defined
0482   32 0E 9A 04            DW   QBRAN,SCOM2   
0486   58 0E 1C 06 40 00 68 01 DW   AT,DOLIT,IMEDD,ANDD   ;?immediate
048E   32 0E 96 04            DW   QBRAN,SCOM1   
0492   2E 0E 5C 06            DW   EXECU,EXIT   ;its immediate, execute
0496                SCOM1:       
0496   C0 03 5C 06            DW   COMMA,EXIT   ;its not immediate, compile
049A                SCOM2:       
049A   FA 10 04 0F            DW   TNUMB,ATEXE   ;try to convert to number
049E   32 0E A6 04            DW   QBRAN,SCOM3   
04A2   EE 03 5C 06            DW   LITER,EXIT   ;compile number as integer
04A6   80 0A        SCOM3:    DW   THROW   ;error
04A8                             ;   OVERT       ( -- )
04A8                             ;               Link a new word into the current vocabulary.
04A8                          ;*Macro unroll: hCOLON  5,'OVERT',OVERT
04A8                          ;*Macro unroll:  hCODE 5, "OVERT", OVERT
04A8                          ALIGN   2   
04A8                OVERT:       
04A8   00                     NOP      
04A9   CD 0E 06               CALL   doLIST   
04AC   32 11 58 0E 1A 11 58 0E 4E 0E 5C 06 DW   LAST,AT,CRRNT,AT,STORE,EXIT   
04B8                             ;   ;           ( -- )
04B8                             ;               Terminate a colon definition.
04B8                          ;*Macro unroll: mCOLON  IMEDD+COMPO+1,';',SEMIS
04B8                          ;*Macro unroll:  mCODE IMEDD+COMPO+1, ";", SEMIS
04B8                          ALIGN   2   
04B8                SEMIS:       
04B8                VVCODE:   .SET   $   
04B8                VVLEN:    .SET   (IMEDD+COMPO+1 & 01FH) / CELLL   
1D58                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1D58                VVNAME:   .SET   $   
1D58   B8 04 C2 1D            DW   vvCODE,vvLINK   
1D5C                VVLINK:   .SET   $   
1D5C   61 3B                  DB   IMEDD+COMPO+1,";"   
04B8                          .ORG   vvCODE   
04B8   00                     NOP      
04B9   CD 0E 06               CALL   doLIST   
04BC   DC 03 5C 06 FA 0A A8 04 5C 06 DW   COMPI,EXIT,LBRAC,OVERT,EXIT   
04C6                             ;   ]           ( -- )
04C6                             ;               Start compiling the words in the input stream.
04C6                          ;*Macro unroll: mCOLON  1,']',RBRAC
04C6                          ;*Macro unroll:  mCODE 1, "]", RBRAC
04C6                          ALIGN   2   
04C6                RBRAC:       
04C6                VVCODE:   .SET   $   
04C6                VVLEN:    .SET   (1 & 01FH) / CELLL   
1D52                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1D52                VVNAME:   .SET   $   
1D52   C6 04 5C 1D            DW   vvCODE,vvLINK   
1D56                VVLINK:   .SET   $   
1D56   01 5D                  DB   1,"]"   
04C6                          .ORG   vvCODE   
04C6   00                     NOP      
04C7   CD 0E 06               CALL   doLIST   
04CA   1C 06 7A 04 F2 10 4E 0E 5C 06 DW   DOLIT,SCOMP,TEVAL,STORE,EXIT   
04D4                             ;   call,       ( ca -- )
04D4                             ;               Assemble a call instruction to ca.
04D4                          ;*Macro unroll: hCOLON  5,'call,',CALLC
04D4                          ;*Macro unroll:  hCODE 5, "call,", CALLC
04D4                          ALIGN   2   
04D4                CALLC:       
04D4   00                     NOP      
04D5   CD 0E 06               CALL   doLIST   
04D8   1C 06 00 CD C0 03      DW   DOLIT,CALLL,COMMA   ;Direct Threaded Code
04DE   C0 03 5C 06            DW   COMMA,EXIT   ;DTC 8086 relative call
04E2                             ;   :           ( -- ; <string> )
04E2                             ;               Start a new colon definition using next word as its name.
04E2                          ;*Macro unroll: mCOLON  1,':',COLON
04E2                          ;*Macro unroll:  mCODE 1, ":", COLON
04E2                          ALIGN   2   
04E2                COLON:       
04E2                VVCODE:   .SET   $   
04E2                VVLEN:    .SET   (1 & 01FH) / CELLL   
1D4C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1D4C                VVNAME:   .SET   $   
1D4C   E2 04 56 1D            DW   vvCODE,vvLINK   
1D50                VVLINK:   .SET   $   
1D50   01 3A                  DB   1,":"   
04E2                          .ORG   vvCODE   
04E2   00                     NOP      
04E3   CD 0E 06               CALL   doLIST   
04E6   3C 09 3E 04 1C 06 0E 06 DW   TOKEN,SNAME,DOLIT,DoLIST   
04EE   D4 04 C6 04 5C 06      DW   CALLC,RBRAC,EXIT   
04F4                             ;   IMMEDIATE   ( -- )
04F4                             ;               Make the last compiled word an immediate word.
04F4                          ;*Macro unroll: mCOLON  9,'IMMEDIATE',IMMED
04F4                          ;*Macro unroll:  mCODE 9, "IMMEDIATE", IMMED
04F4                          ALIGN   2   
04F4                IMMED:       
04F4                VVCODE:   .SET   $   
04F4                VVLEN:    .SET   (9 & 01FH) / CELLL   
1D3E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1D3E                VVNAME:   .SET   $   
1D3E   F4 04 50 1D            DW   vvCODE,vvLINK   
1D42                VVLINK:   .SET   $   
1D42   09 49 4D 4D 45 44 49 41 54 45 DB   9,"IMMEDIATE"   
04F4                          .ORG   vvCODE   
04F4   00                     NOP      
04F5   CD 0E 06               CALL   doLIST   
04F8   1C 06 40 00 32 11 58 0E 58 0E 72 01 DW   DOLIT,IMEDD,LAST,AT,AT,ORR   
0504   32 11 58 0E 4E 0E 5C 06 DW   LAST,AT,STORE,EXIT   
050C                             ;   USER        ( u -- ; <string> )
050C                             ;               Compile a new user variable.
050C                          ;*Macro unroll: mCOLON  4,'USER',USER
050C                          ;*Macro unroll:  mCODE 4, "USER", USER
050C                          ALIGN   2   
050C                USER:        
050C                VVCODE:   .SET   $   
050C                VVLEN:    .SET   (4 & 01FH) / CELLL   
1D34                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1D34                VVNAME:   .SET   $   
1D34   0C 05 42 1D            DW   vvCODE,vvLINK   
1D38                VVLINK:   .SET   $   
1D38   04 55 53 45 52         DB   4,"USER"   
050C                          .ORG   vvCODE   
050C   00                     NOP      
050D   CD 0E 06               CALL   doLIST   
0510   3C 09 3E 04 A8 04      DW   TOKEN,SNAME,OVERT   
0516   1C 06 0E 06 D4 04      DW   DOLIT,DoLIST,CALLC   
051C   DC 03 34 06 C0 03 5C 06 DW   COMPI,DOUSE,COMMA,EXIT   
0524                             ;   CREATE      ( -- ; <string> )
0524                             ;               Compile a new array entry without allocating code space.
0524                          ;*Macro unroll: mCOLON  6,'CREATE',CREAT
0524                          ;*Macro unroll:  mCODE 6, "CREATE", CREAT
0524                          ALIGN   2   
0524                CREAT:       
0524                VVCODE:   .SET   $   
0524                VVLEN:    .SET   (6 & 01FH) / CELLL   
1D28                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1D28                VVNAME:   .SET   $   
1D28   24 05 38 1D            DW   vvCODE,vvLINK   
1D2C                VVLINK:   .SET   $   
1D2C   06 43 52 45 41 54 45   DB   6,"CREATE"   
0524                          .ORG   vvCODE   
0524   00                     NOP      
0525   CD 0E 06               CALL   doLIST   
0528   3C 09 3E 04 A8 04      DW   TOKEN,SNAME,OVERT   
052E   1C 06 0E 06 D4 04      DW   DOLIT,DoLIST,CALLC   
0534   DC 03 24 06 5C 06      DW   COMPI,DOVAR,EXIT   
053A                             ;   VARIABLE    ( -- ; <string> )
053A                             ;               Compile a new variable initialized to 0.
053A                          ;*Macro unroll: mCOLON  8,'VARIABLE',VARIA
053A                          ;*Macro unroll:  mCODE 8, "VARIABLE", VARIA
053A                          ALIGN   2   
053A                VARIA:       
053A                VVCODE:   .SET   $   
053A                VVLEN:    .SET   (8 & 01FH) / CELLL   
1D1A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1D1A                VVNAME:   .SET   $   
1D1A   3A 05 2C 1D            DW   vvCODE,vvLINK   
1D1E                VVLINK:   .SET   $   
1D1E   08 56 41 52 49 41 42 4C 45 DB   8,"VARIABLE"   
053A                          .ORG   vvCODE   
053A   00                     NOP      
053B   CD 0E 06               CALL   doLIST   
053E   24 05 1C 06 00 00 C0 03 5C 06 DW   CREAT,DOLIT,0,COMMA,EXIT   
0548                             ;   FOR         ( -- a )
0548                             ;               Start a FOR-NEXT loop structure in a colon definition.
0548                          ;*Macro unroll: mCOLON  IMEDD+3,'FOR',FOR
0548                          ;*Macro unroll:  mCODE IMEDD+3, "FOR", FOR
0548                          ALIGN   2   
0548                FOR:         
0548                VVCODE:   .SET   $   
0548                VVLEN:    .SET   (IMEDD+3 & 01FH) / CELLL   
1CD2                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1CD2                VVNAME:   .SET   $   
1CD2   48 05 1E 1D            DW   vvCODE,vvLINK   
1CD6                VVLINK:   .SET   $   
1CD6   43 46 4F 52            DB   IMEDD+3,"FOR"   
0548                          .ORG   vvCODE   
0548   00                     NOP      
0549   CD 0E 06               CALL   doLIST   
054C   DC 03 E6 0F E0 0E 5C 06 DW   COMPI,TOR,HERE,EXIT   
0554                             ;   BEGIN       ( -- a )
0554                             ;               Start an infinite or indefinite loop structure.
0554                          ;*Macro unroll: mCOLON  IMEDD+5,'BEGIN',BEGIN
0554                          ;*Macro unroll:  mCODE IMEDD+5, "BEGIN", BEGIN
0554                          ALIGN   2   
0554                BEGIN:       
0554                VVCODE:   .SET   $   
0554                VVLEN:    .SET   (IMEDD+5 & 01FH) / CELLL   
1C88                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1C88                VVNAME:   .SET   $   
1C88   54 05 D6 1C            DW   vvCODE,vvLINK   
1C8C                VVLINK:   .SET   $   
1C8C   45 42 45 47 49 4E      DB   IMEDD+5,"BEGIN"   
0554                          .ORG   vvCODE   
0554   00                     NOP      
0555   CD 0E 06               CALL   doLIST   
0558   E0 0E 5C 06            DW   HERE,EXIT   
055C                             ;   NEXT        ( a -- )
055C                             ;               Terminate a FOR-NEXT loop structure.
055C                          ;*Macro unroll: mCOLON  IMEDD+4,'NEXT',NEXT
055C                          ;*Macro unroll:  mCODE IMEDD+4, "NEXT", NEXT
055C                          ALIGN   2   
055C                NEXT:        
055C                VVCODE:   .SET   $   
055C                VVLEN:    .SET   (IMEDD+4 & 01FH) / CELLL   
1C3E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1C3E                VVNAME:   .SET   $   
1C3E   5C 05 8C 1C            DW   vvCODE,vvLINK   
1C42                VVLINK:   .SET   $   
1C42   44 4E 45 58 54         DB   IMEDD+4,"NEXT"   
055C                          .ORG   vvCODE   
055C   00                     NOP      
055D   CD 0E 06               CALL   doLIST   
0560   DC 03 68 06 C0 03 5C 06 DW   COMPI,DONXT,COMMA,EXIT   
0568                             ;   UNTIL       ( a -- )
0568                             ;               Terminate a BEGIN-UNTIL indefinite loop structure.
0568                          ;*Macro unroll: mCOLON  IMEDD+5,'UNTIL',UNTIL
0568                          ;*Macro unroll:  mCODE IMEDD+5, "UNTIL", UNTIL
0568                          ALIGN   2   
0568                UNTIL:       
0568                VVCODE:   .SET   $   
0568                VVLEN:    .SET   (IMEDD+5 & 01FH) / CELLL   
1BF4                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1BF4                VVNAME:   .SET   $   
1BF4   68 05 42 1C            DW   vvCODE,vvLINK   
1BF8                VVLINK:   .SET   $   
1BF8   45 55 4E 54 49 4C      DB   IMEDD+5,"UNTIL"   
0568                          .ORG   vvCODE   
0568   00                     NOP      
0569   CD 0E 06               CALL   doLIST   
056C   DC 03 32 0E C0 03 5C 06 DW   COMPI,QBRAN,COMMA,EXIT   
0574                             ;   AGAIN       ( a -- )
0574                             ;               Terminate a BEGIN-AGAIN infinite loop structure.
0574                          ;*Macro unroll: mCOLON  IMEDD+5,'AGAIN',AGAIN
0574                          ;*Macro unroll:  mCODE IMEDD+5, "AGAIN", AGAIN
0574                          ALIGN   2   
0574                AGAIN:       
0574                VVCODE:   .SET   $   
0574                VVLEN:    .SET   (IMEDD+5 & 01FH) / CELLL   
1BAA                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1BAA                VVNAME:   .SET   $   
1BAA   74 05 F8 1B            DW   vvCODE,vvLINK   
1BAE                VVLINK:   .SET   $   
1BAE   45 41 47 41 49 4E      DB   IMEDD+5,"AGAIN"   
0574                          .ORG   vvCODE   
0574   00                     NOP      
0575   CD 0E 06               CALL   doLIST   
0578   DC 03 3E 0E C0 03 5C 06 DW   COMPI,BRAN,COMMA,EXIT   
0580                             ;   IF          ( -- A )
0580                             ;               Begin a conditional branch structure.
0580                          ;*Macro unroll: mCOLON  IMEDD+2,'IF',IFF
0580                          ;*Macro unroll:  mCODE IMEDD+2, "IF", IFF
0580                          ALIGN   2   
0580                IFF:         
0580                VVCODE:   .SET   $   
0580                VVLEN:    .SET   (IMEDD+2 & 01FH) / CELLL   
1B62                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1B62                VVNAME:   .SET   $   
1B62   80 05 AE 1B            DW   vvCODE,vvLINK   
1B66                VVLINK:   .SET   $   
1B66   42 49 46               DB   IMEDD+2,"IF"   
0580                          .ORG   vvCODE   
0580   00                     NOP      
0581   CD 0E 06               CALL   doLIST   
0584   DC 03 32 0E E0 0E      DW   COMPI,QBRAN,HERE   
058A   1C 06 00 00 C0 03 5C 06 DW   DOLIT,0,COMMA,EXIT   
0592                             ;   AHEAD       ( -- A )
0592                             ;               Compile a forward branch instruction.
0592                          ;*Macro unroll: mCOLON  IMEDD+5,'AHEAD',AHEAD
0592                          ;*Macro unroll:  mCODE IMEDD+5, "AHEAD", AHEAD
0592                          ALIGN   2   
0592                AHEAD:       
0592                VVCODE:   .SET   $   
0592                VVLEN:    .SET   (IMEDD+5 & 01FH) / CELLL   
1B18                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1B18                VVNAME:   .SET   $   
1B18   92 05 66 1B            DW   vvCODE,vvLINK   
1B1C                VVLINK:   .SET   $   
1B1C   45 41 48 45 41 44      DB   IMEDD+5,"AHEAD"   
0592                          .ORG   vvCODE   
0592   00                     NOP      
0593   CD 0E 06               CALL   doLIST   
0596   DC 03 3E 0E E0 0E 1C 06 00 00 C0 03 5C 06 DW   COMPI,BRAN,HERE,DOLIT,0,COMMA,EXIT   
05A4                             ;   REPEAT      ( A a -- )
05A4                             ;               Terminate a BEGIN-WHILE-REPEAT indefinite loop.
05A4                          ;*Macro unroll: mCOLON  IMEDD+6,'REPEAT',REPEA
05A4                          ;*Macro unroll:  mCODE IMEDD+6, "REPEAT", REPEA
05A4                          ALIGN   2   
05A4                REPEA:       
05A4                VVCODE:   .SET   $   
05A4                VVLEN:    .SET   (IMEDD+6 & 01FH) / CELLL   
1ACC                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1ACC                VVNAME:   .SET   $   
1ACC   A4 05 1C 1B            DW   vvCODE,vvLINK   
1AD0                VVLINK:   .SET   $   
1AD0   46 52 45 50 45 41 54   DB   IMEDD+6,"REPEAT"   
05A4                          .ORG   vvCODE   
05A4   00                     NOP      
05A5   CD 0E 06               CALL   doLIST   
05A8   74 05 E0 0E 0A 10 4E 0E 5C 06 DW   AGAIN,HERE,SWAP,STORE,EXIT   
05B2                             ;   THEN        ( A -- )
05B2                             ;               Terminate a conditional branch structure.
05B2                          ;*Macro unroll: mCOLON  IMEDD+4,'THEN',THENN
05B2                          ;*Macro unroll:  mCODE IMEDD+4, "THEN", THENN
05B2                          ALIGN   2   
05B2                THENN:       
05B2                VVCODE:   .SET   $   
05B2                VVLEN:    .SET   (IMEDD+4 & 01FH) / CELLL   
1A82                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1A82                VVNAME:   .SET   $   
1A82   B2 05 D0 1A            DW   vvCODE,vvLINK   
1A86                VVLINK:   .SET   $   
1A86   44 54 48 45 4E         DB   IMEDD+4,"THEN"   
05B2                          .ORG   vvCODE   
05B2   00                     NOP      
05B3   CD 0E 06               CALL   doLIST   
05B6   E0 0E 0A 10 4E 0E 5C 06 DW   HERE,SWAP,STORE,EXIT   
05BE                             ;   AFT         ( a -- a A )
05BE                             ;               Jump to THEN in a FOR-AFT-THEN-NEXT loop the 1st time through.
05BE                          ;*Macro unroll: mCOLON  IMEDD+3,'AFT',AFT
05BE                          ;*Macro unroll:  mCODE IMEDD+3, "AFT", AFT
05BE                          ALIGN   2   
05BE                AFT:         
05BE                VVCODE:   .SET   $   
05BE                VVLEN:    .SET   (IMEDD+3 & 01FH) / CELLL   
1A3A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1A3A                VVNAME:   .SET   $   
1A3A   BE 05 86 1A            DW   vvCODE,vvLINK   
1A3E                VVLINK:   .SET   $   
1A3E   43 41 46 54            DB   IMEDD+3,"AFT"   
05BE                          .ORG   vvCODE   
05BE   00                     NOP      
05BF   CD 0E 06               CALL   doLIST   
05C2   06 10 92 05 54 05 0A 10 5C 06 DW   DROP,AHEAD,BEGIN,SWAP,EXIT   
05CC                             ;   ELSE        ( A -- A )
05CC                             ;               Start the false clause in an IF-ELSE-THEN structure.
05CC                          ;*Macro unroll: mCOLON  IMEDD+4,'ELSE',ELSEE
05CC                          ;*Macro unroll:  mCODE IMEDD+4, "ELSE", ELSEE
05CC                          ALIGN   2   
05CC                ELSEE:       
05CC                VVCODE:   .SET   $   
05CC                VVLEN:    .SET   (IMEDD+4 & 01FH) / CELLL   
19F0                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
19F0                VVNAME:   .SET   $   
19F0   CC 05 3E 1A            DW   vvCODE,vvLINK   
19F4                VVLINK:   .SET   $   
19F4   44 45 4C 53 45         DB   IMEDD+4,"ELSE"   
05CC                          .ORG   vvCODE   
05CC   00                     NOP      
05CD   CD 0E 06               CALL   doLIST   
05D0   92 05 0A 10 B2 05 5C 06 DW   AHEAD,SWAP,THENN,EXIT   
05D8                             ;   WHILE       ( a -- A a )
05D8                             ;               Conditional branch out of a BEGIN-WHILE-REPEAT loop.
05D8                          ;*Macro unroll: mCOLON  IMEDD+5,'WHILE',WHILE
05D8                          ;*Macro unroll:  mCODE IMEDD+5, "WHILE", WHILE
05D8                          ALIGN   2   
05D8                WHILE:       
05D8                VVCODE:   .SET   $   
05D8                VVLEN:    .SET   (IMEDD+5 & 01FH) / CELLL   
19A6                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
19A6                VVNAME:   .SET   $   
19A6   D8 05 F4 19            DW   vvCODE,vvLINK   
19AA                VVLINK:   .SET   $   
19AA   45 57 48 49 4C 45      DB   IMEDD+5,"WHILE"   
05D8                          .ORG   vvCODE   
05D8   00                     NOP      
05D9   CD 0E 06               CALL   doLIST   
05DC   80 05 0A 10 5C 06      DW   IFF,SWAP,EXIT   
05E2                             ;   ABORT"      ( -- ; <string> )
05E2                             ;               Conditional abort with an error message.
05E2                          ;*Macro unroll: mCOLON  IMEDD+6,'ABORTQ',ABRTQ
05E2                          ;*Macro unroll:  mCODE IMEDD+6, "ABORTQ", ABRTQ
05E2                          ALIGN   2   
05E2                ABRTQ:       
05E2                VVCODE:   .SET   $   
05E2                VVLEN:    .SET   (IMEDD+6 & 01FH) / CELLL   
195A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
195A                VVNAME:   .SET   $   
195A   E2 05 AA 19            DW   vvCODE,vvLINK   
195E                VVLINK:   .SET   $   
195E   46 41 42 4F 52 54 51   DB   IMEDD+6,"ABORTQ"   
05E2                          .ORG   vvCODE   
05E2   00                     NOP      
05E3   CD 0E 06               CALL   doLIST   
05E6   DC 03 B4 0A FA 03 5C 06 DW   COMPI,ABORQ,STRCQ,EXIT   
05EE                             ;   $"          ( -- ; <string> )
05EE                             ;               Compile an inline string literal.
05EE                          ;*Macro unroll: hCOLON  IMEDD+2,'$|',STRQ
05EE                          ;*Macro unroll:  hCODE IMEDD+2, "$|", STRQ
05EE                          ALIGN   2   
05EE                STRQ:        
05EE   00                     NOP      
05EF   CD 0E 06               CALL   doLIST   
05F2   DC 03 56 0C FA 03 5C 06 DW   COMPI,STRQP,STRCQ,EXIT   
05FA                             ;   ."          ( -- ; <string> )
05FA                             ;               Compile an inline string literal to be typed out at run time.
05FA                          ;*Macro unroll: hCOLON  IMEDD+2,'.|',DOTQ
05FA                          ;*Macro unroll:  hCODE IMEDD+2, ".|", DOTQ
05FA                          ALIGN   2   
05FA                DOTQ:        
05FA   00                     NOP      
05FB   CD 0E 06               CALL   doLIST   
05FE   DC 03 5E 0C FA 03 5C 06 DW   COMPI,DOTQP,STRCQ,EXIT   
0606                             ; ;   UNLOOP	( -- ) ( R: loop-sys -- )	\ CORE
0606                             ; ;		Discard loop-control parameters for the current nesting level.
0606                             ; ;		An UNLOOP is required for each nesting level before the
0606                             ; ;		definition may be EXITed.
0606                             ; mCOLON	COMPO+6,"UNLOOP",UNLOOP
0606                             ; 	DW	RFrom,RFrom,RFrom,DDROP,ToR,EXIT
0606                             ;   doCONST	( -- x )
0606                             ;	Run-time routine of CONSTANT and VARIABLE.
0606                          ;*Macro unroll: hCODE	COMPO+7, 'doCONST', DoCONST
0606                          ALIGN   2   
0606                DOCONST:      
0606   E1                     POP   HL   ;10t
0607   C5                     PUSH   BC   ;11t
0608   4E                     LD   C,(HL)   ; 7t
0609   23                     INC   HL   ; 6t
060A   46                     LD   B,(HL)   ; 7t
060B                          ;*Macro unroll:  mNEXT
060B   EB                     EX   DE,HL   
060C                          ;*Macro unroll:  mNEXTHL                         ; 34t
060C   FD E9                  JP   (IY)   ; 34t
060E                             ;   doLIST	( -- ) ( R: -- nest-sys )
060E                             ;	Process colon list.
060E                          ;*Macro unroll: hCODE	COMPO+6, 'doLIST', DoLIST
060E                          ALIGN   2   
060E                DOLIST:      
060E   DD 2B                  DEC   IX   ;10t
0610   DD 72 00               LD   (IX+0),D   ;19t
0613   DD 2B                  DEC   IX   ;10t
0615   DD 73 00               LD   (IX+0),E   ;19t
0618   E1                     POP   HL   ;10t
0619                          ;*Macro unroll:  mNEXTHL							
0619   FD E9                  JP   (IY)   
061B                             ;   DOLIT	( -- x )
061B                             ;	Push an inline literal.
061B                          ;*Macro unroll: hCODE	COMPO+5, 'DOLIT', DOLIT
061B                          ALIGN   2   
061C                DOLIT:       
061C   C5                     PUSH   BC   ; 11t
061D   EB                     EX   DE,HL   ; 4t
061E   4E                     LD   C,(HL)   ; 7t
061F   23                     INC   HL   ; 6t
0620   46                     LD   B,(HL)   ; 7t
0621   23                     INC   HL   ; 6t
0622                          ;*Macro unroll:  mNEXTHL
0622   FD E9                  JP   (IY)   
0624                             ;   doVAR       ( -- a )
0624                             ;   Run time routine for VARIABLE and CREATE.
0624                          ;*Macro unroll: hCOLON  COMPO+5, 'doVAR', DoVAR
0624                          ;*Macro unroll:  hCODE COMPO+5, "doVAR", DoVAR
0624                          ALIGN   2   
0624                DOVAR:       
0624   00                     NOP      
0625   CD 0E 06               CALL   doLIST   
0628   F4 0F 5C 06            DW   RFROM,EXIT   
062C                             ;   UP          ( -- a )
062C                             ;   Pointer to the user area.
062C                          ;*Macro unroll: hCOLON  2, 'UP', UP
062C                          ;*Macro unroll:  hCODE 2, "UP", UP
062C                          ALIGN   2   
062C                UP:          
062C   00                     NOP      
062D   CD 0E 06               CALL   doLIST   
0630   24 06                  DW   DoVAR   
0632   00 24                  DW   UPP   
0634                             ;   doUSER      ( -- a )
0634                             ;   Run time routine for user variables.
0634                          ;*Macro unroll: hCOLON  COMPO+6,'doUSER',DOUSE
0634                          ;*Macro unroll:  hCODE COMPO+6, "doUSER", DOUSE
0634                          ALIGN   2   
0634                DOUSE:       
0634   00                     NOP      
0635   CD 0E 06               CALL   doLIST   
0638   F4 0F 58 0E 2C 06 58 0E 86 01 5C 06 DW   RFROM,AT,UP,AT,PLUS,EXIT   
0644                             ;   do$         ( -- a )
0644                             ;               Return the address of a compiled string.
0644                          ;*Macro unroll: mCOLON  COMPO+3,'do$',DOSTR
0644                          ;*Macro unroll:  mCODE COMPO+3, "do$", DOSTR
0644                          ALIGN   2   
0644                DOSTR:       
0644                VVCODE:   .SET   $   
0644                VVLEN:    .SET   (COMPO+3 & 01FH) / CELLL   
1932                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1932                VVNAME:   .SET   $   
1932   44 06 5E 19            DW   vvCODE,vvLINK   
1936                VVLINK:   .SET   $   
1936   23 64 6F 24            DB   COMPO+3,"do$"   
0644                          .ORG   vvCODE   
0644   00                     NOP      
0645   CD 0E 06               CALL   doLIST   
0648   F4 0F 70 0E F4 0F CE 0E 86 01 DW   RFROM,RAT,RFROM,COUNT,PLUS   
0652   C6 0F E6 0F 0A 10 E6 0F 5C 06 DW   ALGND,TOR,SWAP,TOR,EXIT   
065C                             ;   EXIT	( -- ) ( R: nest-sys -- )	\ CORE
065C                             ;	Return control to the calling definition.
065C                          ;*Macro unroll: mCODE	COMPO+4, 'EXIT', EXIT
065C                          ALIGN   2   
065C                EXIT:        
065C                VVCODE:   .SET   $   
065C                VVLEN:    .SET   (COMPO+4 & 01FH) / CELLL   
1908                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1908                VVNAME:   .SET   $   
1908   5C 06 36 19            DW   vvCODE,vvLINK   
190C                VVLINK:   .SET   $   
190C   24 45 58 49 54         DB   COMPO+4,"EXIT"   
065C                          .ORG   vvCODE   
065C   DD 6E 00               LD   L,(IX+0)   
065F   DD 23                  INC   IX   
0661   DD 66 00               LD   H,(IX+0)   
0664   DD 23                  INC   IX   
0666                          ;*Macro unroll:  mNEXTHL
0666   FD E9                  JP   (IY)   
0668                             ;   doDO	( n1|u1 n2|u2 -- ) ( R: -- n1 n2-n1-max_negative )
0668                             ;		Run-time funtion of DO.
0668                             ; 
0668                             ;   : doDO	>R max-negative + R> OVER - SWAP R> SWAP >R SWAP >R >R ;
0668                             ; hCOLON	COMPO+4,"doDO",DoDO
0668                             ; 	DW	ToR,DOLIT,MaxNegative,Plus,RFrom
0668                             ; 	DW	OVER,SUBB,SWAP,RFrom,SWAP,ToR,SWAP,ToR,ToR,EXIT
0668                             ; ;   doLOOP	( -- ) ( R: loop-sys1 -- | loop-sys2 )
0668                             ; ;		Run time routine for LOOP.
0668                             ; hCODE	COMPO+6,"doLOOP",DoLOOP
0668                             ; 	PUSH IX	        ; 15t
0668                             ; 	POP	HL	        ; 10t
0668                             ; 	INC	(HL)	    ; 11t
0668                             ; 	JR Z,DOLOOP2	; 12/7t a fast dec is ok, only
0668                             ; DOLOOP1: 	
0668                             ;     LD	A,(DE)	    ; 7t go back to the loop
0668                             ; 	LD	L,A	        ; 4t
0668                             ; 	INC	DE	        ; 6t
0668                             ; 	LD	A,(DE)	    ; 7t
0668                             ; 	LD	H,A	        ; 4t
0668                             ; 	mNEXTHL
0668                             ; DOLOOP2: 	
0668                             ;     INC	HL	        ; 6t
0668                             ; 	INC	(HL)	    ;11t
0668                             ; 	JP PO,DOLOOP1   ;10/7t ?loop end
0668                             ; 	EX	DE,HL	    ; 4t yes,continue past the BRAN offset
0668                             ; 	LD	DE,4	    ;10t clear return stack
0668                             ; 	ADD IX,DE	    ;15h
0668                             ; 	INC	HL	        ; 6t
0668                             ; 	INC	HL	        ; 6t
0668                             ; 	mNEXTHL
0668                             ; ;   do+LOOP	( n -- ) ( R: loop-sys1 -- | loop-sys2 )
0668                             ; ;		Run time routine for +LOOP.
0668                             ; hCODE	COMPO+7,"do+LOOP",DoPLOOP
0668                             ; 	POP	HL	        ;10t this will be the new TOS
0668                             ; 	PUSH	BC	    ;11t
0668                             ; 	LD	B,H	        ; 4t
0668                             ; 	LD	C,L	        ; 4t
0668                             ; 	EXX		        ; 4t
0668                             ; 	POP	BC	        ;10t old TOS = loop increment
0668                             ; 	LD L,(IX+0)     ;19t
0668                             ; 	LD H,(IX+1)     ;19t
0668                             ; 	OR	A	        ; 4t clear carry
0668                             ; 	ADC HL,BC	    ;15t
0668                             ; 	JP PE,DOPLP1	;10/7t ?loop end
0668                             ; 	LD (IX+0),L     ;19t   no, go back
0668                             ; 	LD (IX+1),H     ;19t
0668                             ; 	EXX		        ; 4t
0668                             ; 	LD	A,(DE)	    ; 7t go back to the loop
0668                             ; 	LD	L,A	        ; 4t
0668                             ; 	INC	DE	        ; 6t
0668                             ; 	LD	A,(DE)	    ; 7t
0668                             ; 	LD	H,A	        ; 4t
0668                             ; 	mNEXTHL
0668                             ; DOPLP1:		
0668                             ;     LD	BC,4	    ;10t clear return stack
0668                             ; 	ADD IX,BC	    ;15h
0668                             ; 	EXX		        ; 4t
0668                             ; 	INC	DE	        ; 6t yes,continue past the BRAN offset
0668                             ; 	INC	DE	        ; 6t
0668                             ; 	mNEXT
0668                             ;   next        ( -- )
0668                             ;               Run time code for the single index loop.
0668                             ;               : next ( -- ) \ hilevel model
0668                             ;                 r> r> dup if 1 - >r @ >r exit then drop cell+ >r ;
0668                          ;*Macro unroll: mCODE   COMPO+4,'next',DONXT
0668                          ALIGN   2   
0668                DONXT:       
0668                VVCODE:   .SET   $   
0668                VVLEN:    .SET   (COMPO+4 & 01FH) / CELLL   
18DE                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
18DE                VVNAME:   .SET   $   
18DE   68 06 0C 19            DW   vvCODE,vvLINK   
18E2                VVLINK:   .SET   $   
18E2   24 6E 65 78 74         DB   COMPO+4,"next"   
0668                          .ORG   vvCODE   
0668   DD E5                  PUSH   IX   
066A   E1                     POP   HL   ; load rp into HL
066B   7E                     LD   A,(HL)   ; a = low byte of r@
066C   B7                     OR   A   
066D   20 10                  JR   NZ,DECLOW   ; low > 0 goto dec low
066F   23                     INC   HL   
0670   7E                     LD   A,(HL)   ; a = high byte of r@
0671   B7                     OR   A   
0672   20 09                  JR   NZ,DECHILO   ; high > 0 goto dec hi dec lo
0674   23                     INC   HL   
0675   E5                     PUSH   HL   
0676   DD E1                  POP   IX   ; pop r@
0678   13                     INC   DE   ; IP = skip following word
0679   13                     INC   DE   
067A                          ;*Macro unroll:  mNEXT                               ; continue
067A   EB                     EX   DE,HL   ; continue
067B                          ;*Macro unroll:  mNEXTHL                         ; 34t
067B   FD E9                  JP   (IY)   ; 34t
067D                DECHILO:      
067D   35                     DEC   (HL)   ; dec high byte of r@
067E   2B                     DEC   HL   
067F                DECLOW:      
067F   35                     DEC   (HL)   ; dec low byte of r@
0680   6B                     LD   L,E   ; DE points to location of loop address
0681   62                     LD   H,D   
0682   5E                     LD   E,(HL)   ; DE points to loop address
0683   23                     INC   HL   
0684   56                     LD   D,(HL)   
0685                          ;*Macro unroll:  mNEXT                               ; continue to loop address
0685   EB                     EX   DE,HL   ; continue to loop address
0686                          ;*Macro unroll:  mNEXTHL                         ; 34t
0686   FD E9                  JP   (IY)   ; 34t
0688                             ;   DIGIT       ( u -- c )
0688                             ;               Convert digit u to a character.
0688                          ;*Macro unroll: hCOLON  5,'DIGIT',DIGIT
0688                          ;*Macro unroll:  hCODE 5, "DIGIT", DIGIT
0688                          ALIGN   2   
0688                DIGIT:       
0688   00                     NOP      
0689   CD 0E 06               CALL   doLIST   
068C   1C 06 09 00 12 10 0C 02 DW   DOLIT,9,OVER,LESS   
0694   1C 06 07 00 68 01 86 01 DW   DOLIT,7,ANDD,PLUS   
069C   1C 06 86 01 5C 06      DW   DOLIT,"0",PLUS,EXIT   
06A2                             ;   EXTRACT     ( n base -- n c )
06A2                             ;               Extract the least significant digit from n.
06A2                          ;*Macro unroll: hCOLON  7,'EXTRACT',EXTRC
06A2                          ;*Macro unroll:  hCODE 7, "EXTRACT", EXTRC
06A2                          ALIGN   2   
06A2                EXTRC:       
06A2   00                     NOP      
06A3   CD 0E 06               CALL   doLIST   
06A6   1C 06 00 00 0A 10 6A 02 DW   DOLIT,0,SWAP,UMMOD   
06AE   0A 10 88 06 5C 06      DW   SWAP,DIGIT,EXIT   
06B4                             ;   <#          ( -- )
06B4                             ;               Initiate the numeric output process.
06B4                          ;*Macro unroll: mCOLON  2,'<#',BDIGS
06B4                          ;*Macro unroll:  mCODE 2, "<#", BDIGS
06B4                          ALIGN   2   
06B4                BDIGS:       
06B4                VVCODE:   .SET   $   
06B4                VVLEN:    .SET   (2 & 01FH) / CELLL   
18D6                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
18D6                VVNAME:   .SET   $   
18D6   B4 06 E2 18            DW   vvCODE,vvLINK   
18DA                VVLINK:   .SET   $   
18DA   02 3C 23               DB   2,"<#"   
06B4                          .ORG   vvCODE   
06B4   00                     NOP      
06B5   CD 0E 06               CALL   doLIST   
06B8   EA 0E 02 11 4E 0E 5C 06 DW   PAD,HLD,STORE,EXIT   
06C0                             ;   HOLD        ( c -- )
06C0                             ;               Insert a character into the numeric output string.
06C0                          ;*Macro unroll: mCOLON  4,'HOLD',HOLD
06C0                          ;*Macro unroll:  mCODE 4, "HOLD", HOLD
06C0                          ALIGN   2   
06C0                HOLD:        
06C0                VVCODE:   .SET   $   
06C0                VVLEN:    .SET   (4 & 01FH) / CELLL   
18CC                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
18CC                VVNAME:   .SET   $   
18CC   C0 06 DA 18            DW   vvCODE,vvLINK   
18D0                VVLINK:   .SET   $   
18D0   04 48 4F 4C 44         DB   4,"HOLD"   
06C0                          .ORG   vvCODE   
06C0   00                     NOP      
06C1   CD 0E 06               CALL   doLIST   
06C4   02 11 58 0E 1C 06 01 00 C0 01 DW   HLD,AT,DOLIT,1,SUBB   
06CE   02 10 02 11 4E 0E 60 0E 5C 06 DW   DUPP,HLD,STORE,CSTOR,EXIT   
06D8                             ;   #           ( u -- u )
06D8                             ;               Extract one digit from u and append the digit to output string.
06D8                          ;*Macro unroll: mCOLON  1,'#',DIG
06D8                          ;*Macro unroll:  mCODE 1, "#", DIG
06D8                          ALIGN   2   
06D8                DIG:         
06D8                VVCODE:   .SET   $   
06D8                VVLEN:    .SET   (1 & 01FH) / CELLL   
18C6                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
18C6                VVNAME:   .SET   $   
18C6   D8 06 D0 18            DW   vvCODE,vvLINK   
18CA                VVLINK:   .SET   $   
18CA   01 23                  DB   1,"#"   
06D8                          .ORG   vvCODE   
06D8   00                     NOP      
06D9   CD 0E 06               CALL   doLIST   
06DC   C2 10 58 0E A2 06 C0 06 5C 06 DW   BASE,AT,EXTRC,HOLD,EXIT   
06E6                             ;   #S          ( u -- 0 )
06E6                             ;               Convert u until all digits are added to the output string.
06E6                          ;*Macro unroll: mCOLON  2,'#S',DIGS
06E6                          ;*Macro unroll:  mCODE 2, "#S", DIGS
06E6                          ALIGN   2   
06E6                DIGS:        
06E6                VVCODE:   .SET   $   
06E6                VVLEN:    .SET   (2 & 01FH) / CELLL   
18BE                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
18BE                VVNAME:   .SET   $   
18BE   E6 06 CA 18            DW   vvCODE,vvLINK   
18C2                VVLINK:   .SET   $   
18C2   02 23 53               DB   2,"#S"   
06E6                          .ORG   vvCODE   
06E6   00                     NOP      
06E7   CD 0E 06               CALL   doLIST   
06EA                DIGS1:       
06EA   D8 06 02 10            DW   DIG,DUPP   
06EE   32 0E F6 06            DW   QBRAN,DIGS2   
06F2   3E 0E EA 06            DW   BRAN,DIGS1   
06F6                DIGS2:       
06F6   5C 06                  DW   EXIT   
06F8                             ;   SIGN        ( n -- )
06F8                             ;               Add a minus sign to the numeric output string.
06F8                          ;*Macro unroll: mCOLON	4,'SIGN',SIGN
06F8                          ;*Macro unroll:  mCODE 4, "SIGN", SIGN
06F8                          ALIGN   2   
06F8                SIGN:        
06F8                VVCODE:   .SET   $   
06F8                VVLEN:    .SET   (4 & 01FH) / CELLL   
18B4                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
18B4                VVNAME:   .SET   $   
18B4   F8 06 C2 18            DW   vvCODE,vvLINK   
18B8                VVLINK:   .SET   $   
18B8   04 53 49 47 4E         DB   4,"SIGN"   
06F8                          .ORG   vvCODE   
06F8   00                     NOP      
06F9   CD 0E 06               CALL   doLIST   
06FC   60 01 32 0E 08 07      DW   ZLESS,QBRAN,SIGN1   
0702   1C 06 2D 00 C0 06      DW   DoLIT,MINUSS,HOLD   
0708                SIGN1:       
0708   5C 06                  DW   EXIT   
070A                             ;   #>          ( w -- b u )
070A                             ;               Prepare the output string to be TYPE'd.
070A                          ;*Macro unroll: mCOLON  2,'#>',EDIGS
070A                          ;*Macro unroll:  mCODE 2, "#>", EDIGS
070A                          ALIGN   2   
070A                EDIGS:       
070A                VVCODE:   .SET   $   
070A                VVLEN:    .SET   (2 & 01FH) / CELLL   
18AC                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
18AC                VVNAME:   .SET   $   
18AC   0A 07 B8 18            DW   vvCODE,vvLINK   
18B0                VVLINK:   .SET   $   
18B0   02 23 3E               DB   2,"#>"   
070A                          .ORG   vvCODE   
070A   00                     NOP      
070B   CD 0E 06               CALL   doLIST   
070E   06 10 02 11 58 0E      DW   DROP,HLD,AT   
0714   EA 0E 12 10 C0 01 5C 06 DW   PAD,OVER,SUBB,EXIT   
071C                             ;   str         ( n -- b u )
071C                             ;               Convert a signed integer to a numeric string.
071C                          ;*Macro unroll: hCOLON  3,'str',STR
071C                          ;*Macro unroll:  hCODE 3, "str", STR
071C                          ALIGN   2   
071C                STR:         
071C   00                     NOP      
071D   CD 0E 06               CALL   doLIST   
0720   02 10 E6 0F CA 01      DW   DUPP,TOR,ABSS   
0726   B4 06 E6 06 F4 0F      DW   BDIGS,DIGS,RFROM   
072C   F8 06 0A 07 5C 06      DW   SIGN,EDIGS,EXIT   
0732                             ;   HEX         ( -- )
0732                             ;               Use radix 16 as base for numeric conversions.
0732                          ;*Macro unroll: mCOLON  3,'HEX',HEX
0732                          ;*Macro unroll:  mCODE 3, "HEX", HEX
0732                          ALIGN   2   
0732                HEX:         
0732                VVCODE:   .SET   $   
0732                VVLEN:    .SET   (3 & 01FH) / CELLL   
18A4                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
18A4                VVNAME:   .SET   $   
18A4   32 07 B0 18            DW   vvCODE,vvLINK   
18A8                VVLINK:   .SET   $   
18A8   03 48 45 58            DB   3,"HEX"   
0732                          .ORG   vvCODE   
0732   00                     NOP      
0733   CD 0E 06               CALL   doLIST   
0736   1C 06 10 00 C2 10 4E 0E 5C 06 DW   DOLIT,16,BASE,STORE,EXIT   
0740                             ;   DECIMAL     ( -- )
0740                             ;               Use radix 10 as base for numeric conversions.
0740                          ;*Macro unroll: mCOLON  7,'DECIMAL',DECIMAL
0740                          ;*Macro unroll:  mCODE 7, "DECIMAL", DECIMAL
0740                          ALIGN   2   
0740                DECIMAL:      
0740                VVCODE:   .SET   $   
0740                VVLEN:    .SET   (7 & 01FH) / CELLL   
1898                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1898                VVNAME:   .SET   $   
1898   40 07 A8 18            DW   vvCODE,vvLINK   
189C                VVLINK:   .SET   $   
189C   07 44 45 43 49 4D 41 4C DB   7,"DECIMAL"   
0740                          .ORG   vvCODE   
0740   00                     NOP      
0741   CD 0E 06               CALL   doLIST   
0744   1C 06 10 00 C2 10 4E 0E 5C 06 DW   DOLIT,16,BASE,STORE,EXIT   
074E                             ;   BL          ( -- 32 )
074E                             ;               Return 32, the blank character.
074E                          ;*Macro unroll: mCOLON	2,'BL',BLANK
074E                          ;*Macro unroll:  mCODE 2, "BL", BLANK
074E                          ALIGN   2   
074E                BLANK:       
074E                VVCODE:   .SET   $   
074E                VVLEN:    .SET   (2 & 01FH) / CELLL   
1890                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1890                VVNAME:   .SET   $   
1890   4E 07 9C 18            DW   vvCODE,vvLINK   
1894                VVLINK:   .SET   $   
1894   02 42 4C               DB   2,"BL"   
074E                          .ORG   vvCODE   
074E   00                     NOP      
074F   CD 0E 06               CALL   doLIST   
0752   1C 06 20 00 5C 06      DW   DoLIT,SPACEE,EXIT   
0758                             ;   >CHAR       ( c -- c )
0758                             ;               Filter non-printing characters.
0758                          ;*Macro unroll: hCOLON  5,'>CHAR',TCHAR
0758                          ;*Macro unroll:  hCODE 5, ">CHAR", TCHAR
0758                          ALIGN   2   
0758                TCHAR:       
0758   00                     NOP      
0759   CD 0E 06               CALL   doLIST   
075C   1C 06 7F 00 68 01 02 10 DW   DoLIT,$7F,ANDD,DUPP   ;mask msb
0764   1C 06 7F 00            DW   DoLIT,127   
0768   1C 06 20 00 4C 02      DW   DoLIT,SPACEE,WITHI   ;check for printable
076E   32 0E 78 07            DW   QBRAN,TCHA1   
0772   06 10 1C 06 5F 00      DW   DROP,DoLIT,UNDERSC   ;replace non-printables
0778                TCHA1:       
0778   5C 06                  DW   EXIT   
077A                             ;   DIGIT?      ( c base -- u t )
077A                             ;               Convert a character to its numeric value. A flag indicates success.
077A                          ;*Macro unroll: hCOLON  6,'DIGIT?',DIGTQ
077A                          ;*Macro unroll:  hCODE 6, "DIGIT?", DIGTQ
077A                          ALIGN   2   
077A                DIGTQ:       
077A   00                     NOP      
077B   CD 0E 06               CALL   doLIST   
077E   E6 0F 1C 06 C0 01      DW   TOR,DOLIT,"0",SUBB   
0784   1C 06 09 00 12 10 0C 02 DW   DOLIT,9,OVER,LESS   
078C   32 0E A0 07            DW   QBRAN,DGTQ1   
0790   1C 06 07 00 C0 01      DW   DOLIT,7,SUBB   
0796   02 10 1C 06 0A 00 0C 02 72 01 DW   DUPP,DOLIT,10,LESS,ORR   
07A0                DGTQ1:       
07A0   02 10 F4 0F F0 01 5C 06 DW   DUPP,RFROM,ULESS,EXIT   
07A8                             ;   NUMBER?     ( a -- n T | a F )
07A8                             ;               Convert a number string to integer. Push a flag on tos.
07A8                          ;*Macro unroll: hCOLON  7,'NUMBER?',NUMBQ
07A8                          ;*Macro unroll:  hCODE 7, "NUMBER?", NUMBQ
07A8                          ALIGN   2   
07A8                NUMBQ:       
07A8   00                     NOP      
07A9   CD 0E 06               CALL   doLIST   
07AC   C2 10 58 0E E6 0F 1C 06 00 00 12 10 CE 0E DW   BASE,AT,TOR,DOLIT,0,OVER,COUNT   
07BA   12 10 68 0E 1C 06 DA 01 DW   OVER,CAT,DOLIT,"$",EQUAL   
07C2   32 0E D8 07            DW   QBRAN,NUMQ1   
07C6   32 07 0A 10 1C 06 01 00 86 01 DW   HEX,SWAP,DOLIT,1,PLUS   
07D0   0A 10 1C 06 01 00 C0 01 DW   SWAP,DOLIT,1,SUBB   
07D8                NUMQ1:       
07D8   12 10 68 0E 1C 06 DA 01 E6 0F DW   OVER,CAT,DOLIT,"-",EQUAL,TOR   
07E2   0A 10 70 0E C0 01 0A 10 70 0E 86 01 1A 10 DW   SWAP,RAT,SUBB,SWAP,RAT,PLUS,QDUP   
07F0   32 0E 42 08            DW   QBRAN,NUMQ6   
07F4   1C 06 01 00 C0 01 E6 0F DW   DOLIT,1,SUBB,TOR   
07FC                NUMQ2:       
07FC   02 10 E6 0F 68 0E C2 10 58 0E 7A 07 DW   DUPP,TOR,CAT,BASE,AT,DIGTQ   
0808   32 0E 34 08            DW   QBRAN,NUMQ4   
080C   0A 10 C2 10 58 0E 40 03 86 01 F4 0F DW   SWAP,BASE,AT,STAR,PLUS,RFROM   
0818   1C 06 01 00 86 01      DW   DOLIT,1,PLUS   
081E   68 06 FC 07            DW   DONXT,NUMQ2   
0822   70 0E 0A 10 06 10      DW   RAT,SWAP,DROP   
0828   32 0E 2E 08            DW   QBRAN,NUMQ3   
082C   9C 01                  DW   NEGAT   
082E                NUMQ3:       
082E   0A 10                  DW   SWAP   
0830   3E 0E 40 08            DW   BRAN,NUMQ5   
0834                NUMQ4:       
0834   F4 0F F4 0F 36 10 36 10 1C 06 00 00 DW   RFROM,RFROM,DDROP,DDROP,DOLIT,0   
0840                NUMQ5:       
0840   02 10                  DW   DUPP   
0842                NUMQ6:       
0842   F4 0F 36 10            DW   RFROM,DDROP   
0846   F4 0F C2 10 4E 0E 5C 06 DW   RFROM,BASE,STORE,EXIT   
084E                             ;   parse       ( b u c -- b u delta ; <string> )
084E                             ;               Scan string delimited by c. Return found string and its offset.
084E                          ;*Macro unroll: hCOLON  5,'parse',PARS
084E                          ;*Macro unroll:  hCODE 5, "parse", PARS
084E                          ALIGN   2   
084E                PARS:        
084E   00                     NOP      
084F   CD 0E 06               CALL   doLIST   
0852   CA 10 4E 0E 12 10 E6 0F 02 10 DW   TEMP,STORE,OVER,TOR,DUPP   
085C   32 0E EA 08            DW   QBRAN,PARS8   
0860   1C 06 01 00 C0 01 CA 10 58 0E 4E 07 DA 01 DW   DOLIT,1,SUBB,TEMP,AT,BLANK,EQUAL   
086E   32 0E 9C 08            DW   QBRAN,PARS3   
0872   E6 0F                  DW   TOR   
0874                PARS1:       
0874   4E 07 12 10 68 0E      DW   BLANK,OVER,CAT   ;skip leading blanks ONLY
087A   C0 01 60 01 90 01      DW   SUBB,ZLESS,INVER   
0880   32 0E 9A 08            DW   QBRAN,PARS2   
0884   1C 06 01 00 86 01      DW   DOLIT,1,PLUS   
088A   68 06 74 08            DW   DONXT,PARS1   
088E   F4 0F 06 10 1C 06 00 00 02 10 5C 06 DW   RFROM,DROP,DOLIT,0,DUPP,EXIT   
089A                PARS2:       
089A   F4 0F                  DW   RFROM   
089C                PARS3:       
089C   12 10 0A 10            DW   OVER,SWAP   
08A0   E6 0F                  DW   TOR   
08A2                PARS4:       
08A2   CA 10 58 0E 12 10 68 0E C0 01 DW   TEMP,AT,OVER,CAT,SUBB   ;scan for delimiter
08AC   CA 10 58 0E 4E 07 DA 01 DW   TEMP,AT,BLANK,EQUAL   
08B4   32 0E BA 08            DW   QBRAN,PARS5   
08B8   60 01                  DW   ZLESS   
08BA                PARS5:       
08BA   32 0E D0 08            DW   QBRAN,PARS6   
08BE   1C 06 01 00 86 01      DW   DOLIT,1,PLUS   
08C4   68 06 A2 08            DW   DONXT,PARS4   
08C8   02 10 E6 0F            DW   DUPP,TOR   
08CC   3E 0E DE 08            DW   BRAN,PARS7   
08D0                PARS6:       
08D0   F4 0F 06 10 02 10      DW   RFROM,DROP,DUPP   
08D6   1C 06 01 00 86 01 E6 0F DW   DOLIT,1,PLUS,TOR   
08DE                PARS7:       
08DE   12 10 C0 01            DW   OVER,SUBB   
08E2   F4 0F F4 0F C0 01 5C 06 DW   RFROM,RFROM,SUBB,EXIT   
08EA                PARS8:       
08EA   12 10 F4 0F C0 01 5C 06 DW   OVER,RFROM,SUBB,EXIT   
08F2                             ;   PARSE       ( c -- b u ; <string> )
08F2                             ;               Scan input stream and return counted string delimited by c.
08F2                          ;*Macro unroll: mCOLON  5,'PARSE',PARSE
08F2                          ;*Macro unroll:  mCODE 5, "PARSE", PARSE
08F2                          ALIGN   2   
08F2                PARSE:       
08F2                VVCODE:   .SET   $   
08F2                VVLEN:    .SET   (5 & 01FH) / CELLL   
1886                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1886                VVNAME:   .SET   $   
1886   F2 08 94 18            DW   vvCODE,vvLINK   
188A                VVLINK:   .SET   $   
188A   05 50 41 52 53 45      DB   5,"PARSE"   
08F2                          .ORG   vvCODE   
08F2   00                     NOP      
08F3   CD 0E 06               CALL   doLIST   
08F6   E6 0F F8 0E DA 10 58 0E 86 01 DW   TOR,TIB,INN,AT,PLUS   ;current input buffer pointer
0900   E2 10 58 0E DA 10 58 0E C0 01 DW   NTIB,AT,INN,AT,SUBB   ;remaining count
090A   F4 0F 4E 08 DA 10 9C 0E 5C 06 DW   RFROM,PARS,INN,PSTOR,EXIT   
0914                             ;   (           ( -- )
0914                             ;               Ignore following string up to next ) . A comment.
0914                          ;*Macro unroll: mCOLON  IMEDD+1,'(',PAREN
0914                          ;*Macro unroll:  mCODE IMEDD+1, "(", PAREN
0914                          ALIGN   2   
0914                PAREN:       
0914                VVCODE:   .SET   $   
0914                VVLEN:    .SET   (IMEDD+1 & 01FH) / CELLL   
1840                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1840                VVNAME:   .SET   $   
1840   14 09 8A 18            DW   vvCODE,vvLINK   
1844                VVLINK:   .SET   $   
1844   41 28                  DB   IMEDD+1,"("   
0914                          .ORG   vvCODE   
0914   00                     NOP      
0915   CD 0E 06               CALL   doLIST   
0918   1C 06 F2 08 36 10 5C 06 DW   DOLIT,")",PARSE,DDROP,EXIT   
0920                             ;   \           ( -- )
0920                             ;               Ignore following text till the end of line.
0920                          ;*Macro unroll: mCOLON  IMEDD+1, $5C, BKSLA
0920                          ;*Macro unroll:  mCODE IMEDD+1, $5C, BKSLA
0920                          ALIGN   2   
0920                BKSLA:       
0920                VVCODE:   .SET   $   
0920                VVLEN:    .SET   (IMEDD+1 & 01FH) / CELLL   
17FA                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
17FA                VVNAME:   .SET   $   
17FA   20 09 44 18            DW   vvCODE,vvLINK   
17FE                VVLINK:   .SET   $   
17FE   41 5C                  DB   IMEDD+1,$5C   
0920                          .ORG   vvCODE   
0920   00                     NOP      
0921   CD 0E 06               CALL   doLIST   
0924   E2 10 58 0E DA 10 4E 0E 5C 06 DW   NTIB,AT,INN,STORE,EXIT   
092E                             ;   CHAR        ( -- c )
092E                             ;               Parse next word and return its first character.
092E                          ;*Macro unroll: mCOLON  4,'CHAR',CHAR
092E                          ;*Macro unroll:  mCODE 4, "CHAR", CHAR
092E                          ALIGN   2   
092E                CHAR:        
092E                VVCODE:   .SET   $   
092E                VVLEN:    .SET   (4 & 01FH) / CELLL   
17F0                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
17F0                VVNAME:   .SET   $   
17F0   2E 09 FE 17            DW   vvCODE,vvLINK   
17F4                VVLINK:   .SET   $   
17F4   04 43 48 41 52         DB   4,"CHAR"   
092E                          .ORG   vvCODE   
092E   00                     NOP      
092F   CD 0E 06               CALL   doLIST   
0932   4E 07 F2 08 06 10 68 0E 5C 06 DW   BLANK,PARSE,DROP,CAT,EXIT   
093C                             ;   TOKEN       ( -- a ; <string> )
093C                             ;               Parse a word from input stream and copy it to name dictionary.
093C                          ;*Macro unroll: hCOLON  5,'TOKEN',TOKEN
093C                          ;*Macro unroll:  hCODE 5, "TOKEN", TOKEN
093C                          ALIGN   2   
093C                TOKEN:       
093C   00                     NOP      
093D   CD 0E 06               CALL   doLIST   
0940   4E 07 F2 08 1C 06 1F 00 38 02 DW   BLANK,PARSE,DOLIT,31,MIN   
094A   2A 11 58 0E 12 10 C0 01 8E 03 DW   NP,AT,OVER,SUBB,CELLM   
0954   8C 0F 5C 06            DW   PACKS,EXIT   
0958                             ;   WORD        ( c -- a ; <string> )
0958                             ;               Parse a word from input stream and copy it to code dictionary.
0958                          ;*Macro unroll: mCOLON  4,'WORD',WORDD
0958                          ;*Macro unroll:  mCODE 4, "WORD", WORDD
0958                          ALIGN   2   
0958                WORDD:       
0958                VVCODE:   .SET   $   
0958                VVLEN:    .SET   (4 & 01FH) / CELLL   
17E6                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
17E6                VVNAME:   .SET   $   
17E6   58 09 F4 17            DW   vvCODE,vvLINK   
17EA                VVLINK:   .SET   $   
17EA   04 57 4F 52 44         DB   4,"WORD"   
0958                          .ORG   vvCODE   
0958   00                     NOP      
0959   CD 0E 06               CALL   doLIST   
095C   F2 08 E0 0E 8C 0F 5C 06 DW   PARSE,HERE,PACKS,EXIT   
0964                             ;   NAME>       ( na -- ca )
0964                             ;               Return a code address given a name address.
0964                          ;*Macro unroll: hCOLON  5,'NAME>',NAMET
0964                          ;*Macro unroll:  hCODE 5, "NAME>", NAMET
0964                          ALIGN   2   
0964                NAMET:       
0964   00                     NOP      
0965   CD 0E 06               CALL   doLIST   
0968   8E 03 8E 03 58 0E 5C 06 DW   CELLM,CELLM,AT,EXIT   
0970                             ;   SAME?       ( a a u -- a a f \ -0+ )
0970                             ;               Compare u cells in two strings. Return 0 if identical.
0970                          ;*Macro unroll: hCOLON  5,'SAME?',SAMEQ
0970                          ;*Macro unroll:  hCODE 5, "SAME?", SAMEQ
0970                          ALIGN   2   
0970                SAMEQ:       
0970   00                     NOP      
0971   CD 0E 06               CALL   doLIST   
0974   E6 0F                  DW   TOR   
0976   3E 0E 9C 09            DW   BRAN,SAME2   
097A   12 10 70 0E 9A 03 86 01 58 0E SAME1:   DW   OVER,RAT,CELLS,PLUS,AT   
0984   12 10 70 0E 9A 03 86 01 58 0E DW   OVER,RAT,CELLS,PLUS,AT   
098E   C0 01 1A 10            DW   SUBB,QDUP   
0992   32 0E 9C 09            DW   QBRAN,SAME2   
0996   F4 0F 06 10 5C 06      DW   RFROM,DROP,EXIT   ;strings not equal
099C   68 06 7A 09  SAME2:    DW   DONXT,SAME1   
09A0   1C 06 00 00 5C 06      DW   DOLIT,0,EXIT   ;strings equal
09A6                             ;   find        ( a va -- ca na | a F )
09A6                             ;               Search a vocabulary for a string. Return ca and na if succeeded.
09A6                          ;*Macro unroll: mCOLON  4,'find',FIND
09A6                          ;*Macro unroll:  mCODE 4, "find", FIND
09A6                          ALIGN   2   
09A6                FIND:        
09A6                VVCODE:   .SET   $   
09A6                VVLEN:    .SET   (4 & 01FH) / CELLL   
17DC                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
17DC                VVNAME:   .SET   $   
17DC   A6 09 EA 17            DW   vvCODE,vvLINK   
17E0                VVLINK:   .SET   $   
17E0   04 66 69 6E 64         DB   4,"find"   
09A6                          .ORG   vvCODE   
09A6   00                     NOP      
09A7   CD 0E 06               CALL   doLIST   
09AA   0A 10 02 10 68 0E      DW   SWAP,DUPP,CAT   
09B0   1C 06 02 00 18 03 CA 10 4E 0E DW   DOLIT,CELLL,SLASH,TEMP,STORE   
09BA   02 10 58 0E E6 0F 82 03 0A 10 DW   DUPP,AT,TOR,CELLP,SWAP   
09C4   58 0E 02 10  FIND1:    DW   AT,DUPP   
09C8   32 0E F4 09            DW   QBRAN,FIND6   
09CC   02 10 58 0E 1C 06 1F 00 68 01 70 0E 7C 01 DW   DUPP,AT,DOLIT,MASKK,ANDD,RAT,XORR   
09DA   32 0E E8 09            DW   QBRAN,FIND2   
09DE   82 03 1C 06 FF FF      DW   CELLP,DOLIT,-1   ;true flag
09E4   3E 0E F0 09            DW   BRAN,FIND3   
09E8   82 03 CA 10 58 0E 70 09 FIND2:   DW   CELLP,TEMP,AT,SAMEQ   
09F0   3E 0E 00 0A  FIND3:    DW   BRAN,FIND4   
09F4   F4 0F 06 10  FIND6:    DW   RFROM,DROP   
09F8   0A 10 8E 03 0A 10 5C 06 DW   SWAP,CELLM,SWAP,EXIT   
0A00   32 0E 0C 0A  FIND4:    DW   QBRAN,FIND5   
0A04   8E 03 8E 03            DW   CELLM,CELLM   
0A08   3E 0E C4 09            DW   BRAN,FIND1   
0A0C   F4 0F 06 10 0A 10 06 10 FIND5:   DW   RFROM,DROP,SWAP,DROP   
0A14   8E 03                  DW   CELLM   
0A16   02 10 64 09 0A 10 5C 06 DW   DUPP,NAMET,SWAP,EXIT   
0A1E                             ;   NAME?       ( a -- ca na | a F )
0A1E                             ;               Search all context vocabularies for a string.
0A1E                          ;*Macro unroll: hCOLON  5,'NAME?',NAMEQ
0A1E                          ;*Macro unroll:  hCODE 5, "NAME?", NAMEQ
0A1E                          ALIGN   2   
0A1E                NAMEQ:       
0A1E   00                     NOP      
0A1F   CD 0E 06               CALL   doLIST   
0A22   12 11 02 10 BE 0E 7C 01 DW   CNTXT,DUPP,DAT,XORR   ;?context=also
0A2A   32 0E 30 0A            DW   QBRAN,NAMQ1   
0A2E   8E 03                  DW   CELLM   ;no, start with context
0A30   E6 0F        NAMQ1:    DW   TOR   
0A32   F4 0F 82 03 02 10 E6 0F NAMQ2:   DW   RFROM,CELLP,DUPP,TOR   ;next in search order
0A3A   58 0E 1A 10            DW   AT,QDUP   
0A3E   32 0E 50 0A            DW   QBRAN,NAMQ3   
0A42   A6 09 1A 10            DW   FIND,QDUP   ;search vocabulary
0A46   32 0E 32 0A            DW   QBRAN,NAMQ2   
0A4A   F4 0F 06 10 5C 06      DW   RFROM,DROP,EXIT   ;found name
0A50   F4 0F 06 10  NAMQ3:    DW   RFROM,DROP   ;name not found
0A54   1C 06 00 00 5C 06      DW   DOLIT,0,EXIT   ;false flag
0A5A                             ;   CATCH       ( ca -- 0 | err# )
0A5A                             ;               Execute word at ca and set up an error frame for it.
0A5A                          ;*Macro unroll: mCOLON  5,'CATCH',CATCH
0A5A                          ;*Macro unroll:  mCODE 5, "CATCH", CATCH
0A5A                          ALIGN   2   
0A5A                CATCH:       
0A5A                VVCODE:   .SET   $   
0A5A                VVLEN:    .SET   (5 & 01FH) / CELLL   
17D2                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
17D2                VVNAME:   .SET   $   
17D2   5A 0A E0 17            DW   vvCODE,vvLINK   
17D6                VVLINK:   .SET   $   
17D6   05 43 41 54 43 48      DB   5,"CATCH"   
0A5A                          .ORG   vvCODE   
0A5A   00                     NOP      
0A5B   CD 0E 06               CALL   doLIST   
0A5E   8A 0E E6 0F 0A 11 58 0E E6 0F DW   SPAT,TOR,HANDL,AT,TOR   ;save error frame
0A68   7A 0E 0A 11 4E 0E 2E 0E DW   RPAT,HANDL,STORE,EXECU   ;execute
0A70   F4 0F 0A 11 4E 0E      DW   RFROM,HANDL,STORE   ;reSTORE error frame
0A76   F4 0F 06 10 1C 06 00 00 5C 06 DW   RFROM,DROP,DOLIT,0,EXIT   ;no error
0A80                             ;   THROW       ( err# -- err# )
0A80                             ;               Reset system to current local error frame an update error flag.
0A80                          ;*Macro unroll: mCOLON  5,'THROW',THROW
0A80                          ;*Macro unroll:  mCODE 5, "THROW", THROW
0A80                          ALIGN   2   
0A80                THROW:       
0A80                VVCODE:   .SET   $   
0A80                VVLEN:    .SET   (5 & 01FH) / CELLL   
17C8                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
17C8                VVNAME:   .SET   $   
17C8   80 0A D6 17            DW   vvCODE,vvLINK   
17CC                VVLINK:   .SET   $   
17CC   05 54 48 52 4F 57      DB   5,"THROW"   
0A80                          .ORG   vvCODE   
0A80   00                     NOP      
0A81   CD 0E 06               CALL   doLIST   
0A84   0A 11 58 0E 82 0E      DW   HANDL,AT,RPSTO   ;reSTORE return stack
0A8A   F4 0F 0A 11 4E 0E      DW   RFROM,HANDL,STORE   ;reSTORE handler frame
0A90   F4 0F 0A 10 E6 0F 94 0E DW   RFROM,SWAP,TOR,SPSTO   ;reSTORE data stack
0A98   06 10 F4 0F 5C 06      DW   DROP,RFROM,EXIT   
0A9E                             ;   NULL$       ( -- a )
0A9E                             ;               Return address of a null string with zero count.
0A9E                          ;*Macro unroll: hCOLON  5,'NULL$',NULLS
0A9E                          ;*Macro unroll:  hCODE 5, "NULL$", NULLS
0A9E                          ALIGN   2   
0A9E                NULLS:       
0A9E   00                     NOP      
0A9F   CD 0E 06               CALL   doLIST   
0AA2   24 06                  DW   DOVAR   ;emulate CREATE
0AA4   00 00                  DW   0   
0AA6   63 6F 79 6F 74 65      DB   99,111,121,111,116,101   
0AAC                          ALIGN   2   
0AAC                             ;   ABORT       ( -- )
0AAC                             ;               Reset data stack and jump to QUIT.
0AAC                          ;*Macro unroll: mCOLON  5,'ABORT',ABORT
0AAC                          ;*Macro unroll:  mCODE 5, "ABORT", ABORT
0AAC                          ALIGN   2   
0AAC                ABORT:       
0AAC                VVCODE:   .SET   $   
0AAC                VVLEN:    .SET   (5 & 01FH) / CELLL   
17BE                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
17BE                VVNAME:   .SET   $   
17BE   AC 0A CC 17            DW   vvCODE,vvLINK   
17C2                VVLINK:   .SET   $   
17C2   05 41 42 4F 52 54      DB   5,"ABORT"   
0AAC                          .ORG   vvCODE   
0AAC   00                     NOP      
0AAD   CD 0E 06               CALL   doLIST   
0AB0   9E 0A 80 0A            DW   NULLS,THROW   
0AB4                             ;   abort"      ( f -- )
0AB4                             ;               Run time routine of ABORT" . Abort with a message.
0AB4                          ;*Macro unroll: mCOLON  COMPO+6,'abort|',ABORQ
0AB4                          ;*Macro unroll:  mCODE COMPO+6, "abort|", ABORQ
0AB4                          ALIGN   2   
0AB4                ABORQ:       
0AB4                VVCODE:   .SET   $   
0AB4                VVLEN:    .SET   (COMPO+6 & 01FH) / CELLL   
1792                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1792                VVNAME:   .SET   $   
1792   B4 0A C2 17            DW   vvCODE,vvLINK   
1796                VVLINK:   .SET   $   
1796   26 61 62 6F 72 74 7C   DB   COMPO+6,"abort|"   
0AB4                          .ORG   vvCODE   
0AB4   00                     NOP      
0AB5   CD 0E 06               CALL   doLIST   
0AB8   32 0E C0 0A            DW   QBRAN,ABOR1   ;text flag
0ABC   44 06 80 0A            DW   DOSTR,THROW   ;pass error string
0AC0                ABOR1:       
0AC0   44 06 06 10 5C 06      DW   DOSTR,DROP,EXIT   ;drop error
0AC6                             ;   $INTERPRET  ( a -- )
0AC6                             ;               Interpret a word. If failed, try to convert it to an integer.
0AC6                          ;*Macro unroll: hCOLON  10,'$INTERPRET',INTER
0AC6                          ;*Macro unroll:  hCODE 10, "$INTERPRET", INTER
0AC6                          ALIGN   2   
0AC6                INTER:       
0AC6   00                     NOP      
0AC7   CD 0E 06               CALL   doLIST   
0ACA   1E 0A 1A 10            DW   NAMEQ,QDUP   ;?defined
0ACE   32 0E EE 0A            DW   QBRAN,INTE1   
0AD2   58 0E 1C 06 20 00 68 01 DW   AT,DOLIT,COMPO,ANDD   ;?compile only lexicon bits
0ADA                          ;*Macro unroll:  mDSTR   ABORQ,' compile only'
0ADA   B4 0A                  DW   ABORQ   
0ADC                VVLEN:    .SET   $   
0ADC   00 20 63 6F 6D 70 69 6C 65 20 6F 6E 6C 79 DB   0," compile only"   
0AEA                VVCODE:   .SET   $   
0ADC                          .ORG   vvLEN   
0ADC   0D                     DB   vvCODE - vvLEN - 1   
0AEA                          .ORG   vvCODE   
0AEA   2E 0E 5C 06            DW   EXECU,EXIT   ;execute defined word
0AEE                INTE1:       
0AEE   FA 10 04 0F            DW   TNUMB,ATEXE   ;convert a number
0AF2   32 0E F8 0A            DW   QBRAN,INTE2   
0AF6   5C 06                  DW   EXIT   
0AF8                INTE2:       
0AF8   80 0A                  DW   THROW   ;error
0AFA                             ;   [           ( -- )
0AFA                             ;               Start the text interpreter.
0AFA                          ;*Macro unroll: mCOLON  IMEDD+1,'[',LBRAC
0AFA                          ;*Macro unroll:  mCODE IMEDD+1, "[", LBRAC
0AFA                          ALIGN   2   
0AFA                LBRAC:       
0AFA                VVCODE:   .SET   $   
0AFA                VVLEN:    .SET   (IMEDD+1 & 01FH) / CELLL   
174C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
174C                VVNAME:   .SET   $   
174C   FA 0A 96 17            DW   vvCODE,vvLINK   
1750                VVLINK:   .SET   $   
1750   41 5B                  DB   IMEDD+1,"["   
0AFA                          .ORG   vvCODE   
0AFA   00                     NOP      
0AFB   CD 0E 06               CALL   doLIST   
0AFE   1C 06 C6 0A F2 10 4E 0E 5C 06 DW   DOLIT,INTER,TEVAL,STORE,EXIT   
0B08                             ;   .OK         ( -- )
0B08                             ;               Display "ok" only while interpreting.
0B08                          ;*Macro unroll: mCOLON  3,'.OK',DOTOK
0B08                          ;*Macro unroll:  mCODE 3, ".OK", DOTOK
0B08                          ALIGN   2   
0B08                DOTOK:       
0B08                VVCODE:   .SET   $   
0B08                VVLEN:    .SET   (3 & 01FH) / CELLL   
1744                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1744                VVNAME:   .SET   $   
1744   08 0B 50 17            DW   vvCODE,vvLINK   
1748                VVLINK:   .SET   $   
1748   03 2E 4F 4B            DB   3,".OK"   
0B08                          .ORG   vvCODE   
0B08   00                     NOP      
0B09   CD 0E 06               CALL   doLIST   
0B0C   1C 06 C6 0A F2 10 58 0E DA 01 DW   DOLIT,INTER,TEVAL,AT,EQUAL   
0B16   32 0E 20 0B            DW   QBRAN,DOTO1   
0B1A                          ;*Macro unroll:  mDSTR      DOTQP,' ok'
0B1A   5E 0C                  DW   DOTQP   
0B1C                VVLEN:    .SET   $   
0B1C   00 20 6F 6B            DB   0," ok"   
0B20                VVCODE:   .SET   $   
0B1C                          .ORG   vvLEN   
0B1C   03                     DB   vvCODE - vvLEN - 1   
0B20                          .ORG   vvCODE   
0B20   44 0C 5C 06  DOTO1:    DW   CR,EXIT   
0B24                             ;   ?STACK      ( -- )
0B24                             ;               Abort if the data stack underflows.
0B24                          ;*Macro unroll: hCOLON  6,'?STACK',QSTAC
0B24                          ;*Macro unroll:  hCODE 6, "?STACK", QSTAC
0B24                          ALIGN   2   
0B24                QSTAC:       
0B24   00                     NOP      
0B25   CD 0E 06               CALL   doLIST   
0B28   6C 10 60 01            DW   DEPTH,ZLESS   ;check only for underflow
0B2C                          ;*Macro unroll:  mDSTR      ABORQ,' underflow'
0B2C   B4 0A                  DW   ABORQ   
0B2E                VVLEN:    .SET   $   
0B2E   00 20 75 6E 64 65 72 66 6C 6F 77 DB   0," underflow"   
0B39                VVCODE:   .SET   $   
0B2E                          .ORG   vvLEN   
0B2E   0A                     DB   vvCODE - vvLEN - 1   
0B39                          .ORG   vvCODE   
0B39   5C 06                  DW   EXIT   
0B3B                             ;   EVAL        ( -- )
0B3B                             ;               Interpret the input stream.
0B3B                          ;*Macro unroll: mCOLON  4,'EVAL',EVAL
0B3B                          ;*Macro unroll:  mCODE 4, "EVAL", EVAL
0B3B                          ALIGN   2   
0B3C                EVAL:        
0B3C                VVCODE:   .SET   $   
0B3C                VVLEN:    .SET   (4 & 01FH) / CELLL   
173A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
173A                VVNAME:   .SET   $   
173A   3C 0B 48 17            DW   vvCODE,vvLINK   
173E                VVLINK:   .SET   $   
173E   04 45 56 41 4C         DB   4,"EVAL"   
0B3C                          .ORG   vvCODE   
0B3C   00                     NOP      
0B3D   CD 0E 06               CALL   doLIST   
0B40                EVAL1:       
0B40   3C 09 02 10 68 0E      DW   TOKEN,DUPP,CAT   ;?input stream empty
0B46   32 0E 54 0B            DW   QBRAN,EVAL2   
0B4A   F2 10 04 0F 24 0B      DW   TEVAL,ATEXE,QSTAC   ;evaluate input, check stack
0B50   3E 0E 40 0B            DW   BRAN,EVAL1   
0B54                EVAL2:       
0B54   06 10 BA 10 04 0F 5C 06 DW   DROP,TPROM,ATEXE,EXIT   ;prompt
0B5C                             ;   PC!         ( uc p --  )
0B5C                             ;               output uc to IO port p
0B5C                          ;*Macro unroll: mCODE   3,'PC!',PCSTO
0B5C                          ALIGN   2   
0B5C                PCSTO:       
0B5C                VVCODE:   .SET   $   
0B5C                VVLEN:    .SET   (3 & 01FH) / CELLL   
1732                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1732                VVNAME:   .SET   $   
1732   5C 0B 3E 17            DW   vvCODE,vvLINK   
1736                VVLINK:   .SET   $   
1736   03 50 43 21            DB   3,"PC!"   
0B5C                          .ORG   vvCODE   
0B5C   D9                     EXX      ; 4t
0B5D   D1                     POP   DE   ;10t
0B5E   7B                     LD   A,E   ; 4t
0B5F   ED 79                  OUT   (C),A   ;12t
0B61   D9                     EXX      ; 4t
0B62                          ;*Macro unroll:  mNEXT
0B62   EB                     EX   DE,HL   
0B63                          ;*Macro unroll:  mNEXTHL                         ; 34t
0B63   FD E9                  JP   (IY)   ; 34t
0B65                             ;   PC@         ( p -- uc )
0B65                             ;               output uc to IO port p
0B65                          ;*Macro unroll: mCODE   3,'PC@',PCAT
0B65                          ALIGN   2   
0B66                PCAT:        
0B66                VVCODE:   .SET   $   
0B66                VVLEN:    .SET   (3 & 01FH) / CELLL   
172A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
172A                VVNAME:   .SET   $   
172A   66 0B 36 17            DW   vvCODE,vvLINK   
172E                VVLINK:   .SET   $   
172E   03 50 43 40            DB   3,"PC@"   
0B66                          .ORG   vvCODE   
0B66   D9                     EXX      ; 4t
0B67   ED 78                  IN   A,(C)   ;12t
0B69   5F                     LD   E,A   ; 4t
0B6A   16 00                  LD   D,0   ; 7t
0B6C   D5                     PUSH   DE   ;11t
0B6D   D9                     EXX      ; 4t
0B6E                          ;*Macro unroll:  mNEXT
0B6E   EB                     EX   DE,HL   
0B6F                          ;*Macro unroll:  mNEXTHL                         ; 34t
0B6F   FD E9                  JP   (IY)   ; 34t
0B71                             ;   !IO         ( -- )
0B71                             ;               Initialize the serial I/O devices.
0B71                          ;*Macro unroll: mCODE   3,'!IO', STOIO ;
0B71                          ALIGN   2   ; 
0B72                STOIO:       
0B72                VVCODE:   .SET   $   
0B72                VVLEN:    .SET   (3 & 01FH) / CELLL   
1722                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1722                VVNAME:   .SET   $   
1722   72 0B 2E 17            DW   vvCODE,vvLINK   
1726                VVLINK:   .SET   $   
1726   03 21 49 4F            DB   3,"!IO"   
0B72                          .ORG   vvCODE   
0B72   CD D6 00               CALL   INIT_IO   
0B75                          ;*Macro unroll:  mNEXT
0B75   EB                     EX   DE,HL   
0B76                          ;*Macro unroll:  mNEXTHL                         ; 34t
0B76   FD E9                  JP   (IY)   ; 34t
0B78                             ;   ?RX         ( -- c T | F )
0B78                             ;               Return input character and true, or a false if no input.
0B78                          ;*Macro unroll: mCODE	3, '?RX', QRX
0B78                          ALIGN   2   
0B78                QRX:         
0B78                VVCODE:   .SET   $   
0B78                VVLEN:    .SET   (3 & 01FH) / CELLL   
171A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
171A                VVNAME:   .SET   $   
171A   78 0B 26 17            DW   vvCODE,vvLINK   
171E                VVLINK:   .SET   $   
171E   03 3F 52 58            DB   3,"?RX"   
0B78                          .ORG   vvCODE   
0B78   C5                     PUSH   BC   
0B79   CD 20 01               CALL   QRXA   
0B7C   20 05                  JR   nz,QRX1   
0B7E   01 00 00               LD   BC,FALSEE   
0B81   18 0A                  JR   QRX2   
0B83                QRX1:        
0B83   CD F1 00               CALL   RXA1   
0B86   4F                     LD   C,A   
0B87   06 00                  LD   B,0   
0B89   C5                     PUSH   BC   
0B8A   01 FF FF               LD   BC,TRUEE   
0B8D                QRX2:        
0B8D                          ;*Macro unroll:  mNEXT
0B8D   EB                     EX   DE,HL   
0B8E                          ;*Macro unroll:  mNEXTHL                         ; 34t
0B8E   FD E9                  JP   (IY)   ; 34t
0B90                             ;   TX!         ( c -- )
0B90                             ;               Send character c to the output device.
0B90                          ;*Macro unroll: mCODE	3,'TX!',TXSTO
0B90                          ALIGN   2   
0B90                TXSTO:       
0B90                VVCODE:   .SET   $   
0B90                VVLEN:    .SET   (3 & 01FH) / CELLL   
1712                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1712                VVNAME:   .SET   $   
1712   90 0B 1E 17            DW   vvCODE,vvLINK   
1716                VVLINK:   .SET   $   
1716   03 54 58 21            DB   3,"TX!"   
0B90                          .ORG   vvCODE   
0B90   79                     LD   A,C   
0B91   CD 15 01               CALL   TXA   
0B94   C1                     POP   BC   
0B95                          ;*Macro unroll:  mNEXT
0B95   EB                     EX   DE,HL   
0B96                          ;*Macro unroll:  mNEXTHL                         ; 34t
0B96   FD E9                  JP   (IY)   ; 34t
0B98                             ;   ?KEY        ( -- c T | F )
0B98                             ;               Return input character and true, or a false if no input.
0B98                          ;*Macro unroll: mCOLON  4,'?KEY',QKEY
0B98                          ;*Macro unroll:  mCODE 4, "?KEY", QKEY
0B98                          ALIGN   2   
0B98                QKEY:        
0B98                VVCODE:   .SET   $   
0B98                VVLEN:    .SET   (4 & 01FH) / CELLL   
1708                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1708                VVNAME:   .SET   $   
1708   98 0B 16 17            DW   vvCODE,vvLINK   
170C                VVLINK:   .SET   $   
170C   04 3F 4B 45 59         DB   4,"?KEY"   
0B98                          .ORG   vvCODE   
0B98   00                     NOP      
0B99   CD 0E 06               CALL   doLIST   
0B9C   92 10 58 0E 2E 0E 5C 06 DW   TQKEY,AT,EXECU,EXIT   
0BA4                             ;   KEY         ( -- c )
0BA4                             ;               Wait for and return an input character.
0BA4                          ;*Macro unroll: mCOLON  3,'KEY',KEY
0BA4                          ;*Macro unroll:  mCODE 3, "KEY", KEY
0BA4                          ALIGN   2   
0BA4                KEY:         
0BA4                VVCODE:   .SET   $   
0BA4                VVLEN:    .SET   (3 & 01FH) / CELLL   
1700                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1700                VVNAME:   .SET   $   
1700   A4 0B 0C 17            DW   vvCODE,vvLINK   
1704                VVLINK:   .SET   $   
1704   03 4B 45 59            DB   3,"KEY"   
0BA4                          .ORG   vvCODE   
0BA4   00                     NOP      
0BA5   CD 0E 06               CALL   doLIST   
0BA8                KEY1:        
0BA8   98 0B                  DW   QKEY   
0BAA   02 10 32 0E B0 0B      DW   DUPP,QBRAN,KEY2   
0BB0                             ; DW DOLIT, $22, EMIT
0BB0                KEY2:        
0BB0   32 0E A8 0B            DW   QBRAN,KEY1   
0BB4   5C 06                  DW   EXIT   
0BB6                             ;   EMIT        ( c -- )
0BB6                             ;               Send a character to the output device.
0BB6                          ;*Macro unroll: mCOLON  4, 'EMIT', EMIT
0BB6                          ;*Macro unroll:  mCODE 4, "EMIT", EMIT
0BB6                          ALIGN   2   
0BB6                EMIT:        
0BB6                VVCODE:   .SET   $   
0BB6                VVLEN:    .SET   (4 & 01FH) / CELLL   
16F6                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
16F6                VVNAME:   .SET   $   
16F6   B6 0B 04 17            DW   vvCODE,vvLINK   
16FA                VVLINK:   .SET   $   
16FA   04 45 4D 49 54         DB   4,"EMIT"   
0BB6                          .ORG   vvCODE   
0BB6   00                     NOP      
0BB7   CD 0E 06               CALL   doLIST   
0BBA   9A 10 58 0E 2E 0E 5C 06 DW   TEMIT,AT,EXECU,EXIT   
0BC2                             ;   NUF?        ( -- t )
0BC2                             ;               Return false if no input, else pause and if CR return true.
0BC2                          ;*Macro unroll: mCOLON  4,'NUF?',NUFQ
0BC2                          ;*Macro unroll:  mCODE 4, "NUF?", NUFQ
0BC2                          ALIGN   2   
0BC2                NUFQ:        
0BC2                VVCODE:   .SET   $   
0BC2                VVLEN:    .SET   (4 & 01FH) / CELLL   
16EC                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
16EC                VVNAME:   .SET   $   
16EC   C2 0B FA 16            DW   vvCODE,vvLINK   
16F0                VVLINK:   .SET   $   
16F0   04 4E 55 46 3F         DB   4,"NUF?"   
0BC2                          .ORG   vvCODE   
0BC2   00                     NOP      
0BC3   CD 0E 06               CALL   doLIST   
0BC6   98 0B 02 10            DW   QKEY,DUPP   
0BCA   32 0E D8 0B            DW   QBRAN,NUFQ1   
0BCE   36 10 A4 0B 1C 06 0D 00 DA 01 DW   DDROP,KEY,DOLIT,CRR,EQUAL   
0BD8                NUFQ1:       
0BD8   5C 06                  DW   EXIT   
0BDA                             ;   PACE        ( -- )
0BDA                             ;               Send a pace character for the file downloading process.
0BDA                          ;*Macro unroll: hCOLON  4,'PACE',PACE
0BDA                          ;*Macro unroll:  hCODE 4, "PACE", PACE
0BDA                          ALIGN   2   
0BDA                PACE:        
0BDA   00                     NOP      
0BDB   CD 0E 06               CALL   doLIST   
0BDE   1C 06 0B 00 B6 0B 5C 06 DW   DOLIT,11,EMIT,EXIT   
0BE6                             ;   SPACE       ( -- )
0BE6                             ;               Send the blank character to the output device.
0BE6                          ;*Macro unroll: mCOLON  5,'SPACE',SPACE
0BE6                          ;*Macro unroll:  mCODE 5, "SPACE", SPACE
0BE6                          ALIGN   2   
0BE6                SPACE:       
0BE6                VVCODE:   .SET   $   
0BE6                VVLEN:    .SET   (5 & 01FH) / CELLL   
16E2                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
16E2                VVNAME:   .SET   $   
16E2   E6 0B F0 16            DW   vvCODE,vvLINK   
16E6                VVLINK:   .SET   $   
16E6   05 53 50 41 43 45      DB   5,"SPACE"   
0BE6                          .ORG   vvCODE   
0BE6   00                     NOP      
0BE7   CD 0E 06               CALL   doLIST   
0BEA   4E 07 B6 0B 5C 06      DW   BLANK,EMIT,EXIT   
0BF0                             ;   SPACES      ( +n -- )
0BF0                             ;               Send n spaces to the output device.
0BF0                          ;*Macro unroll: mCOLON  6,'SPACES',SPACS
0BF0                          ;*Macro unroll:  mCODE 6, "SPACES", SPACS
0BF0                          ALIGN   2   
0BF0                SPACS:       
0BF0                VVCODE:   .SET   $   
0BF0                VVLEN:    .SET   (6 & 01FH) / CELLL   
16D6                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
16D6                VVNAME:   .SET   $   
16D6   F0 0B E6 16            DW   vvCODE,vvLINK   
16DA                VVLINK:   .SET   $   
16DA   06 53 50 41 43 45 53   DB   6,"SPACES"   
0BF0                          .ORG   vvCODE   
0BF0   00                     NOP      
0BF1   CD 0E 06               CALL   doLIST   
0BF4   1C 06 00 00 26 02 E6 0F DW   DOLIT,0,MAX,TOR   
0BFC   3E 0E 02 0C            DW   BRAN,CHAR2   
0C00                CHAR1:       
0C00   E6 0B                  DW   SPACE   
0C02                CHAR2:       
0C02   68 06 00 0C            DW   DONXT,CHAR1   
0C06   5C 06                  DW   EXIT   
0C08                             ;   TYPE        ( b u -- )
0C08                             ;               Output u characters from b.
0C08                          ;*Macro unroll: mCOLON	4,'TYPE',TYPEE
0C08                          ;*Macro unroll:  mCODE 4, "TYPE", TYPEE
0C08                          ALIGN   2   
0C08                TYPEE:       
0C08                VVCODE:   .SET   $   
0C08                VVLEN:    .SET   (4 & 01FH) / CELLL   
16CC                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
16CC                VVNAME:   .SET   $   
16CC   08 0C DA 16            DW   vvCODE,vvLINK   
16D0                VVLINK:   .SET   $   
16D0   04 54 59 50 45         DB   4,"TYPE"   
0C08                          .ORG   vvCODE   
0C08   00                     NOP      
0C09   CD 0E 06               CALL   doLIST   
0C0C   E6 0F                  DW   TOR   
0C0E   3E 0E 1E 0C            DW   BRAN,TYPE2   
0C12                TYPE1:       
0C12   02 10 68 0E B6 0B      DW   DUPP,CAT,EMIT   
0C18   1C 06 01 00 86 01      DW   DOLIT,1,PLUS   
0C1E                TYPE2:       
0C1E   68 06 12 0C            DW   DONXT,TYPE1   
0C22   06 10 5C 06            DW   DROP,EXIT   
0C26                             ;   TYPEZ    ( cstr -- )
0C26                             ;   Similar to TYPE but prints C null terminated strings
0C26                          ;*Macro unroll: mCOLON	4,'TYPEZ',TYPEZ
0C26                          ;*Macro unroll:  mCODE 4, "TYPEZ", TYPEZ
0C26                          ALIGN   2   
0C26                TYPEZ:       
0C26                VVCODE:   .SET   $   
0C26                VVLEN:    .SET   (4 & 01FH) / CELLL   
16C2                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
16C2                VVNAME:   .SET   $   
16C2   26 0C D0 16            DW   vvCODE,vvLINK   
16C6                VVLINK:   .SET   $   
16C6   04 54 59 50 45 5A      DB   4,"TYPEZ"   
0C26                          .ORG   vvCODE   
0C26   00                     NOP      
0C27   CD 0E 06               CALL   doLIST   
0C2A                TYPEZ1:      
0C2A   02 10 68 0E            DW   DUPP,CAT   
0C2E   02 10 32 0E 40 0C      DW   DUPP,QBRAN,TYPEZ2   
0C34   B6 0B                  DW   EMIT   
0C36   1C 06 01 00 86 01      DW   DOLIT,1,PLUS   
0C3C   3E 0E 2A 0C            DW   BRAN,TYPEZ1   
0C40                TYPEZ2:      
0C40   06 10 5C 06            DW   DROP,EXIT   
0C44                             ;   CR          ( -- )
0C44                             ;               Output a carriage return and a line feed.
0C44                          ;*Macro unroll: mCOLON	2,'CR',CR
0C44                          ;*Macro unroll:  mCODE 2, "CR", CR
0C44                          ALIGN   2   
0C44                CR:          
0C44                VVCODE:   .SET   $   
0C44                VVLEN:    .SET   (2 & 01FH) / CELLL   
16BA                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
16BA                VVNAME:   .SET   $   
16BA   44 0C C6 16            DW   vvCODE,vvLINK   
16BE                VVLINK:   .SET   $   
16BE   02 43 52               DB   2,"CR"   
0C44                          .ORG   vvCODE   
0C44   00                     NOP      
0C45   CD 0E 06               CALL   doLIST   
0C48   1C 06 0D 00 B6 0B 1C 06 0A 00 B6 0B 5C 06 DW   DOLIT,CRR,EMIT,DOLIT,LFF,EMIT,EXIT   
0C56                             ;   $"|         ( -- a )
0C56                             ;               Run time routine compiled by $". Return address of a compiled string.
0C56                          ;*Macro unroll: hCOLON  COMPO+3,'$||',STRQP
0C56                          ;*Macro unroll:  hCODE COMPO+3, "$||", STRQP
0C56                          ALIGN   2   
0C56                STRQP:       
0C56   00                     NOP      
0C57   CD 0E 06               CALL   doLIST   
0C5A   44 06 5C 06            DW   DOSTR,EXIT   ;force a call to do$
0C5E                             ;   ."|         ( -- )
0C5E                             ;               Run time routine of ." . Output a compiled string.
0C5E                          ;*Macro unroll: hCOLON  COMPO+3,'.||',DOTQP
0C5E                          ;*Macro unroll:  hCODE COMPO+3, ".||", DOTQP
0C5E                          ALIGN   2   
0C5E                DOTQP:       
0C5E   00                     NOP      
0C5F   CD 0E 06               CALL   doLIST   
0C62   44 06 CE 0E 08 0C 5C 06 DW   DOSTR,COUNT,TYPEE,EXIT   
0C6A                             ;   .R          ( n +n -- )
0C6A                             ;               Display an integer in a field of n columns, right justified.
0C6A                          ;*Macro unroll: mCOLON  2,'.R',DOTR
0C6A                          ;*Macro unroll:  mCODE 2, ".R", DOTR
0C6A                          ALIGN   2   
0C6A                DOTR:        
0C6A                VVCODE:   .SET   $   
0C6A                VVLEN:    .SET   (2 & 01FH) / CELLL   
16B2                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
16B2                VVNAME:   .SET   $   
16B2   6A 0C BE 16            DW   vvCODE,vvLINK   
16B6                VVLINK:   .SET   $   
16B6   02 2E 52               DB   2,".R"   
0C6A                          .ORG   vvCODE   
0C6A   00                     NOP      
0C6B   CD 0E 06               CALL   doLIST   
0C6E   E6 0F 1C 07 F4 0F 12 10 C0 01 DW   TOR,STR,RFROM,OVER,SUBB   
0C78   F0 0B 08 0C 5C 06      DW   SPACS,TYPEE,EXIT   
0C7E                             ;   U.R         ( u +n -- )
0C7E                             ;               Display an unsigned integer in n column, right justified.
0C7E                          ;*Macro unroll: mCOLON  3,'U.R',UDOTR
0C7E                          ;*Macro unroll:  mCODE 3, "U.R", UDOTR
0C7E                          ALIGN   2   
0C7E                UDOTR:       
0C7E                VVCODE:   .SET   $   
0C7E                VVLEN:    .SET   (3 & 01FH) / CELLL   
16AA                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
16AA                VVNAME:   .SET   $   
16AA   7E 0C B6 16            DW   vvCODE,vvLINK   
16AE                VVLINK:   .SET   $   
16AE   03 55 2E 52            DB   3,"U.R"   
0C7E                          .ORG   vvCODE   
0C7E   00                     NOP      
0C7F   CD 0E 06               CALL   doLIST   
0C82   E6 0F B4 06 E6 06 0A 07 DW   TOR,BDIGS,DIGS,EDIGS   
0C8A   F4 0F 12 10 C0 01      DW   RFROM,OVER,SUBB   
0C90   F0 0B 08 0C 5C 06      DW   SPACS,TYPEE,EXIT   
0C96                             ;   U.          ( u -- )
0C96                             ;               Display an unsigned integer in free format.
0C96                          ;*Macro unroll: mCOLON  2,'U.',UDOT
0C96                          ;*Macro unroll:  mCODE 2, "U.", UDOT
0C96                          ALIGN   2   
0C96                UDOT:        
0C96                VVCODE:   .SET   $   
0C96                VVLEN:    .SET   (2 & 01FH) / CELLL   
16A2                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
16A2                VVNAME:   .SET   $   
16A2   96 0C AE 16            DW   vvCODE,vvLINK   
16A6                VVLINK:   .SET   $   
16A6   02 55 2E               DB   2,"U."   
0C96                          .ORG   vvCODE   
0C96   00                     NOP      
0C97   CD 0E 06               CALL   doLIST   
0C9A   B4 06 E6 06 0A 07      DW   BDIGS,DIGS,EDIGS   
0CA0   E6 0B 08 0C 5C 06      DW   SPACE,TYPEE,EXIT   
0CA6                             ;   .           ( w -- )
0CA6                             ;               Display an integer in free format, preceeded by a space.
0CA6                          ;*Macro unroll: mCOLON  1,'.',DOT
0CA6                          ;*Macro unroll:  mCODE 1, ".", DOT
0CA6                          ALIGN   2   
0CA6                DOT:         
0CA6                VVCODE:   .SET   $   
0CA6                VVLEN:    .SET   (1 & 01FH) / CELLL   
169C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
169C                VVNAME:   .SET   $   
169C   A6 0C A6 16            DW   vvCODE,vvLINK   
16A0                VVLINK:   .SET   $   
16A0   01 2E                  DB   1,"."   
0CA6                          .ORG   vvCODE   
0CA6   00                     NOP      
0CA7   CD 0E 06               CALL   doLIST   
0CAA   C2 10 58 0E 1C 06 0A 00 7C 01 DW   BASE,AT,DOLIT,10,XORR   ;?decimal
0CB4   32 0E BC 0C            DW   QBRAN,DOT1   
0CB8   96 0C 5C 06            DW   UDOT,EXIT   ;no, display unsigned
0CBC                DOT1:        
0CBC   1C 07 E6 0B 08 0C 5C 06 DW   STR,SPACE,TYPEE,EXIT   ;yes, display signed
0CC4                             ;   .(          ( -- )
0CC4                             ;               Output following string up to next ) .
0CC4                          ;*Macro unroll: mCOLON  IMEDD+2,'.(',DOTPR
0CC4                          ;*Macro unroll:  mCODE IMEDD+2, ".(", DOTPR
0CC4                          ALIGN   2   
0CC4                DOTPR:       
0CC4                VVCODE:   .SET   $   
0CC4                VVLEN:    .SET   (IMEDD+2 & 01FH) / CELLL   
1654                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1654                VVNAME:   .SET   $   
1654   C4 0C A0 16            DW   vvCODE,vvLINK   
1658                VVLINK:   .SET   $   
1658   42 2E 28               DB   IMEDD+2,".("   
0CC4                          .ORG   vvCODE   
0CC4   00                     NOP      
0CC5   CD 0E 06               CALL   doLIST   
0CC8   1C 06 F2 08 08 0C 5C 06 DW   DOLIT,")",PARSE,TYPEE,EXIT   
0CD0                             ;   ?           ( a -- )
0CD0                             ;               Display the contents in a memory cell.
0CD0                          ;*Macro unroll: mCOLON  1,'?',QUEST
0CD0                          ;*Macro unroll:  mCODE 1, "?", QUEST
0CD0                          ALIGN   2   
0CD0                QUEST:       
0CD0                VVCODE:   .SET   $   
0CD0                VVLEN:    .SET   (1 & 01FH) / CELLL   
164E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
164E                VVNAME:   .SET   $   
164E   D0 0C 58 16            DW   vvCODE,vvLINK   
1652                VVLINK:   .SET   $   
1652   01 3F                  DB   1,"?"   
0CD0                          .ORG   vvCODE   
0CD0   00                     NOP      
0CD1   CD 0E 06               CALL   doLIST   
0CD4   58 0E A6 0C 5C 06      DW   AT,DOT,EXIT   
0CDA                             ;   ^H          ( bot eot cur -- bot eot cur )
0CDA                             ;               Backup the cursor by one character.
0CDA                          ;*Macro unroll: mCOLON  2,'^H',BKSP
0CDA                          ;*Macro unroll:  mCODE 2, "^H", BKSP
0CDA                          ALIGN   2   
0CDA                BKSP:        
0CDA                VVCODE:   .SET   $   
0CDA                VVLEN:    .SET   (2 & 01FH) / CELLL   
1646                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1646                VVNAME:   .SET   $   
1646   DA 0C 52 16            DW   vvCODE,vvLINK   
164A                VVLINK:   .SET   $   
164A   02 5E 48               DB   2,"^H"   
0CDA                          .ORG   vvCODE   
0CDA   00                     NOP      
0CDB   CD 0E 06               CALL   doLIST   
0CDE   E6 0F 12 10 F4 0F 0A 10 12 10 7C 01 DW   TOR,OVER,RFROM,SWAP,OVER,XORR   
0CEA   32 0E 0A 0D            DW   QBRAN,BACK1   
0CEE   1C 06 08 00 B2 10 04 0F 1C 06 01 00 C0 01 DW   DOLIT,BKSPP,TECHO,ATEXE,DOLIT,1,SUBB   
0CFC   4E 07 B2 10 04 0F      DW   BLANK,TECHO,ATEXE   
0D02   1C 06 08 00 B2 10 04 0F DW   DOLIT,BKSPP,TECHO,ATEXE   
0D0A                BACK1:       
0D0A   5C 06                  DW   EXIT   
0D0C                             ;   TAP         ( bot eot cur c -- bot eot cur )
0D0C                             ;               Accept and echo the key stroke and bump the cursor.
0D0C                          ;*Macro unroll: mCOLON  3,'TAP',TAP
0D0C                          ;*Macro unroll:  mCODE 3, "TAP", TAP
0D0C                          ALIGN   2   
0D0C                TAP:         
0D0C                VVCODE:   .SET   $   
0D0C                VVLEN:    .SET   (3 & 01FH) / CELLL   
163E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
163E                VVNAME:   .SET   $   
163E   0C 0D 4A 16            DW   vvCODE,vvLINK   
1642                VVLINK:   .SET   $   
1642   03 54 41 50            DB   3,"TAP"   
0D0C                          .ORG   vvCODE   
0D0C   00                     NOP      
0D0D   CD 0E 06               CALL   doLIST   
0D10   02 10 B2 10 04 0F      DW   DUPP,TECHO,ATEXE   
0D16   12 10 60 0E 1C 06 01 00 86 01 5C 06 DW   OVER,CSTOR,DOLIT,1,PLUS,EXIT   
0D22                             ;   kTAP        ( bot eot cur c -- bot eot cur )
0D22                             ;               Process a key stroke, CR or backspace.
0D22                          ;*Macro unroll: mCOLON  4,'kTAP',KTAP
0D22                          ;*Macro unroll:  mCODE 4, "kTAP", KTAP
0D22                          ALIGN   2   
0D22                KTAP:        
0D22                VVCODE:   .SET   $   
0D22                VVLEN:    .SET   (4 & 01FH) / CELLL   
1634                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1634                VVNAME:   .SET   $   
1634   22 0D 42 16            DW   vvCODE,vvLINK   
1638                VVLINK:   .SET   $   
1638   04 6B 54 41 50         DB   4,"kTAP"   
0D22                          .ORG   vvCODE   
0D22   00                     NOP      
0D23   CD 0E 06               CALL   doLIST   
0D26   02 10 1C 06 0D 00 7C 01 DW   DUPP,DOLIT,CRR,XORR   
0D2E   32 0E 46 0D            DW   QBRAN,KTAP2   
0D32   1C 06 08 00 7C 01      DW   DOLIT,BKSPP,XORR   
0D38   32 0E 42 0D            DW   QBRAN,KTAP1   
0D3C   4E 07 0C 0D 5C 06      DW   BLANK,TAP,EXIT   
0D42                KTAP1:       
0D42   DA 0C 5C 06            DW   BKSP,EXIT   
0D46                KTAP2:       
0D46   06 10 0A 10 06 10 02 10 5C 06 DW   DROP,SWAP,DROP,DUPP,EXIT   
0D50                             ;   accept      ( b u -- b u )
0D50                             ;               Accept characters to input buffer. Return with actual count.
0D50                          ;*Macro unroll: mCOLON  6,'accept',ACCEP
0D50                          ;*Macro unroll:  mCODE 6, "accept", ACCEP
0D50                          ALIGN   2   
0D50                ACCEP:       
0D50                VVCODE:   .SET   $   
0D50                VVLEN:    .SET   (6 & 01FH) / CELLL   
1628                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1628                VVNAME:   .SET   $   
1628   50 0D 38 16            DW   vvCODE,vvLINK   
162C                VVLINK:   .SET   $   
162C   06 61 63 63 65 70 74   DB   6,"accept"   
0D50                          .ORG   vvCODE   
0D50   00                     NOP      
0D51   CD 0E 06               CALL   doLIST   
0D54   12 10 86 01 12 10      DW   OVER,PLUS,OVER   
0D5A                ACCP1:       
0D5A   40 10 7C 01            DW   DDUP,XORR   
0D5E   32 0E 80 0D            DW   QBRAN,ACCP4   
0D62   A4 0B 02 10            DW   KEY,DUPP   
0D66   4E 07 1C 06 7F 00 4C 02 DW   BLANK,DOLIT,127,WITHI   
0D6E   32 0E 78 0D            DW   QBRAN,ACCP2   
0D72   0C 0D                  DW   TAP   
0D74   3E 0E 7C 0D            DW   BRAN,ACCP3   
0D78                ACCP2:       
0D78   AA 10 04 0F            DW   TTAP,ATEXE   
0D7C                ACCP3:       
0D7C   3E 0E 5A 0D            DW   BRAN,ACCP1   
0D80                ACCP4:       
0D80   06 10 12 10 C0 01 5C 06 DW   DROP,OVER,SUBB,EXIT   
0D88                             ;   EXPECT      ( b u -- )
0D88                             ;               Accept input stream and STORE count in SPAN.
0D88                          ;*Macro unroll: hCOLON  6,'EXPECT',EXPEC
0D88                          ;*Macro unroll:  hCODE 6, "EXPECT", EXPEC
0D88                          ALIGN   2   
0D88                EXPEC:       
0D88   00                     NOP      
0D89   CD 0E 06               CALL   doLIST   
0D8C   A2 10 04 0F D2 10 4E 0E 06 10 5C 06 DW   TEXPE,ATEXE,SPAN,STORE,DROP,EXIT   
0D98                             ;   QUERY       ( -- )
0D98                             ;               Accept input stream to terminal input buffer.
0D98                          ;*Macro unroll: hCOLON  5,'QUERY',QUERY
0D98                          ;*Macro unroll:  hCODE 5, "QUERY", QUERY
0D98                          ALIGN   2   
0D98                QUERY:       
0D98   00                     NOP      
0D99   CD 0E 06               CALL   doLIST   
0D9C   F8 0E 1C 06 50 00 A2 10 04 0F E2 10 4E 0E DW   TIB,DOLIT,80,TEXPE,ATEXE,NTIB,STORE   
0DAA   06 10 1C 06 00 00 DA 10 4E 0E 5C 06 DW   DROP,DOLIT,0,INN,STORE,EXIT   
0DB6                          ;*Macro unroll: hCOLON	2,'HI2',HI2
0DB6                          ;*Macro unroll:  hCODE 2, "HI2", HI2
0DB6                          ALIGN   2   
0DB6                HI2:         
0DB6   00                     NOP      
0DB7   CD 0E 06               CALL   doLIST   
0DBA   72 0B                  DW   STOIO   
0DBC   1C 06 CE 0D            DW   DOLIT,HELLO   
0DC0   26 0C                  DW   TYPEZ   
0DC2   A4 0B                  DW   KEY   
0DC4   B6 0B                  DW   EMIT   
0DC6   1C 06 CE 0D            DW   DOLIT,HELLO   
0DCA   26 0C                  DW   TYPEZ   
0DCC   2C 0E                  DW   QUIT   
0DCE   48 65 6C 6C 6F 20 46 6F 72 74 68 21 20 0D 0A 00 HELLO:   .CSTR   "Hello Forth! \r\n"   
0DDE                             ;   hi          ( -- )
0DDE                             ;               Display the sign-on message of eForth.
0DDE                          ;*Macro unroll: hCOLON  2,'hi',HI
0DDE                          ;*Macro unroll:  hCODE 2, "hi", HI
0DDE                          ALIGN   2   
0DDE                HI:          
0DDE   00                     NOP      
0DDF   CD 0E 06               CALL   doLIST   
0DE2   72 0B 44 0C            DW   STOIO,CR   ;initialize I/O
0DE6                          ;*Macro unroll:  mDSTR   DOTQP,'eForth v'        ;model
0DE6   5E 0C                  DW   DOTQP   ;model
0DE8                VVLEN:    .SET   $   
0DE8   00 65 46 6F 72 74 68 20 76 DB   0,"eForth v"   
0DF1                VVCODE:   .SET   $   
0DE8                          .ORG   vvLEN   
0DE8   08                     DB   vvCODE - vvLEN - 1   
0DF1                          .ORG   vvCODE   
0DF1                             ; DW      BASE,AT,HEX             ;save radix
0DF1                             ; DW      VERSN,BDIGS,DIG,DIG
0DF1                             ; DW      DOLIT,".",HOLD
0DF1                             ; DW      DIGS,EDIGS,TYPEE        ;format version number
0DF1                             ; DW      BASE,STORE              ;restore radix
0DF1   44 0C 5C 06            DW   CR,EXIT   
0DF5                NEXT_STEP:      
0DF5   5E                     LD   E,(HL)   ; 7t
0DF6   23                     INC   HL   ; 6t
0DF7   56                     LD   D,(HL)   ; 7t
0DF8   23                     INC   HL   ; 6t
0DF9   EB                     EX   DE,HL   ; 4t
0DFA   E9                     JP   (HL)   ; 4t
0DFB                          ;*Macro unroll: mCOLON	4,'COLD',COLD
0DFB                          ;*Macro unroll:  mCODE 4, "COLD", COLD
0DFB                          ALIGN   2   
0DFC                COLD:        
0DFC                VVCODE:   .SET   $   
0DFC                VVLEN:    .SET   (4 & 01FH) / CELLL   
161E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
161E                VVNAME:   .SET   $   
161E   FC 0D 2C 16            DW   vvCODE,vvLINK   
1622                VVLINK:   .SET   $   
1622   04 43 4F 4C 44         DB   4,"COLD"   
0DFC                          .ORG   vvCODE   
0DFC   00                     NOP      
0DFD   CD 0E 06               CALL   doLIST   
0E00                COLD1:       
0E00   1C 06 26 01 1C 06 00 24 DW   DOLIT,UZERO,DOLIT,UPP   
0E08   1C 06 3A 00 14 0F      DW   DOLIT,ULAST-UZERO,CMOVE   ;initialize user area
0E0E   16 0E                  DW   PRESE   ;initialize stack and TIB
0E10                             ; DW      TBOOT,ATEXE             ;application boot
0E10                             ; DW      FORTH,CNTXT,AT,DUPP     ;initialize search order
0E10                             ; DW      CRRNT,DSTOR,OVERT
0E10   2C 0E                  DW   QUIT   ;start interpretation
0E12   3E 0E 00 0E            DW   BRAN,COLD1   ;just in case
0E16                             ;   PRESET      ( -- )
0E16                             ;               Reset data stack pointer and the terminal input buffer.
0E16                          ;*Macro unroll: mCOLON  6,'PRESET',PRESE
0E16                          ;*Macro unroll:  mCODE 6, "PRESET", PRESE
0E16                          ALIGN   2   
0E16                PRESE:       
0E16                VVCODE:   .SET   $   
0E16                VVLEN:    .SET   (6 & 01FH) / CELLL   
1612                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1612                VVNAME:   .SET   $   
1612   16 0E 22 16            DW   vvCODE,vvLINK   
1616                VVLINK:   .SET   $   
1616   06 50 52 45 53 45 54   DB   6,"PRESET"   
0E16                          .ORG   vvCODE   
0E16   00                     NOP      
0E17   CD 0E 06               CALL   doLIST   
0E1A   82 10 58 0E 94 0E      DW   SZERO,AT,SPSTO   
0E20   1C 06 00 22 E2 10 82 03 4E 0E 5C 06 DW   DOLIT,TIBB,NTIB,CELLP,STORE,EXIT   
0E2C                          ;*Macro unroll: mCODE  4, 'QUIT', QUIT
0E2C                          ALIGN   2   
0E2C                QUIT:        
0E2C                VVCODE:   .SET   $   
0E2C                VVLEN:    .SET   (4 & 01FH) / CELLL   
1608                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1608                VVNAME:   .SET   $   
1608   2C 0E 16 16            DW   vvCODE,vvLINK   
160C                VVLINK:   .SET   $   
160C   04 51 55 49 54         DB   4,"QUIT"   
0E2C                          .ORG   vvCODE   
0E2C   76                     HALT      
0E2D                             ;   EXECUTE	( i*x xt -- j*x )		\ CORE
0E2D                             ;		Perform the semantics indentified by execution token, xt.
0E2D                          ;*Macro unroll: mCODE	7,'EXECUTE', EXECU
0E2D                          ALIGN   2   
0E2E                EXECU:       
0E2E                VVCODE:   .SET   $   
0E2E                VVLEN:    .SET   (7 & 01FH) / CELLL   
15FC                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
15FC                VVNAME:   .SET   $   
15FC   2E 0E 0C 16            DW   vvCODE,vvLINK   
1600                VVLINK:   .SET   $   
1600   07 45 58 45 43 55 54 45 DB   7,"EXECUTE"   
0E2E                          .ORG   vvCODE   
0E2E   60                     LD   H,B   
0E2F   69                     LD   L,C   
0E30   C1                     POP   BC   
0E31   E9                     JP   (HL)   
0E32                             ; 
0E32                             ;   0BRAN	( flag -- )
0E32                             ;		BRAN if flag is zero.
0E32                          ;*Macro unroll: hCODE	COMPO+7,'?branch', QBRAN
0E32                          ALIGN   2   
0E32                QBRAN:       
0E32   78                     LD   A,B   ; 4t
0E33   B1                     OR   C   ; 4t
0E34   C1                     POP   BC   ;10t
0E35   CA 3E 0E               JP   Z,BRAN   ;10/7t a fast dec is ok, only
0E38   13                     INC   DE   ; 6t yes,continue past the BRAN offset
0E39   13                     INC   DE   ; 6t
0E3A                          ;*Macro unroll: 	mNEXT
0E3A   EB                     EX   DE,HL   
0E3B                          ;*Macro unroll:  mNEXTHL                         ; 34t
0E3B   FD E9                  JP   (IY)   ; 34t
0E3D                             ;   BRAN	( -- )
0E3D                             ;		BRAN to an inline address.
0E3D                          ;*Macro unroll: hCODE	COMPO+6,'branch', BRAN
0E3D                          ALIGN   2   
0E3E                BRAN:        
0E3E   1A                     LD   A,(DE)   ; 7t go back to the loop
0E3F   6F                     LD   L,A   ; 4t
0E40   13                     INC   DE   ; 6t
0E41   1A                     LD   A,(DE)   ; 7t
0E42   67                     LD   H,A   ; 4t
0E43                          ;*Macro unroll: 	mNEXTHL
0E43   FD E9                  JP   (IY)   
0E45                             ; 
0E45                             ;   THROW    ( cstr -- )
0E45                             ;   Prints string message and returns TODO: restart Forth interpreter QUIT
0E45                          ;*Macro unroll: mCOLON	5,'THROWX',THROWX
0E45                          ;*Macro unroll:  mCODE 5, "THROWX", THROWX
0E45                          ALIGN   2   
0E46                THROWX:      
0E46                VVCODE:   .SET   $   
0E46                VVLEN:    .SET   (5 & 01FH) / CELLL   
15F2                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
15F2                VVNAME:   .SET   $   
15F2   46 0E 00 16            DW   vvCODE,vvLINK   
15F6                VVLINK:   .SET   $   
15F6   05 54 48 52 4F 57 58   DB   5,"THROWX"   
0E46                          .ORG   vvCODE   
0E46   00                     NOP      
0E47   CD 0E 06               CALL   doLIST   
0E4A   26 0C 5C 06            DW   TYPEZ,EXIT   
0E4E                             ;   !           ( w a -- )
0E4E                             ;               Pop the data stack to memory.
0E4E                          ;*Macro unroll: mCODE	1,'!',STORE
0E4E                          ALIGN   2   
0E4E                STORE:       
0E4E                VVCODE:   .SET   $   
0E4E                VVLEN:    .SET   (1 & 01FH) / CELLL   
15EC                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
15EC                VVNAME:   .SET   $   
15EC   4E 0E F6 15            DW   vvCODE,vvLINK   
15F0                VVLINK:   .SET   $   
15F0   01 21                  DB   1,"!"   
0E4E                          .ORG   vvCODE   
0E4E   60                     LD   H,B   
0E4F   69                     LD   L,C   
0E50   C1                     POP   BC   
0E51   71                     LD   (HL),C   
0E52   23                     INC   HL   
0E53   70                     LD   (HL),B   
0E54   C1                     POP   BC   
0E55                          ;*Macro unroll: 	mNEXT
0E55   EB                     EX   DE,HL   
0E56                          ;*Macro unroll:  mNEXTHL                         ; 34t
0E56   FD E9                  JP   (IY)   ; 34t
0E58                             ;   @           ( a -- w )
0E58                             ;               Push memory location to the data stack.
0E58                          ;*Macro unroll: mCODE	1,'@', AT
0E58                          ALIGN   2   
0E58                AT:          
0E58                VVCODE:   .SET   $   
0E58                VVLEN:    .SET   (1 & 01FH) / CELLL   
15E6                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
15E6                VVNAME:   .SET   $   
15E6   58 0E F0 15            DW   vvCODE,vvLINK   
15EA                VVLINK:   .SET   $   
15EA   01 40                  DB   1,"@"   
0E58                          .ORG   vvCODE   
0E58   60                     LD   H,B   
0E59   69                     LD   L,C   
0E5A   4E                     LD   C,(HL)   
0E5B   23                     INC   HL   
0E5C   46                     LD   B,(HL)   
0E5D                          ;*Macro unroll: 	mNEXT
0E5D   EB                     EX   DE,HL   
0E5E                          ;*Macro unroll:  mNEXTHL                         ; 34t
0E5E   FD E9                  JP   (IY)   ; 34t
0E60                             ;   C!          ( c b -- )
0E60                             ;               Pop the data stack to byte memory.
0E60                          ;*Macro unroll: mCODE	2,'C!',CSTOR
0E60                          ALIGN   2   
0E60                CSTOR:       
0E60                VVCODE:   .SET   $   
0E60                VVLEN:    .SET   (2 & 01FH) / CELLL   
15DE                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
15DE                VVNAME:   .SET   $   
15DE   60 0E EA 15            DW   vvCODE,vvLINK   
15E2                VVLINK:   .SET   $   
15E2   02 43 21               DB   2,"C!"   
0E60                          .ORG   vvCODE   
0E60   60                     LD   H,B   
0E61   69                     LD   L,C   
0E62   C1                     POP   BC   
0E63   71                     LD   (HL),C   
0E64   C1                     POP   BC   
0E65                          ;*Macro unroll: 	mNEXT
0E65   EB                     EX   DE,HL   
0E66                          ;*Macro unroll:  mNEXTHL                         ; 34t
0E66   FD E9                  JP   (IY)   ; 34t
0E68                             ;   C@          ( b -- c )
0E68                             ;               Push byte memory location to the data stack.
0E68                          ;*Macro unroll: mCODE	2,'C@',CAT
0E68                          ALIGN   2   
0E68                CAT:         
0E68                VVCODE:   .SET   $   
0E68                VVLEN:    .SET   (2 & 01FH) / CELLL   
15D6                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
15D6                VVNAME:   .SET   $   
15D6   68 0E E2 15            DW   vvCODE,vvLINK   
15DA                VVLINK:   .SET   $   
15DA   02 43 40               DB   2,"C@"   
0E68                          .ORG   vvCODE   
0E68   0A                     LD   A,(BC)   
0E69   4F                     LD   C,A   
0E6A   06 00                  LD   B,0   
0E6C                          ;*Macro unroll: 	mNEXT
0E6C   EB                     EX   DE,HL   
0E6D                          ;*Macro unroll:  mNEXTHL                         ; 34t
0E6D   FD E9                  JP   (IY)   ; 34t
0E6F                             ;   R@          ( -- w )
0E6F                             ;               Copy top of return stack to the data stack.
0E6F                          ;*Macro unroll: mCODE	COMPO+2,'R@',RAT
0E6F                          ALIGN   2   
0E70                RAT:         
0E70                VVCODE:   .SET   $   
0E70                VVLEN:    .SET   (COMPO+2 & 01FH) / CELLL   
15AE                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
15AE                VVNAME:   .SET   $   
15AE   70 0E DA 15            DW   vvCODE,vvLINK   
15B2                VVLINK:   .SET   $   
15B2   22 52 40               DB   COMPO+2,"R@"   
0E70                          .ORG   vvCODE   
0E70   C5                     PUSH   BC   
0E71   DD 4E 00               LD   C,(IX+0)   
0E74   DD 46 01               LD   B,(IX+1)   
0E77                          ;*Macro unroll: 	mNEXT
0E77   EB                     EX   DE,HL   
0E78                          ;*Macro unroll:  mNEXTHL                         ; 34t
0E78   FD E9                  JP   (IY)   ; 34t
0E7A                             ;   RP@         ( -- a )
0E7A                             ;               Push the current RP to the data stack
0E7A                          ;*Macro unroll: mCODE	COMPO+3, 'rp@', RPAT
0E7A                          ALIGN   2   
0E7A                RPAT:        
0E7A                VVCODE:   .SET   $   
0E7A                VVLEN:    .SET   (COMPO+3 & 01FH) / CELLL   
1586                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1586                VVNAME:   .SET   $   
1586   7A 0E B2 15            DW   vvCODE,vvLINK   
158A                VVLINK:   .SET   $   
158A   23 72 70 40            DB   COMPO+3,"rp@"   
0E7A                          .ORG   vvCODE   
0E7A   C5                     DB   0C5h   ; PUSH	BC	;11t
0E7B   DD E5                  DB   0DDh,0E5h   ; PUSH IX	;15t
0E7D   C1                     DB   0C1h   ; POP	BC	;10t
0E7E                          ;*Macro unroll:  mNEXT
0E7E   EB                     EX   DE,HL   
0E7F                          ;*Macro unroll:  mNEXTHL                         ; 34t
0E7F   FD E9                  JP   (IY)   ; 34t
0E81                             ;   RP!         ( a -- )
0E81                             ;               Set the return stack pointer.
0E81                          ;*Macro unroll: mCODE	COMPO+3,'rp!',RPSTO
0E81                          ALIGN   2   
0E82                RPSTO:       
0E82                VVCODE:   .SET   $   
0E82                VVLEN:    .SET   (COMPO+3 & 01FH) / CELLL   
155E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
155E                VVNAME:   .SET   $   
155E   82 0E 8A 15            DW   vvCODE,vvLINK   
1562                VVLINK:   .SET   $   
1562   23 72 70 21            DB   COMPO+3,"rp!"   
0E82                          .ORG   vvCODE   
0E82   C5                     DB   0C5h   ; PUSH	BC	;11t
0E83   DD E1                  DB   0DDh,0E1h   ; POP IX	;14t
0E85   C1                     DB   0C1h   ; POP	BC	;10t
0E86                          ;*Macro unroll: 	mNEXT
0E86   EB                     EX   DE,HL   
0E87                          ;*Macro unroll:  mNEXTHL                         ; 34t
0E87   FD E9                  JP   (IY)   ; 34t
0E89                             ;   SP@         ( -- a )
0E89                             ;               Push the current data stack pointer.
0E89                          ;*Macro unroll: mCODE	3, 'sp@', SPAT
0E89                          ALIGN   2   
0E8A                SPAT:        
0E8A                VVCODE:   .SET   $   
0E8A                VVLEN:    .SET   (3 & 01FH) / CELLL   
1556                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1556                VVNAME:   .SET   $   
1556   8A 0E 62 15            DW   vvCODE,vvLINK   
155A                VVLINK:   .SET   $   
155A   03 73 70 40            DB   3,"sp@"   
0E8A                          .ORG   vvCODE   
0E8A   C5                     DB   0C5h   ; PUSH	BC	;11t
0E8B   21                     DB   021h   ; LD	HL,0	;10t
0E8C   00 00                  DW   0   
0E8E   39                     DB   039h   ; ADD	HL,SP	;11t
0E8F   44                     DB   044h   ; LD	B,H	; 4t
0E90   4D                     DB   04Dh   ; LD	C,L	; 4t
0E91                          ;*Macro unroll: 	mNEXT
0E91   EB                     EX   DE,HL   
0E92                          ;*Macro unroll:  mNEXTHL                         ; 34t
0E92   FD E9                  JP   (IY)   ; 34t
0E94                             ;   SP!         ( a -- )
0E94                             ;               Set the data stack pointer.
0E94                          ;*Macro unroll: mCODE	3,'sp!',SPSTO
0E94                          ALIGN   2   
0E94                SPSTO:       
0E94                VVCODE:   .SET   $   
0E94                VVLEN:    .SET   (3 & 01FH) / CELLL   
154E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
154E                VVNAME:   .SET   $   
154E   94 0E 5A 15            DW   vvCODE,vvLINK   
1552                VVLINK:   .SET   $   
1552   03 73 70 21            DB   3,"sp!"   
0E94                          .ORG   vvCODE   
0E94   60                     DB   060h   ; LD	H,B	; 4t
0E95   69                     DB   069h   ; LD	L,C	; 4t
0E96   F9                     DB   0F9h   ; LD	SP,HL	; 6t
0E97   C1                     DB   0C1h   ; POP	BC	;10t
0E98                          ;*Macro unroll: 	mNEXT
0E98   EB                     EX   DE,HL   
0E99                          ;*Macro unroll:  mNEXTHL                         ; 34t
0E99   FD E9                  JP   (IY)   ; 34t
0E9B                             ;   +!          ( n a -- )
0E9B                             ;               Add n to the contents at address a.
0E9B                          ;*Macro unroll: mCOLON  2,'+!',PSTOR
0E9B                          ;*Macro unroll:  mCODE 2, "+!", PSTOR
0E9B                          ALIGN   2   
0E9C                PSTOR:       
0E9C                VVCODE:   .SET   $   
0E9C                VVLEN:    .SET   (2 & 01FH) / CELLL   
1546                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1546                VVNAME:   .SET   $   
1546   9C 0E 52 15            DW   vvCODE,vvLINK   
154A                VVLINK:   .SET   $   
154A   02 2B 21               DB   2,"+!"   
0E9C                          .ORG   vvCODE   
0E9C   00                     NOP      
0E9D   CD 0E 06               CALL   doLIST   
0EA0   0A 10 12 10 58 0E 86 01 DW   SWAP,OVER,AT,PLUS   
0EA8   0A 10 4E 0E 5C 06      DW   SWAP,STORE,EXIT   
0EAE                             ;   2!          ( d a -- )
0EAE                             ;               STORE the double integer to address a.
0EAE                          ;*Macro unroll: mCOLON  2,'2!',DSTOR
0EAE                          ;*Macro unroll:  mCODE 2, "2!", DSTOR
0EAE                          ALIGN   2   
0EAE                DSTOR:       
0EAE                VVCODE:   .SET   $   
0EAE                VVLEN:    .SET   (2 & 01FH) / CELLL   
153E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
153E                VVNAME:   .SET   $   
153E   AE 0E 4A 15            DW   vvCODE,vvLINK   
1542                VVLINK:   .SET   $   
1542   02 32 21               DB   2,"2!"   
0EAE                          .ORG   vvCODE   
0EAE   00                     NOP      
0EAF   CD 0E 06               CALL   doLIST   
0EB2   0A 10 12 10 4E 0E      DW   SWAP,OVER,STORE   
0EB8   82 03 4E 0E 5C 06      DW   CELLP,STORE,EXIT   
0EBE                             ;   2@          ( a -- d )
0EBE                             ;               Fetch double integer from address a.
0EBE                          ;*Macro unroll: mCOLON  2,'2@',DAT
0EBE                          ;*Macro unroll:  mCODE 2, "2@", DAT
0EBE                          ALIGN   2   
0EBE                DAT:         
0EBE                VVCODE:   .SET   $   
0EBE                VVLEN:    .SET   (2 & 01FH) / CELLL   
1536                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1536                VVNAME:   .SET   $   
1536   BE 0E 42 15            DW   vvCODE,vvLINK   
153A                VVLINK:   .SET   $   
153A   02 32 40               DB   2,"2@"   
0EBE                          .ORG   vvCODE   
0EBE   00                     NOP      
0EBF   CD 0E 06               CALL   doLIST   
0EC2   02 10 82 03 58 0E      DW   DUPP,CELLP,AT   
0EC8   0A 10 58 0E 5C 06      DW   SWAP,AT,EXIT   
0ECE                             ;   COUNT       ( b -- b +n )
0ECE                             ;               Return count byte of a string and add 1 to byte address.
0ECE                          ;*Macro unroll: mCOLON  5,'COUNT',COUNT
0ECE                          ;*Macro unroll:  mCODE 5, "COUNT", COUNT
0ECE                          ALIGN   2   
0ECE                COUNT:       
0ECE                VVCODE:   .SET   $   
0ECE                VVLEN:    .SET   (5 & 01FH) / CELLL   
152C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
152C                VVNAME:   .SET   $   
152C   CE 0E 3A 15            DW   vvCODE,vvLINK   
1530                VVLINK:   .SET   $   
1530   05 43 4F 55 4E 54      DB   5,"COUNT"   
0ECE                          .ORG   vvCODE   
0ECE   00                     NOP      
0ECF   CD 0E 06               CALL   doLIST   
0ED2   02 10 1C 06 01 00 86 01 DW   DUPP,DOLIT,1,PLUS   
0EDA   0A 10 68 0E 5C 06      DW   SWAP,CAT,EXIT   
0EE0                             ;   HERE        ( -- a )
0EE0                             ;               Return the top of the code dictionary.
0EE0                          ;*Macro unroll: mCOLON  4,'HERE',HERE
0EE0                          ;*Macro unroll:  mCODE 4, "HERE", HERE
0EE0                          ALIGN   2   
0EE0                HERE:        
0EE0                VVCODE:   .SET   $   
0EE0                VVLEN:    .SET   (4 & 01FH) / CELLL   
1522                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1522                VVNAME:   .SET   $   
1522   E0 0E 30 15            DW   vvCODE,vvLINK   
1526                VVLINK:   .SET   $   
1526   04 48 45 52 45         DB   4,"HERE"   
0EE0                          .ORG   vvCODE   
0EE0   00                     NOP      
0EE1   CD 0E 06               CALL   doLIST   
0EE4   22 11 58 0E 5C 06      DW   CP,AT,EXIT   
0EEA                             ;   PAD         ( -- a )
0EEA                             ;               Return the address of a temporary buffer.
0EEA                          ;*Macro unroll: mCOLON  3,'PAD',PAD
0EEA                          ;*Macro unroll:  mCODE 3, "PAD", PAD
0EEA                          ALIGN   2   
0EEA                PAD:         
0EEA                VVCODE:   .SET   $   
0EEA                VVLEN:    .SET   (3 & 01FH) / CELLL   
151A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
151A                VVNAME:   .SET   $   
151A   EA 0E 26 15            DW   vvCODE,vvLINK   
151E                VVLINK:   .SET   $   
151E   03 50 41 44            DB   3,"PAD"   
0EEA                          .ORG   vvCODE   
0EEA   00                     NOP      
0EEB   CD 0E 06               CALL   doLIST   
0EEE   E0 0E 1C 06 50 00 86 01 5C 06 DW   HERE,DOLIT,80,PLUS,EXIT   
0EF8                             ;   TIB         ( -- a )
0EF8                             ;               Return the address of the terminal input buffer.
0EF8                          ;*Macro unroll: mCOLON  3,'TIB',TIB
0EF8                          ;*Macro unroll:  mCODE 3, "TIB", TIB
0EF8                          ALIGN   2   
0EF8                TIB:         
0EF8                VVCODE:   .SET   $   
0EF8                VVLEN:    .SET   (3 & 01FH) / CELLL   
1512                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1512                VVNAME:   .SET   $   
1512   F8 0E 1E 15            DW   vvCODE,vvLINK   
1516                VVLINK:   .SET   $   
1516   03 54 49 42            DB   3,"TIB"   
0EF8                          .ORG   vvCODE   
0EF8   00                     NOP      
0EF9   CD 0E 06               CALL   doLIST   
0EFC   E2 10 82 03 58 0E 5C 06 DW   NTIB,CELLP,AT,EXIT   
0F04                             ;   @EXECUTE    ( a -- )
0F04                             ;               Execute vector STOREd in address a.
0F04                          ;*Macro unroll: hCOLON  8,'@EXECUTE',ATEXE
0F04                          ;*Macro unroll:  hCODE 8, "@EXECUTE", ATEXE
0F04                          ALIGN   2   
0F04                ATEXE:       
0F04   00                     NOP      
0F05   CD 0E 06               CALL   doLIST   
0F08   58 0E 1A 10            DW   AT,QDUP   ;?address or zero
0F0C   32 0E 12 0F            DW   QBRAN,EXE1   
0F10   2E 0E                  DW   EXECU   ;execute if non-zero
0F12                EXE1:        
0F12   5C 06                  DW   EXIT   ;do nothing if zero
0F14                             ;   CMOVE       ( b1 b2 u -- )
0F14                             ;               Copy u bytes from b1 to b2.
0F14                          ;*Macro unroll: mCOLON  5,'CMOVE',CMOVE
0F14                          ;*Macro unroll:  mCODE 5, "CMOVE", CMOVE
0F14                          ALIGN   2   
0F14                CMOVE:       
0F14                VVCODE:   .SET   $   
0F14                VVLEN:    .SET   (5 & 01FH) / CELLL   
1508                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1508                VVNAME:   .SET   $   
1508   14 0F 16 15            DW   vvCODE,vvLINK   
150C                VVLINK:   .SET   $   
150C   05 43 4D 4F 56 45      DB   5,"CMOVE"   
0F14                          .ORG   vvCODE   
0F14   00                     NOP      
0F15   CD 0E 06               CALL   doLIST   
0F18   E6 0F                  DW   TOR   
0F1A   3E 0E 36 0F            DW   BRAN,CMOV2   
0F1E                CMOV1:       
0F1E   E6 0F 02 10 68 0E      DW   TOR,DUPP,CAT   
0F24   70 0E 60 0E            DW   RAT,CSTOR   
0F28   1C 06 01 00 86 01      DW   DOLIT,1,PLUS   
0F2E   F4 0F 1C 06 01 00 86 01 DW   RFROM,DOLIT,1,PLUS   
0F36                CMOV2:       
0F36   68 06 1E 0F            DW   DONXT,CMOV1   
0F3A   36 10 5C 06            DW   DDROP,EXIT   
0F3E                             ;   FILL        ( b u c -- )
0F3E                             ;               Fill u bytes of character c to area beginning at b.
0F3E                          ;*Macro unroll: mCOLON  4,'FILL',FILL
0F3E                          ;*Macro unroll:  mCODE 4, "FILL", FILL
0F3E                          ALIGN   2   
0F3E                FILL:        
0F3E                VVCODE:   .SET   $   
0F3E                VVLEN:    .SET   (4 & 01FH) / CELLL   
14FE                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
14FE                VVNAME:   .SET   $   
14FE   3E 0F 0C 15            DW   vvCODE,vvLINK   
1502                VVLINK:   .SET   $   
1502   04 46 49 4C 4C         DB   4,"FILL"   
0F3E                          .ORG   vvCODE   
0F3E   00                     NOP      
0F3F   CD 0E 06               CALL   doLIST   
0F42   0A 10 E6 0F 0A 10      DW   SWAP,TOR,SWAP   
0F48   3E 0E 56 0F            DW   BRAN,FILL2   
0F4C                FILL1:       
0F4C   40 10 60 0E 1C 06 01 00 86 01 DW   DDUP,CSTOR,DOLIT,1,PLUS   
0F56                FILL2:       
0F56   68 06 4C 0F            DW   DONXT,FILL1   
0F5A   36 10 5C 06            DW   DDROP,EXIT   
0F5E                             ;   -TRAILING   ( b u -- b u )
0F5E                             ;               Adjust the count to eliminate trailing white space.
0F5E                          ;*Macro unroll: mCOLON  9,'-TRAILING',DTRAI
0F5E                          ;*Macro unroll:  mCODE 9, "-TRAILING", DTRAI
0F5E                          ALIGN   2   
0F5E                DTRAI:       
0F5E                VVCODE:   .SET   $   
0F5E                VVLEN:    .SET   (9 & 01FH) / CELLL   
14F0                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
14F0                VVNAME:   .SET   $   
14F0   5E 0F 02 15            DW   vvCODE,vvLINK   
14F4                VVLINK:   .SET   $   
14F4   09 2D 54 52 41 49 4C 49 4E 47 DB   9,"-TRAILING"   
0F5E                          .ORG   vvCODE   
0F5E   00                     NOP      
0F5F   CD 0E 06               CALL   doLIST   
0F62   E6 0F                  DW   TOR   
0F64   3E 0E 82 0F            DW   BRAN,DTRA2   
0F68                DTRA1:       
0F68   4E 07 12 10 70 0E 86 01 68 0E 0C 02 DW   BLANK,OVER,RAT,PLUS,CAT,LESS   
0F74   32 0E 82 0F            DW   QBRAN,DTRA2   
0F78   F4 0F 1C 06 01 00 86 01 5C 06 DW   RFROM,DOLIT,1,PLUS,EXIT   ;adjusted count
0F82                DTRA2:       
0F82   68 06 68 0F            DW   DONXT,DTRA1   
0F86   1C 06 00 00 5C 06      DW   DOLIT,0,EXIT   ;count=0
0F8C                             ;   PACK$       ( b u a -- a )
0F8C                             ;               Build a counted string with u characters from b. Null fill.
0F8C                          ;*Macro unroll: mCOLON  5,'PACK$',PACKS
0F8C                          ;*Macro unroll:  mCODE 5, "PACK$", PACKS
0F8C                          ALIGN   2   
0F8C                PACKS:       
0F8C                VVCODE:   .SET   $   
0F8C                VVLEN:    .SET   (5 & 01FH) / CELLL   
14E6                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
14E6                VVNAME:   .SET   $   
14E6   8C 0F F4 14            DW   vvCODE,vvLINK   
14EA                VVLINK:   .SET   $   
14EA   05 50 41 43 4B 24      DB   5,"PACK$"   
0F8C                          .ORG   vvCODE   
0F8C   00                     NOP      
0F8D   CD 0E 06               CALL   doLIST   
0F90   C6 0F 02 10 E6 0F      DW   ALGND,DUPP,TOR   ;strings only on cell boundary
0F96   12 10 02 10 1C 06 00 00 DW   OVER,DUPP,DOLIT,0   
0F9E   1C 06 02 00 6A 02 06 10 DW   DOLIT,CELLL,UMMOD,DROP   ;count mod cell
0FA6   C0 01 12 10 86 01      DW   SUBB,OVER,PLUS   
0FAC   1C 06 00 00 0A 10 4E 0E DW   DOLIT,0,SWAP,STORE   ;null fill cell
0FB4   40 10 60 0E 1C 06 01 00 86 01 DW   DDUP,CSTOR,DOLIT,1,PLUS   ;save count
0FBE   0A 10 14 0F F4 0F 5C 06 DW   SWAP,CMOVE,RFROM,EXIT   ;move string
0FC6                             ;   ALIGNED     ( b -- a )
0FC6                             ;               Align address to the cell boundary.
0FC6                          ;*Macro unroll: mCOLON  7,'ALIGNED', ALGND
0FC6                          ;*Macro unroll:  mCODE 7, "ALIGNED", ALGND
0FC6                          ALIGN   2   
0FC6                ALGND:       
0FC6                VVCODE:   .SET   $   
0FC6                VVLEN:    .SET   (7 & 01FH) / CELLL   
14DA                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
14DA                VVNAME:   .SET   $   
14DA   C6 0F EA 14            DW   vvCODE,vvLINK   
14DE                VVLINK:   .SET   $   
14DE   07 41 4C 49 47 4E 45 44 DB   7,"ALIGNED"   
0FC6                          .ORG   vvCODE   
0FC6   00                     NOP      
0FC7   CD 0E 06               CALL   doLIST   
0FCA                             ;     DW      DUPP,DOLIT,0,DOLIT,CELLL
0FCA                             ;     DW      UMMOD,DROP,DUPP
0FCA                             ;     DW      QBRAN,ALGN1
0FCA                             ;     DW      DOLIT,CELLL,SWAP,SUBB
0FCA                             ; ALGN1:
0FCA                             ;     DW      PLUS
0FCA   5C 06                  DW   EXIT   
0FCC                             ; GREETING:       .cstr   "Type something\r\n"
0FCC   44 49 56 20 42 59 20 5A 45 52 4F 00 ERR_DIVZERO:   .CSTR   "DIV BY ZERO"   ;-10
0FD8   4F 55 54 20 4F 46 20 52 41 4E 47 45 00 ERR_OUTOFRANGE:   .CSTR   "OUT OF RANGE"   ;-11
0FE5                             ;   >R          ( w -- )
0FE5                             ;               Push the data stack to the return stack.
0FE5                          ;*Macro unroll: mCODE	COMPO+2, '>R', ToR
0FE5                          ALIGN   2   
0FE6                TOR:         
0FE6                VVCODE:   .SET   $   
0FE6                VVLEN:    .SET   (COMPO+2 & 01FH) / CELLL   
14B2                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
14B2                VVNAME:   .SET   $   
14B2   E6 0F DE 14            DW   vvCODE,vvLINK   
14B6                VVLINK:   .SET   $   
14B6   22 3E 52               DB   COMPO+2,">R"   
0FE6                          .ORG   vvCODE   
0FE6   DD 2B                  DEC   IX   
0FE8   DD 70 00               LD   (IX+0),B   
0FEB   DD 2B                  DEC   IX   
0FED   DD 71 00               LD   (IX+0),C   
0FF0   C1                     POP   BC   
0FF1                          ;*Macro unroll: 	mNEXT
0FF1   EB                     EX   DE,HL   
0FF2                          ;*Macro unroll:  mNEXTHL                         ; 34t
0FF2   FD E9                  JP   (IY)   ; 34t
0FF4                             ;   R>          ( -- w )
0FF4                             ;               Pop the return stack to the data stack.
0FF4                          ;*Macro unroll: mCODE	COMPO+2, 'R>', RFrom
0FF4                          ALIGN   2   
0FF4                RFROM:       
0FF4                VVCODE:   .SET   $   
0FF4                VVLEN:    .SET   (COMPO+2 & 01FH) / CELLL   
148A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
148A                VVNAME:   .SET   $   
148A   F4 0F B6 14            DW   vvCODE,vvLINK   
148E                VVLINK:   .SET   $   
148E   22 52 3E               DB   COMPO+2,"R>"   
0FF4                          .ORG   vvCODE   
0FF4   C5                     PUSH   BC   
0FF5   DD 4E 00               LD   C,(IX+0)   
0FF8   DD 23                  INC   IX   
0FFA   DD 46 00               LD   B,(IX+0)   
0FFD   DD 23                  INC   IX   
0FFF                          ;*Macro unroll: 	mNEXT
0FFF   EB                     EX   DE,HL   
1000                          ;*Macro unroll:  mNEXTHL                         ; 34t
1000   FD E9                  JP   (IY)   ; 34t
1002                             ;   DUP         ( w -- w w )
1002                             ;               Duplicate the top stack item.
1002                          ;*Macro unroll: mCODE	3, 'DUP', DUPP
1002                          ALIGN   2   
1002                DUPP:        
1002                VVCODE:   .SET   $   
1002                VVLEN:    .SET   (3 & 01FH) / CELLL   
1482                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1482                VVNAME:   .SET   $   
1482   02 10 8E 14            DW   vvCODE,vvLINK   
1486                VVLINK:   .SET   $   
1486   03 44 55 50            DB   3,"DUP"   
1002                          .ORG   vvCODE   
1002   C5                     PUSH   BC   
1003                          ;*Macro unroll:  mNEXT
1003   EB                     EX   DE,HL   
1004                          ;*Macro unroll:  mNEXTHL                         ; 34t
1004   FD E9                  JP   (IY)   ; 34t
1006                             ;   DROP	( x -- )			\ CORE
1006                             ;		Discard top stack item.
1006                          ;*Macro unroll: mCODE	4, 'DROP', DROP
1006                          ALIGN   2   
1006                DROP:        
1006                VVCODE:   .SET   $   
1006                VVLEN:    .SET   (4 & 01FH) / CELLL   
1478                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1478                VVNAME:   .SET   $   
1478   06 10 86 14            DW   vvCODE,vvLINK   
147C                VVLINK:   .SET   $   
147C   04 44 52 4F 50         DB   4,"DROP"   
1006                          .ORG   vvCODE   
1006   C1                     POP   BC   
1007                          ;*Macro unroll:  mNEXT
1007   EB                     EX   DE,HL   
1008                          ;*Macro unroll:  mNEXTHL                         ; 34t
1008   FD E9                  JP   (IY)   ; 34t
100A                             ;   SWAP        ( w1 w2 -- w2 w1 )
100A                             ;               Exchange top two stack items.
100A                          ;*Macro unroll: mCODE	4, 'SWAP', SWAP
100A                          ALIGN   2   
100A                SWAP:        
100A                VVCODE:   .SET   $   
100A                VVLEN:    .SET   (4 & 01FH) / CELLL   
146E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
146E                VVNAME:   .SET   $   
146E   0A 10 7C 14            DW   vvCODE,vvLINK   
1472                VVLINK:   .SET   $   
1472   04 53 57 41 50         DB   4,"SWAP"   
100A                          .ORG   vvCODE   
100A   E1                     POP   HL   
100B   C5                     PUSH   BC   
100C   44                     LD   B,H   
100D   4D                     LD   C,L   
100E                          ;*Macro unroll: 	mNEXT
100E   EB                     EX   DE,HL   
100F                          ;*Macro unroll:  mNEXTHL                         ; 34t
100F   FD E9                  JP   (IY)   ; 34t
1011                             ;   OVER        ( w1 w2 -- w1 w2 w1 )
1011                             ;               Copy second stack item to top.
1011                          ;*Macro unroll: mCODE	4, 'OVER', OVER
1011                          ALIGN   2   
1012                OVER:        
1012                VVCODE:   .SET   $   
1012                VVLEN:    .SET   (4 & 01FH) / CELLL   
1464                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1464                VVNAME:   .SET   $   
1464   12 10 72 14            DW   vvCODE,vvLINK   
1468                VVLINK:   .SET   $   
1468   04 4F 56 45 52         DB   4,"OVER"   
1012                          .ORG   vvCODE   
1012   E1                     POP   HL   
1013   E5                     PUSH   HL   
1014   C5                     PUSH   BC   
1015   44                     LD   B,H   
1016   4D                     LD   C,L   
1017                          ;*Macro unroll: 	mNEXT
1017   EB                     EX   DE,HL   
1018                          ;*Macro unroll:  mNEXTHL                         ; 34t
1018   FD E9                  JP   (IY)   ; 34t
101A                             ;   ?DUP        ( w -- w w | 0 )
101A                             ;               Dup tos if its is not zero.
101A                          ;*Macro unroll: mCOLON	4,'?DUP', QDUP
101A                          ;*Macro unroll:  mCODE 4, "?DUP", QDUP
101A                          ALIGN   2   
101A                QDUP:        
101A                VVCODE:   .SET   $   
101A                VVLEN:    .SET   (4 & 01FH) / CELLL   
145A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
145A                VVNAME:   .SET   $   
145A   1A 10 68 14            DW   vvCODE,vvLINK   
145E                VVLINK:   .SET   $   
145E   04 3F 44 55 50         DB   4,"?DUP"   
101A                          .ORG   vvCODE   
101A   00                     NOP      
101B   CD 0E 06               CALL   doLIST   
101E   02 10 32 0E 26 10      DW   DUPP,QBRAN,QDUP1   
1024   02 10                  DW   DUPP   
1026                QDUP1:       
1026   5C 06                  DW   EXIT   
1028                             ;   ROT         ( w1 w2 w3 -- w2 w3 w1 )
1028                             ;               Rot 3rd item to top.
1028                          ;*Macro unroll: mCOLON	3,'ROT', ROT
1028                          ;*Macro unroll:  mCODE 3, "ROT", ROT
1028                          ALIGN   2   
1028                ROT:         
1028                VVCODE:   .SET   $   
1028                VVLEN:    .SET   (3 & 01FH) / CELLL   
1452                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1452                VVNAME:   .SET   $   
1452   28 10 5E 14            DW   vvCODE,vvLINK   
1456                VVLINK:   .SET   $   
1456   03 52 4F 54            DB   3,"ROT"   
1028                          .ORG   vvCODE   
1028   00                     NOP      
1029   CD 0E 06               CALL   doLIST   
102C   E6 0F 0A 10 F4 0F 0A 10 5C 06 DW   ToR,SWAP,RFrom,SWAP,EXIT   
1036                             ;   2DROP       ( w w -- )
1036                             ;               Discard two items on stack.
1036                          ;*Macro unroll: mCOLON	5,'2DROP',DDROP
1036                          ;*Macro unroll:  mCODE 5, "2DROP", DDROP
1036                          ALIGN   2   
1036                DDROP:       
1036                VVCODE:   .SET   $   
1036                VVLEN:    .SET   (5 & 01FH) / CELLL   
1448                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1448                VVNAME:   .SET   $   
1448   36 10 56 14            DW   vvCODE,vvLINK   
144C                VVLINK:   .SET   $   
144C   05 32 44 52 4F 50      DB   5,"2DROP"   
1036                          .ORG   vvCODE   
1036   00                     NOP      
1037   CD 0E 06               CALL   doLIST   
103A   06 10 06 10 5C 06      DW   DROP,DROP,EXIT   
1040                             ;   2DUP        ( w1 w2 -- w1 w2 w1 w2 )
1040                             ;               Duplicate top two items.
1040                          ;*Macro unroll: mCOLON	4,'2DUP',DDUP
1040                          ;*Macro unroll:  mCODE 4, "2DUP", DDUP
1040                          ALIGN   2   
1040                DDUP:        
1040                VVCODE:   .SET   $   
1040                VVLEN:    .SET   (4 & 01FH) / CELLL   
143E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
143E                VVNAME:   .SET   $   
143E   40 10 4C 14            DW   vvCODE,vvLINK   
1442                VVLINK:   .SET   $   
1442   04 32 44 55 50         DB   4,"2DUP"   
1040                          .ORG   vvCODE   
1040   00                     NOP      
1041   CD 0E 06               CALL   doLIST   
1044   12 10 12 10 5C 06      DW   OVER,OVER,EXIT   
104A                             ;   2SWAP        ( w1 w2 w3 w4 -- w3 w4 w1 w2 )
104A                             ;               Exchange top two items.
104A                          ;*Macro unroll: mCOLON	5,'2SWAP',TwoSWAP
104A                          ;*Macro unroll:  mCODE 5, "2SWAP", TwoSWAP
104A                          ALIGN   2   
104A                TWOSWAP:      
104A                VVCODE:   .SET   $   
104A                VVLEN:    .SET   (5 & 01FH) / CELLL   
1434                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1434                VVNAME:   .SET   $   
1434   4A 10 42 14            DW   vvCODE,vvLINK   
1438                VVLINK:   .SET   $   
1438   05 32 53 57 41 50      DB   5,"2SWAP"   
104A                          .ORG   vvCODE   
104A   00                     NOP      
104B   CD 0E 06               CALL   doLIST   
104E   28 10 E6 0F 28 10 F4 0F 5C 06 DW   ROT,ToR,ROT,RFrom,EXIT   
1058                             ;   PICK        ( ... +n -- ... w )
1058                             ;               Copy the nth stack item to tos.
1058                          ;*Macro unroll: mCOLON  4,'PICK',PICK
1058                          ;*Macro unroll:  mCODE 4, "PICK", PICK
1058                          ALIGN   2   
1058                PICK:        
1058                VVCODE:   .SET   $   
1058                VVLEN:    .SET   (4 & 01FH) / CELLL   
142A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
142A                VVNAME:   .SET   $   
142A   58 10 38 14            DW   vvCODE,vvLINK   
142E                VVLINK:   .SET   $   
142E   04 50 49 43 4B         DB   4,"PICK"   
1058                          .ORG   vvCODE   
1058   00                     NOP      
1059   CD 0E 06               CALL   doLIST   
105C   1C 06 01 00 86 01 9A 03 DW   DOLIT,1,PLUS,CELLS   
1064   8A 0E 86 01 58 0E 5C 06 DW   SPAT,PLUS,AT,EXIT   
106C                             ;   DEPTH       ( -- n )
106C                             ;               Return the depth of the data stack.
106C                          ;*Macro unroll: mCOLON	5,'DEPTH',DEPTH
106C                          ;*Macro unroll:  mCODE 5, "DEPTH", DEPTH
106C                          ALIGN   2   
106C                DEPTH:       
106C                VVCODE:   .SET   $   
106C                VVLEN:    .SET   (5 & 01FH) / CELLL   
1420                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1420                VVNAME:   .SET   $   
1420   6C 10 2E 14            DW   vvCODE,vvLINK   
1424                VVLINK:   .SET   $   
1424   05 44 45 50 54 48      DB   5,"DEPTH"   
106C                          .ORG   vvCODE   
106C   00                     NOP      
106D   CD 0E 06               CALL   doLIST   
1070   8A 0E 82 10 58 0E 0A 10 C0 01 DW   SPAT,SZero,AT,SWAP,SUBB   
107A   1C 06 02 00 18 03 5C 06 DW   DOLIT,CELLL,Slash,EXIT   
1082                             ;   SP0         ( -- a )
1082                             ;               Pointer to bottom of the data stack.
1082                          ;*Macro unroll: mUSER   3,'SP0',SZERO
1082                          ;*Macro unroll: 	mCODE 3, "SP0", SZERO
1082                          ALIGN   2   
1082                SZERO:       
1082                VVCODE:   .SET   $   
1082                VVLEN:    .SET   (3 & 01FH) / CELLL   
1418                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1418                VVNAME:   .SET   $   
1418   82 10 24 14            DW   vvCODE,vvLINK   
141C                VVLINK:   .SET   $   
141C   03 53 50 30            DB   3,"SP0"   
1082                          .ORG   vvCODE   
1082   00                     NOP      
1083   CD 0E 06               CALL   doLIST   
1086   34 06 00 00            DW   DoUSE,vvUSER   
108A                VVUSER:   .SET   vvUSER + CELLL   
108A                             ;   RP0         ( -- a )
108A                             ;               Pointer to bottom of the return stack.
108A                          ;*Macro unroll: mUSER   3,'RP0',RZERO
108A                          ;*Macro unroll: 	mCODE 3, "RP0", RZERO
108A                          ALIGN   2   
108A                RZERO:       
108A                VVCODE:   .SET   $   
108A                VVLEN:    .SET   (3 & 01FH) / CELLL   
1410                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1410                VVNAME:   .SET   $   
1410   8A 10 1C 14            DW   vvCODE,vvLINK   
1414                VVLINK:   .SET   $   
1414   03 52 50 30            DB   3,"RP0"   
108A                          .ORG   vvCODE   
108A   00                     NOP      
108B   CD 0E 06               CALL   doLIST   
108E   34 06 02 00            DW   DoUSE,vvUSER   
1092                VVUSER:   .SET   vvUSER + CELLL   
1092                             ;   '?KEY       ( -- a )
1092                             ;               Execution vector of ?KEY.
1092                          ;*Macro unroll: hUSER   5,"'?KEY",TQKEY
1092                          ;*Macro unroll: 	hCODE 5, "'?KEY", TQKEY
1092                          ALIGN   2   
1092                TQKEY:       
1092   00                     NOP      
1093   CD 0E 06               CALL   doLIST   
1096   34 06 04 00            DW   DoUSE,vvUSER   
109A                VVUSER:   .SET   vvUSER + CELLL   
109A                             ;   'EMIT       ( -- a )
109A                             ;               Execution vector of EMIT.
109A                          ;*Macro unroll: hUSER   5,"'EMIT",TEMIT
109A                          ;*Macro unroll: 	hCODE 5, "'EMIT", TEMIT
109A                          ALIGN   2   
109A                TEMIT:       
109A   00                     NOP      
109B   CD 0E 06               CALL   doLIST   
109E   34 06 06 00            DW   DoUSE,vvUSER   
10A2                VVUSER:   .SET   vvUSER + CELLL   
10A2                             ;   'EXPECT     ( -- a )
10A2                             ;               Execution vector of EXPECT.
10A2                          ;*Macro unroll: hUSER   7,"'EXPECT",TEXPE
10A2                          ;*Macro unroll: 	hCODE 7, "'EXPECT", TEXPE
10A2                          ALIGN   2   
10A2                TEXPE:       
10A2   00                     NOP      
10A3   CD 0E 06               CALL   doLIST   
10A6   34 06 08 00            DW   DoUSE,vvUSER   
10AA                VVUSER:   .SET   vvUSER + CELLL   
10AA                             ;   'TAP        ( -- a )
10AA                             ;               Execution vector of TAP.
10AA                          ;*Macro unroll: hUSER   4,"'TAP",TTAP
10AA                          ;*Macro unroll: 	hCODE 4, "'TAP", TTAP
10AA                          ALIGN   2   
10AA                TTAP:        
10AA   00                     NOP      
10AB   CD 0E 06               CALL   doLIST   
10AE   34 06 0A 00            DW   DoUSE,vvUSER   
10B2                VVUSER:   .SET   vvUSER + CELLL   
10B2                             ;   'ECHO       ( -- a )
10B2                             ;               Execution vector of ECHO.
10B2                          ;*Macro unroll: hUSER   5,"'ECHO",TECHO
10B2                          ;*Macro unroll: 	hCODE 5, "'ECHO", TECHO
10B2                          ALIGN   2   
10B2                TECHO:       
10B2   00                     NOP      
10B3   CD 0E 06               CALL   doLIST   
10B6   34 06 0C 00            DW   DoUSE,vvUSER   
10BA                VVUSER:   .SET   vvUSER + CELLL   
10BA                             ;   'PROMPT     ( -- a )
10BA                             ;               Execution vector of PROMPT.
10BA                          ;*Macro unroll: hUSER   7,"'PROMPT",TPROM
10BA                          ;*Macro unroll: 	hCODE 7, "'PROMPT", TPROM
10BA                          ALIGN   2   
10BA                TPROM:       
10BA   00                     NOP      
10BB   CD 0E 06               CALL   doLIST   
10BE   34 06 0E 00            DW   DoUSE,vvUSER   
10C2                VVUSER:   .SET   vvUSER + CELLL   
10C2                             ;   BASE        ( -- a )
10C2                             ;               Storage of the radix base for numeric I/O.
10C2                          ;*Macro unroll: mUSER   4,'BASE',BASE
10C2                          ;*Macro unroll: 	mCODE 4, "BASE", BASE
10C2                          ALIGN   2   
10C2                BASE:        
10C2                VVCODE:   .SET   $   
10C2                VVLEN:    .SET   (4 & 01FH) / CELLL   
1406                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1406                VVNAME:   .SET   $   
1406   C2 10 14 14            DW   vvCODE,vvLINK   
140A                VVLINK:   .SET   $   
140A   04 42 41 53 45         DB   4,"BASE"   
10C2                          .ORG   vvCODE   
10C2   00                     NOP      
10C3   CD 0E 06               CALL   doLIST   
10C6   34 06 10 00            DW   DoUSE,vvUSER   
10CA                VVUSER:   .SET   vvUSER + CELLL   
10CA                             ;   tmp         ( -- a )
10CA                             ;               A temporary storage location used in parse and find.
10CA                          ;*Macro unroll: mUSER   COMPO+3,'tmp',TEMP
10CA                          ;*Macro unroll: 	mCODE COMPO+3, "tmp", TEMP
10CA                          ALIGN   2   
10CA                TEMP:        
10CA                VVCODE:   .SET   $   
10CA                VVLEN:    .SET   (COMPO+3 & 01FH) / CELLL   
13DE                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
13DE                VVNAME:   .SET   $   
13DE   CA 10 0A 14            DW   vvCODE,vvLINK   
13E2                VVLINK:   .SET   $   
13E2   23 74 6D 70            DB   COMPO+3,"tmp"   
10CA                          .ORG   vvCODE   
10CA   00                     NOP      
10CB   CD 0E 06               CALL   doLIST   
10CE   34 06 12 00            DW   DoUSE,vvUSER   
10D2                VVUSER:   .SET   vvUSER + CELLL   
10D2                             ;   SPAN        ( -- a )
10D2                             ;               Hold character count received by EXPECT.
10D2                          ;*Macro unroll: hUSER   4,'SPAN',SPAN
10D2                          ;*Macro unroll: 	hCODE 4, "SPAN", SPAN
10D2                          ALIGN   2   
10D2                SPAN:        
10D2   00                     NOP      
10D3   CD 0E 06               CALL   doLIST   
10D6   34 06 14 00            DW   DoUSE,vvUSER   
10DA                VVUSER:   .SET   vvUSER + CELLL   
10DA                             ;   >IN         ( -- a )
10DA                             ;               Hold the character pointer while parsing input stream.
10DA                          ;*Macro unroll: mUSER   3,'>IN',INN
10DA                          ;*Macro unroll: 	mCODE 3, ">IN", INN
10DA                          ALIGN   2   
10DA                INN:         
10DA                VVCODE:   .SET   $   
10DA                VVLEN:    .SET   (3 & 01FH) / CELLL   
13D6                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
13D6                VVNAME:   .SET   $   
13D6   DA 10 E2 13            DW   vvCODE,vvLINK   
13DA                VVLINK:   .SET   $   
13DA   03 3E 49 4E            DB   3,">IN"   
10DA                          .ORG   vvCODE   
10DA   00                     NOP      
10DB   CD 0E 06               CALL   doLIST   
10DE   34 06 16 00            DW   DoUSE,vvUSER   
10E2                VVUSER:   .SET   vvUSER + CELLL   
10E2                             ;   #TIB        ( -- a )
10E2                             ;               Hold the current count and address of the terminal input buffer.
10E2                          ;*Macro unroll: hUSER   4,'#TIB',NTIB
10E2                          ;*Macro unroll: 	hCODE 4, "#TIB", NTIB
10E2                          ALIGN   2   
10E2                NTIB:        
10E2   00                     NOP      
10E3   CD 0E 06               CALL   doLIST   
10E6   34 06 18 00            DW   DoUSE,vvUSER   
10EA                VVUSER:   .SET   vvUSER + CELLL   
10EA                VVUSER:   .SET   vvUSER + CELLL   
10EA                             ;   CSP         ( -- a )
10EA                             ;               Hold the stack pointer for error checking.
10EA                          ;*Macro unroll: hUSER   3,'CSP',CSP
10EA                          ;*Macro unroll: 	hCODE 3, "CSP", CSP
10EA                          ALIGN   2   
10EA                CSP:         
10EA   00                     NOP      
10EB   CD 0E 06               CALL   doLIST   
10EE   34 06 1C 00            DW   DoUSE,vvUSER   
10F2                VVUSER:   .SET   vvUSER + CELLL   
10F2                             ;   'EVAL       ( -- a )
10F2                             ;               Execution vector of EVAL.
10F2                          ;*Macro unroll: hUSER   5,"'EVAL",TEVAL
10F2                          ;*Macro unroll: 	hCODE 5, "'EVAL", TEVAL
10F2                          ALIGN   2   
10F2                TEVAL:       
10F2   00                     NOP      
10F3   CD 0E 06               CALL   doLIST   
10F6   34 06 1E 00            DW   DoUSE,vvUSER   
10FA                VVUSER:   .SET   vvUSER + CELLL   
10FA                             ;   'NUMBER     ( -- a )
10FA                             ;               Execution vector of NUMBER?.
10FA                          ;*Macro unroll: hUSER   7,"'NUMBER",TNUMB
10FA                          ;*Macro unroll: 	hCODE 7, "'NUMBER", TNUMB
10FA                          ALIGN   2   
10FA                TNUMB:       
10FA   00                     NOP      
10FB   CD 0E 06               CALL   doLIST   
10FE   34 06 20 00            DW   DoUSE,vvUSER   
1102                VVUSER:   .SET   vvUSER + CELLL   
1102                             ;   HLD         ( -- a )
1102                             ;               Hold a pointer in building a numeric output string.
1102                          ;*Macro unroll: hUSER   3,'HLD',HLD
1102                          ;*Macro unroll: 	hCODE 3, "HLD", HLD
1102                          ALIGN   2   
1102                HLD:         
1102   00                     NOP      
1103   CD 0E 06               CALL   doLIST   
1106   34 06 22 00            DW   DoUSE,vvUSER   
110A                VVUSER:   .SET   vvUSER + CELLL   
110A                             ;   HANDLER     ( -- a )
110A                             ;               Hold the return stack pointer for error handling.
110A                          ;*Macro unroll: hUSER   7,'HANDLER',HANDL
110A                          ;*Macro unroll: 	hCODE 7, "HANDLER", HANDL
110A                          ALIGN   2   
110A                HANDL:       
110A   00                     NOP      
110B   CD 0E 06               CALL   doLIST   
110E   34 06 24 00            DW   DoUSE,vvUSER   
1112                VVUSER:   .SET   vvUSER + CELLL   
1112                             ;   CONTEXT     ( -- a )
1112                             ;               A area to specify vocabulary search order.
1112                          ;*Macro unroll: hUSER   7,'CONTEXT',CNTXT
1112                          ;*Macro unroll: 	hCODE 7, "CONTEXT", CNTXT
1112                          ALIGN   2   
1112                CNTXT:       
1112   00                     NOP      
1113   CD 0E 06               CALL   doLIST   
1116   34 06 26 00            DW   DoUSE,vvUSER   
111A                VVUSER:   .SET   vvUSER + CELLL   
111A                VVUSER:   .SET   vvUSER + VOCSS * CELLL   ;vocabulary stack
111A                             ;   CURRENT     ( -- a )
111A                             ;               Point to the vocabulary to be extended.
111A                          ;*Macro unroll: hUSER   7,'CURRENT',CRRNT
111A                          ;*Macro unroll: 	hCODE 7, "CURRENT", CRRNT
111A                          ALIGN   2   
111A                CRRNT:       
111A   00                     NOP      
111B   CD 0E 06               CALL   doLIST   
111E   34 06 38 00            DW   DoUSE,vvUSER   
1122                VVUSER:   .SET   vvUSER + CELLL   
1122                VVUSER:   .SET   vvUSER + CELLL   ;vocabulary link pointer
1122                             ;   CP          ( -- a )
1122                             ;               Point to the top of the code dictionary.
1122                          ;*Macro unroll: hUSER   2,'CP',CP
1122                          ;*Macro unroll: 	hCODE 2, "CP", CP
1122                          ALIGN   2   
1122                CP:          
1122   00                     NOP      
1123   CD 0E 06               CALL   doLIST   
1126   34 06 3C 00            DW   DoUSE,vvUSER   
112A                VVUSER:   .SET   vvUSER + CELLL   
112A                             ;   NP          ( -- a )
112A                             ;               Point to the bottom of the name dictionary.
112A                          ;*Macro unroll: hUSER   2,'NP',NP
112A                          ;*Macro unroll: 	hCODE 2, "NP", NP
112A                          ALIGN   2   
112A                NP:          
112A   00                     NOP      
112B   CD 0E 06               CALL   doLIST   
112E   34 06 3E 00            DW   DoUSE,vvUSER   
1132                VVUSER:   .SET   vvUSER + CELLL   
1132                             ;   LAST        ( -- a )
1132                             ;               Point to the last name in the name dictionary.
1132                          ;*Macro unroll: mUSER   4,'LAST',LAST
1132                          ;*Macro unroll: 	mCODE 4, "LAST", LAST
1132                          ALIGN   2   
1132                LAST:        
1132                VVCODE:   .SET   $   
1132                VVLEN:    .SET   (4 & 01FH) / CELLL   
13CC                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
13CC                VVNAME:   .SET   $   
13CC   32 11 DA 13            DW   vvCODE,vvLINK   
13D0                VVLINK:   .SET   $   
13D0   04 4C 41 53 54         DB   4,"LAST"   
1132                          .ORG   vvCODE   
1132   00                     NOP      
1133   CD 0E 06               CALL   doLIST   
1136   34 06 40 00            DW   DoUSE,vvUSER   
113A                VVUSER:   .SET   vvUSER + CELLL   
113A                             ;   forth       ( -- a )
113A                             ;               Point to the last name in the name dictionary.
113A                          ;*Macro unroll: hUSER   5,'forth',VFRTH
113A                          ;*Macro unroll: 	hCODE 5, "forth", VFRTH
113A                          ALIGN   2   
113A                VFRTH:       
113A   00                     NOP      
113B   CD 0E 06               CALL   doLIST   
113E   34 06 42 00            DW   DoUSE,vvUSER   
1142                VVUSER:   .SET   vvUSER + CELLL   
1142                             ;   _TYPE       ( b u -- )
1142                             ;               Display a string. Filter non-printing characters.
1142                          ;*Macro unroll: mCOLON  5,'_TYPE',UTYPE
1142                          ;*Macro unroll:  mCODE 5, "_TYPE", UTYPE
1142                          ALIGN   2   
1142                UTYPE:       
1142                VVCODE:   .SET   $   
1142                VVLEN:    .SET   (5 & 01FH) / CELLL   
13C2                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
13C2                VVNAME:   .SET   $   
13C2   42 11 D0 13            DW   vvCODE,vvLINK   
13C6                VVLINK:   .SET   $   
13C6   05 5F 54 59 50 45      DB   5,"_TYPE"   
1142                          .ORG   vvCODE   
1142   00                     NOP      
1143   CD 0E 06               CALL   doLIST   
1146   E6 0F                  DW   TOR   ;start count down loop
1148   3E 0E 5A 11            DW   BRAN,UTYP2   ;skip first pass
114C                UTYP1:       
114C   02 10 68 0E 58 07 B6 0B DW   DUPP,CAT,TCHAR,EMIT   ;display only printable
1154   1C 06 01 00 86 01      DW   DOLIT,1,PLUS   ;increment address
115A                UTYP2:       
115A   68 06 4C 11            DW   DONXT,UTYP1   ;loop till done
115E   06 10 5C 06            DW   DROP,EXIT   
1162                             ;   dm+         ( a u -- a )
1162                             ;               Dump u bytes from , leaving a+u on the stack.
1162                          ;*Macro unroll: hCOLON  3,'dm+',DMP
1162                          ;*Macro unroll:  hCODE 3, "dm+", DMP
1162                          ALIGN   2   
1162                DMP:         
1162   00                     NOP      
1163   CD 0E 06               CALL   doLIST   
1166   12 10 1C 06 04 00 7E 0C DW   OVER,DOLIT,4,UDOTR   ;display address
116E   E6 0B E6 0F            DW   SPACE,TOR   ;start count down loop
1172   3E 0E 86 11            DW   BRAN,PDUM2   ;skip first pass
1176                PDUM1:       
1176   02 10 68 0E 1C 06 03 00 7E 0C DW   DUPP,CAT,DOLIT,3,UDOTR   ;display numeric data
1180   1C 06 01 00 86 01      DW   DOLIT,1,PLUS   ;increment address
1186                PDUM2:       
1186   68 06 76 11            DW   DONXT,PDUM1   ;loop till done
118A   5C 06                  DW   EXIT   
118C                             ;   DUMP        ( a u -- )
118C                             ;               Dump u bytes from a, in a formatted manner.
118C                          ;*Macro unroll: mCOLON  4,'DUMP',DUMP
118C                          ;*Macro unroll:  mCODE 4, "DUMP", DUMP
118C                          ALIGN   2   
118C                DUMP:        
118C                VVCODE:   .SET   $   
118C                VVLEN:    .SET   (4 & 01FH) / CELLL   
13B8                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
13B8                VVNAME:   .SET   $   
13B8   8C 11 C6 13            DW   vvCODE,vvLINK   
13BC                VVLINK:   .SET   $   
13BC   04 44 55 4D 50         DB   4,"DUMP"   
118C                          .ORG   vvCODE   
118C   00                     NOP      
118D   CD 0E 06               CALL   doLIST   
1190   C2 10 58 0E E6 0F 32 07 DW   BASE,AT,TOR,HEX   ;save radix, set hex
1198   1C 06 10 00 18 03      DW   DOLIT,16,SLASH   ;change count to lines
119E   E6 0F                  DW   TOR   ;start count down loop
11A0                DUMP1:       
11A0   44 0C 1C 06 10 00 40 10 62 11 DW   CR,DOLIT,16,DDUP,DMP   ;display numeric
11AA   28 10 28 10            DW   ROT,ROT   
11AE   E6 0B E6 0B 42 11      DW   SPACE,SPACE,UTYPE   ;display printable characters
11B4   C2 0B 90 01            DW   NUFQ,INVER   ;user control
11B8   32 0E C4 11            DW   QBRAN,DUMP2   
11BC   68 06 A0 11            DW   DONXT,DUMP1   ;loop till done
11C0   3E 0E C8 11            DW   BRAN,DUMP3   
11C4                DUMP2:       
11C4   F4 0F 06 10            DW   RFROM,DROP   ;cleanup loop stack, early exit
11C8                DUMP3:       
11C8   06 10 F4 0F C2 10 4E 0E DW   DROP,RFROM,BASE,STORE   ;reSTORE radix
11D0   5C 06                  DW   EXIT   
11D2                             ;   .S          ( ... -- ... )
11D2                             ;               Display the contents of the data stack.
11D2                          ;*Macro unroll: mCOLON  2,'.S',DOTS
11D2                          ;*Macro unroll:  mCODE 2, ".S", DOTS
11D2                          ALIGN   2   
11D2                DOTS:        
11D2                VVCODE:   .SET   $   
11D2                VVLEN:    .SET   (2 & 01FH) / CELLL   
13B0                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
13B0                VVNAME:   .SET   $   
13B0   D2 11 BC 13            DW   vvCODE,vvLINK   
13B4                VVLINK:   .SET   $   
13B4   02 2E 53               DB   2,".S"   
11D2                          .ORG   vvCODE   
11D2   00                     NOP      
11D3   CD 0E 06               CALL   doLIST   
11D6   44 0C 6C 10            DW   CR,DEPTH   ;stack depth
11DA   E6 0F                  DW   TOR   ;start count down loop
11DC   3E 0E E6 11            DW   BRAN,DOTS2   ;skip first pass
11E0                DOTS1:       
11E0   70 0E 58 10 A6 0C      DW   RAT,PICK,DOT   ;index stack, display contents
11E6                DOTS2:       
11E6   68 06 E0 11            DW   DONXT,DOTS1   ;loop till done
11EA                          ;*Macro unroll:  mDSTR DOTQP,' <sp'
11EA   5E 0C                  DW   DOTQP   
11EC                VVLEN:    .SET   $   
11EC   00 20 3C 73 70         DB   0," <sp"   
11F1                VVCODE:   .SET   $   
11EC                          .ORG   vvLEN   
11EC   04                     DB   vvCODE - vvLEN - 1   
11F1                          .ORG   vvCODE   
11F1   5C 06                  DW   EXIT   
11F3                             ;   !CSP        ( -- )
11F3                             ;               Save stack pointer in CSP for error checking.
11F3                             ;   ?CSP        ( -- )
11F3                             ;               Abort if stack pointer differs from that saved in CSP.
11F3                             ;   >NAME       ( ca -- na | F )
11F3                             ;               Convert code address to a name address.
11F3                          ;*Macro unroll:  mCOLON  5,'>NAME',TNAME
11F3                          ;*Macro unroll:  mCODE 5, ">NAME", TNAME
11F3                          ALIGN   2   
11F4                TNAME:       
11F4                VVCODE:   .SET   $   
11F4                VVLEN:    .SET   (5 & 01FH) / CELLL   
13A6                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
13A6                VVNAME:   .SET   $   
13A6   F4 11 B4 13            DW   vvCODE,vvLINK   
13AA                VVLINK:   .SET   $   
13AA   05 3E 4E 41 4D 45      DB   5,">NAME"   
11F4                          .ORG   vvCODE   
11F4   00                     NOP      
11F5   CD 0E 06               CALL   doLIST   
11F8   1A 11                  DW   CRRNT   ;vocabulary link
11FA                TNAM1:       
11FA   82 03 58 0E 1A 10      DW   CELLP,AT,QDUP   ;check all vocabularies
1200   32 0E 32 12            DW   QBRAN,TNAM4   
1204   40 10                  DW   DDUP   
1206                TNAM2:       
1206   58 0E 02 10            DW   AT,DUPP   ;?last word in a vocabulary
120A   32 0E 1E 12            DW   QBRAN,TNAM3   
120E   40 10 64 09 7C 01      DW   DDUP,NAMET,XORR   ;compare
1214   32 0E 1E 12            DW   QBRAN,TNAM3   
1218   8E 03                  DW   CELLM   ;continue with next word
121A   3E 0E 06 12            DW   BRAN,TNAM2   
121E                TNAM3:       
121E   0A 10 06 10 1A 10      DW   SWAP,DROP,QDUP   
1224   32 0E FA 11            DW   QBRAN,TNAM1   
1228   0A 10 06 10 0A 10 06 10 5C 06 DW   SWAP,DROP,SWAP,DROP,EXIT   
1232                TNAM4:       
1232   06 10 1C 06 00 00 5C 06 DW   DROP,DOLIT,0,EXIT   ;false flag
123A                             ;   .ID         ( na -- )
123A                             ;               Display the name at address.
123A                          ;*Macro unroll: mCOLON  3,'.ID',DOTID
123A                          ;*Macro unroll:  mCODE 3, ".ID", DOTID
123A                          ALIGN   2   
123A                DOTID:       
123A                VVCODE:   .SET   $   
123A                VVLEN:    .SET   (3 & 01FH) / CELLL   
139E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
139E                VVNAME:   .SET   $   
139E   3A 12 AA 13            DW   vvCODE,vvLINK   
13A2                VVLINK:   .SET   $   
13A2   03 2E 49 44            DB   3,".ID"   
123A                          .ORG   vvCODE   
123A   00                     NOP      
123B   CD 0E 06               CALL   doLIST   
123E   1A 10                  DW   QDUP   ;if zero no name
1240   32 0E 50 12            DW   QBRAN,DOTI1   
1244   CE 0E 1C 06 1F 00 68 01 DW   COUNT,DOLIT,MASKK,ANDD   ;mask lexicon bits
124C   42 11 5C 06            DW   UTYPE,EXIT   ;display name string
1250                DOTI1:       
1250                          ;*Macro unroll:  mDSTR   DOTQP,' {noName}'
1250   5E 0C                  DW   DOTQP   
1252                VVLEN:    .SET   $   
1252   00 20 7B 6E 6F 4E 61 6D 65 7D DB   0," {noName}"   
125C                VVCODE:   .SET   $   
1252                          .ORG   vvLEN   
1252   09                     DB   vvCODE - vvLEN - 1   
125C                          .ORG   vvCODE   
125C   5C 06                  DW   EXIT   
125E                             ;   SEE         ( -- ; <string> )
125E                             ;               A simple decompiler.
125E                          ;*Macro unroll: mCOLON  3,'SEE',SEE
125E                          ;*Macro unroll:  mCODE 3, "SEE", SEE
125E                          ALIGN   2   
125E                SEE:         
125E                VVCODE:   .SET   $   
125E                VVLEN:    .SET   (3 & 01FH) / CELLL   
1396                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1396                VVNAME:   .SET   $   
1396   5E 12 A2 13            DW   vvCODE,vvLINK   
139A                VVLINK:   .SET   $   
139A   03 53 45 45            DB   3,"SEE"   
125E                          .ORG   vvCODE   
125E   00                     NOP      
125F   CD 0E 06               CALL   doLIST   
1262   A6 03                  DW   TICK   ;starting address
1264   44 0C 82 03            DW   CR,CELLP   
1268                SEE1:        
1268   82 03 02 10 58 0E 02 10 DW   CELLP,DUPP,AT,DUPP   ;?does it contain a zero
1270   32 0E 76 12            DW   QBRAN,SEE2   
1274   F4 11                  DW   TNAME   ;?is it a name
1276                SEE2:        
1276   1A 10                  DW   QDUP   ;name address or zero
1278   32 0E 84 12            DW   QBRAN,SEE3   
127C   E6 0B 3A 12            DW   SPACE,DOTID   ;display name
1280   3E 0E 8A 12            DW   BRAN,SEE4   
1284                SEE3:        
1284   02 10 58 0E 96 0C      DW   DUPP,AT,UDOT   ;display number
128A                SEE4:        
128A   C2 0B                  DW   NUFQ   ;user control
128C   32 0E 68 12            DW   QBRAN,SEE1   
1290   06 10 5C 06            DW   DROP,EXIT   
1294                             ;   WORDS       ( -- )
1294                             ;               Display the names in the context vocabulary.
1294                             ;   COLD        ( -- )
1294                             ;               The hilevel cold start sequence.
1294                LASTN:    EQU   vvNAME+4   ;last name address
2000                          .ORG   END_ROM   
2000                          .ORG   START_RAM   
2000                          IF   TESTMODE   
                    TESTS_START:      
                              LD   HL,DONE   
                              CALL   PRINTSZ   
                              HALT      
                    DONE:     .CSTR   "Done!\r\n"   
2000                          ENDIF      
2000                          DS   DTS   ; data stack size
2200                SPP:         ; SP0 grows down
2200                TIBB:        
2200                          DS   RTS   ; return stack size
2400                RPP:         ; RP0 grows down (into TIBB)
2400                UPP:         
2400   00 00        VARSZERO:   DW   0   ; SP0
2402   00 00        VARRZERO:   DW   0   ; RP0
2404   00 00        VARTQKEY:   DW   0   ; '?KEY
2406   00 00        VARTEMIT:   DW   0   ; 'EMIT
2408   00 00        VARTEXPE:   DW   0   ; 'EXPECT
240A   00 00        VARTTAP:   DW   0   ; 'TAP
240C   00 00        VARTECHO:   DW   0   ; 'ECHO
240E   00 00        VARTPROM:   DW   0   ; 'PROMPT
2410   00 00        VARBASE:   DW   0   ; BASE
2412   00 00        VARTEMP:   DW   0   ; tmp
2414   00 00        VARSPAN:   DW   0   ; SPAN
2416   00 00        VARINN:   DW   0   ; >IN
2418   00 00        VARNTIB:   DW   0   ; #TIB
241A   00 00        VARTIB:   DW   0   ; TIB
241C   00 00        VARCSP:   DW   0   ; CSP
241E   00 00        VARTEVAL:   DW   0   ; 'EVAL
2420   00 00        VARTNUMB:   DW   0   ; 'NUMBER
2422   00 00        VARHLD:   DW   0   ; HLD
2424   00 00        VARHANDL:   DW   0   ; HANDLER
2426   00 00        VARCNTXT:   DW   0   ; CONTEXT pointer
2428   00 00        VARVOCABS:   DW   0   ; vocabulary stack    ???
242A   00 00        VARCRRNT:   DW   0   ; CURRENT pointer
242C   00 00        VARVOCABLP:   DW   0   ; vocabulary link pointer ???
242E   00 00        VARCP:    DW   0   ; CP  for runing phase on RAM
2430   00 00        VARNP:    DW   0   ; NP  for runing phase on RAM
2432   00 00        VARLAST:   DW   0   ; LAST
2434   00 00        VARVFRTH:   DW   0   ; FORTH   \ mullti-user ???
2436   00 00        VARVOCABL:   DW   0   ; vocabulary link       ???
2438   00 00        SERINPTR:   DW   0   
243A   00 00        SERRDPTR:   DW   0   
243C   00 00        SERBUFUSED:   DW   0   
243E                SERBUF:   DS   SER_BUFSIZE   
247D                VECTAB:      
247D   00 00        VRST08:   DW   0   
247F   00 00        VRST10:   DW   0   
2481   00 00        VRST18:   DW   0   
2483   00 00        VRST20:   DW   0   
2485   00 00        VRST28:   DW   0   
2487   00 00        VRST30:   DW   0   
2489   00 00        VINT:     DW   0   
248B   00 00        VNMI:     DW   0   
248D                CPP:         ; grows up
FFFE                          .ORG   END_RAM - 2   
FFFE                NPP:         ; grows down
FFFE                          .END      


TESTMODE:           0000 DEFINED AT LINE 3
MEM_SIZE:           10000 DEFINED AT LINE 1 IN constants.z80
                    > USED AT LINE 3 IN constants.z80
                    > USED AT LINE 12 IN constants.z80
ROM_SIZE:           2000 DEFINED AT LINE 2 IN constants.z80
                    > USED AT LINE 3 IN constants.z80
                    > USED AT LINE 6 IN constants.z80
                    > USED AT LINE 8 IN constants.z80
RAM_SIZE:           E000 DEFINED AT LINE 3 IN constants.z80
                    > USED AT LINE 9 IN constants.z80
START_ROM:          0000 DEFINED AT LINE 5 IN constants.z80
                    > USED AT LINE 8
END_ROM:            2000 DEFINED AT LINE 6 IN constants.z80
                    > USED AT LINE 4 IN word.macro.z80
                    > USED AT LINE 93
START_RAM:          2000 DEFINED AT LINE 8 IN constants.z80
                    > USED AT LINE 9 IN constants.z80
                    > USED AT LINE 94
END_RAM:            10000 DEFINED AT LINE 9 IN constants.z80
                    > USED AT LINE 54 IN variables.z80
BM:                 0000 DEFINED AT LINE 11 IN constants.z80
                    > USED AT LINE 5 IN constants.z80
                    > USED AT LINE 6 IN constants.z80
                    > USED AT LINE 8 IN constants.z80
                    > USED AT LINE 12 IN constants.z80
EM:                 10000 DEFINED AT LINE 12 IN constants.z80
COMPO:              0020 DEFINED AT LINE 14 IN constants.z80
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
IMEDD:              0040 DEFINED AT LINE 15 IN constants.z80
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 133 IN core-compiler.z80
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
MASKK:              001F DEFINED AT LINE 16 IN constants.z80
CHARR:              0001 DEFINED AT LINE 18 IN constants.z80
CELLL:              0002 DEFINED AT LINE 19 IN constants.z80
                    > USED AT LINE 39 IN constants.z80
                    > USED AT LINE 40 IN constants.z80
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 319 IN core-alu.z80
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 324 IN core-alu.z80
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 329 IN core-alu.z80
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 145 IN core-interpret.z80
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 184 IN core-memory.z80
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 90 IN core-stacks.z80
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 33
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 33
                    > USED AT LINE 63
                    > USED AT LINE 63
                    > USED AT LINE 63
                    > USED AT LINE 63
                    > USED AT LINE 63
                    > USED AT LINE 63
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 33
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 33
                    > USED AT LINE 63
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 33
                    > USED AT LINE 63
                    > USED AT LINE 65 IN core-user.z80
                    > USED AT LINE 63
                    > USED AT LINE 63
                    > USED AT LINE 63
                    > USED AT LINE 63
                    > USED AT LINE 63
                    > USED AT LINE 63
                    > USED AT LINE 96 IN core-user.z80
                    > USED AT LINE 63
                    > USED AT LINE 102 IN core-user.z80
                    > USED AT LINE 63
                    > USED AT LINE 63
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 33
                    > USED AT LINE 63
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
BASEE:              000A DEFINED AT LINE 20 IN constants.z80
                    > USED AT LINE 13 IN defaults.z80
VOCSS:              0008 DEFINED AT LINE 21 IN constants.z80
                    > USED AT LINE 96 IN core-user.z80
MAXCHAR:            00FF DEFINED AT LINE 23 IN constants.z80
MAXSIGNED:          7FFF DEFINED AT LINE 24 IN constants.z80
MAXUNSIGNED:        FFFF DEFINED AT LINE 25 IN constants.z80
MAXNEGATIVE:        8000 DEFINED AT LINE 26 IN constants.z80
BKSPP:              0008 DEFINED AT LINE 28 IN constants.z80
                    > USED AT LINE 187 IN core-io.z80
                    > USED AT LINE 189 IN core-io.z80
                    > USED AT LINE 204 IN core-io.z80
LFF:                000A DEFINED AT LINE 29 IN constants.z80
CRR:                000D DEFINED AT LINE 30 IN constants.z80
                    > USED AT LINE 132 IN core-io.z80
SPACEE:             0020 DEFINED AT LINE 31 IN constants.z80
                    > USED AT LINE 74 IN core-format.z80
                    > USED AT LINE 81 IN core-format.z80
TIC:                0027 DEFINED AT LINE 32 IN constants.z80
MINUSS:             002D DEFINED AT LINE 33 IN constants.z80
                    > USED AT LINE 44 IN core-format.z80
UNDERSC:            005F DEFINED AT LINE 34 IN constants.z80
CALLL:              CD00 DEFINED AT LINE 36 IN constants.z80
                    > USED AT LINE 119 IN core-compiler.z80
US:                 003A DEFINED AT LINE 38 IN constants.z80
                    > USED AT LINE 50
RTS:                0200 DEFINED AT LINE 39 IN constants.z80
                    > USED AT LINE 5 IN variables.z80
DTS:                0200 DEFINED AT LINE 40 IN constants.z80
                    > USED AT LINE 2 IN variables.z80
RET_STACK_SIZE:     0100 DEFINED AT LINE 42 IN constants.z80
DATA_STACK_SIZE:    0100 DEFINED AT LINE 43 IN constants.z80
INT_ADDR:           0038 DEFINED AT LINE 45 IN constants.z80
SER_BUFSIZE:        003F DEFINED AT LINE 46 IN constants.z80
                    > USED AT LINE 11 IN interrupt.z80
                    > USED AT LINE 19 IN interrupt.z80
                    > USED AT LINE 26 IN serial.z80
                    > USED AT LINE 41 IN variables.z80
SER_FULLSIZE:       0030 DEFINED AT LINE 47 IN constants.z80
                    > USED AT LINE 28 IN interrupt.z80
SER_EMPTYSIZE:      0005 DEFINED AT LINE 48 IN constants.z80
                    > USED AT LINE 35 IN serial.z80
RTS_HIGH:           00D6 DEFINED AT LINE 50 IN constants.z80
                    > USED AT LINE 30 IN interrupt.z80
RTS_LOW:            0096 DEFINED AT LINE 51 IN constants.z80
                    > USED AT LINE 11 IN serial.z80
                    > USED AT LINE 37 IN serial.z80
TRUEE:              00-1 DEFINED AT LINE 53 IN constants.z80
                    > USED AT LINE 41 IN core-io.z80
FALSEE:             0000 DEFINED AT LINE 54 IN constants.z80
                    > USED AT LINE 34 IN core-io.z80
VVCODE:             125E DEFINED AT LINE 12
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 42
                    > USED AT LINE 43
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 42
                    > USED AT LINE 43
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 42
                    > USED AT LINE 43
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 42
                    > USED AT LINE 43
                    > USED AT LINE 42
                    > USED AT LINE 43
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 42
                    > USED AT LINE 43
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 42
                    > USED AT LINE 43
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 42
                    > USED AT LINE 43
                    > USED AT LINE 16
                    > USED AT LINE 19
VVNAME:             1396 DEFINED AT LINE 15
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 91
VVLINK:             139A DEFINED AT LINE 17
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
VVUSER:             1144 DEFINED AT LINE 63
                    > USED AT LINE 32
                    > USED AT LINE 33
                    > USED AT LINE 32
                    > USED AT LINE 33
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 32
                    > USED AT LINE 33
                    > USED AT LINE 32
                    > USED AT LINE 33
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 32
                    > USED AT LINE 33
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 65 IN core-user.z80
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 96 IN core-user.z80
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 102 IN core-user.z80
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 32
                    > USED AT LINE 33
                    > USED AT LINE 62
                    > USED AT LINE 63
RESET:              0000 DEFINED AT LINE 9
RST08:              0008 DEFINED AT LINE 12
RST10:              0010 DEFINED AT LINE 16
RST18:              0018 DEFINED AT LINE 20
RST20:              0020 DEFINED AT LINE 24
RST28:              0028 DEFINED AT LINE 28
RST30:              0030 DEFINED AT LINE 32
RST38:              0038 DEFINED AT LINE 36
RST66:              0066 DEFINED AT LINE 40
INIT:               006C DEFINED AT LINE 42
                    > USED AT LINE 9
LOOP:               008F DEFINED AT LINE 65
                    > USED AT LINE 68
SERIALINT:          0098 DEFINED AT LINE 1 IN interrupt.z80
                    > USED AT LINE 43
NOTFULL:            00AD DEFINED AT LINE 16 IN interrupt.z80
                    > USED AT LINE 12 IN interrupt.z80
NOTWRAP:            00B9 DEFINED AT LINE 22 IN interrupt.z80
                    > USED AT LINE 20 IN interrupt.z80
RTS0:               00CD DEFINED AT LINE 32 IN interrupt.z80
                    > USED AT LINE 6 IN interrupt.z80
                    > USED AT LINE 14 IN interrupt.z80
                    > USED AT LINE 29 IN interrupt.z80
INIT_IO:            00D6 DEFINED AT LINE 4 IN serial.z80
                    > USED AT LINE 25 IN core-io.z80
RXA:                00EA DEFINED AT LINE 16 IN serial.z80
                    > USED AT LINE 66
WAITFORCHAR:        00EA DEFINED AT LINE 17 IN serial.z80
                    > USED AT LINE 20 IN serial.z80
RXA1:               00F1 DEFINED AT LINE 21 IN serial.z80
                    > USED AT LINE 37 IN core-io.z80
NOTRDWRAP:          00FE DEFINED AT LINE 29 IN serial.z80
                    > USED AT LINE 27 IN serial.z80
RTS1:               0111 DEFINED AT LINE 39 IN serial.z80
                    > USED AT LINE 36 IN serial.z80
TXA:                0115 DEFINED AT LINE 45 IN serial.z80
                    > USED AT LINE 67
                    > USED AT LINE 49 IN core-io.z80
CONOUT1:            0116 DEFINED AT LINE 47 IN serial.z80
                    > USED AT LINE 50 IN serial.z80
QRXA:               0120 DEFINED AT LINE 55 IN serial.z80
                    > USED AT LINE 32 IN core-io.z80
DEFAULTS:           0126 DEFINED AT LINE 3 IN defaults.z80
                    > USED AT LINE 38 IN constants.z80
                    > USED AT LINE 48
UZERO:              0126 DEFINED AT LINE 4 IN defaults.z80
                    > USED AT LINE 36 IN core-kernel.z80
                    > USED AT LINE 37 IN core-kernel.z80
DEFSZERO:           0126 DEFINED AT LINE 5 IN defaults.z80
DEFRZERO:           0128 DEFINED AT LINE 6 IN defaults.z80
DEFTQKEY:           012A DEFINED AT LINE 7 IN defaults.z80
DEFTEMIT:           012C DEFINED AT LINE 8 IN defaults.z80
DEFTEXPE:           012E DEFINED AT LINE 9 IN defaults.z80
DEFTTAP:            0130 DEFINED AT LINE 10 IN defaults.z80
DEFTECHO:           0132 DEFINED AT LINE 11 IN defaults.z80
DEFTPROM:           0134 DEFINED AT LINE 12 IN defaults.z80
DEFBASE:            0136 DEFINED AT LINE 13 IN defaults.z80
DEFTEMP:            0138 DEFINED AT LINE 14 IN defaults.z80
DEFSPAN:            013A DEFINED AT LINE 15 IN defaults.z80
DEFINN:             013C DEFINED AT LINE 16 IN defaults.z80
DEFNTIB:            013E DEFINED AT LINE 17 IN defaults.z80
DEFTIB:             0140 DEFINED AT LINE 18 IN defaults.z80
DEFCSP:             0142 DEFINED AT LINE 19 IN defaults.z80
DEFTEVAL:           0144 DEFINED AT LINE 20 IN defaults.z80
DEFTNUMB:           0146 DEFINED AT LINE 21 IN defaults.z80
DEFHLD:             0148 DEFINED AT LINE 22 IN defaults.z80
DEFHANDL:           014A DEFINED AT LINE 23 IN defaults.z80
DEFCNTXT:           014C DEFINED AT LINE 24 IN defaults.z80
DEFVOCABS:          014E DEFINED AT LINE 25 IN defaults.z80
DEFCRRENT:          0150 DEFINED AT LINE 26 IN defaults.z80
DEFVOCABLP:         0152 DEFINED AT LINE 27 IN defaults.z80
DEFCP:              0154 DEFINED AT LINE 28 IN defaults.z80
DEFNP:              0156 DEFINED AT LINE 29 IN defaults.z80
DEFLAST:            0158 DEFINED AT LINE 30 IN defaults.z80
DEFVFRTH:           015A DEFINED AT LINE 31 IN defaults.z80
DEFVOCABL:          015C DEFINED AT LINE 32 IN defaults.z80
DEFCOLD:            015E DEFINED AT LINE 33 IN defaults.z80
ULAST:              0160 DEFINED AT LINE 34 IN defaults.z80
                    > USED AT LINE 37 IN core-kernel.z80
END_DEFAULTS:       0160 DEFINED AT LINE 35 IN defaults.z80
                    > USED AT LINE 38 IN constants.z80
ZLESS:              0160 DEFINED AT LINE 11
                    > USED AT LINE 77 IN core-alu.z80
                    > USED AT LINE 98 IN core-alu.z80
                    > USED AT LINE 104 IN core-alu.z80
                    > USED AT LINE 106 IN core-alu.z80
                    > USED AT LINE 233 IN core-alu.z80
                    > USED AT LINE 250 IN core-alu.z80
                    > USED AT LINE 43 IN core-format.z80
                    > USED AT LINE 57 IN core-interpret.z80
                    > USED AT LINE 71 IN core-interpret.z80
                    > USED AT LINE 256 IN core-interpret.z80
VVLEN:              0001 DEFINED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 41
                    > USED AT LINE 42
                    > USED AT LINE 14
                    > USED AT LINE 41
                    > USED AT LINE 42
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 41
                    > USED AT LINE 42
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 41
                    > USED AT LINE 42
                    > USED AT LINE 41
                    > USED AT LINE 42
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 41
                    > USED AT LINE 42
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 41
                    > USED AT LINE 42
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 41
                    > USED AT LINE 42
                    > USED AT LINE 14
ANDD:               0168 DEFINED AT LINE 11
ORR:                0172 DEFINED AT LINE 11
XORR:               017C DEFINED AT LINE 11
                    > USED AT LINE 85 IN core-alu.z80
                    > USED AT LINE 94 IN core-alu.z80
                    > USED AT LINE 103 IN core-alu.z80
                    > USED AT LINE 300 IN core-alu.z80
                    > USED AT LINE 217 IN core-io.z80
PLUS:               0186 DEFINED AT LINE 11
                    > USED AT LINE 67 IN core-alu.z80
                    > USED AT LINE 72 IN core-alu.z80
                    > USED AT LINE 239 IN core-alu.z80
                    > USED AT LINE 44 IN core-compiler.z80
                    > USED AT LINE 215 IN core-io.z80
                    > USED AT LINE 84 IN core-stacks.z80
INVER:              0190 DEFINED AT LINE 11
                    > USED AT LINE 60 IN core-alu.z80
                    > USED AT LINE 65 IN core-alu.z80
                    > USED AT LINE 37 IN core-utils.z80
NEGAT:              019C DEFINED AT LINE 11
                    > USED AT LINE 72 IN core-alu.z80
                    > USED AT LINE 78 IN core-alu.z80
                    > USED AT LINE 235 IN core-alu.z80
                    > USED AT LINE 243 IN core-alu.z80
                    > USED AT LINE 34 IN core-interpret.z80
DNEGA:              01AA DEFINED AT LINE 11
                    > USED AT LINE 302 IN core-alu.z80
SUBB:               01C0 DEFINED AT LINE 11
                    > USED AT LINE 98 IN core-alu.z80
                    > USED AT LINE 106 IN core-alu.z80
                    > USED AT LINE 128 IN core-alu.z80
                    > USED AT LINE 129 IN core-alu.z80
                    > USED AT LINE 57 IN core-interpret.z80
                    > USED AT LINE 82 IN core-interpret.z80
                    > USED AT LINE 135 IN core-interpret.z80
                    > USED AT LINE 185 IN core-memory.z80
ABSS:               01CA DEFINED AT LINE 11
ABS1:               01D8 DEFINED AT LINE 79 IN core-alu.z80
EQUAL:              01DA DEFINED AT LINE 11
EQU1:               01EA DEFINED AT LINE 88 IN core-alu.z80
                    > USED AT LINE 86 IN core-alu.z80
ULESS:              01F0 DEFINED AT LINE 11
ULES1:              0206 DEFINED AT LINE 97 IN core-alu.z80
                    > USED AT LINE 95 IN core-alu.z80
LESS:               020C DEFINED AT LINE 11
                    > USED AT LINE 111 IN core-alu.z80
LESS1:              0220 DEFINED AT LINE 105 IN core-alu.z80
MAX:                0226 DEFINED AT LINE 11
MAX1:               0234 DEFINED AT LINE 113 IN core-alu.z80
MIN:                0238 DEFINED AT LINE 11
MIN1:               0248 DEFINED AT LINE 122 IN core-alu.z80
                    > USED AT LINE 120 IN core-alu.z80
WITHI:              024C DEFINED AT LINE 11
UMPLUS:             025E DEFINED AT LINE 49
                    > USED AT LINE 50 IN core-alu.z80
UMP2:               0266 DEFINED AT LINE 139 IN core-alu.z80
UMP1:               0267 DEFINED AT LINE 141 IN core-alu.z80
                    > USED AT LINE 138 IN core-alu.z80
UMMOD:              026A DEFINED AT LINE 11
                    > USED AT LINE 241 IN core-alu.z80
UMSLMOD2:           0276 DEFINED AT LINE 11
UMMOD11:            027A DEFINED AT LINE 158 IN core-alu.z80
UMMOD12:            0285 DEFINED AT LINE 169 IN core-alu.z80
UMMOD2:             029F DEFINED AT LINE 189 IN core-alu.z80
                    > USED AT LINE 157 IN core-alu.z80
UMMOD1:             02A5 DEFINED AT LINE 192 IN core-alu.z80
                    > USED AT LINE 168 IN core-alu.z80
UMMOD4:             02AB DEFINED AT LINE 195 IN core-alu.z80
                    > USED AT LINE 213 IN core-alu.z80
UMMOD13:            02B3 DEFINED AT LINE 203 IN core-alu.z80
UMMOD3:             02B9 DEFINED AT LINE 210 IN core-alu.z80
                    > USED AT LINE 175 IN core-alu.z80
                    > USED AT LINE 179 IN core-alu.z80
                    > USED AT LINE 224 IN core-alu.z80
UMMOD14:            02BD DEFINED AT LINE 214 IN core-alu.z80
UMMOD5:             02C3 DEFINED AT LINE 221 IN core-alu.z80
                    > USED AT LINE 202 IN core-alu.z80
UMMOD15:            02C7 DEFINED AT LINE 225 IN core-alu.z80
MSMOD:              02C8 DEFINED AT LINE 11
MMOD1:              02E0 DEFINED AT LINE 236 IN core-alu.z80
                    > USED AT LINE 234 IN core-alu.z80
MMOD2:              02EE DEFINED AT LINE 240 IN core-alu.z80
                    > USED AT LINE 238 IN core-alu.z80
MMOD3:              02FE DEFINED AT LINE 244 IN core-alu.z80
                    > USED AT LINE 242 IN core-alu.z80
SLMOD:              0300 DEFINED AT LINE 11
                    > USED AT LINE 255 IN core-alu.z80
                    > USED AT LINE 260 IN core-alu.z80
MODD:               030E DEFINED AT LINE 11
SLASH:              0318 DEFINED AT LINE 11
UMSTA:              0324 DEFINED AT LINE 11
                    > USED AT LINE 295 IN core-alu.z80
                    > USED AT LINE 301 IN core-alu.z80
UMSTA1:             032C DEFINED AT LINE 272 IN core-alu.z80
                    > USED AT LINE 285 IN core-alu.z80
UMSTA2:             0333 DEFINED AT LINE 278 IN core-alu.z80
UMSTA5:             0336 DEFINED AT LINE 281 IN core-alu.z80
UMSTA3:             0337 DEFINED AT LINE 283 IN core-alu.z80
                    > USED AT LINE 277 IN core-alu.z80
                    > USED AT LINE 280 IN core-alu.z80
UMSTA4:             033A DEFINED AT LINE 286 IN core-alu.z80
STAR:               0340 DEFINED AT LINE 11
MSTAR:              034A DEFINED AT LINE 11
                    > USED AT LINE 309 IN core-alu.z80
MSTAR1:             0366 DEFINED AT LINE 303 IN core-alu.z80
SSMOD:              0368 DEFINED AT LINE 11
                    > USED AT LINE 314 IN core-alu.z80
STASL:              0376 DEFINED AT LINE 11
CELLP:              0382 DEFINED AT LINE 11
                    > USED AT LINE 32 IN core-compiler.z80
                    > USED AT LINE 151 IN core-interpret.z80
                    > USED AT LINE 153 IN core-interpret.z80
                    > USED AT LINE 171 IN core-interpret.z80
                    > USED AT LINE 97 IN core-memory.z80
                    > USED AT LINE 102 IN core-memory.z80
                    > USED AT LINE 125 IN core-memory.z80
                    > USED AT LINE 74 IN core-utils.z80
                    > USED AT LINE 107 IN core-utils.z80
                    > USED AT LINE 109 IN core-utils.z80
CELLM:              038E DEFINED AT LINE 11
                    > USED AT LINE 72 IN core-compiler.z80
                    > USED AT LINE 74 IN core-compiler.z80
                    > USED AT LINE 126 IN core-interpret.z80
                    > USED AT LINE 126 IN core-interpret.z80
                    > USED AT LINE 156 IN core-interpret.z80
                    > USED AT LINE 158 IN core-interpret.z80
                    > USED AT LINE 158 IN core-interpret.z80
                    > USED AT LINE 161 IN core-interpret.z80
                    > USED AT LINE 169 IN core-interpret.z80
                    > USED AT LINE 82 IN core-utils.z80
CELLS:              039A DEFINED AT LINE 11
TICK:               03A6 DEFINED AT LINE 11
                    > USED AT LINE 25 IN core-compiler.z80
                    > USED AT LINE 106 IN core-utils.z80
TICK1:              03B4 DEFINED AT LINE 7 IN core-compiler.z80
                    > USED AT LINE 5 IN core-compiler.z80
ALLOT:              03B6 DEFINED AT LINE 11
COMMA:              03C0 DEFINED AT LINE 11
                    > USED AT LINE 25 IN core-compiler.z80
                    > USED AT LINE 90 IN core-compiler.z80
                    > USED AT LINE 120 IN core-compiler.z80
BCOMP:              03D2 DEFINED AT LINE 11
COMPI:              03DC DEFINED AT LINE 11
                    > USED AT LINE 38 IN core-compiler.z80
                    > USED AT LINE 107 IN core-compiler.z80
                    > USED AT LINE 142 IN core-compiler.z80
                    > USED AT LINE 150 IN core-compiler.z80
                    > USED AT LINE 4 IN core-control.z80
                    > USED AT LINE 14 IN core-control.z80
                    > USED AT LINE 19 IN core-control.z80
                    > USED AT LINE 24 IN core-control.z80
                    > USED AT LINE 30 IN core-control.z80
                    > USED AT LINE 37 IN core-control.z80
                    > USED AT LINE 69 IN core-control.z80
                    > USED AT LINE 74 IN core-control.z80
                    > USED AT LINE 79 IN core-control.z80
LITER:              03EE DEFINED AT LINE 11
                    > USED AT LINE 94 IN core-compiler.z80
STRCQ:              03FA DEFINED AT LINE 49
RECUR:              0410 DEFINED AT LINE 11
UNIQU:              041E DEFINED AT LINE 11
                    > USED AT LINE 69 IN core-compiler.z80
UNIQ1:              043A DEFINED AT LINE 60 IN core-compiler.z80
                    > USED AT LINE 57 IN core-compiler.z80
SNAME:              043E DEFINED AT LINE 11
                    > USED AT LINE 126 IN core-compiler.z80
                    > USED AT LINE 140 IN core-compiler.z80
                    > USED AT LINE 148 IN core-compiler.z80
PNAM1:              0470 DEFINED AT LINE 76 IN core-compiler.z80
                    > USED AT LINE 68 IN core-compiler.z80
SCOMP:              047A DEFINED AT LINE 49
                    > USED AT LINE 113 IN core-compiler.z80
SCOM1:              0496 DEFINED AT LINE 89 IN core-compiler.z80
                    > USED AT LINE 87 IN core-compiler.z80
SCOM2:              049A DEFINED AT LINE 91 IN core-compiler.z80
                    > USED AT LINE 85 IN core-compiler.z80
SCOM3:              04A6 DEFINED AT LINE 95 IN core-compiler.z80
                    > USED AT LINE 93 IN core-compiler.z80
OVERT:              04A8 DEFINED AT LINE 49
SEMIS:              04B8 DEFINED AT LINE 11
RBRAC:              04C6 DEFINED AT LINE 11
                    > USED AT LINE 127 IN core-compiler.z80
CALLC:              04D4 DEFINED AT LINE 49
                    > USED AT LINE 127 IN core-compiler.z80
COLON:              04E2 DEFINED AT LINE 11
IMMED:              04F4 DEFINED AT LINE 11
USER:               050C DEFINED AT LINE 11
CREAT:              0524 DEFINED AT LINE 11
                    > USED AT LINE 156 IN core-compiler.z80
VARIA:              053A DEFINED AT LINE 11
FOR:                0548 DEFINED AT LINE 11
BEGIN:              0554 DEFINED AT LINE 11
NEXT:               055C DEFINED AT LINE 11
UNTIL:              0568 DEFINED AT LINE 11
AGAIN:              0574 DEFINED AT LINE 11
                    > USED AT LINE 43 IN core-control.z80
IFF:                0580 DEFINED AT LINE 11
                    > USED AT LINE 64 IN core-control.z80
AHEAD:              0592 DEFINED AT LINE 11
                    > USED AT LINE 54 IN core-control.z80
                    > USED AT LINE 59 IN core-control.z80
REPEA:              05A4 DEFINED AT LINE 11
THENN:              05B2 DEFINED AT LINE 11
AFT:                05BE DEFINED AT LINE 11
ELSEE:              05CC DEFINED AT LINE 11
WHILE:              05D8 DEFINED AT LINE 11
ABRTQ:              05E2 DEFINED AT LINE 11
STRQ:               05EE DEFINED AT LINE 49
DOTQ:               05FA DEFINED AT LINE 49
DOCONST:            0606 DEFINED AT LINE 49
DOLIST:             060E DEFINED AT LINE 49
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 141 IN core-compiler.z80
                    > USED AT LINE 25
                    > USED AT LINE 149 IN core-compiler.z80
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 31
                    > USED AT LINE 31
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 31
                    > USED AT LINE 31
                    > USED AT LINE 61
                    > USED AT LINE 31
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 31
                    > USED AT LINE 61
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
DOLIT:              061C DEFINED AT LINE 49
                    > USED AT LINE 55 IN core-alu.z80
                    > USED AT LINE 60 IN core-alu.z80
                    > USED AT LINE 66 IN core-alu.z80
                    > USED AT LINE 87 IN core-alu.z80
                    > USED AT LINE 89 IN core-alu.z80
                    > USED AT LINE 319 IN core-alu.z80
                    > USED AT LINE 324 IN core-alu.z80
                    > USED AT LINE 329 IN core-alu.z80
                    > USED AT LINE 38 IN core-compiler.z80
                    > USED AT LINE 43 IN core-compiler.z80
                    > USED AT LINE 86 IN core-compiler.z80
                    > USED AT LINE 113 IN core-compiler.z80
                    > USED AT LINE 119 IN core-compiler.z80
                    > USED AT LINE 133 IN core-compiler.z80
                    > USED AT LINE 141 IN core-compiler.z80
                    > USED AT LINE 149 IN core-compiler.z80
                    > USED AT LINE 156 IN core-compiler.z80
                    > USED AT LINE 31 IN core-control.z80
                    > USED AT LINE 4 IN core-format.z80
                    > USED AT LINE 5 IN core-format.z80
                    > USED AT LINE 6 IN core-format.z80
                    > USED AT LINE 11 IN core-format.z80
                    > USED AT LINE 44 IN core-format.z80
                    > USED AT LINE 64 IN core-format.z80
                    > USED AT LINE 69 IN core-format.z80
                    > USED AT LINE 74 IN core-format.z80
                    > USED AT LINE 79 IN core-format.z80
                    > USED AT LINE 80 IN core-format.z80
                    > USED AT LINE 81 IN core-format.z80
                    > USED AT LINE 83 IN core-format.z80
                    > USED AT LINE 5 IN core-interpret.z80
                    > USED AT LINE 6 IN core-interpret.z80
                    > USED AT LINE 8 IN core-interpret.z80
                    > USED AT LINE 9 IN core-interpret.z80
                    > USED AT LINE 20 IN core-interpret.z80
                    > USED AT LINE 25 IN core-interpret.z80
                    > USED AT LINE 30 IN core-interpret.z80
                    > USED AT LINE 52 IN core-interpret.z80
                    > USED AT LINE 59 IN core-interpret.z80
                    > USED AT LINE 74 IN core-interpret.z80
                    > USED AT LINE 80 IN core-interpret.z80
                    > USED AT LINE 99 IN core-interpret.z80
                    > USED AT LINE 139 IN core-interpret.z80
                    > USED AT LINE 145 IN core-interpret.z80
                    > USED AT LINE 151 IN core-interpret.z80
                    > USED AT LINE 178 IN core-interpret.z80
                    > USED AT LINE 227 IN core-interpret.z80
                    > USED AT LINE 241 IN core-interpret.z80
                    > USED AT LINE 247 IN core-interpret.z80
                    > USED AT LINE 87 IN core-io.z80
                    > USED AT LINE 97 IN core-io.z80
                    > USED AT LINE 112 IN core-io.z80
                    > USED AT LINE 124 IN core-io.z80
                    > USED AT LINE 132 IN core-io.z80
                    > USED AT LINE 175 IN core-io.z80
                    > USED AT LINE 187 IN core-io.z80
                    > USED AT LINE 189 IN core-io.z80
                    > USED AT LINE 202 IN core-io.z80
                    > USED AT LINE 204 IN core-io.z80
                    > USED AT LINE 220 IN core-io.z80
                    > USED AT LINE 239 IN core-io.z80
                    > USED AT LINE 240 IN core-io.z80
                    > USED AT LINE 3 IN core-kernel.z80
                    > USED AT LINE 7 IN core-kernel.z80
                    > USED AT LINE 36 IN core-kernel.z80
                    > USED AT LINE 37 IN core-kernel.z80
                    > USED AT LINE 49 IN core-kernel.z80
                    > USED AT LINE 108 IN core-memory.z80
                    > USED AT LINE 119 IN core-memory.z80
                    > USED AT LINE 146 IN core-memory.z80
                    > USED AT LINE 147 IN core-memory.z80
                    > USED AT LINE 173 IN core-memory.z80
                    > USED AT LINE 176 IN core-memory.z80
                    > USED AT LINE 184 IN core-memory.z80
                    > USED AT LINE 186 IN core-memory.z80
                    > USED AT LINE 83 IN core-stacks.z80
                    > USED AT LINE 90 IN core-stacks.z80
                    > USED AT LINE 8 IN core-utils.z80
                    > USED AT LINE 16 IN core-utils.z80
                    > USED AT LINE 21 IN core-utils.z80
                    > USED AT LINE 31 IN core-utils.z80
                    > USED AT LINE 34 IN core-utils.z80
                    > USED AT LINE 89 IN core-utils.z80
                    > USED AT LINE 96 IN core-utils.z80
DOVAR:              0624 DEFINED AT LINE 49
                    > USED AT LINE 150 IN core-compiler.z80
                    > USED AT LINE 41 IN core-does.z80
                    > USED AT LINE 201 IN core-interpret.z80
UP:                 062C DEFINED AT LINE 49
DOUSE:              0634 DEFINED AT LINE 49
                    > USED AT LINE 142 IN core-compiler.z80
                    > USED AT LINE 32
                    > USED AT LINE 32
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 32
                    > USED AT LINE 32
                    > USED AT LINE 62
                    > USED AT LINE 32
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 32
                    > USED AT LINE 62
DOSTR:              0644 DEFINED AT LINE 11
                    > USED AT LINE 217 IN core-interpret.z80
                    > USED AT LINE 219 IN core-interpret.z80
                    > USED AT LINE 137 IN core-io.z80
                    > USED AT LINE 142 IN core-io.z80
EXIT:               065C DEFINED AT LINE 11
                    > USED AT LINE 80 IN core-alu.z80
                    > USED AT LINE 114 IN core-alu.z80
                    > USED AT LINE 123 IN core-alu.z80
                    > USED AT LINE 245 IN core-alu.z80
                    > USED AT LINE 304 IN core-alu.z80
                    > USED AT LINE 6 IN core-compiler.z80
                    > USED AT LINE 61 IN core-compiler.z80
                    > USED AT LINE 75 IN core-compiler.z80
                    > USED AT LINE 88 IN core-compiler.z80
                    > USED AT LINE 90 IN core-compiler.z80
                    > USED AT LINE 94 IN core-compiler.z80
                    > USED AT LINE 107 IN core-compiler.z80
                    > USED AT LINE 120 IN core-compiler.z80
                    > USED AT LINE 9 IN core-control.z80
                    > USED AT LINE 36 IN core-does.z80
                    > USED AT LINE 38 IN core-format.z80
                    > USED AT LINE 46 IN core-format.z80
                    > USED AT LINE 85 IN core-format.z80
                    > USED AT LINE 116 IN core-interpret.z80
                    > USED AT LINE 229 IN core-interpret.z80
                    > USED AT LINE 233 IN core-interpret.z80
                    > USED AT LINE 250 IN core-interpret.z80
                    > USED AT LINE 258 IN core-interpret.z80
                    > USED AT LINE 67 IN core-io.z80
                    > USED AT LINE 82 IN core-io.z80
                    > USED AT LINE 103 IN core-io.z80
                    > USED AT LINE 115 IN core-io.z80
                    > USED AT LINE 127 IN core-io.z80
                    > USED AT LINE 137 IN core-io.z80
                    > USED AT LINE 168 IN core-io.z80
                    > USED AT LINE 191 IN core-io.z80
                    > USED AT LINE 208 IN core-io.z80
                    > USED AT LINE 23 IN core-kernel.z80
                    > USED AT LINE 86 IN core-kernel.z80
                    > USED AT LINE 135 IN core-memory.z80
                    > USED AT LINE 150 IN core-memory.z80
                    > USED AT LINE 162 IN core-memory.z80
                    > USED AT LINE 199 IN core-memory.z80
                    > USED AT LINE 58 IN core-stacks.z80
                    > USED AT LINE 11 IN core-utils.z80
                    > USED AT LINE 24 IN core-utils.z80
                    > USED AT LINE 45 IN core-utils.z80
                    > USED AT LINE 58 IN core-utils.z80
                    > USED AT LINE 97 IN core-utils.z80
                    > USED AT LINE 100 IN core-utils.z80
                    > USED AT LINE 122 IN core-utils.z80
DONXT:              0668 DEFINED AT LINE 11
                    > USED AT LINE 14 IN core-control.z80
                    > USED AT LINE 31 IN core-interpret.z80
                    > USED AT LINE 60 IN core-interpret.z80
                    > USED AT LINE 75 IN core-interpret.z80
                    > USED AT LINE 138 IN core-interpret.z80
                    > USED AT LINE 102 IN core-io.z80
                    > USED AT LINE 114 IN core-io.z80
                    > USED AT LINE 149 IN core-memory.z80
                    > USED AT LINE 161 IN core-memory.z80
                    > USED AT LINE 175 IN core-memory.z80
                    > USED AT LINE 10 IN core-utils.z80
                    > USED AT LINE 23 IN core-utils.z80
                    > USED AT LINE 39 IN core-utils.z80
                    > USED AT LINE 56 IN core-utils.z80
DECHILO:            067D DEFINED AT LINE 152 IN core-does.z80
                    > USED AT LINE 145 IN core-does.z80
DECLOW:             067F DEFINED AT LINE 155 IN core-does.z80
                    > USED AT LINE 141 IN core-does.z80
DIGIT:              0688 DEFINED AT LINE 49
                    > USED AT LINE 12 IN core-format.z80
EXTRC:              06A2 DEFINED AT LINE 49
BDIGS:              06B4 DEFINED AT LINE 11
                    > USED AT LINE 58 IN core-format.z80
                    > USED AT LINE 153 IN core-io.z80
                    > USED AT LINE 160 IN core-io.z80
HOLD:               06C0 DEFINED AT LINE 11
DIG:                06D8 DEFINED AT LINE 11
                    > USED AT LINE 34 IN core-format.z80
DIGS:               06E6 DEFINED AT LINE 11
                    > USED AT LINE 58 IN core-format.z80
                    > USED AT LINE 160 IN core-io.z80
DIGS1:              06EA DEFINED AT LINE 33 IN core-format.z80
                    > USED AT LINE 36 IN core-format.z80
DIGS2:              06F6 DEFINED AT LINE 37 IN core-format.z80
                    > USED AT LINE 35 IN core-format.z80
SIGN:               06F8 DEFINED AT LINE 11
                    > USED AT LINE 59 IN core-format.z80
SIGN1:              0708 DEFINED AT LINE 45 IN core-format.z80
EDIGS:              070A DEFINED AT LINE 11
                    > USED AT LINE 59 IN core-format.z80
STR:                071C DEFINED AT LINE 49
                    > USED AT LINE 147 IN core-io.z80
                    > USED AT LINE 170 IN core-io.z80
HEX:                0732 DEFINED AT LINE 11
                    > USED AT LINE 19 IN core-interpret.z80
DECIMAL:            0740 DEFINED AT LINE 11
BLANK:              074E DEFINED AT LINE 11
                    > USED AT LINE 56 IN core-interpret.z80
                    > USED AT LINE 109 IN core-interpret.z80
                    > USED AT LINE 114 IN core-interpret.z80
                    > USED AT LINE 92 IN core-io.z80
                    > USED AT LINE 188 IN core-io.z80
                    > USED AT LINE 206 IN core-io.z80
                    > USED AT LINE 220 IN core-io.z80
                    > USED AT LINE 171 IN core-memory.z80
TCHAR:              0758 DEFINED AT LINE 49
TCHA1:              0778 DEFINED AT LINE 84 IN core-format.z80
                    > USED AT LINE 82 IN core-format.z80
DIGTQ:              077A DEFINED AT LINE 49
DGTQ1:              07A0 DEFINED AT LINE 10 IN core-interpret.z80
                    > USED AT LINE 7 IN core-interpret.z80
NUMBQ:              07A8 DEFINED AT LINE 49
                    > USED AT LINE 21 IN defaults.z80
NUMQ1:              07D8 DEFINED AT LINE 21 IN core-interpret.z80
                    > USED AT LINE 18 IN core-interpret.z80
NUMQ2:              07FC DEFINED AT LINE 26 IN core-interpret.z80
                    > USED AT LINE 31 IN core-interpret.z80
NUMQ3:              082E DEFINED AT LINE 35 IN core-interpret.z80
                    > USED AT LINE 33 IN core-interpret.z80
NUMQ4:              0834 DEFINED AT LINE 38 IN core-interpret.z80
                    > USED AT LINE 28 IN core-interpret.z80
NUMQ5:              0840 DEFINED AT LINE 40 IN core-interpret.z80
                    > USED AT LINE 37 IN core-interpret.z80
NUMQ6:              0842 DEFINED AT LINE 42 IN core-interpret.z80
                    > USED AT LINE 24 IN core-interpret.z80
PARS:               084E DEFINED AT LINE 49
                    > USED AT LINE 93 IN core-interpret.z80
PARS1:              0874 DEFINED AT LINE 55 IN core-interpret.z80
                    > USED AT LINE 60 IN core-interpret.z80
PARS2:              089A DEFINED AT LINE 62 IN core-interpret.z80
                    > USED AT LINE 58 IN core-interpret.z80
PARS3:              089C DEFINED AT LINE 64 IN core-interpret.z80
                    > USED AT LINE 53 IN core-interpret.z80
PARS4:              08A2 DEFINED AT LINE 67 IN core-interpret.z80
                    > USED AT LINE 75 IN core-interpret.z80
PARS5:              08BA DEFINED AT LINE 72 IN core-interpret.z80
                    > USED AT LINE 70 IN core-interpret.z80
PARS6:              08D0 DEFINED AT LINE 78 IN core-interpret.z80
                    > USED AT LINE 73 IN core-interpret.z80
PARS7:              08DE DEFINED AT LINE 81 IN core-interpret.z80
                    > USED AT LINE 77 IN core-interpret.z80
PARS8:              08EA DEFINED AT LINE 84 IN core-interpret.z80
                    > USED AT LINE 51 IN core-interpret.z80
PARSE:              08F2 DEFINED AT LINE 11
                    > USED AT LINE 109 IN core-interpret.z80
                    > USED AT LINE 114 IN core-interpret.z80
                    > USED AT LINE 121 IN core-interpret.z80
PAREN:              0914 DEFINED AT LINE 11
BKSLA:              0920 DEFINED AT LINE 11
CHAR:               092E DEFINED AT LINE 11
TOKEN:              093C DEFINED AT LINE 49
                    > USED AT LINE 4 IN core-compiler.z80
                    > USED AT LINE 126 IN core-compiler.z80
                    > USED AT LINE 140 IN core-compiler.z80
                    > USED AT LINE 148 IN core-compiler.z80
                    > USED AT LINE 265 IN core-interpret.z80
WORDD:              0958 DEFINED AT LINE 11
NAMET:              0964 DEFINED AT LINE 49
                    > USED AT LINE 162 IN core-interpret.z80
                    > USED AT LINE 80 IN core-utils.z80
SAMEQ:              0970 DEFINED AT LINE 49
SAME1:              097A DEFINED AT LINE 133 IN core-interpret.z80
                    > USED AT LINE 138 IN core-interpret.z80
SAME2:              099C DEFINED AT LINE 138 IN core-interpret.z80
                    > USED AT LINE 132 IN core-interpret.z80
                    > USED AT LINE 136 IN core-interpret.z80
FIND:               09A6 DEFINED AT LINE 11
                    > USED AT LINE 174 IN core-interpret.z80
FIND1:              09C4 DEFINED AT LINE 147 IN core-interpret.z80
                    > USED AT LINE 159 IN core-interpret.z80
FIND2:              09E8 DEFINED AT LINE 153 IN core-interpret.z80
                    > USED AT LINE 150 IN core-interpret.z80
FIND3:              09F0 DEFINED AT LINE 154 IN core-interpret.z80
                    > USED AT LINE 152 IN core-interpret.z80
FIND6:              09F4 DEFINED AT LINE 155 IN core-interpret.z80
                    > USED AT LINE 148 IN core-interpret.z80
FIND4:              0A00 DEFINED AT LINE 157 IN core-interpret.z80
                    > USED AT LINE 154 IN core-interpret.z80
FIND5:              0A0C DEFINED AT LINE 160 IN core-interpret.z80
                    > USED AT LINE 157 IN core-interpret.z80
NAMEQ:              0A1E DEFINED AT LINE 49
                    > USED AT LINE 4 IN core-compiler.z80
                    > USED AT LINE 56 IN core-compiler.z80
                    > USED AT LINE 84 IN core-compiler.z80
                    > USED AT LINE 225 IN core-interpret.z80
NAMQ1:              0A30 DEFINED AT LINE 170 IN core-interpret.z80
                    > USED AT LINE 168 IN core-interpret.z80
NAMQ2:              0A32 DEFINED AT LINE 171 IN core-interpret.z80
                    > USED AT LINE 175 IN core-interpret.z80
NAMQ3:              0A50 DEFINED AT LINE 177 IN core-interpret.z80
                    > USED AT LINE 173 IN core-interpret.z80
CATCH:              0A5A DEFINED AT LINE 11
THROW:              0A80 DEFINED AT LINE 11
                    > USED AT LINE 8 IN core-compiler.z80
                    > USED AT LINE 78 IN core-compiler.z80
                    > USED AT LINE 95 IN core-compiler.z80
                    > USED AT LINE 210 IN core-interpret.z80
                    > USED AT LINE 217 IN core-interpret.z80
                    > USED AT LINE 235 IN core-interpret.z80
NULLS:              0A9E DEFINED AT LINE 49
                    > USED AT LINE 210 IN core-interpret.z80
ABORT:              0AAC DEFINED AT LINE 11
ABORQ:              0AB4 DEFINED AT LINE 11
                    > USED AT LINE 69 IN core-control.z80
                    > USED AT LINE 37
                    > USED AT LINE 37
ABOR1:              0AC0 DEFINED AT LINE 218 IN core-interpret.z80
                    > USED AT LINE 216 IN core-interpret.z80
INTER:              0AC6 DEFINED AT LINE 49
                    > USED AT LINE 20 IN defaults.z80
                    > USED AT LINE 241 IN core-interpret.z80
                    > USED AT LINE 247 IN core-interpret.z80
INTE1:              0AEE DEFINED AT LINE 230 IN core-interpret.z80
                    > USED AT LINE 226 IN core-interpret.z80
INTE2:              0AF8 DEFINED AT LINE 234 IN core-interpret.z80
                    > USED AT LINE 232 IN core-interpret.z80
LBRAC:              0AFA DEFINED AT LINE 11
DOTOK:              0B08 DEFINED AT LINE 11
                    > USED AT LINE 12 IN defaults.z80
DOTO1:              0B20 DEFINED AT LINE 250 IN core-interpret.z80
                    > USED AT LINE 248 IN core-interpret.z80
QSTAC:              0B24 DEFINED AT LINE 49
EVAL:               0B3C DEFINED AT LINE 11
EVAL1:              0B40 DEFINED AT LINE 264 IN core-interpret.z80
                    > USED AT LINE 268 IN core-interpret.z80
EVAL2:              0B54 DEFINED AT LINE 269 IN core-interpret.z80
                    > USED AT LINE 266 IN core-interpret.z80
PCSTO:              0B5C DEFINED AT LINE 11
PCAT:               0B66 DEFINED AT LINE 11
STOIO:              0B72 DEFINED AT LINE 11
                    > USED AT LINE 2 IN core-kernel.z80
                    > USED AT LINE 16 IN core-kernel.z80
QRX:                0B78 DEFINED AT LINE 11
                    > USED AT LINE 7 IN defaults.z80
QRX1:               0B83 DEFINED AT LINE 36 IN core-io.z80
                    > USED AT LINE 33 IN core-io.z80
QRX2:               0B8D DEFINED AT LINE 42 IN core-io.z80
                    > USED AT LINE 35 IN core-io.z80
TXSTO:              0B90 DEFINED AT LINE 11
                    > USED AT LINE 8 IN defaults.z80
                    > USED AT LINE 11 IN defaults.z80
QKEY:               0B98 DEFINED AT LINE 11
                    > USED AT LINE 62 IN core-io.z80
                    > USED AT LINE 78 IN core-io.z80
KEY:                0BA4 DEFINED AT LINE 11
                    > USED AT LINE 80 IN core-io.z80
                    > USED AT LINE 219 IN core-io.z80
                    > USED AT LINE 5 IN core-kernel.z80
KEY1:               0BA8 DEFINED AT LINE 61 IN core-io.z80
                    > USED AT LINE 66 IN core-io.z80
KEY2:               0BB0 DEFINED AT LINE 65 IN core-io.z80
EMIT:               0BB6 DEFINED AT LINE 11
                    > USED AT LINE 92 IN core-io.z80
                    > USED AT LINE 123 IN core-io.z80
                    > USED AT LINE 6 IN core-kernel.z80
NUFQ:               0BC2 DEFINED AT LINE 11
                    > USED AT LINE 37 IN core-utils.z80
                    > USED AT LINE 120 IN core-utils.z80
NUFQ1:              0BD8 DEFINED AT LINE 81 IN core-io.z80
                    > USED AT LINE 79 IN core-io.z80
PACE:               0BDA DEFINED AT LINE 49
SPACE:              0BE6 DEFINED AT LINE 11
                    > USED AT LINE 100 IN core-io.z80
                    > USED AT LINE 161 IN core-io.z80
                    > USED AT LINE 170 IN core-io.z80
                    > USED AT LINE 17 IN core-utils.z80
                    > USED AT LINE 36 IN core-utils.z80
                    > USED AT LINE 36 IN core-utils.z80
                    > USED AT LINE 115 IN core-utils.z80
SPACS:              0BF0 DEFINED AT LINE 11
                    > USED AT LINE 148 IN core-io.z80
                    > USED AT LINE 155 IN core-io.z80
CHAR1:              0C00 DEFINED AT LINE 99 IN core-io.z80
                    > USED AT LINE 102 IN core-io.z80
CHAR2:              0C02 DEFINED AT LINE 101 IN core-io.z80
                    > USED AT LINE 98 IN core-io.z80
TYPEE:              0C08 DEFINED AT LINE 11
                    > USED AT LINE 148 IN core-io.z80
                    > USED AT LINE 155 IN core-io.z80
                    > USED AT LINE 161 IN core-io.z80
TYPE1:              0C12 DEFINED AT LINE 110 IN core-io.z80
                    > USED AT LINE 114 IN core-io.z80
TYPE2:              0C1E DEFINED AT LINE 113 IN core-io.z80
                    > USED AT LINE 109 IN core-io.z80
TYPEZ:              0C26 DEFINED AT LINE 11
                    > USED AT LINE 4 IN core-kernel.z80
                    > USED AT LINE 8 IN core-kernel.z80
                    > USED AT LINE 86 IN core-kernel.z80
TYPEZ1:             0C2A DEFINED AT LINE 120 IN core-io.z80
                    > USED AT LINE 125 IN core-io.z80
TYPEZ2:             0C40 DEFINED AT LINE 126 IN core-io.z80
CR:                 0C44 DEFINED AT LINE 11
                    > USED AT LINE 250 IN core-interpret.z80
                    > USED AT LINE 16 IN core-kernel.z80
                    > USED AT LINE 23 IN core-kernel.z80
                    > USED AT LINE 34 IN core-utils.z80
                    > USED AT LINE 50 IN core-utils.z80
                    > USED AT LINE 107 IN core-utils.z80
STRQP:              0C56 DEFINED AT LINE 49
                    > USED AT LINE 37
                    > USED AT LINE 74 IN core-control.z80
DOTQP:              0C5E DEFINED AT LINE 49
                    > USED AT LINE 37
                    > USED AT LINE 79 IN core-control.z80
                    > USED AT LINE 37
                    > USED AT LINE 37
                    > USED AT LINE 37
                    > USED AT LINE 37
DOTR:               0C6A DEFINED AT LINE 11
UDOTR:              0C7E DEFINED AT LINE 11
UDOT:               0C96 DEFINED AT LINE 11
                    > USED AT LINE 168 IN core-io.z80
DOT:                0CA6 DEFINED AT LINE 11
                    > USED AT LINE 180 IN core-io.z80
DOT1:               0CBC DEFINED AT LINE 169 IN core-io.z80
                    > USED AT LINE 167 IN core-io.z80
DOTPR:              0CC4 DEFINED AT LINE 11
QUEST:              0CD0 DEFINED AT LINE 11
BKSP:               0CDA DEFINED AT LINE 11
                    > USED AT LINE 208 IN core-io.z80
BACK1:              0D0A DEFINED AT LINE 190 IN core-io.z80
                    > USED AT LINE 186 IN core-io.z80
TAP:                0D0C DEFINED AT LINE 11
                    > USED AT LINE 206 IN core-io.z80
                    > USED AT LINE 222 IN core-io.z80
KTAP:               0D22 DEFINED AT LINE 11
                    > USED AT LINE 10 IN defaults.z80
KTAP1:              0D42 DEFINED AT LINE 207 IN core-io.z80
                    > USED AT LINE 205 IN core-io.z80
KTAP2:              0D46 DEFINED AT LINE 209 IN core-io.z80
                    > USED AT LINE 203 IN core-io.z80
ACCEP:              0D50 DEFINED AT LINE 11
                    > USED AT LINE 9 IN defaults.z80
ACCP1:              0D5A DEFINED AT LINE 216 IN core-io.z80
                    > USED AT LINE 227 IN core-io.z80
ACCP2:              0D78 DEFINED AT LINE 224 IN core-io.z80
                    > USED AT LINE 221 IN core-io.z80
ACCP3:              0D7C DEFINED AT LINE 226 IN core-io.z80
                    > USED AT LINE 223 IN core-io.z80
ACCP4:              0D80 DEFINED AT LINE 228 IN core-io.z80
                    > USED AT LINE 218 IN core-io.z80
EXPEC:              0D88 DEFINED AT LINE 49
QUERY:              0D98 DEFINED AT LINE 49
HI2:                0DB6 DEFINED AT LINE 49
HELLO:              0DCE DEFINED AT LINE 10 IN core-kernel.z80
                    > USED AT LINE 3 IN core-kernel.z80
                    > USED AT LINE 7 IN core-kernel.z80
HI:                 0DDE DEFINED AT LINE 49
                    > USED AT LINE 57
NEXT_STEP:          0DF5 DEFINED AT LINE 26 IN core-kernel.z80
                    > USED AT LINE 54
                    > USED AT LINE 34 IN interrupt.z80
COLD:               0DFC DEFINED AT LINE 11
COLD1:              0E00 DEFINED AT LINE 35 IN core-kernel.z80
                    > USED AT LINE 43 IN core-kernel.z80
PRESE:              0E16 DEFINED AT LINE 11
                    > USED AT LINE 38 IN core-kernel.z80
QUIT:               0E2C DEFINED AT LINE 11
                    > USED AT LINE 9 IN core-kernel.z80
                    > USED AT LINE 42 IN core-kernel.z80
EXECU:              0E2E DEFINED AT LINE 11
                    > USED AT LINE 88 IN core-compiler.z80
                    > USED AT LINE 229 IN core-interpret.z80
                    > USED AT LINE 133 IN core-memory.z80
QBRAN:              0E32 DEFINED AT LINE 49
                    > USED AT LINE 86 IN core-alu.z80
                    > USED AT LINE 95 IN core-alu.z80
                    > USED AT LINE 120 IN core-alu.z80
                    > USED AT LINE 234 IN core-alu.z80
                    > USED AT LINE 238 IN core-alu.z80
                    > USED AT LINE 242 IN core-alu.z80
                    > USED AT LINE 5 IN core-compiler.z80
                    > USED AT LINE 57 IN core-compiler.z80
                    > USED AT LINE 68 IN core-compiler.z80
                    > USED AT LINE 85 IN core-compiler.z80
                    > USED AT LINE 87 IN core-compiler.z80
                    > USED AT LINE 93 IN core-compiler.z80
                    > USED AT LINE 19 IN core-control.z80
                    > USED AT LINE 30 IN core-control.z80
                    > USED AT LINE 35 IN core-format.z80
                    > USED AT LINE 43 IN core-format.z80
                    > USED AT LINE 82 IN core-format.z80
                    > USED AT LINE 7 IN core-interpret.z80
                    > USED AT LINE 18 IN core-interpret.z80
                    > USED AT LINE 24 IN core-interpret.z80
                    > USED AT LINE 28 IN core-interpret.z80
                    > USED AT LINE 33 IN core-interpret.z80
                    > USED AT LINE 51 IN core-interpret.z80
                    > USED AT LINE 53 IN core-interpret.z80
                    > USED AT LINE 58 IN core-interpret.z80
                    > USED AT LINE 70 IN core-interpret.z80
                    > USED AT LINE 73 IN core-interpret.z80
                    > USED AT LINE 136 IN core-interpret.z80
                    > USED AT LINE 148 IN core-interpret.z80
                    > USED AT LINE 150 IN core-interpret.z80
                    > USED AT LINE 157 IN core-interpret.z80
                    > USED AT LINE 168 IN core-interpret.z80
                    > USED AT LINE 173 IN core-interpret.z80
                    > USED AT LINE 175 IN core-interpret.z80
                    > USED AT LINE 216 IN core-interpret.z80
                    > USED AT LINE 226 IN core-interpret.z80
                    > USED AT LINE 232 IN core-interpret.z80
                    > USED AT LINE 248 IN core-interpret.z80
                    > USED AT LINE 266 IN core-interpret.z80
                    > USED AT LINE 63 IN core-io.z80
                    > USED AT LINE 66 IN core-io.z80
                    > USED AT LINE 79 IN core-io.z80
                    > USED AT LINE 122 IN core-io.z80
                    > USED AT LINE 167 IN core-io.z80
                    > USED AT LINE 186 IN core-io.z80
                    > USED AT LINE 203 IN core-io.z80
                    > USED AT LINE 205 IN core-io.z80
                    > USED AT LINE 218 IN core-io.z80
                    > USED AT LINE 221 IN core-io.z80
                    > USED AT LINE 132 IN core-memory.z80
                    > USED AT LINE 172 IN core-memory.z80
                    > USED AT LINE 55 IN core-stacks.z80
                    > USED AT LINE 38 IN core-utils.z80
                    > USED AT LINE 75 IN core-utils.z80
                    > USED AT LINE 79 IN core-utils.z80
                    > USED AT LINE 81 IN core-utils.z80
                    > USED AT LINE 86 IN core-utils.z80
                    > USED AT LINE 95 IN core-utils.z80
                    > USED AT LINE 110 IN core-utils.z80
                    > USED AT LINE 114 IN core-utils.z80
                    > USED AT LINE 121 IN core-utils.z80
BRAN:               0E3E DEFINED AT LINE 49
                    > USED AT LINE 24 IN core-control.z80
                    > USED AT LINE 37 IN core-control.z80
                    > USED AT LINE 36 IN core-format.z80
                    > USED AT LINE 37 IN core-interpret.z80
                    > USED AT LINE 77 IN core-interpret.z80
                    > USED AT LINE 132 IN core-interpret.z80
                    > USED AT LINE 152 IN core-interpret.z80
                    > USED AT LINE 154 IN core-interpret.z80
                    > USED AT LINE 159 IN core-interpret.z80
                    > USED AT LINE 268 IN core-interpret.z80
                    > USED AT LINE 98 IN core-io.z80
                    > USED AT LINE 109 IN core-io.z80
                    > USED AT LINE 125 IN core-io.z80
                    > USED AT LINE 223 IN core-io.z80
                    > USED AT LINE 227 IN core-io.z80
                    > USED AT LINE 43 IN core-kernel.z80
                    > USED AT LINE 68 IN core-kernel.z80
                    > USED AT LINE 142 IN core-memory.z80
                    > USED AT LINE 157 IN core-memory.z80
                    > USED AT LINE 169 IN core-memory.z80
                    > USED AT LINE 5 IN core-utils.z80
                    > USED AT LINE 18 IN core-utils.z80
                    > USED AT LINE 40 IN core-utils.z80
                    > USED AT LINE 52 IN core-utils.z80
                    > USED AT LINE 83 IN core-utils.z80
                    > USED AT LINE 116 IN core-utils.z80
THROWX:             0E46 DEFINED AT LINE 11
                    > USED AT LINE 191 IN core-alu.z80
                    > USED AT LINE 194 IN core-alu.z80
STORE:              0E4E DEFINED AT LINE 11
                    > USED AT LINE 19 IN core-compiler.z80
                    > USED AT LINE 45 IN core-compiler.z80
                    > USED AT LINE 75 IN core-compiler.z80
                    > USED AT LINE 50 IN core-interpret.z80
                    > USED AT LINE 91 IN core-memory.z80
                    > USED AT LINE 97 IN core-memory.z80
AT:                 0E58 DEFINED AT LINE 11
                    > USED AT LINE 50 IN core-compiler.z80
                    > USED AT LINE 73 IN core-compiler.z80
                    > USED AT LINE 86 IN core-compiler.z80
                    > USED AT LINE 101 IN core-compiler.z80
                    > USED AT LINE 134 IN core-compiler.z80
                    > USED AT LINE 47 IN core-does.z80
                    > USED AT LINE 22 IN core-format.z80
                    > USED AT LINE 28 IN core-format.z80
                    > USED AT LINE 16 IN core-interpret.z80
                    > USED AT LINE 68 IN core-interpret.z80
                    > USED AT LINE 69 IN core-interpret.z80
                    > USED AT LINE 92 IN core-interpret.z80
                    > USED AT LINE 104 IN core-interpret.z80
                    > USED AT LINE 115 IN core-interpret.z80
                    > USED AT LINE 146 IN core-interpret.z80
                    > USED AT LINE 147 IN core-interpret.z80
                    > USED AT LINE 149 IN core-interpret.z80
                    > USED AT LINE 172 IN core-interpret.z80
                    > USED AT LINE 192 IN core-interpret.z80
                    > USED AT LINE 227 IN core-interpret.z80
                    > USED AT LINE 56 IN core-io.z80
                    > USED AT LINE 72 IN core-io.z80
                    > USED AT LINE 166 IN core-io.z80
                    > USED AT LINE 180 IN core-io.z80
                    > USED AT LINE 48 IN core-kernel.z80
                    > USED AT LINE 103 IN core-memory.z80
                    > USED AT LINE 114 IN core-memory.z80
                    > USED AT LINE 131 IN core-memory.z80
                    > USED AT LINE 30 IN core-utils.z80
                    > USED AT LINE 74 IN core-utils.z80
                    > USED AT LINE 78 IN core-utils.z80
                    > USED AT LINE 118 IN core-utils.z80
CSTOR:              0E60 DEFINED AT LINE 11
                    > USED AT LINE 197 IN core-io.z80
                    > USED AT LINE 145 IN core-memory.z80
                    > USED AT LINE 159 IN core-memory.z80
                    > USED AT LINE 187 IN core-memory.z80
CAT:                0E68 DEFINED AT LINE 11
                    > USED AT LINE 67 IN core-compiler.z80
                    > USED AT LINE 17 IN core-interpret.z80
                    > USED AT LINE 22 IN core-interpret.z80
                    > USED AT LINE 111 IN core-io.z80
                    > USED AT LINE 121 IN core-io.z80
                    > USED AT LINE 109 IN core-memory.z80
                    > USED AT LINE 7 IN core-utils.z80
                    > USED AT LINE 20 IN core-utils.z80
RAT:                0E70 DEFINED AT LINE 11
                    > USED AT LINE 239 IN core-alu.z80
                    > USED AT LINE 52 IN core-does.z80
                    > USED AT LINE 23 IN core-interpret.z80
                    > USED AT LINE 32 IN core-interpret.z80
                    > USED AT LINE 133 IN core-interpret.z80
                    > USED AT LINE 134 IN core-interpret.z80
                    > USED AT LINE 145 IN core-memory.z80
                    > USED AT LINE 54 IN core-utils.z80
RPAT:               0E7A DEFINED AT LINE 11
                    > USED AT LINE 185 IN core-interpret.z80
RPSTO:              0E82 DEFINED AT LINE 11
SPAT:               0E8A DEFINED AT LINE 11
                    > USED AT LINE 184 IN core-interpret.z80
                    > USED AT LINE 84 IN core-stacks.z80
                    > USED AT LINE 89 IN core-stacks.z80
SPSTO:              0E94 DEFINED AT LINE 11
PSTOR:              0E9C DEFINED AT LINE 11
                    > USED AT LINE 13 IN core-compiler.z80
DSTOR:              0EAE DEFINED AT LINE 11
DAT:                0EBE DEFINED AT LINE 11
COUNT:              0ECE DEFINED AT LINE 11
                    > USED AT LINE 44 IN core-compiler.z80
                    > USED AT LINE 59 IN core-compiler.z80
                    > USED AT LINE 142 IN core-io.z80
                    > USED AT LINE 96 IN core-utils.z80
HERE:               0EE0 DEFINED AT LINE 11
                    > USED AT LINE 18 IN core-compiler.z80
                    > USED AT LINE 71 IN core-compiler.z80
                    > USED AT LINE 9 IN core-control.z80
                    > USED AT LINE 43 IN core-control.z80
                    > USED AT LINE 48 IN core-control.z80
                    > USED AT LINE 121 IN core-interpret.z80
                    > USED AT LINE 119 IN core-memory.z80
PAD:                0EEA DEFINED AT LINE 11
                    > USED AT LINE 17 IN core-format.z80
                    > USED AT LINE 52 IN core-format.z80
TIB:                0EF8 DEFINED AT LINE 11
                    > USED AT LINE 91 IN core-interpret.z80
                    > USED AT LINE 239 IN core-io.z80
ATEXE:              0F04 DEFINED AT LINE 49
                    > USED AT LINE 92 IN core-compiler.z80
                    > USED AT LINE 231 IN core-interpret.z80
                    > USED AT LINE 267 IN core-interpret.z80
                    > USED AT LINE 225 IN core-io.z80
                    > USED AT LINE 234 IN core-io.z80
EXE1:               0F12 DEFINED AT LINE 134 IN core-memory.z80
                    > USED AT LINE 132 IN core-memory.z80
CMOVE:              0F14 DEFINED AT LINE 11
                    > USED AT LINE 188 IN core-memory.z80
CMOV1:              0F1E DEFINED AT LINE 143 IN core-memory.z80
                    > USED AT LINE 149 IN core-memory.z80
CMOV2:              0F36 DEFINED AT LINE 148 IN core-memory.z80
                    > USED AT LINE 142 IN core-memory.z80
FILL:               0F3E DEFINED AT LINE 11
FILL1:              0F4C DEFINED AT LINE 158 IN core-memory.z80
                    > USED AT LINE 161 IN core-memory.z80
FILL2:              0F56 DEFINED AT LINE 160 IN core-memory.z80
                    > USED AT LINE 157 IN core-memory.z80
DTRAI:              0F5E DEFINED AT LINE 11
DTRA1:              0F68 DEFINED AT LINE 170 IN core-memory.z80
                    > USED AT LINE 175 IN core-memory.z80
DTRA2:              0F82 DEFINED AT LINE 174 IN core-memory.z80
                    > USED AT LINE 169 IN core-memory.z80
                    > USED AT LINE 172 IN core-memory.z80
PACKS:              0F8C DEFINED AT LINE 11
                    > USED AT LINE 116 IN core-interpret.z80
ALGND:              0FC6 DEFINED AT LINE 11
                    > USED AT LINE 71 IN core-compiler.z80
                    > USED AT LINE 53 IN core-does.z80
                    > USED AT LINE 182 IN core-memory.z80
ERR_DIVZERO:        0FCC DEFINED AT LINE 3 IN core-messages.z80
                    > USED AT LINE 190 IN core-alu.z80
ERR_OUTOFRANGE:     0FD8 DEFINED AT LINE 4 IN core-messages.z80
                    > USED AT LINE 193 IN core-alu.z80
TOR:                0FE6 DEFINED AT LINE 11
                    > USED AT LINE 65 IN core-alu.z80
                    > USED AT LINE 235 IN core-alu.z80
                    > USED AT LINE 237 IN core-alu.z80
                    > USED AT LINE 309 IN core-alu.z80
                    > USED AT LINE 32 IN core-compiler.z80
                    > USED AT LINE 4 IN core-control.z80
                    > USED AT LINE 53 IN core-does.z80
                    > USED AT LINE 57 IN core-format.z80
                    > USED AT LINE 5 IN core-interpret.z80
                    > USED AT LINE 27 IN core-interpret.z80
                    > USED AT LINE 54 IN core-interpret.z80
                    > USED AT LINE 66 IN core-interpret.z80
                    > USED AT LINE 76 IN core-interpret.z80
                    > USED AT LINE 91 IN core-interpret.z80
                    > USED AT LINE 131 IN core-interpret.z80
                    > USED AT LINE 170 IN core-interpret.z80
                    > USED AT LINE 184 IN core-interpret.z80
                    > USED AT LINE 108 IN core-io.z80
                    > USED AT LINE 147 IN core-io.z80
                    > USED AT LINE 153 IN core-io.z80
                    > USED AT LINE 185 IN core-io.z80
                    > USED AT LINE 141 IN core-memory.z80
                    > USED AT LINE 144 IN core-memory.z80
                    > USED AT LINE 156 IN core-memory.z80
                    > USED AT LINE 168 IN core-memory.z80
                    > USED AT LINE 63 IN core-stacks.z80
                    > USED AT LINE 78 IN core-stacks.z80
                    > USED AT LINE 4 IN core-utils.z80
                    > USED AT LINE 17 IN core-utils.z80
                    > USED AT LINE 32 IN core-utils.z80
                    > USED AT LINE 51 IN core-utils.z80
RFROM:              0FF4 DEFINED AT LINE 11
                    > USED AT LINE 67 IN core-alu.z80
                    > USED AT LINE 129 IN core-alu.z80
                    > USED AT LINE 241 IN core-alu.z80
                    > USED AT LINE 301 IN core-alu.z80
                    > USED AT LINE 31 IN core-compiler.z80
                    > USED AT LINE 36 IN core-does.z80
                    > USED AT LINE 47 IN core-does.z80
                    > USED AT LINE 52 IN core-does.z80
                    > USED AT LINE 11 IN core-interpret.z80
                    > USED AT LINE 39 IN core-interpret.z80
                    > USED AT LINE 39 IN core-interpret.z80
                    > USED AT LINE 43 IN core-interpret.z80
                    > USED AT LINE 44 IN core-interpret.z80
                    > USED AT LINE 61 IN core-interpret.z80
                    > USED AT LINE 63 IN core-interpret.z80
                    > USED AT LINE 79 IN core-interpret.z80
                    > USED AT LINE 83 IN core-interpret.z80
                    > USED AT LINE 83 IN core-interpret.z80
                    > USED AT LINE 85 IN core-interpret.z80
                    > USED AT LINE 93 IN core-interpret.z80
                    > USED AT LINE 137 IN core-interpret.z80
                    > USED AT LINE 155 IN core-interpret.z80
                    > USED AT LINE 160 IN core-interpret.z80
                    > USED AT LINE 171 IN core-interpret.z80
                    > USED AT LINE 176 IN core-interpret.z80
                    > USED AT LINE 177 IN core-interpret.z80
                    > USED AT LINE 186 IN core-interpret.z80
                    > USED AT LINE 187 IN core-interpret.z80
                    > USED AT LINE 193 IN core-interpret.z80
                    > USED AT LINE 194 IN core-interpret.z80
                    > USED AT LINE 195 IN core-interpret.z80
                    > USED AT LINE 154 IN core-io.z80
                    > USED AT LINE 147 IN core-memory.z80
                    > USED AT LINE 173 IN core-memory.z80
                    > USED AT LINE 42 IN core-utils.z80
                    > USED AT LINE 44 IN core-utils.z80
DUPP:               1002 DEFINED AT LINE 11
                    > USED AT LINE 77 IN core-alu.z80
                    > USED AT LINE 233 IN core-alu.z80
                    > USED AT LINE 237 IN core-alu.z80
                    > USED AT LINE 18 IN core-compiler.z80
                    > USED AT LINE 31 IN core-compiler.z80
                    > USED AT LINE 56 IN core-compiler.z80
                    > USED AT LINE 67 IN core-compiler.z80
                    > USED AT LINE 70 IN core-compiler.z80
                    > USED AT LINE 74 IN core-compiler.z80
                    > USED AT LINE 23 IN core-format.z80
                    > USED AT LINE 34 IN core-format.z80
                    > USED AT LINE 57 IN core-format.z80
                    > USED AT LINE 9 IN core-interpret.z80
                    > USED AT LINE 11 IN core-interpret.z80
                    > USED AT LINE 27 IN core-interpret.z80
                    > USED AT LINE 41 IN core-interpret.z80
                    > USED AT LINE 76 IN core-interpret.z80
                    > USED AT LINE 144 IN core-interpret.z80
                    > USED AT LINE 146 IN core-interpret.z80
                    > USED AT LINE 147 IN core-interpret.z80
                    > USED AT LINE 149 IN core-interpret.z80
                    > USED AT LINE 162 IN core-interpret.z80
                    > USED AT LINE 167 IN core-interpret.z80
                    > USED AT LINE 265 IN core-interpret.z80
                    > USED AT LINE 63 IN core-io.z80
                    > USED AT LINE 78 IN core-io.z80
                    > USED AT LINE 111 IN core-io.z80
                    > USED AT LINE 121 IN core-io.z80
                    > USED AT LINE 122 IN core-io.z80
                    > USED AT LINE 196 IN core-io.z80
                    > USED AT LINE 202 IN core-io.z80
                    > USED AT LINE 219 IN core-io.z80
                    > USED AT LINE 102 IN core-memory.z80
                    > USED AT LINE 108 IN core-memory.z80
                    > USED AT LINE 144 IN core-memory.z80
                    > USED AT LINE 182 IN core-memory.z80
                    > USED AT LINE 183 IN core-memory.z80
                    > USED AT LINE 55 IN core-stacks.z80
                    > USED AT LINE 56 IN core-stacks.z80
                    > USED AT LINE 7 IN core-utils.z80
                    > USED AT LINE 20 IN core-utils.z80
                    > USED AT LINE 78 IN core-utils.z80
                    > USED AT LINE 109 IN core-utils.z80
                    > USED AT LINE 118 IN core-utils.z80
DROP:               1006 DEFINED AT LINE 11
                    > USED AT LINE 50 IN core-alu.z80
                    > USED AT LINE 96 IN core-alu.z80
                    > USED AT LINE 104 IN core-alu.z80
                    > USED AT LINE 114 IN core-alu.z80
                    > USED AT LINE 123 IN core-alu.z80
                    > USED AT LINE 148 IN core-alu.z80
                    > USED AT LINE 255 IN core-alu.z80
                    > USED AT LINE 295 IN core-alu.z80
                    > USED AT LINE 61 IN core-compiler.z80
                    > USED AT LINE 54 IN core-control.z80
                    > USED AT LINE 51 IN core-format.z80
                    > USED AT LINE 83 IN core-format.z80
                    > USED AT LINE 61 IN core-interpret.z80
                    > USED AT LINE 79 IN core-interpret.z80
                    > USED AT LINE 137 IN core-interpret.z80
                    > USED AT LINE 155 IN core-interpret.z80
                    > USED AT LINE 160 IN core-interpret.z80
                    > USED AT LINE 176 IN core-interpret.z80
                    > USED AT LINE 177 IN core-interpret.z80
                    > USED AT LINE 187 IN core-interpret.z80
                    > USED AT LINE 195 IN core-interpret.z80
                    > USED AT LINE 219 IN core-interpret.z80
                    > USED AT LINE 270 IN core-interpret.z80
                    > USED AT LINE 115 IN core-io.z80
                    > USED AT LINE 127 IN core-io.z80
                    > USED AT LINE 210 IN core-io.z80
                    > USED AT LINE 229 IN core-io.z80
                    > USED AT LINE 240 IN core-io.z80
                    > USED AT LINE 68 IN core-stacks.z80
                    > USED AT LINE 68 IN core-stacks.z80
                    > USED AT LINE 11 IN core-utils.z80
                    > USED AT LINE 42 IN core-utils.z80
                    > USED AT LINE 44 IN core-utils.z80
                    > USED AT LINE 85 IN core-utils.z80
                    > USED AT LINE 87 IN core-utils.z80
                    > USED AT LINE 89 IN core-utils.z80
                    > USED AT LINE 122 IN core-utils.z80
SWAP:               100A DEFINED AT LINE 11
                    > USED AT LINE 96 IN core-alu.z80
                    > USED AT LINE 112 IN core-alu.z80
                    > USED AT LINE 119 IN core-alu.z80
                    > USED AT LINE 121 IN core-alu.z80
                    > USED AT LINE 148 IN core-alu.z80
                    > USED AT LINE 243 IN core-alu.z80
                    > USED AT LINE 260 IN core-alu.z80
                    > USED AT LINE 314 IN core-alu.z80
                    > USED AT LINE 48 IN core-control.z80
                    > USED AT LINE 59 IN core-control.z80
                    > USED AT LINE 64 IN core-control.z80
                    > USED AT LINE 12 IN core-format.z80
                    > USED AT LINE 19 IN core-interpret.z80
                    > USED AT LINE 20 IN core-interpret.z80
                    > USED AT LINE 23 IN core-interpret.z80
                    > USED AT LINE 29 IN core-interpret.z80
                    > USED AT LINE 32 IN core-interpret.z80
                    > USED AT LINE 36 IN core-interpret.z80
                    > USED AT LINE 65 IN core-interpret.z80
                    > USED AT LINE 144 IN core-interpret.z80
                    > USED AT LINE 156 IN core-interpret.z80
                    > USED AT LINE 194 IN core-interpret.z80
                    > USED AT LINE 210 IN core-io.z80
                    > USED AT LINE 90 IN core-memory.z80
                    > USED AT LINE 91 IN core-memory.z80
                    > USED AT LINE 96 IN core-memory.z80
                    > USED AT LINE 103 IN core-memory.z80
                    > USED AT LINE 109 IN core-memory.z80
                    > USED AT LINE 156 IN core-memory.z80
                    > USED AT LINE 188 IN core-memory.z80
                    > USED AT LINE 63 IN core-stacks.z80
                    > USED AT LINE 85 IN core-utils.z80
                    > USED AT LINE 87 IN core-utils.z80
OVER:               1012 DEFINED AT LINE 11
                    > USED AT LINE 128 IN core-alu.z80
                    > USED AT LINE 250 IN core-alu.z80
                    > USED AT LINE 59 IN core-compiler.z80
                    > USED AT LINE 52 IN core-format.z80
                    > USED AT LINE 17 IN core-interpret.z80
                    > USED AT LINE 22 IN core-interpret.z80
                    > USED AT LINE 56 IN core-interpret.z80
                    > USED AT LINE 65 IN core-interpret.z80
                    > USED AT LINE 82 IN core-interpret.z80
                    > USED AT LINE 85 IN core-interpret.z80
                    > USED AT LINE 133 IN core-interpret.z80
                    > USED AT LINE 134 IN core-interpret.z80
                    > USED AT LINE 154 IN core-io.z80
                    > USED AT LINE 185 IN core-io.z80
                    > USED AT LINE 197 IN core-io.z80
                    > USED AT LINE 215 IN core-io.z80
                    > USED AT LINE 229 IN core-io.z80
                    > USED AT LINE 90 IN core-memory.z80
                    > USED AT LINE 96 IN core-memory.z80
                    > USED AT LINE 171 IN core-memory.z80
                    > USED AT LINE 183 IN core-memory.z80
                    > USED AT LINE 185 IN core-memory.z80
                    > USED AT LINE 73 IN core-stacks.z80
                    > USED AT LINE 73 IN core-stacks.z80
                    > USED AT LINE 16 IN core-utils.z80
QDUP:               101A DEFINED AT LINE 11
                    > USED AT LINE 84 IN core-compiler.z80
                    > USED AT LINE 135 IN core-interpret.z80
                    > USED AT LINE 172 IN core-interpret.z80
                    > USED AT LINE 174 IN core-interpret.z80
                    > USED AT LINE 225 IN core-interpret.z80
                    > USED AT LINE 131 IN core-memory.z80
                    > USED AT LINE 94 IN core-utils.z80
                    > USED AT LINE 113 IN core-utils.z80
QDUP1:              1026 DEFINED AT LINE 57 IN core-stacks.z80
ROT:                1028 DEFINED AT LINE 11
                    > USED AT LINE 78 IN core-stacks.z80
                    > USED AT LINE 35 IN core-utils.z80
                    > USED AT LINE 35 IN core-utils.z80
DDROP:              1036 DEFINED AT LINE 11
                    > USED AT LINE 43 IN core-interpret.z80
                    > USED AT LINE 80 IN core-io.z80
                    > USED AT LINE 150 IN core-memory.z80
                    > USED AT LINE 162 IN core-memory.z80
DDUP:               1040 DEFINED AT LINE 11
                    > USED AT LINE 94 IN core-alu.z80
                    > USED AT LINE 103 IN core-alu.z80
                    > USED AT LINE 111 IN core-alu.z80
                    > USED AT LINE 119 IN core-alu.z80
                    > USED AT LINE 300 IN core-alu.z80
                    > USED AT LINE 217 IN core-io.z80
                    > USED AT LINE 159 IN core-memory.z80
                    > USED AT LINE 187 IN core-memory.z80
                    > USED AT LINE 76 IN core-utils.z80
                    > USED AT LINE 80 IN core-utils.z80
TWOSWAP:            104A DEFINED AT LINE 11
PICK:               1058 DEFINED AT LINE 11
                    > USED AT LINE 54 IN core-utils.z80
DEPTH:              106C DEFINED AT LINE 11
                    > USED AT LINE 256 IN core-interpret.z80
                    > USED AT LINE 50 IN core-utils.z80
SZERO:              1082 DEFINED AT LINE 11
                    > USED AT LINE 48 IN core-kernel.z80
                    > USED AT LINE 89 IN core-stacks.z80
RZERO:              108A DEFINED AT LINE 11
TQKEY:              1092 DEFINED AT LINE 49
                    > USED AT LINE 56 IN core-io.z80
TEMIT:              109A DEFINED AT LINE 49
                    > USED AT LINE 72 IN core-io.z80
TEXPE:              10A2 DEFINED AT LINE 49
                    > USED AT LINE 234 IN core-io.z80
TTAP:               10AA DEFINED AT LINE 49
                    > USED AT LINE 225 IN core-io.z80
TECHO:              10B2 DEFINED AT LINE 49
                    > USED AT LINE 188 IN core-io.z80
                    > USED AT LINE 196 IN core-io.z80
TPROM:              10BA DEFINED AT LINE 49
                    > USED AT LINE 270 IN core-interpret.z80
BASE:               10C2 DEFINED AT LINE 11
                    > USED AT LINE 28 IN core-format.z80
                    > USED AT LINE 16 IN core-interpret.z80
                    > USED AT LINE 29 IN core-interpret.z80
                    > USED AT LINE 44 IN core-interpret.z80
                    > USED AT LINE 166 IN core-io.z80
                    > USED AT LINE 30 IN core-utils.z80
TEMP:               10CA DEFINED AT LINE 11
                    > USED AT LINE 50 IN core-interpret.z80
                    > USED AT LINE 68 IN core-interpret.z80
                    > USED AT LINE 69 IN core-interpret.z80
                    > USED AT LINE 153 IN core-interpret.z80
SPAN:               10D2 DEFINED AT LINE 49
INN:                10DA DEFINED AT LINE 11
NTIB:               10E2 DEFINED AT LINE 49
                    > USED AT LINE 92 IN core-interpret.z80
                    > USED AT LINE 104 IN core-interpret.z80
                    > USED AT LINE 125 IN core-memory.z80
CSP:                10EA DEFINED AT LINE 49
TEVAL:              10F2 DEFINED AT LINE 49
                    > USED AT LINE 267 IN core-interpret.z80
TNUMB:              10FA DEFINED AT LINE 49
                    > USED AT LINE 92 IN core-compiler.z80
                    > USED AT LINE 231 IN core-interpret.z80
HLD:                1102 DEFINED AT LINE 49
                    > USED AT LINE 17 IN core-format.z80
                    > USED AT LINE 22 IN core-format.z80
                    > USED AT LINE 23 IN core-format.z80
                    > USED AT LINE 51 IN core-format.z80
HANDL:              110A DEFINED AT LINE 49
                    > USED AT LINE 185 IN core-interpret.z80
                    > USED AT LINE 186 IN core-interpret.z80
                    > USED AT LINE 192 IN core-interpret.z80
                    > USED AT LINE 193 IN core-interpret.z80
CNTXT:              1112 DEFINED AT LINE 49
                    > USED AT LINE 167 IN core-interpret.z80
CRRNT:              111A DEFINED AT LINE 49
                    > USED AT LINE 73 IN core-compiler.z80
                    > USED AT LINE 72 IN core-utils.z80
CP:                 1122 DEFINED AT LINE 49
                    > USED AT LINE 13 IN core-compiler.z80
                    > USED AT LINE 19 IN core-compiler.z80
                    > USED AT LINE 45 IN core-compiler.z80
                    > USED AT LINE 114 IN core-memory.z80
NP:                 112A DEFINED AT LINE 49
                    > USED AT LINE 115 IN core-interpret.z80
LAST:               1132 DEFINED AT LINE 11
                    > USED AT LINE 50 IN core-compiler.z80
                    > USED AT LINE 70 IN core-compiler.z80
                    > USED AT LINE 101 IN core-compiler.z80
                    > USED AT LINE 134 IN core-compiler.z80
VFRTH:              113A DEFINED AT LINE 49
UTYPE:              1142 DEFINED AT LINE 11
                    > USED AT LINE 97 IN core-utils.z80
UTYP1:              114C DEFINED AT LINE 6 IN core-utils.z80
                    > USED AT LINE 10 IN core-utils.z80
UTYP2:              115A DEFINED AT LINE 9 IN core-utils.z80
                    > USED AT LINE 5 IN core-utils.z80
DMP:                1162 DEFINED AT LINE 49
PDUM1:              1176 DEFINED AT LINE 19 IN core-utils.z80
                    > USED AT LINE 23 IN core-utils.z80
PDUM2:              1186 DEFINED AT LINE 22 IN core-utils.z80
                    > USED AT LINE 18 IN core-utils.z80
DUMP:               118C DEFINED AT LINE 11
DUMP1:              11A0 DEFINED AT LINE 33 IN core-utils.z80
                    > USED AT LINE 39 IN core-utils.z80
DUMP2:              11C4 DEFINED AT LINE 41 IN core-utils.z80
                    > USED AT LINE 38 IN core-utils.z80
DUMP3:              11C8 DEFINED AT LINE 43 IN core-utils.z80
                    > USED AT LINE 40 IN core-utils.z80
DOTS:               11D2 DEFINED AT LINE 11
DOTS1:              11E0 DEFINED AT LINE 53 IN core-utils.z80
                    > USED AT LINE 56 IN core-utils.z80
DOTS2:              11E6 DEFINED AT LINE 55 IN core-utils.z80
                    > USED AT LINE 52 IN core-utils.z80
TNAME:              11F4 DEFINED AT LINE 11
                    > USED AT LINE 111 IN core-utils.z80
TNAM1:              11FA DEFINED AT LINE 73 IN core-utils.z80
                    > USED AT LINE 86 IN core-utils.z80
TNAM2:              1206 DEFINED AT LINE 77 IN core-utils.z80
                    > USED AT LINE 83 IN core-utils.z80
TNAM3:              121E DEFINED AT LINE 84 IN core-utils.z80
                    > USED AT LINE 79 IN core-utils.z80
                    > USED AT LINE 81 IN core-utils.z80
TNAM4:              1232 DEFINED AT LINE 88 IN core-utils.z80
                    > USED AT LINE 75 IN core-utils.z80
DOTID:              123A DEFINED AT LINE 11
                    > USED AT LINE 115 IN core-utils.z80
DOTI1:              1250 DEFINED AT LINE 98 IN core-utils.z80
                    > USED AT LINE 95 IN core-utils.z80
SEE:                125E DEFINED AT LINE 11
SEE1:               1268 DEFINED AT LINE 108 IN core-utils.z80
                    > USED AT LINE 121 IN core-utils.z80
SEE2:               1276 DEFINED AT LINE 112 IN core-utils.z80
                    > USED AT LINE 110 IN core-utils.z80
SEE3:               1284 DEFINED AT LINE 117 IN core-utils.z80
                    > USED AT LINE 114 IN core-utils.z80
SEE4:               128A DEFINED AT LINE 119 IN core-utils.z80
                    > USED AT LINE 116 IN core-utils.z80
LASTN:              139A DEFINED AT LINE 91
                    > USED AT LINE 30 IN defaults.z80
                    > USED AT LINE 31 IN defaults.z80
SPP:                2200 DEFINED AT LINE 3 IN variables.z80
                    > USED AT LINE 45
                    > USED AT LINE 5 IN defaults.z80
TIBB:               2200 DEFINED AT LINE 4 IN variables.z80
                    > USED AT LINE 18 IN defaults.z80
                    > USED AT LINE 49 IN core-kernel.z80
RPP:                2400 DEFINED AT LINE 6 IN variables.z80
                    > USED AT LINE 53
                    > USED AT LINE 6 IN defaults.z80
UPP:                2400 DEFINED AT LINE 7 IN variables.z80
                    > USED AT LINE 49
                    > USED AT LINE 42 IN core-does.z80
VARSZERO:           2400 DEFINED AT LINE 9 IN variables.z80
VARRZERO:           2402 DEFINED AT LINE 10 IN variables.z80
VARTQKEY:           2404 DEFINED AT LINE 11 IN variables.z80
VARTEMIT:           2406 DEFINED AT LINE 12 IN variables.z80
VARTEXPE:           2408 DEFINED AT LINE 13 IN variables.z80
VARTTAP:            240A DEFINED AT LINE 14 IN variables.z80
VARTECHO:           240C DEFINED AT LINE 15 IN variables.z80
VARTPROM:           240E DEFINED AT LINE 16 IN variables.z80
VARBASE:            2410 DEFINED AT LINE 17 IN variables.z80
VARTEMP:            2412 DEFINED AT LINE 18 IN variables.z80
VARSPAN:            2414 DEFINED AT LINE 19 IN variables.z80
VARINN:             2416 DEFINED AT LINE 20 IN variables.z80
VARNTIB:            2418 DEFINED AT LINE 21 IN variables.z80
VARTIB:             241A DEFINED AT LINE 22 IN variables.z80
VARCSP:             241C DEFINED AT LINE 23 IN variables.z80
VARTEVAL:           241E DEFINED AT LINE 24 IN variables.z80
VARTNUMB:           2420 DEFINED AT LINE 25 IN variables.z80
VARHLD:             2422 DEFINED AT LINE 26 IN variables.z80
VARHANDL:           2424 DEFINED AT LINE 27 IN variables.z80
VARCNTXT:           2426 DEFINED AT LINE 28 IN variables.z80
VARVOCABS:          2428 DEFINED AT LINE 29 IN variables.z80
VARCRRNT:           242A DEFINED AT LINE 30 IN variables.z80
VARVOCABLP:         242C DEFINED AT LINE 31 IN variables.z80
VARCP:              242E DEFINED AT LINE 32 IN variables.z80
VARNP:              2430 DEFINED AT LINE 33 IN variables.z80
VARLAST:            2432 DEFINED AT LINE 34 IN variables.z80
VARVFRTH:           2434 DEFINED AT LINE 35 IN variables.z80
VARVOCABL:          2436 DEFINED AT LINE 36 IN variables.z80
SERINPTR:           2438 DEFINED AT LINE 38 IN variables.z80
                    > USED AT LINE 16 IN interrupt.z80
                    > USED AT LINE 22 IN interrupt.z80
                    > USED AT LINE 7 IN serial.z80
SERRDPTR:           243A DEFINED AT LINE 39 IN variables.z80
                    > USED AT LINE 8 IN serial.z80
                    > USED AT LINE 23 IN serial.z80
                    > USED AT LINE 31 IN serial.z80
SERBUFUSED:         243C DEFINED AT LINE 40 IN variables.z80
                    > USED AT LINE 10 IN interrupt.z80
                    > USED AT LINE 25 IN interrupt.z80
                    > USED AT LINE 27 IN interrupt.z80
                    > USED AT LINE 10 IN serial.z80
                    > USED AT LINE 18 IN serial.z80
                    > USED AT LINE 32 IN serial.z80
                    > USED AT LINE 34 IN serial.z80
                    > USED AT LINE 56 IN serial.z80
SERBUF:             243E DEFINED AT LINE 41 IN variables.z80
                    > USED AT LINE 19 IN interrupt.z80
                    > USED AT LINE 21 IN interrupt.z80
                    > USED AT LINE 6 IN serial.z80
                    > USED AT LINE 26 IN serial.z80
                    > USED AT LINE 28 IN serial.z80
VECTAB:             247D DEFINED AT LINE 43 IN variables.z80
VRST08:             247D DEFINED AT LINE 44 IN variables.z80
                    > USED AT LINE 12
VRST10:             247F DEFINED AT LINE 45 IN variables.z80
                    > USED AT LINE 16
VRST18:             2481 DEFINED AT LINE 46 IN variables.z80
                    > USED AT LINE 20
VRST20:             2483 DEFINED AT LINE 47 IN variables.z80
                    > USED AT LINE 24
VRST28:             2485 DEFINED AT LINE 48 IN variables.z80
                    > USED AT LINE 28
VRST30:             2487 DEFINED AT LINE 49 IN variables.z80
                    > USED AT LINE 32
VINT:               2489 DEFINED AT LINE 50 IN variables.z80
                    > USED AT LINE 36
                    > USED AT LINE 44
VNMI:               248B DEFINED AT LINE 51 IN variables.z80
                    > USED AT LINE 40
CPP:                248D DEFINED AT LINE 53 IN variables.z80
                    > USED AT LINE 28 IN defaults.z80
NPP:                FFFE DEFINED AT LINE 55 IN variables.z80
                    > USED AT LINE 29 IN defaults.z80

0000                          .ENGINE   mycomputer   
0000                TESTMODE:   EQU   0   
0000                MEM_SIZE:   EQU   $10000   ; MEM is 64K
0000                ROM_SIZE:   EQU   $2000   ; ROM is 8K
0000                RAM_SIZE:   EQU   MEM_SIZE - ROM_SIZE   ; RAM is 64K - 8K
0000                START_ROM:   EQU   BM   ; inclusive
0000                END_ROM:   EQU   BM + ROM_SIZE   ; exclusive
0000                START_RAM:   EQU   BM + ROM_SIZE   ; inclusive
0000                END_RAM:   EQU   START_RAM + RAM_SIZE   ; exclusive
0000                BM:       EQU   0   ; bottom of ROM memory
0000                EM:       EQU   BM + MEM_SIZE   
0000                COMPO:    EQU   $20   ;lexicon compile only bit
0000                IMEDD:    EQU   $40   ;lexicon immediate bit
0000                MASKK:    EQU   $1F   ;lexicon bit mask
0000                CHARR:    EQU   1   ;byte size of a character
0000                CELLL:    EQU   2   
0000                BASEE:    EQU   10   ;BASE
0000                VOCSS:    EQU   8   ;depth of vocabulary stack
0000                MAXCHAR:   EQU   0FFh   ;Extended character set					                    ;  Use 07Fh for ASCII only
0000                MAXSIGNED:   EQU   07FFFh   ;max value of signed integer
0000                MAXUNSIGNED:   EQU   0FFFFh   ;max value of unsigned integer
0000                MAXNEGATIVE:   EQU   8000h   ;max value of negative integer
0000                BKSPP:    EQU   8   ;backspace
0000                LFF:      EQU   $0A   ;line feed
0000                CRR:      EQU   $0D   ;carriage return
0000                SPACEE:   EQU   $20   
0000                TIC:      EQU   $27   ;tick
0000                MINUSS:   EQU   $2D   
0000                UNDERSC:   EQU   $5F   
0000                CALLL:    EQU   $CD00   ; NOP followed by CALL opcodes
0000                US:       EQU   END_DEFAULTS - DEFAULTS   ;user area size
0000                RTS:      EQU   $100 * CELLL   ;return stack/TIB size
0000                DTS:      EQU   $100 * CELLL   ;data stack size
0000                RET_STACK_SIZE:   EQU   $100   
0000                DATA_STACK_SIZE:   EQU   $100   
0000                INT_ADDR:   EQU   $0038   
0000                SER_BUFSIZE:   EQU   $3F   
0000                SER_FULLSIZE:   EQU   $30   
0000                SER_EMPTYSIZE:   EQU   5   
0000                RTS_HIGH:   EQU   $D6   
0000                RTS_LOW:   EQU   $96   
0000                TRUEE:    EQU   -1   
0000                FALSEE:   EQU   0   
0000                             ; Initialize assembly variables
0000                VVCODE:   .SET   0   
0000                VVNAME:   .SET   END_ROM   
0000                VVLINK:   .SET   0   ;force a null link
0000                VVUSER:   .SET   0   ;first user variable offset
0000                .macro MCODE,aaLEX,aaNAME,aaLABEL
0000                             ; 
0000                 .align 2                                         ;;force to cell boundary
0000                aaLABEL:                                              ;;assembly label
0000                 vvCODE .set $
0000                 vvLEN  .set (aaLEX & 01FH) / CELLL              ;;string cell count, round down
0000                 ORG vvNAME - ((vvLEN + 3) * CELLL)                                     ; ? needed
0000                 vvNAME .set $
0000                 DW vvCODE, vvLINK                               ;;token pointer and link
0000                 vvLINK .set $                                   ;;link points to a name string
0000                 DB aaLEX, aaNAME                                    ;;name string
0000                 ORG vvCODE                                      ;;restore code pointer
0000                .endm
0000                 
0000                .macro MCOLON,aaLEX,aaNAME,aaLABEL
0000                             ; 
0000                 mCODE aaLEX, aaNAME, aaLABEL
0000                 nop
0000                 CALL doLIST
0000                .endm
0000                 
0000                .macro MUSER,aaLEX,aaNAME,aaLABEL
0000                             ; 
0000                	mCODE aaLEX, aaNAME, aaLABEL
0000                 nop
0000                 CALL doLIST
0000                 DW DoUSE,vvUSER
0000                 vvUSER .set vvUSER + CELLL
0000                .endm
0000                 
0000                             ; .align 2
0000                .macro MDSTR,aaFUNC,aaSTR
0000                             ; 
0000                 DW aaFUNC                       ;;function
0000                 vvLEN .set $                    ;;save address of count byte
0000                 DB 0,aaSTR                      ;;count byte and string
0000                 vvCODE .set $                   ;;save code pointer
0000                ORG vvLEN                           ;;point to count byte
0000                 DB vvCODE - vvLEN - 1           ;;set count
0000                ORG vvCODE                          ;;restore code pointer
0000                .endm
0000                 
0000                .macro HCODE,aaLEX,aaNAME,aaLABEL
0000                             ; 
0000                 .align 2                                         ;;force to cell boundary
0000                aaLABEL:                                              ;;assembly label
0000                .endm
0000                 
0000                .macro HCOLON,aaLEX,aaNAME,aaLABEL
0000                             ; 
0000                 hCODE aaLEX, aaNAME, aaLABEL
0000                 nop
0000                 CALL doLIST
0000                .endm
0000                 
0000                .macro HUSER,aaLEX,aaNAME,aaLABEL
0000                             ; 
0000                	hCODE aaLEX, aaNAME, aaLABEL
0000                 nop
0000                 CALL doLIST
0000                 DW DoUSE,vvUSER
0000                 vvUSER .set vvUSER + CELLL
0000                .endm
0000                 
0000                             ; 	LD	E,(HL)	                    ; 7t
0000                             ; 	INC	HL	                        ; 6t
0000                             ; 	LD	D,(HL)	                    ; 7t
0000                             ; 	INC	HL	                        ; 6t
0000                             ; 	EX	DE,HL	                    ; 4t
0000                             ; 	JP	(HL)	                    ; 4t
0000                .macro MNEXTHL,
0000                             ; 
0000                 JP (IY)
0000                .endm
0000                 
0000                .macro MNEXT,
0000                             ; 
0000                	EX	DE,HL	                    ; 4t
0000                 mNEXTHL                         ; 34t
0000                .endm
0000                 
0000                          .ORG   START_ROM   
0000                RESET:       
0000   C3 72 00               JP   INIT   ; C3 veclo vechi
0038                          .ORG   INT_ADDR   ; RST 38 - INTERRUPT VECTOR [ for IM 1 ]
0038   F5           SERIALINT:   PUSH   AF   
0039   E5                     PUSH   HL   
003A   DB 80                  IN   A,($80)   
003C   E6 01                  AND   $01   ; Check if interupt due to read buffer full
003E   28 2D                  JR   Z,rts0   ; if not, ignore
0040   DB 81                  IN   A,($81)   
0042   F5                     PUSH   AF   
0043   3A 3C 24               LD   A,(serBufUsed)   
0046   FE 3F                  CP   SER_BUFSIZE   ; If full then ignore
0048   20 03                  JR   NZ,notFull   
004A   F1                     POP   AF   
004B   18 20                  JR   rts0   
004D   2A 38 24     NOTFULL:   LD   HL,(serInPtr)   
0050   23                     INC   HL   
0051   7D                     LD   A,L   ; Only need to check low byte becasuse buffer<256 bytes
0052   FE 7D                  CP   (serBuf+SER_BUFSIZE) & $FF   
0054   20 03                  JR   NZ,notWrap   
0056   21 3E 24               LD   HL,serBuf   
0059   22 38 24     NOTWRAP:   LD   (serInPtr),HL   
005C   F1                     POP   AF   
005D   77                     LD   (HL),A   
005E   3A 3C 24               LD   A,(serBufUsed)   
0061   3C                     INC   A   
0062   32 3C 24               LD   (serBufUsed),A   
0065   FE 30                  CP   SER_FULLSIZE   
0067   38 04                  JR   C,rts0   
0069   3E D6                  LD   A,RTS_HIGH   
006B   D3 80                  OUT   ($80),A   
006D   E1           RTS0:     POP   HL   
006E   F1                     POP   AF   
006F   FB                     EI      
0070   ED 4D                  RETI      
0072                INIT:        
0072   21 00 22               LD   HL,SPP   ; Setup Forth data stack
0075   F9                     LD   SP,HL   ; also used as return stack by interrupts etc
0076   21 FB 00               LD   HL,DEFAULTS   ; initialize user variables with defaults
0079   11 00 24               LD   DE,UPP   
007C   01 3A 00               LD   BC,US   
007F   ED B0                  LDIR      
0081   DD 21 00 24            LD   IX,RPP   ; set up Forth return stack
0085   FD 21 BA 0D            LD   IY,NEXT_STEP   
0089   01 FF FF               LD   BC,-1   ; empty stack marker
008C   11 01 00               LD   DE,RESET + 1   ; contains reset vector
008F   C3 C0 0D               JP   COLD   
0092                          IF   TESTMODE   
                              JP   TESTS_START   
0092                          ELSE      
0092   21 A8 0F               LD   HL,GREETING   
0095   CD F1 00               CALL   PRINTSZ   
0098                LOOP:        
0098   CD B5 00               CALL   RXA   
009B   CD E0 00               CALL   TXA   
009E   C3 98 00               JP   LOOP   
00A1                          ENDIF      
00A1                             ; Modified from code by Grant Searle
00A1                             ; Minimum 6850 ACIA interrupt driven serial I/O
00A1                INIT_IO:      
00A1   F3                     DI      ; Disable interrupts
00A2   21 3E 24               LD   HL,serBuf   
00A5   22 38 24               LD   (serInPtr),HL   
00A8   22 3A 24               LD   (serRdPtr),HL   
00AB   AF                     XOR   A   
00AC   32 3C 24               LD   (serBufUsed),A   
00AF   3E 96                  LD   A,RTS_LOW   
00B1   D3 80                  OUT   ($80),A   ; Initialise ACIA
00B3   FB                     EI      
00B4   C9                     RET      
00B5                RXA:         
00B5                WAITFORCHAR:      
00B5   3A 3C 24               LD   A,(serBufUsed)   
00B8   FE 00                  CP   $00   
00BA   28 F9                  JR   Z,waitForChar   
00BC   E5                     PUSH   HL   
00BD   2A 3A 24               LD   HL,(serRdPtr)   
00C0   23                     INC   HL   
00C1   7D                     LD   A,L   ; Only need to check low byte becasuse buffer<256 bytes
00C2   FE 7D                  CP   (serBuf+SER_BUFSIZE) & $FF   
00C4   20 03                  JR   NZ,notRdWrap   
00C6   21 3E 24               LD   HL,serBuf   
00C9                NOTRDWRAP:      
00C9   F3                     DI      
00CA   22 3A 24               LD   (serRdPtr),HL   
00CD   3A 3C 24               LD   A,(serBufUsed)   
00D0   3D                     DEC   A   
00D1   32 3C 24               LD   (serBufUsed),A   
00D4   FE 05                  CP   SER_EMPTYSIZE   
00D6   30 04                  JR   NC,rts1   
00D8   3E 96                  LD   A,RTS_LOW   
00DA   D3 80                  OUT   ($80),A   
00DC                RTS1:        
00DC   7E                     LD   A,(HL)   
00DD   FB                     EI      
00DE   E1                     POP   HL   
00DF   C9                     RET      ; Char ready in A
00E0                TXA:         
00E0   F5                     PUSH   AF   ; Store character
00E1                CONOUT1:      
00E1   DB 80                  IN   A,($80)   ; Status byte
00E3   CB 4F                  BIT   1,A   ; Set Zero flag if still transmitting character
00E5   28 FA                  JR   Z,conout1   ; Loop until flag signals ready
00E7   F1                     POP   AF   ; Retrieve character
00E8   D3 81                  OUT   ($81),A   ; Output the character
00EA   C9                     RET      
00EB                CKINCHAR:      
00EB   3A 3C 24               LD   A,(serBufUsed)   
00EE   FE 00                  CP   $0   
00F0   C9                     RET      
00F1                PRINTSZ:      
00F1   7E                     LD   A,(HL)   ; Get character
00F2   B7                     OR   A   ; Is it $00 ?
00F3   C8                     RET   Z   ; Then RETurn on terminator
00F4   CD E0 00               CALL   TXA   ; Print it
00F7   23                     INC   HL   ; Next Character
00F8   18 F7                  JR   PRINTSZ   ; Continue until $00
00FA   C9                     RET      
00FB                             ; .align 2
00FB                DEFAULTS:      
00FB   00 22        DEFSZERO:   DW   SPP   ; SP0
00FD   00 24        DEFRZERO:   DW   RPP   ; RP0
00FF   88 0B        DEFTQKEY:   DW   QRX   ; '?KEY
0101   A0 0B        DEFTEMIT:   DW   TXSTO   ; 'EMIT
0103   00 00        DEFTEXPE:   DW   0   ; 'EXPECT
0105   00 00        DEFTTAP:   DW   0   ; 'TAP
0107   A0 0B        DEFTECHO:   DW   TXSTO   ; 'ECHO
0109   00 00        DEFTPROM:   DW   0   ; 'PROMPT
010B   00 00        DEFBASE:   DW   0   ; BASE
010D   00 00        DEFTEMP:   DW   0   ; tmp
010F   00 00        DEFSPAN:   DW   0   ; SPAN
0111   00 00        DEFINN:   DW   0   ; >IN
0113   00 00        DEFNTIB:   DW   0   ; #TIB
0115   00 22        DEFTIB:   DW   TIBB   ; TIB
0117   00 00        DEFCSP:   DW   0   ; CSP
0119   00 00        DEFTEVAL:   DW   0   ; 'EVAL
011B   00 00        DEFTNUMB:   DW   0   ; 'NUMBER
011D   00 00        DEFHLD:   DW   0   ; HLD
011F   00 00        DEFHANDL:   DW   0   ; HANDLER
0121   00 00        DEFCNTXT:   DW   0   ; CONTEXT pointer
0123   00 00        DEFVOCABS:   DW   0   ; vocabulary stack    ???
0125   00 00        DEFCRRENT:   DW   0   ; CURRENT pointer
0127   00 00        DEFVOCABLP:   DW   0   ; vocabulary link pointer ???
0129   7D 24        DEFCP:    DW   CPP   ; CP  for runing phase on RAM
012B   FE FF        DEFNP:    DW   NPP   ; NP  for runing phase on RAM
012D   00 00        DEFLAST:   DW   0   ; LAST
012F   00 00        DEFVFRTH:   DW   0   ; FORTH   \ mullti-user ???
0131   00 00        DEFVOCABL:   DW   0   ; vocabulary link       ???
0133   00 00        DEFCOLD:   DW   0   ; "COLD"
0135                END_DEFAULTS:      
0135                VVCODE:   .SET   $   
0135                             ;   0<          ( n -- t )
0135                             ;               Return true if n is negative.
0135                          ;*Macro unroll: mCODE	2,'0<', ZLESS
0135                          ALIGN   2   
0136                ZLESS:       
0136                VVCODE:   .SET   $   
0136                VVLEN:    .SET   (2 & 01FH) / CELLL   
1FF8                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FF8                VVNAME:   .SET   $   
1FF8   36 01 00 00            DW   vvCODE,vvLINK   
1FFC                VVLINK:   .SET   $   
1FFC   02 30 3C               DB   2,"0<"   
0136                          .ORG   vvCODE   
0136   CB 20                  SLA   B   ; sign bit -> cy flag
0138   9F                     SBC   A,A   ; propagate cy through A
0139   47                     LD   B,A   ; put 0000 or FFFF in TOS
013A   4F                     LD   C,A   
013B                          ;*Macro unroll: 	mNEXT
013B   EB                     EX   DE,HL   
013C                          ;*Macro unroll:  mNEXTHL                         ; 34t
013C   FD E9                  JP   (IY)   ; 34t
013E                             ;   AND         ( w w -- w )
013E                             ;               Bitwise AND.
013E                          ;*Macro unroll: mCODE	3, 'AND', ANDD
013E                          ALIGN   2   
013E                ANDD:        
013E                VVCODE:   .SET   $   
013E                VVLEN:    .SET   (3 & 01FH) / CELLL   
1FF0                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FF0                VVNAME:   .SET   $   
1FF0   3E 01 FC 1F            DW   vvCODE,vvLINK   
1FF4                VVLINK:   .SET   $   
1FF4   03 41 4E 44            DB   3,"AND"   
013E                          .ORG   vvCODE   
013E   E1                     POP   HL   
013F   78                     LD   A,B   
0140   A4                     AND   H   
0141   47                     LD   B,A   
0142   79                     LD   A,C   
0143   A5                     AND   L   
0144   4F                     LD   C,A   
0145                          ;*Macro unroll: 	mNEXT
0145   EB                     EX   DE,HL   
0146                          ;*Macro unroll:  mNEXTHL                         ; 34t
0146   FD E9                  JP   (IY)   ; 34t
0148                             ;   OR          ( w w -- w )
0148                             ;               Bitwise inclusive OR.
0148                          ;*Macro unroll: mCODE	2,'OR', ORR
0148                          ALIGN   2   
0148                ORR:         
0148                VVCODE:   .SET   $   
0148                VVLEN:    .SET   (2 & 01FH) / CELLL   
1FE8                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FE8                VVNAME:   .SET   $   
1FE8   48 01 F4 1F            DW   vvCODE,vvLINK   
1FEC                VVLINK:   .SET   $   
1FEC   02 4F 52               DB   2,"OR"   
0148                          .ORG   vvCODE   
0148   E1                     POP   HL   
0149   78                     LD   A,B   
014A   B4                     OR   H   
014B   47                     LD   B,A   
014C   79                     LD   A,C   
014D   B5                     OR   L   
014E   4F                     LD   C,A   
014F                          ;*Macro unroll: 	mNEXT
014F   EB                     EX   DE,HL   
0150                          ;*Macro unroll:  mNEXTHL                         ; 34t
0150   FD E9                  JP   (IY)   ; 34t
0152                             ;   XOR         ( w w -- w )
0152                             ;               Bitwise exclusive
0152                          ;*Macro unroll: mCODE	3, 'XOR', XORR
0152                          ALIGN   2   
0152                XORR:        
0152                VVCODE:   .SET   $   
0152                VVLEN:    .SET   (3 & 01FH) / CELLL   
1FE0                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FE0                VVNAME:   .SET   $   
1FE0   52 01 EC 1F            DW   vvCODE,vvLINK   
1FE4                VVLINK:   .SET   $   
1FE4   03 58 4F 52            DB   3,"XOR"   
0152                          .ORG   vvCODE   
0152   E1                     POP   HL   
0153   78                     LD   A,B   
0154   AC                     XOR   H   
0155   47                     LD   B,A   
0156   79                     LD   A,C   
0157   AD                     XOR   L   
0158   4F                     LD   C,A   
0159                          ;*Macro unroll: 	mNEXT
0159   EB                     EX   DE,HL   
015A                          ;*Macro unroll:  mNEXTHL                         ; 34t
015A   FD E9                  JP   (IY)   ; 34t
015C                             ;   +           ( w w -- sum )
015C                             ;               Add top two items.
015C                          ;*Macro unroll: mCOLON	1,'+', PLUS
015C                          ;*Macro unroll:  mCODE 1, "+", PLUS
015C                          ALIGN   2   
015C                PLUS:        
015C                VVCODE:   .SET   $   
015C                VVLEN:    .SET   (1 & 01FH) / CELLL   
1FDA                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FDA                VVNAME:   .SET   $   
1FDA   5C 01 E4 1F            DW   vvCODE,vvLINK   
1FDE                VVLINK:   .SET   $   
1FDE   01 2B                  DB   1,"+"   
015C                          .ORG   vvCODE   
015C   00                     NOP      
015D   CD E2 05               CALL   doLIST   
0160   4C 02 FE 0F 18 06      DW   UMPlus,DROP,EXIT   
0166                             ;   NOT         ( w -- w )
0166                             ;               One's complement of tos.
0166                          ;*Macro unroll: mCOLON  3, 'NOT', INVER
0166                          ;*Macro unroll:  mCODE 3, "NOT", INVER
0166                          ALIGN   2   
0166                INVER:       
0166                VVCODE:   .SET   $   
0166                VVLEN:    .SET   (3 & 01FH) / CELLL   
1FD2                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FD2                VVNAME:   .SET   $   
1FD2   66 01 DE 1F            DW   vvCODE,vvLINK   
1FD6                VVLINK:   .SET   $   
1FD6   03 4E 4F 54            DB   3,"NOT"   
0166                          .ORG   vvCODE   
0166   00                     NOP      
0167   CD E2 05               CALL   doLIST   
016A   F0 05 FF FF 52 01 18 06 DW   DoLIT,-1,XORR,EXIT   
0172                             ;   NEGAT      ( n -- -n )
0172                             ;               Two's complement of tos.
0172                          ;*Macro unroll: mCOLON	6,'NEGATE',NEGAT
0172                          ;*Macro unroll:  mCODE 6, "NEGATE", NEGAT
0172                          ALIGN   2   
0172                NEGAT:       
0172                VVCODE:   .SET   $   
0172                VVLEN:    .SET   (6 & 01FH) / CELLL   
1FC6                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FC6                VVNAME:   .SET   $   
1FC6   72 01 D6 1F            DW   vvCODE,vvLINK   
1FCA                VVLINK:   .SET   $   
1FCA   06 4E 45 47 41 54 45   DB   6,"NEGATE"   
0172                          .ORG   vvCODE   
0172   00                     NOP      
0173   CD E2 05               CALL   doLIST   
0176   66 01 7C 01 18 06      DW   INVER,OnePlus,EXIT   
017C                             ;   1+		( n1|u1 -- n2|u2 )		
017C                             ;		Increase top of the stack item by 1.
017C                          ;*Macro unroll: mCOLON	2,'1+',OnePlus
017C                          ;*Macro unroll:  mCODE 2, "1+", OnePlus
017C                          ALIGN   2   
017C                ONEPLUS:      
017C                VVCODE:   .SET   $   
017C                VVLEN:    .SET   (2 & 01FH) / CELLL   
1FBE                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FBE                VVNAME:   .SET   $   
1FBE   7C 01 CA 1F            DW   vvCODE,vvLINK   
1FC2                VVLINK:   .SET   $   
1FC2   02 31 2B               DB   2,"1+"   
017C                          .ORG   vvCODE   
017C   00                     NOP      
017D   CD E2 05               CALL   doLIST   
0180   F0 05 01 00 5C 01 18 06 DW   DoLIT,1,Plus,EXIT   
0188                             ;   DNEGATE     ( d -- -d )
0188                             ;               Two's complement of top double.
0188                          ;*Macro unroll: mCOLON	7,'DNEGATE',DNEGA
0188                          ;*Macro unroll:  mCODE 7, "DNEGATE", DNEGA
0188                          ALIGN   2   
0188                DNEGA:       
0188                VVCODE:   .SET   $   
0188                VVLEN:    .SET   (7 & 01FH) / CELLL   
1FB2                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FB2                VVNAME:   .SET   $   
1FB2   88 01 C2 1F            DW   vvCODE,vvLINK   
1FB6                VVLINK:   .SET   $   
1FB6   07 44 4E 45 47 41 54 45 DB   7,"DNEGATE"   
0188                          .ORG   vvCODE   
0188   00                     NOP      
0189   CD E2 05               CALL   doLIST   
018C   66 01 DE 0F 66 01      DW   INVER,ToR,INVER   
0192   F0 05 01 00 4C 02      DW   DoLIT,1,UMPlus   
0198   EC 0F 5C 01 18 06      DW   RFrom,Plus,EXIT   
019E                             ;   -           ( n1 n2 -- n1-n2 )
019E                             ;               Subtraction.
019E                          ;*Macro unroll: mCOLON	1, '-', SUBB
019E                          ;*Macro unroll:  mCODE 1, "-", SUBB
019E                          ALIGN   2   
019E                SUBB:        
019E                VVCODE:   .SET   $   
019E                VVLEN:    .SET   (1 & 01FH) / CELLL   
1FAC                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FAC                VVNAME:   .SET   $   
1FAC   9E 01 B6 1F            DW   vvCODE,vvLINK   
1FB0                VVLINK:   .SET   $   
1FB0   01 2D                  DB   1,"-"   
019E                          .ORG   vvCODE   
019E   00                     NOP      
019F   CD E2 05               CALL   doLIST   
01A2   72 01 5C 01 18 06      DW   NEGAT,Plus,EXIT   
01A8                             ;   ABS         ( n -- n )
01A8                             ;               Return the absolute value of n.
01A8                          ;*Macro unroll: mCOLON	3,'ABS',ABSS
01A8                          ;*Macro unroll:  mCODE 3, "ABS", ABSS
01A8                          ALIGN   2   
01A8                ABSS:        
01A8                VVCODE:   .SET   $   
01A8                VVLEN:    .SET   (3 & 01FH) / CELLL   
1FA4                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FA4                VVNAME:   .SET   $   
1FA4   A8 01 B0 1F            DW   vvCODE,vvLINK   
1FA8                VVLINK:   .SET   $   
1FA8   03 41 42 53            DB   3,"ABS"   
01A8                          .ORG   vvCODE   
01A8   00                     NOP      
01A9   CD E2 05               CALL   doLIST   
01AC   FA 0F 36 01 E6 0D B6 01 DW   DUPP,ZLESS,QBRAN,ABS1   
01B4   72 01                  DW   NEGAT   
01B6                ABS1:        
01B6   18 06                  DW   EXIT   
01B8                             ;   =           ( w w -- t )
01B8                             ;               Return true if top two are equal.
01B8                          ;*Macro unroll: mCOLON	1, '=', EQUAL
01B8                          ;*Macro unroll:  mCODE 1, "=", EQUAL
01B8                          ALIGN   2   
01B8                EQUAL:       
01B8                VVCODE:   .SET   $   
01B8                VVLEN:    .SET   (1 & 01FH) / CELLL   
1F9E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F9E                VVNAME:   .SET   $   
1F9E   B8 01 A8 1F            DW   vvCODE,vvLINK   
1FA2                VVLINK:   .SET   $   
1FA2   01 3D                  DB   1,"="   
01B8                          .ORG   vvCODE   
01B8   00                     NOP      
01B9   CD E2 05               CALL   doLIST   
01BC   52 01                  DW   XORR   
01BE   E6 0D C8 01            DW   QBRAN,EQU1   
01C2   F0 05 00 00 18 06      DW   DOLIT,0,EXIT   ;false flag
01C8                EQU1:        
01C8   F0 05 FF FF 18 06      DW   DOLIT,-1,EXIT   ;true flag
01CE                             ;   U<          ( u u -- t )
01CE                             ;               Unsigned compare of top two items.
01CE                          ;*Macro unroll: mCOLON	2,'U<',ULESS
01CE                          ;*Macro unroll:  mCODE 2, "U<", ULESS
01CE                          ALIGN   2   
01CE                ULESS:       
01CE                VVCODE:   .SET   $   
01CE                VVLEN:    .SET   (2 & 01FH) / CELLL   
1F96                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F96                VVNAME:   .SET   $   
1F96   CE 01 A2 1F            DW   vvCODE,vvLINK   
1F9A                VVLINK:   .SET   $   
1F9A   02 55 3C               DB   2,"U<"   
01CE                          .ORG   vvCODE   
01CE   00                     NOP      
01CF   CD E2 05               CALL   doLIST   
01D2   38 10 52 01 36 01      DW   DDUP,XORR,ZLESS   
01D8   E6 0D E2 01            DW   QBRAN,ULES1   
01DC   E8 01 36 01 18 06      DW   NIP,ZLESS,EXIT   
01E2                ULES1:       
01E2   9E 01 36 01 18 06      DW   SUBB,ZLESS,EXIT   
01E8                             ;   NIP 	( n1 n2 -- n2 ) 		\ CORE EXT
01E8                             ;		Discard the second stack item.
01E8                          ;*Macro unroll: mCOLON	3,'NIP',NIP
01E8                          ;*Macro unroll:  mCODE 3, "NIP", NIP
01E8                          ALIGN   2   
01E8                NIP:         
01E8                VVCODE:   .SET   $   
01E8                VVLEN:    .SET   (3 & 01FH) / CELLL   
1F8E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F8E                VVNAME:   .SET   $   
1F8E   E8 01 9A 1F            DW   vvCODE,vvLINK   
1F92                VVLINK:   .SET   $   
1F92   03 4E 49 50            DB   3,"NIP"   
01E8                          .ORG   vvCODE   
01E8   00                     NOP      
01E9   CD E2 05               CALL   doLIST   
01EC   02 10 FE 0F 18 06      DW   SWAP,DROP,EXIT   
01F2                             ;   <           ( n1 n2 -- t )
01F2                             ;               is less than
01F2                          ;*Macro unroll: mCOLON	1,'<',LESS
01F2                          ;*Macro unroll:  mCODE 1, "<", LESS
01F2                          ALIGN   2   
01F2                LESS:        
01F2                VVCODE:   .SET   $   
01F2                VVLEN:    .SET   (1 & 01FH) / CELLL   
1F88                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F88                VVNAME:   .SET   $   
1F88   F2 01 92 1F            DW   vvCODE,vvLINK   
1F8C                VVLINK:   .SET   $   
1F8C   01 3C                  DB   1,"<"   
01F2                          .ORG   vvCODE   
01F2   00                     NOP      
01F3   CD E2 05               CALL   doLIST   
01F6   38 10 52 01 36 01 E6 0D 06 02 DW   DDUP,XORR,ZLESS,QBRAN,LESS1   
0200   FE 0F 36 01 18 06      DW   DROP,ZLESS,EXIT   
0206                LESS1:       
0206   9E 01 36 01 18 06      DW   SUBB,ZLESS,EXIT   
020C                             ;   >           ( n1 n2 -- t )
020C                             ;               is greater than
020C                          ;*Macro unroll: mCOLON	1,'>',GreaterThan
020C                          ;*Macro unroll:  mCODE 1, ">", GreaterThan
020C                          ALIGN   2   
020C                GREATERTHAN:      
020C                VVCODE:   .SET   $   
020C                VVLEN:    .SET   (1 & 01FH) / CELLL   
1F82                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F82                VVNAME:   .SET   $   
1F82   0C 02 8C 1F            DW   vvCODE,vvLINK   
1F86                VVLINK:   .SET   $   
1F86   01 3E                  DB   1,">"   
020C                          .ORG   vvCODE   
020C   00                     NOP      
020D   CD E2 05               CALL   doLIST   
0210   02 10 F2 01 18 06      DW   SWAP,LESS,EXIT   
0216                             ;   MAX         ( n n -- n )
0216                             ;               Return the greater of two top stack items.
0216                          ;*Macro unroll: mCOLON	3,'MAX',MAX
0216                          ;*Macro unroll:  mCODE 3, "MAX", MAX
0216                          ALIGN   2   
0216                MAX:         
0216                VVCODE:   .SET   $   
0216                VVLEN:    .SET   (3 & 01FH) / CELLL   
1F7A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F7A                VVNAME:   .SET   $   
1F7A   16 02 86 1F            DW   vvCODE,vvLINK   
1F7E                VVLINK:   .SET   $   
1F7E   03 4D 41 58            DB   3,"MAX"   
0216                          .ORG   vvCODE   
0216   00                     NOP      
0217   CD E2 05               CALL   doLIST   
021A   38 10 F2 01 E6 0D 24 02 DW   DDUP,LESS,QBRAN,MAX1   
0222   02 10                  DW   SWAP   
0224                MAX1:        
0224   FE 0F 18 06            DW   DROP,EXIT   
0228                             ;   MIN         ( n n -- n )
0228                             ;               Return the smaller of top two stack items.
0228                          ;*Macro unroll: mCOLON	3,'MIN',MIN
0228                          ;*Macro unroll:  mCODE 3, "MIN", MIN
0228                          ALIGN   2   
0228                MIN:         
0228                VVCODE:   .SET   $   
0228                VVLEN:    .SET   (3 & 01FH) / CELLL   
1F72                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F72                VVNAME:   .SET   $   
1F72   28 02 7E 1F            DW   vvCODE,vvLINK   
1F76                VVLINK:   .SET   $   
1F76   03 4D 49 4E            DB   3,"MIN"   
0228                          .ORG   vvCODE   
0228   00                     NOP      
0229   CD E2 05               CALL   doLIST   
022C   38 10 0C 02 E6 0D 36 02 DW   DDUP,GreaterThan,QBRAN,MIN1   
0234   02 10                  DW   SWAP   
0236                MIN1:        
0236   FE 0F 18 06            DW   DROP,EXIT   
023A                             ;   WITHIN      ( u ul uh -- t )
023A                             ;               Return true if u is within the range of ul and uh.
023A                          ;*Macro unroll: mCOLON	6,'WITHIN',WITHI
023A                          ;*Macro unroll:  mCODE 6, "WITHIN", WITHI
023A                          ALIGN   2   
023A                WITHI:       
023A                VVCODE:   .SET   $   
023A                VVLEN:    .SET   (6 & 01FH) / CELLL   
1F66                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F66                VVNAME:   .SET   $   
1F66   3A 02 76 1F            DW   vvCODE,vvLINK   
1F6A                VVLINK:   .SET   $   
1F6A   06 57 49 54 48 49 4E   DB   6,"WITHIN"   
023A                          .ORG   vvCODE   
023A   00                     NOP      
023B   CD E2 05               CALL   doLIST   
023E   0A 10 9E 01 DE 0F      DW   OVER,SUBB,ToR   ;ul <= u < uh
0244   9E 01 EC 0F CE 01 18 06 DW   SUBB,RFrom,ULess,EXIT   
024C                             ;   UM+         ( w w -- w cy )
024C                             ;               Add two numbers, return the sum and carry flag.
024C                          ;*Macro unroll: mCODE	3,'um+',UMPlus
024C                          ALIGN   2   
024C                UMPLUS:      
024C                VVCODE:   .SET   $   
024C                VVLEN:    .SET   (3 & 01FH) / CELLL   
1F5E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F5E                VVNAME:   .SET   $   
1F5E   4C 02 6A 1F            DW   vvCODE,vvLINK   
1F62                VVLINK:   .SET   $   
1F62   03 75 6D 2B            DB   3,"um+"   
024C                          .ORG   vvCODE   
024C   E1                     POP   HL   ;10t
024D   09                     ADD   HL,BC   ;11t
024E   E5                     PUSH   HL   ;11t
024F   01 00 00               LD   BC,0   ;10t
0252   30 01                  JR   NC,UMP1   ;12/7t
0254                UMP2:        
0254   03                     INC   BC   ; 6t
0255                UMP1:        
0255                          ;*Macro unroll:  mNEXT
0255   EB                     EX   DE,HL   
0256                          ;*Macro unroll:  mNEXTHL                         ; 34t
0256   FD E9                  JP   (IY)   ; 34t
0258                             ; UM/MOD      ( udl udh u -- ur uq )
0258                             ; Unsigned divide of a double by a single. Return mod and quotient.
0258                             ; Note: Less range than eForth because most significant word discarded TODO: fix
0258                          ;*Macro unroll: mCOLON  6,'UM/MOD',UMMOD
0258                          ;*Macro unroll:  mCODE 6, "UM/MOD", UMMOD
0258                          ALIGN   2   
0258                UMMOD:       
0258                VVCODE:   .SET   $   
0258                VVLEN:    .SET   (6 & 01FH) / CELLL   
1F52                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F52                VVNAME:   .SET   $   
1F52   58 02 62 1F            DW   vvCODE,vvLINK   
1F56                VVLINK:   .SET   $   
1F56   06 55 4D 2F 4D 4F 44   DB   6,"UM/MOD"   
0258                          .ORG   vvCODE   
0258   00                     NOP      
0259   CD E2 05               CALL   doLIST   
025C   E8 01 62 02 18 06      DW   NIP,UMSLMOD2,EXIT   
0262                             ; UM/MOD2	( ud u1 -- u2 u3 )		
0262                             ; Unsigned division of a double-cell number ud by a single-cell
0262                             ; number u1. Return remainder u2 and quotient u3.
0262                             ; Note: Less range than eForth TODO: fix
0262                          ;*Macro unroll: mCODE	6,'UM/MOD2',UMSLMOD2
0262                          ALIGN   2   
0262                UMSLMOD2:      
0262                VVCODE:   .SET   $   
0262                VVLEN:    .SET   (6 & 01FH) / CELLL   
1F46                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F46                VVNAME:   .SET   $   
1F46   62 02 56 1F            DW   vvCODE,vvLINK   
1F4A                VVLINK:   .SET   $   
1F4A   06 55 4D 2F 4D 4F 44 32 DB   6,"UM/MOD2"   
0262                          .ORG   vvCODE   
0262   78                     LD   A,B   
0263   B1                     OR   C   
0264   28 25                  JR   Z,UMMOD2   ;?zero divisor
0266                UMMOD11:      
0266   C5                     PUSH   BC   
0267   D9                     EXX      
0268   C1                     POP   BC   
0269   E1                     POP   HL   
026A   D1                     POP   DE   
026B   7D                     LD   A,L   
026C   91                     SUB   C   
026D   7C                     LD   A,H   
026E   98                     SBC   A,B   
026F   30 20                  JR   NC,UMMOD1   ;?too big
0271                UMMOD12:      
0271   7C                     LD   A,H   
0272   65                     LD   H,L   
0273   6A                     LD   L,D   
0274   16 08                  LD   D,8   
0276   D5                     PUSH   DE   
0277   CD A5 02               CALL   UMMOD3   
027A   D1                     POP   DE   
027B   E5                     PUSH   HL   
027C   6B                     LD   L,E   
027D   CD A5 02               CALL   UMMOD3   
0280   57                     LD   D,A   
0281   5C                     LD   E,H   
0282   C1                     POP   BC   
0283   61                     LD   H,C   
0284   D5                     PUSH   DE   
0285   E5                     PUSH   HL   
0286   D9                     EXX      
0287   C1                     POP   BC   
0288                          ;*Macro unroll: 	mNEXT
0288   EB                     EX   DE,HL   
0289                          ;*Macro unroll:  mNEXTHL                         ; 34t
0289   FD E9                  JP   (IY)   ; 34t
028B                UMMOD2:      
028B   01 B9 0F               LD   BC,ERR_DIVZERO   ; divide by 0
028E   C3 04 0E               JP   THROWX   
0291                UMMOD1:      
0291   01 CA 0F               LD   BC,ERR_OUTOFRANGE   ; result out of range
0294   C3 04 0E               JP   THROWX   
0297                UMMOD4:      
0297   5F                     LD   E,A   
0298   7C                     LD   A,H   
0299   91                     SUB   C   
029A   67                     LD   H,A   
029B   7B                     LD   A,E   
029C   98                     SBC   A,B   
029D   30 10                  JR   NC,UMMOD5   
029F                UMMOD13:      
029F   7C                     LD   A,H   
02A0   81                     ADD   A,C   
02A1   67                     LD   H,A   
02A2   7B                     LD   A,E   
02A3   15                     DEC   D   
02A4   C8                     RET   Z   
02A5                UMMOD3:      
02A5   29                     ADD   HL,HL   
02A6   17                     RLA      
02A7   30 EE                  JR   NC,UMMOD4   
02A9                UMMOD14:      
02A9   5F                     LD   E,A   
02AA   7C                     LD   A,H   
02AB   91                     SUB   C   
02AC   67                     LD   H,A   
02AD   7B                     LD   A,E   
02AE   98                     SBC   A,B   
02AF                UMMOD5:      
02AF   2C                     INC   L   
02B0   15                     DEC   D   
02B1   20 F2                  JR   NZ,UMMOD3   
02B3                UMMOD15:      
02B3   C9                     RET      
02B4                             ;   FM/MOD	( d n1 -- n2 n3 )		\ CORE
02B4                             ;		Signed floored divide of double by single. Return mod n2
02B4                             ;		and quotient n3.
02B4                             ; TODO: this is usually called M/MOD in eForth
02B4                          ;*Macro unroll: mCOLON	6,'M/MOD',MSMOD
02B4                          ;*Macro unroll:  mCODE 6, "M/MOD", MSMOD
02B4                          ALIGN   2   
02B4                MSMOD:       
02B4                VVCODE:   .SET   $   
02B4                VVLEN:    .SET   (6 & 01FH) / CELLL   
1F3A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F3A                VVNAME:   .SET   $   
1F3A   B4 02 4A 1F            DW   vvCODE,vvLINK   
1F3E                VVLINK:   .SET   $   
1F3E   06 4D 2F 4D 4F 44      DB   6,"M/MOD"   
02B4                          .ORG   vvCODE   
02B4   00                     NOP      
02B5   CD E2 05               CALL   doLIST   
02B8   FA 0F 36 01 FA 0F DE 0F DW   DUPP,ZLESS,DUPP,TOR   
02C0   E6 0D CC 02            DW   QBRAN,MMOD1   
02C4   72 01 DE 0F 88 01 EC 0F DW   NEGAT,TOR,DNEGA,RFROM   
02CC                MMOD1:       
02CC   DE 0F FA 0F 36 01      DW   TOR,DUPP,ZLESS   
02D2   E6 0D DA 02            DW   QBRAN,MMOD2   
02D6   2E 0E 5C 01            DW   RAT,PLUS   
02DA                MMOD2:       
02DA   EC 0F 58 02 EC 0F      DW   RFROM,UMMOD,RFROM   
02E0   E6 0D EA 02            DW   QBRAN,MMOD3   
02E4   02 10 72 01 02 10      DW   SWAP,NEGAT,SWAP   
02EA                MMOD3:       
02EA   18 06                  DW   EXIT   
02EC                             ;   /MOD        ( n n -- r q )
02EC                             ;               Signed divide. Return mod and quotient.
02EC                          ;*Macro unroll: mCOLON	4,'/MOD',SLMOD
02EC                          ;*Macro unroll:  mCODE 4, "/MOD", SLMOD
02EC                          ALIGN   2   
02EC                SLMOD:       
02EC                VVCODE:   .SET   $   
02EC                VVLEN:    .SET   (4 & 01FH) / CELLL   
1F30                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F30                VVNAME:   .SET   $   
1F30   EC 02 3E 1F            DW   vvCODE,vvLINK   
1F34                VVLINK:   .SET   $   
1F34   04 2F 4D 4F 44         DB   4,"/MOD"   
02EC                          .ORG   vvCODE   
02EC   00                     NOP      
02ED   CD E2 05               CALL   doLIST   
02F0   0A 10 36 01 02 10 B4 02 18 06 DW   OVER,ZLESS,SWAP,MSMOD,EXIT   
02FA                             ;   MOD         ( n n -- r )
02FA                             ;               Signed divide. Return mod only.
02FA                          ;*Macro unroll: mCOLON	3,'MOD',MODD
02FA                          ;*Macro unroll:  mCODE 3, "MOD", MODD
02FA                          ALIGN   2   
02FA                MODD:        
02FA                VVCODE:   .SET   $   
02FA                VVLEN:    .SET   (3 & 01FH) / CELLL   
1F28                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F28                VVNAME:   .SET   $   
1F28   FA 02 34 1F            DW   vvCODE,vvLINK   
1F2C                VVLINK:   .SET   $   
1F2C   03 4D 4F 44            DB   3,"MOD"   
02FA                          .ORG   vvCODE   
02FA   00                     NOP      
02FB   CD E2 05               CALL   doLIST   
02FE   EC 02 FE 0F 18 06      DW   SLMOD,DROP,EXIT   
0304                             ; 
0304                             ;   /           ( n n -- q )
0304                             ;               Signed divide. Return quotient only.
0304                          ;*Macro unroll: mCOLON	1,'/',SLASH
0304                          ;*Macro unroll:  mCODE 1, "/", SLASH
0304                          ALIGN   2   
0304                SLASH:       
0304                VVCODE:   .SET   $   
0304                VVLEN:    .SET   (1 & 01FH) / CELLL   
1F22                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F22                VVNAME:   .SET   $   
1F22   04 03 2C 1F            DW   vvCODE,vvLINK   
1F26                VVLINK:   .SET   $   
1F26   01 2F                  DB   1,"/"   
0304                          .ORG   vvCODE   
0304   00                     NOP      
0305   CD E2 05               CALL   doLIST   
0308   EC 02 E8 01 18 06      DW   SLMOD,NIP,EXIT   
030E                             ; Multiply
030E                             ;   UM*         ( u u -- ud )
030E                             ;               Unsigned multiply. Return double product.
030E                          ;*Macro unroll: mCODE	3,'UM*',UMSTA
030E                          ALIGN   2   
030E                UMSTA:       
030E                VVCODE:   .SET   $   
030E                VVLEN:    .SET   (3 & 01FH) / CELLL   
1F1A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F1A                VVNAME:   .SET   $   
1F1A   0E 03 26 1F            DW   vvCODE,vvLINK   
1F1E                VVLINK:   .SET   $   
1F1E   03 55 4D 2A            DB   3,"UM*"   
030E                          .ORG   vvCODE   
030E   EB                     EX   DE,HL   
030F   E3                     EX   (SP),HL   
0310   EB                     EX   DE,HL   
0311   21 00 00               LD   HL,0   
0314   3E 10                  LD   A,010h   
0316                UMSTA1:      
0316   29                     ADD   HL,HL   
0317   EB                     EX   DE,HL   
0318   ED 6A                  ADC   HL,HL   
031A   EB                     EX   DE,HL   
031B   30 04                  JR   NC,UMSTA3   
031D                UMSTA2:      
031D   09                     ADD   HL,BC   
031E   30 01                  JR   NC,UMSTA3   
0320                UMSTA5:      
0320   13                     INC   DE   
0321                UMSTA3:      
0321   3D                     DEC   A   
0322   20 F2                  JR   NZ,UMSTA1   
0324                UMSTA4:      
0324   42                     LD   B,D   
0325   4B                     LD   C,E   
0326   E3                     EX   (SP),HL   
0327                          ;*Macro unroll: 	mNEXTHL
0327   FD E9                  JP   (IY)   
0329                             ;   *           ( n n -- n )
0329                             ;               Signed multiply. Return single product.
0329                          ;*Macro unroll: mCOLON	1,'*',STAR
0329                          ;*Macro unroll:  mCODE 1, "*", STAR
0329                          ALIGN   2   
032A                STAR:        
032A                VVCODE:   .SET   $   
032A                VVLEN:    .SET   (1 & 01FH) / CELLL   
1F14                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F14                VVNAME:   .SET   $   
1F14   2A 03 1E 1F            DW   vvCODE,vvLINK   
1F18                VVLINK:   .SET   $   
1F18   01 2A                  DB   1,"*"   
032A                          .ORG   vvCODE   
032A   00                     NOP      
032B   CD E2 05               CALL   doLIST   
032E   0E 03 FE 0F 18 06      DW   UMSTA,DROP,EXIT   
0334                             ;   M*          ( n n -- d )
0334                             ;               Signed multiply. Return double product.
0334                          ;*Macro unroll: mCOLON	2,'M*',MSTAR,
0334                          ;*Macro unroll:  mCODE 2, "M*", MSTAR
0334                          ALIGN   2   
0334                MSTAR:       
0334                VVCODE:   .SET   $   
0334                VVLEN:    .SET   (2 & 01FH) / CELLL   
1F0C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F0C                VVNAME:   .SET   $   
1F0C   34 03 18 1F            DW   vvCODE,vvLINK   
1F10                VVLINK:   .SET   $   
1F10   02 4D 2A               DB   2,"M*"   
0334                          .ORG   vvCODE   
0334   00                     NOP      
0335   CD E2 05               CALL   doLIST   
0338   38 10 52 01 36 01 DE 0F A8 01 02 10 A8 01 DW   DDUP,XORR,ZLESS,ToR,ABSS,SWAP,ABSS   
0346   0E 03 EC 0F E6 0D 50 03 DW   UMSTA,RFrom,QBRAN,MSTAR1   
034E   88 01                  DW   DNEGA   
0350                MSTAR1:      
0350   18 06                  DW   EXIT   
0352                             ;   */MOD       ( n1 n2 n3 -- r q )
0352                             ;               Multiply n1 and n2, then divide by n3. Return mod and quotient.
0352                          ;*Macro unroll: mCOLON	5,'*/MOD',SSMOD
0352                          ;*Macro unroll:  mCODE 5, "*/MOD", SSMOD
0352                          ALIGN   2   
0352                SSMOD:       
0352                VVCODE:   .SET   $   
0352                VVLEN:    .SET   (5 & 01FH) / CELLL   
1F02                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F02                VVNAME:   .SET   $   
1F02   52 03 10 1F            DW   vvCODE,vvLINK   
1F06                VVLINK:   .SET   $   
1F06   05 2A 2F 4D 4F 44      DB   5,"*/MOD"   
0352                          .ORG   vvCODE   
0352   00                     NOP      
0353   CD E2 05               CALL   doLIST   
0356   DE 0F 34 03 EC 0F B4 02 18 06 DW   ToR,MStar,RFrom,MSMOD,EXIT   
0360                             ;   */          ( n1 n2 n3 -- q )
0360                             ;               Multiply n1 by n2, then divide by n3. Return quotient only.
0360                          ;*Macro unroll: mCOLON	2,'*/',STASL
0360                          ;*Macro unroll:  mCODE 2, "*/", STASL
0360                          ALIGN   2   
0360                STASL:       
0360                VVCODE:   .SET   $   
0360                VVLEN:    .SET   (2 & 01FH) / CELLL   
1EFA                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1EFA                VVNAME:   .SET   $   
1EFA   60 03 06 1F            DW   vvCODE,vvLINK   
1EFE                VVLINK:   .SET   $   
1EFE   02 2A 2F               DB   2,"*/"   
0360                          .ORG   vvCODE   
0360   00                     NOP      
0361   CD E2 05               CALL   doLIST   
0364   52 03 E8 01 18 06      DW   SSMOD,NIP,EXIT   
036A                             ;   CELL+       ( a -- a )
036A                             ;               Add cell size in byte to address.
036A                          ;*Macro unroll: mCOLON	5,'CELL+',CELLP
036A                          ;*Macro unroll:  mCODE 5, "CELL+", CELLP
036A                          ALIGN   2   
036A                CELLP:       
036A                VVCODE:   .SET   $   
036A                VVLEN:    .SET   (5 & 01FH) / CELLL   
1EF0                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1EF0                VVNAME:   .SET   $   
1EF0   6A 03 FE 1E            DW   vvCODE,vvLINK   
1EF4                VVLINK:   .SET   $   
1EF4   05 43 45 4C 4C 2B      DB   5,"CELL+"   
036A                          .ORG   vvCODE   
036A   00                     NOP      
036B   CD E2 05               CALL   doLIST   
036E   F0 05 02 00 5C 01 18 06 DW   DOLIT,CELLL,PLUS,EXIT   
0376                             ;   CELL-       ( a -- a )
0376                             ;               Subtract cell size in byte from address.
0376                          ;*Macro unroll: mCOLON	5,'CELL-',CELLM
0376                          ;*Macro unroll:  mCODE 5, "CELL-", CELLM
0376                          ALIGN   2   
0376                CELLM:       
0376                VVCODE:   .SET   $   
0376                VVLEN:    .SET   (5 & 01FH) / CELLL   
1EE6                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1EE6                VVNAME:   .SET   $   
1EE6   76 03 F4 1E            DW   vvCODE,vvLINK   
1EEA                VVLINK:   .SET   $   
1EEA   05 43 45 4C 4C 2D      DB   5,"CELL-"   
0376                          .ORG   vvCODE   
0376   00                     NOP      
0377   CD E2 05               CALL   doLIST   
037A   F0 05 FE FF 5C 01 18 06 DW   DOLIT,-CELLL,PLUS,EXIT   
0382                             ;   CELLS       ( n -- n )
0382                             ;               Multiply tos by cell size in bytes.
0382                          ;*Macro unroll: mCOLON	5,'CELLS',CELLS
0382                          ;*Macro unroll:  mCODE 5, "CELLS", CELLS
0382                          ALIGN   2   
0382                CELLS:       
0382                VVCODE:   .SET   $   
0382                VVLEN:    .SET   (5 & 01FH) / CELLL   
1EDC                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1EDC                VVNAME:   .SET   $   
1EDC   82 03 EA 1E            DW   vvCODE,vvLINK   
1EE0                VVLINK:   .SET   $   
1EE0   05 43 45 4C 4C 53      DB   5,"CELLS"   
0382                          .ORG   vvCODE   
0382   00                     NOP      
0383   CD E2 05               CALL   doLIST   
0386   F0 05 02 00 2A 03 18 06 DW   DOLIT,CELLL,STAR,EXIT   
038E                             ;   '           ( -- ca )
038E                             ;               Search context vocabularies for the next word in input stream.
038E                          ;*Macro unroll: mCOLON  1,"'",TICK
038E                          ;*Macro unroll:  mCODE 1, "'", TICK
038E                          ALIGN   2   
038E                TICK:        
038E                VVCODE:   .SET   $   
038E                VVLEN:    .SET   (1 & 01FH) / CELLL   
1ED6                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1ED6                VVNAME:   .SET   $   
1ED6   8E 03 E0 1E            DW   vvCODE,vvLINK   
1EDA                VVLINK:   .SET   $   
1EDA   01 27                  DB   1,"'"   
038E                          .ORG   vvCODE   
038E   00                     NOP      
038F   CD E2 05               CALL   doLIST   
0392   62 09 44 0A            DW   TOKEN,NAMEQ   ;?defined
0396   E6 0D 9C 03            DW   QBRAN,TICK1   
039A   18 06                  DW   EXIT   ;yes, push code address
039C                TICK1:       
039C   A6 0A                  DW   THROW   ;no, error
039E                             ;   ALLOT       ( n -- )
039E                             ;               Allocate n bytes to the code dictionary.
039E                          ;*Macro unroll: mCOLON  5,'ALLOT',ALLOT
039E                          ;*Macro unroll:  mCODE 5, "ALLOT", ALLOT
039E                          ALIGN   2   
039E                ALLOT:       
039E                VVCODE:   .SET   $   
039E                VVLEN:    .SET   (5 & 01FH) / CELLL   
1ECC                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1ECC                VVNAME:   .SET   $   
1ECC   9E 03 DA 1E            DW   vvCODE,vvLINK   
1ED0                VVLINK:   .SET   $   
1ED0   05 41 4C 4C 4F 54      DB   5,"ALLOT"   
039E                          .ORG   vvCODE   
039E   00                     NOP      
039F   CD E2 05               CALL   doLIST   
03A2   1A 11 5A 0E 18 06      DW   CP,PSTOR,EXIT   ;adjust code pointer
03A8                             ;   ,           ( w -- )
03A8                             ;               Compile an integer into the code dictionary.
03A8                          ;*Macro unroll: mCOLON  1,',',COMMA
03A8                          ;*Macro unroll:  mCODE 1, ",", COMMA
03A8                          ALIGN   2   
03A8                COMMA:       
03A8                VVCODE:   .SET   $   
03A8                VVLEN:    .SET   (1 & 01FH) / CELLL   
1EC6                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1EC6                VVNAME:   .SET   $   
1EC6   A8 03 D0 1E            DW   vvCODE,vvLINK   
1ECA                VVLINK:   .SET   $   
1ECA   01 2C                  DB   1,","   
03A8                          .ORG   vvCODE   
03A8   00                     NOP      
03A9   CD E2 05               CALL   doLIST   
03AC   9E 0E FA 0F 6A 03      DW   HERE,DUPP,CELLP   ;cell boundary
03B2   1A 11 0C 0E 0C 0E 18 06 DW   CP,STORE,STORE,EXIT   ;adjust code pointer, compile
03BA                             ;   [COMPILE]   ( -- ; <string> )
03BA                             ;               Compile the next immediate word into code dictionary.
03BA                          ;*Macro unroll: mCOLON  IMEDD+9,'[COMPILE]',BCOMP
03BA                          ;*Macro unroll:  mCODE IMEDD+9, "[COMPILE]", BCOMP
03BA                          ALIGN   2   
03BA                BCOMP:       
03BA                VVCODE:   .SET   $   
03BA                VVLEN:    .SET   (IMEDD+9 & 01FH) / CELLL   
1E78                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1E78                VVNAME:   .SET   $   
1E78   BA 03 CA 1E            DW   vvCODE,vvLINK   
1E7C                VVLINK:   .SET   $   
1E7C   49 5B 43 4F 4D 50 49 4C 45 5D DB   IMEDD+9,"[COMPILE]"   
03BA                          .ORG   vvCODE   
03BA   00                     NOP      
03BB   CD E2 05               CALL   doLIST   
03BE   8E 03 A8 03 18 06      DW   TICK,COMMA,EXIT   
03C4                             ;   COMPILE     ( -- )
03C4                             ;               Compile the next address in colon list to code dictionary.
03C4                          ;*Macro unroll: mCOLON  COMPO+7,'COMPILE',COMPI
03C4                          ;*Macro unroll:  mCODE COMPO+7, "COMPILE", COMPI
03C4                          ALIGN   2   
03C4                COMPI:       
03C4                VVCODE:   .SET   $   
03C4                VVLEN:    .SET   (COMPO+7 & 01FH) / CELLL   
1E4C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1E4C                VVNAME:   .SET   $   
1E4C   C4 03 7C 1E            DW   vvCODE,vvLINK   
1E50                VVLINK:   .SET   $   
1E50   27 43 4F 4D 50 49 4C 45 DB   COMPO+7,"COMPILE"   
03C4                          .ORG   vvCODE   
03C4   00                     NOP      
03C5   CD E2 05               CALL   doLIST   
03C8   EC 0F FA 0F 16 0E A8 03 DW   RFROM,DUPP,AT,COMMA   ;compile address
03D0   6A 03 DE 0F 18 06      DW   CELLP,TOR,EXIT   ;adjust return address
03D6                             ;   LITERAL     ( w -- )
03D6                             ;               Compile tos to code dictionary as an integer literal.
03D6                          ;*Macro unroll: mCOLON  IMEDD+7,'LITERAL',LITER
03D6                          ;*Macro unroll:  mCODE IMEDD+7, "LITERAL", LITER
03D6                          ALIGN   2   
03D6                LITER:       
03D6                VVCODE:   .SET   $   
03D6                VVLEN:    .SET   (IMEDD+7 & 01FH) / CELLL   
1E00                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1E00                VVNAME:   .SET   $   
1E00   D6 03 50 1E            DW   vvCODE,vvLINK   
1E04                VVLINK:   .SET   $   
1E04   47 4C 49 54 45 52 41 4C DB   IMEDD+7,"LITERAL"   
03D6                          .ORG   vvCODE   
03D6   00                     NOP      
03D7   CD E2 05               CALL   doLIST   
03DA   C4 03 F0 05 A8 03 18 06 DW   COMPI,DOLIT,COMMA,EXIT   
03E2                             ;   $,"         ( -- )
03E2                             ;               Compile a literal string up to next " .
03E2                          ;*Macro unroll: hCOLON  3,'$,|',STRCQ
03E2                          ;*Macro unroll:  hCODE 3, "$,|", STRCQ
03E2                          ALIGN   2   
03E2                STRCQ:       
03E2   00                     NOP      
03E3   CD E2 05               CALL   doLIST   
03E6   F0 05 22 00 7E 09      DW   DOLIT,$22,WORDD   ;move string to code dictionary
03EC   8C 0E 5C 01 84 0F      DW   COUNT,PLUS,ALGND   ;calculate aligned end of string
03F2   1A 11 0C 0E 18 06      DW   CP,STORE,EXIT   ;adjust the code pointer
03F8                             ;   RECURSE     ( -- )
03F8                             ;               Make the current word available for compilation.
03F8                          ;*Macro unroll: mCOLON  IMEDD+7,'RECURSE',RECUR
03F8                          ;*Macro unroll:  mCODE IMEDD+7, "RECURSE", RECUR
03F8                          ALIGN   2   
03F8                RECUR:       
03F8                VVCODE:   .SET   $   
03F8                VVLEN:    .SET   (IMEDD+7 & 01FH) / CELLL   
1DB4                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1DB4                VVNAME:   .SET   $   
1DB4   F8 03 04 1E            DW   vvCODE,vvLINK   
1DB8                VVLINK:   .SET   $   
1DB8   47 52 45 43 55 52 53 45 DB   IMEDD+7,"RECURSE"   
03F8                          .ORG   vvCODE   
03F8   00                     NOP      
03F9   CD E2 05               CALL   doLIST   
03FC   2A 11 16 0E 8A 09 A8 03 18 06 DW   LAST,AT,NAMET,COMMA,EXIT   
0406                             ;   ?UNIQUE     ( a -- a )
0406                             ;               Display a warning message if the word already exists.
0406                          ;*Macro unroll: mCOLON  7,'?UNIQUE',UNIQU
0406                          ;*Macro unroll:  mCODE 7, "?UNIQUE", UNIQU
0406                          ALIGN   2   
0406                UNIQU:       
0406                VVCODE:   .SET   $   
0406                VVLEN:    .SET   (7 & 01FH) / CELLL   
1DA8                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1DA8                VVNAME:   .SET   $   
1DA8   06 04 B8 1D            DW   vvCODE,vvLINK   
1DAC                VVLINK:   .SET   $   
1DAC   07 3F 55 4E 49 51 55 45 DB   7,"?UNIQUE"   
0406                          .ORG   vvCODE   
0406   00                     NOP      
0407   CD E2 05               CALL   doLIST   
040A   FA 0F 44 0A            DW   DUPP,NAMEQ   ;?name exists
040E   E6 0D 22 04            DW   QBRAN,UNIQ1   ;redefinitions are OK
0412                          ;*Macro unroll:  mDSTR   DOTQP,' reDef '         ;but warn the user
0412   62 0C                  DW   DOTQP   ;but warn the user
0414                VVLEN:    .SET   $   
0414   00 20 72 65 44 65 66 20 DB   0," reDef "   
041C                VVCODE:   .SET   $   
0414                          .ORG   vvLEN   
0414   07                     DB   vvCODE - vvLEN - 1   
041C                          .ORG   vvCODE   
041C   0A 10 8C 0E 12 0C      DW   OVER,COUNT,TYPEE   ;just in case its not planned
0422                UNIQ1:       
0422   FE 0F 18 06            DW   DROP,EXIT   
0426                             ;   $,n         ( na -- )
0426                             ;               Build a new dictionary name using the string at na.
0426                          ;*Macro unroll: mCOLON  3,'$,n',SNAME
0426                          ;*Macro unroll:  mCODE 3, "$,n", SNAME
0426                          ALIGN   2   
0426                SNAME:       
0426                VVCODE:   .SET   $   
0426                VVLEN:    .SET   (3 & 01FH) / CELLL   
1DA0                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1DA0                VVNAME:   .SET   $   
1DA0   26 04 AC 1D            DW   vvCODE,vvLINK   
1DA4                VVLINK:   .SET   $   
1DA4   03 24 2C 6E            DB   3,"$,n"   
0426                          .ORG   vvCODE   
0426   00                     NOP      
0427   CD E2 05               CALL   doLIST   
042A   FA 0F 26 0E            DW   DUPP,CAT   ;?null input
042E   E6 0D 58 04            DW   QBRAN,PNAM1   
0432   06 04                  DW   UNIQU   ;?redefinition
0434   FA 0F 2A 11 0C 0E      DW   DUPP,LAST,STORE   ;save na for vocabulary link
043A   9E 0E 84 0F 02 10      DW   HERE,ALGND,SWAP   ;align code address
0440   76 03                  DW   CELLM   ;link address
0442   12 11 16 0E 16 0E 0A 10 0C 0E DW   CRRNT,AT,AT,OVER,STORE   
044C   76 03 FA 0F 22 11 0C 0E DW   CELLM,DUPP,NP,STORE   ;adjust name pointer
0454   0C 0E 18 06            DW   STORE,EXIT   ;save code pointer
0458                PNAM1:       
0458                          ;*Macro unroll:  mDSTR   STRQP,' name'           ;null input
0458   5A 0C                  DW   STRQP   ;null input
045A                VVLEN:    .SET   $   
045A   00 20 6E 61 6D 65      DB   0," name"   
0460                VVCODE:   .SET   $   
045A                          .ORG   vvLEN   
045A   05                     DB   vvCODE - vvLEN - 1   
0460                          .ORG   vvCODE   
0460   A6 0A                  DW   THROW   
0462                             ;   $COMPILE    ( a -- )
0462                             ;               Compile next word to code dictionary as a token or literal.
0462                          ;*Macro unroll: hCOLON  8,'$COMPILE',SCOMP
0462                          ;*Macro unroll:  hCODE 8, "$COMPILE", SCOMP
0462                          ALIGN   2   
0462                SCOMP:       
0462   00                     NOP      
0463   CD E2 05               CALL   doLIST   
0466   44 0A 12 10            DW   NAMEQ,QDUP   ;?defined
046A   E6 0D 82 04            DW   QBRAN,SCOM2   
046E   16 0E F0 05 40 00 3E 01 DW   AT,DOLIT,IMEDD,ANDD   ;?immediate
0476   E6 0D 7E 04            DW   QBRAN,SCOM1   
047A   E2 0D 18 06            DW   EXECU,EXIT   ;its immediate, execute
047E                SCOM1:       
047E   A8 03 18 06            DW   COMMA,EXIT   ;its not immediate, compile
0482                SCOM2:       
0482   F2 10 C2 0E            DW   TNUMB,ATEXE   ;try to convert to number
0486   E6 0D 8E 04            DW   QBRAN,SCOM3   
048A   D6 03 18 06            DW   LITER,EXIT   ;compile number as integer
048E   A6 0A        SCOM3:    DW   THROW   ;error
0490                             ;   OVERT       ( -- )
0490                             ;               Link a new word into the current vocabulary.
0490                          ;*Macro unroll: hCOLON  5,'OVERT',OVERT
0490                          ;*Macro unroll:  hCODE 5, "OVERT", OVERT
0490                          ALIGN   2   
0490                OVERT:       
0490   00                     NOP      
0491   CD E2 05               CALL   doLIST   
0494   2A 11 16 0E 12 11 16 0E 0C 0E 18 06 DW   LAST,AT,CRRNT,AT,STORE,EXIT   
04A0                             ;   ;           ( -- )
04A0                             ;               Terminate a colon definition.
04A0                          ;*Macro unroll: mCOLON  IMEDD+COMPO+1,';',SEMIS
04A0                          ;*Macro unroll:  mCODE IMEDD+COMPO+1, ";", SEMIS
04A0                          ALIGN   2   
04A0                SEMIS:       
04A0                VVCODE:   .SET   $   
04A0                VVLEN:    .SET   (IMEDD+COMPO+1 & 01FH) / CELLL   
1D3A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1D3A                VVNAME:   .SET   $   
1D3A   A0 04 A4 1D            DW   vvCODE,vvLINK   
1D3E                VVLINK:   .SET   $   
1D3E   61 3B                  DB   IMEDD+COMPO+1,";"   
04A0                          .ORG   vvCODE   
04A0   00                     NOP      
04A1   CD E2 05               CALL   doLIST   
04A4   C4 03 18 06 20 0B 90 04 18 06 DW   COMPI,EXIT,LBRAC,OVERT,EXIT   
04AE                             ;   ]           ( -- )
04AE                             ;               Start compiling the words in the input stream.
04AE                          ;*Macro unroll: mCOLON  1,']',RBRAC
04AE                          ;*Macro unroll:  mCODE 1, "]", RBRAC
04AE                          ALIGN   2   
04AE                RBRAC:       
04AE                VVCODE:   .SET   $   
04AE                VVLEN:    .SET   (1 & 01FH) / CELLL   
1D34                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1D34                VVNAME:   .SET   $   
1D34   AE 04 3E 1D            DW   vvCODE,vvLINK   
1D38                VVLINK:   .SET   $   
1D38   01 5D                  DB   1,"]"   
04AE                          .ORG   vvCODE   
04AE   00                     NOP      
04AF   CD E2 05               CALL   doLIST   
04B2   F0 05 62 04 EA 10 0C 0E 18 06 DW   DOLIT,SCOMP,TEVAL,STORE,EXIT   
04BC                             ;   call,       ( ca -- )
04BC                             ;               Assemble a call instruction to ca.
04BC                          ;*Macro unroll: hCOLON  5,'call,',CALLC
04BC                          ;*Macro unroll:  hCODE 5, "call,", CALLC
04BC                          ALIGN   2   
04BC                CALLC:       
04BC   00                     NOP      
04BD   CD E2 05               CALL   doLIST   
04C0   F0 05 00 CD A8 03      DW   DOLIT,CALLL,COMMA   ;Direct Threaded Code
04C6   A8 03 18 06            DW   COMMA,EXIT   ;DTC 8086 relative call
04CA                             ;   :           ( -- ; <string> )
04CA                             ;               Start a new colon definition using next word as its name.
04CA                          ;*Macro unroll: mCOLON  1,':',COLON
04CA                          ;*Macro unroll:  mCODE 1, ":", COLON
04CA                          ALIGN   2   
04CA                COLON:       
04CA                VVCODE:   .SET   $   
04CA                VVLEN:    .SET   (1 & 01FH) / CELLL   
1D2E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1D2E                VVNAME:   .SET   $   
1D2E   CA 04 38 1D            DW   vvCODE,vvLINK   
1D32                VVLINK:   .SET   $   
1D32   01 3A                  DB   1,":"   
04CA                          .ORG   vvCODE   
04CA   00                     NOP      
04CB   CD E2 05               CALL   doLIST   
04CE   62 09 26 04 F0 05 E2 05 DW   TOKEN,SNAME,DOLIT,DoLIST   
04D6   BC 04 AE 04 18 06      DW   CALLC,RBRAC,EXIT   
04DC                             ;   IMMEDIATE   ( -- )
04DC                             ;               Make the last compiled word an immediate word.
04DC                          ;*Macro unroll: mCOLON  9,'IMMEDIATE',IMMED
04DC                          ;*Macro unroll:  mCODE 9, "IMMEDIATE", IMMED
04DC                          ALIGN   2   
04DC                IMMED:       
04DC                VVCODE:   .SET   $   
04DC                VVLEN:    .SET   (9 & 01FH) / CELLL   
1D20                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1D20                VVNAME:   .SET   $   
1D20   DC 04 32 1D            DW   vvCODE,vvLINK   
1D24                VVLINK:   .SET   $   
1D24   09 49 4D 4D 45 44 49 41 54 45 DB   9,"IMMEDIATE"   
04DC                          .ORG   vvCODE   
04DC   00                     NOP      
04DD   CD E2 05               CALL   doLIST   
04E0   F0 05 40 00 2A 11 16 0E 16 0E 48 01 DW   DOLIT,IMEDD,LAST,AT,AT,ORR   
04EC   2A 11 16 0E 0C 0E 18 06 DW   LAST,AT,STORE,EXIT   
04F4                             ;   USER        ( u -- ; <string> )
04F4                             ;               Compile a new user variable.
04F4                          ;*Macro unroll: mCOLON  4,'USER',USER
04F4                          ;*Macro unroll:  mCODE 4, "USER", USER
04F4                          ALIGN   2   
04F4                USER:        
04F4                VVCODE:   .SET   $   
04F4                VVLEN:    .SET   (4 & 01FH) / CELLL   
1D16                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1D16                VVNAME:   .SET   $   
1D16   F4 04 24 1D            DW   vvCODE,vvLINK   
1D1A                VVLINK:   .SET   $   
1D1A   04 55 53 45 52         DB   4,"USER"   
04F4                          .ORG   vvCODE   
04F4   00                     NOP      
04F5   CD E2 05               CALL   doLIST   
04F8   62 09 26 04 90 04      DW   TOKEN,SNAME,OVERT   
04FE   F0 05 E2 05 BC 04      DW   DOLIT,DoLIST,CALLC   
0504   C4 03 08 06 A8 03 18 06 DW   COMPI,DOUSE,COMMA,EXIT   
050C                             ;   CREATE      ( -- ; <string> )
050C                             ;               Compile a new array entry without allocating code space.
050C                          ;*Macro unroll: mCOLON  6,'CREATE',CREAT
050C                          ;*Macro unroll:  mCODE 6, "CREATE", CREAT
050C                          ALIGN   2   
050C                CREAT:       
050C                VVCODE:   .SET   $   
050C                VVLEN:    .SET   (6 & 01FH) / CELLL   
1D0A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1D0A                VVNAME:   .SET   $   
1D0A   0C 05 1A 1D            DW   vvCODE,vvLINK   
1D0E                VVLINK:   .SET   $   
1D0E   06 43 52 45 41 54 45   DB   6,"CREATE"   
050C                          .ORG   vvCODE   
050C   00                     NOP      
050D   CD E2 05               CALL   doLIST   
0510   62 09 26 04 90 04      DW   TOKEN,SNAME,OVERT   
0516   F0 05 E2 05 BC 04      DW   DOLIT,DoLIST,CALLC   
051C   C4 03 F8 05 18 06      DW   COMPI,DOVAR,EXIT   
0522                             ;   VARIABLE    ( -- ; <string> )
0522                             ;               Compile a new variable initialized to 0.
0522                          ;*Macro unroll: mCOLON  8,'VARIABLE',VARIA
0522                          ;*Macro unroll:  mCODE 8, "VARIABLE", VARIA
0522                          ALIGN   2   
0522                VARIA:       
0522                VVCODE:   .SET   $   
0522                VVLEN:    .SET   (8 & 01FH) / CELLL   
1CFC                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1CFC                VVNAME:   .SET   $   
1CFC   22 05 0E 1D            DW   vvCODE,vvLINK   
1D00                VVLINK:   .SET   $   
1D00   08 56 41 52 49 41 42 4C 45 DB   8,"VARIABLE"   
0522                          .ORG   vvCODE   
0522   00                     NOP      
0523   CD E2 05               CALL   doLIST   
0526   0C 05 F0 05 00 00 A8 03 18 06 DW   CREAT,DOLIT,0,COMMA,EXIT   
0530                             ;   FOR         ( -- a )
0530                             ;               Start a FOR-NEXT loop structure in a colon definition.
0530                          ;*Macro unroll: mCOLON  IMEDD+3,'FOR',FOR
0530                          ;*Macro unroll:  mCODE IMEDD+3, "FOR", FOR
0530                          ALIGN   2   
0530                FOR:         
0530                VVCODE:   .SET   $   
0530                VVLEN:    .SET   (IMEDD+3 & 01FH) / CELLL   
1CB4                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1CB4                VVNAME:   .SET   $   
1CB4   30 05 00 1D            DW   vvCODE,vvLINK   
1CB8                VVLINK:   .SET   $   
1CB8   43 46 4F 52            DB   IMEDD+3,"FOR"   
0530                          .ORG   vvCODE   
0530   00                     NOP      
0531   CD E2 05               CALL   doLIST   
0534   C4 03 DE 0F 9E 0E 18 06 DW   COMPI,TOR,HERE,EXIT   
053C                             ;   BEGIN       ( -- a )
053C                             ;               Start an infinite or indefinite loop structure.
053C                          ;*Macro unroll: mCOLON  IMEDD+5,'BEGIN',BEGIN
053C                          ;*Macro unroll:  mCODE IMEDD+5, "BEGIN", BEGIN
053C                          ALIGN   2   
053C                BEGIN:       
053C                VVCODE:   .SET   $   
053C                VVLEN:    .SET   (IMEDD+5 & 01FH) / CELLL   
1C6A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1C6A                VVNAME:   .SET   $   
1C6A   3C 05 B8 1C            DW   vvCODE,vvLINK   
1C6E                VVLINK:   .SET   $   
1C6E   45 42 45 47 49 4E      DB   IMEDD+5,"BEGIN"   
053C                          .ORG   vvCODE   
053C   00                     NOP      
053D   CD E2 05               CALL   doLIST   
0540   9E 0E 18 06            DW   HERE,EXIT   
0544                             ;   NEXT        ( a -- )
0544                             ;               Terminate a FOR-NEXT loop structure.
0544                          ;*Macro unroll: mCOLON  IMEDD+4,'NEXT',NEXT
0544                          ;*Macro unroll:  mCODE IMEDD+4, "NEXT", NEXT
0544                          ALIGN   2   
0544                NEXT:        
0544                VVCODE:   .SET   $   
0544                VVLEN:    .SET   (IMEDD+4 & 01FH) / CELLL   
1C20                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1C20                VVNAME:   .SET   $   
1C20   44 05 6E 1C            DW   vvCODE,vvLINK   
1C24                VVLINK:   .SET   $   
1C24   44 4E 45 58 54         DB   IMEDD+4,"NEXT"   
0544                          .ORG   vvCODE   
0544   00                     NOP      
0545   CD E2 05               CALL   doLIST   
0548   C4 03 8E 06 A8 03 18 06 DW   COMPI,DONXT,COMMA,EXIT   
0550                             ;   UNTIL       ( a -- )
0550                             ;               Terminate a BEGIN-UNTIL indefinite loop structure.
0550                          ;*Macro unroll: mCOLON  IMEDD+5,'UNTIL',UNTIL
0550                          ;*Macro unroll:  mCODE IMEDD+5, "UNTIL", UNTIL
0550                          ALIGN   2   
0550                UNTIL:       
0550                VVCODE:   .SET   $   
0550                VVLEN:    .SET   (IMEDD+5 & 01FH) / CELLL   
1BD6                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1BD6                VVNAME:   .SET   $   
1BD6   50 05 24 1C            DW   vvCODE,vvLINK   
1BDA                VVLINK:   .SET   $   
1BDA   45 55 4E 54 49 4C      DB   IMEDD+5,"UNTIL"   
0550                          .ORG   vvCODE   
0550   00                     NOP      
0551   CD E2 05               CALL   doLIST   
0554   C4 03 E6 0D A8 03 18 06 DW   COMPI,QBRAN,COMMA,EXIT   
055C                             ;   AGAIN       ( a -- )
055C                             ;               Terminate a BEGIN-AGAIN infinite loop structure.
055C                          ;*Macro unroll: mCOLON  IMEDD+5,'AGAIN',AGAIN
055C                          ;*Macro unroll:  mCODE IMEDD+5, "AGAIN", AGAIN
055C                          ALIGN   2   
055C                AGAIN:       
055C                VVCODE:   .SET   $   
055C                VVLEN:    .SET   (IMEDD+5 & 01FH) / CELLL   
1B8C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1B8C                VVNAME:   .SET   $   
1B8C   5C 05 DA 1B            DW   vvCODE,vvLINK   
1B90                VVLINK:   .SET   $   
1B90   45 41 47 41 49 4E      DB   IMEDD+5,"AGAIN"   
055C                          .ORG   vvCODE   
055C   00                     NOP      
055D   CD E2 05               CALL   doLIST   
0560   C4 03 F2 0D A8 03 18 06 DW   COMPI,BRAN,COMMA,EXIT   
0568                             ;   IF          ( -- A )
0568                             ;               Begin a conditional branch structure.
0568                          ;*Macro unroll: mCOLON  IMEDD+2,'IF',IFF
0568                          ;*Macro unroll:  mCODE IMEDD+2, "IF", IFF
0568                          ALIGN   2   
0568                IFF:         
0568                VVCODE:   .SET   $   
0568                VVLEN:    .SET   (IMEDD+2 & 01FH) / CELLL   
1B44                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1B44                VVNAME:   .SET   $   
1B44   68 05 90 1B            DW   vvCODE,vvLINK   
1B48                VVLINK:   .SET   $   
1B48   42 49 46               DB   IMEDD+2,"IF"   
0568                          .ORG   vvCODE   
0568   00                     NOP      
0569   CD E2 05               CALL   doLIST   
056C   C4 03 E6 0D 9E 0E      DW   COMPI,QBRAN,HERE   
0572   F0 05 00 00 A8 03 18 06 DW   DOLIT,0,COMMA,EXIT   
057A                             ;   AHEAD       ( -- A )
057A                             ;               Compile a forward branch instruction.
057A                          ;*Macro unroll: mCOLON  IMEDD+5,'AHEAD',AHEAD
057A                          ;*Macro unroll:  mCODE IMEDD+5, "AHEAD", AHEAD
057A                          ALIGN   2   
057A                AHEAD:       
057A                VVCODE:   .SET   $   
057A                VVLEN:    .SET   (IMEDD+5 & 01FH) / CELLL   
1AFA                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1AFA                VVNAME:   .SET   $   
1AFA   7A 05 48 1B            DW   vvCODE,vvLINK   
1AFE                VVLINK:   .SET   $   
1AFE   45 41 48 45 41 44      DB   IMEDD+5,"AHEAD"   
057A                          .ORG   vvCODE   
057A   00                     NOP      
057B   CD E2 05               CALL   doLIST   
057E   C4 03 F2 0D 9E 0E F0 05 00 00 A8 03 18 06 DW   COMPI,BRAN,HERE,DOLIT,0,COMMA,EXIT   
058C                             ;   REPEAT      ( A a -- )
058C                             ;               Terminate a BEGIN-WHILE-REPEAT indefinite loop.
058C                          ;*Macro unroll: mCOLON  IMEDD+6,'REPEAT',REPEA
058C                          ;*Macro unroll:  mCODE IMEDD+6, "REPEAT", REPEA
058C                          ALIGN   2   
058C                REPEA:       
058C                VVCODE:   .SET   $   
058C                VVLEN:    .SET   (IMEDD+6 & 01FH) / CELLL   
1AAE                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1AAE                VVNAME:   .SET   $   
1AAE   8C 05 FE 1A            DW   vvCODE,vvLINK   
1AB2                VVLINK:   .SET   $   
1AB2   46 52 45 50 45 41 54   DB   IMEDD+6,"REPEAT"   
058C                          .ORG   vvCODE   
058C   00                     NOP      
058D   CD E2 05               CALL   doLIST   
0590   5C 05 9E 0E 02 10 0C 0E 18 06 DW   AGAIN,HERE,SWAP,STORE,EXIT   
059A                             ;   THEN        ( A -- )
059A                             ;               Terminate a conditional branch structure.
059A                          ;*Macro unroll: mCOLON  IMEDD+4,'THEN',THENN
059A                          ;*Macro unroll:  mCODE IMEDD+4, "THEN", THENN
059A                          ALIGN   2   
059A                THENN:       
059A                VVCODE:   .SET   $   
059A                VVLEN:    .SET   (IMEDD+4 & 01FH) / CELLL   
1A64                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1A64                VVNAME:   .SET   $   
1A64   9A 05 B2 1A            DW   vvCODE,vvLINK   
1A68                VVLINK:   .SET   $   
1A68   44 54 48 45 4E         DB   IMEDD+4,"THEN"   
059A                          .ORG   vvCODE   
059A   00                     NOP      
059B   CD E2 05               CALL   doLIST   
059E   9E 0E 02 10 0C 0E 18 06 DW   HERE,SWAP,STORE,EXIT   
05A6                             ;   AFT         ( a -- a A )
05A6                             ;               Jump to THEN in a FOR-AFT-THEN-NEXT loop the 1st time through.
05A6                          ;*Macro unroll: mCOLON  IMEDD+3,'AFT',AFT
05A6                          ;*Macro unroll:  mCODE IMEDD+3, "AFT", AFT
05A6                          ALIGN   2   
05A6                AFT:         
05A6                VVCODE:   .SET   $   
05A6                VVLEN:    .SET   (IMEDD+3 & 01FH) / CELLL   
1A1C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1A1C                VVNAME:   .SET   $   
1A1C   A6 05 68 1A            DW   vvCODE,vvLINK   
1A20                VVLINK:   .SET   $   
1A20   43 41 46 54            DB   IMEDD+3,"AFT"   
05A6                          .ORG   vvCODE   
05A6   00                     NOP      
05A7   CD E2 05               CALL   doLIST   
05AA   FE 0F 7A 05 3C 05 02 10 18 06 DW   DROP,AHEAD,BEGIN,SWAP,EXIT   
05B4                             ;   ELSE        ( A -- A )
05B4                             ;               Start the false clause in an IF-ELSE-THEN structure.
05B4                          ;*Macro unroll: mCOLON  IMEDD+4,'ELSE',ELSEE
05B4                          ;*Macro unroll:  mCODE IMEDD+4, "ELSE", ELSEE
05B4                          ALIGN   2   
05B4                ELSEE:       
05B4                VVCODE:   .SET   $   
05B4                VVLEN:    .SET   (IMEDD+4 & 01FH) / CELLL   
19D2                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
19D2                VVNAME:   .SET   $   
19D2   B4 05 20 1A            DW   vvCODE,vvLINK   
19D6                VVLINK:   .SET   $   
19D6   44 45 4C 53 45         DB   IMEDD+4,"ELSE"   
05B4                          .ORG   vvCODE   
05B4   00                     NOP      
05B5   CD E2 05               CALL   doLIST   
05B8   7A 05 02 10 9A 05 18 06 DW   AHEAD,SWAP,THENN,EXIT   
05C0                             ;   WHILE       ( a -- A a )
05C0                             ;               Conditional branch out of a BEGIN-WHILE-REPEAT loop.
05C0                          ;*Macro unroll: mCOLON  IMEDD+5,'WHILE',WHILE
05C0                          ;*Macro unroll:  mCODE IMEDD+5, "WHILE", WHILE
05C0                          ALIGN   2   
05C0                WHILE:       
05C0                VVCODE:   .SET   $   
05C0                VVLEN:    .SET   (IMEDD+5 & 01FH) / CELLL   
1988                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1988                VVNAME:   .SET   $   
1988   C0 05 D6 19            DW   vvCODE,vvLINK   
198C                VVLINK:   .SET   $   
198C   45 57 48 49 4C 45      DB   IMEDD+5,"WHILE"   
05C0                          .ORG   vvCODE   
05C0   00                     NOP      
05C1   CD E2 05               CALL   doLIST   
05C4   68 05 02 10 18 06      DW   IFF,SWAP,EXIT   
05CA                             ;   ABORT"      ( -- ; <string> )
05CA                             ;               Conditional abort with an error message.
05CA                             ;   $"          ( -- ; <string> )
05CA                             ;               Compile an inline string literal.
05CA                             ;   ."          ( -- ; <string> )
05CA                             ;               Compile an inline string literal to be typed out at run time.
05CA                             ;   UNLOOP	( -- ) ( R: loop-sys -- )	\ CORE
05CA                             ;		Discard loop-control parameters for the current nesting level.
05CA                             ;		An UNLOOP is required for each nesting level before the
05CA                             ;		definition may be EXITed.
05CA                          ;*Macro unroll: mCOLON	COMPO+6,'UNLOOP',UNLOOP
05CA                          ;*Macro unroll:  mCODE COMPO+6, "UNLOOP", UNLOOP
05CA                          ALIGN   2   
05CA                UNLOOP:      
05CA                VVCODE:   .SET   $   
05CA                VVLEN:    .SET   (COMPO+6 & 01FH) / CELLL   
195C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
195C                VVNAME:   .SET   $   
195C   CA 05 8C 19            DW   vvCODE,vvLINK   
1960                VVLINK:   .SET   $   
1960   26 55 4E 4C 4F 4F 50   DB   COMPO+6,"UNLOOP"   
05CA                          .ORG   vvCODE   
05CA   00                     NOP      
05CB   CD E2 05               CALL   doLIST   
05CE   EC 0F EC 0F EC 0F 2E 10 DE 0F 18 06 DW   RFrom,RFrom,RFrom,DDROP,ToR,EXIT   
05DA                             ;   doCONST	( -- x )
05DA                             ;	Run-time routine of CONSTANT and VARIABLE.
05DA                          ;*Macro unroll: hCODE	COMPO+7, 'doCONST', DoCONST
05DA                          ALIGN   2   
05DA                DOCONST:      
05DA   E1                     POP   HL   ;10t
05DB   C5                     PUSH   BC   ;11t
05DC   4E                     LD   C,(HL)   ; 7t
05DD   23                     INC   HL   ; 6t
05DE   46                     LD   B,(HL)   ; 7t
05DF                          ;*Macro unroll:  mNEXT
05DF   EB                     EX   DE,HL   
05E0                          ;*Macro unroll:  mNEXTHL                         ; 34t
05E0   FD E9                  JP   (IY)   ; 34t
05E2                             ;   doLIST	( -- ) ( R: -- nest-sys )
05E2                             ;	Process colon list.
05E2                          ;*Macro unroll: hCODE	COMPO+6, 'doLIST', DoLIST
05E2                          ALIGN   2   
05E2                DOLIST:      
05E2   DD 2B                  DEC   IX   ;10t
05E4   DD 72 00               LD   (IX+0),D   ;19t
05E7   DD 2B                  DEC   IX   ;10t
05E9   DD 73 00               LD   (IX+0),E   ;19t
05EC   E1                     POP   HL   ;10t
05ED                          ;*Macro unroll:  mNEXTHL							
05ED   FD E9                  JP   (IY)   
05EF                             ;   doLIT	( -- x )
05EF                             ;	Push an inline literal.
05EF                          ;*Macro unroll: hCODE	COMPO+5, 'doLIT', DoLIT
05EF                          ALIGN   2   
05F0                DOLIT:       
05F0   C5                     PUSH   BC   ; 11t
05F1   EB                     EX   DE,HL   ; 4t
05F2   4E                     LD   C,(HL)   ; 7t
05F3   23                     INC   HL   ; 6t
05F4   46                     LD   B,(HL)   ; 7t
05F5   23                     INC   HL   ; 6t
05F6                          ;*Macro unroll:  mNEXTHL
05F6   FD E9                  JP   (IY)   
05F8                             ;   doVAR       ( -- a )
05F8                             ;   Run time routine for VARIABLE and CREATE.
05F8                          ;*Macro unroll: hCOLON  COMPO+5, 'doVAR', DoVAR
05F8                          ;*Macro unroll:  hCODE COMPO+5, "doVAR", DoVAR
05F8                          ALIGN   2   
05F8                DOVAR:       
05F8   00                     NOP      
05F9   CD E2 05               CALL   doLIST   
05FC   EC 0F 18 06            DW   RFROM,EXIT   
0600                             ;   UP          ( -- a )
0600                             ;   Pointer to the user area.
0600                          ;*Macro unroll: hCOLON  2, 'UP', UP
0600                          ;*Macro unroll:  hCODE 2, "UP", UP
0600                          ALIGN   2   
0600                UP:          
0600   00                     NOP      
0601   CD E2 05               CALL   doLIST   
0604   F8 05                  DW   DoVAR   
0606   00 24                  DW   UPP   
0608                             ;   doUSER      ( -- a )
0608                             ;   Run time routine for user variables.
0608                          ;*Macro unroll: hCOLON  COMPO+6,'doUSER',DOUSE
0608                          ;*Macro unroll:  hCODE COMPO+6, "doUSER", DOUSE
0608                          ALIGN   2   
0608                DOUSE:       
0608   00                     NOP      
0609   CD E2 05               CALL   doLIST   
060C   EC 0F 16 0E 00 06 16 0E 5C 01 18 06 DW   RFROM,AT,UP,AT,PLUS,EXIT   
0618                             ;   EXIT	( -- ) ( R: nest-sys -- )	\ CORE
0618                             ;	Return control to the calling definition.
0618                          ;*Macro unroll: mCODE	COMPO+4, 'EXIT', EXIT
0618                          ALIGN   2   
0618                EXIT:        
0618                VVCODE:   .SET   $   
0618                VVLEN:    .SET   (COMPO+4 & 01FH) / CELLL   
1932                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1932                VVNAME:   .SET   $   
1932   18 06 60 19            DW   vvCODE,vvLINK   
1936                VVLINK:   .SET   $   
1936   24 45 58 49 54         DB   COMPO+4,"EXIT"   
0618                          .ORG   vvCODE   
0618   DD 6E 00               LD   L,(IX+0)   
061B   DD 23                  INC   IX   
061D   DD 66 00               LD   H,(IX+0)   
0620   DD 23                  INC   IX   
0622                          ;*Macro unroll:  mNEXTHL
0622   FD E9                  JP   (IY)   
0624                             ;   doDO	( n1|u1 n2|u2 -- ) ( R: -- n1 n2-n1-max_negative )
0624                             ;		Run-time funtion of DO.
0624                             ; 
0624                             ;   : doDO	>R max-negative + R> OVER - SWAP R> SWAP >R SWAP >R >R ;
0624                          ;*Macro unroll: hCOLON	COMPO+4,'doDO',DoDO
0624                          ;*Macro unroll:  hCODE COMPO+4, "doDO", DoDO
0624                          ALIGN   2   
0624                DODO:        
0624   00                     NOP      
0625   CD E2 05               CALL   doLIST   
0628   DE 0F F0 05 00 80 5C 01 EC 0F DW   ToR,DoLIT,MaxNegative,Plus,RFrom   
0632   0A 10 9E 01 02 10 EC 0F 02 10 DE 0F 02 10 DE 0F DE 0F 18 06 DW   OVER,SUBB,SWAP,RFrom,SWAP,ToR,SWAP,ToR,ToR,EXIT   
0646                             ;   doLOOP	( -- ) ( R: loop-sys1 -- | loop-sys2 )
0646                             ;		Run time routine for LOOP.
0646                          ;*Macro unroll: hCODE	COMPO+6,'doLOOP',DoLOOP
0646                          ALIGN   2   
0646                DOLOOP:      
0646   DD E5                  PUSH   IX   ; 15t
0648   E1                     POP   HL   ; 10t
0649   34                     INC   (HL)   ; 11t
064A   28 07                  JR   Z,DOLOOP2   ; 12/7t a fast dec is ok, only
064C                DOLOOP1:      
064C   1A                     LD   A,(DE)   ; 7t go back to the loop
064D   6F                     LD   L,A   ; 4t
064E   13                     INC   DE   ; 6t
064F   1A                     LD   A,(DE)   ; 7t
0650   67                     LD   H,A   ; 4t
0651                          ;*Macro unroll: 	mNEXTHL
0651   FD E9                  JP   (IY)   
0653                DOLOOP2:      
0653   23                     INC   HL   ; 6t
0654   34                     INC   (HL)   ;11t
0655   E2 4C 06               JP   PO,DOLOOP1   ;10/7t ?loop end
0658   EB                     EX   DE,HL   ; 4t yes,continue past the BRAN offset
0659   11 04 00               LD   DE,4   ;10t clear return stack
065C   DD 19                  ADD   IX,DE   ;15h
065E   23                     INC   HL   ; 6t
065F   23                     INC   HL   ; 6t
0660                          ;*Macro unroll: 	mNEXTHL
0660   FD E9                  JP   (IY)   
0662                             ;   do+LOOP	( n -- ) ( R: loop-sys1 -- | loop-sys2 )
0662                             ;		Run time routine for +LOOP.
0662                          ;*Macro unroll: hCODE	COMPO+7,'do+LOOP',DoPLOOP
0662                          ALIGN   2   
0662                DOPLOOP:      
0662   E1                     POP   HL   ;10t this will be the new TOS
0663   C5                     PUSH   BC   ;11t
0664   44                     LD   B,H   ; 4t
0665   4D                     LD   C,L   ; 4t
0666   D9                     EXX      ; 4t
0667   C1                     POP   BC   ;10t old TOS = loop increment
0668   DD 6E 00               LD   L,(IX+0)   ;19t
066B   DD 66 01               LD   H,(IX+1)   ;19t
066E   B7                     OR   A   ; 4t clear carry
066F   ED 4A                  ADC   HL,BC   ;15t
0671   EA 82 06               JP   PE,DOPLP1   ;10/7t ?loop end
0674   DD 75 00               LD   (IX+0),L   ;19t   no, go back
0677   DD 74 01               LD   (IX+1),H   ;19t
067A   D9                     EXX      ; 4t
067B   1A                     LD   A,(DE)   ; 7t go back to the loop
067C   6F                     LD   L,A   ; 4t
067D   13                     INC   DE   ; 6t
067E   1A                     LD   A,(DE)   ; 7t
067F   67                     LD   H,A   ; 4t
0680                          ;*Macro unroll: 	mNEXTHL
0680   FD E9                  JP   (IY)   
0682                DOPLP1:      
0682   01 04 00               LD   BC,4   ;10t clear return stack
0685   DD 09                  ADD   IX,BC   ;15h
0687   D9                     EXX      ; 4t
0688   13                     INC   DE   ; 6t yes,continue past the BRAN offset
0689   13                     INC   DE   ; 6t
068A                          ;*Macro unroll: 	mNEXT
068A   EB                     EX   DE,HL   
068B                          ;*Macro unroll:  mNEXTHL                         ; 34t
068B   FD E9                  JP   (IY)   ; 34t
068D                             ;   next        ( -- )
068D                             ;               Run time code for the single index loop.
068D                             ;               : next ( -- ) \ hilevel model
068D                             ;                 r> r> dup if 1 - >r @ >r exit then drop cell+ >r ;
068D                          ;*Macro unroll: mCODE   COMPO+4,'next',DONXT
068D                          ALIGN   2   
068E                DONXT:       
068E                VVCODE:   .SET   $   
068E                VVLEN:    .SET   (COMPO+4 & 01FH) / CELLL   
1908                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1908                VVNAME:   .SET   $   
1908   8E 06 36 19            DW   vvCODE,vvLINK   
190C                VVLINK:   .SET   $   
190C   24 6E 65 78 74         DB   COMPO+4,"next"   
068E                          .ORG   vvCODE   
068E   DD E5                  PUSH   IX   
0690   E1                     POP   HL   ; load rp into HL
0691   7E                     LD   A,(HL)   ; a = low byte of r@
0692   B7                     OR   A   
0693   20 10                  JR   NZ,DECLOW   ; low > 0 goto dec low
0695   23                     INC   HL   
0696   7E                     LD   A,(HL)   ; a = high byte of r@
0697   B7                     OR   A   
0698   20 09                  JR   NZ,DECHILO   ; high > 0 goto dec hi dec lo
069A   23                     INC   HL   
069B   E5                     PUSH   HL   
069C   DD E1                  POP   IX   ; pop r@
069E   13                     INC   DE   ; IP = skip following word
069F   13                     INC   DE   
06A0                          ;*Macro unroll:  mNEXT                               ; continue
06A0   EB                     EX   DE,HL   ; continue
06A1                          ;*Macro unroll:  mNEXTHL                         ; 34t
06A1   FD E9                  JP   (IY)   ; 34t
06A3                DECHILO:      
06A3   35                     DEC   (HL)   ; dec high byte of r@
06A4   2B                     DEC   HL   
06A5                DECLOW:      
06A5   35                     DEC   (HL)   ; dec low byte of r@
06A6   6B                     LD   L,E   ; DE points to location of loop address
06A7   62                     LD   H,D   
06A8   5E                     LD   E,(HL)   ; DE points to loop address
06A9   23                     INC   HL   
06AA   56                     LD   D,(HL)   
06AB                          ;*Macro unroll:  mNEXT                               ; continue to loop address
06AB   EB                     EX   DE,HL   ; continue to loop address
06AC                          ;*Macro unroll:  mNEXTHL                         ; 34t
06AC   FD E9                  JP   (IY)   ; 34t
06AE                             ;   DIGIT       ( u -- c )
06AE                             ;               Convert digit u to a character.
06AE                          ;*Macro unroll: hCOLON  5,'DIGIT',DIGIT
06AE                          ;*Macro unroll:  hCODE 5, "DIGIT", DIGIT
06AE                          ALIGN   2   
06AE                DIGIT:       
06AE   00                     NOP      
06AF   CD E2 05               CALL   doLIST   
06B2   F0 05 09 00 0A 10 F2 01 DW   DOLIT,9,OVER,LESS   
06BA   F0 05 07 00 3E 01 5C 01 DW   DOLIT,7,ANDD,PLUS   
06C2   F0 05 5C 01 18 06      DW   DOLIT,"0",PLUS,EXIT   
06C8                             ;   EXTRACT     ( n base -- n c )
06C8                             ;               Extract the least significant digit from n.
06C8                          ;*Macro unroll: hCOLON  7,'EXTRACT',EXTRC
06C8                          ;*Macro unroll:  hCODE 7, "EXTRACT", EXTRC
06C8                          ALIGN   2   
06C8                EXTRC:       
06C8   00                     NOP      
06C9   CD E2 05               CALL   doLIST   
06CC   F0 05 00 00 02 10 58 02 DW   DOLIT,0,SWAP,UMMOD   
06D4   02 10 AE 06 18 06      DW   SWAP,DIGIT,EXIT   
06DA                             ;   <#          ( -- )
06DA                             ;               Initiate the numeric output process.
06DA                          ;*Macro unroll: mCOLON  2,'<#',BDIGS
06DA                          ;*Macro unroll:  mCODE 2, "<#", BDIGS
06DA                          ALIGN   2   
06DA                BDIGS:       
06DA                VVCODE:   .SET   $   
06DA                VVLEN:    .SET   (2 & 01FH) / CELLL   
1900                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1900                VVNAME:   .SET   $   
1900   DA 06 0C 19            DW   vvCODE,vvLINK   
1904                VVLINK:   .SET   $   
1904   02 3C 23               DB   2,"<#"   
06DA                          .ORG   vvCODE   
06DA   00                     NOP      
06DB   CD E2 05               CALL   doLIST   
06DE   A8 0E FA 10 0C 0E 18 06 DW   PAD,HLD,STORE,EXIT   
06E6                             ;   HOLD        ( c -- )
06E6                             ;               Insert a character into the numeric output string.
06E6                          ;*Macro unroll: mCOLON  4,'HOLD',HOLD
06E6                          ;*Macro unroll:  mCODE 4, "HOLD", HOLD
06E6                          ALIGN   2   
06E6                HOLD:        
06E6                VVCODE:   .SET   $   
06E6                VVLEN:    .SET   (4 & 01FH) / CELLL   
18F6                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
18F6                VVNAME:   .SET   $   
18F6   E6 06 04 19            DW   vvCODE,vvLINK   
18FA                VVLINK:   .SET   $   
18FA   04 48 4F 4C 44         DB   4,"HOLD"   
06E6                          .ORG   vvCODE   
06E6   00                     NOP      
06E7   CD E2 05               CALL   doLIST   
06EA   FA 10 16 0E F0 05 01 00 9E 01 DW   HLD,AT,DOLIT,1,SUBB   
06F4   FA 0F FA 10 0C 0E 1E 0E 18 06 DW   DUPP,HLD,STORE,CSTOR,EXIT   
06FE                             ;   #           ( u -- u )
06FE                             ;               Extract one digit from u and append the digit to output string.
06FE                          ;*Macro unroll: mCOLON  1,'#',DIG
06FE                          ;*Macro unroll:  mCODE 1, "#", DIG
06FE                          ALIGN   2   
06FE                DIG:         
06FE                VVCODE:   .SET   $   
06FE                VVLEN:    .SET   (1 & 01FH) / CELLL   
18F0                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
18F0                VVNAME:   .SET   $   
18F0   FE 06 FA 18            DW   vvCODE,vvLINK   
18F4                VVLINK:   .SET   $   
18F4   01 23                  DB   1,"#"   
06FE                          .ORG   vvCODE   
06FE   00                     NOP      
06FF   CD E2 05               CALL   doLIST   
0702   BA 10 16 0E C8 06 E6 06 18 06 DW   BASE,AT,EXTRC,HOLD,EXIT   
070C                             ;   #S          ( u -- 0 )
070C                             ;               Convert u until all digits are added to the output string.
070C                          ;*Macro unroll: mCOLON  2,'#S',DIGS
070C                          ;*Macro unroll:  mCODE 2, "#S", DIGS
070C                          ALIGN   2   
070C                DIGS:        
070C                VVCODE:   .SET   $   
070C                VVLEN:    .SET   (2 & 01FH) / CELLL   
18E8                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
18E8                VVNAME:   .SET   $   
18E8   0C 07 F4 18            DW   vvCODE,vvLINK   
18EC                VVLINK:   .SET   $   
18EC   02 23 53               DB   2,"#S"   
070C                          .ORG   vvCODE   
070C   00                     NOP      
070D   CD E2 05               CALL   doLIST   
0710                DIGS1:       
0710   FE 06 FA 0F            DW   DIG,DUPP   
0714   E6 0D 1C 07            DW   QBRAN,DIGS2   
0718   F2 0D 10 07            DW   BRAN,DIGS1   
071C                DIGS2:       
071C   18 06                  DW   EXIT   
071E                             ;   SIGN        ( n -- )
071E                             ;               Add a minus sign to the numeric output string.
071E                          ;*Macro unroll: mCOLON	4,'SIGN',SIGN
071E                          ;*Macro unroll:  mCODE 4, "SIGN", SIGN
071E                          ALIGN   2   
071E                SIGN:        
071E                VVCODE:   .SET   $   
071E                VVLEN:    .SET   (4 & 01FH) / CELLL   
18DE                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
18DE                VVNAME:   .SET   $   
18DE   1E 07 EC 18            DW   vvCODE,vvLINK   
18E2                VVLINK:   .SET   $   
18E2   04 53 49 47 4E         DB   4,"SIGN"   
071E                          .ORG   vvCODE   
071E   00                     NOP      
071F   CD E2 05               CALL   doLIST   
0722   36 01 E6 0D 2E 07      DW   ZLESS,QBRAN,SIGN1   
0728   F0 05 2D 00 E6 06      DW   DoLIT,MINUSS,HOLD   
072E                SIGN1:       
072E   18 06                  DW   EXIT   
0730                             ;   #>          ( w -- b u )
0730                             ;               Prepare the output string to be TYPE'd.
0730                          ;*Macro unroll: mCOLON  2,'#>',EDIGS
0730                          ;*Macro unroll:  mCODE 2, "#>", EDIGS
0730                          ALIGN   2   
0730                EDIGS:       
0730                VVCODE:   .SET   $   
0730                VVLEN:    .SET   (2 & 01FH) / CELLL   
18D6                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
18D6                VVNAME:   .SET   $   
18D6   30 07 E2 18            DW   vvCODE,vvLINK   
18DA                VVLINK:   .SET   $   
18DA   02 23 3E               DB   2,"#>"   
0730                          .ORG   vvCODE   
0730   00                     NOP      
0731   CD E2 05               CALL   doLIST   
0734   FE 0F FA 10 16 0E      DW   DROP,HLD,AT   
073A   A8 0E 0A 10 9E 01 18 06 DW   PAD,OVER,SUBB,EXIT   
0742                             ;   str         ( n -- b u )
0742                             ;               Convert a signed integer to a numeric string.
0742                          ;*Macro unroll: hCOLON  3,'str',STR
0742                          ;*Macro unroll:  hCODE 3, "str", STR
0742                          ALIGN   2   
0742                STR:         
0742   00                     NOP      
0743   CD E2 05               CALL   doLIST   
0746   FA 0F DE 0F A8 01      DW   DUPP,TOR,ABSS   
074C   DA 06 0C 07 EC 0F      DW   BDIGS,DIGS,RFROM   
0752   1E 07 30 07 18 06      DW   SIGN,EDIGS,EXIT   
0758                             ;   HEX         ( -- )
0758                             ;               Use radix 16 as base for numeric conversions.
0758                          ;*Macro unroll: mCOLON  3,'HEX',HEX
0758                          ;*Macro unroll:  mCODE 3, "HEX", HEX
0758                          ALIGN   2   
0758                HEX:         
0758                VVCODE:   .SET   $   
0758                VVLEN:    .SET   (3 & 01FH) / CELLL   
18CE                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
18CE                VVNAME:   .SET   $   
18CE   58 07 DA 18            DW   vvCODE,vvLINK   
18D2                VVLINK:   .SET   $   
18D2   03 48 45 58            DB   3,"HEX"   
0758                          .ORG   vvCODE   
0758   00                     NOP      
0759   CD E2 05               CALL   doLIST   
075C   F0 05 10 00 BA 10 0C 0E 18 06 DW   DOLIT,16,BASE,STORE,EXIT   
0766                             ;   DECIMAL     ( -- )
0766                             ;               Use radix 10 as base for numeric conversions.
0766                          ;*Macro unroll: mCOLON  7,'DECIMAL',DECIMAL
0766                          ;*Macro unroll:  mCODE 7, "DECIMAL", DECIMAL
0766                          ALIGN   2   
0766                DECIMAL:      
0766                VVCODE:   .SET   $   
0766                VVLEN:    .SET   (7 & 01FH) / CELLL   
18C2                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
18C2                VVNAME:   .SET   $   
18C2   66 07 D2 18            DW   vvCODE,vvLINK   
18C6                VVLINK:   .SET   $   
18C6   07 44 45 43 49 4D 41 4C DB   7,"DECIMAL"   
0766                          .ORG   vvCODE   
0766   00                     NOP      
0767   CD E2 05               CALL   doLIST   
076A   F0 05 10 00 BA 10 0C 0E 18 06 DW   DOLIT,16,BASE,STORE,EXIT   
0774                             ;   BL          ( -- 32 )
0774                             ;               Return 32, the blank character.
0774                          ;*Macro unroll: mCOLON	2,'BL',BLANK
0774                          ;*Macro unroll:  mCODE 2, "BL", BLANK
0774                          ALIGN   2   
0774                BLANK:       
0774                VVCODE:   .SET   $   
0774                VVLEN:    .SET   (2 & 01FH) / CELLL   
18BA                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
18BA                VVNAME:   .SET   $   
18BA   74 07 C6 18            DW   vvCODE,vvLINK   
18BE                VVLINK:   .SET   $   
18BE   02 42 4C               DB   2,"BL"   
0774                          .ORG   vvCODE   
0774   00                     NOP      
0775   CD E2 05               CALL   doLIST   
0778   F0 05 20 00 18 06      DW   DoLIT,SPACEE,EXIT   
077E                             ;   >CHAR       ( c -- c )
077E                             ;               Filter non-printing characters.
077E                          ;*Macro unroll: hCOLON  5,'>CHAR',TCHAR
077E                          ;*Macro unroll:  hCODE 5, ">CHAR", TCHAR
077E                          ALIGN   2   
077E                TCHAR:       
077E   00                     NOP      
077F   CD E2 05               CALL   doLIST   
0782   F0 05 7F 00 3E 01 FA 0F DW   DoLIT,$7F,ANDD,DUPP   ;mask msb
078A   F0 05 7F 00            DW   DoLIT,127   
078E   F0 05 20 00 3A 02      DW   DoLIT,SPACEE,WITHI   ;check for printable
0794   E6 0D 9E 07            DW   QBRAN,TCHA1   
0798   FE 0F F0 05 5F 00      DW   DROP,DoLIT,UNDERSC   ;replace non-printables
079E                TCHA1:       
079E   18 06                  DW   EXIT   
07A0                             ;   DIGIT?      ( c base -- u t )
07A0                             ;               Convert a character to its numeric value. A flag indicates success.
07A0                          ;*Macro unroll: hCOLON  6,'DIGIT?',DIGTQ
07A0                          ;*Macro unroll:  hCODE 6, "DIGIT?", DIGTQ
07A0                          ALIGN   2   
07A0                DIGTQ:       
07A0   00                     NOP      
07A1   CD E2 05               CALL   doLIST   
07A4   DE 0F F0 05 9E 01      DW   TOR,DOLIT,"0",SUBB   
07AA   F0 05 09 00 0A 10 F2 01 DW   DOLIT,9,OVER,LESS   
07B2   E6 0D C6 07            DW   QBRAN,DGTQ1   
07B6   F0 05 07 00 9E 01      DW   DOLIT,7,SUBB   
07BC   FA 0F F0 05 0A 00 F2 01 48 01 DW   DUPP,DOLIT,10,LESS,ORR   
07C6                DGTQ1:       
07C6   FA 0F EC 0F CE 01 18 06 DW   DUPP,RFROM,ULESS,EXIT   
07CE                             ;   NUMBER?     ( a -- n T | a F )
07CE                             ;               Convert a number string to integer. Push a flag on tos.
07CE                          ;*Macro unroll: hCOLON  7,'NUMBER?',NUMBQ
07CE                          ;*Macro unroll:  hCODE 7, "NUMBER?", NUMBQ
07CE                          ALIGN   2   
07CE                NUMBQ:       
07CE   00                     NOP      
07CF   CD E2 05               CALL   doLIST   
07D2   BA 10 16 0E DE 0F F0 05 00 00 0A 10 8C 0E DW   BASE,AT,TOR,DOLIT,0,OVER,COUNT   
07E0   0A 10 26 0E F0 05 B8 01 DW   OVER,CAT,DOLIT,"$",EQUAL   
07E8   E6 0D FE 07            DW   QBRAN,NUMQ1   
07EC   58 07 02 10 F0 05 01 00 5C 01 DW   HEX,SWAP,DOLIT,1,PLUS   
07F6   02 10 F0 05 01 00 9E 01 DW   SWAP,DOLIT,1,SUBB   
07FE                NUMQ1:       
07FE   0A 10 26 0E F0 05 B8 01 DE 0F DW   OVER,CAT,DOLIT,"-",EQUAL,TOR   
0808   02 10 2E 0E 9E 01 02 10 2E 0E 5C 01 12 10 DW   SWAP,RAT,SUBB,SWAP,RAT,PLUS,QDUP   
0816   E6 0D 68 08            DW   QBRAN,NUMQ6   
081A   F0 05 01 00 9E 01 DE 0F DW   DOLIT,1,SUBB,TOR   
0822                NUMQ2:       
0822   FA 0F DE 0F 26 0E BA 10 16 0E A0 07 DW   DUPP,TOR,CAT,BASE,AT,DIGTQ   
082E   E6 0D 5A 08            DW   QBRAN,NUMQ4   
0832   02 10 BA 10 16 0E 2A 03 5C 01 EC 0F DW   SWAP,BASE,AT,STAR,PLUS,RFROM   
083E   F0 05 01 00 5C 01      DW   DOLIT,1,PLUS   
0844   8E 06 22 08            DW   DONXT,NUMQ2   
0848   2E 0E 02 10 FE 0F      DW   RAT,SWAP,DROP   
084E   E6 0D 54 08            DW   QBRAN,NUMQ3   
0852   72 01                  DW   NEGAT   
0854                NUMQ3:       
0854   02 10                  DW   SWAP   
0856   F2 0D 66 08            DW   BRAN,NUMQ5   
085A                NUMQ4:       
085A   EC 0F EC 0F 2E 10 2E 10 F0 05 00 00 DW   RFROM,RFROM,DDROP,DDROP,DOLIT,0   
0866                NUMQ5:       
0866   FA 0F                  DW   DUPP   
0868                NUMQ6:       
0868   EC 0F 2E 10            DW   RFROM,DDROP   
086C   EC 0F BA 10 0C 0E 18 06 DW   RFROM,BASE,STORE,EXIT   
0874                             ;   parse       ( b u c -- b u delta ; <string> )
0874                             ;               Scan string delimited by c. Return found string and its offset.
0874                          ;*Macro unroll: hCOLON  5,'parse',PARS
0874                          ;*Macro unroll:  hCODE 5, "parse", PARS
0874                          ALIGN   2   
0874                PARS:        
0874   00                     NOP      
0875   CD E2 05               CALL   doLIST   
0878   C2 10 0C 0E 0A 10 DE 0F FA 0F DW   TEMP,STORE,OVER,TOR,DUPP   
0882   E6 0D 10 09            DW   QBRAN,PARS8   
0886   F0 05 01 00 9E 01 C2 10 16 0E 74 07 B8 01 DW   DOLIT,1,SUBB,TEMP,AT,BLANK,EQUAL   
0894   E6 0D C2 08            DW   QBRAN,PARS3   
0898   DE 0F                  DW   TOR   
089A                PARS1:       
089A   74 07 0A 10 26 0E      DW   BLANK,OVER,CAT   ;skip leading blanks ONLY
08A0   9E 01 36 01 66 01      DW   SUBB,ZLESS,INVER   
08A6   E6 0D C0 08            DW   QBRAN,PARS2   
08AA   F0 05 01 00 5C 01      DW   DOLIT,1,PLUS   
08B0   8E 06 9A 08            DW   DONXT,PARS1   
08B4   EC 0F FE 0F F0 05 00 00 FA 0F 18 06 DW   RFROM,DROP,DOLIT,0,DUPP,EXIT   
08C0                PARS2:       
08C0   EC 0F                  DW   RFROM   
08C2                PARS3:       
08C2   0A 10 02 10            DW   OVER,SWAP   
08C6   DE 0F                  DW   TOR   
08C8                PARS4:       
08C8   C2 10 16 0E 0A 10 26 0E 9E 01 DW   TEMP,AT,OVER,CAT,SUBB   ;scan for delimiter
08D2   C2 10 16 0E 74 07 B8 01 DW   TEMP,AT,BLANK,EQUAL   
08DA   E6 0D E0 08            DW   QBRAN,PARS5   
08DE   36 01                  DW   ZLESS   
08E0                PARS5:       
08E0   E6 0D F6 08            DW   QBRAN,PARS6   
08E4   F0 05 01 00 5C 01      DW   DOLIT,1,PLUS   
08EA   8E 06 C8 08            DW   DONXT,PARS4   
08EE   FA 0F DE 0F            DW   DUPP,TOR   
08F2   F2 0D 04 09            DW   BRAN,PARS7   
08F6                PARS6:       
08F6   EC 0F FE 0F FA 0F      DW   RFROM,DROP,DUPP   
08FC   F0 05 01 00 5C 01 DE 0F DW   DOLIT,1,PLUS,TOR   
0904                PARS7:       
0904   0A 10 9E 01            DW   OVER,SUBB   
0908   EC 0F EC 0F 9E 01 18 06 DW   RFROM,RFROM,SUBB,EXIT   
0910                PARS8:       
0910   0A 10 EC 0F 9E 01 18 06 DW   OVER,RFROM,SUBB,EXIT   
0918                             ;   PARSE       ( c -- b u ; <string> )
0918                             ;               Scan input stream and return counted string delimited by c.
0918                          ;*Macro unroll: mCOLON  5,'PARSE',PARSE
0918                          ;*Macro unroll:  mCODE 5, "PARSE", PARSE
0918                          ALIGN   2   
0918                PARSE:       
0918                VVCODE:   .SET   $   
0918                VVLEN:    .SET   (5 & 01FH) / CELLL   
18B0                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
18B0                VVNAME:   .SET   $   
18B0   18 09 BE 18            DW   vvCODE,vvLINK   
18B4                VVLINK:   .SET   $   
18B4   05 50 41 52 53 45      DB   5,"PARSE"   
0918                          .ORG   vvCODE   
0918   00                     NOP      
0919   CD E2 05               CALL   doLIST   
091C   DE 0F B6 0E D2 10 16 0E 5C 01 DW   TOR,TIB,INN,AT,PLUS   ;current input buffer pointer
0926   DA 10 16 0E D2 10 16 0E 9E 01 DW   NTIB,AT,INN,AT,SUBB   ;remaining count
0930   EC 0F 74 08 D2 10 5A 0E 18 06 DW   RFROM,PARS,INN,PSTOR,EXIT   
093A                             ;   (           ( -- )
093A                             ;               Ignore following string up to next ) . A comment.
093A                          ;*Macro unroll: mCOLON  IMEDD+1,'(',PAREN
093A                          ;*Macro unroll:  mCODE IMEDD+1, "(", PAREN
093A                          ALIGN   2   
093A                PAREN:       
093A                VVCODE:   .SET   $   
093A                VVLEN:    .SET   (IMEDD+1 & 01FH) / CELLL   
186A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
186A                VVNAME:   .SET   $   
186A   3A 09 B4 18            DW   vvCODE,vvLINK   
186E                VVLINK:   .SET   $   
186E   41 28                  DB   IMEDD+1,"("   
093A                          .ORG   vvCODE   
093A   00                     NOP      
093B   CD E2 05               CALL   doLIST   
093E   F0 05 18 09 2E 10 18 06 DW   DOLIT,")",PARSE,DDROP,EXIT   
0946                             ;   \           ( -- )
0946                             ;               Ignore following text till the end of line.
0946                          ;*Macro unroll: mCOLON  IMEDD+1,'||',BKSLA
0946                          ;*Macro unroll:  mCODE IMEDD+1, "||", BKSLA
0946                          ALIGN   2   
0946                BKSLA:       
0946                VVCODE:   .SET   $   
0946                VVLEN:    .SET   (IMEDD+1 & 01FH) / CELLL   
1824                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1824                VVNAME:   .SET   $   
1824   46 09 6E 18            DW   vvCODE,vvLINK   
1828                VVLINK:   .SET   $   
1828   41 7C 7C               DB   IMEDD+1,"||"   
0946                          .ORG   vvCODE   
0946   00                     NOP      
0947   CD E2 05               CALL   doLIST   
094A   DA 10 16 0E D2 10 0C 0E 18 06 DW   NTIB,AT,INN,STORE,EXIT   
0954                             ;   CHAR        ( -- c )
0954                             ;               Parse next word and return its first character.
0954                          ;*Macro unroll: mCOLON  4,'CHAR',CHAR
0954                          ;*Macro unroll:  mCODE 4, "CHAR", CHAR
0954                          ALIGN   2   
0954                CHAR:        
0954                VVCODE:   .SET   $   
0954                VVLEN:    .SET   (4 & 01FH) / CELLL   
181A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
181A                VVNAME:   .SET   $   
181A   54 09 28 18            DW   vvCODE,vvLINK   
181E                VVLINK:   .SET   $   
181E   04 43 48 41 52         DB   4,"CHAR"   
0954                          .ORG   vvCODE   
0954   00                     NOP      
0955   CD E2 05               CALL   doLIST   
0958   74 07 18 09 FE 0F 26 0E 18 06 DW   BLANK,PARSE,DROP,CAT,EXIT   
0962                             ;   TOKEN       ( -- a ; <string> )
0962                             ;               Parse a word from input stream and copy it to name dictionary.
0962                          ;*Macro unroll: hCOLON  5,'TOKEN',TOKEN
0962                          ;*Macro unroll:  hCODE 5, "TOKEN", TOKEN
0962                          ALIGN   2   
0962                TOKEN:       
0962   00                     NOP      
0963   CD E2 05               CALL   doLIST   
0966   74 07 18 09 F0 05 1F 00 28 02 DW   BLANK,PARSE,DOLIT,31,MIN   
0970   22 11 16 0E 0A 10 9E 01 76 03 DW   NP,AT,OVER,SUBB,CELLM   
097A   4A 0F 18 06            DW   PACKS,EXIT   
097E                             ;   WORD        ( c -- a ; <string> )
097E                             ;               Parse a word from input stream and copy it to code dictionary.
097E                          ;*Macro unroll: mCOLON  4,'WORD',WORDD
097E                          ;*Macro unroll:  mCODE 4, "WORD", WORDD
097E                          ALIGN   2   
097E                WORDD:       
097E                VVCODE:   .SET   $   
097E                VVLEN:    .SET   (4 & 01FH) / CELLL   
1810                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1810                VVNAME:   .SET   $   
1810   7E 09 1E 18            DW   vvCODE,vvLINK   
1814                VVLINK:   .SET   $   
1814   04 57 4F 52 44         DB   4,"WORD"   
097E                          .ORG   vvCODE   
097E   00                     NOP      
097F   CD E2 05               CALL   doLIST   
0982   18 09 9E 0E 4A 0F 18 06 DW   PARSE,HERE,PACKS,EXIT   
098A                             ;   NAME>       ( na -- ca )
098A                             ;               Return a code address given a name address.
098A                          ;*Macro unroll: hCOLON  5,'NAME>',NAMET
098A                          ;*Macro unroll:  hCODE 5, "NAME>", NAMET
098A                          ALIGN   2   
098A                NAMET:       
098A   00                     NOP      
098B   CD E2 05               CALL   doLIST   
098E   76 03 76 03 16 0E 18 06 DW   CELLM,CELLM,AT,EXIT   
0996                             ;   SAME?       ( a a u -- a a f \ -0+ )
0996                             ;               Compare u cells in two strings. Return 0 if identical.
0996                          ;*Macro unroll: hCOLON  5,'SAME?',SAMEQ
0996                          ;*Macro unroll:  hCODE 5, "SAME?", SAMEQ
0996                          ALIGN   2   
0996                SAMEQ:       
0996   00                     NOP      
0997   CD E2 05               CALL   doLIST   
099A   DE 0F                  DW   TOR   
099C   F2 0D C2 09            DW   BRAN,SAME2   
09A0   0A 10 2E 0E 82 03 5C 01 16 0E SAME1:   DW   OVER,RAT,CELLS,PLUS,AT   
09AA   0A 10 2E 0E 82 03 5C 01 16 0E DW   OVER,RAT,CELLS,PLUS,AT   
09B4   9E 01 12 10            DW   SUBB,QDUP   
09B8   E6 0D C2 09            DW   QBRAN,SAME2   
09BC   EC 0F FE 0F 18 06      DW   RFROM,DROP,EXIT   ;strings not equal
09C2   8E 06 A0 09  SAME2:    DW   DONXT,SAME1   
09C6   F0 05 00 00 18 06      DW   DOLIT,0,EXIT   ;strings equal
09CC                             ;   find        ( a va -- ca na | a F )
09CC                             ;               Search a vocabulary for a string. Return ca and na if succeeded.
09CC                          ;*Macro unroll: mCOLON  4,'find',FIND
09CC                          ;*Macro unroll:  mCODE 4, "find", FIND
09CC                          ALIGN   2   
09CC                FIND:        
09CC                VVCODE:   .SET   $   
09CC                VVLEN:    .SET   (4 & 01FH) / CELLL   
1806                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1806                VVNAME:   .SET   $   
1806   CC 09 14 18            DW   vvCODE,vvLINK   
180A                VVLINK:   .SET   $   
180A   04 66 69 6E 64         DB   4,"find"   
09CC                          .ORG   vvCODE   
09CC   00                     NOP      
09CD   CD E2 05               CALL   doLIST   
09D0   02 10 FA 0F 26 0E      DW   SWAP,DUPP,CAT   
09D6   F0 05 02 00 04 03 C2 10 0C 0E DW   DOLIT,CELLL,SLASH,TEMP,STORE   
09E0   FA 0F 16 0E DE 0F 6A 03 02 10 DW   DUPP,AT,TOR,CELLP,SWAP   
09EA   16 0E FA 0F  FIND1:    DW   AT,DUPP   
09EE   E6 0D 1A 0A            DW   QBRAN,FIND6   
09F2   FA 0F 16 0E F0 05 1F 00 3E 01 2E 0E 52 01 DW   DUPP,AT,DOLIT,MASKK,ANDD,RAT,XORR   
0A00   E6 0D 0E 0A            DW   QBRAN,FIND2   
0A04   6A 03 F0 05 FF FF      DW   CELLP,DOLIT,-1   ;true flag
0A0A   F2 0D 16 0A            DW   BRAN,FIND3   
0A0E   6A 03 C2 10 16 0E 96 09 FIND2:   DW   CELLP,TEMP,AT,SAMEQ   
0A16   F2 0D 26 0A  FIND3:    DW   BRAN,FIND4   
0A1A   EC 0F FE 0F  FIND6:    DW   RFROM,DROP   
0A1E   02 10 76 03 02 10 18 06 DW   SWAP,CELLM,SWAP,EXIT   
0A26   E6 0D 32 0A  FIND4:    DW   QBRAN,FIND5   
0A2A   76 03 76 03            DW   CELLM,CELLM   
0A2E   F2 0D EA 09            DW   BRAN,FIND1   
0A32   EC 0F FE 0F 02 10 FE 0F FIND5:   DW   RFROM,DROP,SWAP,DROP   
0A3A   76 03                  DW   CELLM   
0A3C   FA 0F 8A 09 02 10 18 06 DW   DUPP,NAMET,SWAP,EXIT   
0A44                             ;   NAME?       ( a -- ca na | a F )
0A44                             ;               Search all context vocabularies for a string.
0A44                          ;*Macro unroll: hCOLON  5,'NAME?',NAMEQ
0A44                          ;*Macro unroll:  hCODE 5, "NAME?", NAMEQ
0A44                          ALIGN   2   
0A44                NAMEQ:       
0A44   00                     NOP      
0A45   CD E2 05               CALL   doLIST   
0A48   0A 11 FA 0F 7C 0E 52 01 DW   CNTXT,DUPP,DAT,XORR   ;?context=also
0A50   E6 0D 56 0A            DW   QBRAN,NAMQ1   
0A54   76 03                  DW   CELLM   ;no, start with context
0A56   DE 0F        NAMQ1:    DW   TOR   
0A58   EC 0F 6A 03 FA 0F DE 0F NAMQ2:   DW   RFROM,CELLP,DUPP,TOR   ;next in search order
0A60   16 0E 12 10            DW   AT,QDUP   
0A64   E6 0D 76 0A            DW   QBRAN,NAMQ3   
0A68   CC 09 12 10            DW   FIND,QDUP   ;search vocabulary
0A6C   E6 0D 58 0A            DW   QBRAN,NAMQ2   
0A70   EC 0F FE 0F 18 06      DW   RFROM,DROP,EXIT   ;found name
0A76   EC 0F FE 0F  NAMQ3:    DW   RFROM,DROP   ;name not found
0A7A   F0 05 00 00 18 06      DW   DOLIT,0,EXIT   ;false flag
0A80                             ;   CATCH       ( ca -- 0 | err# )
0A80                             ;               Execute word at ca and set up an error frame for it.
0A80                          ;*Macro unroll: mCOLON  5,'CATCH',CATCH
0A80                          ;*Macro unroll:  mCODE 5, "CATCH", CATCH
0A80                          ALIGN   2   
0A80                CATCH:       
0A80                VVCODE:   .SET   $   
0A80                VVLEN:    .SET   (5 & 01FH) / CELLL   
17FC                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
17FC                VVNAME:   .SET   $   
17FC   80 0A 0A 18            DW   vvCODE,vvLINK   
1800                VVLINK:   .SET   $   
1800   05 43 41 54 43 48      DB   5,"CATCH"   
0A80                          .ORG   vvCODE   
0A80   00                     NOP      
0A81   CD E2 05               CALL   doLIST   
0A84   48 0E DE 0F 02 11 16 0E DE 0F DW   SPAT,TOR,HANDL,AT,TOR   ;save error frame
0A8E   38 0E 02 11 0C 0E E2 0D DW   RPAT,HANDL,STORE,EXECU   ;execute
0A96   EC 0F 02 11 0C 0E      DW   RFROM,HANDL,STORE   ;restore error frame
0A9C   EC 0F FE 0F F0 05 00 00 18 06 DW   RFROM,DROP,DOLIT,0,EXIT   ;no error
0AA6                             ;   THROW       ( err# -- err# )
0AA6                             ;               Reset system to current local error frame an update error flag.
0AA6                          ;*Macro unroll: mCOLON  5,'THROW',THROW
0AA6                          ;*Macro unroll:  mCODE 5, "THROW", THROW
0AA6                          ALIGN   2   
0AA6                THROW:       
0AA6                VVCODE:   .SET   $   
0AA6                VVLEN:    .SET   (5 & 01FH) / CELLL   
17F2                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
17F2                VVNAME:   .SET   $   
17F2   A6 0A 00 18            DW   vvCODE,vvLINK   
17F6                VVLINK:   .SET   $   
17F6   05 54 48 52 4F 57      DB   5,"THROW"   
0AA6                          .ORG   vvCODE   
0AA6   00                     NOP      
0AA7   CD E2 05               CALL   doLIST   
0AAA   02 11 16 0E 40 0E      DW   HANDL,AT,RPSTO   ;restore return stack
0AB0   EC 0F 02 11 0C 0E      DW   RFROM,HANDL,STORE   ;restore handler frame
0AB6   EC 0F 02 10 DE 0F 52 0E DW   RFROM,SWAP,TOR,SPSTO   ;restore data stack
0ABE   FE 0F EC 0F 18 06      DW   DROP,RFROM,EXIT   
0AC4                             ;   NULL$       ( -- a )
0AC4                             ;               Return address of a null string with zero count.
0AC4                          ;*Macro unroll: hCOLON  5,'NULL$',NULLS
0AC4                          ;*Macro unroll:  hCODE 5, "NULL$", NULLS
0AC4                          ALIGN   2   
0AC4                NULLS:       
0AC4   00                     NOP      
0AC5   CD E2 05               CALL   doLIST   
0AC8   F8 05                  DW   DOVAR   ;emulate CREATE
0ACA   00 00                  DW   0   
0ACC   63 6F 79 6F 74 65      DB   99,111,121,111,116,101   
0AD2                          ALIGN   2   
0AD2                             ;   ABORT       ( -- )
0AD2                             ;               Reset data stack and jump to QUIT.
0AD2                          ;*Macro unroll: mCOLON  5,'ABORT',ABORT
0AD2                          ;*Macro unroll:  mCODE 5, "ABORT", ABORT
0AD2                          ALIGN   2   
0AD2                ABORT:       
0AD2                VVCODE:   .SET   $   
0AD2                VVLEN:    .SET   (5 & 01FH) / CELLL   
17E8                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
17E8                VVNAME:   .SET   $   
17E8   D2 0A F6 17            DW   vvCODE,vvLINK   
17EC                VVLINK:   .SET   $   
17EC   05 41 42 4F 52 54      DB   5,"ABORT"   
0AD2                          .ORG   vvCODE   
0AD2   00                     NOP      
0AD3   CD E2 05               CALL   doLIST   
0AD6   C4 0A A6 0A            DW   NULLS,THROW   
0ADA                             ;   abort"      ( f -- )
0ADA                             ;               Run time routine of ABORT" . Abort with a message.
0ADA                          ;*Macro unroll: mCOLON  COMPO+6,'abort|',ABORQ
0ADA                          ;*Macro unroll:  mCODE COMPO+6, "abort|", ABORQ
0ADA                          ALIGN   2   
0ADA                ABORQ:       
0ADA                VVCODE:   .SET   $   
0ADA                VVLEN:    .SET   (COMPO+6 & 01FH) / CELLL   
17BC                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
17BC                VVNAME:   .SET   $   
17BC   DA 0A EC 17            DW   vvCODE,vvLINK   
17C0                VVLINK:   .SET   $   
17C0   26 61 62 6F 72 74 7C   DB   COMPO+6,"abort|"   
0ADA                          .ORG   vvCODE   
0ADA   00                     NOP      
0ADB   CD E2 05               CALL   doLIST   
0ADE   E6 0D E6 0A            DW   QBRAN,ABOR1   ;text flag
0AE2   42 0C A6 0A            DW   DOSTR,THROW   ;pass error string
0AE6                ABOR1:       
0AE6   42 0C FE 0F 18 06      DW   DOSTR,DROP,EXIT   ;drop error
0AEC                             ;   $INTERPRET  ( a -- )
0AEC                             ;               Interpret a word. If failed, try to convert it to an integer.
0AEC                          ;*Macro unroll: hCOLON  10,'$INTERPRET',INTER
0AEC                          ;*Macro unroll:  hCODE 10, "$INTERPRET", INTER
0AEC                          ALIGN   2   
0AEC                INTER:       
0AEC   00                     NOP      
0AED   CD E2 05               CALL   doLIST   
0AF0   44 0A 12 10            DW   NAMEQ,QDUP   ;?defined
0AF4   E6 0D 14 0B            DW   QBRAN,INTE1   
0AF8   16 0E F0 05 20 00 3E 01 DW   AT,DOLIT,COMPO,ANDD   ;?compile only lexicon bits
0B00                          ;*Macro unroll:  mDSTR   ABORQ,' compile only'
0B00   DA 0A                  DW   ABORQ   
0B02                VVLEN:    .SET   $   
0B02   00 20 63 6F 6D 70 69 6C 65 20 6F 6E 6C 79 DB   0," compile only"   
0B10                VVCODE:   .SET   $   
0B02                          .ORG   vvLEN   
0B02   0D                     DB   vvCODE - vvLEN - 1   
0B10                          .ORG   vvCODE   
0B10   E2 0D 18 06            DW   EXECU,EXIT   ;execute defined word
0B14                INTE1:       
0B14   F2 10 C2 0E            DW   TNUMB,ATEXE   ;convert a number
0B18   E6 0D 1E 0B            DW   QBRAN,INTE2   
0B1C   18 06                  DW   EXIT   
0B1E                INTE2:       
0B1E   A6 0A                  DW   THROW   ;error
0B20                             ;   [           ( -- )
0B20                             ;               Start the text interpreter.
0B20                          ;*Macro unroll: mCOLON  IMEDD+1,'[',LBRAC
0B20                          ;*Macro unroll:  mCODE IMEDD+1, "[", LBRAC
0B20                          ALIGN   2   
0B20                LBRAC:       
0B20                VVCODE:   .SET   $   
0B20                VVLEN:    .SET   (IMEDD+1 & 01FH) / CELLL   
1776                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1776                VVNAME:   .SET   $   
1776   20 0B C0 17            DW   vvCODE,vvLINK   
177A                VVLINK:   .SET   $   
177A   41 5B                  DB   IMEDD+1,"["   
0B20                          .ORG   vvCODE   
0B20   00                     NOP      
0B21   CD E2 05               CALL   doLIST   
0B24   F0 05 EC 0A EA 10 0C 0E 18 06 DW   DOLIT,INTER,TEVAL,STORE,EXIT   
0B2E                             ;   .OK         ( -- )
0B2E                             ;               Display "ok" only while interpreting.
0B2E                          ;*Macro unroll: mCOLON  3,'.OK',DOTOK
0B2E                          ;*Macro unroll:  mCODE 3, ".OK", DOTOK
0B2E                          ALIGN   2   
0B2E                DOTOK:       
0B2E                VVCODE:   .SET   $   
0B2E                VVLEN:    .SET   (3 & 01FH) / CELLL   
176E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
176E                VVNAME:   .SET   $   
176E   2E 0B 7A 17            DW   vvCODE,vvLINK   
1772                VVLINK:   .SET   $   
1772   03 2E 4F 4B            DB   3,".OK"   
0B2E                          .ORG   vvCODE   
0B2E   00                     NOP      
0B2F   CD E2 05               CALL   doLIST   
0B32   F0 05 EC 0A EA 10 16 0E B8 01 DW   DOLIT,INTER,TEVAL,AT,EQUAL   
0B3C   E6 0D 46 0B            DW   QBRAN,DOTO1   
0B40                          ;*Macro unroll:  mDSTR      DOTQP,' ok'
0B40   62 0C                  DW   DOTQP   
0B42                VVLEN:    .SET   $   
0B42   00 20 6F 6B            DB   0," ok"   
0B46                VVCODE:   .SET   $   
0B42                          .ORG   vvLEN   
0B42   03                     DB   vvCODE - vvLEN - 1   
0B46                          .ORG   vvCODE   
0B46   30 0C 18 06  DOTO1:    DW   CR,EXIT   
0B4A                             ;   ?STACK      ( -- )
0B4A                             ;               Abort if the data stack underflows.
0B4A                          ;*Macro unroll: hCOLON  6,'?STACK',QSTAC
0B4A                          ;*Macro unroll:  hCODE 6, "?STACK", QSTAC
0B4A                          ALIGN   2   
0B4A                QSTAC:       
0B4A   00                     NOP      
0B4B   CD E2 05               CALL   doLIST   
0B4E   64 10 36 01            DW   DEPTH,ZLESS   ;check only for underflow
0B52                          ;*Macro unroll:  mDSTR      ABORQ,' underflow'
0B52   DA 0A                  DW   ABORQ   
0B54                VVLEN:    .SET   $   
0B54   00 20 75 6E 64 65 72 66 6C 6F 77 DB   0," underflow"   
0B5F                VVCODE:   .SET   $   
0B54                          .ORG   vvLEN   
0B54   0A                     DB   vvCODE - vvLEN - 1   
0B5F                          .ORG   vvCODE   
0B5F   18 06                  DW   EXIT   
0B61                             ;   EVAL        ( -- )
0B61                             ;               Interpret the input stream.
0B61                          ;*Macro unroll: mCOLON  4,'EVAL',EVAL
0B61                          ;*Macro unroll:  mCODE 4, "EVAL", EVAL
0B61                          ALIGN   2   
0B62                EVAL:        
0B62                VVCODE:   .SET   $   
0B62                VVLEN:    .SET   (4 & 01FH) / CELLL   
1764                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1764                VVNAME:   .SET   $   
1764   62 0B 72 17            DW   vvCODE,vvLINK   
1768                VVLINK:   .SET   $   
1768   04 45 56 41 4C         DB   4,"EVAL"   
0B62                          .ORG   vvCODE   
0B62   00                     NOP      
0B63   CD E2 05               CALL   doLIST   
0B66                EVAL1:       
0B66   62 09 FA 0F 26 0E      DW   TOKEN,DUPP,CAT   ;?input stream empty
0B6C   E6 0D 7A 0B            DW   QBRAN,EVAL2   
0B70   EA 10 C2 0E 4A 0B      DW   TEVAL,ATEXE,QSTAC   ;evaluate input, check stack
0B76   F2 0D 66 0B            DW   BRAN,EVAL1   
0B7A                EVAL2:       
0B7A   FE 0F B2 10 C2 0E 18 06 DW   DROP,TPROM,ATEXE,EXIT   ;prompt
0B82                             ;   PC!         ( uc p --  )
0B82                             ;               output uc to IO port p
0B82                             ;   PC@         ( p -- uc )
0B82                             ;               output uc to IO port p
0B82                             ;   !IO         ( -- )
0B82                             ;               Initialize the serial I/O devices.
0B82                          ;*Macro unroll: mCODE   3,'!IO', STOIO ;
0B82                          ALIGN   2   ; 
0B82                STOIO:       
0B82                VVCODE:   .SET   $   
0B82                VVLEN:    .SET   (3 & 01FH) / CELLL   
175C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
175C                VVNAME:   .SET   $   
175C   82 0B 68 17            DW   vvCODE,vvLINK   
1760                VVLINK:   .SET   $   
1760   03 21 49 4F            DB   3,"!IO"   
0B82                          .ORG   vvCODE   
0B82   CD A1 00               CALL   INIT_IO   
0B85                          ;*Macro unroll:  mNEXT
0B85   EB                     EX   DE,HL   
0B86                          ;*Macro unroll:  mNEXTHL                         ; 34t
0B86   FD E9                  JP   (IY)   ; 34t
0B88                             ;   ?RX         ( -- c T | F )
0B88                             ;               Return input character and true, or a false if no input.
0B88                          ;*Macro unroll: mCODE	3, '?RX', QRX
0B88                          ALIGN   2   
0B88                QRX:         
0B88                VVCODE:   .SET   $   
0B88                VVLEN:    .SET   (3 & 01FH) / CELLL   
1754                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1754                VVNAME:   .SET   $   
1754   88 0B 60 17            DW   vvCODE,vvLINK   
1758                VVLINK:   .SET   $   
1758   03 3F 52 58            DB   3,"?RX"   
0B88                          .ORG   vvCODE   
0B88   C5                     PUSH   BC   
0B89   CD EB 00               CALL   CKINCHAR   
0B8C   20 05                  JR   nz,QRX1   
0B8E   01 00 00               LD   BC,FALSEE   
0B91   18 0A                  JR   QRX2   
0B93                QRX1:        
0B93   CD B5 00               CALL   RXA   
0B96   4F                     LD   C,A   
0B97   06 00                  LD   B,0   
0B99   C5                     PUSH   BC   
0B9A   01 FF FF               LD   BC,TRUEE   
0B9D                QRX2:        
0B9D                          ;*Macro unroll:  mNEXT
0B9D   EB                     EX   DE,HL   
0B9E                          ;*Macro unroll:  mNEXTHL                         ; 34t
0B9E   FD E9                  JP   (IY)   ; 34t
0BA0                             ;   TX!         ( c -- )
0BA0                             ;               Send character c to the output device.
0BA0                          ;*Macro unroll: mCODE	3,'TX!',TXSTO
0BA0                          ALIGN   2   
0BA0                TXSTO:       
0BA0                VVCODE:   .SET   $   
0BA0                VVLEN:    .SET   (3 & 01FH) / CELLL   
174C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
174C                VVNAME:   .SET   $   
174C   A0 0B 58 17            DW   vvCODE,vvLINK   
1750                VVLINK:   .SET   $   
1750   03 54 58 21            DB   3,"TX!"   
0BA0                          .ORG   vvCODE   
0BA0   79                     LD   A,C   
0BA1   CD E0 00               CALL   TXA   
0BA4   C1                     POP   BC   
0BA5                          ;*Macro unroll:  mNEXT
0BA5   EB                     EX   DE,HL   
0BA6                          ;*Macro unroll:  mNEXTHL                         ; 34t
0BA6   FD E9                  JP   (IY)   ; 34t
0BA8                             ;   ?KEY        ( -- c T | F )
0BA8                             ;               Return input character and true, or a false if no input.
0BA8                          ;*Macro unroll: mCOLON  4,'?KEY',QKEY
0BA8                          ;*Macro unroll:  mCODE 4, "?KEY", QKEY
0BA8                          ALIGN   2   
0BA8                QKEY:        
0BA8                VVCODE:   .SET   $   
0BA8                VVLEN:    .SET   (4 & 01FH) / CELLL   
1742                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1742                VVNAME:   .SET   $   
1742   A8 0B 50 17            DW   vvCODE,vvLINK   
1746                VVLINK:   .SET   $   
1746   04 3F 4B 45 59         DB   4,"?KEY"   
0BA8                          .ORG   vvCODE   
0BA8   00                     NOP      
0BA9   CD E2 05               CALL   doLIST   
0BAC   8A 10 16 0E E2 0D 18 06 DW   TQKEY,AT,EXECU,EXIT   
0BB4                             ;   KEY         ( -- c )
0BB4                             ;               Wait for and return an input character.
0BB4                          ;*Macro unroll: mCOLON  3,'KEY',KEY
0BB4                          ;*Macro unroll:  mCODE 3, "KEY", KEY
0BB4                          ALIGN   2   
0BB4                KEY:         
0BB4                VVCODE:   .SET   $   
0BB4                VVLEN:    .SET   (3 & 01FH) / CELLL   
173A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
173A                VVNAME:   .SET   $   
173A   B4 0B 46 17            DW   vvCODE,vvLINK   
173E                VVLINK:   .SET   $   
173E   03 4B 45 59            DB   3,"KEY"   
0BB4                          .ORG   vvCODE   
0BB4   00                     NOP      
0BB5   CD E2 05               CALL   doLIST   
0BB8                KEY1:        
0BB8   A8 0B                  DW   QKEY   
0BBA   E6 0D B8 0B            DW   QBRAN,KEY1   
0BBE   18 06                  DW   EXIT   
0BC0                             ;   EMIT        ( c -- )
0BC0                             ;               Send a character to the output device.
0BC0                          ;*Macro unroll: mCOLON  4, 'EMIT', EMIT
0BC0                          ;*Macro unroll:  mCODE 4, "EMIT", EMIT
0BC0                          ALIGN   2   
0BC0                EMIT:        
0BC0                VVCODE:   .SET   $   
0BC0                VVLEN:    .SET   (4 & 01FH) / CELLL   
1730                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1730                VVNAME:   .SET   $   
1730   C0 0B 3E 17            DW   vvCODE,vvLINK   
1734                VVLINK:   .SET   $   
1734   04 45 4D 49 54         DB   4,"EMIT"   
0BC0                          .ORG   vvCODE   
0BC0   00                     NOP      
0BC1   CD E2 05               CALL   doLIST   
0BC4   92 10 16 0E E2 0D 18 06 DW   TEMIT,AT,EXECU,EXIT   
0BCC                             ;   NUF?        ( -- t )
0BCC                             ;               Return false if no input, else pause and if CR return true.
0BCC                          ;*Macro unroll: mCOLON  4,'NUF?',NUFQ
0BCC                          ;*Macro unroll:  mCODE 4, "NUF?", NUFQ
0BCC                          ALIGN   2   
0BCC                NUFQ:        
0BCC                VVCODE:   .SET   $   
0BCC                VVLEN:    .SET   (4 & 01FH) / CELLL   
1726                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1726                VVNAME:   .SET   $   
1726   CC 0B 34 17            DW   vvCODE,vvLINK   
172A                VVLINK:   .SET   $   
172A   04 4E 55 46 3F         DB   4,"NUF?"   
0BCC                          .ORG   vvCODE   
0BCC   00                     NOP      
0BCD   CD E2 05               CALL   doLIST   
0BD0   A8 0B FA 0F            DW   QKEY,DUPP   
0BD4   E6 0D E2 0B            DW   QBRAN,NUFQ1   
0BD8   2E 10 B4 0B F0 05 0D 00 B8 01 DW   DDROP,KEY,DoLIT,CRR,EQUAL   
0BE2                NUFQ1:       
0BE2   18 06                  DW   EXIT   
0BE4                             ;   PACE        ( -- )
0BE4                             ;               Send a pace character for the file downloading process.
0BE4                          ;*Macro unroll: hCOLON  4,'PACE',PACE
0BE4                          ;*Macro unroll:  hCODE 4, "PACE", PACE
0BE4                          ALIGN   2   
0BE4                PACE:        
0BE4   00                     NOP      
0BE5   CD E2 05               CALL   doLIST   
0BE8   F0 05 0B 00 C0 0B 18 06 DW   DOLIT,11,EMIT,EXIT   
0BF0                             ;   SPACE       ( -- )
0BF0                             ;               Send the blank character to the output device.
0BF0                          ;*Macro unroll: mCOLON  5,'SPACE',SPACE
0BF0                          ;*Macro unroll:  mCODE 5, "SPACE", SPACE
0BF0                          ALIGN   2   
0BF0                SPACE:       
0BF0                VVCODE:   .SET   $   
0BF0                VVLEN:    .SET   (5 & 01FH) / CELLL   
171C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
171C                VVNAME:   .SET   $   
171C   F0 0B 2A 17            DW   vvCODE,vvLINK   
1720                VVLINK:   .SET   $   
1720   05 53 50 41 43 45      DB   5,"SPACE"   
0BF0                          .ORG   vvCODE   
0BF0   00                     NOP      
0BF1   CD E2 05               CALL   doLIST   
0BF4   74 07 C0 0B 18 06      DW   BLANK,EMIT,EXIT   
0BFA                             ;   SPACES      ( +n -- )
0BFA                             ;               Send n spaces to the output device.
0BFA                          ;*Macro unroll: mCOLON  6,'SPACES',SPACS
0BFA                          ;*Macro unroll:  mCODE 6, "SPACES", SPACS
0BFA                          ALIGN   2   
0BFA                SPACS:       
0BFA                VVCODE:   .SET   $   
0BFA                VVLEN:    .SET   (6 & 01FH) / CELLL   
1710                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1710                VVNAME:   .SET   $   
1710   FA 0B 20 17            DW   vvCODE,vvLINK   
1714                VVLINK:   .SET   $   
1714   06 53 50 41 43 45 53   DB   6,"SPACES"   
0BFA                          .ORG   vvCODE   
0BFA   00                     NOP      
0BFB   CD E2 05               CALL   doLIST   
0BFE   F0 05 00 00 16 02 DE 0F DW   DOLIT,0,MAX,TOR   
0C06   F2 0D 0C 0C            DW   BRAN,CHAR2   
0C0A                CHAR1:       
0C0A   F0 0B                  DW   SPACE   
0C0C                CHAR2:       
0C0C   8E 06 0A 0C            DW   DONXT,CHAR1   
0C10   18 06                  DW   EXIT   
0C12                             ;   TYPE        ( b u -- )
0C12                             ;               Output u characters from b.
0C12                          ;*Macro unroll: mCOLON	4,'TYPE',TYPEE
0C12                          ;*Macro unroll:  mCODE 4, "TYPE", TYPEE
0C12                          ALIGN   2   
0C12                TYPEE:       
0C12                VVCODE:   .SET   $   
0C12                VVLEN:    .SET   (4 & 01FH) / CELLL   
1706                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1706                VVNAME:   .SET   $   
1706   12 0C 14 17            DW   vvCODE,vvLINK   
170A                VVLINK:   .SET   $   
170A   04 54 59 50 45         DB   4,"TYPE"   
0C12                          .ORG   vvCODE   
0C12   00                     NOP      
0C13   CD E2 05               CALL   doLIST   
0C16   DE 0F                  DW   TOR   
0C18   F2 0D 28 0C            DW   BRAN,TYPE2   
0C1C                TYPE1:       
0C1C   FA 0F 26 0E C0 0B      DW   DUPP,CAT,EMIT   
0C22   F0 05 01 00 5C 01      DW   DOLIT,1,PLUS   
0C28                TYPE2:       
0C28   8E 06 1C 0C            DW   DONXT,TYPE1   
0C2C   FE 0F 18 06            DW   DROP,EXIT   
0C30                             ;   CR          ( -- )
0C30                             ;               Output a carriage return and a line feed.
0C30                          ;*Macro unroll: mCOLON	2,'CR',CR
0C30                          ;*Macro unroll:  mCODE 2, "CR", CR
0C30                          ALIGN   2   
0C30                CR:          
0C30                VVCODE:   .SET   $   
0C30                VVLEN:    .SET   (2 & 01FH) / CELLL   
16FE                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
16FE                VVNAME:   .SET   $   
16FE   30 0C 0A 17            DW   vvCODE,vvLINK   
1702                VVLINK:   .SET   $   
1702   02 43 52               DB   2,"CR"   
0C30                          .ORG   vvCODE   
0C30   00                     NOP      
0C31   CD E2 05               CALL   doLIST   
0C34   F0 05 0D 00 C0 0B F0 05 0A 00 C0 0B 18 06 DW   DoLIT,CRR,EMIT,DoLIT,LFF,EMIT,EXIT   
0C42                             ;   do$         ( -- a )
0C42                             ;               Return the address of a compiled string.
0C42                          ;*Macro unroll: mCOLON  COMPO+3,'do$',DOSTR
0C42                          ;*Macro unroll:  mCODE COMPO+3, "do$", DOSTR
0C42                          ALIGN   2   
0C42                DOSTR:       
0C42                VVCODE:   .SET   $   
0C42                VVLEN:    .SET   (COMPO+3 & 01FH) / CELLL   
16D6                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
16D6                VVNAME:   .SET   $   
16D6   42 0C 02 17            DW   vvCODE,vvLINK   
16DA                VVLINK:   .SET   $   
16DA   23 64 6F 24            DB   COMPO+3,"do$"   
0C42                          .ORG   vvCODE   
0C42   00                     NOP      
0C43   CD E2 05               CALL   doLIST   
0C46   EC 0F 2E 0E EC 0F 8C 0E 5C 01 DW   RFROM,RAT,RFROM,COUNT,PLUS   
0C50   84 0F DE 0F 02 10 DE 0F 18 06 DW   ALGND,TOR,SWAP,TOR,EXIT   
0C5A                             ;   $"|         ( -- a )
0C5A                             ;               Run time routine compiled by $". Return address of a compiled string.
0C5A                          ;*Macro unroll: hCOLON  COMPO+3,'$||',STRQP
0C5A                          ;*Macro unroll:  hCODE COMPO+3, "$||", STRQP
0C5A                          ALIGN   2   
0C5A                STRQP:       
0C5A   00                     NOP      
0C5B   CD E2 05               CALL   doLIST   
0C5E   42 0C 18 06            DW   DOSTR,EXIT   ;force a call to do$
0C62                             ;   ."|         ( -- )
0C62                             ;               Run time routine of ." . Output a compiled string.
0C62                          ;*Macro unroll: hCOLON  COMPO+3,'.||',DOTQP
0C62                          ;*Macro unroll:  hCODE COMPO+3, ".||", DOTQP
0C62                          ALIGN   2   
0C62                DOTQP:       
0C62   00                     NOP      
0C63   CD E2 05               CALL   doLIST   
0C66   42 0C 8C 0E 12 0C 18 06 DW   DOSTR,COUNT,TYPEE,EXIT   
0C6E                             ;   .R          ( n +n -- )
0C6E                             ;               Display an integer in a field of n columns, right justified.
0C6E                          ;*Macro unroll: mCOLON  2,'.R',DOTR
0C6E                          ;*Macro unroll:  mCODE 2, ".R", DOTR
0C6E                          ALIGN   2   
0C6E                DOTR:        
0C6E                VVCODE:   .SET   $   
0C6E                VVLEN:    .SET   (2 & 01FH) / CELLL   
16CE                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
16CE                VVNAME:   .SET   $   
16CE   6E 0C DA 16            DW   vvCODE,vvLINK   
16D2                VVLINK:   .SET   $   
16D2   02 2E 52               DB   2,".R"   
0C6E                          .ORG   vvCODE   
0C6E   00                     NOP      
0C6F   CD E2 05               CALL   doLIST   
0C72   DE 0F 42 07 EC 0F 0A 10 9E 01 DW   TOR,STR,RFROM,OVER,SUBB   
0C7C   FA 0B 12 0C 18 06      DW   SPACS,TYPEE,EXIT   
0C82                             ;   U.R         ( u +n -- )
0C82                             ;               Display an unsigned integer in n column, right justified.
0C82                          ;*Macro unroll: mCOLON  3,'U.R',UDOTR
0C82                          ;*Macro unroll:  mCODE 3, "U.R", UDOTR
0C82                          ALIGN   2   
0C82                UDOTR:       
0C82                VVCODE:   .SET   $   
0C82                VVLEN:    .SET   (3 & 01FH) / CELLL   
16C6                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
16C6                VVNAME:   .SET   $   
16C6   82 0C D2 16            DW   vvCODE,vvLINK   
16CA                VVLINK:   .SET   $   
16CA   03 55 2E 52            DB   3,"U.R"   
0C82                          .ORG   vvCODE   
0C82   00                     NOP      
0C83   CD E2 05               CALL   doLIST   
0C86   DE 0F DA 06 0C 07 30 07 DW   TOR,BDIGS,DIGS,EDIGS   
0C8E   EC 0F 0A 10 9E 01      DW   RFROM,OVER,SUBB   
0C94   FA 0B 12 0C 18 06      DW   SPACS,TYPEE,EXIT   
0C9A                             ;   U.          ( u -- )
0C9A                             ;               Display an unsigned integer in free format.
0C9A                          ;*Macro unroll: mCOLON  2,'U.',UDOT
0C9A                          ;*Macro unroll:  mCODE 2, "U.", UDOT
0C9A                          ALIGN   2   
0C9A                UDOT:        
0C9A                VVCODE:   .SET   $   
0C9A                VVLEN:    .SET   (2 & 01FH) / CELLL   
16BE                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
16BE                VVNAME:   .SET   $   
16BE   9A 0C CA 16            DW   vvCODE,vvLINK   
16C2                VVLINK:   .SET   $   
16C2   02 55 2E               DB   2,"U."   
0C9A                          .ORG   vvCODE   
0C9A   00                     NOP      
0C9B   CD E2 05               CALL   doLIST   
0C9E   DA 06 0C 07 30 07      DW   BDIGS,DIGS,EDIGS   
0CA4   F0 0B 12 0C 18 06      DW   SPACE,TYPEE,EXIT   
0CAA                             ;   .           ( w -- )
0CAA                             ;               Display an integer in free format, preceeded by a space.
0CAA                          ;*Macro unroll: mCOLON  1,'.',DOT
0CAA                          ;*Macro unroll:  mCODE 1, ".", DOT
0CAA                          ALIGN   2   
0CAA                DOT:         
0CAA                VVCODE:   .SET   $   
0CAA                VVLEN:    .SET   (1 & 01FH) / CELLL   
16B8                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
16B8                VVNAME:   .SET   $   
16B8   AA 0C C2 16            DW   vvCODE,vvLINK   
16BC                VVLINK:   .SET   $   
16BC   01 2E                  DB   1,"."   
0CAA                          .ORG   vvCODE   
0CAA   00                     NOP      
0CAB   CD E2 05               CALL   doLIST   
0CAE   BA 10 16 0E F0 05 0A 00 52 01 DW   BASE,AT,DOLIT,10,XORR   ;?decimal
0CB8   E6 0D C0 0C            DW   QBRAN,DOT1   
0CBC   9A 0C 18 06            DW   UDOT,EXIT   ;no, display unsigned
0CC0                DOT1:        
0CC0   42 07 F0 0B 12 0C 18 06 DW   STR,SPACE,TYPEE,EXIT   ;yes, display signed
0CC8                             ;   .(          ( -- )
0CC8                             ;               Output following string up to next ) .
0CC8                          ;*Macro unroll: mCOLON  IMEDD+2,'.(',DOTPR
0CC8                          ;*Macro unroll:  mCODE IMEDD+2, ".(", DOTPR
0CC8                          ALIGN   2   
0CC8                DOTPR:       
0CC8                VVCODE:   .SET   $   
0CC8                VVLEN:    .SET   (IMEDD+2 & 01FH) / CELLL   
1670                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1670                VVNAME:   .SET   $   
1670   C8 0C BC 16            DW   vvCODE,vvLINK   
1674                VVLINK:   .SET   $   
1674   42 2E 28               DB   IMEDD+2,".("   
0CC8                          .ORG   vvCODE   
0CC8   00                     NOP      
0CC9   CD E2 05               CALL   doLIST   
0CCC   F0 05 18 09 12 0C 18 06 DW   DOLIT,")",PARSE,TYPEE,EXIT   
0CD4                             ;   ?           ( a -- )
0CD4                             ;               Display the contents in a memory cell.
0CD4                          ;*Macro unroll: mCOLON  1,'?',QUEST
0CD4                          ;*Macro unroll:  mCODE 1, "?", QUEST
0CD4                          ALIGN   2   
0CD4                QUEST:       
0CD4                VVCODE:   .SET   $   
0CD4                VVLEN:    .SET   (1 & 01FH) / CELLL   
166A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
166A                VVNAME:   .SET   $   
166A   D4 0C 74 16            DW   vvCODE,vvLINK   
166E                VVLINK:   .SET   $   
166E   01 3F                  DB   1,"?"   
0CD4                          .ORG   vvCODE   
0CD4   00                     NOP      
0CD5   CD E2 05               CALL   doLIST   
0CD8   16 0E AA 0C 18 06      DW   AT,DOT,EXIT   
0CDE                             ;   ^H          ( bot eot cur -- bot eot cur )
0CDE                             ;               Backup the cursor by one character.
0CDE                          ;*Macro unroll: mCOLON  2,'^H',BKSP
0CDE                          ;*Macro unroll:  mCODE 2, "^H", BKSP
0CDE                          ALIGN   2   
0CDE                BKSP:        
0CDE                VVCODE:   .SET   $   
0CDE                VVLEN:    .SET   (2 & 01FH) / CELLL   
1662                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1662                VVNAME:   .SET   $   
1662   DE 0C 6E 16            DW   vvCODE,vvLINK   
1666                VVLINK:   .SET   $   
1666   02 5E 48               DB   2,"^H"   
0CDE                          .ORG   vvCODE   
0CDE   00                     NOP      
0CDF   CD E2 05               CALL   doLIST   
0CE2   DE 0F 0A 10 EC 0F 02 10 0A 10 52 01 DW   TOR,OVER,RFROM,SWAP,OVER,XORR   
0CEE   E6 0D 0E 0D            DW   QBRAN,BACK1   
0CF2   F0 05 08 00 AA 10 C2 0E F0 05 01 00 9E 01 DW   DOLIT,BKSPP,TECHO,ATEXE,DOLIT,1,SUBB   
0D00   74 07 AA 10 C2 0E      DW   BLANK,TECHO,ATEXE   
0D06   F0 05 08 00 AA 10 C2 0E DW   DOLIT,BKSPP,TECHO,ATEXE   
0D0E                BACK1:       
0D0E   18 06                  DW   EXIT   
0D10                             ;   TAP         ( bot eot cur c -- bot eot cur )
0D10                             ;               Accept and echo the key stroke and bump the cursor.
0D10                          ;*Macro unroll: mCOLON  3,'TAP',TAP
0D10                          ;*Macro unroll:  mCODE 3, "TAP", TAP
0D10                          ALIGN   2   
0D10                TAP:         
0D10                VVCODE:   .SET   $   
0D10                VVLEN:    .SET   (3 & 01FH) / CELLL   
165A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
165A                VVNAME:   .SET   $   
165A   10 0D 66 16            DW   vvCODE,vvLINK   
165E                VVLINK:   .SET   $   
165E   03 54 41 50            DB   3,"TAP"   
0D10                          .ORG   vvCODE   
0D10   00                     NOP      
0D11   CD E2 05               CALL   doLIST   
0D14   FA 0F AA 10 C2 0E      DW   DUPP,TECHO,ATEXE   
0D1A   0A 10 1E 0E F0 05 01 00 5C 01 18 06 DW   OVER,CSTOR,DOLIT,1,PLUS,EXIT   
0D26                             ;   kTAP        ( bot eot cur c -- bot eot cur )
0D26                             ;               Process a key stroke, CR or backspace.
0D26                          ;*Macro unroll: mCOLON  4,'kTAP',KTAP
0D26                          ;*Macro unroll:  mCODE 4, "kTAP", KTAP
0D26                          ALIGN   2   
0D26                KTAP:        
0D26                VVCODE:   .SET   $   
0D26                VVLEN:    .SET   (4 & 01FH) / CELLL   
1650                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1650                VVNAME:   .SET   $   
1650   26 0D 5E 16            DW   vvCODE,vvLINK   
1654                VVLINK:   .SET   $   
1654   04 6B 54 41 50         DB   4,"kTAP"   
0D26                          .ORG   vvCODE   
0D26   00                     NOP      
0D27   CD E2 05               CALL   doLIST   
0D2A   FA 0F F0 05 0D 00 52 01 DW   DUPP,DOLIT,CRR,XORR   
0D32   E6 0D 4A 0D            DW   QBRAN,KTAP2   
0D36   F0 05 08 00 52 01      DW   DOLIT,BKSPP,XORR   
0D3C   E6 0D 46 0D            DW   QBRAN,KTAP1   
0D40   74 07 10 0D 18 06      DW   BLANK,TAP,EXIT   
0D46                KTAP1:       
0D46   DE 0C 18 06            DW   BKSP,EXIT   
0D4A                KTAP2:       
0D4A   FE 0F 02 10 FE 0F FA 0F 18 06 DW   DROP,SWAP,DROP,DUPP,EXIT   
0D54                             ;   accept      ( b u -- b u )
0D54                             ;               Accept characters to input buffer. Return with actual count.
0D54                          ;*Macro unroll: mCOLON  6,'accept',ACCEP
0D54                          ;*Macro unroll:  mCODE 6, "accept", ACCEP
0D54                          ALIGN   2   
0D54                ACCEP:       
0D54                VVCODE:   .SET   $   
0D54                VVLEN:    .SET   (6 & 01FH) / CELLL   
1644                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1644                VVNAME:   .SET   $   
1644   54 0D 54 16            DW   vvCODE,vvLINK   
1648                VVLINK:   .SET   $   
1648   06 61 63 63 65 70 74   DB   6,"accept"   
0D54                          .ORG   vvCODE   
0D54   00                     NOP      
0D55   CD E2 05               CALL   doLIST   
0D58   0A 10 5C 01 0A 10      DW   OVER,PLUS,OVER   
0D5E                ACCP1:       
0D5E   38 10 52 01            DW   DDUP,XORR   
0D62   E6 0D 84 0D            DW   QBRAN,ACCP4   
0D66   B4 0B FA 0F            DW   KEY,DUPP   
0D6A   74 07 F0 05 7F 00 3A 02 DW   BLANK,DOLIT,127,WITHI   
0D72   E6 0D 7C 0D            DW   QBRAN,ACCP2   
0D76   10 0D                  DW   TAP   
0D78   F2 0D 80 0D            DW   BRAN,ACCP3   
0D7C                ACCP2:       
0D7C   A2 10 C2 0E            DW   TTAP,ATEXE   
0D80                ACCP3:       
0D80   F2 0D 5E 0D            DW   BRAN,ACCP1   
0D84                ACCP4:       
0D84   FE 0F 0A 10 9E 01 18 06 DW   DROP,OVER,SUBB,EXIT   
0D8C                             ;   EXPECT      ( b u -- )
0D8C                             ;               Accept input stream and store count in SPAN.
0D8C                          ;*Macro unroll: hCOLON  6,'EXPECT',EXPEC
0D8C                          ;*Macro unroll:  hCODE 6, "EXPECT", EXPEC
0D8C                          ALIGN   2   
0D8C                EXPEC:       
0D8C   00                     NOP      
0D8D   CD E2 05               CALL   doLIST   
0D90   9A 10 C2 0E CA 10 0C 0E FE 0F 18 06 DW   TEXPE,ATEXE,SPAN,STORE,DROP,EXIT   
0D9C                             ;   QUERY       ( -- )
0D9C                             ;               Accept input stream to terminal input buffer.
0D9C                          ;*Macro unroll: hCOLON  5,'QUERY',QUERY
0D9C                          ;*Macro unroll:  hCODE 5, "QUERY", QUERY
0D9C                          ALIGN   2   
0D9C                QUERY:       
0D9C   00                     NOP      
0D9D   CD E2 05               CALL   doLIST   
0DA0   B6 0E F0 05 50 00 9A 10 C2 0E DA 10 0C 0E DW   TIB,DOLIT,80,TEXPE,ATEXE,NTIB,STORE   
0DAE   FE 0F F0 05 00 00 D2 10 0C 0E 18 06 DW   DROP,DOLIT,0,INN,STORE,EXIT   
0DBA                NEXT_STEP:      
0DBA   5E                     LD   E,(HL)   ; 7t
0DBB   23                     INC   HL   ; 6t
0DBC   56                     LD   D,(HL)   ; 7t
0DBD   23                     INC   HL   ; 6t
0DBE   EB                     EX   DE,HL   ; 4t
0DBF   E9                     JP   (HL)   ; 4t
0DC0                          ;*Macro unroll: mCOLON	4,'COLD',COLD
0DC0                          ;*Macro unroll:  mCODE 4, "COLD", COLD
0DC0                          ALIGN   2   
0DC0                COLD:        
0DC0                VVCODE:   .SET   $   
0DC0                VVLEN:    .SET   (4 & 01FH) / CELLL   
163A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
163A                VVNAME:   .SET   $   
163A   C0 0D 48 16            DW   vvCODE,vvLINK   
163E                VVLINK:   .SET   $   
163E   04 43 4F 4C 44         DB   4,"COLD"   
0DC0                          .ORG   vvCODE   
0DC0   00                     NOP      
0DC1   CD E2 05               CALL   doLIST   
0DC4   82 0B                  DW   STOIO   
0DC6                             ; DW	DOLIT, 65, EMIT
0DC6   F0 05 D0 0D 8C 0E 12 0C DW   DOLIT,HELLO,COUNT,TYPEE   
0DCE   E0 0D                  DW   QUIT   
0DD0   0F 48 65 6C 6C 6F 20 46 6F 72 74 68 21 20 0D 0A HELLO:   .PSTR   "Hello Forth! \r\n"   
0DE0                          ;*Macro unroll: mCODE  4, 'QUIT', QUIT
0DE0                          ALIGN   2   
0DE0                QUIT:        
0DE0                VVCODE:   .SET   $   
0DE0                VVLEN:    .SET   (4 & 01FH) / CELLL   
1630                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1630                VVNAME:   .SET   $   
1630   E0 0D 3E 16            DW   vvCODE,vvLINK   
1634                VVLINK:   .SET   $   
1634   04 51 55 49 54         DB   4,"QUIT"   
0DE0                          .ORG   vvCODE   
0DE0   76                     HALT      
0DE1                             ;   EXECUTE	( i*x xt -- j*x )		\ CORE
0DE1                             ;		Perform the semantics indentified by execution token, xt.
0DE1                          ;*Macro unroll: mCODE	7,'EXECUTE', EXECU
0DE1                          ALIGN   2   
0DE2                EXECU:       
0DE2                VVCODE:   .SET   $   
0DE2                VVLEN:    .SET   (7 & 01FH) / CELLL   
1624                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1624                VVNAME:   .SET   $   
1624   E2 0D 34 16            DW   vvCODE,vvLINK   
1628                VVLINK:   .SET   $   
1628   07 45 58 45 43 55 54 45 DB   7,"EXECUTE"   
0DE2                          .ORG   vvCODE   
0DE2   60                     LD   H,B   
0DE3   69                     LD   L,C   
0DE4   C1                     POP   BC   
0DE5   E9                     JP   (HL)   
0DE6                             ; 
0DE6                             ;   0BRAN	( flag -- )
0DE6                             ;		BRAN if flag is zero.
0DE6                          ;*Macro unroll: hCODE	COMPO+7,'?branch', QBRAN
0DE6                          ALIGN   2   
0DE6                QBRAN:       
0DE6   78                     LD   A,B   ; 4t
0DE7   B1                     OR   C   ; 4t
0DE8   C1                     POP   BC   ;10t
0DE9   CA F2 0D               JP   Z,BRAN   ;10/7t a fast dec is ok, only
0DEC   13                     INC   DE   ; 6t yes,continue past the BRAN offset
0DED   13                     INC   DE   ; 6t
0DEE                          ;*Macro unroll: 	mNEXT
0DEE   EB                     EX   DE,HL   
0DEF                          ;*Macro unroll:  mNEXTHL                         ; 34t
0DEF   FD E9                  JP   (IY)   ; 34t
0DF1                             ;   BRAN	( -- )
0DF1                             ;		BRAN to an inline address.
0DF1                          ;*Macro unroll: hCODE	COMPO+6,'branch', BRAN
0DF1                          ALIGN   2   
0DF2                BRAN:        
0DF2   1A                     LD   A,(DE)   ; 7t go back to the loop
0DF3   6F                     LD   L,A   ; 4t
0DF4   13                     INC   DE   ; 6t
0DF5   1A                     LD   A,(DE)   ; 7t
0DF6   67                     LD   H,A   ; 4t
0DF7                          ;*Macro unroll: 	mNEXTHL
0DF7   FD E9                  JP   (IY)   
0DF9                             ; 
0DF9                             ;   TYPECSTR    ( cstr -- )
0DF9                             ;   Similar to TYPE but prints C null terminated strings
0DF9                          ;*Macro unroll: mCODE	3,'TYPESZ',TypeCStr
0DF9                          ALIGN   2   
0DFA                TYPECSTR:      
0DFA                VVCODE:   .SET   $   
0DFA                VVLEN:    .SET   (3 & 01FH) / CELLL   
161C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
161C                VVNAME:   .SET   $   
161C   FA 0D 28 16            DW   vvCODE,vvLINK   
1620                VVLINK:   .SET   $   
1620   03 54 59 50 45 53 5A   DB   3,"TYPESZ"   
0DFA                          .ORG   vvCODE   
0DFA   60                     LD   H,B   
0DFB   69                     LD   L,C   
0DFC   CD F1 00               CALL   PRINTSZ   
0DFF   C1                     POP   BC   
0E00                          ;*Macro unroll:  mNEXT
0E00   EB                     EX   DE,HL   
0E01                          ;*Macro unroll:  mNEXTHL                         ; 34t
0E01   FD E9                  JP   (IY)   ; 34t
0E03                             ;   THROW    ( cstr -- )
0E03                             ;   Prints string message and returns TODO: restart Forth interpreter QUIT
0E03                          ;*Macro unroll: mCOLON	5,'THROWX',THROWX
0E03                          ;*Macro unroll:  mCODE 5, "THROWX", THROWX
0E03                          ALIGN   2   
0E04                THROWX:      
0E04                VVCODE:   .SET   $   
0E04                VVLEN:    .SET   (5 & 01FH) / CELLL   
1612                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1612                VVNAME:   .SET   $   
1612   04 0E 20 16            DW   vvCODE,vvLINK   
1616                VVLINK:   .SET   $   
1616   05 54 48 52 4F 57 58   DB   5,"THROWX"   
0E04                          .ORG   vvCODE   
0E04   00                     NOP      
0E05   CD E2 05               CALL   doLIST   
0E08   FA 0D 18 06            DW   TypeCStr,EXIT   
0E0C                             ;   !           ( w a -- )
0E0C                             ;               Pop the data stack to memory.
0E0C                          ;*Macro unroll: mCODE	1,'!',Store
0E0C                          ALIGN   2   
0E0C                STORE:       
0E0C                VVCODE:   .SET   $   
0E0C                VVLEN:    .SET   (1 & 01FH) / CELLL   
160C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
160C                VVNAME:   .SET   $   
160C   0C 0E 16 16            DW   vvCODE,vvLINK   
1610                VVLINK:   .SET   $   
1610   01 21                  DB   1,"!"   
0E0C                          .ORG   vvCODE   
0E0C   60                     LD   H,B   
0E0D   69                     LD   L,C   
0E0E   C1                     POP   BC   
0E0F   71                     LD   (HL),C   
0E10   23                     INC   HL   
0E11   70                     LD   (HL),B   
0E12   C1                     POP   BC   
0E13                          ;*Macro unroll: 	mNEXT
0E13   EB                     EX   DE,HL   
0E14                          ;*Macro unroll:  mNEXTHL                         ; 34t
0E14   FD E9                  JP   (IY)   ; 34t
0E16                             ;   @           ( a -- w )
0E16                             ;               Push memory location to the data stack.
0E16                          ;*Macro unroll: mCODE	1,'@', AT
0E16                          ALIGN   2   
0E16                AT:          
0E16                VVCODE:   .SET   $   
0E16                VVLEN:    .SET   (1 & 01FH) / CELLL   
1606                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1606                VVNAME:   .SET   $   
1606   16 0E 10 16            DW   vvCODE,vvLINK   
160A                VVLINK:   .SET   $   
160A   01 40                  DB   1,"@"   
0E16                          .ORG   vvCODE   
0E16   60                     LD   H,B   
0E17   69                     LD   L,C   
0E18   4E                     LD   C,(HL)   
0E19   23                     INC   HL   
0E1A   46                     LD   B,(HL)   
0E1B                          ;*Macro unroll: 	mNEXT
0E1B   EB                     EX   DE,HL   
0E1C                          ;*Macro unroll:  mNEXTHL                         ; 34t
0E1C   FD E9                  JP   (IY)   ; 34t
0E1E                             ;   C!          ( c b -- )
0E1E                             ;               Pop the data stack to byte memory.
0E1E                          ;*Macro unroll: mCODE	2,'C!',CSTOR
0E1E                          ALIGN   2   
0E1E                CSTOR:       
0E1E                VVCODE:   .SET   $   
0E1E                VVLEN:    .SET   (2 & 01FH) / CELLL   
15FE                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
15FE                VVNAME:   .SET   $   
15FE   1E 0E 0A 16            DW   vvCODE,vvLINK   
1602                VVLINK:   .SET   $   
1602   02 43 21               DB   2,"C!"   
0E1E                          .ORG   vvCODE   
0E1E   60                     LD   H,B   
0E1F   69                     LD   L,C   
0E20   C1                     POP   BC   
0E21   71                     LD   (HL),C   
0E22   C1                     POP   BC   
0E23                          ;*Macro unroll: 	mNEXT
0E23   EB                     EX   DE,HL   
0E24                          ;*Macro unroll:  mNEXTHL                         ; 34t
0E24   FD E9                  JP   (IY)   ; 34t
0E26                             ;   C@          ( b -- c )
0E26                             ;               Push byte memory location to the data stack.
0E26                          ;*Macro unroll: mCODE	2,'C@',CAT
0E26                          ALIGN   2   
0E26                CAT:         
0E26                VVCODE:   .SET   $   
0E26                VVLEN:    .SET   (2 & 01FH) / CELLL   
15F6                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
15F6                VVNAME:   .SET   $   
15F6   26 0E 02 16            DW   vvCODE,vvLINK   
15FA                VVLINK:   .SET   $   
15FA   02 43 40               DB   2,"C@"   
0E26                          .ORG   vvCODE   
0E26   0A                     LD   A,(BC)   
0E27   4F                     LD   C,A   
0E28   06 00                  LD   B,0   
0E2A                          ;*Macro unroll: 	mNEXT
0E2A   EB                     EX   DE,HL   
0E2B                          ;*Macro unroll:  mNEXTHL                         ; 34t
0E2B   FD E9                  JP   (IY)   ; 34t
0E2D                             ;   R@          ( -- w )
0E2D                             ;               Copy top of return stack to the data stack.
0E2D                          ;*Macro unroll: mCODE	COMPO+2,'R@',RAT
0E2D                          ALIGN   2   
0E2E                RAT:         
0E2E                VVCODE:   .SET   $   
0E2E                VVLEN:    .SET   (COMPO+2 & 01FH) / CELLL   
15CE                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
15CE                VVNAME:   .SET   $   
15CE   2E 0E FA 15            DW   vvCODE,vvLINK   
15D2                VVLINK:   .SET   $   
15D2   22 52 40               DB   COMPO+2,"R@"   
0E2E                          .ORG   vvCODE   
0E2E   C5                     PUSH   BC   
0E2F   DD 4E 00               LD   C,(IX+0)   
0E32   DD 46 01               LD   B,(IX+1)   
0E35                          ;*Macro unroll: 	mNEXT
0E35   EB                     EX   DE,HL   
0E36                          ;*Macro unroll:  mNEXTHL                         ; 34t
0E36   FD E9                  JP   (IY)   ; 34t
0E38                             ;   RP@         ( -- a )
0E38                             ;               Push the current RP to the data stack
0E38                          ;*Macro unroll: mCODE	COMPO+3, 'rp@', RPAT
0E38                          ALIGN   2   
0E38                RPAT:        
0E38                VVCODE:   .SET   $   
0E38                VVLEN:    .SET   (COMPO+3 & 01FH) / CELLL   
15A6                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
15A6                VVNAME:   .SET   $   
15A6   38 0E D2 15            DW   vvCODE,vvLINK   
15AA                VVLINK:   .SET   $   
15AA   23 72 70 40            DB   COMPO+3,"rp@"   
0E38                          .ORG   vvCODE   
0E38   C5                     DB   0C5h   ; PUSH	BC	;11t
0E39   DD E5                  DB   0DDh,0E5h   ; PUSH IX	;15t
0E3B   C1                     DB   0C1h   ; POP	BC	;10t
0E3C                          ;*Macro unroll:  mNEXT
0E3C   EB                     EX   DE,HL   
0E3D                          ;*Macro unroll:  mNEXTHL                         ; 34t
0E3D   FD E9                  JP   (IY)   ; 34t
0E3F                             ;   RP!         ( a -- )
0E3F                             ;               Set the return stack pointer.
0E3F                          ;*Macro unroll: mCODE	COMPO+3,'rp!',RPSTO
0E3F                          ALIGN   2   
0E40                RPSTO:       
0E40                VVCODE:   .SET   $   
0E40                VVLEN:    .SET   (COMPO+3 & 01FH) / CELLL   
157E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
157E                VVNAME:   .SET   $   
157E   40 0E AA 15            DW   vvCODE,vvLINK   
1582                VVLINK:   .SET   $   
1582   23 72 70 21            DB   COMPO+3,"rp!"   
0E40                          .ORG   vvCODE   
0E40   C5                     DB   0C5h   ; PUSH	BC	;11t
0E41   DD E1                  DB   0DDh,0E1h   ; POP IX	;14t
0E43   C1                     DB   0C1h   ; POP	BC	;10t
0E44                          ;*Macro unroll: 	mNEXT
0E44   EB                     EX   DE,HL   
0E45                          ;*Macro unroll:  mNEXTHL                         ; 34t
0E45   FD E9                  JP   (IY)   ; 34t
0E47                             ;   SP@         ( -- a )
0E47                             ;               Push the current data stack pointer.
0E47                          ;*Macro unroll: mCODE	3, 'sp@', SPAT
0E47                          ALIGN   2   
0E48                SPAT:        
0E48                VVCODE:   .SET   $   
0E48                VVLEN:    .SET   (3 & 01FH) / CELLL   
1576                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1576                VVNAME:   .SET   $   
1576   48 0E 82 15            DW   vvCODE,vvLINK   
157A                VVLINK:   .SET   $   
157A   03 73 70 40            DB   3,"sp@"   
0E48                          .ORG   vvCODE   
0E48   C5                     DB   0C5h   ; PUSH	BC	;11t
0E49   21                     DB   021h   ; LD	HL,0	;10t
0E4A   00 00                  DW   0   
0E4C   39                     DB   039h   ; ADD	HL,SP	;11t
0E4D   44                     DB   044h   ; LD	B,H	; 4t
0E4E   4D                     DB   04Dh   ; LD	C,L	; 4t
0E4F                          ;*Macro unroll: 	mNEXT
0E4F   EB                     EX   DE,HL   
0E50                          ;*Macro unroll:  mNEXTHL                         ; 34t
0E50   FD E9                  JP   (IY)   ; 34t
0E52                             ;   SP!         ( a -- )
0E52                             ;               Set the data stack pointer.
0E52                          ;*Macro unroll: mCODE	3,'sp!',SPSTO
0E52                          ALIGN   2   
0E52                SPSTO:       
0E52                VVCODE:   .SET   $   
0E52                VVLEN:    .SET   (3 & 01FH) / CELLL   
156E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
156E                VVNAME:   .SET   $   
156E   52 0E 7A 15            DW   vvCODE,vvLINK   
1572                VVLINK:   .SET   $   
1572   03 73 70 21            DB   3,"sp!"   
0E52                          .ORG   vvCODE   
0E52   60                     DB   060h   ; LD	H,B	; 4t
0E53   69                     DB   069h   ; LD	L,C	; 4t
0E54   F9                     DB   0F9h   ; LD	SP,HL	; 6t
0E55   C1                     DB   0C1h   ; POP	BC	;10t
0E56                          ;*Macro unroll: 	mNEXT
0E56   EB                     EX   DE,HL   
0E57                          ;*Macro unroll:  mNEXTHL                         ; 34t
0E57   FD E9                  JP   (IY)   ; 34t
0E59                             ;   +!          ( n a -- )
0E59                             ;               Add n to the contents at address a.
0E59                          ;*Macro unroll: mCOLON  2,'+!',PSTOR
0E59                          ;*Macro unroll:  mCODE 2, "+!", PSTOR
0E59                          ALIGN   2   
0E5A                PSTOR:       
0E5A                VVCODE:   .SET   $   
0E5A                VVLEN:    .SET   (2 & 01FH) / CELLL   
1566                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1566                VVNAME:   .SET   $   
1566   5A 0E 72 15            DW   vvCODE,vvLINK   
156A                VVLINK:   .SET   $   
156A   02 2B 21               DB   2,"+!"   
0E5A                          .ORG   vvCODE   
0E5A   00                     NOP      
0E5B   CD E2 05               CALL   doLIST   
0E5E   02 10 0A 10 16 0E 5C 01 DW   SWAP,OVER,AT,PLUS   
0E66   02 10 0C 0E 18 06      DW   SWAP,STORE,EXIT   
0E6C                             ;   2!          ( d a -- )
0E6C                             ;               Store the double integer to address a.
0E6C                          ;*Macro unroll: mCOLON  2,'2!',DSTOR
0E6C                          ;*Macro unroll:  mCODE 2, "2!", DSTOR
0E6C                          ALIGN   2   
0E6C                DSTOR:       
0E6C                VVCODE:   .SET   $   
0E6C                VVLEN:    .SET   (2 & 01FH) / CELLL   
155E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
155E                VVNAME:   .SET   $   
155E   6C 0E 6A 15            DW   vvCODE,vvLINK   
1562                VVLINK:   .SET   $   
1562   02 32 21               DB   2,"2!"   
0E6C                          .ORG   vvCODE   
0E6C   00                     NOP      
0E6D   CD E2 05               CALL   doLIST   
0E70   02 10 0A 10 0C 0E      DW   SWAP,OVER,STORE   
0E76   6A 03 0C 0E 18 06      DW   CELLP,STORE,EXIT   
0E7C                             ;   2@          ( a -- d )
0E7C                             ;               Fetch double integer from address a.
0E7C                          ;*Macro unroll: mCOLON  2,'2@',DAT
0E7C                          ;*Macro unroll:  mCODE 2, "2@", DAT
0E7C                          ALIGN   2   
0E7C                DAT:         
0E7C                VVCODE:   .SET   $   
0E7C                VVLEN:    .SET   (2 & 01FH) / CELLL   
1556                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1556                VVNAME:   .SET   $   
1556   7C 0E 62 15            DW   vvCODE,vvLINK   
155A                VVLINK:   .SET   $   
155A   02 32 40               DB   2,"2@"   
0E7C                          .ORG   vvCODE   
0E7C   00                     NOP      
0E7D   CD E2 05               CALL   doLIST   
0E80   FA 0F 6A 03 16 0E      DW   DUPP,CELLP,AT   
0E86   02 10 16 0E 18 06      DW   SWAP,AT,EXIT   
0E8C                             ;   COUNT       ( b -- b +n )
0E8C                             ;               Return count byte of a string and add 1 to byte address.
0E8C                          ;*Macro unroll: mCOLON  5,'COUNT',COUNT
0E8C                          ;*Macro unroll:  mCODE 5, "COUNT", COUNT
0E8C                          ALIGN   2   
0E8C                COUNT:       
0E8C                VVCODE:   .SET   $   
0E8C                VVLEN:    .SET   (5 & 01FH) / CELLL   
154C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
154C                VVNAME:   .SET   $   
154C   8C 0E 5A 15            DW   vvCODE,vvLINK   
1550                VVLINK:   .SET   $   
1550   05 43 4F 55 4E 54      DB   5,"COUNT"   
0E8C                          .ORG   vvCODE   
0E8C   00                     NOP      
0E8D   CD E2 05               CALL   doLIST   
0E90   FA 0F F0 05 01 00 5C 01 DW   DUPP,DOLIT,1,PLUS   
0E98   02 10 26 0E 18 06      DW   SWAP,CAT,EXIT   
0E9E                             ;   HERE        ( -- a )
0E9E                             ;               Return the top of the code dictionary.
0E9E                          ;*Macro unroll: mCOLON  4,'HERE',HERE
0E9E                          ;*Macro unroll:  mCODE 4, "HERE", HERE
0E9E                          ALIGN   2   
0E9E                HERE:        
0E9E                VVCODE:   .SET   $   
0E9E                VVLEN:    .SET   (4 & 01FH) / CELLL   
1542                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1542                VVNAME:   .SET   $   
1542   9E 0E 50 15            DW   vvCODE,vvLINK   
1546                VVLINK:   .SET   $   
1546   04 48 45 52 45         DB   4,"HERE"   
0E9E                          .ORG   vvCODE   
0E9E   00                     NOP      
0E9F   CD E2 05               CALL   doLIST   
0EA2   1A 11 16 0E 18 06      DW   CP,AT,EXIT   
0EA8                             ;   PAD         ( -- a )
0EA8                             ;               Return the address of a temporary buffer.
0EA8                          ;*Macro unroll: mCOLON  3,'PAD',PAD
0EA8                          ;*Macro unroll:  mCODE 3, "PAD", PAD
0EA8                          ALIGN   2   
0EA8                PAD:         
0EA8                VVCODE:   .SET   $   
0EA8                VVLEN:    .SET   (3 & 01FH) / CELLL   
153A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
153A                VVNAME:   .SET   $   
153A   A8 0E 46 15            DW   vvCODE,vvLINK   
153E                VVLINK:   .SET   $   
153E   03 50 41 44            DB   3,"PAD"   
0EA8                          .ORG   vvCODE   
0EA8   00                     NOP      
0EA9   CD E2 05               CALL   doLIST   
0EAC   9E 0E F0 05 50 00 5C 01 18 06 DW   HERE,DOLIT,80,PLUS,EXIT   
0EB6                             ;   TIB         ( -- a )
0EB6                             ;               Return the address of the terminal input buffer.
0EB6                          ;*Macro unroll: mCOLON  3,'TIB',TIB
0EB6                          ;*Macro unroll:  mCODE 3, "TIB", TIB
0EB6                          ALIGN   2   
0EB6                TIB:         
0EB6                VVCODE:   .SET   $   
0EB6                VVLEN:    .SET   (3 & 01FH) / CELLL   
1532                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1532                VVNAME:   .SET   $   
1532   B6 0E 3E 15            DW   vvCODE,vvLINK   
1536                VVLINK:   .SET   $   
1536   03 54 49 42            DB   3,"TIB"   
0EB6                          .ORG   vvCODE   
0EB6   00                     NOP      
0EB7   CD E2 05               CALL   doLIST   
0EBA   DA 10 6A 03 16 0E 18 06 DW   NTIB,CELLP,AT,EXIT   
0EC2                             ;   @EXECUTE    ( a -- )
0EC2                             ;               Execute vector stored in address a.
0EC2                          ;*Macro unroll: hCOLON  8,'@EXECUTE',ATEXE
0EC2                          ;*Macro unroll:  hCODE 8, "@EXECUTE", ATEXE
0EC2                          ALIGN   2   
0EC2                ATEXE:       
0EC2   00                     NOP      
0EC3   CD E2 05               CALL   doLIST   
0EC6   16 0E 12 10            DW   AT,QDUP   ;?address or zero
0ECA   E6 0D D0 0E            DW   QBRAN,EXE1   
0ECE   E2 0D                  DW   EXECU   ;execute if non-zero
0ED0                EXE1:        
0ED0   18 06                  DW   EXIT   ;do nothing if zero
0ED2                             ;   CMOVE       ( b1 b2 u -- )
0ED2                             ;               Copy u bytes from b1 to b2.
0ED2                          ;*Macro unroll: mCOLON  5,'CMOVE',CMOVE
0ED2                          ;*Macro unroll:  mCODE 5, "CMOVE", CMOVE
0ED2                          ALIGN   2   
0ED2                CMOVE:       
0ED2                VVCODE:   .SET   $   
0ED2                VVLEN:    .SET   (5 & 01FH) / CELLL   
1528                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1528                VVNAME:   .SET   $   
1528   D2 0E 36 15            DW   vvCODE,vvLINK   
152C                VVLINK:   .SET   $   
152C   05 43 4D 4F 56 45      DB   5,"CMOVE"   
0ED2                          .ORG   vvCODE   
0ED2   00                     NOP      
0ED3   CD E2 05               CALL   doLIST   
0ED6   DE 0F                  DW   TOR   
0ED8   F2 0D F4 0E            DW   BRAN,CMOV2   
0EDC                CMOV1:       
0EDC   DE 0F FA 0F 26 0E      DW   TOR,DUPP,CAT   
0EE2   2E 0E 1E 0E            DW   RAT,CSTOR   
0EE6   F0 05 01 00 5C 01      DW   DOLIT,1,PLUS   
0EEC   EC 0F F0 05 01 00 5C 01 DW   RFROM,DOLIT,1,PLUS   
0EF4                CMOV2:       
0EF4   8E 06 DC 0E            DW   DONXT,CMOV1   
0EF8   2E 10 18 06            DW   DDROP,EXIT   
0EFC                             ;   FILL        ( b u c -- )
0EFC                             ;               Fill u bytes of character c to area beginning at b.
0EFC                          ;*Macro unroll: mCOLON  4,'FILL',FILL
0EFC                          ;*Macro unroll:  mCODE 4, "FILL", FILL
0EFC                          ALIGN   2   
0EFC                FILL:        
0EFC                VVCODE:   .SET   $   
0EFC                VVLEN:    .SET   (4 & 01FH) / CELLL   
151E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
151E                VVNAME:   .SET   $   
151E   FC 0E 2C 15            DW   vvCODE,vvLINK   
1522                VVLINK:   .SET   $   
1522   04 46 49 4C 4C         DB   4,"FILL"   
0EFC                          .ORG   vvCODE   
0EFC   00                     NOP      
0EFD   CD E2 05               CALL   doLIST   
0F00   02 10 DE 0F 02 10      DW   SWAP,TOR,SWAP   
0F06   F2 0D 14 0F            DW   BRAN,FILL2   
0F0A                FILL1:       
0F0A   38 10 1E 0E F0 05 01 00 5C 01 DW   DDUP,CSTOR,DOLIT,1,PLUS   
0F14                FILL2:       
0F14   8E 06 0A 0F            DW   DONXT,FILL1   
0F18   2E 10 18 06            DW   DDROP,EXIT   
0F1C                             ;   -TRAILING   ( b u -- b u )
0F1C                             ;               Adjust the count to eliminate trailing white space.
0F1C                          ;*Macro unroll: mCOLON  9,'-TRAILING',DTRAI
0F1C                          ;*Macro unroll:  mCODE 9, "-TRAILING", DTRAI
0F1C                          ALIGN   2   
0F1C                DTRAI:       
0F1C                VVCODE:   .SET   $   
0F1C                VVLEN:    .SET   (9 & 01FH) / CELLL   
1510                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1510                VVNAME:   .SET   $   
1510   1C 0F 22 15            DW   vvCODE,vvLINK   
1514                VVLINK:   .SET   $   
1514   09 2D 54 52 41 49 4C 49 4E 47 DB   9,"-TRAILING"   
0F1C                          .ORG   vvCODE   
0F1C   00                     NOP      
0F1D   CD E2 05               CALL   doLIST   
0F20   DE 0F                  DW   TOR   
0F22   F2 0D 40 0F            DW   BRAN,DTRA2   
0F26                DTRA1:       
0F26   74 07 0A 10 2E 0E 5C 01 26 0E F2 01 DW   BLANK,OVER,RAT,PLUS,CAT,LESS   
0F32   E6 0D 40 0F            DW   QBRAN,DTRA2   
0F36   EC 0F F0 05 01 00 5C 01 18 06 DW   RFROM,DOLIT,1,PLUS,EXIT   ;adjusted count
0F40                DTRA2:       
0F40   8E 06 26 0F            DW   DONXT,DTRA1   
0F44   F0 05 00 00 18 06      DW   DOLIT,0,EXIT   ;count=0
0F4A                             ;   PACK$       ( b u a -- a )
0F4A                             ;               Build a counted string with u characters from b. Null fill.
0F4A                          ;*Macro unroll: mCOLON  5,'PACK$',PACKS
0F4A                          ;*Macro unroll:  mCODE 5, "PACK$", PACKS
0F4A                          ALIGN   2   
0F4A                PACKS:       
0F4A                VVCODE:   .SET   $   
0F4A                VVLEN:    .SET   (5 & 01FH) / CELLL   
1506                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1506                VVNAME:   .SET   $   
1506   4A 0F 14 15            DW   vvCODE,vvLINK   
150A                VVLINK:   .SET   $   
150A   05 50 41 43 4B 24      DB   5,"PACK$"   
0F4A                          .ORG   vvCODE   
0F4A   00                     NOP      
0F4B   CD E2 05               CALL   doLIST   
0F4E   84 0F FA 0F DE 0F      DW   ALGND,DUPP,TOR   ;strings only on cell boundary
0F54   0A 10 FA 0F F0 05 00 00 DW   OVER,DUPP,DOLIT,0   
0F5C   F0 05 02 00 58 02 FE 0F DW   DOLIT,CELLL,UMMOD,DROP   ;count mod cell
0F64   9E 01 0A 10 5C 01      DW   SUBB,OVER,PLUS   
0F6A   F0 05 00 00 02 10 0C 0E DW   DOLIT,0,SWAP,STORE   ;null fill cell
0F72   38 10 1E 0E F0 05 01 00 5C 01 DW   DDUP,CSTOR,DOLIT,1,PLUS   ;save count
0F7C   02 10 D2 0E EC 0F 18 06 DW   SWAP,CMOVE,RFROM,EXIT   ;move string
0F84                             ;   ALIGNED     ( b -- a )
0F84                             ;               Align address to the cell boundary.
0F84                          ;*Macro unroll: mCOLON  7,'ALIGNED', ALGND
0F84                          ;*Macro unroll:  mCODE 7, "ALIGNED", ALGND
0F84                          ALIGN   2   
0F84                ALGND:       
0F84                VVCODE:   .SET   $   
0F84                VVLEN:    .SET   (7 & 01FH) / CELLL   
14FA                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
14FA                VVNAME:   .SET   $   
14FA   84 0F 0A 15            DW   vvCODE,vvLINK   
14FE                VVLINK:   .SET   $   
14FE   07 41 4C 49 47 4E 45 44 DB   7,"ALIGNED"   
0F84                          .ORG   vvCODE   
0F84   00                     NOP      
0F85   CD E2 05               CALL   doLIST   
0F88   FA 0F F0 05 00 00 F0 05 02 00 DW   DUPP,DOLIT,0,DOLIT,CELLL   
0F92   58 02 FE 0F FA 0F      DW   UMMOD,DROP,DUPP   
0F98   E6 0D A4 0F            DW   QBRAN,ALGN1   
0F9C   F0 05 02 00 02 10 9E 01 DW   DoLIT,CELLL,SWAP,SUBB   
0FA4                ALGN1:       
0FA4   5C 01 18 06            DW   PLUS,EXIT   
0FA8   54 79 70 65 20 73 6F 6D 65 74 68 69 6E 67 0D 0A 00 GREETING:   .CSTR   "Type something\r\n"   
0FB9                             ; ERR_ABORT:	    .cstr	"ABORT" ;-01
0FB9                             ; ERR_ABORTDQ:    .cstr	"ABORT"";-02
0FB9                             ; ERR_STACKOF:    .cstr	"stack overflow";-03
0FB9                             ; ERR_STACKUF:	.cstr	"stack underflow"       ;-04
0FB9                             ; ERR_RETOF:    	.cstr	"return stack overflow" ;-05
0FB9                             ; ERR_RETUF:     	.cstr	"return stack underflow";-06
0FB9                             ; ERR_DONEST:   	.cstr	"do-loops nested too deeply during execution"   ;-07
0FB9                             ; ERR_DICTOF     	.cstr	"dictionary overflow"   ;-08
0FB9                             ; ERR_MEMADDR   	.cstr	"invalid memory address";-09
0FB9   64 69 76 69 73 69 6F 6E 20 62 79 20 7A 65 72 6F 00 ERR_DIVZERO:   .CSTR   "division by zero"   ;-10
0FCA   72 65 73 75 6C 74 20 6F 75 74 20 6F 66 20 72 61 6E 67 65 00 ERR_OUTOFRANGE:   .CSTR   "result out of range"   ;-11
0FDE                             ; ERR_MISMATCH    .cstr	"argument type mismatch";-12
0FDE                             ; ERR_UNDEFINED 	.cstr	"undefined word";-13
0FDE                             ; ERR_COMPONLY	.cstr	"interpreting a compile-only word"      ;-14
0FDE                             ; ERR_FORGET  	.cstr	"invalid FORGET";-15
0FDE                             ; ERR_ZEROSTR   	.cstr	"attempt to use zero-length string as a name"   ;-16
0FDE                             ; ERR_FORMAT  	.cstr	"pictured numeric output string overflow"       ;-17
0FDE                             ; ERR_PARSE     	.cstr	"parsed string overflow";-18
0FDE                             ; ERR_TOOLONG    	.cstr	"definition name too long"      ;-19
0FDE                             ; ERR_READONLY	.cstr	"write to a read-only location" ;-20
0FDE                             ; ERR_UNSUPPORTED .cstr	"unsupported operation" ;-21
0FDE                             ; ERR_UNSTRUCT	.cstr	"control structure mismatch"    ;-22
0FDE                             ; ERR_ADDRALIGN 	.cstr	"address alignment exception"   ;-23
0FDE                             ; ERR_NUMERIC     .cstr	"invalid numeric argument"      ;-24
0FDE                             ; ERR_IMBALANCE   .cstr	"return stack imbalance";-25
0FDE                             ; ERR_LOOPPARAM   .cstr	"loop parameters unavailable"   ;-26
0FDE                             ; ERR_RECURSION   .cstr	"invalid recursion"     ;-27
0FDE                             ; ERR_INTERRUPT   .cstr	"user interrupt";-28
0FDE                             ; ERR_NESTING    	.cstr	"compiler nesting"      ;-29
0FDE                             ; ERR_OBSOLETE    .cstr	"obsolescent feature"   ;-30
0FDE                             ; ERR_NONCREATE   .cstr	">BODY used on non-CREATEd definition"  ;-31
0FDE                             ; ERR_NAME    	.cstr	"invalid name argument (e.g., TO xxx)"  ;-32
0FDE                             ; ERR_BLOCKREAD   .cstr	"block read exception"  ;-33
0FDE                             ; ERR_BLOCKWRITE  .cstr	"block write exception" ;-34
0FDE                             ; ERR_BLOCKNUM    .cstr	"invalid block number"  ;-35
0FDE                             ; ERR_FILEPOS    	.cstr	"invalid file position" ;-36
0FDE                             ; ERR_FILEIO    	.cstr	"file I/O exception"    ;-37
0FDE                             ; ERR_FILEEXIST   .cstr	"non-existent file"     ;-38
0FDE                             ; ERR_FILEEOF    	.cstr	"unexpected end of file";-39
0FDE                             ; ERR_BASE    	.cstr	"invalid BASE for floating point conversion"    ;-40
0FDE                             ; ERR_PRECISION   .cstr	"loss of precision"     ;-41
0FDE                             ; ERR_FDIVZERO    .cstr	"floating-point divide by zero" ;-42
0FDE                             ; ERR_FRANGE    	.cstr	"floating-point result out of range"    ;-43
0FDE                             ; ERR_FSOF    	.cstr	"floating-point stack overflow" ;-44
0FDE                             ; ERR_FSUF    	.cstr	"floating-point stack underflow";-45
0FDE                             ; ERR_FINVALID    .cstr	"floating-point invalid argument"       ;-46
0FDE                             ; ERR_WORDLIST    .cstr	"compilation word list deleted" ;-47
0FDE                             ; ERR_POSTPONE    .cstr	"invalid POSTPONE"      ;-48
0FDE                             ; ERR_SEARCHOF    .cstr	"search-order overflow" ;-49
0FDE                             ; ERR_SEARCHUF    .cstr	"search-order underflow";-50
0FDE                             ; ERR_WORDLISTCHG .cstr	"compilation word list changed" ;-51
0FDE                             ; ERR_CONTROLOF   .cstr	"control-flow stack overflow"   ;-52
0FDE                             ; ERR_CONTROLUF   .cstr	"exception stack overflow"      ;-53
0FDE                             ; ERR_FPUF    	.cstr	"floating-point underflow"      ;-54
0FDE                             ; ERR_FPFAULT    	.cstr	"floating-point unidentified fault"     ;-55
0FDE                             ; ERR_QUIT    	.cstr	"QUIT"  ;-56
0FDE                             ; ERR_IO    	    .cstr	"exception in sending or receiving a character" ;-57
0FDE                             ; ERR_IF    	    .cstr	"[IF], [ELSE], or [THEN] exception"     ;-58
0FDE                             ;   >R          ( w -- )
0FDE                             ;               Push the data stack to the return stack.
0FDE                          ;*Macro unroll: mCODE	COMPO+2, '>R', ToR
0FDE                          ALIGN   2   
0FDE                TOR:         
0FDE                VVCODE:   .SET   $   
0FDE                VVLEN:    .SET   (COMPO+2 & 01FH) / CELLL   
14D2                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
14D2                VVNAME:   .SET   $   
14D2   DE 0F FE 14            DW   vvCODE,vvLINK   
14D6                VVLINK:   .SET   $   
14D6   22 3E 52               DB   COMPO+2,">R"   
0FDE                          .ORG   vvCODE   
0FDE   DD 2B                  DEC   IX   
0FE0   DD 70 00               LD   (IX+0),B   
0FE3   DD 2B                  DEC   IX   
0FE5   DD 71 00               LD   (IX+0),C   
0FE8   C1                     POP   BC   
0FE9                          ;*Macro unroll: 	mNEXT
0FE9   EB                     EX   DE,HL   
0FEA                          ;*Macro unroll:  mNEXTHL                         ; 34t
0FEA   FD E9                  JP   (IY)   ; 34t
0FEC                             ;   R>          ( -- w )
0FEC                             ;               Pop the return stack to the data stack.
0FEC                          ;*Macro unroll: mCODE	COMPO+2, 'R>', RFrom
0FEC                          ALIGN   2   
0FEC                RFROM:       
0FEC                VVCODE:   .SET   $   
0FEC                VVLEN:    .SET   (COMPO+2 & 01FH) / CELLL   
14AA                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
14AA                VVNAME:   .SET   $   
14AA   EC 0F D6 14            DW   vvCODE,vvLINK   
14AE                VVLINK:   .SET   $   
14AE   22 52 3E               DB   COMPO+2,"R>"   
0FEC                          .ORG   vvCODE   
0FEC   C5                     PUSH   BC   
0FED   DD 4E 00               LD   C,(IX+0)   
0FF0   DD 23                  INC   IX   
0FF2   DD 46 00               LD   B,(IX+0)   
0FF5   DD 23                  INC   IX   
0FF7                          ;*Macro unroll: 	mNEXT
0FF7   EB                     EX   DE,HL   
0FF8                          ;*Macro unroll:  mNEXTHL                         ; 34t
0FF8   FD E9                  JP   (IY)   ; 34t
0FFA                             ;   DUP         ( w -- w w )
0FFA                             ;               Duplicate the top stack item.
0FFA                          ;*Macro unroll: mCODE	3, 'DUP', DUPP
0FFA                          ALIGN   2   
0FFA                DUPP:        
0FFA                VVCODE:   .SET   $   
0FFA                VVLEN:    .SET   (3 & 01FH) / CELLL   
14A2                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
14A2                VVNAME:   .SET   $   
14A2   FA 0F AE 14            DW   vvCODE,vvLINK   
14A6                VVLINK:   .SET   $   
14A6   03 44 55 50            DB   3,"DUP"   
0FFA                          .ORG   vvCODE   
0FFA   C5                     PUSH   BC   
0FFB                          ;*Macro unroll:  mNEXT
0FFB   EB                     EX   DE,HL   
0FFC                          ;*Macro unroll:  mNEXTHL                         ; 34t
0FFC   FD E9                  JP   (IY)   ; 34t
0FFE                             ;   DROP	( x -- )			\ CORE
0FFE                             ;		Discard top stack item.
0FFE                          ;*Macro unroll: mCODE	4, 'DROP', DROP
0FFE                          ALIGN   2   
0FFE                DROP:        
0FFE                VVCODE:   .SET   $   
0FFE                VVLEN:    .SET   (4 & 01FH) / CELLL   
1498                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1498                VVNAME:   .SET   $   
1498   FE 0F A6 14            DW   vvCODE,vvLINK   
149C                VVLINK:   .SET   $   
149C   04 44 52 4F 50         DB   4,"DROP"   
0FFE                          .ORG   vvCODE   
0FFE   C1                     POP   BC   
0FFF                          ;*Macro unroll:  mNEXT
0FFF   EB                     EX   DE,HL   
1000                          ;*Macro unroll:  mNEXTHL                         ; 34t
1000   FD E9                  JP   (IY)   ; 34t
1002                             ;   SWAP        ( w1 w2 -- w2 w1 )
1002                             ;               Exchange top two stack items.
1002                          ;*Macro unroll: mCODE	4, 'SWAP', SWAP
1002                          ALIGN   2   
1002                SWAP:        
1002                VVCODE:   .SET   $   
1002                VVLEN:    .SET   (4 & 01FH) / CELLL   
148E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
148E                VVNAME:   .SET   $   
148E   02 10 9C 14            DW   vvCODE,vvLINK   
1492                VVLINK:   .SET   $   
1492   04 53 57 41 50         DB   4,"SWAP"   
1002                          .ORG   vvCODE   
1002   E1                     POP   HL   
1003   C5                     PUSH   BC   
1004   44                     LD   B,H   
1005   4D                     LD   C,L   
1006                          ;*Macro unroll: 	mNEXT
1006   EB                     EX   DE,HL   
1007                          ;*Macro unroll:  mNEXTHL                         ; 34t
1007   FD E9                  JP   (IY)   ; 34t
1009                             ;   OVER        ( w1 w2 -- w1 w2 w1 )
1009                             ;               Copy second stack item to top.
1009                          ;*Macro unroll: mCODE	4, 'OVER', OVER
1009                          ALIGN   2   
100A                OVER:        
100A                VVCODE:   .SET   $   
100A                VVLEN:    .SET   (4 & 01FH) / CELLL   
1484                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1484                VVNAME:   .SET   $   
1484   0A 10 92 14            DW   vvCODE,vvLINK   
1488                VVLINK:   .SET   $   
1488   04 4F 56 45 52         DB   4,"OVER"   
100A                          .ORG   vvCODE   
100A   E1                     POP   HL   
100B   E5                     PUSH   HL   
100C   C5                     PUSH   BC   
100D   44                     LD   B,H   
100E   4D                     LD   C,L   
100F                          ;*Macro unroll: 	mNEXT
100F   EB                     EX   DE,HL   
1010                          ;*Macro unroll:  mNEXTHL                         ; 34t
1010   FD E9                  JP   (IY)   ; 34t
1012                             ;   ?DUP        ( w -- w w | 0 )
1012                             ;               Dup tos if its is not zero.
1012                          ;*Macro unroll: mCOLON	4,'?DUP', QDUP
1012                          ;*Macro unroll:  mCODE 4, "?DUP", QDUP
1012                          ALIGN   2   
1012                QDUP:        
1012                VVCODE:   .SET   $   
1012                VVLEN:    .SET   (4 & 01FH) / CELLL   
147A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
147A                VVNAME:   .SET   $   
147A   12 10 88 14            DW   vvCODE,vvLINK   
147E                VVLINK:   .SET   $   
147E   04 3F 44 55 50         DB   4,"?DUP"   
1012                          .ORG   vvCODE   
1012   00                     NOP      
1013   CD E2 05               CALL   doLIST   
1016   FA 0F E6 0D 1E 10      DW   DUPP,QBRAN,QDUP1   
101C   FA 0F                  DW   DUPP   
101E                QDUP1:       
101E   18 06                  DW   EXIT   
1020                             ;   ROT         ( w1 w2 w3 -- w2 w3 w1 )
1020                             ;               Rot 3rd item to top.
1020                          ;*Macro unroll: mCOLON	3,'ROT', ROT
1020                          ;*Macro unroll:  mCODE 3, "ROT", ROT
1020                          ALIGN   2   
1020                ROT:         
1020                VVCODE:   .SET   $   
1020                VVLEN:    .SET   (3 & 01FH) / CELLL   
1472                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1472                VVNAME:   .SET   $   
1472   20 10 7E 14            DW   vvCODE,vvLINK   
1476                VVLINK:   .SET   $   
1476   03 52 4F 54            DB   3,"ROT"   
1020                          .ORG   vvCODE   
1020   00                     NOP      
1021   CD E2 05               CALL   doLIST   
1024   DE 0F 02 10 EC 0F 02 10 18 06 DW   ToR,SWAP,RFrom,SWAP,EXIT   
102E                             ;   2DROP       ( w w -- )
102E                             ;               Discard two items on stack.
102E                          ;*Macro unroll: mCOLON	5,'2DROP',DDROP
102E                          ;*Macro unroll:  mCODE 5, "2DROP", DDROP
102E                          ALIGN   2   
102E                DDROP:       
102E                VVCODE:   .SET   $   
102E                VVLEN:    .SET   (5 & 01FH) / CELLL   
1468                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1468                VVNAME:   .SET   $   
1468   2E 10 76 14            DW   vvCODE,vvLINK   
146C                VVLINK:   .SET   $   
146C   05 32 44 52 4F 50      DB   5,"2DROP"   
102E                          .ORG   vvCODE   
102E   00                     NOP      
102F   CD E2 05               CALL   doLIST   
1032   FE 0F FE 0F 18 06      DW   DROP,DROP,EXIT   
1038                             ;   2DUP        ( w1 w2 -- w1 w2 w1 w2 )
1038                             ;               Duplicate top two items.
1038                          ;*Macro unroll: mCOLON	4,'2DUP',DDUP
1038                          ;*Macro unroll:  mCODE 4, "2DUP", DDUP
1038                          ALIGN   2   
1038                DDUP:        
1038                VVCODE:   .SET   $   
1038                VVLEN:    .SET   (4 & 01FH) / CELLL   
145E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
145E                VVNAME:   .SET   $   
145E   38 10 6C 14            DW   vvCODE,vvLINK   
1462                VVLINK:   .SET   $   
1462   04 32 44 55 50         DB   4,"2DUP"   
1038                          .ORG   vvCODE   
1038   00                     NOP      
1039   CD E2 05               CALL   doLIST   
103C   0A 10 0A 10 18 06      DW   OVER,OVER,EXIT   
1042                             ;   2SWAP        ( w1 w2 w3 w4 -- w3 w4 w1 w2 )
1042                             ;               Exchange top two items.
1042                          ;*Macro unroll: mCOLON	5,'2SWAP',TwoSWAP
1042                          ;*Macro unroll:  mCODE 5, "2SWAP", TwoSWAP
1042                          ALIGN   2   
1042                TWOSWAP:      
1042                VVCODE:   .SET   $   
1042                VVLEN:    .SET   (5 & 01FH) / CELLL   
1454                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1454                VVNAME:   .SET   $   
1454   42 10 62 14            DW   vvCODE,vvLINK   
1458                VVLINK:   .SET   $   
1458   05 32 53 57 41 50      DB   5,"2SWAP"   
1042                          .ORG   vvCODE   
1042   00                     NOP      
1043   CD E2 05               CALL   doLIST   
1046   20 10 DE 0F 20 10 EC 0F 18 06 DW   ROT,ToR,ROT,RFrom,EXIT   
1050                             ;   PICK        ( ... +n -- ... w )
1050                             ;               Copy the nth stack item to tos.
1050                          ;*Macro unroll: mCOLON  4,'PICK',PICK
1050                          ;*Macro unroll:  mCODE 4, "PICK", PICK
1050                          ALIGN   2   
1050                PICK:        
1050                VVCODE:   .SET   $   
1050                VVLEN:    .SET   (4 & 01FH) / CELLL   
144A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
144A                VVNAME:   .SET   $   
144A   50 10 58 14            DW   vvCODE,vvLINK   
144E                VVLINK:   .SET   $   
144E   04 50 49 43 4B         DB   4,"PICK"   
1050                          .ORG   vvCODE   
1050   00                     NOP      
1051   CD E2 05               CALL   doLIST   
1054   F0 05 01 00 5C 01 82 03 DW   DOLIT,1,PLUS,CELLS   
105C   48 0E 5C 01 16 0E 18 06 DW   SPAT,PLUS,AT,EXIT   
1064                             ;   DEPTH       ( -- n )
1064                             ;               Return the depth of the data stack.
1064                          ;*Macro unroll: mCOLON	5,'DEPTH',DEPTH
1064                          ;*Macro unroll:  mCODE 5, "DEPTH", DEPTH
1064                          ALIGN   2   
1064                DEPTH:       
1064                VVCODE:   .SET   $   
1064                VVLEN:    .SET   (5 & 01FH) / CELLL   
1440                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1440                VVNAME:   .SET   $   
1440   64 10 4E 14            DW   vvCODE,vvLINK   
1444                VVLINK:   .SET   $   
1444   05 44 45 50 54 48      DB   5,"DEPTH"   
1064                          .ORG   vvCODE   
1064   00                     NOP      
1065   CD E2 05               CALL   doLIST   
1068   48 0E 7A 10 16 0E 02 10 9E 01 DW   SPAT,SZero,AT,SWAP,SUBB   
1072   F0 05 02 00 04 03 18 06 DW   DoLIT,CELLL,Slash,EXIT   
107A                             ;   SP0         ( -- a )
107A                             ;               Pointer to bottom of the data stack.
107A                          ;*Macro unroll: mUSER   3,'SP0',SZERO
107A                          ;*Macro unroll: 	mCODE 3, "SP0", SZERO
107A                          ALIGN   2   
107A                SZERO:       
107A                VVCODE:   .SET   $   
107A                VVLEN:    .SET   (3 & 01FH) / CELLL   
1438                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1438                VVNAME:   .SET   $   
1438   7A 10 44 14            DW   vvCODE,vvLINK   
143C                VVLINK:   .SET   $   
143C   03 53 50 30            DB   3,"SP0"   
107A                          .ORG   vvCODE   
107A   00                     NOP      
107B   CD E2 05               CALL   doLIST   
107E   08 06 00 00            DW   DoUSE,vvUSER   
1082                VVUSER:   .SET   vvUSER + CELLL   
1082                             ;   RP0         ( -- a )
1082                             ;               Pointer to bottom of the return stack.
1082                          ;*Macro unroll: mUSER   3,'RP0',RZERO
1082                          ;*Macro unroll: 	mCODE 3, "RP0", RZERO
1082                          ALIGN   2   
1082                RZERO:       
1082                VVCODE:   .SET   $   
1082                VVLEN:    .SET   (3 & 01FH) / CELLL   
1430                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1430                VVNAME:   .SET   $   
1430   82 10 3C 14            DW   vvCODE,vvLINK   
1434                VVLINK:   .SET   $   
1434   03 52 50 30            DB   3,"RP0"   
1082                          .ORG   vvCODE   
1082   00                     NOP      
1083   CD E2 05               CALL   doLIST   
1086   08 06 02 00            DW   DoUSE,vvUSER   
108A                VVUSER:   .SET   vvUSER + CELLL   
108A                             ;   '?KEY       ( -- a )
108A                             ;               Execution vector of ?KEY.
108A                          ;*Macro unroll: hUSER   5,"'?KEY",TQKEY
108A                          ;*Macro unroll: 	hCODE 5, "'?KEY", TQKEY
108A                          ALIGN   2   
108A                TQKEY:       
108A   00                     NOP      
108B   CD E2 05               CALL   doLIST   
108E   08 06 04 00            DW   DoUSE,vvUSER   
1092                VVUSER:   .SET   vvUSER + CELLL   
1092                             ;   'EMIT       ( -- a )
1092                             ;               Execution vector of EMIT.
1092                          ;*Macro unroll: hUSER   5,"'EMIT",TEMIT
1092                          ;*Macro unroll: 	hCODE 5, "'EMIT", TEMIT
1092                          ALIGN   2   
1092                TEMIT:       
1092   00                     NOP      
1093   CD E2 05               CALL   doLIST   
1096   08 06 06 00            DW   DoUSE,vvUSER   
109A                VVUSER:   .SET   vvUSER + CELLL   
109A                             ;   'EXPECT     ( -- a )
109A                             ;               Execution vector of EXPECT.
109A                          ;*Macro unroll: hUSER   7,"'EXPECT",TEXPE
109A                          ;*Macro unroll: 	hCODE 7, "'EXPECT", TEXPE
109A                          ALIGN   2   
109A                TEXPE:       
109A   00                     NOP      
109B   CD E2 05               CALL   doLIST   
109E   08 06 08 00            DW   DoUSE,vvUSER   
10A2                VVUSER:   .SET   vvUSER + CELLL   
10A2                             ;   'TAP        ( -- a )
10A2                             ;               Execution vector of TAP.
10A2                          ;*Macro unroll: hUSER   4,"'TAP",TTAP
10A2                          ;*Macro unroll: 	hCODE 4, "'TAP", TTAP
10A2                          ALIGN   2   
10A2                TTAP:        
10A2   00                     NOP      
10A3   CD E2 05               CALL   doLIST   
10A6   08 06 0A 00            DW   DoUSE,vvUSER   
10AA                VVUSER:   .SET   vvUSER + CELLL   
10AA                             ;   'ECHO       ( -- a )
10AA                             ;               Execution vector of ECHO.
10AA                          ;*Macro unroll: hUSER   5,"'ECHO",TECHO
10AA                          ;*Macro unroll: 	hCODE 5, "'ECHO", TECHO
10AA                          ALIGN   2   
10AA                TECHO:       
10AA   00                     NOP      
10AB   CD E2 05               CALL   doLIST   
10AE   08 06 0C 00            DW   DoUSE,vvUSER   
10B2                VVUSER:   .SET   vvUSER + CELLL   
10B2                             ;   'PROMPT     ( -- a )
10B2                             ;               Execution vector of PROMPT.
10B2                          ;*Macro unroll: hUSER   7,"'PROMPT",TPROM
10B2                          ;*Macro unroll: 	hCODE 7, "'PROMPT", TPROM
10B2                          ALIGN   2   
10B2                TPROM:       
10B2   00                     NOP      
10B3   CD E2 05               CALL   doLIST   
10B6   08 06 0E 00            DW   DoUSE,vvUSER   
10BA                VVUSER:   .SET   vvUSER + CELLL   
10BA                             ;   BASE        ( -- a )
10BA                             ;               Storage of the radix base for numeric I/O.
10BA                          ;*Macro unroll: mUSER   4,'BASE',BASE
10BA                          ;*Macro unroll: 	mCODE 4, "BASE", BASE
10BA                          ALIGN   2   
10BA                BASE:        
10BA                VVCODE:   .SET   $   
10BA                VVLEN:    .SET   (4 & 01FH) / CELLL   
1426                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1426                VVNAME:   .SET   $   
1426   BA 10 34 14            DW   vvCODE,vvLINK   
142A                VVLINK:   .SET   $   
142A   04 42 41 53 45         DB   4,"BASE"   
10BA                          .ORG   vvCODE   
10BA   00                     NOP      
10BB   CD E2 05               CALL   doLIST   
10BE   08 06 10 00            DW   DoUSE,vvUSER   
10C2                VVUSER:   .SET   vvUSER + CELLL   
10C2                             ;   tmp         ( -- a )
10C2                             ;               A temporary storage location used in parse and find.
10C2                          ;*Macro unroll: mUSER   COMPO+3,'tmp',TEMP
10C2                          ;*Macro unroll: 	mCODE COMPO+3, "tmp", TEMP
10C2                          ALIGN   2   
10C2                TEMP:        
10C2                VVCODE:   .SET   $   
10C2                VVLEN:    .SET   (COMPO+3 & 01FH) / CELLL   
13FE                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
13FE                VVNAME:   .SET   $   
13FE   C2 10 2A 14            DW   vvCODE,vvLINK   
1402                VVLINK:   .SET   $   
1402   23 74 6D 70            DB   COMPO+3,"tmp"   
10C2                          .ORG   vvCODE   
10C2   00                     NOP      
10C3   CD E2 05               CALL   doLIST   
10C6   08 06 12 00            DW   DoUSE,vvUSER   
10CA                VVUSER:   .SET   vvUSER + CELLL   
10CA                             ;   SPAN        ( -- a )
10CA                             ;               Hold character count received by EXPECT.
10CA                          ;*Macro unroll: hUSER   4,'SPAN',SPAN
10CA                          ;*Macro unroll: 	hCODE 4, "SPAN", SPAN
10CA                          ALIGN   2   
10CA                SPAN:        
10CA   00                     NOP      
10CB   CD E2 05               CALL   doLIST   
10CE   08 06 14 00            DW   DoUSE,vvUSER   
10D2                VVUSER:   .SET   vvUSER + CELLL   
10D2                             ;   >IN         ( -- a )
10D2                             ;               Hold the character pointer while parsing input stream.
10D2                          ;*Macro unroll: mUSER   3,'>IN',INN
10D2                          ;*Macro unroll: 	mCODE 3, ">IN", INN
10D2                          ALIGN   2   
10D2                INN:         
10D2                VVCODE:   .SET   $   
10D2                VVLEN:    .SET   (3 & 01FH) / CELLL   
13F6                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
13F6                VVNAME:   .SET   $   
13F6   D2 10 02 14            DW   vvCODE,vvLINK   
13FA                VVLINK:   .SET   $   
13FA   03 3E 49 4E            DB   3,">IN"   
10D2                          .ORG   vvCODE   
10D2   00                     NOP      
10D3   CD E2 05               CALL   doLIST   
10D6   08 06 16 00            DW   DoUSE,vvUSER   
10DA                VVUSER:   .SET   vvUSER + CELLL   
10DA                             ;   #TIB        ( -- a )
10DA                             ;               Hold the current count and address of the terminal input buffer.
10DA                          ;*Macro unroll: hUSER   4,'#TIB',NTIB
10DA                          ;*Macro unroll: 	hCODE 4, "#TIB", NTIB
10DA                          ALIGN   2   
10DA                NTIB:        
10DA   00                     NOP      
10DB   CD E2 05               CALL   doLIST   
10DE   08 06 18 00            DW   DoUSE,vvUSER   
10E2                VVUSER:   .SET   vvUSER + CELLL   
10E2                VVUSER:   .SET   vvUSER + CELLL   
10E2                             ;   CSP         ( -- a )
10E2                             ;               Hold the stack pointer for error checking.
10E2                          ;*Macro unroll: hUSER   3,'CSP',CSP
10E2                          ;*Macro unroll: 	hCODE 3, "CSP", CSP
10E2                          ALIGN   2   
10E2                CSP:         
10E2   00                     NOP      
10E3   CD E2 05               CALL   doLIST   
10E6   08 06 1C 00            DW   DoUSE,vvUSER   
10EA                VVUSER:   .SET   vvUSER + CELLL   
10EA                             ;   'EVAL       ( -- a )
10EA                             ;               Execution vector of EVAL.
10EA                          ;*Macro unroll: hUSER   5,"'EVAL",TEVAL
10EA                          ;*Macro unroll: 	hCODE 5, "'EVAL", TEVAL
10EA                          ALIGN   2   
10EA                TEVAL:       
10EA   00                     NOP      
10EB   CD E2 05               CALL   doLIST   
10EE   08 06 1E 00            DW   DoUSE,vvUSER   
10F2                VVUSER:   .SET   vvUSER + CELLL   
10F2                             ;   'NUMBER     ( -- a )
10F2                             ;               Execution vector of NUMBER?.
10F2                          ;*Macro unroll: hUSER   7,"'NUMBER",TNUMB
10F2                          ;*Macro unroll: 	hCODE 7, "'NUMBER", TNUMB
10F2                          ALIGN   2   
10F2                TNUMB:       
10F2   00                     NOP      
10F3   CD E2 05               CALL   doLIST   
10F6   08 06 20 00            DW   DoUSE,vvUSER   
10FA                VVUSER:   .SET   vvUSER + CELLL   
10FA                             ;   HLD         ( -- a )
10FA                             ;               Hold a pointer in building a numeric output string.
10FA                          ;*Macro unroll: hUSER   3,'HLD',HLD
10FA                          ;*Macro unroll: 	hCODE 3, "HLD", HLD
10FA                          ALIGN   2   
10FA                HLD:         
10FA   00                     NOP      
10FB   CD E2 05               CALL   doLIST   
10FE   08 06 22 00            DW   DoUSE,vvUSER   
1102                VVUSER:   .SET   vvUSER + CELLL   
1102                             ;   HANDLER     ( -- a )
1102                             ;               Hold the return stack pointer for error handling.
1102                          ;*Macro unroll: hUSER   7,'HANDLER',HANDL
1102                          ;*Macro unroll: 	hCODE 7, "HANDLER", HANDL
1102                          ALIGN   2   
1102                HANDL:       
1102   00                     NOP      
1103   CD E2 05               CALL   doLIST   
1106   08 06 24 00            DW   DoUSE,vvUSER   
110A                VVUSER:   .SET   vvUSER + CELLL   
110A                             ;   CONTEXT     ( -- a )
110A                             ;               A area to specify vocabulary search order.
110A                          ;*Macro unroll: hUSER   7,'CONTEXT',CNTXT
110A                          ;*Macro unroll: 	hCODE 7, "CONTEXT", CNTXT
110A                          ALIGN   2   
110A                CNTXT:       
110A   00                     NOP      
110B   CD E2 05               CALL   doLIST   
110E   08 06 26 00            DW   DoUSE,vvUSER   
1112                VVUSER:   .SET   vvUSER + CELLL   
1112                VVUSER:   .SET   vvUSER + VOCSS * CELLL   ;vocabulary stack
1112                             ;   CURRENT     ( -- a )
1112                             ;               Point to the vocabulary to be extended.
1112                          ;*Macro unroll: hUSER   7,'CURRENT',CRRNT
1112                          ;*Macro unroll: 	hCODE 7, "CURRENT", CRRNT
1112                          ALIGN   2   
1112                CRRNT:       
1112   00                     NOP      
1113   CD E2 05               CALL   doLIST   
1116   08 06 38 00            DW   DoUSE,vvUSER   
111A                VVUSER:   .SET   vvUSER + CELLL   
111A                VVUSER:   .SET   vvUSER + CELLL   ;vocabulary link pointer
111A                             ;   CP          ( -- a )
111A                             ;               Point to the top of the code dictionary.
111A                          ;*Macro unroll: hUSER   2,'CP',CP
111A                          ;*Macro unroll: 	hCODE 2, "CP", CP
111A                          ALIGN   2   
111A                CP:          
111A   00                     NOP      
111B   CD E2 05               CALL   doLIST   
111E   08 06 3C 00            DW   DoUSE,vvUSER   
1122                VVUSER:   .SET   vvUSER + CELLL   
1122                             ;   NP          ( -- a )
1122                             ;               Point to the bottom of the name dictionary.
1122                          ;*Macro unroll: hUSER   2,'NP',NP
1122                          ;*Macro unroll: 	hCODE 2, "NP", NP
1122                          ALIGN   2   
1122                NP:          
1122   00                     NOP      
1123   CD E2 05               CALL   doLIST   
1126   08 06 3E 00            DW   DoUSE,vvUSER   
112A                VVUSER:   .SET   vvUSER + CELLL   
112A                             ;   LAST        ( -- a )
112A                             ;               Point to the last name in the name dictionary.
112A                          ;*Macro unroll: mUSER   4,'LAST',LAST
112A                          ;*Macro unroll: 	mCODE 4, "LAST", LAST
112A                          ALIGN   2   
112A                LAST:        
112A                VVCODE:   .SET   $   
112A                VVLEN:    .SET   (4 & 01FH) / CELLL   
13EC                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
13EC                VVNAME:   .SET   $   
13EC   2A 11 FA 13            DW   vvCODE,vvLINK   
13F0                VVLINK:   .SET   $   
13F0   04 4C 41 53 54         DB   4,"LAST"   
112A                          .ORG   vvCODE   
112A   00                     NOP      
112B   CD E2 05               CALL   doLIST   
112E   08 06 40 00            DW   DoUSE,vvUSER   
1132                VVUSER:   .SET   vvUSER + CELLL   
1132                             ;   forth       ( -- a )
1132                             ;               Point to the last name in the name dictionary.
1132                          ;*Macro unroll: hUSER   5,'forth',VFRTH
1132                          ;*Macro unroll: 	hCODE 5, "forth", VFRTH
1132                          ALIGN   2   
1132                VFRTH:       
1132   00                     NOP      
1133   CD E2 05               CALL   doLIST   
1136   08 06 42 00            DW   DoUSE,vvUSER   
113A                VVUSER:   .SET   vvUSER + CELLL   
113A                             ;   _TYPE       ( b u -- )
113A                             ;               Display a string. Filter non-printing characters.
113A                          ;*Macro unroll: mCOLON  5,'_TYPE',UTYPE
113A                          ;*Macro unroll:  mCODE 5, "_TYPE", UTYPE
113A                          ALIGN   2   
113A                UTYPE:       
113A                VVCODE:   .SET   $   
113A                VVLEN:    .SET   (5 & 01FH) / CELLL   
13E2                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
13E2                VVNAME:   .SET   $   
13E2   3A 11 F0 13            DW   vvCODE,vvLINK   
13E6                VVLINK:   .SET   $   
13E6   05 5F 54 59 50 45      DB   5,"_TYPE"   
113A                          .ORG   vvCODE   
113A   00                     NOP      
113B   CD E2 05               CALL   doLIST   
113E   DE 0F                  DW   TOR   ;start count down loop
1140   F2 0D 52 11            DW   BRAN,UTYP2   ;skip first pass
1144                UTYP1:       
1144   FA 0F 26 0E 7E 07 C0 0B DW   DUPP,CAT,TCHAR,EMIT   ;display only printable
114C   F0 05 01 00 5C 01      DW   DOLIT,1,PLUS   ;increment address
1152                UTYP2:       
1152   8E 06 44 11            DW   DONXT,UTYP1   ;loop till done
1156   FE 0F 18 06            DW   DROP,EXIT   
115A                             ;   dm+         ( a u -- a )
115A                             ;               Dump u bytes from , leaving a+u on the stack.
115A                          ;*Macro unroll: hCOLON  3,'dm+',DMP
115A                          ;*Macro unroll:  hCODE 3, "dm+", DMP
115A                          ALIGN   2   
115A                DMP:         
115A   00                     NOP      
115B   CD E2 05               CALL   doLIST   
115E   0A 10 F0 05 04 00 82 0C DW   OVER,DOLIT,4,UDOTR   ;display address
1166   F0 0B DE 0F            DW   SPACE,TOR   ;start count down loop
116A   F2 0D 7E 11            DW   BRAN,PDUM2   ;skip first pass
116E                PDUM1:       
116E   FA 0F 26 0E F0 05 03 00 82 0C DW   DUPP,CAT,DOLIT,3,UDOTR   ;display numeric data
1178   F0 05 01 00 5C 01      DW   DOLIT,1,PLUS   ;increment address
117E                PDUM2:       
117E   8E 06 6E 11            DW   DONXT,PDUM1   ;loop till done
1182   18 06                  DW   EXIT   
1184                             ;   DUMP        ( a u -- )
1184                             ;               Dump u bytes from a, in a formatted manner.
1184                          ;*Macro unroll: mCOLON  4,'DUMP',DUMP
1184                          ;*Macro unroll:  mCODE 4, "DUMP", DUMP
1184                          ALIGN   2   
1184                DUMP:        
1184                VVCODE:   .SET   $   
1184                VVLEN:    .SET   (4 & 01FH) / CELLL   
13D8                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
13D8                VVNAME:   .SET   $   
13D8   84 11 E6 13            DW   vvCODE,vvLINK   
13DC                VVLINK:   .SET   $   
13DC   04 44 55 4D 50         DB   4,"DUMP"   
1184                          .ORG   vvCODE   
1184   00                     NOP      
1185   CD E2 05               CALL   doLIST   
1188   BA 10 16 0E DE 0F 58 07 DW   BASE,AT,TOR,HEX   ;save radix, set hex
1190   F0 05 10 00 04 03      DW   DOLIT,16,SLASH   ;change count to lines
1196   DE 0F                  DW   TOR   ;start count down loop
1198                DUMP1:       
1198   30 0C F0 05 10 00 38 10 5A 11 DW   CR,DOLIT,16,DDUP,DMP   ;display numeric
11A2   20 10 20 10            DW   ROT,ROT   
11A6   F0 0B F0 0B 3A 11      DW   SPACE,SPACE,UTYPE   ;display printable characters
11AC   CC 0B 66 01            DW   NUFQ,INVER   ;user control
11B0   E6 0D BC 11            DW   QBRAN,DUMP2   
11B4   8E 06 98 11            DW   DONXT,DUMP1   ;loop till done
11B8   F2 0D C0 11            DW   BRAN,DUMP3   
11BC                DUMP2:       
11BC   EC 0F FE 0F            DW   RFROM,DROP   ;cleanup loop stack, early exit
11C0                DUMP3:       
11C0   FE 0F EC 0F BA 10 0C 0E DW   DROP,RFROM,BASE,STORE   ;restore radix
11C8   18 06                  DW   EXIT   
11CA                             ;   .S          ( ... -- ... )
11CA                             ;               Display the contents of the data stack.
11CA                          ;*Macro unroll: mCOLON  2,'.S',DOTS
11CA                          ;*Macro unroll:  mCODE 2, ".S", DOTS
11CA                          ALIGN   2   
11CA                DOTS:        
11CA                VVCODE:   .SET   $   
11CA                VVLEN:    .SET   (2 & 01FH) / CELLL   
13D0                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
13D0                VVNAME:   .SET   $   
13D0   CA 11 DC 13            DW   vvCODE,vvLINK   
13D4                VVLINK:   .SET   $   
13D4   02 2E 53               DB   2,".S"   
11CA                          .ORG   vvCODE   
11CA   00                     NOP      
11CB   CD E2 05               CALL   doLIST   
11CE   30 0C 64 10            DW   CR,DEPTH   ;stack depth
11D2   DE 0F                  DW   TOR   ;start count down loop
11D4   F2 0D DE 11            DW   BRAN,DOTS2   ;skip first pass
11D8                DOTS1:       
11D8   2E 0E 50 10 AA 0C      DW   RAT,PICK,DOT   ;index stack, display contents
11DE                DOTS2:       
11DE   8E 06 D8 11            DW   DONXT,DOTS1   ;loop till done
11E2                          ;*Macro unroll:  mDSTR DOTQP,' <sp'
11E2   62 0C                  DW   DOTQP   
11E4                VVLEN:    .SET   $   
11E4   00 20 3C 73 70         DB   0," <sp"   
11E9                VVCODE:   .SET   $   
11E4                          .ORG   vvLEN   
11E4   04                     DB   vvCODE - vvLEN - 1   
11E9                          .ORG   vvCODE   
11E9   18 06                  DW   EXIT   
11EB                             ;   !CSP        ( -- )
11EB                             ;               Save stack pointer in CSP for error checking.
11EB                             ;   ?CSP        ( -- )
11EB                             ;               Abort if stack pointer differs from that saved in CSP.
11EB                             ;   >NAME       ( ca -- na | F )
11EB                             ;               Convert code address to a name address.
11EB                             ;   .ID         ( na -- )
11EB                             ;               Display the name at address.
11EB                             ;   SEE         ( -- ; <string> )
11EB                             ;               A simple decompiler.
11EB                             ;   WORDS       ( -- )
11EB                             ;               Display the names in the context vocabulary.
11EB                             ;   COLD        ( -- )
11EB                             ;               The hilevel cold start sequence.
2000                          .ORG   END_ROM   
2000                          .ORG   START_RAM   
2000                          IF   TESTMODE   
                    TESTS_START:      
                              LD   HL,DONE   
                              CALL   PRINTSZ   
                              HALT      
                    DONE:     .CSTR   "Done!\r\n"   
2000                          ENDIF      
2000                          DS   DTS   ; data stack size
2200                SPP:         ; SP0 grows down
2200                TIBB:        
2200                          DS   RTS   ; return stack size
2400                RPP:         ; RP0 grows down (into TIBB)
2400                UPP:         
2400   00 00        VARSZERO:   DW   0   ; SP0
2402   00 00        VARRZERO:   DW   0   ; RP0
2404   00 00        VARTQKEY:   DW   0   ; '?KEY
2406   00 00        VARTEMIT:   DW   0   ; 'EMIT
2408   00 00        VARTEXPE:   DW   0   ; 'EXPECT
240A   00 00        VARTTAP:   DW   0   ; 'TAP
240C   00 00        VARTECHO:   DW   0   ; 'ECHO
240E   00 00        VARTPROM:   DW   0   ; 'PROMPT
2410   00 00        VARBASE:   DW   0   ; BASE
2412   00 00        VARTEMP:   DW   0   ; tmp
2414   00 00        VARSPAN:   DW   0   ; SPAN
2416   00 00        VARINN:   DW   0   ; >IN
2418   00 00        VARNTIB:   DW   0   ; #TIB
241A   00 00        VARTIB:   DW   0   ; TIB
241C   00 00        VARCSP:   DW   0   ; CSP
241E   00 00        VARTEVAL:   DW   0   ; 'EVAL
2420   00 00        VARTNUMB:   DW   0   ; 'NUMBER
2422   00 00        VARHLD:   DW   0   ; HLD
2424   00 00        VARHANDL:   DW   0   ; HANDLER
2426   00 00        VARCNTXT:   DW   0   ; CONTEXT pointer
2428   00 00        VARVOCABS:   DW   0   ; vocabulary stack    ???
242A   00 00        VARCRRNT:   DW   0   ; CURRENT pointer
242C   00 00        VARVOCABLP:   DW   0   ; vocabulary link pointer ???
242E   00 00        VARCP:    DW   0   ; CP  for runing phase on RAM
2430   00 00        VARNP:    DW   0   ; NP  for runing phase on RAM
2432   00 00        VARLAST:   DW   0   ; LAST
2434   00 00        VARVFRTH:   DW   0   ; FORTH   \ mullti-user ???
2436   00 00        VARVOCABL:   DW   0   ; vocabulary link       ???
2438   00 00        SERINPTR:   DW   0   
243A   00 00        SERRDPTR:   DW   0   
243C   00 00        SERBUFUSED:   DW   0   
243E                SERBUF:   DS   SER_BUFSIZE   
247D                CPP:         ; grows up
FFFE                          .ORG   END_RAM - 2   
FFFE                NPP:         ; grows down
FFFE                          .END      


TESTMODE:           0000 DEFINED AT LINE 3
MEM_SIZE:           10000 DEFINED AT LINE 1 IN constants.z80
                    > USED AT LINE 3 IN constants.z80
                    > USED AT LINE 12 IN constants.z80
ROM_SIZE:           2000 DEFINED AT LINE 2 IN constants.z80
                    > USED AT LINE 3 IN constants.z80
                    > USED AT LINE 6 IN constants.z80
                    > USED AT LINE 8 IN constants.z80
RAM_SIZE:           E000 DEFINED AT LINE 3 IN constants.z80
                    > USED AT LINE 9 IN constants.z80
START_ROM:          0000 DEFINED AT LINE 5 IN constants.z80
                    > USED AT LINE 8
END_ROM:            2000 DEFINED AT LINE 6 IN constants.z80
                    > USED AT LINE 4 IN word.macro.z80
                    > USED AT LINE 62
START_RAM:          2000 DEFINED AT LINE 8 IN constants.z80
                    > USED AT LINE 9 IN constants.z80
                    > USED AT LINE 63
END_RAM:            10000 DEFINED AT LINE 9 IN constants.z80
                    > USED AT LINE 44 IN variables.z80
BM:                 0000 DEFINED AT LINE 11 IN constants.z80
                    > USED AT LINE 5 IN constants.z80
                    > USED AT LINE 6 IN constants.z80
                    > USED AT LINE 8 IN constants.z80
                    > USED AT LINE 12 IN constants.z80
EM:                 10000 DEFINED AT LINE 12 IN constants.z80
COMPO:              0020 DEFINED AT LINE 14 IN constants.z80
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
IMEDD:              0040 DEFINED AT LINE 15 IN constants.z80
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 133 IN core-compiler.z80
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
MASKK:              001F DEFINED AT LINE 16 IN constants.z80
CHARR:              0001 DEFINED AT LINE 18 IN constants.z80
CELLL:              0002 DEFINED AT LINE 19 IN constants.z80
                    > USED AT LINE 39 IN constants.z80
                    > USED AT LINE 40 IN constants.z80
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 333 IN core-alu.z80
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 338 IN core-alu.z80
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 343 IN core-alu.z80
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 145 IN core-interpret.z80
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 184 IN core-memory.z80
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 196 IN core-memory.z80
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 90 IN core-stacks.z80
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 33
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 33
                    > USED AT LINE 63
                    > USED AT LINE 63
                    > USED AT LINE 63
                    > USED AT LINE 63
                    > USED AT LINE 63
                    > USED AT LINE 63
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 33
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 33
                    > USED AT LINE 63
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 33
                    > USED AT LINE 63
                    > USED AT LINE 65 IN core-user.z80
                    > USED AT LINE 63
                    > USED AT LINE 63
                    > USED AT LINE 63
                    > USED AT LINE 63
                    > USED AT LINE 63
                    > USED AT LINE 63
                    > USED AT LINE 96 IN core-user.z80
                    > USED AT LINE 63
                    > USED AT LINE 102 IN core-user.z80
                    > USED AT LINE 63
                    > USED AT LINE 63
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 33
                    > USED AT LINE 63
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
BASEE:              000A DEFINED AT LINE 20 IN constants.z80
VOCSS:              0008 DEFINED AT LINE 21 IN constants.z80
                    > USED AT LINE 96 IN core-user.z80
MAXCHAR:            00FF DEFINED AT LINE 23 IN constants.z80
MAXSIGNED:          7FFF DEFINED AT LINE 24 IN constants.z80
MAXUNSIGNED:        FFFF DEFINED AT LINE 25 IN constants.z80
MAXNEGATIVE:        8000 DEFINED AT LINE 26 IN constants.z80
BKSPP:              0008 DEFINED AT LINE 28 IN constants.z80
                    > USED AT LINE 164 IN core-io.z80
                    > USED AT LINE 166 IN core-io.z80
                    > USED AT LINE 181 IN core-io.z80
LFF:                000A DEFINED AT LINE 29 IN constants.z80
CRR:                000D DEFINED AT LINE 30 IN constants.z80
                    > USED AT LINE 102 IN core-io.z80
SPACEE:             0020 DEFINED AT LINE 31 IN constants.z80
                    > USED AT LINE 77 IN core-format.z80
                    > USED AT LINE 84 IN core-format.z80
TIC:                0027 DEFINED AT LINE 32 IN constants.z80
MINUSS:             002D DEFINED AT LINE 33 IN constants.z80
                    > USED AT LINE 44 IN core-format.z80
UNDERSC:            005F DEFINED AT LINE 34 IN constants.z80
CALLL:              CD00 DEFINED AT LINE 36 IN constants.z80
                    > USED AT LINE 119 IN core-compiler.z80
US:                 003A DEFINED AT LINE 38 IN constants.z80
                    > USED AT LINE 21
RTS:                0200 DEFINED AT LINE 39 IN constants.z80
                    > USED AT LINE 5 IN variables.z80
DTS:                0200 DEFINED AT LINE 40 IN constants.z80
                    > USED AT LINE 2 IN variables.z80
RET_STACK_SIZE:     0100 DEFINED AT LINE 42 IN constants.z80
DATA_STACK_SIZE:    0100 DEFINED AT LINE 43 IN constants.z80
INT_ADDR:           0038 DEFINED AT LINE 45 IN constants.z80
                    > USED AT LINE 1 IN interrupt.z80
SER_BUFSIZE:        003F DEFINED AT LINE 46 IN constants.z80
                    > USED AT LINE 12 IN interrupt.z80
                    > USED AT LINE 20 IN interrupt.z80
                    > USED AT LINE 25 IN serial.z80
                    > USED AT LINE 41 IN variables.z80
SER_FULLSIZE:       0030 DEFINED AT LINE 47 IN constants.z80
                    > USED AT LINE 29 IN interrupt.z80
SER_EMPTYSIZE:      0005 DEFINED AT LINE 48 IN constants.z80
                    > USED AT LINE 34 IN serial.z80
RTS_HIGH:           00D6 DEFINED AT LINE 50 IN constants.z80
                    > USED AT LINE 31 IN interrupt.z80
RTS_LOW:            0096 DEFINED AT LINE 51 IN constants.z80
                    > USED AT LINE 11 IN serial.z80
                    > USED AT LINE 36 IN serial.z80
TRUEE:              00-1 DEFINED AT LINE 53 IN constants.z80
                    > USED AT LINE 26 IN core-io.z80
FALSEE:             0000 DEFINED AT LINE 54 IN constants.z80
                    > USED AT LINE 19 IN core-io.z80
VVCODE:             11E9 DEFINED AT LINE 40
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 42
                    > USED AT LINE 43
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 42
                    > USED AT LINE 43
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 42
                    > USED AT LINE 43
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 42
                    > USED AT LINE 43
                    > USED AT LINE 42
                    > USED AT LINE 43
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 42
                    > USED AT LINE 43
VVNAME:             13D0 DEFINED AT LINE 15
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
VVLINK:             13D4 DEFINED AT LINE 17
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
VVUSER:             113C DEFINED AT LINE 63
                    > USED AT LINE 32
                    > USED AT LINE 33
                    > USED AT LINE 32
                    > USED AT LINE 33
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 32
                    > USED AT LINE 33
                    > USED AT LINE 32
                    > USED AT LINE 33
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 32
                    > USED AT LINE 33
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 65 IN core-user.z80
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 96 IN core-user.z80
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 102 IN core-user.z80
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 32
                    > USED AT LINE 33
                    > USED AT LINE 62
                    > USED AT LINE 63
RESET:              0000 DEFINED AT LINE 10
                    > USED AT LINE 28
SERIALINT:          0038 DEFINED AT LINE 2 IN interrupt.z80
NOTFULL:            004D DEFINED AT LINE 17 IN interrupt.z80
                    > USED AT LINE 13 IN interrupt.z80
NOTWRAP:            0059 DEFINED AT LINE 23 IN interrupt.z80
                    > USED AT LINE 21 IN interrupt.z80
RTS0:               006D DEFINED AT LINE 33 IN interrupt.z80
                    > USED AT LINE 7 IN interrupt.z80
                    > USED AT LINE 15 IN interrupt.z80
                    > USED AT LINE 30 IN interrupt.z80
INIT:               0072 DEFINED AT LINE 15
                    > USED AT LINE 11
LOOP:               0098 DEFINED AT LINE 37
                    > USED AT LINE 40
INIT_IO:            00A1 DEFINED AT LINE 4 IN serial.z80
                    > USED AT LINE 10 IN core-io.z80
RXA:                00B5 DEFINED AT LINE 16 IN serial.z80
                    > USED AT LINE 38
                    > USED AT LINE 22 IN core-io.z80
WAITFORCHAR:        00B5 DEFINED AT LINE 17 IN serial.z80
                    > USED AT LINE 20 IN serial.z80
NOTRDWRAP:          00C9 DEFINED AT LINE 28 IN serial.z80
                    > USED AT LINE 26 IN serial.z80
RTS1:               00DC DEFINED AT LINE 38 IN serial.z80
                    > USED AT LINE 35 IN serial.z80
TXA:                00E0 DEFINED AT LINE 44 IN serial.z80
                    > USED AT LINE 39
                    > USED AT LINE 63 IN serial.z80
                    > USED AT LINE 34 IN core-io.z80
CONOUT1:            00E1 DEFINED AT LINE 46 IN serial.z80
                    > USED AT LINE 49 IN serial.z80
CKINCHAR:           00EB DEFINED AT LINE 54 IN serial.z80
                    > USED AT LINE 17 IN core-io.z80
PRINTSZ:            00F1 DEFINED AT LINE 59 IN serial.z80
                    > USED AT LINE 36
                    > USED AT LINE 65 IN serial.z80
                    > USED AT LINE 53 IN core-kernel.z80
DEFAULTS:           00FB DEFINED AT LINE 3 IN defaults.z80
                    > USED AT LINE 38 IN constants.z80
                    > USED AT LINE 19
DEFSZERO:           00FB DEFINED AT LINE 5 IN defaults.z80
DEFRZERO:           00FD DEFINED AT LINE 6 IN defaults.z80
DEFTQKEY:           00FF DEFINED AT LINE 7 IN defaults.z80
DEFTEMIT:           0101 DEFINED AT LINE 8 IN defaults.z80
DEFTEXPE:           0103 DEFINED AT LINE 9 IN defaults.z80
DEFTTAP:            0105 DEFINED AT LINE 10 IN defaults.z80
DEFTECHO:           0107 DEFINED AT LINE 11 IN defaults.z80
DEFTPROM:           0109 DEFINED AT LINE 12 IN defaults.z80
DEFBASE:            010B DEFINED AT LINE 13 IN defaults.z80
DEFTEMP:            010D DEFINED AT LINE 14 IN defaults.z80
DEFSPAN:            010F DEFINED AT LINE 15 IN defaults.z80
DEFINN:             0111 DEFINED AT LINE 16 IN defaults.z80
DEFNTIB:            0113 DEFINED AT LINE 17 IN defaults.z80
DEFTIB:             0115 DEFINED AT LINE 18 IN defaults.z80
DEFCSP:             0117 DEFINED AT LINE 19 IN defaults.z80
DEFTEVAL:           0119 DEFINED AT LINE 20 IN defaults.z80
DEFTNUMB:           011B DEFINED AT LINE 21 IN defaults.z80
DEFHLD:             011D DEFINED AT LINE 22 IN defaults.z80
DEFHANDL:           011F DEFINED AT LINE 23 IN defaults.z80
DEFCNTXT:           0121 DEFINED AT LINE 24 IN defaults.z80
DEFVOCABS:          0123 DEFINED AT LINE 25 IN defaults.z80
DEFCRRENT:          0125 DEFINED AT LINE 26 IN defaults.z80
DEFVOCABLP:         0127 DEFINED AT LINE 27 IN defaults.z80
DEFCP:              0129 DEFINED AT LINE 28 IN defaults.z80
DEFNP:              012B DEFINED AT LINE 29 IN defaults.z80
DEFLAST:            012D DEFINED AT LINE 30 IN defaults.z80
DEFVFRTH:           012F DEFINED AT LINE 31 IN defaults.z80
DEFVOCABL:          0131 DEFINED AT LINE 32 IN defaults.z80
DEFCOLD:            0133 DEFINED AT LINE 33 IN defaults.z80
END_DEFAULTS:       0135 DEFINED AT LINE 34 IN defaults.z80
                    > USED AT LINE 38 IN constants.z80
ZLESS:              0136 DEFINED AT LINE 11
                    > USED AT LINE 82 IN core-alu.z80
                    > USED AT LINE 101 IN core-alu.z80
                    > USED AT LINE 103 IN core-alu.z80
                    > USED AT LINE 114 IN core-alu.z80
                    > USED AT LINE 116 IN core-alu.z80
                    > USED AT LINE 247 IN core-alu.z80
                    > USED AT LINE 264 IN core-alu.z80
                    > USED AT LINE 43 IN core-format.z80
                    > USED AT LINE 57 IN core-interpret.z80
                    > USED AT LINE 71 IN core-interpret.z80
                    > USED AT LINE 256 IN core-interpret.z80
VVLEN:              11E4 DEFINED AT LINE 38
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 41
                    > USED AT LINE 42
                    > USED AT LINE 14
                    > USED AT LINE 41
                    > USED AT LINE 42
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 41
                    > USED AT LINE 42
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 41
                    > USED AT LINE 42
                    > USED AT LINE 41
                    > USED AT LINE 42
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 41
                    > USED AT LINE 42
ANDD:               013E DEFINED AT LINE 11
ORR:                0148 DEFINED AT LINE 11
XORR:               0152 DEFINED AT LINE 11
                    > USED AT LINE 90 IN core-alu.z80
                    > USED AT LINE 99 IN core-alu.z80
                    > USED AT LINE 113 IN core-alu.z80
                    > USED AT LINE 314 IN core-alu.z80
                    > USED AT LINE 194 IN core-io.z80
PLUS:               015C DEFINED AT LINE 11
                    > USED AT LINE 72 IN core-alu.z80
                    > USED AT LINE 77 IN core-alu.z80
                    > USED AT LINE 253 IN core-alu.z80
                    > USED AT LINE 44 IN core-compiler.z80
                    > USED AT LINE 192 IN core-io.z80
                    > USED AT LINE 198 IN core-memory.z80
                    > USED AT LINE 84 IN core-stacks.z80
INVER:              0166 DEFINED AT LINE 11
                    > USED AT LINE 60 IN core-alu.z80
                    > USED AT LINE 70 IN core-alu.z80
                    > USED AT LINE 37 IN core-utils.z80
NEGAT:              0172 DEFINED AT LINE 11
                    > USED AT LINE 77 IN core-alu.z80
                    > USED AT LINE 83 IN core-alu.z80
                    > USED AT LINE 249 IN core-alu.z80
                    > USED AT LINE 257 IN core-alu.z80
                    > USED AT LINE 34 IN core-interpret.z80
ONEPLUS:            017C DEFINED AT LINE 11
                    > USED AT LINE 60 IN core-alu.z80
DNEGA:              0188 DEFINED AT LINE 11
                    > USED AT LINE 316 IN core-alu.z80
SUBB:               019E DEFINED AT LINE 11
                    > USED AT LINE 103 IN core-alu.z80
                    > USED AT LINE 116 IN core-alu.z80
                    > USED AT LINE 142 IN core-alu.z80
                    > USED AT LINE 143 IN core-alu.z80
                    > USED AT LINE 65 IN core-does.z80
                    > USED AT LINE 57 IN core-interpret.z80
                    > USED AT LINE 82 IN core-interpret.z80
                    > USED AT LINE 135 IN core-interpret.z80
                    > USED AT LINE 185 IN core-memory.z80
ABSS:               01A8 DEFINED AT LINE 11
ABS1:               01B6 DEFINED AT LINE 84 IN core-alu.z80
EQUAL:              01B8 DEFINED AT LINE 11
EQU1:               01C8 DEFINED AT LINE 93 IN core-alu.z80
                    > USED AT LINE 91 IN core-alu.z80
ULESS:              01CE DEFINED AT LINE 11
ULES1:              01E2 DEFINED AT LINE 102 IN core-alu.z80
                    > USED AT LINE 100 IN core-alu.z80
NIP:                01E8 DEFINED AT LINE 11
                    > USED AT LINE 101 IN core-alu.z80
                    > USED AT LINE 162 IN core-alu.z80
                    > USED AT LINE 274 IN core-alu.z80
                    > USED AT LINE 328 IN core-alu.z80
LESS:               01F2 DEFINED AT LINE 11
                    > USED AT LINE 121 IN core-alu.z80
                    > USED AT LINE 126 IN core-alu.z80
LESS1:              0206 DEFINED AT LINE 115 IN core-alu.z80
GREATERTHAN:        020C DEFINED AT LINE 11
                    > USED AT LINE 134 IN core-alu.z80
MAX:                0216 DEFINED AT LINE 11
MAX1:               0224 DEFINED AT LINE 128 IN core-alu.z80
MIN:                0228 DEFINED AT LINE 11
MIN1:               0236 DEFINED AT LINE 136 IN core-alu.z80
WITHI:              023A DEFINED AT LINE 11
UMPLUS:             024C DEFINED AT LINE 11
                    > USED AT LINE 50 IN core-alu.z80
UMP2:               0254 DEFINED AT LINE 153 IN core-alu.z80
UMP1:               0255 DEFINED AT LINE 155 IN core-alu.z80
                    > USED AT LINE 152 IN core-alu.z80
UMMOD:              0258 DEFINED AT LINE 11
                    > USED AT LINE 255 IN core-alu.z80
                    > USED AT LINE 194 IN core-memory.z80
UMSLMOD2:           0262 DEFINED AT LINE 11
                    > USED AT LINE 162 IN core-alu.z80
UMMOD11:            0266 DEFINED AT LINE 172 IN core-alu.z80
UMMOD12:            0271 DEFINED AT LINE 183 IN core-alu.z80
UMMOD2:             028B DEFINED AT LINE 203 IN core-alu.z80
                    > USED AT LINE 171 IN core-alu.z80
UMMOD1:             0291 DEFINED AT LINE 206 IN core-alu.z80
                    > USED AT LINE 182 IN core-alu.z80
UMMOD4:             0297 DEFINED AT LINE 209 IN core-alu.z80
                    > USED AT LINE 227 IN core-alu.z80
UMMOD13:            029F DEFINED AT LINE 217 IN core-alu.z80
UMMOD3:             02A5 DEFINED AT LINE 224 IN core-alu.z80
                    > USED AT LINE 189 IN core-alu.z80
                    > USED AT LINE 193 IN core-alu.z80
                    > USED AT LINE 238 IN core-alu.z80
UMMOD14:            02A9 DEFINED AT LINE 228 IN core-alu.z80
UMMOD5:             02AF DEFINED AT LINE 235 IN core-alu.z80
                    > USED AT LINE 216 IN core-alu.z80
UMMOD15:            02B3 DEFINED AT LINE 239 IN core-alu.z80
MSMOD:              02B4 DEFINED AT LINE 11
MMOD1:              02CC DEFINED AT LINE 250 IN core-alu.z80
                    > USED AT LINE 248 IN core-alu.z80
MMOD2:              02DA DEFINED AT LINE 254 IN core-alu.z80
                    > USED AT LINE 252 IN core-alu.z80
MMOD3:              02EA DEFINED AT LINE 258 IN core-alu.z80
                    > USED AT LINE 256 IN core-alu.z80
SLMOD:              02EC DEFINED AT LINE 11
                    > USED AT LINE 269 IN core-alu.z80
                    > USED AT LINE 274 IN core-alu.z80
MODD:               02FA DEFINED AT LINE 11
SLASH:              0304 DEFINED AT LINE 11
UMSTA:              030E DEFINED AT LINE 11
                    > USED AT LINE 309 IN core-alu.z80
                    > USED AT LINE 315 IN core-alu.z80
UMSTA1:             0316 DEFINED AT LINE 286 IN core-alu.z80
                    > USED AT LINE 299 IN core-alu.z80
UMSTA2:             031D DEFINED AT LINE 292 IN core-alu.z80
UMSTA5:             0320 DEFINED AT LINE 295 IN core-alu.z80
UMSTA3:             0321 DEFINED AT LINE 297 IN core-alu.z80
                    > USED AT LINE 291 IN core-alu.z80
                    > USED AT LINE 294 IN core-alu.z80
UMSTA4:             0324 DEFINED AT LINE 300 IN core-alu.z80
STAR:               032A DEFINED AT LINE 11
MSTAR:              0334 DEFINED AT LINE 11
                    > USED AT LINE 323 IN core-alu.z80
MSTAR1:             0350 DEFINED AT LINE 317 IN core-alu.z80
SSMOD:              0352 DEFINED AT LINE 11
                    > USED AT LINE 328 IN core-alu.z80
STASL:              0360 DEFINED AT LINE 11
CELLP:              036A DEFINED AT LINE 11
                    > USED AT LINE 32 IN core-compiler.z80
                    > USED AT LINE 151 IN core-interpret.z80
                    > USED AT LINE 153 IN core-interpret.z80
                    > USED AT LINE 171 IN core-interpret.z80
                    > USED AT LINE 97 IN core-memory.z80
                    > USED AT LINE 102 IN core-memory.z80
                    > USED AT LINE 125 IN core-memory.z80
CELLM:              0376 DEFINED AT LINE 11
                    > USED AT LINE 72 IN core-compiler.z80
                    > USED AT LINE 74 IN core-compiler.z80
                    > USED AT LINE 126 IN core-interpret.z80
                    > USED AT LINE 126 IN core-interpret.z80
                    > USED AT LINE 156 IN core-interpret.z80
                    > USED AT LINE 158 IN core-interpret.z80
                    > USED AT LINE 158 IN core-interpret.z80
                    > USED AT LINE 161 IN core-interpret.z80
                    > USED AT LINE 169 IN core-interpret.z80
CELLS:              0382 DEFINED AT LINE 11
TICK:               038E DEFINED AT LINE 11
                    > USED AT LINE 25 IN core-compiler.z80
TICK1:              039C DEFINED AT LINE 7 IN core-compiler.z80
                    > USED AT LINE 5 IN core-compiler.z80
ALLOT:              039E DEFINED AT LINE 11
COMMA:              03A8 DEFINED AT LINE 11
                    > USED AT LINE 25 IN core-compiler.z80
                    > USED AT LINE 90 IN core-compiler.z80
                    > USED AT LINE 120 IN core-compiler.z80
BCOMP:              03BA DEFINED AT LINE 11
COMPI:              03C4 DEFINED AT LINE 11
                    > USED AT LINE 38 IN core-compiler.z80
                    > USED AT LINE 107 IN core-compiler.z80
                    > USED AT LINE 142 IN core-compiler.z80
                    > USED AT LINE 150 IN core-compiler.z80
                    > USED AT LINE 4 IN core-control.z80
                    > USED AT LINE 14 IN core-control.z80
                    > USED AT LINE 19 IN core-control.z80
                    > USED AT LINE 24 IN core-control.z80
                    > USED AT LINE 30 IN core-control.z80
                    > USED AT LINE 37 IN core-control.z80
LITER:              03D6 DEFINED AT LINE 11
                    > USED AT LINE 94 IN core-compiler.z80
STRCQ:              03E2 DEFINED AT LINE 49
RECUR:              03F8 DEFINED AT LINE 11
UNIQU:              0406 DEFINED AT LINE 11
                    > USED AT LINE 69 IN core-compiler.z80
UNIQ1:              0422 DEFINED AT LINE 60 IN core-compiler.z80
                    > USED AT LINE 57 IN core-compiler.z80
SNAME:              0426 DEFINED AT LINE 11
                    > USED AT LINE 126 IN core-compiler.z80
                    > USED AT LINE 140 IN core-compiler.z80
                    > USED AT LINE 148 IN core-compiler.z80
PNAM1:              0458 DEFINED AT LINE 76 IN core-compiler.z80
                    > USED AT LINE 68 IN core-compiler.z80
SCOMP:              0462 DEFINED AT LINE 49
                    > USED AT LINE 113 IN core-compiler.z80
SCOM1:              047E DEFINED AT LINE 89 IN core-compiler.z80
                    > USED AT LINE 87 IN core-compiler.z80
SCOM2:              0482 DEFINED AT LINE 91 IN core-compiler.z80
                    > USED AT LINE 85 IN core-compiler.z80
SCOM3:              048E DEFINED AT LINE 95 IN core-compiler.z80
                    > USED AT LINE 93 IN core-compiler.z80
OVERT:              0490 DEFINED AT LINE 49
SEMIS:              04A0 DEFINED AT LINE 11
RBRAC:              04AE DEFINED AT LINE 11
                    > USED AT LINE 127 IN core-compiler.z80
CALLC:              04BC DEFINED AT LINE 49
                    > USED AT LINE 127 IN core-compiler.z80
COLON:              04CA DEFINED AT LINE 11
IMMED:              04DC DEFINED AT LINE 11
USER:               04F4 DEFINED AT LINE 11
CREAT:              050C DEFINED AT LINE 11
                    > USED AT LINE 156 IN core-compiler.z80
VARIA:              0522 DEFINED AT LINE 11
FOR:                0530 DEFINED AT LINE 11
BEGIN:              053C DEFINED AT LINE 11
NEXT:               0544 DEFINED AT LINE 11
UNTIL:              0550 DEFINED AT LINE 11
AGAIN:              055C DEFINED AT LINE 11
                    > USED AT LINE 43 IN core-control.z80
IFF:                0568 DEFINED AT LINE 11
                    > USED AT LINE 64 IN core-control.z80
AHEAD:              057A DEFINED AT LINE 11
                    > USED AT LINE 54 IN core-control.z80
                    > USED AT LINE 59 IN core-control.z80
REPEA:              058C DEFINED AT LINE 11
THENN:              059A DEFINED AT LINE 11
AFT:                05A6 DEFINED AT LINE 11
ELSEE:              05B4 DEFINED AT LINE 11
WHILE:              05C0 DEFINED AT LINE 11
UNLOOP:             05CA DEFINED AT LINE 11
DOCONST:            05DA DEFINED AT LINE 49
DOLIST:             05E2 DEFINED AT LINE 49
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 141 IN core-compiler.z80
                    > USED AT LINE 25
                    > USED AT LINE 149 IN core-compiler.z80
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 31
                    > USED AT LINE 31
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 31
                    > USED AT LINE 31
                    > USED AT LINE 61
                    > USED AT LINE 31
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 31
                    > USED AT LINE 61
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
DOLIT:              05F0 DEFINED AT LINE 49
                    > USED AT LINE 55 IN core-alu.z80
                    > USED AT LINE 65 IN core-alu.z80
                    > USED AT LINE 71 IN core-alu.z80
                    > USED AT LINE 92 IN core-alu.z80
                    > USED AT LINE 94 IN core-alu.z80
                    > USED AT LINE 333 IN core-alu.z80
                    > USED AT LINE 338 IN core-alu.z80
                    > USED AT LINE 343 IN core-alu.z80
                    > USED AT LINE 38 IN core-compiler.z80
                    > USED AT LINE 43 IN core-compiler.z80
                    > USED AT LINE 86 IN core-compiler.z80
                    > USED AT LINE 113 IN core-compiler.z80
                    > USED AT LINE 119 IN core-compiler.z80
                    > USED AT LINE 133 IN core-compiler.z80
                    > USED AT LINE 141 IN core-compiler.z80
                    > USED AT LINE 149 IN core-compiler.z80
                    > USED AT LINE 156 IN core-compiler.z80
                    > USED AT LINE 31 IN core-control.z80
                    > USED AT LINE 64 IN core-does.z80
                    > USED AT LINE 4 IN core-format.z80
                    > USED AT LINE 5 IN core-format.z80
                    > USED AT LINE 6 IN core-format.z80
                    > USED AT LINE 11 IN core-format.z80
                    > USED AT LINE 44 IN core-format.z80
                    > USED AT LINE 67 IN core-format.z80
                    > USED AT LINE 72 IN core-format.z80
                    > USED AT LINE 77 IN core-format.z80
                    > USED AT LINE 82 IN core-format.z80
                    > USED AT LINE 83 IN core-format.z80
                    > USED AT LINE 84 IN core-format.z80
                    > USED AT LINE 86 IN core-format.z80
                    > USED AT LINE 5 IN core-interpret.z80
                    > USED AT LINE 6 IN core-interpret.z80
                    > USED AT LINE 8 IN core-interpret.z80
                    > USED AT LINE 9 IN core-interpret.z80
                    > USED AT LINE 20 IN core-interpret.z80
                    > USED AT LINE 25 IN core-interpret.z80
                    > USED AT LINE 30 IN core-interpret.z80
                    > USED AT LINE 52 IN core-interpret.z80
                    > USED AT LINE 59 IN core-interpret.z80
                    > USED AT LINE 74 IN core-interpret.z80
                    > USED AT LINE 80 IN core-interpret.z80
                    > USED AT LINE 99 IN core-interpret.z80
                    > USED AT LINE 139 IN core-interpret.z80
                    > USED AT LINE 145 IN core-interpret.z80
                    > USED AT LINE 151 IN core-interpret.z80
                    > USED AT LINE 178 IN core-interpret.z80
                    > USED AT LINE 227 IN core-interpret.z80
                    > USED AT LINE 241 IN core-interpret.z80
                    > USED AT LINE 247 IN core-interpret.z80
                    > USED AT LINE 69 IN core-io.z80
                    > USED AT LINE 79 IN core-io.z80
                    > USED AT LINE 94 IN core-io.z80
                    > USED AT LINE 102 IN core-io.z80
                    > USED AT LINE 152 IN core-io.z80
                    > USED AT LINE 164 IN core-io.z80
                    > USED AT LINE 166 IN core-io.z80
                    > USED AT LINE 179 IN core-io.z80
                    > USED AT LINE 181 IN core-io.z80
                    > USED AT LINE 197 IN core-io.z80
                    > USED AT LINE 216 IN core-io.z80
                    > USED AT LINE 217 IN core-io.z80
                    > USED AT LINE 12 IN core-kernel.z80
                    > USED AT LINE 108 IN core-memory.z80
                    > USED AT LINE 119 IN core-memory.z80
                    > USED AT LINE 146 IN core-memory.z80
                    > USED AT LINE 147 IN core-memory.z80
                    > USED AT LINE 173 IN core-memory.z80
                    > USED AT LINE 176 IN core-memory.z80
                    > USED AT LINE 184 IN core-memory.z80
                    > USED AT LINE 186 IN core-memory.z80
                    > USED AT LINE 193 IN core-memory.z80
                    > USED AT LINE 196 IN core-memory.z80
                    > USED AT LINE 83 IN core-stacks.z80
                    > USED AT LINE 90 IN core-stacks.z80
                    > USED AT LINE 8 IN core-utils.z80
                    > USED AT LINE 16 IN core-utils.z80
                    > USED AT LINE 21 IN core-utils.z80
                    > USED AT LINE 31 IN core-utils.z80
                    > USED AT LINE 34 IN core-utils.z80
DOVAR:              05F8 DEFINED AT LINE 49
                    > USED AT LINE 150 IN core-compiler.z80
                    > USED AT LINE 41 IN core-does.z80
                    > USED AT LINE 201 IN core-interpret.z80
UP:                 0600 DEFINED AT LINE 49
DOUSE:              0608 DEFINED AT LINE 49
                    > USED AT LINE 142 IN core-compiler.z80
                    > USED AT LINE 32
                    > USED AT LINE 32
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 32
                    > USED AT LINE 32
                    > USED AT LINE 62
                    > USED AT LINE 32
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 32
                    > USED AT LINE 62
EXIT:               0618 DEFINED AT LINE 11
                    > USED AT LINE 85 IN core-alu.z80
                    > USED AT LINE 129 IN core-alu.z80
                    > USED AT LINE 137 IN core-alu.z80
                    > USED AT LINE 259 IN core-alu.z80
                    > USED AT LINE 318 IN core-alu.z80
                    > USED AT LINE 6 IN core-compiler.z80
                    > USED AT LINE 61 IN core-compiler.z80
                    > USED AT LINE 75 IN core-compiler.z80
                    > USED AT LINE 88 IN core-compiler.z80
                    > USED AT LINE 90 IN core-compiler.z80
                    > USED AT LINE 94 IN core-compiler.z80
                    > USED AT LINE 107 IN core-compiler.z80
                    > USED AT LINE 120 IN core-compiler.z80
                    > USED AT LINE 9 IN core-control.z80
                    > USED AT LINE 36 IN core-does.z80
                    > USED AT LINE 38 IN core-format.z80
                    > USED AT LINE 46 IN core-format.z80
                    > USED AT LINE 88 IN core-format.z80
                    > USED AT LINE 116 IN core-interpret.z80
                    > USED AT LINE 229 IN core-interpret.z80
                    > USED AT LINE 233 IN core-interpret.z80
                    > USED AT LINE 250 IN core-interpret.z80
                    > USED AT LINE 258 IN core-interpret.z80
                    > USED AT LINE 49 IN core-io.z80
                    > USED AT LINE 64 IN core-io.z80
                    > USED AT LINE 85 IN core-io.z80
                    > USED AT LINE 97 IN core-io.z80
                    > USED AT LINE 114 IN core-io.z80
                    > USED AT LINE 145 IN core-io.z80
                    > USED AT LINE 168 IN core-io.z80
                    > USED AT LINE 185 IN core-io.z80
                    > USED AT LINE 60 IN core-kernel.z80
                    > USED AT LINE 135 IN core-memory.z80
                    > USED AT LINE 150 IN core-memory.z80
                    > USED AT LINE 162 IN core-memory.z80
                    > USED AT LINE 198 IN core-memory.z80
                    > USED AT LINE 58 IN core-stacks.z80
                    > USED AT LINE 11 IN core-utils.z80
                    > USED AT LINE 24 IN core-utils.z80
                    > USED AT LINE 45 IN core-utils.z80
                    > USED AT LINE 58 IN core-utils.z80
DODO:               0624 DEFINED AT LINE 49
DOLOOP:             0646 DEFINED AT LINE 49
DOLOOP1:            064C DEFINED AT LINE 75 IN core-does.z80
                    > USED AT LINE 85 IN core-does.z80
DOLOOP2:            0653 DEFINED AT LINE 82 IN core-does.z80
                    > USED AT LINE 74 IN core-does.z80
DOPLOOP:            0662 DEFINED AT LINE 49
DOPLP1:             0682 DEFINED AT LINE 117 IN core-does.z80
                    > USED AT LINE 107 IN core-does.z80
DONXT:              068E DEFINED AT LINE 11
                    > USED AT LINE 14 IN core-control.z80
                    > USED AT LINE 31 IN core-interpret.z80
                    > USED AT LINE 60 IN core-interpret.z80
                    > USED AT LINE 75 IN core-interpret.z80
                    > USED AT LINE 138 IN core-interpret.z80
                    > USED AT LINE 84 IN core-io.z80
                    > USED AT LINE 96 IN core-io.z80
                    > USED AT LINE 149 IN core-memory.z80
                    > USED AT LINE 161 IN core-memory.z80
                    > USED AT LINE 175 IN core-memory.z80
                    > USED AT LINE 10 IN core-utils.z80
                    > USED AT LINE 23 IN core-utils.z80
                    > USED AT LINE 39 IN core-utils.z80
                    > USED AT LINE 56 IN core-utils.z80
DECHILO:            06A3 DEFINED AT LINE 146 IN core-does.z80
                    > USED AT LINE 139 IN core-does.z80
DECLOW:             06A5 DEFINED AT LINE 149 IN core-does.z80
                    > USED AT LINE 135 IN core-does.z80
DIGIT:              06AE DEFINED AT LINE 49
                    > USED AT LINE 12 IN core-format.z80
EXTRC:              06C8 DEFINED AT LINE 49
BDIGS:              06DA DEFINED AT LINE 11
                    > USED AT LINE 60 IN core-format.z80
                    > USED AT LINE 130 IN core-io.z80
                    > USED AT LINE 137 IN core-io.z80
HOLD:               06E6 DEFINED AT LINE 11
DIG:                06FE DEFINED AT LINE 11
                    > USED AT LINE 34 IN core-format.z80
DIGS:               070C DEFINED AT LINE 11
                    > USED AT LINE 60 IN core-format.z80
                    > USED AT LINE 137 IN core-io.z80
DIGS1:              0710 DEFINED AT LINE 33 IN core-format.z80
                    > USED AT LINE 36 IN core-format.z80
DIGS2:              071C DEFINED AT LINE 37 IN core-format.z80
                    > USED AT LINE 35 IN core-format.z80
SIGN:               071E DEFINED AT LINE 11
                    > USED AT LINE 61 IN core-format.z80
SIGN1:              072E DEFINED AT LINE 45 IN core-format.z80
EDIGS:              0730 DEFINED AT LINE 11
                    > USED AT LINE 61 IN core-format.z80
STR:                0742 DEFINED AT LINE 49
                    > USED AT LINE 124 IN core-io.z80
                    > USED AT LINE 147 IN core-io.z80
HEX:                0758 DEFINED AT LINE 11
                    > USED AT LINE 19 IN core-interpret.z80
DECIMAL:            0766 DEFINED AT LINE 11
BLANK:              0774 DEFINED AT LINE 11
                    > USED AT LINE 56 IN core-interpret.z80
                    > USED AT LINE 109 IN core-interpret.z80
                    > USED AT LINE 114 IN core-interpret.z80
                    > USED AT LINE 74 IN core-io.z80
                    > USED AT LINE 165 IN core-io.z80
                    > USED AT LINE 183 IN core-io.z80
                    > USED AT LINE 197 IN core-io.z80
                    > USED AT LINE 171 IN core-memory.z80
TCHAR:              077E DEFINED AT LINE 49
TCHA1:              079E DEFINED AT LINE 87 IN core-format.z80
                    > USED AT LINE 85 IN core-format.z80
DIGTQ:              07A0 DEFINED AT LINE 49
DGTQ1:              07C6 DEFINED AT LINE 10 IN core-interpret.z80
                    > USED AT LINE 7 IN core-interpret.z80
NUMBQ:              07CE DEFINED AT LINE 49
NUMQ1:              07FE DEFINED AT LINE 21 IN core-interpret.z80
                    > USED AT LINE 18 IN core-interpret.z80
NUMQ2:              0822 DEFINED AT LINE 26 IN core-interpret.z80
                    > USED AT LINE 31 IN core-interpret.z80
NUMQ3:              0854 DEFINED AT LINE 35 IN core-interpret.z80
                    > USED AT LINE 33 IN core-interpret.z80
NUMQ4:              085A DEFINED AT LINE 38 IN core-interpret.z80
                    > USED AT LINE 28 IN core-interpret.z80
NUMQ5:              0866 DEFINED AT LINE 40 IN core-interpret.z80
                    > USED AT LINE 37 IN core-interpret.z80
NUMQ6:              0868 DEFINED AT LINE 42 IN core-interpret.z80
                    > USED AT LINE 24 IN core-interpret.z80
PARS:               0874 DEFINED AT LINE 49
                    > USED AT LINE 93 IN core-interpret.z80
PARS1:              089A DEFINED AT LINE 55 IN core-interpret.z80
                    > USED AT LINE 60 IN core-interpret.z80
PARS2:              08C0 DEFINED AT LINE 62 IN core-interpret.z80
                    > USED AT LINE 58 IN core-interpret.z80
PARS3:              08C2 DEFINED AT LINE 64 IN core-interpret.z80
                    > USED AT LINE 53 IN core-interpret.z80
PARS4:              08C8 DEFINED AT LINE 67 IN core-interpret.z80
                    > USED AT LINE 75 IN core-interpret.z80
PARS5:              08E0 DEFINED AT LINE 72 IN core-interpret.z80
                    > USED AT LINE 70 IN core-interpret.z80
PARS6:              08F6 DEFINED AT LINE 78 IN core-interpret.z80
                    > USED AT LINE 73 IN core-interpret.z80
PARS7:              0904 DEFINED AT LINE 81 IN core-interpret.z80
                    > USED AT LINE 77 IN core-interpret.z80
PARS8:              0910 DEFINED AT LINE 84 IN core-interpret.z80
                    > USED AT LINE 51 IN core-interpret.z80
PARSE:              0918 DEFINED AT LINE 11
                    > USED AT LINE 109 IN core-interpret.z80
                    > USED AT LINE 114 IN core-interpret.z80
                    > USED AT LINE 121 IN core-interpret.z80
PAREN:              093A DEFINED AT LINE 11
BKSLA:              0946 DEFINED AT LINE 11
CHAR:               0954 DEFINED AT LINE 11
TOKEN:              0962 DEFINED AT LINE 49
                    > USED AT LINE 4 IN core-compiler.z80
                    > USED AT LINE 126 IN core-compiler.z80
                    > USED AT LINE 140 IN core-compiler.z80
                    > USED AT LINE 148 IN core-compiler.z80
                    > USED AT LINE 265 IN core-interpret.z80
WORDD:              097E DEFINED AT LINE 11
NAMET:              098A DEFINED AT LINE 49
                    > USED AT LINE 162 IN core-interpret.z80
SAMEQ:              0996 DEFINED AT LINE 49
SAME1:              09A0 DEFINED AT LINE 133 IN core-interpret.z80
                    > USED AT LINE 138 IN core-interpret.z80
SAME2:              09C2 DEFINED AT LINE 138 IN core-interpret.z80
                    > USED AT LINE 132 IN core-interpret.z80
                    > USED AT LINE 136 IN core-interpret.z80
FIND:               09CC DEFINED AT LINE 11
                    > USED AT LINE 174 IN core-interpret.z80
FIND1:              09EA DEFINED AT LINE 147 IN core-interpret.z80
                    > USED AT LINE 159 IN core-interpret.z80
FIND2:              0A0E DEFINED AT LINE 153 IN core-interpret.z80
                    > USED AT LINE 150 IN core-interpret.z80
FIND3:              0A16 DEFINED AT LINE 154 IN core-interpret.z80
                    > USED AT LINE 152 IN core-interpret.z80
FIND6:              0A1A DEFINED AT LINE 155 IN core-interpret.z80
                    > USED AT LINE 148 IN core-interpret.z80
FIND4:              0A26 DEFINED AT LINE 157 IN core-interpret.z80
                    > USED AT LINE 154 IN core-interpret.z80
FIND5:              0A32 DEFINED AT LINE 160 IN core-interpret.z80
                    > USED AT LINE 157 IN core-interpret.z80
NAMEQ:              0A44 DEFINED AT LINE 49
                    > USED AT LINE 4 IN core-compiler.z80
                    > USED AT LINE 56 IN core-compiler.z80
                    > USED AT LINE 84 IN core-compiler.z80
                    > USED AT LINE 225 IN core-interpret.z80
NAMQ1:              0A56 DEFINED AT LINE 170 IN core-interpret.z80
                    > USED AT LINE 168 IN core-interpret.z80
NAMQ2:              0A58 DEFINED AT LINE 171 IN core-interpret.z80
                    > USED AT LINE 175 IN core-interpret.z80
NAMQ3:              0A76 DEFINED AT LINE 177 IN core-interpret.z80
                    > USED AT LINE 173 IN core-interpret.z80
CATCH:              0A80 DEFINED AT LINE 11
THROW:              0AA6 DEFINED AT LINE 11
                    > USED AT LINE 8 IN core-compiler.z80
                    > USED AT LINE 78 IN core-compiler.z80
                    > USED AT LINE 95 IN core-compiler.z80
                    > USED AT LINE 210 IN core-interpret.z80
                    > USED AT LINE 217 IN core-interpret.z80
                    > USED AT LINE 235 IN core-interpret.z80
NULLS:              0AC4 DEFINED AT LINE 49
                    > USED AT LINE 210 IN core-interpret.z80
ABORT:              0AD2 DEFINED AT LINE 11
ABORQ:              0ADA DEFINED AT LINE 11
                    > USED AT LINE 37
                    > USED AT LINE 37
ABOR1:              0AE6 DEFINED AT LINE 218 IN core-interpret.z80
                    > USED AT LINE 216 IN core-interpret.z80
INTER:              0AEC DEFINED AT LINE 49
                    > USED AT LINE 241 IN core-interpret.z80
                    > USED AT LINE 247 IN core-interpret.z80
INTE1:              0B14 DEFINED AT LINE 230 IN core-interpret.z80
                    > USED AT LINE 226 IN core-interpret.z80
INTE2:              0B1E DEFINED AT LINE 234 IN core-interpret.z80
                    > USED AT LINE 232 IN core-interpret.z80
LBRAC:              0B20 DEFINED AT LINE 11
DOTOK:              0B2E DEFINED AT LINE 11
DOTO1:              0B46 DEFINED AT LINE 250 IN core-interpret.z80
                    > USED AT LINE 248 IN core-interpret.z80
QSTAC:              0B4A DEFINED AT LINE 49
EVAL:               0B62 DEFINED AT LINE 11
EVAL1:              0B66 DEFINED AT LINE 264 IN core-interpret.z80
                    > USED AT LINE 268 IN core-interpret.z80
EVAL2:              0B7A DEFINED AT LINE 269 IN core-interpret.z80
                    > USED AT LINE 266 IN core-interpret.z80
STOIO:              0B82 DEFINED AT LINE 11
                    > USED AT LINE 10 IN core-kernel.z80
QRX:                0B88 DEFINED AT LINE 11
                    > USED AT LINE 7 IN defaults.z80
QRX1:               0B93 DEFINED AT LINE 21 IN core-io.z80
                    > USED AT LINE 18 IN core-io.z80
QRX2:               0B9D DEFINED AT LINE 27 IN core-io.z80
                    > USED AT LINE 20 IN core-io.z80
TXSTO:              0BA0 DEFINED AT LINE 11
                    > USED AT LINE 8 IN defaults.z80
                    > USED AT LINE 11 IN defaults.z80
QKEY:               0BA8 DEFINED AT LINE 11
                    > USED AT LINE 47 IN core-io.z80
                    > USED AT LINE 60 IN core-io.z80
KEY:                0BB4 DEFINED AT LINE 11
                    > USED AT LINE 62 IN core-io.z80
                    > USED AT LINE 196 IN core-io.z80
KEY1:               0BB8 DEFINED AT LINE 46 IN core-io.z80
                    > USED AT LINE 48 IN core-io.z80
EMIT:               0BC0 DEFINED AT LINE 11
                    > USED AT LINE 74 IN core-io.z80
NUFQ:               0BCC DEFINED AT LINE 11
                    > USED AT LINE 37 IN core-utils.z80
NUFQ1:              0BE2 DEFINED AT LINE 63 IN core-io.z80
                    > USED AT LINE 61 IN core-io.z80
PACE:               0BE4 DEFINED AT LINE 49
SPACE:              0BF0 DEFINED AT LINE 11
                    > USED AT LINE 82 IN core-io.z80
                    > USED AT LINE 138 IN core-io.z80
                    > USED AT LINE 147 IN core-io.z80
                    > USED AT LINE 17 IN core-utils.z80
                    > USED AT LINE 36 IN core-utils.z80
                    > USED AT LINE 36 IN core-utils.z80
SPACS:              0BFA DEFINED AT LINE 11
                    > USED AT LINE 125 IN core-io.z80
                    > USED AT LINE 132 IN core-io.z80
CHAR1:              0C0A DEFINED AT LINE 81 IN core-io.z80
                    > USED AT LINE 84 IN core-io.z80
CHAR2:              0C0C DEFINED AT LINE 83 IN core-io.z80
                    > USED AT LINE 80 IN core-io.z80
TYPEE:              0C12 DEFINED AT LINE 11
                    > USED AT LINE 125 IN core-io.z80
                    > USED AT LINE 132 IN core-io.z80
                    > USED AT LINE 138 IN core-io.z80
TYPE1:              0C1C DEFINED AT LINE 92 IN core-io.z80
                    > USED AT LINE 96 IN core-io.z80
TYPE2:              0C28 DEFINED AT LINE 95 IN core-io.z80
                    > USED AT LINE 91 IN core-io.z80
CR:                 0C30 DEFINED AT LINE 11
                    > USED AT LINE 250 IN core-interpret.z80
                    > USED AT LINE 34 IN core-utils.z80
                    > USED AT LINE 50 IN core-utils.z80
DOSTR:              0C42 DEFINED AT LINE 11
                    > USED AT LINE 217 IN core-interpret.z80
                    > USED AT LINE 219 IN core-interpret.z80
                    > USED AT LINE 114 IN core-io.z80
                    > USED AT LINE 119 IN core-io.z80
STRQP:              0C5A DEFINED AT LINE 49
                    > USED AT LINE 37
DOTQP:              0C62 DEFINED AT LINE 49
                    > USED AT LINE 37
                    > USED AT LINE 37
                    > USED AT LINE 37
DOTR:               0C6E DEFINED AT LINE 11
UDOTR:              0C82 DEFINED AT LINE 11
UDOT:               0C9A DEFINED AT LINE 11
                    > USED AT LINE 145 IN core-io.z80
DOT:                0CAA DEFINED AT LINE 11
                    > USED AT LINE 157 IN core-io.z80
DOT1:               0CC0 DEFINED AT LINE 146 IN core-io.z80
                    > USED AT LINE 144 IN core-io.z80
DOTPR:              0CC8 DEFINED AT LINE 11
QUEST:              0CD4 DEFINED AT LINE 11
BKSP:               0CDE DEFINED AT LINE 11
                    > USED AT LINE 185 IN core-io.z80
BACK1:              0D0E DEFINED AT LINE 167 IN core-io.z80
                    > USED AT LINE 163 IN core-io.z80
TAP:                0D10 DEFINED AT LINE 11
                    > USED AT LINE 183 IN core-io.z80
                    > USED AT LINE 199 IN core-io.z80
KTAP:               0D26 DEFINED AT LINE 11
KTAP1:              0D46 DEFINED AT LINE 184 IN core-io.z80
                    > USED AT LINE 182 IN core-io.z80
KTAP2:              0D4A DEFINED AT LINE 186 IN core-io.z80
                    > USED AT LINE 180 IN core-io.z80
ACCEP:              0D54 DEFINED AT LINE 11
ACCP1:              0D5E DEFINED AT LINE 193 IN core-io.z80
                    > USED AT LINE 204 IN core-io.z80
ACCP2:              0D7C DEFINED AT LINE 201 IN core-io.z80
                    > USED AT LINE 198 IN core-io.z80
ACCP3:              0D80 DEFINED AT LINE 203 IN core-io.z80
                    > USED AT LINE 200 IN core-io.z80
ACCP4:              0D84 DEFINED AT LINE 205 IN core-io.z80
                    > USED AT LINE 195 IN core-io.z80
EXPEC:              0D8C DEFINED AT LINE 49
QUERY:              0D9C DEFINED AT LINE 49
NEXT_STEP:          0DBA DEFINED AT LINE 1 IN core-kernel.z80
                    > USED AT LINE 25
COLD:               0DC0 DEFINED AT LINE 11
                    > USED AT LINE 29
HELLO:              0DD0 DEFINED AT LINE 14 IN core-kernel.z80
                    > USED AT LINE 12 IN core-kernel.z80
QUIT:               0DE0 DEFINED AT LINE 11
                    > USED AT LINE 13 IN core-kernel.z80
EXECU:              0DE2 DEFINED AT LINE 11
                    > USED AT LINE 88 IN core-compiler.z80
                    > USED AT LINE 229 IN core-interpret.z80
                    > USED AT LINE 133 IN core-memory.z80
QBRAN:              0DE6 DEFINED AT LINE 49
                    > USED AT LINE 91 IN core-alu.z80
                    > USED AT LINE 100 IN core-alu.z80
                    > USED AT LINE 248 IN core-alu.z80
                    > USED AT LINE 252 IN core-alu.z80
                    > USED AT LINE 256 IN core-alu.z80
                    > USED AT LINE 5 IN core-compiler.z80
                    > USED AT LINE 57 IN core-compiler.z80
                    > USED AT LINE 68 IN core-compiler.z80
                    > USED AT LINE 85 IN core-compiler.z80
                    > USED AT LINE 87 IN core-compiler.z80
                    > USED AT LINE 93 IN core-compiler.z80
                    > USED AT LINE 19 IN core-control.z80
                    > USED AT LINE 30 IN core-control.z80
                    > USED AT LINE 35 IN core-format.z80
                    > USED AT LINE 43 IN core-format.z80
                    > USED AT LINE 85 IN core-format.z80
                    > USED AT LINE 7 IN core-interpret.z80
                    > USED AT LINE 18 IN core-interpret.z80
                    > USED AT LINE 24 IN core-interpret.z80
                    > USED AT LINE 28 IN core-interpret.z80
                    > USED AT LINE 33 IN core-interpret.z80
                    > USED AT LINE 51 IN core-interpret.z80
                    > USED AT LINE 53 IN core-interpret.z80
                    > USED AT LINE 58 IN core-interpret.z80
                    > USED AT LINE 70 IN core-interpret.z80
                    > USED AT LINE 73 IN core-interpret.z80
                    > USED AT LINE 136 IN core-interpret.z80
                    > USED AT LINE 148 IN core-interpret.z80
                    > USED AT LINE 150 IN core-interpret.z80
                    > USED AT LINE 157 IN core-interpret.z80
                    > USED AT LINE 168 IN core-interpret.z80
                    > USED AT LINE 173 IN core-interpret.z80
                    > USED AT LINE 175 IN core-interpret.z80
                    > USED AT LINE 216 IN core-interpret.z80
                    > USED AT LINE 226 IN core-interpret.z80
                    > USED AT LINE 232 IN core-interpret.z80
                    > USED AT LINE 248 IN core-interpret.z80
                    > USED AT LINE 266 IN core-interpret.z80
                    > USED AT LINE 48 IN core-io.z80
                    > USED AT LINE 61 IN core-io.z80
                    > USED AT LINE 144 IN core-io.z80
                    > USED AT LINE 163 IN core-io.z80
                    > USED AT LINE 180 IN core-io.z80
                    > USED AT LINE 182 IN core-io.z80
                    > USED AT LINE 195 IN core-io.z80
                    > USED AT LINE 198 IN core-io.z80
                    > USED AT LINE 132 IN core-memory.z80
                    > USED AT LINE 172 IN core-memory.z80
                    > USED AT LINE 195 IN core-memory.z80
                    > USED AT LINE 55 IN core-stacks.z80
                    > USED AT LINE 38 IN core-utils.z80
BRAN:               0DF2 DEFINED AT LINE 49
                    > USED AT LINE 24 IN core-control.z80
                    > USED AT LINE 37 IN core-control.z80
                    > USED AT LINE 36 IN core-format.z80
                    > USED AT LINE 37 IN core-interpret.z80
                    > USED AT LINE 77 IN core-interpret.z80
                    > USED AT LINE 132 IN core-interpret.z80
                    > USED AT LINE 152 IN core-interpret.z80
                    > USED AT LINE 154 IN core-interpret.z80
                    > USED AT LINE 159 IN core-interpret.z80
                    > USED AT LINE 268 IN core-interpret.z80
                    > USED AT LINE 80 IN core-io.z80
                    > USED AT LINE 91 IN core-io.z80
                    > USED AT LINE 200 IN core-io.z80
                    > USED AT LINE 204 IN core-io.z80
                    > USED AT LINE 33 IN core-kernel.z80
                    > USED AT LINE 142 IN core-memory.z80
                    > USED AT LINE 157 IN core-memory.z80
                    > USED AT LINE 169 IN core-memory.z80
                    > USED AT LINE 5 IN core-utils.z80
                    > USED AT LINE 18 IN core-utils.z80
                    > USED AT LINE 40 IN core-utils.z80
                    > USED AT LINE 52 IN core-utils.z80
TYPECSTR:           0DFA DEFINED AT LINE 11
                    > USED AT LINE 60 IN core-kernel.z80
THROWX:             0E04 DEFINED AT LINE 11
                    > USED AT LINE 205 IN core-alu.z80
                    > USED AT LINE 208 IN core-alu.z80
STORE:              0E0C DEFINED AT LINE 11
                    > USED AT LINE 19 IN core-compiler.z80
                    > USED AT LINE 45 IN core-compiler.z80
                    > USED AT LINE 75 IN core-compiler.z80
                    > USED AT LINE 50 IN core-interpret.z80
                    > USED AT LINE 91 IN core-memory.z80
                    > USED AT LINE 97 IN core-memory.z80
AT:                 0E16 DEFINED AT LINE 11
                    > USED AT LINE 50 IN core-compiler.z80
                    > USED AT LINE 73 IN core-compiler.z80
                    > USED AT LINE 86 IN core-compiler.z80
                    > USED AT LINE 101 IN core-compiler.z80
                    > USED AT LINE 134 IN core-compiler.z80
                    > USED AT LINE 47 IN core-does.z80
                    > USED AT LINE 22 IN core-format.z80
                    > USED AT LINE 28 IN core-format.z80
                    > USED AT LINE 16 IN core-interpret.z80
                    > USED AT LINE 68 IN core-interpret.z80
                    > USED AT LINE 69 IN core-interpret.z80
                    > USED AT LINE 92 IN core-interpret.z80
                    > USED AT LINE 104 IN core-interpret.z80
                    > USED AT LINE 115 IN core-interpret.z80
                    > USED AT LINE 146 IN core-interpret.z80
                    > USED AT LINE 147 IN core-interpret.z80
                    > USED AT LINE 149 IN core-interpret.z80
                    > USED AT LINE 172 IN core-interpret.z80
                    > USED AT LINE 192 IN core-interpret.z80
                    > USED AT LINE 227 IN core-interpret.z80
                    > USED AT LINE 41 IN core-io.z80
                    > USED AT LINE 54 IN core-io.z80
                    > USED AT LINE 143 IN core-io.z80
                    > USED AT LINE 157 IN core-io.z80
                    > USED AT LINE 103 IN core-memory.z80
                    > USED AT LINE 114 IN core-memory.z80
                    > USED AT LINE 131 IN core-memory.z80
                    > USED AT LINE 30 IN core-utils.z80
CSTOR:              0E1E DEFINED AT LINE 11
                    > USED AT LINE 174 IN core-io.z80
                    > USED AT LINE 145 IN core-memory.z80
                    > USED AT LINE 159 IN core-memory.z80
                    > USED AT LINE 187 IN core-memory.z80
CAT:                0E26 DEFINED AT LINE 11
                    > USED AT LINE 67 IN core-compiler.z80
                    > USED AT LINE 17 IN core-interpret.z80
                    > USED AT LINE 22 IN core-interpret.z80
                    > USED AT LINE 93 IN core-io.z80
                    > USED AT LINE 109 IN core-memory.z80
                    > USED AT LINE 7 IN core-utils.z80
                    > USED AT LINE 20 IN core-utils.z80
RAT:                0E2E DEFINED AT LINE 11
                    > USED AT LINE 253 IN core-alu.z80
                    > USED AT LINE 23 IN core-interpret.z80
                    > USED AT LINE 32 IN core-interpret.z80
                    > USED AT LINE 133 IN core-interpret.z80
                    > USED AT LINE 134 IN core-interpret.z80
                    > USED AT LINE 107 IN core-io.z80
                    > USED AT LINE 145 IN core-memory.z80
                    > USED AT LINE 54 IN core-utils.z80
RPAT:               0E38 DEFINED AT LINE 11
                    > USED AT LINE 185 IN core-interpret.z80
RPSTO:              0E40 DEFINED AT LINE 11
SPAT:               0E48 DEFINED AT LINE 11
                    > USED AT LINE 184 IN core-interpret.z80
                    > USED AT LINE 84 IN core-stacks.z80
                    > USED AT LINE 89 IN core-stacks.z80
SPSTO:              0E52 DEFINED AT LINE 11
PSTOR:              0E5A DEFINED AT LINE 11
                    > USED AT LINE 13 IN core-compiler.z80
DSTOR:              0E6C DEFINED AT LINE 11
DAT:                0E7C DEFINED AT LINE 11
COUNT:              0E8C DEFINED AT LINE 11
                    > USED AT LINE 44 IN core-compiler.z80
                    > USED AT LINE 59 IN core-compiler.z80
                    > USED AT LINE 119 IN core-io.z80
HERE:               0E9E DEFINED AT LINE 11
                    > USED AT LINE 18 IN core-compiler.z80
                    > USED AT LINE 71 IN core-compiler.z80
                    > USED AT LINE 9 IN core-control.z80
                    > USED AT LINE 43 IN core-control.z80
                    > USED AT LINE 48 IN core-control.z80
                    > USED AT LINE 121 IN core-interpret.z80
                    > USED AT LINE 119 IN core-memory.z80
PAD:                0EA8 DEFINED AT LINE 11
                    > USED AT LINE 17 IN core-format.z80
                    > USED AT LINE 53 IN core-format.z80
TIB:                0EB6 DEFINED AT LINE 11
                    > USED AT LINE 91 IN core-interpret.z80
                    > USED AT LINE 216 IN core-io.z80
ATEXE:              0EC2 DEFINED AT LINE 49
                    > USED AT LINE 92 IN core-compiler.z80
                    > USED AT LINE 231 IN core-interpret.z80
                    > USED AT LINE 267 IN core-interpret.z80
                    > USED AT LINE 202 IN core-io.z80
                    > USED AT LINE 211 IN core-io.z80
EXE1:               0ED0 DEFINED AT LINE 134 IN core-memory.z80
                    > USED AT LINE 132 IN core-memory.z80
CMOVE:              0ED2 DEFINED AT LINE 11
                    > USED AT LINE 188 IN core-memory.z80
CMOV1:              0EDC DEFINED AT LINE 143 IN core-memory.z80
                    > USED AT LINE 149 IN core-memory.z80
CMOV2:              0EF4 DEFINED AT LINE 148 IN core-memory.z80
                    > USED AT LINE 142 IN core-memory.z80
FILL:               0EFC DEFINED AT LINE 11
FILL1:              0F0A DEFINED AT LINE 158 IN core-memory.z80
                    > USED AT LINE 161 IN core-memory.z80
FILL2:              0F14 DEFINED AT LINE 160 IN core-memory.z80
                    > USED AT LINE 157 IN core-memory.z80
DTRAI:              0F1C DEFINED AT LINE 11
DTRA1:              0F26 DEFINED AT LINE 170 IN core-memory.z80
                    > USED AT LINE 175 IN core-memory.z80
DTRA2:              0F40 DEFINED AT LINE 174 IN core-memory.z80
                    > USED AT LINE 169 IN core-memory.z80
                    > USED AT LINE 172 IN core-memory.z80
PACKS:              0F4A DEFINED AT LINE 11
                    > USED AT LINE 116 IN core-interpret.z80
ALGND:              0F84 DEFINED AT LINE 11
                    > USED AT LINE 71 IN core-compiler.z80
                    > USED AT LINE 108 IN core-io.z80
                    > USED AT LINE 182 IN core-memory.z80
ALGN1:              0FA4 DEFINED AT LINE 197 IN core-memory.z80
                    > USED AT LINE 195 IN core-memory.z80
GREETING:           0FA8 DEFINED AT LINE 1 IN core-messages.z80
                    > USED AT LINE 35
ERR_DIVZERO:        0FB9 DEFINED AT LINE 12 IN core-messages.z80
                    > USED AT LINE 204 IN core-alu.z80
ERR_OUTOFRANGE:     0FCA DEFINED AT LINE 13 IN core-messages.z80
                    > USED AT LINE 207 IN core-alu.z80
TOR:                0FDE DEFINED AT LINE 11
                    > USED AT LINE 70 IN core-alu.z80
                    > USED AT LINE 249 IN core-alu.z80
                    > USED AT LINE 251 IN core-alu.z80
                    > USED AT LINE 323 IN core-alu.z80
                    > USED AT LINE 32 IN core-compiler.z80
                    > USED AT LINE 4 IN core-control.z80
                    > USED AT LINE 64 IN core-does.z80
                    > USED AT LINE 59 IN core-format.z80
                    > USED AT LINE 5 IN core-interpret.z80
                    > USED AT LINE 27 IN core-interpret.z80
                    > USED AT LINE 54 IN core-interpret.z80
                    > USED AT LINE 66 IN core-interpret.z80
                    > USED AT LINE 76 IN core-interpret.z80
                    > USED AT LINE 91 IN core-interpret.z80
                    > USED AT LINE 131 IN core-interpret.z80
                    > USED AT LINE 170 IN core-interpret.z80
                    > USED AT LINE 184 IN core-interpret.z80
                    > USED AT LINE 90 IN core-io.z80
                    > USED AT LINE 108 IN core-io.z80
                    > USED AT LINE 124 IN core-io.z80
                    > USED AT LINE 130 IN core-io.z80
                    > USED AT LINE 162 IN core-io.z80
                    > USED AT LINE 141 IN core-memory.z80
                    > USED AT LINE 144 IN core-memory.z80
                    > USED AT LINE 156 IN core-memory.z80
                    > USED AT LINE 168 IN core-memory.z80
                    > USED AT LINE 63 IN core-stacks.z80
                    > USED AT LINE 78 IN core-stacks.z80
                    > USED AT LINE 4 IN core-utils.z80
                    > USED AT LINE 17 IN core-utils.z80
                    > USED AT LINE 32 IN core-utils.z80
                    > USED AT LINE 51 IN core-utils.z80
RFROM:              0FEC DEFINED AT LINE 11
                    > USED AT LINE 72 IN core-alu.z80
                    > USED AT LINE 143 IN core-alu.z80
                    > USED AT LINE 255 IN core-alu.z80
                    > USED AT LINE 315 IN core-alu.z80
                    > USED AT LINE 31 IN core-compiler.z80
                    > USED AT LINE 82 IN core-control.z80
                    > USED AT LINE 82 IN core-control.z80
                    > USED AT LINE 36 IN core-does.z80
                    > USED AT LINE 47 IN core-does.z80
                    > USED AT LINE 11 IN core-interpret.z80
                    > USED AT LINE 39 IN core-interpret.z80
                    > USED AT LINE 39 IN core-interpret.z80
                    > USED AT LINE 43 IN core-interpret.z80
                    > USED AT LINE 44 IN core-interpret.z80
                    > USED AT LINE 61 IN core-interpret.z80
                    > USED AT LINE 63 IN core-interpret.z80
                    > USED AT LINE 79 IN core-interpret.z80
                    > USED AT LINE 83 IN core-interpret.z80
                    > USED AT LINE 83 IN core-interpret.z80
                    > USED AT LINE 85 IN core-interpret.z80
                    > USED AT LINE 93 IN core-interpret.z80
                    > USED AT LINE 137 IN core-interpret.z80
                    > USED AT LINE 155 IN core-interpret.z80
                    > USED AT LINE 160 IN core-interpret.z80
                    > USED AT LINE 171 IN core-interpret.z80
                    > USED AT LINE 176 IN core-interpret.z80
                    > USED AT LINE 177 IN core-interpret.z80
                    > USED AT LINE 186 IN core-interpret.z80
                    > USED AT LINE 187 IN core-interpret.z80
                    > USED AT LINE 193 IN core-interpret.z80
                    > USED AT LINE 194 IN core-interpret.z80
                    > USED AT LINE 195 IN core-interpret.z80
                    > USED AT LINE 107 IN core-io.z80
                    > USED AT LINE 131 IN core-io.z80
                    > USED AT LINE 147 IN core-memory.z80
                    > USED AT LINE 173 IN core-memory.z80
                    > USED AT LINE 42 IN core-utils.z80
                    > USED AT LINE 44 IN core-utils.z80
DUPP:               0FFA DEFINED AT LINE 11
                    > USED AT LINE 82 IN core-alu.z80
                    > USED AT LINE 247 IN core-alu.z80
                    > USED AT LINE 251 IN core-alu.z80
                    > USED AT LINE 18 IN core-compiler.z80
                    > USED AT LINE 31 IN core-compiler.z80
                    > USED AT LINE 56 IN core-compiler.z80
                    > USED AT LINE 67 IN core-compiler.z80
                    > USED AT LINE 70 IN core-compiler.z80
                    > USED AT LINE 74 IN core-compiler.z80
                    > USED AT LINE 23 IN core-format.z80
                    > USED AT LINE 34 IN core-format.z80
                    > USED AT LINE 59 IN core-format.z80
                    > USED AT LINE 9 IN core-interpret.z80
                    > USED AT LINE 11 IN core-interpret.z80
                    > USED AT LINE 27 IN core-interpret.z80
                    > USED AT LINE 41 IN core-interpret.z80
                    > USED AT LINE 76 IN core-interpret.z80
                    > USED AT LINE 144 IN core-interpret.z80
                    > USED AT LINE 146 IN core-interpret.z80
                    > USED AT LINE 147 IN core-interpret.z80
                    > USED AT LINE 149 IN core-interpret.z80
                    > USED AT LINE 162 IN core-interpret.z80
                    > USED AT LINE 167 IN core-interpret.z80
                    > USED AT LINE 265 IN core-interpret.z80
                    > USED AT LINE 60 IN core-io.z80
                    > USED AT LINE 93 IN core-io.z80
                    > USED AT LINE 173 IN core-io.z80
                    > USED AT LINE 179 IN core-io.z80
                    > USED AT LINE 196 IN core-io.z80
                    > USED AT LINE 102 IN core-memory.z80
                    > USED AT LINE 108 IN core-memory.z80
                    > USED AT LINE 144 IN core-memory.z80
                    > USED AT LINE 182 IN core-memory.z80
                    > USED AT LINE 183 IN core-memory.z80
                    > USED AT LINE 193 IN core-memory.z80
                    > USED AT LINE 55 IN core-stacks.z80
                    > USED AT LINE 56 IN core-stacks.z80
                    > USED AT LINE 7 IN core-utils.z80
                    > USED AT LINE 20 IN core-utils.z80
DROP:               0FFE DEFINED AT LINE 11
                    > USED AT LINE 50 IN core-alu.z80
                    > USED AT LINE 108 IN core-alu.z80
                    > USED AT LINE 114 IN core-alu.z80
                    > USED AT LINE 129 IN core-alu.z80
                    > USED AT LINE 137 IN core-alu.z80
                    > USED AT LINE 269 IN core-alu.z80
                    > USED AT LINE 309 IN core-alu.z80
                    > USED AT LINE 61 IN core-compiler.z80
                    > USED AT LINE 54 IN core-control.z80
                    > USED AT LINE 52 IN core-format.z80
                    > USED AT LINE 86 IN core-format.z80
                    > USED AT LINE 61 IN core-interpret.z80
                    > USED AT LINE 79 IN core-interpret.z80
                    > USED AT LINE 137 IN core-interpret.z80
                    > USED AT LINE 155 IN core-interpret.z80
                    > USED AT LINE 160 IN core-interpret.z80
                    > USED AT LINE 176 IN core-interpret.z80
                    > USED AT LINE 177 IN core-interpret.z80
                    > USED AT LINE 187 IN core-interpret.z80
                    > USED AT LINE 195 IN core-interpret.z80
                    > USED AT LINE 219 IN core-interpret.z80
                    > USED AT LINE 270 IN core-interpret.z80
                    > USED AT LINE 97 IN core-io.z80
                    > USED AT LINE 187 IN core-io.z80
                    > USED AT LINE 206 IN core-io.z80
                    > USED AT LINE 217 IN core-io.z80
                    > USED AT LINE 194 IN core-memory.z80
                    > USED AT LINE 68 IN core-stacks.z80
                    > USED AT LINE 68 IN core-stacks.z80
                    > USED AT LINE 11 IN core-utils.z80
                    > USED AT LINE 42 IN core-utils.z80
                    > USED AT LINE 44 IN core-utils.z80
SWAP:               1002 DEFINED AT LINE 11
                    > USED AT LINE 108 IN core-alu.z80
                    > USED AT LINE 121 IN core-alu.z80
                    > USED AT LINE 127 IN core-alu.z80
                    > USED AT LINE 135 IN core-alu.z80
                    > USED AT LINE 257 IN core-alu.z80
                    > USED AT LINE 48 IN core-control.z80
                    > USED AT LINE 59 IN core-control.z80
                    > USED AT LINE 64 IN core-control.z80
                    > USED AT LINE 12 IN core-format.z80
                    > USED AT LINE 19 IN core-interpret.z80
                    > USED AT LINE 20 IN core-interpret.z80
                    > USED AT LINE 23 IN core-interpret.z80
                    > USED AT LINE 29 IN core-interpret.z80
                    > USED AT LINE 32 IN core-interpret.z80
                    > USED AT LINE 36 IN core-interpret.z80
                    > USED AT LINE 65 IN core-interpret.z80
                    > USED AT LINE 144 IN core-interpret.z80
                    > USED AT LINE 156 IN core-interpret.z80
                    > USED AT LINE 194 IN core-interpret.z80
                    > USED AT LINE 187 IN core-io.z80
                    > USED AT LINE 90 IN core-memory.z80
                    > USED AT LINE 91 IN core-memory.z80
                    > USED AT LINE 96 IN core-memory.z80
                    > USED AT LINE 103 IN core-memory.z80
                    > USED AT LINE 109 IN core-memory.z80
                    > USED AT LINE 156 IN core-memory.z80
                    > USED AT LINE 188 IN core-memory.z80
                    > USED AT LINE 63 IN core-stacks.z80
OVER:               100A DEFINED AT LINE 11
                    > USED AT LINE 142 IN core-alu.z80
                    > USED AT LINE 264 IN core-alu.z80
                    > USED AT LINE 59 IN core-compiler.z80
                    > USED AT LINE 65 IN core-does.z80
                    > USED AT LINE 53 IN core-format.z80
                    > USED AT LINE 17 IN core-interpret.z80
                    > USED AT LINE 22 IN core-interpret.z80
                    > USED AT LINE 56 IN core-interpret.z80
                    > USED AT LINE 65 IN core-interpret.z80
                    > USED AT LINE 82 IN core-interpret.z80
                    > USED AT LINE 85 IN core-interpret.z80
                    > USED AT LINE 133 IN core-interpret.z80
                    > USED AT LINE 134 IN core-interpret.z80
                    > USED AT LINE 131 IN core-io.z80
                    > USED AT LINE 162 IN core-io.z80
                    > USED AT LINE 174 IN core-io.z80
                    > USED AT LINE 192 IN core-io.z80
                    > USED AT LINE 206 IN core-io.z80
                    > USED AT LINE 90 IN core-memory.z80
                    > USED AT LINE 96 IN core-memory.z80
                    > USED AT LINE 171 IN core-memory.z80
                    > USED AT LINE 183 IN core-memory.z80
                    > USED AT LINE 185 IN core-memory.z80
                    > USED AT LINE 73 IN core-stacks.z80
                    > USED AT LINE 73 IN core-stacks.z80
                    > USED AT LINE 16 IN core-utils.z80
QDUP:               1012 DEFINED AT LINE 11
                    > USED AT LINE 84 IN core-compiler.z80
                    > USED AT LINE 135 IN core-interpret.z80
                    > USED AT LINE 172 IN core-interpret.z80
                    > USED AT LINE 174 IN core-interpret.z80
                    > USED AT LINE 225 IN core-interpret.z80
                    > USED AT LINE 131 IN core-memory.z80
QDUP1:              101E DEFINED AT LINE 57 IN core-stacks.z80
ROT:                1020 DEFINED AT LINE 11
                    > USED AT LINE 78 IN core-stacks.z80
                    > USED AT LINE 35 IN core-utils.z80
                    > USED AT LINE 35 IN core-utils.z80
DDROP:              102E DEFINED AT LINE 11
                    > USED AT LINE 43 IN core-interpret.z80
                    > USED AT LINE 62 IN core-io.z80
                    > USED AT LINE 150 IN core-memory.z80
                    > USED AT LINE 162 IN core-memory.z80
DDUP:               1038 DEFINED AT LINE 11
                    > USED AT LINE 99 IN core-alu.z80
                    > USED AT LINE 113 IN core-alu.z80
                    > USED AT LINE 126 IN core-alu.z80
                    > USED AT LINE 134 IN core-alu.z80
                    > USED AT LINE 314 IN core-alu.z80
                    > USED AT LINE 194 IN core-io.z80
                    > USED AT LINE 159 IN core-memory.z80
                    > USED AT LINE 187 IN core-memory.z80
TWOSWAP:            1042 DEFINED AT LINE 11
PICK:               1050 DEFINED AT LINE 11
                    > USED AT LINE 54 IN core-utils.z80
DEPTH:              1064 DEFINED AT LINE 11
                    > USED AT LINE 256 IN core-interpret.z80
                    > USED AT LINE 50 IN core-utils.z80
SZERO:              107A DEFINED AT LINE 11
                    > USED AT LINE 89 IN core-stacks.z80
RZERO:              1082 DEFINED AT LINE 11
TQKEY:              108A DEFINED AT LINE 49
                    > USED AT LINE 41 IN core-io.z80
TEMIT:              1092 DEFINED AT LINE 49
                    > USED AT LINE 54 IN core-io.z80
TEXPE:              109A DEFINED AT LINE 49
                    > USED AT LINE 211 IN core-io.z80
TTAP:               10A2 DEFINED AT LINE 49
                    > USED AT LINE 202 IN core-io.z80
TECHO:              10AA DEFINED AT LINE 49
                    > USED AT LINE 165 IN core-io.z80
                    > USED AT LINE 173 IN core-io.z80
TPROM:              10B2 DEFINED AT LINE 49
                    > USED AT LINE 270 IN core-interpret.z80
BASE:               10BA DEFINED AT LINE 11
                    > USED AT LINE 28 IN core-format.z80
                    > USED AT LINE 16 IN core-interpret.z80
                    > USED AT LINE 29 IN core-interpret.z80
                    > USED AT LINE 44 IN core-interpret.z80
                    > USED AT LINE 143 IN core-io.z80
                    > USED AT LINE 30 IN core-utils.z80
TEMP:               10C2 DEFINED AT LINE 11
                    > USED AT LINE 50 IN core-interpret.z80
                    > USED AT LINE 68 IN core-interpret.z80
                    > USED AT LINE 69 IN core-interpret.z80
                    > USED AT LINE 153 IN core-interpret.z80
SPAN:               10CA DEFINED AT LINE 49
INN:                10D2 DEFINED AT LINE 11
NTIB:               10DA DEFINED AT LINE 49
                    > USED AT LINE 92 IN core-interpret.z80
                    > USED AT LINE 104 IN core-interpret.z80
                    > USED AT LINE 125 IN core-memory.z80
CSP:                10E2 DEFINED AT LINE 49
TEVAL:              10EA DEFINED AT LINE 49
                    > USED AT LINE 267 IN core-interpret.z80
TNUMB:              10F2 DEFINED AT LINE 49
                    > USED AT LINE 92 IN core-compiler.z80
                    > USED AT LINE 231 IN core-interpret.z80
HLD:                10FA DEFINED AT LINE 49
                    > USED AT LINE 17 IN core-format.z80
                    > USED AT LINE 22 IN core-format.z80
                    > USED AT LINE 23 IN core-format.z80
                    > USED AT LINE 52 IN core-format.z80
HANDL:              1102 DEFINED AT LINE 49
                    > USED AT LINE 185 IN core-interpret.z80
                    > USED AT LINE 186 IN core-interpret.z80
                    > USED AT LINE 192 IN core-interpret.z80
                    > USED AT LINE 193 IN core-interpret.z80
CNTXT:              110A DEFINED AT LINE 49
                    > USED AT LINE 167 IN core-interpret.z80
CRRNT:              1112 DEFINED AT LINE 49
                    > USED AT LINE 73 IN core-compiler.z80
CP:                 111A DEFINED AT LINE 49
                    > USED AT LINE 13 IN core-compiler.z80
                    > USED AT LINE 19 IN core-compiler.z80
                    > USED AT LINE 45 IN core-compiler.z80
                    > USED AT LINE 114 IN core-memory.z80
NP:                 1122 DEFINED AT LINE 49
                    > USED AT LINE 115 IN core-interpret.z80
LAST:               112A DEFINED AT LINE 11
                    > USED AT LINE 50 IN core-compiler.z80
                    > USED AT LINE 70 IN core-compiler.z80
                    > USED AT LINE 101 IN core-compiler.z80
                    > USED AT LINE 134 IN core-compiler.z80
VFRTH:              1132 DEFINED AT LINE 49
UTYPE:              113A DEFINED AT LINE 11
UTYP1:              1144 DEFINED AT LINE 6 IN core-utils.z80
                    > USED AT LINE 10 IN core-utils.z80
UTYP2:              1152 DEFINED AT LINE 9 IN core-utils.z80
                    > USED AT LINE 5 IN core-utils.z80
DMP:                115A DEFINED AT LINE 49
PDUM1:              116E DEFINED AT LINE 19 IN core-utils.z80
                    > USED AT LINE 23 IN core-utils.z80
PDUM2:              117E DEFINED AT LINE 22 IN core-utils.z80
                    > USED AT LINE 18 IN core-utils.z80
DUMP:               1184 DEFINED AT LINE 11
DUMP1:              1198 DEFINED AT LINE 33 IN core-utils.z80
                    > USED AT LINE 39 IN core-utils.z80
DUMP2:              11BC DEFINED AT LINE 41 IN core-utils.z80
                    > USED AT LINE 38 IN core-utils.z80
DUMP3:              11C0 DEFINED AT LINE 43 IN core-utils.z80
                    > USED AT LINE 40 IN core-utils.z80
DOTS:               11CA DEFINED AT LINE 11
DOTS1:              11D8 DEFINED AT LINE 53 IN core-utils.z80
                    > USED AT LINE 56 IN core-utils.z80
DOTS2:              11DE DEFINED AT LINE 55 IN core-utils.z80
                    > USED AT LINE 52 IN core-utils.z80
SPP:                2200 DEFINED AT LINE 3 IN variables.z80
                    > USED AT LINE 16
                    > USED AT LINE 5 IN defaults.z80
TIBB:               2200 DEFINED AT LINE 4 IN variables.z80
                    > USED AT LINE 18 IN defaults.z80
RPP:                2400 DEFINED AT LINE 6 IN variables.z80
                    > USED AT LINE 24
                    > USED AT LINE 6 IN defaults.z80
UPP:                2400 DEFINED AT LINE 7 IN variables.z80
                    > USED AT LINE 20
                    > USED AT LINE 42 IN core-does.z80
VARSZERO:           2400 DEFINED AT LINE 9 IN variables.z80
VARRZERO:           2402 DEFINED AT LINE 10 IN variables.z80
VARTQKEY:           2404 DEFINED AT LINE 11 IN variables.z80
VARTEMIT:           2406 DEFINED AT LINE 12 IN variables.z80
VARTEXPE:           2408 DEFINED AT LINE 13 IN variables.z80
VARTTAP:            240A DEFINED AT LINE 14 IN variables.z80
VARTECHO:           240C DEFINED AT LINE 15 IN variables.z80
VARTPROM:           240E DEFINED AT LINE 16 IN variables.z80
VARBASE:            2410 DEFINED AT LINE 17 IN variables.z80
VARTEMP:            2412 DEFINED AT LINE 18 IN variables.z80
VARSPAN:            2414 DEFINED AT LINE 19 IN variables.z80
VARINN:             2416 DEFINED AT LINE 20 IN variables.z80
VARNTIB:            2418 DEFINED AT LINE 21 IN variables.z80
VARTIB:             241A DEFINED AT LINE 22 IN variables.z80
VARCSP:             241C DEFINED AT LINE 23 IN variables.z80
VARTEVAL:           241E DEFINED AT LINE 24 IN variables.z80
VARTNUMB:           2420 DEFINED AT LINE 25 IN variables.z80
VARHLD:             2422 DEFINED AT LINE 26 IN variables.z80
VARHANDL:           2424 DEFINED AT LINE 27 IN variables.z80
VARCNTXT:           2426 DEFINED AT LINE 28 IN variables.z80
VARVOCABS:          2428 DEFINED AT LINE 29 IN variables.z80
VARCRRNT:           242A DEFINED AT LINE 30 IN variables.z80
VARVOCABLP:         242C DEFINED AT LINE 31 IN variables.z80
VARCP:              242E DEFINED AT LINE 32 IN variables.z80
VARNP:              2430 DEFINED AT LINE 33 IN variables.z80
VARLAST:            2432 DEFINED AT LINE 34 IN variables.z80
VARVFRTH:           2434 DEFINED AT LINE 35 IN variables.z80
VARVOCABL:          2436 DEFINED AT LINE 36 IN variables.z80
SERINPTR:           2438 DEFINED AT LINE 38 IN variables.z80
                    > USED AT LINE 17 IN interrupt.z80
                    > USED AT LINE 23 IN interrupt.z80
                    > USED AT LINE 7 IN serial.z80
SERRDPTR:           243A DEFINED AT LINE 39 IN variables.z80
                    > USED AT LINE 8 IN serial.z80
                    > USED AT LINE 22 IN serial.z80
                    > USED AT LINE 30 IN serial.z80
SERBUFUSED:         243C DEFINED AT LINE 40 IN variables.z80
                    > USED AT LINE 11 IN interrupt.z80
                    > USED AT LINE 26 IN interrupt.z80
                    > USED AT LINE 28 IN interrupt.z80
                    > USED AT LINE 10 IN serial.z80
                    > USED AT LINE 18 IN serial.z80
                    > USED AT LINE 31 IN serial.z80
                    > USED AT LINE 33 IN serial.z80
                    > USED AT LINE 55 IN serial.z80
SERBUF:             243E DEFINED AT LINE 41 IN variables.z80
                    > USED AT LINE 20 IN interrupt.z80
                    > USED AT LINE 22 IN interrupt.z80
                    > USED AT LINE 6 IN serial.z80
                    > USED AT LINE 25 IN serial.z80
                    > USED AT LINE 27 IN serial.z80
CPP:                247D DEFINED AT LINE 43 IN variables.z80
                    > USED AT LINE 28 IN defaults.z80
NPP:                FFFE DEFINED AT LINE 45 IN variables.z80
                    > USED AT LINE 29 IN defaults.z80

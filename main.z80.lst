0000                          .ENGINE   mycomputer   
0000                TESTMODE:   EQU   0   
0000                MEM_SIZE:   EQU   $10000   ; MEM is 64K
0000                ROM_SIZE:   EQU   $2000   ; ROM is 8K
0000                RAM_SIZE:   EQU   MEM_SIZE - ROM_SIZE   ; RAM is 64K - 8K
0000                START_ROM:   EQU   BM   ; inclusive
0000                END_ROM:   EQU   BM + ROM_SIZE   ; exclusive
0000                START_RAM:   EQU   BM + ROM_SIZE   ; inclusive
0000                END_RAM:   EQU   START_RAM + RAM_SIZE   ; exclusive
0000                BM:       EQU   0   ; bottom of ROM memory
0000                EM:       EQU   BM + MEM_SIZE   
0000                COMPO:    EQU   $20   ;lexicon compile only bit
0000                IMEDD:    EQU   $40   ;lexicon immediate bit
0000                MASKK:    EQU   $1F   ;lexicon bit mask
0000                CHARR:    EQU   1   ;byte size of a character
0000                CELLL:    EQU   2   
0000                BASEE:    EQU   10   ;BASE
0000                VOCSS:    EQU   8   ;depth of vocabulary stack
0000                MAXCHAR:   EQU   0FFh   ;Extended character set					                    ;  Use 07Fh for ASCII only
0000                MAXSIGNED:   EQU   07FFFh   ;max value of signed integer
0000                MAXUNSIGNED:   EQU   0FFFFh   ;max value of unsigned integer
0000                MAXNEGATIVE:   EQU   8000h   ;max value of negative integer
0000                BKSPP:    EQU   8   ;backspace
0000                LFF:      EQU   $0A   ;line feed
0000                CRR:      EQU   $0D   ;carriage return
0000                SPACEE:   EQU   $20   
0000                TIC:      EQU   $27   ;tick
0000                MINUSS:   EQU   $2D   
0000                UNDERSC:   EQU   $5F   
0000                CALLL:    EQU   $CD00   ; NOP followed by CALL opcodes
0000                US:       EQU   END_DEFAULTS - DEFAULTS   ;user area size
0000                RTS:      EQU   $100 * CELLL   ;return stack/TIB size
0000                DTS:      EQU   $100 * CELLL   ;data stack size
0000                RET_STACK_SIZE:   EQU   $100   
0000                DATA_STACK_SIZE:   EQU   $100   
0000                INT_ADDR:   EQU   $0038   
0000                SER_BUFSIZE:   EQU   $3F   
0000                SER_FULLSIZE:   EQU   $30   
0000                SER_EMPTYSIZE:   EQU   5   
0000                RTS_HIGH:   EQU   $D6   
0000                RTS_LOW:   EQU   $96   
0000                TRUEE:    EQU   -1   
0000                FALSEE:   EQU   0   
0000                             ; Initialize assembly variables
0000                VVCODE:   .SET   0   
0000                VVNAME:   .SET   END_ROM   
0000                VVLINK:   .SET   0   ;force a null link
0000                VVUSER:   .SET   0   ;first user variable offset
0000                .macro MCODE,aaLEX,aaNAME,aaLABEL
0000                             ; 
0000                 .align 2                                         ;;force to cell boundary
0000                aaLABEL:                                              ;;assembly label
0000                 vvCODE .set $
0000                 vvLEN  .set (aaLEX & 01FH) / CELLL              ;;string cell count, round down
0000                 ORG vvNAME - ((vvLEN + 3) * CELLL)                                     ; ? needed
0000                 vvNAME .set $
0000                 DW vvCODE, vvLINK                               ;;token pointer and link
0000                 vvLINK .set $                                   ;;link points to a name string
0000                 DB aaLEX, aaNAME                                    ;;name string
0000                 ORG vvCODE                                      ;;restore code pointer
0000                .endm
0000                 
0000                .macro MCOLON,aaLEX,aaNAME,aaLABEL
0000                             ; 
0000                 mCODE aaLEX, aaNAME, aaLABEL
0000                 nop
0000                 CALL doLIST
0000                .endm
0000                 
0000                .macro MUSER,aaLEX,aaNAME,aaLABEL
0000                             ; 
0000                	mCODE aaLEX, aaNAME, aaLABEL
0000                 nop
0000                 CALL doLIST
0000                 DW DoUSE,vvUSER
0000                 vvUSER .set vvUSER + CELLL
0000                .endm
0000                 
0000                             ; .align 2
0000                .macro MDSTR,aaFUNC,aaSTR
0000                             ; 
0000                 DW aaFUNC                       ;;function
0000                 vvLEN .set $                    ;;save address of count byte
0000                 DB 0,aaSTR                      ;;count byte and string
0000                 vvCODE .set $                   ;;save code pointer
0000                ORG vvLEN                           ;;point to count byte
0000                 DB vvCODE - vvLEN - 1           ;;set count
0000                ORG vvCODE                          ;;restore code pointer
0000                .endm
0000                 
0000                .macro HCODE,aaLEX,aaNAME,aaLABEL
0000                             ; 
0000                 .align 2                                         ;;force to cell boundary
0000                aaLABEL:                                              ;;assembly label
0000                .endm
0000                 
0000                .macro HCOLON,aaLEX,aaNAME,aaLABEL
0000                             ; 
0000                 hCODE aaLEX, aaNAME, aaLABEL
0000                 nop
0000                 CALL doLIST
0000                .endm
0000                 
0000                .macro HUSER,aaLEX,aaNAME,aaLABEL
0000                             ; 
0000                	hCODE aaLEX, aaNAME, aaLABEL
0000                 nop
0000                 CALL doLIST
0000                 DW DoUSE,vvUSER
0000                 vvUSER .set vvUSER + CELLL
0000                .endm
0000                 
0000                             ; 	LD	E,(HL)	                    ; 7t
0000                             ; 	INC	HL	                        ; 6t
0000                             ; 	LD	D,(HL)	                    ; 7t
0000                             ; 	INC	HL	                        ; 6t
0000                             ; 	EX	DE,HL	                    ; 4t
0000                             ; 	JP	(HL)	                    ; 4t
0000                .macro MNEXTHL,
0000                             ; 
0000                 JP (IY)
0000                .endm
0000                 
0000                .macro MNEXT,
0000                             ; 
0000                	EX	DE,HL	                    ; 4t
0000                 mNEXTHL                         ; 34t
0000                .endm
0000                 
0000                          .ORG   START_ROM   
0000   C3 6A 00     RESET:    JP   INIT   ; C3 veclo vechi
0008                          .ORG   $08   
0008   2A 7D 24     RST08:    LD   HL,(vRST08)   
000B   E9                     JP   (HL)   
0010                          .ORG   $10   
0010   2A 7F 24     RST10:    LD   HL,(vRST10)   
0013   E9                     JP   (HL)   
0018                          .ORG   $18   
0018   2A 81 24     RST18:    LD   HL,(vRST18)   
001B   E9                     JP   (HL)   
0020                          .ORG   $20   
0020   2A 83 24     RST20:    LD   HL,(vRST20)   
0023   E9                     JP   (HL)   
0028                          .ORG   $28   
0028   2A 85 24     RST28:    LD   HL,(vRST28)   
002B   E9                     JP   (HL)   
0030                          .ORG   $30   
0030   2A 87 24     RST30:    LD   HL,(vRST30)   
0033   E9                     JP   (HL)   
0038                          .ORG   $38   
0038   2A 89 24     RST38:    LD   HL,(vINT)   
003B   E9                     JP   (HL)   
0066                          .ORG   $66   
0066   2A 8B 24     RST66:    LD   HL,(vNMI)   
0069   E9                     JP   (HL)   
006A                INIT:        
006A   21 99 00               LD   HL,serialInt   
006D   22 89 24               LD   (vINT),HL   
0070   21 00 22               LD   HL,SPP   ; Setup Forth data stack
0073   F9                     LD   SP,HL   ; also used as return stack by interrupts etc
0074   21 2D 01               LD   HL,DEFAULTS   ; initialize user variables with defaults
0077   11 00 24               LD   DE,UPP   
007A   01 3A 00               LD   BC,US   
007D   ED B0                  LDIR      
007F   DD 21 00 24            LD   IX,RPP   ; set up Forth return stack
0083   FD 21 E6 0D            LD   IY,NEXT_STEP   
0087   01 FF FF               LD   BC,-1   ; empty stack marker
008A   11 01 00               LD   DE,RESET + 1   ; contains reset vector
008D   C3 C6 0D               JP   KOLD   
0090                          IF   TESTMODE   
                              JP   TESTS_START   
0090                          ELSE      
0090                             ; LD      HL,GREETING
0090                             ; CALL    PRINTSZ
0090                LOOP:        
0090   CD E7 00               CALL   RXA   
0093   CD 12 01               CALL   TXA   
0096   C3 90 00               JP   LOOP   
0099                          ENDIF      
0099   F5           SERIALINT:   PUSH   AF   
009A   E5                     PUSH   HL   
009B   DB 80                  IN   A,($80)   
009D   E6 01                  AND   $01   ; Check if interupt due to read buffer full
009F   28 2D                  JR   Z,rts0   ; if not, ignore
00A1   DB 81                  IN   A,($81)   
00A3   F5                     PUSH   AF   
00A4   3A 3C 24               LD   A,(serBufUsed)   
00A7   FE 3F                  CP   SER_BUFSIZE   ; If full then ignore
00A9   20 03                  JR   NZ,notFull   
00AB   F1                     POP   AF   
00AC   18 20                  JR   rts0   
00AE   2A 38 24     NOTFULL:   LD   HL,(serInPtr)   
00B1   23                     INC   HL   
00B2   7D                     LD   A,L   ; Only need to check low byte becasuse buffer<256 bytes
00B3   FE 7D                  CP   (serBuf+SER_BUFSIZE) & $FF   
00B5   20 03                  JR   NZ,notWrap   
00B7   21 3E 24               LD   HL,serBuf   
00BA   22 38 24     NOTWRAP:   LD   (serInPtr),HL   
00BD   F1                     POP   AF   
00BE   77                     LD   (HL),A   
00BF   3A 3C 24               LD   A,(serBufUsed)   
00C2   3C                     INC   A   
00C3   32 3C 24               LD   (serBufUsed),A   
00C6   FE 30                  CP   SER_FULLSIZE   
00C8   38 04                  JR   C,rts0   
00CA   3E D6                  LD   A,RTS_HIGH   
00CC   D3 80                  OUT   ($80),A   
00CE   E1           RTS0:     POP   HL   
00CF   F1                     POP   AF   
00D0   FB                     EI      
00D1   ED 4D                  RETI      
00D3                             ; Modified from code by Grant Searle
00D3                             ; Minimum 6850 ACIA interrupt driven serial I/O
00D3                INIT_IO:      
00D3   F3                     DI      ; Disable interrupts
00D4   21 3E 24               LD   HL,serBuf   
00D7   22 38 24               LD   (serInPtr),HL   
00DA   22 3A 24               LD   (serRdPtr),HL   
00DD   AF                     XOR   A   
00DE   32 3C 24               LD   (serBufUsed),A   
00E1   3E 96                  LD   A,RTS_LOW   
00E3   D3 80                  OUT   ($80),A   ; Initialise ACIA
00E5   FB                     EI      
00E6   C9                     RET      
00E7                RXA:         
00E7                WAITFORCHAR:      
00E7   3A 3C 24               LD   A,(serBufUsed)   
00EA   FE 00                  CP   $00   
00EC   28 F9                  JR   Z,waitForChar   
00EE   E5                     PUSH   HL   
00EF   2A 3A 24               LD   HL,(serRdPtr)   
00F2   23                     INC   HL   
00F3   7D                     LD   A,L   ; Only need to check low byte becasuse buffer<256 bytes
00F4   FE 7D                  CP   (serBuf+SER_BUFSIZE) & $FF   
00F6   20 03                  JR   NZ,notRdWrap   
00F8   21 3E 24               LD   HL,serBuf   
00FB                NOTRDWRAP:      
00FB   F3                     DI      
00FC   22 3A 24               LD   (serRdPtr),HL   
00FF   3A 3C 24               LD   A,(serBufUsed)   
0102   3D                     DEC   A   
0103   32 3C 24               LD   (serBufUsed),A   
0106   FE 05                  CP   SER_EMPTYSIZE   
0108   30 04                  JR   NC,rts1   
010A   3E 96                  LD   A,RTS_LOW   
010C   D3 80                  OUT   ($80),A   
010E                RTS1:        
010E   7E                     LD   A,(HL)   
010F   FB                     EI      
0110   E1                     POP   HL   
0111   C9                     RET      ; Char ready in A
0112                TXA:         
0112   F5                     PUSH   AF   ; Store character
0113                CONOUT1:      
0113   DB 80                  IN   A,($80)   ; Status byte
0115   CB 4F                  BIT   1,A   ; Set Zero flag if still transmitting character
0117   28 FA                  JR   Z,conout1   ; Loop until flag signals ready
0119   F1                     POP   AF   ; Retrieve character
011A   D3 81                  OUT   ($81),A   ; Output the character
011C   C9                     RET      
011D                CKINCHAR:      
011D   3A 3C 24               LD   A,(serBufUsed)   
0120   FE 00                  CP   $0   
0122   C9                     RET      
0123                PRINTSZ:      
0123   7E                     LD   A,(HL)   ; Get character
0124   B7                     OR   A   ; Is it $00 ?
0125   C8                     RET   Z   ; Then RETurn on terminator
0126   CD 12 01               CALL   TXA   ; Print it
0129   23                     INC   HL   ; Next Character
012A   18 F7                  JR   PRINTSZ   ; Continue until $00
012C   C9                     RET      
012D                             ; .align 2
012D                DEFAULTS:      
012D                UZERO:       
012D   00 22        DEFSZERO:   DW   SPP   ; SP0
012F   00 24        DEFRZERO:   DW   RPP   ; RP0
0131   8A 0B        DEFTQKEY:   DW   QRX   ; '?KEY
0133   A2 0B        DEFTEMIT:   DW   TXSTO   ; 'EMIT
0135   00 00        DEFTEXPE:   DW   0   ; 'EXPECT
0137   00 00        DEFTTAP:   DW   0   ; 'TAP
0139   A2 0B        DEFTECHO:   DW   TXSTO   ; 'ECHO
013B   00 00        DEFTPROM:   DW   0   ; 'PROMPT
013D   00 00        DEFBASE:   DW   0   ; BASE
013F   00 00        DEFTEMP:   DW   0   ; tmp
0141   00 00        DEFSPAN:   DW   0   ; SPAN
0143   00 00        DEFINN:   DW   0   ; >IN
0145   00 00        DEFNTIB:   DW   0   ; #TIB
0147   00 22        DEFTIB:   DW   TIBB   ; TIB
0149   00 00        DEFCSP:   DW   0   ; CSP
014B   00 00        DEFTEVAL:   DW   0   ; 'EVAL
014D   00 00        DEFTNUMB:   DW   0   ; 'NUMBER
014F   00 00        DEFHLD:   DW   0   ; HLD
0151   00 00        DEFHANDL:   DW   0   ; HANDLER
0153   00 00        DEFCNTXT:   DW   0   ; CONTEXT pointer
0155   00 00        DEFVOCABS:   DW   0   ; vocabulary stack    ???
0157   00 00        DEFCRRENT:   DW   0   ; CURRENT pointer
0159   00 00        DEFVOCABLP:   DW   0   ; vocabulary link pointer ???
015B   8D 24        DEFCP:    DW   CPP   ; CP  for runing phase on RAM
015D   FE FF        DEFNP:    DW   NPP   ; NP  for runing phase on RAM
015F   00 00        DEFLAST:   DW   0   ; LAST
0161   00 00        DEFVFRTH:   DW   0   ; FORTH   \ mullti-user ???
0163   00 00        DEFVOCABL:   DW   0   ; vocabulary link       ???
0165   00 00        DEFCOLD:   DW   0   ; "COLD"
0167                ULAST:       
0167                END_DEFAULTS:      
0167                VVCODE:   .SET   $   
0167                             ;   0<          ( n -- t )
0167                             ;               Return true if n is negative.
0167                          ;*Macro unroll: mCODE	2,'0<', ZLESS
0167                          ALIGN   2   
0168                ZLESS:       
0168                VVCODE:   .SET   $   
0168                VVLEN:    .SET   (2 & 01FH) / CELLL   
1FF8                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FF8                VVNAME:   .SET   $   
1FF8   68 01 00 00            DW   vvCODE,vvLINK   
1FFC                VVLINK:   .SET   $   
1FFC   02 30 3C               DB   2,"0<"   
0168                          .ORG   vvCODE   
0168   CB 20                  SLA   B   ; sign bit -> cy flag
016A   9F                     SBC   A,A   ; propagate cy through A
016B   47                     LD   B,A   ; put 0000 or FFFF in TOS
016C   4F                     LD   C,A   
016D                          ;*Macro unroll: 	mNEXT
016D   EB                     EX   DE,HL   
016E                          ;*Macro unroll:  mNEXTHL                         ; 34t
016E   FD E9                  JP   (IY)   ; 34t
0170                             ;   AND         ( w w -- w )
0170                             ;               Bitwise AND.
0170                          ;*Macro unroll: mCODE	3, 'AND', ANDD
0170                          ALIGN   2   
0170                ANDD:        
0170                VVCODE:   .SET   $   
0170                VVLEN:    .SET   (3 & 01FH) / CELLL   
1FF0                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FF0                VVNAME:   .SET   $   
1FF0   70 01 FC 1F            DW   vvCODE,vvLINK   
1FF4                VVLINK:   .SET   $   
1FF4   03 41 4E 44            DB   3,"AND"   
0170                          .ORG   vvCODE   
0170   E1                     POP   HL   
0171   78                     LD   A,B   
0172   A4                     AND   H   
0173   47                     LD   B,A   
0174   79                     LD   A,C   
0175   A5                     AND   L   
0176   4F                     LD   C,A   
0177                          ;*Macro unroll: 	mNEXT
0177   EB                     EX   DE,HL   
0178                          ;*Macro unroll:  mNEXTHL                         ; 34t
0178   FD E9                  JP   (IY)   ; 34t
017A                             ;   OR          ( w w -- w )
017A                             ;               Bitwise inclusive OR.
017A                          ;*Macro unroll: mCODE	2,'OR', ORR
017A                          ALIGN   2   
017A                ORR:         
017A                VVCODE:   .SET   $   
017A                VVLEN:    .SET   (2 & 01FH) / CELLL   
1FE8                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FE8                VVNAME:   .SET   $   
1FE8   7A 01 F4 1F            DW   vvCODE,vvLINK   
1FEC                VVLINK:   .SET   $   
1FEC   02 4F 52               DB   2,"OR"   
017A                          .ORG   vvCODE   
017A   E1                     POP   HL   
017B   78                     LD   A,B   
017C   B4                     OR   H   
017D   47                     LD   B,A   
017E   79                     LD   A,C   
017F   B5                     OR   L   
0180   4F                     LD   C,A   
0181                          ;*Macro unroll: 	mNEXT
0181   EB                     EX   DE,HL   
0182                          ;*Macro unroll:  mNEXTHL                         ; 34t
0182   FD E9                  JP   (IY)   ; 34t
0184                             ;   XOR         ( w w -- w )
0184                             ;               Bitwise exclusive
0184                          ;*Macro unroll: mCODE	3, 'XOR', XORR
0184                          ALIGN   2   
0184                XORR:        
0184                VVCODE:   .SET   $   
0184                VVLEN:    .SET   (3 & 01FH) / CELLL   
1FE0                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FE0                VVNAME:   .SET   $   
1FE0   84 01 EC 1F            DW   vvCODE,vvLINK   
1FE4                VVLINK:   .SET   $   
1FE4   03 58 4F 52            DB   3,"XOR"   
0184                          .ORG   vvCODE   
0184   E1                     POP   HL   
0185   78                     LD   A,B   
0186   AC                     XOR   H   
0187   47                     LD   B,A   
0188   79                     LD   A,C   
0189   AD                     XOR   L   
018A   4F                     LD   C,A   
018B                          ;*Macro unroll: 	mNEXT
018B   EB                     EX   DE,HL   
018C                          ;*Macro unroll:  mNEXTHL                         ; 34t
018C   FD E9                  JP   (IY)   ; 34t
018E                             ;   +           ( w w -- sum )
018E                             ;               Add top two items.
018E                          ;*Macro unroll: mCOLON	1,'+', PLUS
018E                          ;*Macro unroll:  mCODE 1, "+", PLUS
018E                          ALIGN   2   
018E                PLUS:        
018E                VVCODE:   .SET   $   
018E                VVLEN:    .SET   (1 & 01FH) / CELLL   
1FDA                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FDA                VVNAME:   .SET   $   
1FDA   8E 01 E4 1F            DW   vvCODE,vvLINK   
1FDE                VVLINK:   .SET   $   
1FDE   01 2B                  DB   1,"+"   
018E                          .ORG   vvCODE   
018E   00                     NOP      
018F   CD 16 06               CALL   doLIST   
0192   66 02 0E 10 4C 06      DW   UMPlus,DROP,EXIT   
0198                             ;   NOT         ( w -- w )
0198                             ;               One's complement of tos.
0198                          ;*Macro unroll: mCOLON  3, 'NOT', INVER
0198                          ;*Macro unroll:  mCODE 3, "NOT", INVER
0198                          ALIGN   2   
0198                INVER:       
0198                VVCODE:   .SET   $   
0198                VVLEN:    .SET   (3 & 01FH) / CELLL   
1FD2                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FD2                VVNAME:   .SET   $   
1FD2   98 01 DE 1F            DW   vvCODE,vvLINK   
1FD6                VVLINK:   .SET   $   
1FD6   03 4E 4F 54            DB   3,"NOT"   
0198                          .ORG   vvCODE   
0198   00                     NOP      
0199   CD 16 06               CALL   doLIST   
019C   24 06 FF FF 84 01 4C 06 DW   DOLIT,-1,XORR,EXIT   
01A4                             ;   NEGAT      ( n -- -n )
01A4                             ;               Two's complement of tos.
01A4                          ;*Macro unroll: mCOLON	6,'NEGATE',NEGAT
01A4                          ;*Macro unroll:  mCODE 6, "NEGATE", NEGAT
01A4                          ALIGN   2   
01A4                NEGAT:       
01A4                VVCODE:   .SET   $   
01A4                VVLEN:    .SET   (6 & 01FH) / CELLL   
1FC6                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FC6                VVNAME:   .SET   $   
1FC6   A4 01 D6 1F            DW   vvCODE,vvLINK   
1FCA                VVLINK:   .SET   $   
1FCA   06 4E 45 47 41 54 45   DB   6,"NEGATE"   
01A4                          .ORG   vvCODE   
01A4   00                     NOP      
01A5   CD 16 06               CALL   doLIST   
01A8   98 01 24 06 01 00 8E 01 4C 06 DW   INVER,DOLIT,1,Plus,EXIT   
01B2                             ;   DNEGATE     ( d -- -d )
01B2                             ;               Two's complement of top double.
01B2                          ;*Macro unroll: mCOLON	7,'DNEGATE',DNEGA
01B2                          ;*Macro unroll:  mCODE 7, "DNEGATE", DNEGA
01B2                          ALIGN   2   
01B2                DNEGA:       
01B2                VVCODE:   .SET   $   
01B2                VVLEN:    .SET   (7 & 01FH) / CELLL   
1FBA                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FBA                VVNAME:   .SET   $   
1FBA   B2 01 CA 1F            DW   vvCODE,vvLINK   
1FBE                VVLINK:   .SET   $   
1FBE   07 44 4E 45 47 41 54 45 DB   7,"DNEGATE"   
01B2                          .ORG   vvCODE   
01B2   00                     NOP      
01B3   CD 16 06               CALL   doLIST   
01B6   98 01 EE 0F 98 01      DW   INVER,ToR,INVER   
01BC   24 06 01 00 66 02      DW   DOLIT,1,UMPlus   
01C2   FC 0F 8E 01 4C 06      DW   RFrom,Plus,EXIT   
01C8                             ;   -           ( n1 n2 -- n1-n2 )
01C8                             ;               Subtraction.
01C8                          ;*Macro unroll: mCOLON	1, '-', SUBB
01C8                          ;*Macro unroll:  mCODE 1, "-", SUBB
01C8                          ALIGN   2   
01C8                SUBB:        
01C8                VVCODE:   .SET   $   
01C8                VVLEN:    .SET   (1 & 01FH) / CELLL   
1FB4                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FB4                VVNAME:   .SET   $   
1FB4   C8 01 BE 1F            DW   vvCODE,vvLINK   
1FB8                VVLINK:   .SET   $   
1FB8   01 2D                  DB   1,"-"   
01C8                          .ORG   vvCODE   
01C8   00                     NOP      
01C9   CD 16 06               CALL   doLIST   
01CC   A4 01 8E 01 4C 06      DW   NEGAT,Plus,EXIT   
01D2                             ;   ABS         ( n -- n )
01D2                             ;               Return the absolute value of n.
01D2                          ;*Macro unroll: mCOLON	3,'ABS',ABSS
01D2                          ;*Macro unroll:  mCODE 3, "ABS", ABSS
01D2                          ALIGN   2   
01D2                ABSS:        
01D2                VVCODE:   .SET   $   
01D2                VVLEN:    .SET   (3 & 01FH) / CELLL   
1FAC                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FAC                VVNAME:   .SET   $   
1FAC   D2 01 B8 1F            DW   vvCODE,vvLINK   
1FB0                VVLINK:   .SET   $   
1FB0   03 41 42 53            DB   3,"ABS"   
01D2                          .ORG   vvCODE   
01D2   00                     NOP      
01D3   CD 16 06               CALL   doLIST   
01D6   0A 10 68 01 22 0E E0 01 DW   DUPP,ZLESS,QBRAN,ABS1   
01DE   A4 01                  DW   NEGAT   
01E0                ABS1:        
01E0   4C 06                  DW   EXIT   
01E2                             ;   =           ( w w -- t )
01E2                             ;               Return true if top two are equal.
01E2                          ;*Macro unroll: mCOLON	1, '=', EQUAL
01E2                          ;*Macro unroll:  mCODE 1, "=", EQUAL
01E2                          ALIGN   2   
01E2                EQUAL:       
01E2                VVCODE:   .SET   $   
01E2                VVLEN:    .SET   (1 & 01FH) / CELLL   
1FA6                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FA6                VVNAME:   .SET   $   
1FA6   E2 01 B0 1F            DW   vvCODE,vvLINK   
1FAA                VVLINK:   .SET   $   
1FAA   01 3D                  DB   1,"="   
01E2                          .ORG   vvCODE   
01E2   00                     NOP      
01E3   CD 16 06               CALL   doLIST   
01E6   84 01                  DW   XORR   
01E8   22 0E F2 01            DW   QBRAN,EQU1   
01EC   24 06 00 00 4C 06      DW   DOLIT,0,EXIT   ;false flag
01F2                EQU1:        
01F2   24 06 FF FF 4C 06      DW   DOLIT,-1,EXIT   ;true flag
01F8                             ;   U<          ( u u -- t )
01F8                             ;               Unsigned compare of top two items.
01F8                          ;*Macro unroll: mCOLON	2,'U<',ULESS
01F8                          ;*Macro unroll:  mCODE 2, "U<", ULESS
01F8                          ALIGN   2   
01F8                ULESS:       
01F8                VVCODE:   .SET   $   
01F8                VVLEN:    .SET   (2 & 01FH) / CELLL   
1F9E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F9E                VVNAME:   .SET   $   
1F9E   F8 01 AA 1F            DW   vvCODE,vvLINK   
1FA2                VVLINK:   .SET   $   
1FA2   02 55 3C               DB   2,"U<"   
01F8                          .ORG   vvCODE   
01F8   00                     NOP      
01F9   CD 16 06               CALL   doLIST   
01FC   48 10 84 01 68 01      DW   DDUP,XORR,ZLESS   
0202   22 0E 0E 02            DW   QBRAN,ULES1   
0206   12 10 0E 10 68 01 4C 06 DW   SWAP,DROP,ZLESS,EXIT   
020E                ULES1:       
020E   C8 01 68 01 4C 06      DW   SUBB,ZLESS,EXIT   
0214                             ;   <           ( n1 n2 -- t )
0214                             ;               is less than
0214                          ;*Macro unroll: mCOLON	1,'<',LESS
0214                          ;*Macro unroll:  mCODE 1, "<", LESS
0214                          ALIGN   2   
0214                LESS:        
0214                VVCODE:   .SET   $   
0214                VVLEN:    .SET   (1 & 01FH) / CELLL   
1F98                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F98                VVNAME:   .SET   $   
1F98   14 02 A2 1F            DW   vvCODE,vvLINK   
1F9C                VVLINK:   .SET   $   
1F9C   01 3C                  DB   1,"<"   
0214                          .ORG   vvCODE   
0214   00                     NOP      
0215   CD 16 06               CALL   doLIST   
0218   48 10 84 01 68 01 22 0E 28 02 DW   DDUP,XORR,ZLESS,QBRAN,LESS1   
0222   0E 10 68 01 4C 06      DW   DROP,ZLESS,EXIT   
0228                LESS1:       
0228   C8 01 68 01 4C 06      DW   SUBB,ZLESS,EXIT   
022E                             ;   MAX         ( n n -- n )
022E                             ;               Return the greater of two top stack items.
022E                          ;*Macro unroll: mCOLON	3,'MAX',MAX
022E                          ;*Macro unroll:  mCODE 3, "MAX", MAX
022E                          ALIGN   2   
022E                MAX:         
022E                VVCODE:   .SET   $   
022E                VVLEN:    .SET   (3 & 01FH) / CELLL   
1F90                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F90                VVNAME:   .SET   $   
1F90   2E 02 9C 1F            DW   vvCODE,vvLINK   
1F94                VVLINK:   .SET   $   
1F94   03 4D 41 58            DB   3,"MAX"   
022E                          .ORG   vvCODE   
022E   00                     NOP      
022F   CD 16 06               CALL   doLIST   
0232   48 10 14 02 22 0E 3C 02 DW   DDUP,LESS,QBRAN,MAX1   
023A   12 10                  DW   SWAP   
023C                MAX1:        
023C   0E 10 4C 06            DW   DROP,EXIT   
0240                             ;   MIN         ( n n -- n )
0240                             ;               Return the smaller of top two stack items.
0240                          ;*Macro unroll: mCOLON	3,'MIN',MIN
0240                          ;*Macro unroll:  mCODE 3, "MIN", MIN
0240                          ALIGN   2   
0240                MIN:         
0240                VVCODE:   .SET   $   
0240                VVLEN:    .SET   (3 & 01FH) / CELLL   
1F88                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F88                VVNAME:   .SET   $   
1F88   40 02 94 1F            DW   vvCODE,vvLINK   
1F8C                VVLINK:   .SET   $   
1F8C   03 4D 49 4E            DB   3,"MIN"   
0240                          .ORG   vvCODE   
0240   00                     NOP      
0241   CD 16 06               CALL   doLIST   
0244   48 10 12 10 14 02      DW   DDUP,SWAP,LESS   
024A   22 0E 50 02            DW   QBRAN,MIN1   
024E   12 10                  DW   SWAP   
0250                MIN1:        
0250   0E 10 4C 06            DW   DROP,EXIT   
0254                             ;   WITHIN      ( u ul uh -- t )
0254                             ;               Return true if u is within the range of ul and uh.
0254                          ;*Macro unroll: mCOLON	6,'WITHIN',WITHI
0254                          ;*Macro unroll:  mCODE 6, "WITHIN", WITHI
0254                          ALIGN   2   
0254                WITHI:       
0254                VVCODE:   .SET   $   
0254                VVLEN:    .SET   (6 & 01FH) / CELLL   
1F7C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F7C                VVNAME:   .SET   $   
1F7C   54 02 8C 1F            DW   vvCODE,vvLINK   
1F80                VVLINK:   .SET   $   
1F80   06 57 49 54 48 49 4E   DB   6,"WITHIN"   
0254                          .ORG   vvCODE   
0254   00                     NOP      
0255   CD 16 06               CALL   doLIST   
0258   1A 10 C8 01 EE 0F      DW   OVER,SUBB,ToR   ;ul <= u < uh
025E   C8 01 FC 0F F8 01 4C 06 DW   SUBB,RFrom,ULess,EXIT   
0266                             ;   UM+         ( w w -- w cy )
0266                             ;               Add two numbers, return the sum and carry flag.
0266                          ;*Macro unroll: hCODE	3,'um+',UMPlus
0266                          ALIGN   2   
0266                UMPLUS:      
0266   E1                     POP   HL   ;10t
0267   09                     ADD   HL,BC   ;11t
0268   E5                     PUSH   HL   ;11t
0269   01 00 00               LD   BC,0   ;10t
026C   30 01                  JR   NC,UMP1   ;12/7t
026E                UMP2:        
026E   03                     INC   BC   ; 6t
026F                UMP1:        
026F                          ;*Macro unroll:  mNEXT
026F   EB                     EX   DE,HL   
0270                          ;*Macro unroll:  mNEXTHL                         ; 34t
0270   FD E9                  JP   (IY)   ; 34t
0272                             ; UM/MOD      ( udl udh u -- ur uq )
0272                             ; Unsigned divide of a double by a single. Return mod and quotient.
0272                             ; Note: Less range than eForth because most significant word discarded TODO: fix
0272                          ;*Macro unroll: mCOLON  6,'UM/MOD',UMMOD
0272                          ;*Macro unroll:  mCODE 6, "UM/MOD", UMMOD
0272                          ALIGN   2   
0272                UMMOD:       
0272                VVCODE:   .SET   $   
0272                VVLEN:    .SET   (6 & 01FH) / CELLL   
1F70                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F70                VVNAME:   .SET   $   
1F70   72 02 80 1F            DW   vvCODE,vvLINK   
1F74                VVLINK:   .SET   $   
1F74   06 55 4D 2F 4D 4F 44   DB   6,"UM/MOD"   
0272                          .ORG   vvCODE   
0272   00                     NOP      
0273   CD 16 06               CALL   doLIST   
0276   12 10 0E 10 7E 02 4C 06 DW   SWAP,DROP,UMSLMOD2,EXIT   
027E                             ; UM/MOD2	( ud u1 -- u2 u3 )		
027E                             ; Unsigned division of a double-cell number ud by a single-cell
027E                             ; number u1. Return remainder u2 and quotient u3.
027E                             ; Note: Less range than eForth TODO: fix
027E                          ;*Macro unroll: mCODE	6,'UM/MOD2',UMSLMOD2
027E                          ALIGN   2   
027E                UMSLMOD2:      
027E                VVCODE:   .SET   $   
027E                VVLEN:    .SET   (6 & 01FH) / CELLL   
1F64                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F64                VVNAME:   .SET   $   
1F64   7E 02 74 1F            DW   vvCODE,vvLINK   
1F68                VVLINK:   .SET   $   
1F68   06 55 4D 2F 4D 4F 44 32 DB   6,"UM/MOD2"   
027E                          .ORG   vvCODE   
027E   78                     LD   A,B   
027F   B1                     OR   C   
0280   28 25                  JR   Z,UMMOD2   ;?zero divisor
0282                UMMOD11:      
0282   C5                     PUSH   BC   
0283   D9                     EXX      
0284   C1                     POP   BC   
0285   E1                     POP   HL   
0286   D1                     POP   DE   
0287   7D                     LD   A,L   
0288   91                     SUB   C   
0289   7C                     LD   A,H   
028A   98                     SBC   A,B   
028B   30 20                  JR   NC,UMMOD1   ;?too big
028D                UMMOD12:      
028D   7C                     LD   A,H   
028E   65                     LD   H,L   
028F   6A                     LD   L,D   
0290   16 08                  LD   D,8   
0292   D5                     PUSH   DE   
0293   CD C1 02               CALL   UMMOD3   
0296   D1                     POP   DE   
0297   E5                     PUSH   HL   
0298   6B                     LD   L,E   
0299   CD C1 02               CALL   UMMOD3   
029C   57                     LD   D,A   
029D   5C                     LD   E,H   
029E   C1                     POP   BC   
029F   61                     LD   H,C   
02A0   D5                     PUSH   DE   
02A1   E5                     PUSH   HL   
02A2   D9                     EXX      
02A3   C1                     POP   BC   
02A4                          ;*Macro unroll: 	mNEXT
02A4   EB                     EX   DE,HL   
02A5                          ;*Macro unroll:  mNEXTHL                         ; 34t
02A5   FD E9                  JP   (IY)   ; 34t
02A7                UMMOD2:      
02A7   01 DA 0F               LD   BC,ERR_DIVZERO   ; divide by 0
02AA   C3 36 0E               JP   THROWX   
02AD                UMMOD1:      
02AD   01 E2 0F               LD   BC,ERR_OUTOFRANGE   ; result out of range
02B0   C3 36 0E               JP   THROWX   
02B3                UMMOD4:      
02B3   5F                     LD   E,A   
02B4   7C                     LD   A,H   
02B5   91                     SUB   C   
02B6   67                     LD   H,A   
02B7   7B                     LD   A,E   
02B8   98                     SBC   A,B   
02B9   30 10                  JR   NC,UMMOD5   
02BB                UMMOD13:      
02BB   7C                     LD   A,H   
02BC   81                     ADD   A,C   
02BD   67                     LD   H,A   
02BE   7B                     LD   A,E   
02BF   15                     DEC   D   
02C0   C8                     RET   Z   
02C1                UMMOD3:      
02C1   29                     ADD   HL,HL   
02C2   17                     RLA      
02C3   30 EE                  JR   NC,UMMOD4   
02C5                UMMOD14:      
02C5   5F                     LD   E,A   
02C6   7C                     LD   A,H   
02C7   91                     SUB   C   
02C8   67                     LD   H,A   
02C9   7B                     LD   A,E   
02CA   98                     SBC   A,B   
02CB                UMMOD5:      
02CB   2C                     INC   L   
02CC   15                     DEC   D   
02CD   20 F2                  JR   NZ,UMMOD3   
02CF                UMMOD15:      
02CF   C9                     RET      
02D0                             ;   FM/MOD	( d n1 -- n2 n3 )		\ CORE
02D0                             ;		Signed floored divide of double by single. Return mod n2
02D0                             ;		and quotient n3.
02D0                             ; TODO: this is usually called M/MOD in eForth
02D0                          ;*Macro unroll: mCOLON	6,'M/MOD',MSMOD
02D0                          ;*Macro unroll:  mCODE 6, "M/MOD", MSMOD
02D0                          ALIGN   2   
02D0                MSMOD:       
02D0                VVCODE:   .SET   $   
02D0                VVLEN:    .SET   (6 & 01FH) / CELLL   
1F58                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F58                VVNAME:   .SET   $   
1F58   D0 02 68 1F            DW   vvCODE,vvLINK   
1F5C                VVLINK:   .SET   $   
1F5C   06 4D 2F 4D 4F 44      DB   6,"M/MOD"   
02D0                          .ORG   vvCODE   
02D0   00                     NOP      
02D1   CD 16 06               CALL   doLIST   
02D4   0A 10 68 01 0A 10 EE 0F DW   DUPP,ZLESS,DUPP,TOR   
02DC   22 0E E8 02            DW   QBRAN,MMOD1   
02E0   A4 01 EE 0F B2 01 FC 0F DW   NEGAT,TOR,DNEGA,RFROM   
02E8                MMOD1:       
02E8   EE 0F 0A 10 68 01      DW   TOR,DUPP,ZLESS   
02EE   22 0E F6 02            DW   QBRAN,MMOD2   
02F2   60 0E 8E 01            DW   RAT,PLUS   
02F6                MMOD2:       
02F6   FC 0F 72 02 FC 0F      DW   RFROM,UMMOD,RFROM   
02FC   22 0E 06 03            DW   QBRAN,MMOD3   
0300   12 10 A4 01 12 10      DW   SWAP,NEGAT,SWAP   
0306                MMOD3:       
0306   4C 06                  DW   EXIT   
0308                             ;   /MOD        ( n n -- r q )
0308                             ;               Signed divide. Return mod and quotient.
0308                          ;*Macro unroll: mCOLON	4,'/MOD',SLMOD
0308                          ;*Macro unroll:  mCODE 4, "/MOD", SLMOD
0308                          ALIGN   2   
0308                SLMOD:       
0308                VVCODE:   .SET   $   
0308                VVLEN:    .SET   (4 & 01FH) / CELLL   
1F4E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F4E                VVNAME:   .SET   $   
1F4E   08 03 5C 1F            DW   vvCODE,vvLINK   
1F52                VVLINK:   .SET   $   
1F52   04 2F 4D 4F 44         DB   4,"/MOD"   
0308                          .ORG   vvCODE   
0308   00                     NOP      
0309   CD 16 06               CALL   doLIST   
030C   1A 10 68 01 12 10 D0 02 4C 06 DW   OVER,ZLESS,SWAP,MSMOD,EXIT   
0316                             ;   MOD         ( n n -- r )
0316                             ;               Signed divide. Return mod only.
0316                          ;*Macro unroll: mCOLON	3,'MOD',MODD
0316                          ;*Macro unroll:  mCODE 3, "MOD", MODD
0316                          ALIGN   2   
0316                MODD:        
0316                VVCODE:   .SET   $   
0316                VVLEN:    .SET   (3 & 01FH) / CELLL   
1F46                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F46                VVNAME:   .SET   $   
1F46   16 03 52 1F            DW   vvCODE,vvLINK   
1F4A                VVLINK:   .SET   $   
1F4A   03 4D 4F 44            DB   3,"MOD"   
0316                          .ORG   vvCODE   
0316   00                     NOP      
0317   CD 16 06               CALL   doLIST   
031A   08 03 0E 10 4C 06      DW   SLMOD,DROP,EXIT   
0320                             ; 
0320                             ;   /           ( n n -- q )
0320                             ;               Signed divide. Return quotient only.
0320                          ;*Macro unroll: mCOLON	1,'/',SLASH
0320                          ;*Macro unroll:  mCODE 1, "/", SLASH
0320                          ALIGN   2   
0320                SLASH:       
0320                VVCODE:   .SET   $   
0320                VVLEN:    .SET   (1 & 01FH) / CELLL   
1F40                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F40                VVNAME:   .SET   $   
1F40   20 03 4A 1F            DW   vvCODE,vvLINK   
1F44                VVLINK:   .SET   $   
1F44   01 2F                  DB   1,"/"   
0320                          .ORG   vvCODE   
0320   00                     NOP      
0321   CD 16 06               CALL   doLIST   
0324   08 03 12 10 0E 10 4C 06 DW   SLMOD,SWAP,DROP,EXIT   
032C                             ; Multiply
032C                             ;   UM*         ( u u -- ud )
032C                             ;               Unsigned multiply. Return double product.
032C                          ;*Macro unroll: mCODE	3,'UM*',UMSTA
032C                          ALIGN   2   
032C                UMSTA:       
032C                VVCODE:   .SET   $   
032C                VVLEN:    .SET   (3 & 01FH) / CELLL   
1F38                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F38                VVNAME:   .SET   $   
1F38   2C 03 44 1F            DW   vvCODE,vvLINK   
1F3C                VVLINK:   .SET   $   
1F3C   03 55 4D 2A            DB   3,"UM*"   
032C                          .ORG   vvCODE   
032C   EB                     EX   DE,HL   
032D   E3                     EX   (SP),HL   
032E   EB                     EX   DE,HL   
032F   21 00 00               LD   HL,0   
0332   3E 10                  LD   A,010h   
0334                UMSTA1:      
0334   29                     ADD   HL,HL   
0335   EB                     EX   DE,HL   
0336   ED 6A                  ADC   HL,HL   
0338   EB                     EX   DE,HL   
0339   30 04                  JR   NC,UMSTA3   
033B                UMSTA2:      
033B   09                     ADD   HL,BC   
033C   30 01                  JR   NC,UMSTA3   
033E                UMSTA5:      
033E   13                     INC   DE   
033F                UMSTA3:      
033F   3D                     DEC   A   
0340   20 F2                  JR   NZ,UMSTA1   
0342                UMSTA4:      
0342   42                     LD   B,D   
0343   4B                     LD   C,E   
0344   E3                     EX   (SP),HL   
0345                          ;*Macro unroll: 	mNEXTHL
0345   FD E9                  JP   (IY)   
0347                             ;   *           ( n n -- n )
0347                             ;               Signed multiply. Return single product.
0347                          ;*Macro unroll: mCOLON	1,'*',STAR
0347                          ;*Macro unroll:  mCODE 1, "*", STAR
0347                          ALIGN   2   
0348                STAR:        
0348                VVCODE:   .SET   $   
0348                VVLEN:    .SET   (1 & 01FH) / CELLL   
1F32                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F32                VVNAME:   .SET   $   
1F32   48 03 3C 1F            DW   vvCODE,vvLINK   
1F36                VVLINK:   .SET   $   
1F36   01 2A                  DB   1,"*"   
0348                          .ORG   vvCODE   
0348   00                     NOP      
0349   CD 16 06               CALL   doLIST   
034C   2C 03 0E 10 4C 06      DW   UMSTA,DROP,EXIT   
0352                             ;   M*          ( n n -- d )
0352                             ;               Signed multiply. Return double product.
0352                          ;*Macro unroll: mCOLON	2,'M*',MSTAR,
0352                          ;*Macro unroll:  mCODE 2, "M*", MSTAR
0352                          ALIGN   2   
0352                MSTAR:       
0352                VVCODE:   .SET   $   
0352                VVLEN:    .SET   (2 & 01FH) / CELLL   
1F2A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F2A                VVNAME:   .SET   $   
1F2A   52 03 36 1F            DW   vvCODE,vvLINK   
1F2E                VVLINK:   .SET   $   
1F2E   02 4D 2A               DB   2,"M*"   
0352                          .ORG   vvCODE   
0352   00                     NOP      
0353   CD 16 06               CALL   doLIST   
0356   48 10 84 01 68 01 EE 0F D2 01 12 10 D2 01 DW   DDUP,XORR,ZLESS,ToR,ABSS,SWAP,ABSS   
0364   2C 03 FC 0F 22 0E 6E 03 DW   UMSTA,RFrom,QBRAN,MSTAR1   
036C   B2 01                  DW   DNEGA   
036E                MSTAR1:      
036E   4C 06                  DW   EXIT   
0370                             ;   */MOD       ( n1 n2 n3 -- r q )
0370                             ;               Multiply n1 and n2, then divide by n3. Return mod and quotient.
0370                          ;*Macro unroll: mCOLON	5,'*/MOD',SSMOD
0370                          ;*Macro unroll:  mCODE 5, "*/MOD", SSMOD
0370                          ALIGN   2   
0370                SSMOD:       
0370                VVCODE:   .SET   $   
0370                VVLEN:    .SET   (5 & 01FH) / CELLL   
1F20                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F20                VVNAME:   .SET   $   
1F20   70 03 2E 1F            DW   vvCODE,vvLINK   
1F24                VVLINK:   .SET   $   
1F24   05 2A 2F 4D 4F 44      DB   5,"*/MOD"   
0370                          .ORG   vvCODE   
0370   00                     NOP      
0371   CD 16 06               CALL   doLIST   
0374   EE 0F 52 03 FC 0F D0 02 4C 06 DW   ToR,MStar,RFrom,MSMOD,EXIT   
037E                             ;   */          ( n1 n2 n3 -- q )
037E                             ;               Multiply n1 by n2, then divide by n3. Return quotient only.
037E                          ;*Macro unroll: mCOLON	2,'*/',STASL
037E                          ;*Macro unroll:  mCODE 2, "*/", STASL
037E                          ALIGN   2   
037E                STASL:       
037E                VVCODE:   .SET   $   
037E                VVLEN:    .SET   (2 & 01FH) / CELLL   
1F18                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F18                VVNAME:   .SET   $   
1F18   7E 03 24 1F            DW   vvCODE,vvLINK   
1F1C                VVLINK:   .SET   $   
1F1C   02 2A 2F               DB   2,"*/"   
037E                          .ORG   vvCODE   
037E   00                     NOP      
037F   CD 16 06               CALL   doLIST   
0382   70 03 12 10 0E 10 4C 06 DW   SSMOD,SWAP,DROP,EXIT   
038A                             ;   CELL+       ( a -- a )
038A                             ;               Add cell size in byte to address.
038A                          ;*Macro unroll: mCOLON	5,'CELL+',CELLP
038A                          ;*Macro unroll:  mCODE 5, "CELL+", CELLP
038A                          ALIGN   2   
038A                CELLP:       
038A                VVCODE:   .SET   $   
038A                VVLEN:    .SET   (5 & 01FH) / CELLL   
1F0E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F0E                VVNAME:   .SET   $   
1F0E   8A 03 1C 1F            DW   vvCODE,vvLINK   
1F12                VVLINK:   .SET   $   
1F12   05 43 45 4C 4C 2B      DB   5,"CELL+"   
038A                          .ORG   vvCODE   
038A   00                     NOP      
038B   CD 16 06               CALL   doLIST   
038E   24 06 02 00 8E 01 4C 06 DW   DOLIT,CELLL,PLUS,EXIT   
0396                             ;   CELL-       ( a -- a )
0396                             ;               Subtract cell size in byte from address.
0396                          ;*Macro unroll: mCOLON	5,'CELL-',CELLM
0396                          ;*Macro unroll:  mCODE 5, "CELL-", CELLM
0396                          ALIGN   2   
0396                CELLM:       
0396                VVCODE:   .SET   $   
0396                VVLEN:    .SET   (5 & 01FH) / CELLL   
1F04                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F04                VVNAME:   .SET   $   
1F04   96 03 12 1F            DW   vvCODE,vvLINK   
1F08                VVLINK:   .SET   $   
1F08   05 43 45 4C 4C 2D      DB   5,"CELL-"   
0396                          .ORG   vvCODE   
0396   00                     NOP      
0397   CD 16 06               CALL   doLIST   
039A   24 06 FE FF 8E 01 4C 06 DW   DOLIT,-CELLL,PLUS,EXIT   
03A2                             ;   CELLS       ( n -- n )
03A2                             ;               Multiply tos by cell size in bytes.
03A2                          ;*Macro unroll: mCOLON	5,'CELLS',CELLS
03A2                          ;*Macro unroll:  mCODE 5, "CELLS", CELLS
03A2                          ALIGN   2   
03A2                CELLS:       
03A2                VVCODE:   .SET   $   
03A2                VVLEN:    .SET   (5 & 01FH) / CELLL   
1EFA                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1EFA                VVNAME:   .SET   $   
1EFA   A2 03 08 1F            DW   vvCODE,vvLINK   
1EFE                VVLINK:   .SET   $   
1EFE   05 43 45 4C 4C 53      DB   5,"CELLS"   
03A2                          .ORG   vvCODE   
03A2   00                     NOP      
03A3   CD 16 06               CALL   doLIST   
03A6   24 06 02 00 48 03 4C 06 DW   DOLIT,CELLL,STAR,EXIT   
03AE                             ;   '           ( -- ca )
03AE                             ;               Search context vocabularies for the next word in input stream.
03AE                          ;*Macro unroll: mCOLON  1,"'",TICK
03AE                          ;*Macro unroll:  mCODE 1, "'", TICK
03AE                          ALIGN   2   
03AE                TICK:        
03AE                VVCODE:   .SET   $   
03AE                VVLEN:    .SET   (1 & 01FH) / CELLL   
1EF4                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1EF4                VVNAME:   .SET   $   
1EF4   AE 03 FE 1E            DW   vvCODE,vvLINK   
1EF8                VVLINK:   .SET   $   
1EF8   01 27                  DB   1,"'"   
03AE                          .ORG   vvCODE   
03AE   00                     NOP      
03AF   CD 16 06               CALL   doLIST   
03B2   4E 09 30 0A            DW   TOKEN,NAMEQ   ;?defined
03B6   22 0E BC 03            DW   QBRAN,TICK1   
03BA   4C 06                  DW   EXIT   ;yes, push code address
03BC                TICK1:       
03BC   92 0A                  DW   THROW   ;no, error
03BE                             ;   ALLOT       ( n -- )
03BE                             ;               Allocate n bytes to the code dictionary.
03BE                          ;*Macro unroll: mCOLON  5,'ALLOT',ALLOT
03BE                          ;*Macro unroll:  mCODE 5, "ALLOT", ALLOT
03BE                          ALIGN   2   
03BE                ALLOT:       
03BE                VVCODE:   .SET   $   
03BE                VVLEN:    .SET   (5 & 01FH) / CELLL   
1EEA                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1EEA                VVNAME:   .SET   $   
1EEA   BE 03 F8 1E            DW   vvCODE,vvLINK   
1EEE                VVLINK:   .SET   $   
1EEE   05 41 4C 4C 4F 54      DB   5,"ALLOT"   
03BE                          .ORG   vvCODE   
03BE   00                     NOP      
03BF   CD 16 06               CALL   doLIST   
03C2   2A 11 8C 0E 4C 06      DW   CP,PSTOR,EXIT   ;adjust code pointer
03C8                             ;   ,           ( w -- )
03C8                             ;               Compile an integer into the code dictionary.
03C8                          ;*Macro unroll: mCOLON  1,',',COMMA
03C8                          ;*Macro unroll:  mCODE 1, ",", COMMA
03C8                          ALIGN   2   
03C8                COMMA:       
03C8                VVCODE:   .SET   $   
03C8                VVLEN:    .SET   (1 & 01FH) / CELLL   
1EE4                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1EE4                VVNAME:   .SET   $   
1EE4   C8 03 EE 1E            DW   vvCODE,vvLINK   
1EE8                VVLINK:   .SET   $   
1EE8   01 2C                  DB   1,","   
03C8                          .ORG   vvCODE   
03C8   00                     NOP      
03C9   CD 16 06               CALL   doLIST   
03CC   D0 0E 0A 10 8A 03      DW   HERE,DUPP,CELLP   ;cell boundary
03D2   2A 11 3E 0E 3E 0E 4C 06 DW   CP,STORE,STORE,EXIT   ;adjust code pointer, compile
03DA                             ;   [COMPILE]   ( -- ; <string> )
03DA                             ;               Compile the next immediate word into code dictionary.
03DA                          ;*Macro unroll: mCOLON  IMEDD+9,'[COMPILE]',BCOMP
03DA                          ;*Macro unroll:  mCODE IMEDD+9, "[COMPILE]", BCOMP
03DA                          ALIGN   2   
03DA                BCOMP:       
03DA                VVCODE:   .SET   $   
03DA                VVLEN:    .SET   (IMEDD+9 & 01FH) / CELLL   
1E96                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1E96                VVNAME:   .SET   $   
1E96   DA 03 E8 1E            DW   vvCODE,vvLINK   
1E9A                VVLINK:   .SET   $   
1E9A   49 5B 43 4F 4D 50 49 4C 45 5D DB   IMEDD+9,"[COMPILE]"   
03DA                          .ORG   vvCODE   
03DA   00                     NOP      
03DB   CD 16 06               CALL   doLIST   
03DE   AE 03 C8 03 4C 06      DW   TICK,COMMA,EXIT   
03E4                             ;   COMPILE     ( -- )
03E4                             ;               Compile the next address in colon list to code dictionary.
03E4                          ;*Macro unroll: mCOLON  COMPO+7,'COMPILE',COMPI
03E4                          ;*Macro unroll:  mCODE COMPO+7, "COMPILE", COMPI
03E4                          ALIGN   2   
03E4                COMPI:       
03E4                VVCODE:   .SET   $   
03E4                VVLEN:    .SET   (COMPO+7 & 01FH) / CELLL   
1E6A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1E6A                VVNAME:   .SET   $   
1E6A   E4 03 9A 1E            DW   vvCODE,vvLINK   
1E6E                VVLINK:   .SET   $   
1E6E   27 43 4F 4D 50 49 4C 45 DB   COMPO+7,"COMPILE"   
03E4                          .ORG   vvCODE   
03E4   00                     NOP      
03E5   CD 16 06               CALL   doLIST   
03E8   FC 0F 0A 10 48 0E C8 03 DW   RFROM,DUPP,AT,COMMA   ;compile address
03F0   8A 03 EE 0F 4C 06      DW   CELLP,TOR,EXIT   ;adjust return address
03F6                             ;   LITERAL     ( w -- )
03F6                             ;               Compile tos to code dictionary as an integer literal.
03F6                          ;*Macro unroll: mCOLON  IMEDD+7,'LITERAL',LITER
03F6                          ;*Macro unroll:  mCODE IMEDD+7, "LITERAL", LITER
03F6                          ALIGN   2   
03F6                LITER:       
03F6                VVCODE:   .SET   $   
03F6                VVLEN:    .SET   (IMEDD+7 & 01FH) / CELLL   
1E1E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1E1E                VVNAME:   .SET   $   
1E1E   F6 03 6E 1E            DW   vvCODE,vvLINK   
1E22                VVLINK:   .SET   $   
1E22   47 4C 49 54 45 52 41 4C DB   IMEDD+7,"LITERAL"   
03F6                          .ORG   vvCODE   
03F6   00                     NOP      
03F7   CD 16 06               CALL   doLIST   
03FA   E4 03 24 06 C8 03 4C 06 DW   COMPI,DOLIT,COMMA,EXIT   
0402                             ;   $,"         ( -- )
0402                             ;               Compile a literal string up to next " .
0402                          ;*Macro unroll: hCOLON  3,'$,|',STRCQ
0402                          ;*Macro unroll:  hCODE 3, "$,|", STRCQ
0402                          ALIGN   2   
0402                STRCQ:       
0402   00                     NOP      
0403   CD 16 06               CALL   doLIST   
0406   24 06 22 00 6A 09      DW   DOLIT,$22,WORDD   ;move string to code dictionary
040C   BE 0E 8E 01 B6 0F      DW   COUNT,PLUS,ALGND   ;calculate aligned end of string
0412   2A 11 3E 0E 4C 06      DW   CP,STORE,EXIT   ;adjust the code pointer
0418                             ;   RECURSE     ( -- )
0418                             ;               Make the current word available for compilation.
0418                          ;*Macro unroll: mCOLON  IMEDD+7,'RECURSE',RECUR
0418                          ;*Macro unroll:  mCODE IMEDD+7, "RECURSE", RECUR
0418                          ALIGN   2   
0418                RECUR:       
0418                VVCODE:   .SET   $   
0418                VVLEN:    .SET   (IMEDD+7 & 01FH) / CELLL   
1DD2                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1DD2                VVNAME:   .SET   $   
1DD2   18 04 22 1E            DW   vvCODE,vvLINK   
1DD6                VVLINK:   .SET   $   
1DD6   47 52 45 43 55 52 53 45 DB   IMEDD+7,"RECURSE"   
0418                          .ORG   vvCODE   
0418   00                     NOP      
0419   CD 16 06               CALL   doLIST   
041C   3A 11 48 0E 76 09 C8 03 4C 06 DW   LAST,AT,NAMET,COMMA,EXIT   
0426                             ;   ?UNIQUE     ( a -- a )
0426                             ;               Display a warning message if the word already exists.
0426                          ;*Macro unroll: mCOLON  7,'?UNIQUE',UNIQU
0426                          ;*Macro unroll:  mCODE 7, "?UNIQUE", UNIQU
0426                          ALIGN   2   
0426                UNIQU:       
0426                VVCODE:   .SET   $   
0426                VVLEN:    .SET   (7 & 01FH) / CELLL   
1DC6                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1DC6                VVNAME:   .SET   $   
1DC6   26 04 D6 1D            DW   vvCODE,vvLINK   
1DCA                VVLINK:   .SET   $   
1DCA   07 3F 55 4E 49 51 55 45 DB   7,"?UNIQUE"   
0426                          .ORG   vvCODE   
0426   00                     NOP      
0427   CD 16 06               CALL   doLIST   
042A   0A 10 30 0A            DW   DUPP,NAMEQ   ;?name exists
042E   22 0E 42 04            DW   QBRAN,UNIQ1   ;redefinitions are OK
0432                          ;*Macro unroll:  mDSTR   DOTQP,' reDef '         ;but warn the user
0432   6E 0C                  DW   DOTQP   ;but warn the user
0434                VVLEN:    .SET   $   
0434   00 20 72 65 44 65 66 20 DB   0," reDef "   
043C                VVCODE:   .SET   $   
0434                          .ORG   vvLEN   
0434   07                     DB   vvCODE - vvLEN - 1   
043C                          .ORG   vvCODE   
043C   1A 10 BE 0E 14 0C      DW   OVER,COUNT,TYPEE   ;just in case its not planned
0442                UNIQ1:       
0442   0E 10 4C 06            DW   DROP,EXIT   
0446                             ;   $,n         ( na -- )
0446                             ;               Build a new dictionary name using the string at na.
0446                          ;*Macro unroll: mCOLON  3,'$,n',SNAME
0446                          ;*Macro unroll:  mCODE 3, "$,n", SNAME
0446                          ALIGN   2   
0446                SNAME:       
0446                VVCODE:   .SET   $   
0446                VVLEN:    .SET   (3 & 01FH) / CELLL   
1DBE                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1DBE                VVNAME:   .SET   $   
1DBE   46 04 CA 1D            DW   vvCODE,vvLINK   
1DC2                VVLINK:   .SET   $   
1DC2   03 24 2C 6E            DB   3,"$,n"   
0446                          .ORG   vvCODE   
0446   00                     NOP      
0447   CD 16 06               CALL   doLIST   
044A   0A 10 58 0E            DW   DUPP,CAT   ;?null input
044E   22 0E 78 04            DW   QBRAN,PNAM1   
0452   26 04                  DW   UNIQU   ;?redefinition
0454   0A 10 3A 11 3E 0E      DW   DUPP,LAST,STORE   ;save na for vocabulary link
045A   D0 0E B6 0F 12 10      DW   HERE,ALGND,SWAP   ;align code address
0460   96 03                  DW   CELLM   ;link address
0462   22 11 48 0E 48 0E 1A 10 3E 0E DW   CRRNT,AT,AT,OVER,STORE   
046C   96 03 0A 10 32 11 3E 0E DW   CELLM,DUPP,NP,STORE   ;adjust name pointer
0474   3E 0E 4C 06            DW   STORE,EXIT   ;save code pointer
0478                PNAM1:       
0478                          ;*Macro unroll:  mDSTR   STRQP,' name'           ;null input
0478   66 0C                  DW   STRQP   ;null input
047A                VVLEN:    .SET   $   
047A   00 20 6E 61 6D 65      DB   0," name"   
0480                VVCODE:   .SET   $   
047A                          .ORG   vvLEN   
047A   05                     DB   vvCODE - vvLEN - 1   
0480                          .ORG   vvCODE   
0480   92 0A                  DW   THROW   
0482                             ;   $COMPILE    ( a -- )
0482                             ;               Compile next word to code dictionary as a token or literal.
0482                          ;*Macro unroll: hCOLON  8,'$COMPILE',SCOMP
0482                          ;*Macro unroll:  hCODE 8, "$COMPILE", SCOMP
0482                          ALIGN   2   
0482                SCOMP:       
0482   00                     NOP      
0483   CD 16 06               CALL   doLIST   
0486   30 0A 22 10            DW   NAMEQ,QDUP   ;?defined
048A   22 0E A2 04            DW   QBRAN,SCOM2   
048E   48 0E 24 06 40 00 70 01 DW   AT,DOLIT,IMEDD,ANDD   ;?immediate
0496   22 0E 9E 04            DW   QBRAN,SCOM1   
049A   1E 0E 4C 06            DW   EXECU,EXIT   ;its immediate, execute
049E                SCOM1:       
049E   C8 03 4C 06            DW   COMMA,EXIT   ;its not immediate, compile
04A2                SCOM2:       
04A2   02 11 F4 0E            DW   TNUMB,ATEXE   ;try to convert to number
04A6   22 0E AE 04            DW   QBRAN,SCOM3   
04AA   F6 03 4C 06            DW   LITER,EXIT   ;compile number as integer
04AE   92 0A        SCOM3:    DW   THROW   ;error
04B0                             ;   OVERT       ( -- )
04B0                             ;               Link a new word into the current vocabulary.
04B0                          ;*Macro unroll: hCOLON  5,'OVERT',OVERT
04B0                          ;*Macro unroll:  hCODE 5, "OVERT", OVERT
04B0                          ALIGN   2   
04B0                OVERT:       
04B0   00                     NOP      
04B1   CD 16 06               CALL   doLIST   
04B4   3A 11 48 0E 22 11 48 0E 3E 0E 4C 06 DW   LAST,AT,CRRNT,AT,STORE,EXIT   
04C0                             ;   ;           ( -- )
04C0                             ;               Terminate a colon definition.
04C0                          ;*Macro unroll: mCOLON  IMEDD+COMPO+1,';',SEMIS
04C0                          ;*Macro unroll:  mCODE IMEDD+COMPO+1, ";", SEMIS
04C0                          ALIGN   2   
04C0                SEMIS:       
04C0                VVCODE:   .SET   $   
04C0                VVLEN:    .SET   (IMEDD+COMPO+1 & 01FH) / CELLL   
1D58                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1D58                VVNAME:   .SET   $   
1D58   C0 04 C2 1D            DW   vvCODE,vvLINK   
1D5C                VVLINK:   .SET   $   
1D5C   61 3B                  DB   IMEDD+COMPO+1,";"   
04C0                          .ORG   vvCODE   
04C0   00                     NOP      
04C1   CD 16 06               CALL   doLIST   
04C4   E4 03 4C 06 0C 0B B0 04 4C 06 DW   COMPI,EXIT,LBRAC,OVERT,EXIT   
04CE                             ;   ]           ( -- )
04CE                             ;               Start compiling the words in the input stream.
04CE                          ;*Macro unroll: mCOLON  1,']',RBRAC
04CE                          ;*Macro unroll:  mCODE 1, "]", RBRAC
04CE                          ALIGN   2   
04CE                RBRAC:       
04CE                VVCODE:   .SET   $   
04CE                VVLEN:    .SET   (1 & 01FH) / CELLL   
1D52                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1D52                VVNAME:   .SET   $   
1D52   CE 04 5C 1D            DW   vvCODE,vvLINK   
1D56                VVLINK:   .SET   $   
1D56   01 5D                  DB   1,"]"   
04CE                          .ORG   vvCODE   
04CE   00                     NOP      
04CF   CD 16 06               CALL   doLIST   
04D2   24 06 82 04 FA 10 3E 0E 4C 06 DW   DOLIT,SCOMP,TEVAL,STORE,EXIT   
04DC                             ;   call,       ( ca -- )
04DC                             ;               Assemble a call instruction to ca.
04DC                          ;*Macro unroll: hCOLON  5,'call,',CALLC
04DC                          ;*Macro unroll:  hCODE 5, "call,", CALLC
04DC                          ALIGN   2   
04DC                CALLC:       
04DC   00                     NOP      
04DD   CD 16 06               CALL   doLIST   
04E0   24 06 00 CD C8 03      DW   DOLIT,CALLL,COMMA   ;Direct Threaded Code
04E6   C8 03 4C 06            DW   COMMA,EXIT   ;DTC 8086 relative call
04EA                             ;   :           ( -- ; <string> )
04EA                             ;               Start a new colon definition using next word as its name.
04EA                          ;*Macro unroll: mCOLON  1,':',COLON
04EA                          ;*Macro unroll:  mCODE 1, ":", COLON
04EA                          ALIGN   2   
04EA                COLON:       
04EA                VVCODE:   .SET   $   
04EA                VVLEN:    .SET   (1 & 01FH) / CELLL   
1D4C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1D4C                VVNAME:   .SET   $   
1D4C   EA 04 56 1D            DW   vvCODE,vvLINK   
1D50                VVLINK:   .SET   $   
1D50   01 3A                  DB   1,":"   
04EA                          .ORG   vvCODE   
04EA   00                     NOP      
04EB   CD 16 06               CALL   doLIST   
04EE   4E 09 46 04 24 06 16 06 DW   TOKEN,SNAME,DOLIT,DoLIST   
04F6   DC 04 CE 04 4C 06      DW   CALLC,RBRAC,EXIT   
04FC                             ;   IMMEDIATE   ( -- )
04FC                             ;               Make the last compiled word an immediate word.
04FC                          ;*Macro unroll: mCOLON  9,'IMMEDIATE',IMMED
04FC                          ;*Macro unroll:  mCODE 9, "IMMEDIATE", IMMED
04FC                          ALIGN   2   
04FC                IMMED:       
04FC                VVCODE:   .SET   $   
04FC                VVLEN:    .SET   (9 & 01FH) / CELLL   
1D3E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1D3E                VVNAME:   .SET   $   
1D3E   FC 04 50 1D            DW   vvCODE,vvLINK   
1D42                VVLINK:   .SET   $   
1D42   09 49 4D 4D 45 44 49 41 54 45 DB   9,"IMMEDIATE"   
04FC                          .ORG   vvCODE   
04FC   00                     NOP      
04FD   CD 16 06               CALL   doLIST   
0500   24 06 40 00 3A 11 48 0E 48 0E 7A 01 DW   DOLIT,IMEDD,LAST,AT,AT,ORR   
050C   3A 11 48 0E 3E 0E 4C 06 DW   LAST,AT,STORE,EXIT   
0514                             ;   USER        ( u -- ; <string> )
0514                             ;               Compile a new user variable.
0514                          ;*Macro unroll: mCOLON  4,'USER',USER
0514                          ;*Macro unroll:  mCODE 4, "USER", USER
0514                          ALIGN   2   
0514                USER:        
0514                VVCODE:   .SET   $   
0514                VVLEN:    .SET   (4 & 01FH) / CELLL   
1D34                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1D34                VVNAME:   .SET   $   
1D34   14 05 42 1D            DW   vvCODE,vvLINK   
1D38                VVLINK:   .SET   $   
1D38   04 55 53 45 52         DB   4,"USER"   
0514                          .ORG   vvCODE   
0514   00                     NOP      
0515   CD 16 06               CALL   doLIST   
0518   4E 09 46 04 B0 04      DW   TOKEN,SNAME,OVERT   
051E   24 06 16 06 DC 04      DW   DOLIT,DoLIST,CALLC   
0524   E4 03 3C 06 C8 03 4C 06 DW   COMPI,DOUSE,COMMA,EXIT   
052C                             ;   CREATE      ( -- ; <string> )
052C                             ;               Compile a new array entry without allocating code space.
052C                          ;*Macro unroll: mCOLON  6,'CREATE',CREAT
052C                          ;*Macro unroll:  mCODE 6, "CREATE", CREAT
052C                          ALIGN   2   
052C                CREAT:       
052C                VVCODE:   .SET   $   
052C                VVLEN:    .SET   (6 & 01FH) / CELLL   
1D28                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1D28                VVNAME:   .SET   $   
1D28   2C 05 38 1D            DW   vvCODE,vvLINK   
1D2C                VVLINK:   .SET   $   
1D2C   06 43 52 45 41 54 45   DB   6,"CREATE"   
052C                          .ORG   vvCODE   
052C   00                     NOP      
052D   CD 16 06               CALL   doLIST   
0530   4E 09 46 04 B0 04      DW   TOKEN,SNAME,OVERT   
0536   24 06 16 06 DC 04      DW   DOLIT,DoLIST,CALLC   
053C   E4 03 2C 06 4C 06      DW   COMPI,DOVAR,EXIT   
0542                             ;   VARIABLE    ( -- ; <string> )
0542                             ;               Compile a new variable initialized to 0.
0542                          ;*Macro unroll: mCOLON  8,'VARIABLE',VARIA
0542                          ;*Macro unroll:  mCODE 8, "VARIABLE", VARIA
0542                          ALIGN   2   
0542                VARIA:       
0542                VVCODE:   .SET   $   
0542                VVLEN:    .SET   (8 & 01FH) / CELLL   
1D1A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1D1A                VVNAME:   .SET   $   
1D1A   42 05 2C 1D            DW   vvCODE,vvLINK   
1D1E                VVLINK:   .SET   $   
1D1E   08 56 41 52 49 41 42 4C 45 DB   8,"VARIABLE"   
0542                          .ORG   vvCODE   
0542   00                     NOP      
0543   CD 16 06               CALL   doLIST   
0546   2C 05 24 06 00 00 C8 03 4C 06 DW   CREAT,DOLIT,0,COMMA,EXIT   
0550                             ;   FOR         ( -- a )
0550                             ;               Start a FOR-NEXT loop structure in a colon definition.
0550                          ;*Macro unroll: mCOLON  IMEDD+3,'FOR',FOR
0550                          ;*Macro unroll:  mCODE IMEDD+3, "FOR", FOR
0550                          ALIGN   2   
0550                FOR:         
0550                VVCODE:   .SET   $   
0550                VVLEN:    .SET   (IMEDD+3 & 01FH) / CELLL   
1CD2                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1CD2                VVNAME:   .SET   $   
1CD2   50 05 1E 1D            DW   vvCODE,vvLINK   
1CD6                VVLINK:   .SET   $   
1CD6   43 46 4F 52            DB   IMEDD+3,"FOR"   
0550                          .ORG   vvCODE   
0550   00                     NOP      
0551   CD 16 06               CALL   doLIST   
0554   E4 03 EE 0F D0 0E 4C 06 DW   COMPI,TOR,HERE,EXIT   
055C                             ;   BEGIN       ( -- a )
055C                             ;               Start an infinite or indefinite loop structure.
055C                          ;*Macro unroll: mCOLON  IMEDD+5,'BEGIN',BEGIN
055C                          ;*Macro unroll:  mCODE IMEDD+5, "BEGIN", BEGIN
055C                          ALIGN   2   
055C                BEGIN:       
055C                VVCODE:   .SET   $   
055C                VVLEN:    .SET   (IMEDD+5 & 01FH) / CELLL   
1C88                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1C88                VVNAME:   .SET   $   
1C88   5C 05 D6 1C            DW   vvCODE,vvLINK   
1C8C                VVLINK:   .SET   $   
1C8C   45 42 45 47 49 4E      DB   IMEDD+5,"BEGIN"   
055C                          .ORG   vvCODE   
055C   00                     NOP      
055D   CD 16 06               CALL   doLIST   
0560   D0 0E 4C 06            DW   HERE,EXIT   
0564                             ;   NEXT        ( a -- )
0564                             ;               Terminate a FOR-NEXT loop structure.
0564                          ;*Macro unroll: mCOLON  IMEDD+4,'NEXT',NEXT
0564                          ;*Macro unroll:  mCODE IMEDD+4, "NEXT", NEXT
0564                          ALIGN   2   
0564                NEXT:        
0564                VVCODE:   .SET   $   
0564                VVLEN:    .SET   (IMEDD+4 & 01FH) / CELLL   
1C3E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1C3E                VVNAME:   .SET   $   
1C3E   64 05 8C 1C            DW   vvCODE,vvLINK   
1C42                VVLINK:   .SET   $   
1C42   44 4E 45 58 54         DB   IMEDD+4,"NEXT"   
0564                          .ORG   vvCODE   
0564   00                     NOP      
0565   CD 16 06               CALL   doLIST   
0568   E4 03 7A 06 C8 03 4C 06 DW   COMPI,DONXT,COMMA,EXIT   
0570                             ;   UNTIL       ( a -- )
0570                             ;               Terminate a BEGIN-UNTIL indefinite loop structure.
0570                          ;*Macro unroll: mCOLON  IMEDD+5,'UNTIL',UNTIL
0570                          ;*Macro unroll:  mCODE IMEDD+5, "UNTIL", UNTIL
0570                          ALIGN   2   
0570                UNTIL:       
0570                VVCODE:   .SET   $   
0570                VVLEN:    .SET   (IMEDD+5 & 01FH) / CELLL   
1BF4                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1BF4                VVNAME:   .SET   $   
1BF4   70 05 42 1C            DW   vvCODE,vvLINK   
1BF8                VVLINK:   .SET   $   
1BF8   45 55 4E 54 49 4C      DB   IMEDD+5,"UNTIL"   
0570                          .ORG   vvCODE   
0570   00                     NOP      
0571   CD 16 06               CALL   doLIST   
0574   E4 03 22 0E C8 03 4C 06 DW   COMPI,QBRAN,COMMA,EXIT   
057C                             ;   AGAIN       ( a -- )
057C                             ;               Terminate a BEGIN-AGAIN infinite loop structure.
057C                          ;*Macro unroll: mCOLON  IMEDD+5,'AGAIN',AGAIN
057C                          ;*Macro unroll:  mCODE IMEDD+5, "AGAIN", AGAIN
057C                          ALIGN   2   
057C                AGAIN:       
057C                VVCODE:   .SET   $   
057C                VVLEN:    .SET   (IMEDD+5 & 01FH) / CELLL   
1BAA                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1BAA                VVNAME:   .SET   $   
1BAA   7C 05 F8 1B            DW   vvCODE,vvLINK   
1BAE                VVLINK:   .SET   $   
1BAE   45 41 47 41 49 4E      DB   IMEDD+5,"AGAIN"   
057C                          .ORG   vvCODE   
057C   00                     NOP      
057D   CD 16 06               CALL   doLIST   
0580   E4 03 2E 0E C8 03 4C 06 DW   COMPI,BRAN,COMMA,EXIT   
0588                             ;   IF          ( -- A )
0588                             ;               Begin a conditional branch structure.
0588                          ;*Macro unroll: mCOLON  IMEDD+2,'IF',IFF
0588                          ;*Macro unroll:  mCODE IMEDD+2, "IF", IFF
0588                          ALIGN   2   
0588                IFF:         
0588                VVCODE:   .SET   $   
0588                VVLEN:    .SET   (IMEDD+2 & 01FH) / CELLL   
1B62                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1B62                VVNAME:   .SET   $   
1B62   88 05 AE 1B            DW   vvCODE,vvLINK   
1B66                VVLINK:   .SET   $   
1B66   42 49 46               DB   IMEDD+2,"IF"   
0588                          .ORG   vvCODE   
0588   00                     NOP      
0589   CD 16 06               CALL   doLIST   
058C   E4 03 22 0E D0 0E      DW   COMPI,QBRAN,HERE   
0592   24 06 00 00 C8 03 4C 06 DW   DOLIT,0,COMMA,EXIT   
059A                             ;   AHEAD       ( -- A )
059A                             ;               Compile a forward branch instruction.
059A                          ;*Macro unroll: mCOLON  IMEDD+5,'AHEAD',AHEAD
059A                          ;*Macro unroll:  mCODE IMEDD+5, "AHEAD", AHEAD
059A                          ALIGN   2   
059A                AHEAD:       
059A                VVCODE:   .SET   $   
059A                VVLEN:    .SET   (IMEDD+5 & 01FH) / CELLL   
1B18                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1B18                VVNAME:   .SET   $   
1B18   9A 05 66 1B            DW   vvCODE,vvLINK   
1B1C                VVLINK:   .SET   $   
1B1C   45 41 48 45 41 44      DB   IMEDD+5,"AHEAD"   
059A                          .ORG   vvCODE   
059A   00                     NOP      
059B   CD 16 06               CALL   doLIST   
059E   E4 03 2E 0E D0 0E 24 06 00 00 C8 03 4C 06 DW   COMPI,BRAN,HERE,DOLIT,0,COMMA,EXIT   
05AC                             ;   REPEAT      ( A a -- )
05AC                             ;               Terminate a BEGIN-WHILE-REPEAT indefinite loop.
05AC                          ;*Macro unroll: mCOLON  IMEDD+6,'REPEAT',REPEA
05AC                          ;*Macro unroll:  mCODE IMEDD+6, "REPEAT", REPEA
05AC                          ALIGN   2   
05AC                REPEA:       
05AC                VVCODE:   .SET   $   
05AC                VVLEN:    .SET   (IMEDD+6 & 01FH) / CELLL   
1ACC                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1ACC                VVNAME:   .SET   $   
1ACC   AC 05 1C 1B            DW   vvCODE,vvLINK   
1AD0                VVLINK:   .SET   $   
1AD0   46 52 45 50 45 41 54   DB   IMEDD+6,"REPEAT"   
05AC                          .ORG   vvCODE   
05AC   00                     NOP      
05AD   CD 16 06               CALL   doLIST   
05B0   7C 05 D0 0E 12 10 3E 0E 4C 06 DW   AGAIN,HERE,SWAP,STORE,EXIT   
05BA                             ;   THEN        ( A -- )
05BA                             ;               Terminate a conditional branch structure.
05BA                          ;*Macro unroll: mCOLON  IMEDD+4,'THEN',THENN
05BA                          ;*Macro unroll:  mCODE IMEDD+4, "THEN", THENN
05BA                          ALIGN   2   
05BA                THENN:       
05BA                VVCODE:   .SET   $   
05BA                VVLEN:    .SET   (IMEDD+4 & 01FH) / CELLL   
1A82                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1A82                VVNAME:   .SET   $   
1A82   BA 05 D0 1A            DW   vvCODE,vvLINK   
1A86                VVLINK:   .SET   $   
1A86   44 54 48 45 4E         DB   IMEDD+4,"THEN"   
05BA                          .ORG   vvCODE   
05BA   00                     NOP      
05BB   CD 16 06               CALL   doLIST   
05BE   D0 0E 12 10 3E 0E 4C 06 DW   HERE,SWAP,STORE,EXIT   
05C6                             ;   AFT         ( a -- a A )
05C6                             ;               Jump to THEN in a FOR-AFT-THEN-NEXT loop the 1st time through.
05C6                          ;*Macro unroll: mCOLON  IMEDD+3,'AFT',AFT
05C6                          ;*Macro unroll:  mCODE IMEDD+3, "AFT", AFT
05C6                          ALIGN   2   
05C6                AFT:         
05C6                VVCODE:   .SET   $   
05C6                VVLEN:    .SET   (IMEDD+3 & 01FH) / CELLL   
1A3A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1A3A                VVNAME:   .SET   $   
1A3A   C6 05 86 1A            DW   vvCODE,vvLINK   
1A3E                VVLINK:   .SET   $   
1A3E   43 41 46 54            DB   IMEDD+3,"AFT"   
05C6                          .ORG   vvCODE   
05C6   00                     NOP      
05C7   CD 16 06               CALL   doLIST   
05CA   0E 10 9A 05 5C 05 12 10 4C 06 DW   DROP,AHEAD,BEGIN,SWAP,EXIT   
05D4                             ;   ELSE        ( A -- A )
05D4                             ;               Start the false clause in an IF-ELSE-THEN structure.
05D4                          ;*Macro unroll: mCOLON  IMEDD+4,'ELSE',ELSEE
05D4                          ;*Macro unroll:  mCODE IMEDD+4, "ELSE", ELSEE
05D4                          ALIGN   2   
05D4                ELSEE:       
05D4                VVCODE:   .SET   $   
05D4                VVLEN:    .SET   (IMEDD+4 & 01FH) / CELLL   
19F0                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
19F0                VVNAME:   .SET   $   
19F0   D4 05 3E 1A            DW   vvCODE,vvLINK   
19F4                VVLINK:   .SET   $   
19F4   44 45 4C 53 45         DB   IMEDD+4,"ELSE"   
05D4                          .ORG   vvCODE   
05D4   00                     NOP      
05D5   CD 16 06               CALL   doLIST   
05D8   9A 05 12 10 BA 05 4C 06 DW   AHEAD,SWAP,THENN,EXIT   
05E0                             ;   WHILE       ( a -- A a )
05E0                             ;               Conditional branch out of a BEGIN-WHILE-REPEAT loop.
05E0                          ;*Macro unroll: mCOLON  IMEDD+5,'WHILE',WHILE
05E0                          ;*Macro unroll:  mCODE IMEDD+5, "WHILE", WHILE
05E0                          ALIGN   2   
05E0                WHILE:       
05E0                VVCODE:   .SET   $   
05E0                VVLEN:    .SET   (IMEDD+5 & 01FH) / CELLL   
19A6                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
19A6                VVNAME:   .SET   $   
19A6   E0 05 F4 19            DW   vvCODE,vvLINK   
19AA                VVLINK:   .SET   $   
19AA   45 57 48 49 4C 45      DB   IMEDD+5,"WHILE"   
05E0                          .ORG   vvCODE   
05E0   00                     NOP      
05E1   CD 16 06               CALL   doLIST   
05E4   88 05 12 10 4C 06      DW   IFF,SWAP,EXIT   
05EA                             ;   ABORT"      ( -- ; <string> )
05EA                             ;               Conditional abort with an error message.
05EA                          ;*Macro unroll: mCOLON  IMEDD+6,'ABORT|',ABRTQ
05EA                          ;*Macro unroll:  mCODE IMEDD+6, "ABORT|", ABRTQ
05EA                          ALIGN   2   
05EA                ABRTQ:       
05EA                VVCODE:   .SET   $   
05EA                VVLEN:    .SET   (IMEDD+6 & 01FH) / CELLL   
195A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
195A                VVNAME:   .SET   $   
195A   EA 05 AA 19            DW   vvCODE,vvLINK   
195E                VVLINK:   .SET   $   
195E   46 41 42 4F 52 54 7C   DB   IMEDD+6,"ABORT|"   
05EA                          .ORG   vvCODE   
05EA   00                     NOP      
05EB   CD 16 06               CALL   doLIST   
05EE   E4 03 C6 0A 02 04 4C 06 DW   COMPI,ABORQ,STRCQ,EXIT   
05F6                             ;   $"          ( -- ; <string> )
05F6                             ;               Compile an inline string literal.
05F6                          ;*Macro unroll: mCOLON  IMEDD+2,'$|',STRQ
05F6                          ;*Macro unroll:  mCODE IMEDD+2, "$|", STRQ
05F6                          ALIGN   2   
05F6                STRQ:        
05F6                VVCODE:   .SET   $   
05F6                VVLEN:    .SET   (IMEDD+2 & 01FH) / CELLL   
1912                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1912                VVNAME:   .SET   $   
1912   F6 05 5E 19            DW   vvCODE,vvLINK   
1916                VVLINK:   .SET   $   
1916   42 24 7C               DB   IMEDD+2,"$|"   
05F6                          .ORG   vvCODE   
05F6   00                     NOP      
05F7   CD 16 06               CALL   doLIST   
05FA   E4 03 66 0C 02 04 4C 06 DW   COMPI,STRQP,STRCQ,EXIT   
0602                             ;   ."          ( -- ; <string> )
0602                             ;               Compile an inline string literal to be typed out at run time.
0602                          ;*Macro unroll: mCOLON  IMEDD+2,'.|',DOTQ
0602                          ;*Macro unroll:  mCODE IMEDD+2, ".|", DOTQ
0602                          ALIGN   2   
0602                DOTQ:        
0602                VVCODE:   .SET   $   
0602                VVLEN:    .SET   (IMEDD+2 & 01FH) / CELLL   
18CA                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
18CA                VVNAME:   .SET   $   
18CA   02 06 16 19            DW   vvCODE,vvLINK   
18CE                VVLINK:   .SET   $   
18CE   42 2E 7C               DB   IMEDD+2,".|"   
0602                          .ORG   vvCODE   
0602   00                     NOP      
0603   CD 16 06               CALL   doLIST   
0606   E4 03 6E 0C 02 04 4C 06 DW   COMPI,DOTQP,STRCQ,EXIT   
060E                             ; ;   UNLOOP	( -- ) ( R: loop-sys -- )	\ CORE
060E                             ; ;		Discard loop-control parameters for the current nesting level.
060E                             ; ;		An UNLOOP is required for each nesting level before the
060E                             ; ;		definition may be EXITed.
060E                             ; mCOLON	COMPO+6,"UNLOOP",UNLOOP
060E                             ; 	DW	RFrom,RFrom,RFrom,DDROP,ToR,EXIT
060E                             ;   doCONST	( -- x )
060E                             ;	Run-time routine of CONSTANT and VARIABLE.
060E                          ;*Macro unroll: hCODE	COMPO+7, 'doCONST', DoCONST
060E                          ALIGN   2   
060E                DOCONST:      
060E   E1                     POP   HL   ;10t
060F   C5                     PUSH   BC   ;11t
0610   4E                     LD   C,(HL)   ; 7t
0611   23                     INC   HL   ; 6t
0612   46                     LD   B,(HL)   ; 7t
0613                          ;*Macro unroll:  mNEXT
0613   EB                     EX   DE,HL   
0614                          ;*Macro unroll:  mNEXTHL                         ; 34t
0614   FD E9                  JP   (IY)   ; 34t
0616                             ;   doLIST	( -- ) ( R: -- nest-sys )
0616                             ;	Process colon list.
0616                          ;*Macro unroll: hCODE	COMPO+6, 'doLIST', DoLIST
0616                          ALIGN   2   
0616                DOLIST:      
0616   DD 2B                  DEC   IX   ;10t
0618   DD 72 00               LD   (IX+0),D   ;19t
061B   DD 2B                  DEC   IX   ;10t
061D   DD 73 00               LD   (IX+0),E   ;19t
0620   E1                     POP   HL   ;10t
0621                          ;*Macro unroll:  mNEXTHL							
0621   FD E9                  JP   (IY)   
0623                             ;   DOLIT	( -- x )
0623                             ;	Push an inline literal.
0623                          ;*Macro unroll: hCODE	COMPO+5, 'DOLIT', DOLIT
0623                          ALIGN   2   
0624                DOLIT:       
0624   C5                     PUSH   BC   ; 11t
0625   EB                     EX   DE,HL   ; 4t
0626   4E                     LD   C,(HL)   ; 7t
0627   23                     INC   HL   ; 6t
0628   46                     LD   B,(HL)   ; 7t
0629   23                     INC   HL   ; 6t
062A                          ;*Macro unroll:  mNEXTHL
062A   FD E9                  JP   (IY)   
062C                             ;   doVAR       ( -- a )
062C                             ;   Run time routine for VARIABLE and CREATE.
062C                          ;*Macro unroll: hCOLON  COMPO+5, 'doVAR', DoVAR
062C                          ;*Macro unroll:  hCODE COMPO+5, "doVAR", DoVAR
062C                          ALIGN   2   
062C                DOVAR:       
062C   00                     NOP      
062D   CD 16 06               CALL   doLIST   
0630   FC 0F 4C 06            DW   RFROM,EXIT   
0634                             ;   UP          ( -- a )
0634                             ;   Pointer to the user area.
0634                          ;*Macro unroll: hCOLON  2, 'UP', UP
0634                          ;*Macro unroll:  hCODE 2, "UP", UP
0634                          ALIGN   2   
0634                UP:          
0634   00                     NOP      
0635   CD 16 06               CALL   doLIST   
0638   2C 06                  DW   DoVAR   
063A   00 24                  DW   UPP   
063C                             ;   doUSER      ( -- a )
063C                             ;   Run time routine for user variables.
063C                          ;*Macro unroll: hCOLON  COMPO+6,'doUSER',DOUSE
063C                          ;*Macro unroll:  hCODE COMPO+6, "doUSER", DOUSE
063C                          ALIGN   2   
063C                DOUSE:       
063C   00                     NOP      
063D   CD 16 06               CALL   doLIST   
0640   FC 0F 48 0E 34 06 48 0E 8E 01 4C 06 DW   RFROM,AT,UP,AT,PLUS,EXIT   
064C                             ;   EXIT	( -- ) ( R: nest-sys -- )	\ CORE
064C                             ;	Return control to the calling definition.
064C                          ;*Macro unroll: mCODE	COMPO+4, 'EXIT', EXIT
064C                          ALIGN   2   
064C                EXIT:        
064C                VVCODE:   .SET   $   
064C                VVLEN:    .SET   (COMPO+4 & 01FH) / CELLL   
18A0                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
18A0                VVNAME:   .SET   $   
18A0   4C 06 CE 18            DW   vvCODE,vvLINK   
18A4                VVLINK:   .SET   $   
18A4   24 45 58 49 54         DB   COMPO+4,"EXIT"   
064C                          .ORG   vvCODE   
064C   DD 6E 00               LD   L,(IX+0)   
064F   DD 23                  INC   IX   
0651   DD 66 00               LD   H,(IX+0)   
0654   DD 23                  INC   IX   
0656                          ;*Macro unroll:  mNEXTHL
0656   FD E9                  JP   (IY)   
0658                             ;   doDO	( n1|u1 n2|u2 -- ) ( R: -- n1 n2-n1-max_negative )
0658                             ;		Run-time funtion of DO.
0658                             ; 
0658                             ;   : doDO	>R max-negative + R> OVER - SWAP R> SWAP >R SWAP >R >R ;
0658                          ;*Macro unroll: hCOLON	COMPO+4,'doDO',DoDO
0658                          ;*Macro unroll:  hCODE COMPO+4, "doDO", DoDO
0658                          ALIGN   2   
0658                DODO:        
0658   00                     NOP      
0659   CD 16 06               CALL   doLIST   
065C   EE 0F 24 06 00 80 8E 01 FC 0F DW   ToR,DOLIT,MaxNegative,Plus,RFrom   
0666   1A 10 C8 01 12 10 FC 0F 12 10 EE 0F 12 10 EE 0F EE 0F 4C 06 DW   OVER,SUBB,SWAP,RFrom,SWAP,ToR,SWAP,ToR,ToR,EXIT   
067A                             ; ;   doLOOP	( -- ) ( R: loop-sys1 -- | loop-sys2 )
067A                             ; ;		Run time routine for LOOP.
067A                             ; hCODE	COMPO+6,"doLOOP",DoLOOP
067A                             ; 	PUSH IX	        ; 15t
067A                             ; 	POP	HL	        ; 10t
067A                             ; 	INC	(HL)	    ; 11t
067A                             ; 	JR Z,DOLOOP2	; 12/7t a fast dec is ok, only
067A                             ; DOLOOP1: 	
067A                             ;     LD	A,(DE)	    ; 7t go back to the loop
067A                             ; 	LD	L,A	        ; 4t
067A                             ; 	INC	DE	        ; 6t
067A                             ; 	LD	A,(DE)	    ; 7t
067A                             ; 	LD	H,A	        ; 4t
067A                             ; 	mNEXTHL
067A                             ; DOLOOP2: 	
067A                             ;     INC	HL	        ; 6t
067A                             ; 	INC	(HL)	    ;11t
067A                             ; 	JP PO,DOLOOP1   ;10/7t ?loop end
067A                             ; 	EX	DE,HL	    ; 4t yes,continue past the BRAN offset
067A                             ; 	LD	DE,4	    ;10t clear return stack
067A                             ; 	ADD IX,DE	    ;15h
067A                             ; 	INC	HL	        ; 6t
067A                             ; 	INC	HL	        ; 6t
067A                             ; 	mNEXTHL
067A                             ; ;   do+LOOP	( n -- ) ( R: loop-sys1 -- | loop-sys2 )
067A                             ; ;		Run time routine for +LOOP.
067A                             ; hCODE	COMPO+7,"do+LOOP",DoPLOOP
067A                             ; 	POP	HL	        ;10t this will be the new TOS
067A                             ; 	PUSH	BC	    ;11t
067A                             ; 	LD	B,H	        ; 4t
067A                             ; 	LD	C,L	        ; 4t
067A                             ; 	EXX		        ; 4t
067A                             ; 	POP	BC	        ;10t old TOS = loop increment
067A                             ; 	LD L,(IX+0)     ;19t
067A                             ; 	LD H,(IX+1)     ;19t
067A                             ; 	OR	A	        ; 4t clear carry
067A                             ; 	ADC HL,BC	    ;15t
067A                             ; 	JP PE,DOPLP1	;10/7t ?loop end
067A                             ; 	LD (IX+0),L     ;19t   no, go back
067A                             ; 	LD (IX+1),H     ;19t
067A                             ; 	EXX		        ; 4t
067A                             ; 	LD	A,(DE)	    ; 7t go back to the loop
067A                             ; 	LD	L,A	        ; 4t
067A                             ; 	INC	DE	        ; 6t
067A                             ; 	LD	A,(DE)	    ; 7t
067A                             ; 	LD	H,A	        ; 4t
067A                             ; 	mNEXTHL
067A                             ; DOPLP1:		
067A                             ;     LD	BC,4	    ;10t clear return stack
067A                             ; 	ADD IX,BC	    ;15h
067A                             ; 	EXX		        ; 4t
067A                             ; 	INC	DE	        ; 6t yes,continue past the BRAN offset
067A                             ; 	INC	DE	        ; 6t
067A                             ; 	mNEXT
067A                             ;   next        ( -- )
067A                             ;               Run time code for the single index loop.
067A                             ;               : next ( -- ) \ hilevel model
067A                             ;                 r> r> dup if 1 - >r @ >r exit then drop cell+ >r ;
067A                          ;*Macro unroll: mCODE   COMPO+4,'next',DONXT
067A                          ALIGN   2   
067A                DONXT:       
067A                VVCODE:   .SET   $   
067A                VVLEN:    .SET   (COMPO+4 & 01FH) / CELLL   
1876                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1876                VVNAME:   .SET   $   
1876   7A 06 A4 18            DW   vvCODE,vvLINK   
187A                VVLINK:   .SET   $   
187A   24 6E 65 78 74         DB   COMPO+4,"next"   
067A                          .ORG   vvCODE   
067A   DD E5                  PUSH   IX   
067C   E1                     POP   HL   ; load rp into HL
067D   7E                     LD   A,(HL)   ; a = low byte of r@
067E   B7                     OR   A   
067F   20 10                  JR   NZ,DECLOW   ; low > 0 goto dec low
0681   23                     INC   HL   
0682   7E                     LD   A,(HL)   ; a = high byte of r@
0683   B7                     OR   A   
0684   20 09                  JR   NZ,DECHILO   ; high > 0 goto dec hi dec lo
0686   23                     INC   HL   
0687   E5                     PUSH   HL   
0688   DD E1                  POP   IX   ; pop r@
068A   13                     INC   DE   ; IP = skip following word
068B   13                     INC   DE   
068C                          ;*Macro unroll:  mNEXT                               ; continue
068C   EB                     EX   DE,HL   ; continue
068D                          ;*Macro unroll:  mNEXTHL                         ; 34t
068D   FD E9                  JP   (IY)   ; 34t
068F                DECHILO:      
068F   35                     DEC   (HL)   ; dec high byte of r@
0690   2B                     DEC   HL   
0691                DECLOW:      
0691   35                     DEC   (HL)   ; dec low byte of r@
0692   6B                     LD   L,E   ; DE points to location of loop address
0693   62                     LD   H,D   
0694   5E                     LD   E,(HL)   ; DE points to loop address
0695   23                     INC   HL   
0696   56                     LD   D,(HL)   
0697                          ;*Macro unroll:  mNEXT                               ; continue to loop address
0697   EB                     EX   DE,HL   ; continue to loop address
0698                          ;*Macro unroll:  mNEXTHL                         ; 34t
0698   FD E9                  JP   (IY)   ; 34t
069A                             ;   DIGIT       ( u -- c )
069A                             ;               Convert digit u to a character.
069A                          ;*Macro unroll: hCOLON  5,'DIGIT',DIGIT
069A                          ;*Macro unroll:  hCODE 5, "DIGIT", DIGIT
069A                          ALIGN   2   
069A                DIGIT:       
069A   00                     NOP      
069B   CD 16 06               CALL   doLIST   
069E   24 06 09 00 1A 10 14 02 DW   DOLIT,9,OVER,LESS   
06A6   24 06 07 00 70 01 8E 01 DW   DOLIT,7,ANDD,PLUS   
06AE   24 06 8E 01 4C 06      DW   DOLIT,"0",PLUS,EXIT   
06B4                             ;   EXTRACT     ( n base -- n c )
06B4                             ;               Extract the least significant digit from n.
06B4                          ;*Macro unroll: hCOLON  7,'EXTRACT',EXTRC
06B4                          ;*Macro unroll:  hCODE 7, "EXTRACT", EXTRC
06B4                          ALIGN   2   
06B4                EXTRC:       
06B4   00                     NOP      
06B5   CD 16 06               CALL   doLIST   
06B8   24 06 00 00 12 10 72 02 DW   DOLIT,0,SWAP,UMMOD   
06C0   12 10 9A 06 4C 06      DW   SWAP,DIGIT,EXIT   
06C6                             ;   <#          ( -- )
06C6                             ;               Initiate the numeric output process.
06C6                          ;*Macro unroll: mCOLON  2,'<#',BDIGS
06C6                          ;*Macro unroll:  mCODE 2, "<#", BDIGS
06C6                          ALIGN   2   
06C6                BDIGS:       
06C6                VVCODE:   .SET   $   
06C6                VVLEN:    .SET   (2 & 01FH) / CELLL   
186E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
186E                VVNAME:   .SET   $   
186E   C6 06 7A 18            DW   vvCODE,vvLINK   
1872                VVLINK:   .SET   $   
1872   02 3C 23               DB   2,"<#"   
06C6                          .ORG   vvCODE   
06C6   00                     NOP      
06C7   CD 16 06               CALL   doLIST   
06CA   DA 0E 0A 11 3E 0E 4C 06 DW   PAD,HLD,STORE,EXIT   
06D2                             ;   HOLD        ( c -- )
06D2                             ;               Insert a character into the numeric output string.
06D2                          ;*Macro unroll: mCOLON  4,'HOLD',HOLD
06D2                          ;*Macro unroll:  mCODE 4, "HOLD", HOLD
06D2                          ALIGN   2   
06D2                HOLD:        
06D2                VVCODE:   .SET   $   
06D2                VVLEN:    .SET   (4 & 01FH) / CELLL   
1864                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1864                VVNAME:   .SET   $   
1864   D2 06 72 18            DW   vvCODE,vvLINK   
1868                VVLINK:   .SET   $   
1868   04 48 4F 4C 44         DB   4,"HOLD"   
06D2                          .ORG   vvCODE   
06D2   00                     NOP      
06D3   CD 16 06               CALL   doLIST   
06D6   0A 11 48 0E 24 06 01 00 C8 01 DW   HLD,AT,DOLIT,1,SUBB   
06E0   0A 10 0A 11 3E 0E 50 0E 4C 06 DW   DUPP,HLD,STORE,CSTOR,EXIT   
06EA                             ;   #           ( u -- u )
06EA                             ;               Extract one digit from u and append the digit to output string.
06EA                          ;*Macro unroll: mCOLON  1,'#',DIG
06EA                          ;*Macro unroll:  mCODE 1, "#", DIG
06EA                          ALIGN   2   
06EA                DIG:         
06EA                VVCODE:   .SET   $   
06EA                VVLEN:    .SET   (1 & 01FH) / CELLL   
185E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
185E                VVNAME:   .SET   $   
185E   EA 06 68 18            DW   vvCODE,vvLINK   
1862                VVLINK:   .SET   $   
1862   01 23                  DB   1,"#"   
06EA                          .ORG   vvCODE   
06EA   00                     NOP      
06EB   CD 16 06               CALL   doLIST   
06EE   CA 10 48 0E B4 06 D2 06 4C 06 DW   BASE,AT,EXTRC,HOLD,EXIT   
06F8                             ;   #S          ( u -- 0 )
06F8                             ;               Convert u until all digits are added to the output string.
06F8                          ;*Macro unroll: mCOLON  2,'#S',DIGS
06F8                          ;*Macro unroll:  mCODE 2, "#S", DIGS
06F8                          ALIGN   2   
06F8                DIGS:        
06F8                VVCODE:   .SET   $   
06F8                VVLEN:    .SET   (2 & 01FH) / CELLL   
1856                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1856                VVNAME:   .SET   $   
1856   F8 06 62 18            DW   vvCODE,vvLINK   
185A                VVLINK:   .SET   $   
185A   02 23 53               DB   2,"#S"   
06F8                          .ORG   vvCODE   
06F8   00                     NOP      
06F9   CD 16 06               CALL   doLIST   
06FC                DIGS1:       
06FC   EA 06 0A 10            DW   DIG,DUPP   
0700   22 0E 08 07            DW   QBRAN,DIGS2   
0704   2E 0E FC 06            DW   BRAN,DIGS1   
0708                DIGS2:       
0708   4C 06                  DW   EXIT   
070A                             ;   SIGN        ( n -- )
070A                             ;               Add a minus sign to the numeric output string.
070A                          ;*Macro unroll: mCOLON	4,'SIGN',SIGN
070A                          ;*Macro unroll:  mCODE 4, "SIGN", SIGN
070A                          ALIGN   2   
070A                SIGN:        
070A                VVCODE:   .SET   $   
070A                VVLEN:    .SET   (4 & 01FH) / CELLL   
184C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
184C                VVNAME:   .SET   $   
184C   0A 07 5A 18            DW   vvCODE,vvLINK   
1850                VVLINK:   .SET   $   
1850   04 53 49 47 4E         DB   4,"SIGN"   
070A                          .ORG   vvCODE   
070A   00                     NOP      
070B   CD 16 06               CALL   doLIST   
070E   68 01 22 0E 1A 07      DW   ZLESS,QBRAN,SIGN1   
0714   24 06 2D 00 D2 06      DW   DoLIT,MINUSS,HOLD   
071A                SIGN1:       
071A   4C 06                  DW   EXIT   
071C                             ;   #>          ( w -- b u )
071C                             ;               Prepare the output string to be TYPE'd.
071C                          ;*Macro unroll: mCOLON  2,'#>',EDIGS
071C                          ;*Macro unroll:  mCODE 2, "#>", EDIGS
071C                          ALIGN   2   
071C                EDIGS:       
071C                VVCODE:   .SET   $   
071C                VVLEN:    .SET   (2 & 01FH) / CELLL   
1844                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1844                VVNAME:   .SET   $   
1844   1C 07 50 18            DW   vvCODE,vvLINK   
1848                VVLINK:   .SET   $   
1848   02 23 3E               DB   2,"#>"   
071C                          .ORG   vvCODE   
071C   00                     NOP      
071D   CD 16 06               CALL   doLIST   
0720   0E 10 0A 11 48 0E      DW   DROP,HLD,AT   
0726   DA 0E 1A 10 C8 01 4C 06 DW   PAD,OVER,SUBB,EXIT   
072E                             ;   str         ( n -- b u )
072E                             ;               Convert a signed integer to a numeric string.
072E                          ;*Macro unroll: hCOLON  3,'str',STR
072E                          ;*Macro unroll:  hCODE 3, "str", STR
072E                          ALIGN   2   
072E                STR:         
072E   00                     NOP      
072F   CD 16 06               CALL   doLIST   
0732   0A 10 EE 0F D2 01      DW   DUPP,TOR,ABSS   
0738   C6 06 F8 06 FC 0F      DW   BDIGS,DIGS,RFROM   
073E   0A 07 1C 07 4C 06      DW   SIGN,EDIGS,EXIT   
0744                             ;   HEX         ( -- )
0744                             ;               Use radix 16 as base for numeric conversions.
0744                          ;*Macro unroll: mCOLON  3,'HEX',HEX
0744                          ;*Macro unroll:  mCODE 3, "HEX", HEX
0744                          ALIGN   2   
0744                HEX:         
0744                VVCODE:   .SET   $   
0744                VVLEN:    .SET   (3 & 01FH) / CELLL   
183C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
183C                VVNAME:   .SET   $   
183C   44 07 48 18            DW   vvCODE,vvLINK   
1840                VVLINK:   .SET   $   
1840   03 48 45 58            DB   3,"HEX"   
0744                          .ORG   vvCODE   
0744   00                     NOP      
0745   CD 16 06               CALL   doLIST   
0748   24 06 10 00 CA 10 3E 0E 4C 06 DW   DOLIT,16,BASE,STORE,EXIT   
0752                             ;   DECIMAL     ( -- )
0752                             ;               Use radix 10 as base for numeric conversions.
0752                          ;*Macro unroll: mCOLON  7,'DECIMAL',DECIMAL
0752                          ;*Macro unroll:  mCODE 7, "DECIMAL", DECIMAL
0752                          ALIGN   2   
0752                DECIMAL:      
0752                VVCODE:   .SET   $   
0752                VVLEN:    .SET   (7 & 01FH) / CELLL   
1830                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1830                VVNAME:   .SET   $   
1830   52 07 40 18            DW   vvCODE,vvLINK   
1834                VVLINK:   .SET   $   
1834   07 44 45 43 49 4D 41 4C DB   7,"DECIMAL"   
0752                          .ORG   vvCODE   
0752   00                     NOP      
0753   CD 16 06               CALL   doLIST   
0756   24 06 10 00 CA 10 3E 0E 4C 06 DW   DOLIT,16,BASE,STORE,EXIT   
0760                             ;   BL          ( -- 32 )
0760                             ;               Return 32, the blank character.
0760                          ;*Macro unroll: mCOLON	2,'BL',BLANK
0760                          ;*Macro unroll:  mCODE 2, "BL", BLANK
0760                          ALIGN   2   
0760                BLANK:       
0760                VVCODE:   .SET   $   
0760                VVLEN:    .SET   (2 & 01FH) / CELLL   
1828                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1828                VVNAME:   .SET   $   
1828   60 07 34 18            DW   vvCODE,vvLINK   
182C                VVLINK:   .SET   $   
182C   02 42 4C               DB   2,"BL"   
0760                          .ORG   vvCODE   
0760   00                     NOP      
0761   CD 16 06               CALL   doLIST   
0764   24 06 20 00 4C 06      DW   DoLIT,SPACEE,EXIT   
076A                             ;   >CHAR       ( c -- c )
076A                             ;               Filter non-printing characters.
076A                          ;*Macro unroll: hCOLON  5,'>CHAR',TCHAR
076A                          ;*Macro unroll:  hCODE 5, ">CHAR", TCHAR
076A                          ALIGN   2   
076A                TCHAR:       
076A   00                     NOP      
076B   CD 16 06               CALL   doLIST   
076E   24 06 7F 00 70 01 0A 10 DW   DoLIT,$7F,ANDD,DUPP   ;mask msb
0776   24 06 7F 00            DW   DoLIT,127   
077A   24 06 20 00 54 02      DW   DoLIT,SPACEE,WITHI   ;check for printable
0780   22 0E 8A 07            DW   QBRAN,TCHA1   
0784   0E 10 24 06 5F 00      DW   DROP,DoLIT,UNDERSC   ;replace non-printables
078A                TCHA1:       
078A   4C 06                  DW   EXIT   
078C                             ;   DIGIT?      ( c base -- u t )
078C                             ;               Convert a character to its numeric value. A flag indicates success.
078C                          ;*Macro unroll: hCOLON  6,'DIGIT?',DIGTQ
078C                          ;*Macro unroll:  hCODE 6, "DIGIT?", DIGTQ
078C                          ALIGN   2   
078C                DIGTQ:       
078C   00                     NOP      
078D   CD 16 06               CALL   doLIST   
0790   EE 0F 24 06 C8 01      DW   TOR,DOLIT,"0",SUBB   
0796   24 06 09 00 1A 10 14 02 DW   DOLIT,9,OVER,LESS   
079E   22 0E B2 07            DW   QBRAN,DGTQ1   
07A2   24 06 07 00 C8 01      DW   DOLIT,7,SUBB   
07A8   0A 10 24 06 0A 00 14 02 7A 01 DW   DUPP,DOLIT,10,LESS,ORR   
07B2                DGTQ1:       
07B2   0A 10 FC 0F F8 01 4C 06 DW   DUPP,RFROM,ULESS,EXIT   
07BA                             ;   NUMBER?     ( a -- n T | a F )
07BA                             ;               Convert a number string to integer. Push a flag on tos.
07BA                          ;*Macro unroll: hCOLON  7,'NUMBER?',NUMBQ
07BA                          ;*Macro unroll:  hCODE 7, "NUMBER?", NUMBQ
07BA                          ALIGN   2   
07BA                NUMBQ:       
07BA   00                     NOP      
07BB   CD 16 06               CALL   doLIST   
07BE   CA 10 48 0E EE 0F 24 06 00 00 1A 10 BE 0E DW   BASE,AT,TOR,DOLIT,0,OVER,COUNT   
07CC   1A 10 58 0E 24 06 E2 01 DW   OVER,CAT,DOLIT,"$",EQUAL   
07D4   22 0E EA 07            DW   QBRAN,NUMQ1   
07D8   44 07 12 10 24 06 01 00 8E 01 DW   HEX,SWAP,DOLIT,1,PLUS   
07E2   12 10 24 06 01 00 C8 01 DW   SWAP,DOLIT,1,SUBB   
07EA                NUMQ1:       
07EA   1A 10 58 0E 24 06 E2 01 EE 0F DW   OVER,CAT,DOLIT,"-",EQUAL,TOR   
07F4   12 10 60 0E C8 01 12 10 60 0E 8E 01 22 10 DW   SWAP,RAT,SUBB,SWAP,RAT,PLUS,QDUP   
0802   22 0E 54 08            DW   QBRAN,NUMQ6   
0806   24 06 01 00 C8 01 EE 0F DW   DOLIT,1,SUBB,TOR   
080E                NUMQ2:       
080E   0A 10 EE 0F 58 0E CA 10 48 0E 8C 07 DW   DUPP,TOR,CAT,BASE,AT,DIGTQ   
081A   22 0E 46 08            DW   QBRAN,NUMQ4   
081E   12 10 CA 10 48 0E 48 03 8E 01 FC 0F DW   SWAP,BASE,AT,STAR,PLUS,RFROM   
082A   24 06 01 00 8E 01      DW   DOLIT,1,PLUS   
0830   7A 06 0E 08            DW   DONXT,NUMQ2   
0834   60 0E 12 10 0E 10      DW   RAT,SWAP,DROP   
083A   22 0E 40 08            DW   QBRAN,NUMQ3   
083E   A4 01                  DW   NEGAT   
0840                NUMQ3:       
0840   12 10                  DW   SWAP   
0842   2E 0E 52 08            DW   BRAN,NUMQ5   
0846                NUMQ4:       
0846   FC 0F FC 0F 3E 10 3E 10 24 06 00 00 DW   RFROM,RFROM,DDROP,DDROP,DOLIT,0   
0852                NUMQ5:       
0852   0A 10                  DW   DUPP   
0854                NUMQ6:       
0854   FC 0F 3E 10            DW   RFROM,DDROP   
0858   FC 0F CA 10 3E 0E 4C 06 DW   RFROM,BASE,STORE,EXIT   
0860                             ;   parse       ( b u c -- b u delta ; <string> )
0860                             ;               Scan string delimited by c. Return found string and its offset.
0860                          ;*Macro unroll: hCOLON  5,'parse',PARS
0860                          ;*Macro unroll:  hCODE 5, "parse", PARS
0860                          ALIGN   2   
0860                PARS:        
0860   00                     NOP      
0861   CD 16 06               CALL   doLIST   
0864   D2 10 3E 0E 1A 10 EE 0F 0A 10 DW   TEMP,STORE,OVER,TOR,DUPP   
086E   22 0E FC 08            DW   QBRAN,PARS8   
0872   24 06 01 00 C8 01 D2 10 48 0E 60 07 E2 01 DW   DOLIT,1,SUBB,TEMP,AT,BLANK,EQUAL   
0880   22 0E AE 08            DW   QBRAN,PARS3   
0884   EE 0F                  DW   TOR   
0886                PARS1:       
0886   60 07 1A 10 58 0E      DW   BLANK,OVER,CAT   ;skip leading blanks ONLY
088C   C8 01 68 01 98 01      DW   SUBB,ZLESS,INVER   
0892   22 0E AC 08            DW   QBRAN,PARS2   
0896   24 06 01 00 8E 01      DW   DOLIT,1,PLUS   
089C   7A 06 86 08            DW   DONXT,PARS1   
08A0   FC 0F 0E 10 24 06 00 00 0A 10 4C 06 DW   RFROM,DROP,DOLIT,0,DUPP,EXIT   
08AC                PARS2:       
08AC   FC 0F                  DW   RFROM   
08AE                PARS3:       
08AE   1A 10 12 10            DW   OVER,SWAP   
08B2   EE 0F                  DW   TOR   
08B4                PARS4:       
08B4   D2 10 48 0E 1A 10 58 0E C8 01 DW   TEMP,AT,OVER,CAT,SUBB   ;scan for delimiter
08BE   D2 10 48 0E 60 07 E2 01 DW   TEMP,AT,BLANK,EQUAL   
08C6   22 0E CC 08            DW   QBRAN,PARS5   
08CA   68 01                  DW   ZLESS   
08CC                PARS5:       
08CC   22 0E E2 08            DW   QBRAN,PARS6   
08D0   24 06 01 00 8E 01      DW   DOLIT,1,PLUS   
08D6   7A 06 B4 08            DW   DONXT,PARS4   
08DA   0A 10 EE 0F            DW   DUPP,TOR   
08DE   2E 0E F0 08            DW   BRAN,PARS7   
08E2                PARS6:       
08E2   FC 0F 0E 10 0A 10      DW   RFROM,DROP,DUPP   
08E8   24 06 01 00 8E 01 EE 0F DW   DOLIT,1,PLUS,TOR   
08F0                PARS7:       
08F0   1A 10 C8 01            DW   OVER,SUBB   
08F4   FC 0F FC 0F C8 01 4C 06 DW   RFROM,RFROM,SUBB,EXIT   
08FC                PARS8:       
08FC   1A 10 FC 0F C8 01 4C 06 DW   OVER,RFROM,SUBB,EXIT   
0904                             ;   PARSE       ( c -- b u ; <string> )
0904                             ;               Scan input stream and return counted string delimited by c.
0904                          ;*Macro unroll: mCOLON  5,'PARSE',PARSE
0904                          ;*Macro unroll:  mCODE 5, "PARSE", PARSE
0904                          ALIGN   2   
0904                PARSE:       
0904                VVCODE:   .SET   $   
0904                VVLEN:    .SET   (5 & 01FH) / CELLL   
181E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
181E                VVNAME:   .SET   $   
181E   04 09 2C 18            DW   vvCODE,vvLINK   
1822                VVLINK:   .SET   $   
1822   05 50 41 52 53 45      DB   5,"PARSE"   
0904                          .ORG   vvCODE   
0904   00                     NOP      
0905   CD 16 06               CALL   doLIST   
0908   EE 0F E8 0E E2 10 48 0E 8E 01 DW   TOR,TIB,INN,AT,PLUS   ;current input buffer pointer
0912   EA 10 48 0E E2 10 48 0E C8 01 DW   NTIB,AT,INN,AT,SUBB   ;remaining count
091C   FC 0F 60 08 E2 10 8C 0E 4C 06 DW   RFROM,PARS,INN,PSTOR,EXIT   
0926                             ;   (           ( -- )
0926                             ;               Ignore following string up to next ) . A comment.
0926                          ;*Macro unroll: mCOLON  IMEDD+1,'(',PAREN
0926                          ;*Macro unroll:  mCODE IMEDD+1, "(", PAREN
0926                          ALIGN   2   
0926                PAREN:       
0926                VVCODE:   .SET   $   
0926                VVLEN:    .SET   (IMEDD+1 & 01FH) / CELLL   
17D8                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
17D8                VVNAME:   .SET   $   
17D8   26 09 22 18            DW   vvCODE,vvLINK   
17DC                VVLINK:   .SET   $   
17DC   41 28                  DB   IMEDD+1,"("   
0926                          .ORG   vvCODE   
0926   00                     NOP      
0927   CD 16 06               CALL   doLIST   
092A   24 06 04 09 3E 10 4C 06 DW   DOLIT,")",PARSE,DDROP,EXIT   
0932                             ;   \           ( -- )
0932                             ;               Ignore following text till the end of line.
0932                          ;*Macro unroll: mCOLON  IMEDD+1,'||',BKSLA
0932                          ;*Macro unroll:  mCODE IMEDD+1, "||", BKSLA
0932                          ALIGN   2   
0932                BKSLA:       
0932                VVCODE:   .SET   $   
0932                VVLEN:    .SET   (IMEDD+1 & 01FH) / CELLL   
1792                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1792                VVNAME:   .SET   $   
1792   32 09 DC 17            DW   vvCODE,vvLINK   
1796                VVLINK:   .SET   $   
1796   41 7C 7C               DB   IMEDD+1,"||"   
0932                          .ORG   vvCODE   
0932   00                     NOP      
0933   CD 16 06               CALL   doLIST   
0936   EA 10 48 0E E2 10 3E 0E 4C 06 DW   NTIB,AT,INN,STORE,EXIT   
0940                             ;   CHAR        ( -- c )
0940                             ;               Parse next word and return its first character.
0940                          ;*Macro unroll: mCOLON  4,'CHAR',CHAR
0940                          ;*Macro unroll:  mCODE 4, "CHAR", CHAR
0940                          ALIGN   2   
0940                CHAR:        
0940                VVCODE:   .SET   $   
0940                VVLEN:    .SET   (4 & 01FH) / CELLL   
1788                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1788                VVNAME:   .SET   $   
1788   40 09 96 17            DW   vvCODE,vvLINK   
178C                VVLINK:   .SET   $   
178C   04 43 48 41 52         DB   4,"CHAR"   
0940                          .ORG   vvCODE   
0940   00                     NOP      
0941   CD 16 06               CALL   doLIST   
0944   60 07 04 09 0E 10 58 0E 4C 06 DW   BLANK,PARSE,DROP,CAT,EXIT   
094E                             ;   TOKEN       ( -- a ; <string> )
094E                             ;               Parse a word from input stream and copy it to name dictionary.
094E                          ;*Macro unroll: hCOLON  5,'TOKEN',TOKEN
094E                          ;*Macro unroll:  hCODE 5, "TOKEN", TOKEN
094E                          ALIGN   2   
094E                TOKEN:       
094E   00                     NOP      
094F   CD 16 06               CALL   doLIST   
0952   60 07 04 09 24 06 1F 00 40 02 DW   BLANK,PARSE,DOLIT,31,MIN   
095C   32 11 48 0E 1A 10 C8 01 96 03 DW   NP,AT,OVER,SUBB,CELLM   
0966   7C 0F 4C 06            DW   PACKS,EXIT   
096A                             ;   WORD        ( c -- a ; <string> )
096A                             ;               Parse a word from input stream and copy it to code dictionary.
096A                          ;*Macro unroll: mCOLON  4,'WORD',WORDD
096A                          ;*Macro unroll:  mCODE 4, "WORD", WORDD
096A                          ALIGN   2   
096A                WORDD:       
096A                VVCODE:   .SET   $   
096A                VVLEN:    .SET   (4 & 01FH) / CELLL   
177E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
177E                VVNAME:   .SET   $   
177E   6A 09 8C 17            DW   vvCODE,vvLINK   
1782                VVLINK:   .SET   $   
1782   04 57 4F 52 44         DB   4,"WORD"   
096A                          .ORG   vvCODE   
096A   00                     NOP      
096B   CD 16 06               CALL   doLIST   
096E   04 09 D0 0E 7C 0F 4C 06 DW   PARSE,HERE,PACKS,EXIT   
0976                             ;   NAME>       ( na -- ca )
0976                             ;               Return a code address given a name address.
0976                          ;*Macro unroll: hCOLON  5,'NAME>',NAMET
0976                          ;*Macro unroll:  hCODE 5, "NAME>", NAMET
0976                          ALIGN   2   
0976                NAMET:       
0976   00                     NOP      
0977   CD 16 06               CALL   doLIST   
097A   96 03 96 03 48 0E 4C 06 DW   CELLM,CELLM,AT,EXIT   
0982                             ;   SAME?       ( a a u -- a a f \ -0+ )
0982                             ;               Compare u cells in two strings. Return 0 if identical.
0982                          ;*Macro unroll: hCOLON  5,'SAME?',SAMEQ
0982                          ;*Macro unroll:  hCODE 5, "SAME?", SAMEQ
0982                          ALIGN   2   
0982                SAMEQ:       
0982   00                     NOP      
0983   CD 16 06               CALL   doLIST   
0986   EE 0F                  DW   TOR   
0988   2E 0E AE 09            DW   BRAN,SAME2   
098C   1A 10 60 0E A2 03 8E 01 48 0E SAME1:   DW   OVER,RAT,CELLS,PLUS,AT   
0996   1A 10 60 0E A2 03 8E 01 48 0E DW   OVER,RAT,CELLS,PLUS,AT   
09A0   C8 01 22 10            DW   SUBB,QDUP   
09A4   22 0E AE 09            DW   QBRAN,SAME2   
09A8   FC 0F 0E 10 4C 06      DW   RFROM,DROP,EXIT   ;strings not equal
09AE   7A 06 8C 09  SAME2:    DW   DONXT,SAME1   
09B2   24 06 00 00 4C 06      DW   DOLIT,0,EXIT   ;strings equal
09B8                             ;   find        ( a va -- ca na | a F )
09B8                             ;               Search a vocabulary for a string. Return ca and na if succeeded.
09B8                          ;*Macro unroll: mCOLON  4,'find',FIND
09B8                          ;*Macro unroll:  mCODE 4, "find", FIND
09B8                          ALIGN   2   
09B8                FIND:        
09B8                VVCODE:   .SET   $   
09B8                VVLEN:    .SET   (4 & 01FH) / CELLL   
1774                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1774                VVNAME:   .SET   $   
1774   B8 09 82 17            DW   vvCODE,vvLINK   
1778                VVLINK:   .SET   $   
1778   04 66 69 6E 64         DB   4,"find"   
09B8                          .ORG   vvCODE   
09B8   00                     NOP      
09B9   CD 16 06               CALL   doLIST   
09BC   12 10 0A 10 58 0E      DW   SWAP,DUPP,CAT   
09C2   24 06 02 00 20 03 D2 10 3E 0E DW   DOLIT,CELLL,SLASH,TEMP,STORE   
09CC   0A 10 48 0E EE 0F 8A 03 12 10 DW   DUPP,AT,TOR,CELLP,SWAP   
09D6   48 0E 0A 10  FIND1:    DW   AT,DUPP   
09DA   22 0E 06 0A            DW   QBRAN,FIND6   
09DE   0A 10 48 0E 24 06 1F 00 70 01 60 0E 84 01 DW   DUPP,AT,DOLIT,MASKK,ANDD,RAT,XORR   
09EC   22 0E FA 09            DW   QBRAN,FIND2   
09F0   8A 03 24 06 FF FF      DW   CELLP,DOLIT,-1   ;true flag
09F6   2E 0E 02 0A            DW   BRAN,FIND3   
09FA   8A 03 D2 10 48 0E 82 09 FIND2:   DW   CELLP,TEMP,AT,SAMEQ   
0A02   2E 0E 12 0A  FIND3:    DW   BRAN,FIND4   
0A06   FC 0F 0E 10  FIND6:    DW   RFROM,DROP   
0A0A   12 10 96 03 12 10 4C 06 DW   SWAP,CELLM,SWAP,EXIT   
0A12   22 0E 1E 0A  FIND4:    DW   QBRAN,FIND5   
0A16   96 03 96 03            DW   CELLM,CELLM   
0A1A   2E 0E D6 09            DW   BRAN,FIND1   
0A1E   FC 0F 0E 10 12 10 0E 10 FIND5:   DW   RFROM,DROP,SWAP,DROP   
0A26   96 03                  DW   CELLM   
0A28   0A 10 76 09 12 10 4C 06 DW   DUPP,NAMET,SWAP,EXIT   
0A30                             ;   NAME?       ( a -- ca na | a F )
0A30                             ;               Search all context vocabularies for a string.
0A30                          ;*Macro unroll: hCOLON  5,'NAME?',NAMEQ
0A30                          ;*Macro unroll:  hCODE 5, "NAME?", NAMEQ
0A30                          ALIGN   2   
0A30                NAMEQ:       
0A30   00                     NOP      
0A31   CD 16 06               CALL   doLIST   
0A34   1A 11 0A 10 AE 0E 84 01 DW   CNTXT,DUPP,DAT,XORR   ;?context=also
0A3C   22 0E 42 0A            DW   QBRAN,NAMQ1   
0A40   96 03                  DW   CELLM   ;no, start with context
0A42   EE 0F        NAMQ1:    DW   TOR   
0A44   FC 0F 8A 03 0A 10 EE 0F NAMQ2:   DW   RFROM,CELLP,DUPP,TOR   ;next in search order
0A4C   48 0E 22 10            DW   AT,QDUP   
0A50   22 0E 62 0A            DW   QBRAN,NAMQ3   
0A54   B8 09 22 10            DW   FIND,QDUP   ;search vocabulary
0A58   22 0E 44 0A            DW   QBRAN,NAMQ2   
0A5C   FC 0F 0E 10 4C 06      DW   RFROM,DROP,EXIT   ;found name
0A62   FC 0F 0E 10  NAMQ3:    DW   RFROM,DROP   ;name not found
0A66   24 06 00 00 4C 06      DW   DOLIT,0,EXIT   ;false flag
0A6C                             ;   CATCH       ( ca -- 0 | err# )
0A6C                             ;               Execute word at ca and set up an error frame for it.
0A6C                          ;*Macro unroll: mCOLON  5,'CATCH',CATCH
0A6C                          ;*Macro unroll:  mCODE 5, "CATCH", CATCH
0A6C                          ALIGN   2   
0A6C                CATCH:       
0A6C                VVCODE:   .SET   $   
0A6C                VVLEN:    .SET   (5 & 01FH) / CELLL   
176A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
176A                VVNAME:   .SET   $   
176A   6C 0A 78 17            DW   vvCODE,vvLINK   
176E                VVLINK:   .SET   $   
176E   05 43 41 54 43 48      DB   5,"CATCH"   
0A6C                          .ORG   vvCODE   
0A6C   00                     NOP      
0A6D   CD 16 06               CALL   doLIST   
0A70   7A 0E EE 0F 12 11 48 0E EE 0F DW   SPAT,TOR,HANDL,AT,TOR   ;save error frame
0A7A   6A 0E 12 11 3E 0E 1E 0E DW   RPAT,HANDL,STORE,EXECU   ;execute
0A82   FC 0F 12 11 3E 0E      DW   RFROM,HANDL,STORE   ;reSTORE error frame
0A88   FC 0F 0E 10 24 06 00 00 4C 06 DW   RFROM,DROP,DOLIT,0,EXIT   ;no error
0A92                             ;   THROW       ( err# -- err# )
0A92                             ;               Reset system to current local error frame an update error flag.
0A92                          ;*Macro unroll: mCOLON  5,'THROW',THROW
0A92                          ;*Macro unroll:  mCODE 5, "THROW", THROW
0A92                          ALIGN   2   
0A92                THROW:       
0A92                VVCODE:   .SET   $   
0A92                VVLEN:    .SET   (5 & 01FH) / CELLL   
1760                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1760                VVNAME:   .SET   $   
1760   92 0A 6E 17            DW   vvCODE,vvLINK   
1764                VVLINK:   .SET   $   
1764   05 54 48 52 4F 57      DB   5,"THROW"   
0A92                          .ORG   vvCODE   
0A92   00                     NOP      
0A93   CD 16 06               CALL   doLIST   
0A96   12 11 48 0E 72 0E      DW   HANDL,AT,RPSTO   ;reSTORE return stack
0A9C   FC 0F 12 11 3E 0E      DW   RFROM,HANDL,STORE   ;reSTORE handler frame
0AA2   FC 0F 12 10 EE 0F 84 0E DW   RFROM,SWAP,TOR,SPSTO   ;reSTORE data stack
0AAA   0E 10 FC 0F 4C 06      DW   DROP,RFROM,EXIT   
0AB0                             ;   NULL$       ( -- a )
0AB0                             ;               Return address of a null string with zero count.
0AB0                          ;*Macro unroll: hCOLON  5,'NULL$',NULLS
0AB0                          ;*Macro unroll:  hCODE 5, "NULL$", NULLS
0AB0                          ALIGN   2   
0AB0                NULLS:       
0AB0   00                     NOP      
0AB1   CD 16 06               CALL   doLIST   
0AB4   2C 06                  DW   DOVAR   ;emulate CREATE
0AB6   00 00                  DW   0   
0AB8   63 6F 79 6F 74 65      DB   99,111,121,111,116,101   
0ABE                          ALIGN   2   
0ABE                             ;   ABORT       ( -- )
0ABE                             ;               Reset data stack and jump to QUIT.
0ABE                          ;*Macro unroll: mCOLON  5,'ABORT',ABORT
0ABE                          ;*Macro unroll:  mCODE 5, "ABORT", ABORT
0ABE                          ALIGN   2   
0ABE                ABORT:       
0ABE                VVCODE:   .SET   $   
0ABE                VVLEN:    .SET   (5 & 01FH) / CELLL   
1756                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1756                VVNAME:   .SET   $   
1756   BE 0A 64 17            DW   vvCODE,vvLINK   
175A                VVLINK:   .SET   $   
175A   05 41 42 4F 52 54      DB   5,"ABORT"   
0ABE                          .ORG   vvCODE   
0ABE   00                     NOP      
0ABF   CD 16 06               CALL   doLIST   
0AC2   B0 0A 92 0A            DW   NULLS,THROW   
0AC6                             ;   abort"      ( f -- )
0AC6                             ;               Run time routine of ABORT" . Abort with a message.
0AC6                          ;*Macro unroll: mCOLON  COMPO+6,'abort|',ABORQ
0AC6                          ;*Macro unroll:  mCODE COMPO+6, "abort|", ABORQ
0AC6                          ALIGN   2   
0AC6                ABORQ:       
0AC6                VVCODE:   .SET   $   
0AC6                VVLEN:    .SET   (COMPO+6 & 01FH) / CELLL   
172A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
172A                VVNAME:   .SET   $   
172A   C6 0A 5A 17            DW   vvCODE,vvLINK   
172E                VVLINK:   .SET   $   
172E   26 61 62 6F 72 74 7C   DB   COMPO+6,"abort|"   
0AC6                          .ORG   vvCODE   
0AC6   00                     NOP      
0AC7   CD 16 06               CALL   doLIST   
0ACA   22 0E D2 0A            DW   QBRAN,ABOR1   ;text flag
0ACE   4E 0C 92 0A            DW   DOSTR,THROW   ;pass error string
0AD2                ABOR1:       
0AD2   4E 0C 0E 10 4C 06      DW   DOSTR,DROP,EXIT   ;drop error
0AD8                             ;   $INTERPRET  ( a -- )
0AD8                             ;               Interpret a word. If failed, try to convert it to an integer.
0AD8                          ;*Macro unroll: hCOLON  10,'$INTERPRET',INTER
0AD8                          ;*Macro unroll:  hCODE 10, "$INTERPRET", INTER
0AD8                          ALIGN   2   
0AD8                INTER:       
0AD8   00                     NOP      
0AD9   CD 16 06               CALL   doLIST   
0ADC   30 0A 22 10            DW   NAMEQ,QDUP   ;?defined
0AE0   22 0E 00 0B            DW   QBRAN,INTE1   
0AE4   48 0E 24 06 20 00 70 01 DW   AT,DOLIT,COMPO,ANDD   ;?compile only lexicon bits
0AEC                          ;*Macro unroll:  mDSTR   ABORQ,' compile only'
0AEC   C6 0A                  DW   ABORQ   
0AEE                VVLEN:    .SET   $   
0AEE   00 20 63 6F 6D 70 69 6C 65 20 6F 6E 6C 79 DB   0," compile only"   
0AFC                VVCODE:   .SET   $   
0AEE                          .ORG   vvLEN   
0AEE   0D                     DB   vvCODE - vvLEN - 1   
0AFC                          .ORG   vvCODE   
0AFC   1E 0E 4C 06            DW   EXECU,EXIT   ;execute defined word
0B00                INTE1:       
0B00   02 11 F4 0E            DW   TNUMB,ATEXE   ;convert a number
0B04   22 0E 0A 0B            DW   QBRAN,INTE2   
0B08   4C 06                  DW   EXIT   
0B0A                INTE2:       
0B0A   92 0A                  DW   THROW   ;error
0B0C                             ;   [           ( -- )
0B0C                             ;               Start the text interpreter.
0B0C                          ;*Macro unroll: mCOLON  IMEDD+1,'[',LBRAC
0B0C                          ;*Macro unroll:  mCODE IMEDD+1, "[", LBRAC
0B0C                          ALIGN   2   
0B0C                LBRAC:       
0B0C                VVCODE:   .SET   $   
0B0C                VVLEN:    .SET   (IMEDD+1 & 01FH) / CELLL   
16E4                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
16E4                VVNAME:   .SET   $   
16E4   0C 0B 2E 17            DW   vvCODE,vvLINK   
16E8                VVLINK:   .SET   $   
16E8   41 5B                  DB   IMEDD+1,"["   
0B0C                          .ORG   vvCODE   
0B0C   00                     NOP      
0B0D   CD 16 06               CALL   doLIST   
0B10   24 06 D8 0A FA 10 3E 0E 4C 06 DW   DOLIT,INTER,TEVAL,STORE,EXIT   
0B1A                             ;   .OK         ( -- )
0B1A                             ;               Display "ok" only while interpreting.
0B1A                          ;*Macro unroll: mCOLON  3,'.OK',DOTOK
0B1A                          ;*Macro unroll:  mCODE 3, ".OK", DOTOK
0B1A                          ALIGN   2   
0B1A                DOTOK:       
0B1A                VVCODE:   .SET   $   
0B1A                VVLEN:    .SET   (3 & 01FH) / CELLL   
16DC                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
16DC                VVNAME:   .SET   $   
16DC   1A 0B E8 16            DW   vvCODE,vvLINK   
16E0                VVLINK:   .SET   $   
16E0   03 2E 4F 4B            DB   3,".OK"   
0B1A                          .ORG   vvCODE   
0B1A   00                     NOP      
0B1B   CD 16 06               CALL   doLIST   
0B1E   24 06 D8 0A FA 10 48 0E E2 01 DW   DOLIT,INTER,TEVAL,AT,EQUAL   
0B28   22 0E 32 0B            DW   QBRAN,DOTO1   
0B2C                          ;*Macro unroll:  mDSTR      DOTQP,' ok'
0B2C   6E 0C                  DW   DOTQP   
0B2E                VVLEN:    .SET   $   
0B2E   00 20 6F 6B            DB   0," ok"   
0B32                VVCODE:   .SET   $   
0B2E                          .ORG   vvLEN   
0B2E   03                     DB   vvCODE - vvLEN - 1   
0B32                          .ORG   vvCODE   
0B32   3C 0C 4C 06  DOTO1:    DW   CR,EXIT   
0B36                             ;   ?STACK      ( -- )
0B36                             ;               Abort if the data stack underflows.
0B36                          ;*Macro unroll: hCOLON  6,'?STACK',QSTAC
0B36                          ;*Macro unroll:  hCODE 6, "?STACK", QSTAC
0B36                          ALIGN   2   
0B36                QSTAC:       
0B36   00                     NOP      
0B37   CD 16 06               CALL   doLIST   
0B3A   74 10 68 01            DW   DEPTH,ZLESS   ;check only for underflow
0B3E                          ;*Macro unroll:  mDSTR      ABORQ,' underflow'
0B3E   C6 0A                  DW   ABORQ   
0B40                VVLEN:    .SET   $   
0B40   00 20 75 6E 64 65 72 66 6C 6F 77 DB   0," underflow"   
0B4B                VVCODE:   .SET   $   
0B40                          .ORG   vvLEN   
0B40   0A                     DB   vvCODE - vvLEN - 1   
0B4B                          .ORG   vvCODE   
0B4B   4C 06                  DW   EXIT   
0B4D                             ;   EVAL        ( -- )
0B4D                             ;               Interpret the input stream.
0B4D                          ;*Macro unroll: mCOLON  4,'EVAL',EVAL
0B4D                          ;*Macro unroll:  mCODE 4, "EVAL", EVAL
0B4D                          ALIGN   2   
0B4E                EVAL:        
0B4E                VVCODE:   .SET   $   
0B4E                VVLEN:    .SET   (4 & 01FH) / CELLL   
16D2                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
16D2                VVNAME:   .SET   $   
16D2   4E 0B E0 16            DW   vvCODE,vvLINK   
16D6                VVLINK:   .SET   $   
16D6   04 45 56 41 4C         DB   4,"EVAL"   
0B4E                          .ORG   vvCODE   
0B4E   00                     NOP      
0B4F   CD 16 06               CALL   doLIST   
0B52                EVAL1:       
0B52   4E 09 0A 10 58 0E      DW   TOKEN,DUPP,CAT   ;?input stream empty
0B58   22 0E 66 0B            DW   QBRAN,EVAL2   
0B5C   FA 10 F4 0E 36 0B      DW   TEVAL,ATEXE,QSTAC   ;evaluate input, check stack
0B62   2E 0E 52 0B            DW   BRAN,EVAL1   
0B66                EVAL2:       
0B66   0E 10 C2 10 F4 0E 4C 06 DW   DROP,TPROM,ATEXE,EXIT   ;prompt
0B6E                             ;   PC!         ( uc p --  )
0B6E                             ;               output uc to IO port p
0B6E                          ;*Macro unroll: mCODE   3,'PC!',PCSTO
0B6E                          ALIGN   2   
0B6E                PCSTO:       
0B6E                VVCODE:   .SET   $   
0B6E                VVLEN:    .SET   (3 & 01FH) / CELLL   
16CA                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
16CA                VVNAME:   .SET   $   
16CA   6E 0B D6 16            DW   vvCODE,vvLINK   
16CE                VVLINK:   .SET   $   
16CE   03 50 43 21            DB   3,"PC!"   
0B6E                          .ORG   vvCODE   
0B6E   D9                     EXX      ; 4t
0B6F   D1                     POP   DE   ;10t
0B70   7B                     LD   A,E   ; 4t
0B71   ED 79                  OUT   (C),A   ;12t
0B73   D9                     EXX      ; 4t
0B74                          ;*Macro unroll:  mNEXT
0B74   EB                     EX   DE,HL   
0B75                          ;*Macro unroll:  mNEXTHL                         ; 34t
0B75   FD E9                  JP   (IY)   ; 34t
0B77                             ;   PC@         ( p -- uc )
0B77                             ;               output uc to IO port p
0B77                          ;*Macro unroll: mCODE   3,'PC@',PCAT
0B77                          ALIGN   2   
0B78                PCAT:        
0B78                VVCODE:   .SET   $   
0B78                VVLEN:    .SET   (3 & 01FH) / CELLL   
16C2                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
16C2                VVNAME:   .SET   $   
16C2   78 0B CE 16            DW   vvCODE,vvLINK   
16C6                VVLINK:   .SET   $   
16C6   03 50 43 40            DB   3,"PC@"   
0B78                          .ORG   vvCODE   
0B78   D9                     EXX      ; 4t
0B79   ED 78                  IN   A,(C)   ;12t
0B7B   5F                     LD   E,A   ; 4t
0B7C   16 00                  LD   D,0   ; 7t
0B7E   D5                     PUSH   DE   ;11t
0B7F   D9                     EXX      ; 4t
0B80                          ;*Macro unroll:  mNEXT
0B80   EB                     EX   DE,HL   
0B81                          ;*Macro unroll:  mNEXTHL                         ; 34t
0B81   FD E9                  JP   (IY)   ; 34t
0B83                             ;   !IO         ( -- )
0B83                             ;               Initialize the serial I/O devices.
0B83                          ;*Macro unroll: mCODE   3,'!IO', STOIO ;
0B83                          ALIGN   2   ; 
0B84                STOIO:       
0B84                VVCODE:   .SET   $   
0B84                VVLEN:    .SET   (3 & 01FH) / CELLL   
16BA                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
16BA                VVNAME:   .SET   $   
16BA   84 0B C6 16            DW   vvCODE,vvLINK   
16BE                VVLINK:   .SET   $   
16BE   03 21 49 4F            DB   3,"!IO"   
0B84                          .ORG   vvCODE   
0B84   CD D3 00               CALL   INIT_IO   
0B87                          ;*Macro unroll:  mNEXT
0B87   EB                     EX   DE,HL   
0B88                          ;*Macro unroll:  mNEXTHL                         ; 34t
0B88   FD E9                  JP   (IY)   ; 34t
0B8A                             ;   ?RX         ( -- c T | F )
0B8A                             ;               Return input character and true, or a false if no input.
0B8A                          ;*Macro unroll: mCODE	3, '?RX', QRX
0B8A                          ALIGN   2   
0B8A                QRX:         
0B8A                VVCODE:   .SET   $   
0B8A                VVLEN:    .SET   (3 & 01FH) / CELLL   
16B2                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
16B2                VVNAME:   .SET   $   
16B2   8A 0B BE 16            DW   vvCODE,vvLINK   
16B6                VVLINK:   .SET   $   
16B6   03 3F 52 58            DB   3,"?RX"   
0B8A                          .ORG   vvCODE   
0B8A   C5                     PUSH   BC   
0B8B   CD 1D 01               CALL   CKINCHAR   
0B8E   20 05                  JR   nz,QRX1   
0B90   01 00 00               LD   BC,FALSEE   
0B93   18 0A                  JR   QRX2   
0B95                QRX1:        
0B95   CD E7 00               CALL   RXA   
0B98   4F                     LD   C,A   
0B99   06 00                  LD   B,0   
0B9B   C5                     PUSH   BC   
0B9C   01 FF FF               LD   BC,TRUEE   
0B9F                QRX2:        
0B9F                          ;*Macro unroll:  mNEXT
0B9F   EB                     EX   DE,HL   
0BA0                          ;*Macro unroll:  mNEXTHL                         ; 34t
0BA0   FD E9                  JP   (IY)   ; 34t
0BA2                             ;   TX!         ( c -- )
0BA2                             ;               Send character c to the output device.
0BA2                          ;*Macro unroll: mCODE	3,'TX!',TXSTO
0BA2                          ALIGN   2   
0BA2                TXSTO:       
0BA2                VVCODE:   .SET   $   
0BA2                VVLEN:    .SET   (3 & 01FH) / CELLL   
16AA                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
16AA                VVNAME:   .SET   $   
16AA   A2 0B B6 16            DW   vvCODE,vvLINK   
16AE                VVLINK:   .SET   $   
16AE   03 54 58 21            DB   3,"TX!"   
0BA2                          .ORG   vvCODE   
0BA2   79                     LD   A,C   
0BA3   CD 12 01               CALL   TXA   
0BA6   C1                     POP   BC   
0BA7                          ;*Macro unroll:  mNEXT
0BA7   EB                     EX   DE,HL   
0BA8                          ;*Macro unroll:  mNEXTHL                         ; 34t
0BA8   FD E9                  JP   (IY)   ; 34t
0BAA                             ;   ?KEY        ( -- c T | F )
0BAA                             ;               Return input character and true, or a false if no input.
0BAA                          ;*Macro unroll: mCOLON  4,'?KEY',QKEY
0BAA                          ;*Macro unroll:  mCODE 4, "?KEY", QKEY
0BAA                          ALIGN   2   
0BAA                QKEY:        
0BAA                VVCODE:   .SET   $   
0BAA                VVLEN:    .SET   (4 & 01FH) / CELLL   
16A0                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
16A0                VVNAME:   .SET   $   
16A0   AA 0B AE 16            DW   vvCODE,vvLINK   
16A4                VVLINK:   .SET   $   
16A4   04 3F 4B 45 59         DB   4,"?KEY"   
0BAA                          .ORG   vvCODE   
0BAA   00                     NOP      
0BAB   CD 16 06               CALL   doLIST   
0BAE   9A 10 48 0E 1E 0E 4C 06 DW   TQKEY,AT,EXECU,EXIT   
0BB6                             ;   KEY         ( -- c )
0BB6                             ;               Wait for and return an input character.
0BB6                          ;*Macro unroll: mCOLON  3,'KEY',KEY
0BB6                          ;*Macro unroll:  mCODE 3, "KEY", KEY
0BB6                          ALIGN   2   
0BB6                KEY:         
0BB6                VVCODE:   .SET   $   
0BB6                VVLEN:    .SET   (3 & 01FH) / CELLL   
1698                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1698                VVNAME:   .SET   $   
1698   B6 0B A4 16            DW   vvCODE,vvLINK   
169C                VVLINK:   .SET   $   
169C   03 4B 45 59            DB   3,"KEY"   
0BB6                          .ORG   vvCODE   
0BB6   00                     NOP      
0BB7   CD 16 06               CALL   doLIST   
0BBA                KEY1:        
0BBA   AA 0B                  DW   QKEY   
0BBC   22 0E BA 0B            DW   QBRAN,KEY1   
0BC0   4C 06                  DW   EXIT   
0BC2                             ;   EMIT        ( c -- )
0BC2                             ;               Send a character to the output device.
0BC2                          ;*Macro unroll: mCOLON  4, 'EMIT', EMIT
0BC2                          ;*Macro unroll:  mCODE 4, "EMIT", EMIT
0BC2                          ALIGN   2   
0BC2                EMIT:        
0BC2                VVCODE:   .SET   $   
0BC2                VVLEN:    .SET   (4 & 01FH) / CELLL   
168E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
168E                VVNAME:   .SET   $   
168E   C2 0B 9C 16            DW   vvCODE,vvLINK   
1692                VVLINK:   .SET   $   
1692   04 45 4D 49 54         DB   4,"EMIT"   
0BC2                          .ORG   vvCODE   
0BC2   00                     NOP      
0BC3   CD 16 06               CALL   doLIST   
0BC6   A2 10 48 0E 1E 0E 4C 06 DW   TEMIT,AT,EXECU,EXIT   
0BCE                             ;   NUF?        ( -- t )
0BCE                             ;               Return false if no input, else pause and if CR return true.
0BCE                          ;*Macro unroll: mCOLON  4,'NUF?',NUFQ
0BCE                          ;*Macro unroll:  mCODE 4, "NUF?", NUFQ
0BCE                          ALIGN   2   
0BCE                NUFQ:        
0BCE                VVCODE:   .SET   $   
0BCE                VVLEN:    .SET   (4 & 01FH) / CELLL   
1684                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1684                VVNAME:   .SET   $   
1684   CE 0B 92 16            DW   vvCODE,vvLINK   
1688                VVLINK:   .SET   $   
1688   04 4E 55 46 3F         DB   4,"NUF?"   
0BCE                          .ORG   vvCODE   
0BCE   00                     NOP      
0BCF   CD 16 06               CALL   doLIST   
0BD2   AA 0B 0A 10            DW   QKEY,DUPP   
0BD6   22 0E E4 0B            DW   QBRAN,NUFQ1   
0BDA   3E 10 B6 0B 24 06 0D 00 E2 01 DW   DDROP,KEY,DOLIT,CRR,EQUAL   
0BE4                NUFQ1:       
0BE4   4C 06                  DW   EXIT   
0BE6                             ;   PACE        ( -- )
0BE6                             ;               Send a pace character for the file downloading process.
0BE6                          ;*Macro unroll: hCOLON  4,'PACE',PACE
0BE6                          ;*Macro unroll:  hCODE 4, "PACE", PACE
0BE6                          ALIGN   2   
0BE6                PACE:        
0BE6   00                     NOP      
0BE7   CD 16 06               CALL   doLIST   
0BEA   24 06 0B 00 C2 0B 4C 06 DW   DOLIT,11,EMIT,EXIT   
0BF2                             ;   SPACE       ( -- )
0BF2                             ;               Send the blank character to the output device.
0BF2                          ;*Macro unroll: mCOLON  5,'SPACE',SPACE
0BF2                          ;*Macro unroll:  mCODE 5, "SPACE", SPACE
0BF2                          ALIGN   2   
0BF2                SPACE:       
0BF2                VVCODE:   .SET   $   
0BF2                VVLEN:    .SET   (5 & 01FH) / CELLL   
167A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
167A                VVNAME:   .SET   $   
167A   F2 0B 88 16            DW   vvCODE,vvLINK   
167E                VVLINK:   .SET   $   
167E   05 53 50 41 43 45      DB   5,"SPACE"   
0BF2                          .ORG   vvCODE   
0BF2   00                     NOP      
0BF3   CD 16 06               CALL   doLIST   
0BF6   60 07 C2 0B 4C 06      DW   BLANK,EMIT,EXIT   
0BFC                             ;   SPACES      ( +n -- )
0BFC                             ;               Send n spaces to the output device.
0BFC                          ;*Macro unroll: mCOLON  6,'SPACES',SPACS
0BFC                          ;*Macro unroll:  mCODE 6, "SPACES", SPACS
0BFC                          ALIGN   2   
0BFC                SPACS:       
0BFC                VVCODE:   .SET   $   
0BFC                VVLEN:    .SET   (6 & 01FH) / CELLL   
166E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
166E                VVNAME:   .SET   $   
166E   FC 0B 7E 16            DW   vvCODE,vvLINK   
1672                VVLINK:   .SET   $   
1672   06 53 50 41 43 45 53   DB   6,"SPACES"   
0BFC                          .ORG   vvCODE   
0BFC   00                     NOP      
0BFD   CD 16 06               CALL   doLIST   
0C00   24 06 00 00 2E 02 EE 0F DW   DOLIT,0,MAX,TOR   
0C08   2E 0E 0E 0C            DW   BRAN,CHAR2   
0C0C                CHAR1:       
0C0C   F2 0B                  DW   SPACE   
0C0E                CHAR2:       
0C0E   7A 06 0C 0C            DW   DONXT,CHAR1   
0C12   4C 06                  DW   EXIT   
0C14                             ;   TYPE        ( b u -- )
0C14                             ;               Output u characters from b.
0C14                          ;*Macro unroll: mCOLON	4,'TYPE',TYPEE
0C14                          ;*Macro unroll:  mCODE 4, "TYPE", TYPEE
0C14                          ALIGN   2   
0C14                TYPEE:       
0C14                VVCODE:   .SET   $   
0C14                VVLEN:    .SET   (4 & 01FH) / CELLL   
1664                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1664                VVNAME:   .SET   $   
1664   14 0C 72 16            DW   vvCODE,vvLINK   
1668                VVLINK:   .SET   $   
1668   04 54 59 50 45         DB   4,"TYPE"   
0C14                          .ORG   vvCODE   
0C14   00                     NOP      
0C15   CD 16 06               CALL   doLIST   
0C18   EE 0F                  DW   TOR   
0C1A   2E 0E 2A 0C            DW   BRAN,TYPE2   
0C1E                TYPE1:       
0C1E   0A 10 58 0E C2 0B      DW   DUPP,CAT,EMIT   
0C24   24 06 01 00 8E 01      DW   DOLIT,1,PLUS   
0C2A                TYPE2:       
0C2A   7A 06 1E 0C            DW   DONXT,TYPE1   
0C2E   0E 10 4C 06            DW   DROP,EXIT   
0C32                             ;   TYPECSTR    ( cstr -- )
0C32                             ;   Similar to TYPE but prints C null terminated strings
0C32                          ;*Macro unroll: mCODE	3,'TYPESZ',TYPESZ
0C32                          ALIGN   2   
0C32                TYPESZ:      
0C32                VVCODE:   .SET   $   
0C32                VVLEN:    .SET   (3 & 01FH) / CELLL   
165C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
165C                VVNAME:   .SET   $   
165C   32 0C 68 16            DW   vvCODE,vvLINK   
1660                VVLINK:   .SET   $   
1660   03 54 59 50 45 53 5A   DB   3,"TYPESZ"   
0C32                          .ORG   vvCODE   
0C32   60                     LD   H,B   
0C33   69                     LD   L,C   
0C34   CD 23 01               CALL   PRINTSZ   
0C37   C1                     POP   BC   
0C38                          ;*Macro unroll:  mNEXT
0C38   EB                     EX   DE,HL   
0C39                          ;*Macro unroll:  mNEXTHL                         ; 34t
0C39   FD E9                  JP   (IY)   ; 34t
0C3B                             ;   CR          ( -- )
0C3B                             ;               Output a carriage return and a line feed.
0C3B                          ;*Macro unroll: mCOLON	2,'CR',CR
0C3B                          ;*Macro unroll:  mCODE 2, "CR", CR
0C3B                          ALIGN   2   
0C3C                CR:          
0C3C                VVCODE:   .SET   $   
0C3C                VVLEN:    .SET   (2 & 01FH) / CELLL   
1654                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1654                VVNAME:   .SET   $   
1654   3C 0C 60 16            DW   vvCODE,vvLINK   
1658                VVLINK:   .SET   $   
1658   02 43 52               DB   2,"CR"   
0C3C                          .ORG   vvCODE   
0C3C   00                     NOP      
0C3D   CD 16 06               CALL   doLIST   
0C40   24 06 0D 00 C2 0B 24 06 0A 00 C2 0B 4C 06 DW   DOLIT,CRR,EMIT,DOLIT,LFF,EMIT,EXIT   
0C4E                             ;   do$         ( -- a )
0C4E                             ;               Return the address of a compiled string.
0C4E                          ;*Macro unroll: mCOLON  COMPO+3,'do$',DOSTR
0C4E                          ;*Macro unroll:  mCODE COMPO+3, "do$", DOSTR
0C4E                          ALIGN   2   
0C4E                DOSTR:       
0C4E                VVCODE:   .SET   $   
0C4E                VVLEN:    .SET   (COMPO+3 & 01FH) / CELLL   
162C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
162C                VVNAME:   .SET   $   
162C   4E 0C 58 16            DW   vvCODE,vvLINK   
1630                VVLINK:   .SET   $   
1630   23 64 6F 24            DB   COMPO+3,"do$"   
0C4E                          .ORG   vvCODE   
0C4E   00                     NOP      
0C4F   CD 16 06               CALL   doLIST   
0C52   FC 0F 60 0E FC 0F BE 0E 8E 01 DW   RFROM,RAT,RFROM,COUNT,PLUS   
0C5C   B6 0F EE 0F 12 10 EE 0F 4C 06 DW   ALGND,TOR,SWAP,TOR,EXIT   
0C66                             ;   $"|         ( -- a )
0C66                             ;               Run time routine compiled by $". Return address of a compiled string.
0C66                          ;*Macro unroll: hCOLON  COMPO+3,'$||',STRQP
0C66                          ;*Macro unroll:  hCODE COMPO+3, "$||", STRQP
0C66                          ALIGN   2   
0C66                STRQP:       
0C66   00                     NOP      
0C67   CD 16 06               CALL   doLIST   
0C6A   4E 0C 4C 06            DW   DOSTR,EXIT   ;force a call to do$
0C6E                             ;   ."|         ( -- )
0C6E                             ;               Run time routine of ." . Output a compiled string.
0C6E                          ;*Macro unroll: hCOLON  COMPO+3,'.||',DOTQP
0C6E                          ;*Macro unroll:  hCODE COMPO+3, ".||", DOTQP
0C6E                          ALIGN   2   
0C6E                DOTQP:       
0C6E   00                     NOP      
0C6F   CD 16 06               CALL   doLIST   
0C72   4E 0C BE 0E 14 0C 4C 06 DW   DOSTR,COUNT,TYPEE,EXIT   
0C7A                             ;   .R          ( n +n -- )
0C7A                             ;               Display an integer in a field of n columns, right justified.
0C7A                          ;*Macro unroll: mCOLON  2,'.R',DOTR
0C7A                          ;*Macro unroll:  mCODE 2, ".R", DOTR
0C7A                          ALIGN   2   
0C7A                DOTR:        
0C7A                VVCODE:   .SET   $   
0C7A                VVLEN:    .SET   (2 & 01FH) / CELLL   
1624                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1624                VVNAME:   .SET   $   
1624   7A 0C 30 16            DW   vvCODE,vvLINK   
1628                VVLINK:   .SET   $   
1628   02 2E 52               DB   2,".R"   
0C7A                          .ORG   vvCODE   
0C7A   00                     NOP      
0C7B   CD 16 06               CALL   doLIST   
0C7E   EE 0F 2E 07 FC 0F 1A 10 C8 01 DW   TOR,STR,RFROM,OVER,SUBB   
0C88   FC 0B 14 0C 4C 06      DW   SPACS,TYPEE,EXIT   
0C8E                             ;   U.R         ( u +n -- )
0C8E                             ;               Display an unsigned integer in n column, right justified.
0C8E                          ;*Macro unroll: mCOLON  3,'U.R',UDOTR
0C8E                          ;*Macro unroll:  mCODE 3, "U.R", UDOTR
0C8E                          ALIGN   2   
0C8E                UDOTR:       
0C8E                VVCODE:   .SET   $   
0C8E                VVLEN:    .SET   (3 & 01FH) / CELLL   
161C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
161C                VVNAME:   .SET   $   
161C   8E 0C 28 16            DW   vvCODE,vvLINK   
1620                VVLINK:   .SET   $   
1620   03 55 2E 52            DB   3,"U.R"   
0C8E                          .ORG   vvCODE   
0C8E   00                     NOP      
0C8F   CD 16 06               CALL   doLIST   
0C92   EE 0F C6 06 F8 06 1C 07 DW   TOR,BDIGS,DIGS,EDIGS   
0C9A   FC 0F 1A 10 C8 01      DW   RFROM,OVER,SUBB   
0CA0   FC 0B 14 0C 4C 06      DW   SPACS,TYPEE,EXIT   
0CA6                             ;   U.          ( u -- )
0CA6                             ;               Display an unsigned integer in free format.
0CA6                          ;*Macro unroll: mCOLON  2,'U.',UDOT
0CA6                          ;*Macro unroll:  mCODE 2, "U.", UDOT
0CA6                          ALIGN   2   
0CA6                UDOT:        
0CA6                VVCODE:   .SET   $   
0CA6                VVLEN:    .SET   (2 & 01FH) / CELLL   
1614                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1614                VVNAME:   .SET   $   
1614   A6 0C 20 16            DW   vvCODE,vvLINK   
1618                VVLINK:   .SET   $   
1618   02 55 2E               DB   2,"U."   
0CA6                          .ORG   vvCODE   
0CA6   00                     NOP      
0CA7   CD 16 06               CALL   doLIST   
0CAA   C6 06 F8 06 1C 07      DW   BDIGS,DIGS,EDIGS   
0CB0   F2 0B 14 0C 4C 06      DW   SPACE,TYPEE,EXIT   
0CB6                             ;   .           ( w -- )
0CB6                             ;               Display an integer in free format, preceeded by a space.
0CB6                          ;*Macro unroll: mCOLON  1,'.',DOT
0CB6                          ;*Macro unroll:  mCODE 1, ".", DOT
0CB6                          ALIGN   2   
0CB6                DOT:         
0CB6                VVCODE:   .SET   $   
0CB6                VVLEN:    .SET   (1 & 01FH) / CELLL   
160E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
160E                VVNAME:   .SET   $   
160E   B6 0C 18 16            DW   vvCODE,vvLINK   
1612                VVLINK:   .SET   $   
1612   01 2E                  DB   1,"."   
0CB6                          .ORG   vvCODE   
0CB6   00                     NOP      
0CB7   CD 16 06               CALL   doLIST   
0CBA   CA 10 48 0E 24 06 0A 00 84 01 DW   BASE,AT,DOLIT,10,XORR   ;?decimal
0CC4   22 0E CC 0C            DW   QBRAN,DOT1   
0CC8   A6 0C 4C 06            DW   UDOT,EXIT   ;no, display unsigned
0CCC                DOT1:        
0CCC   2E 07 F2 0B 14 0C 4C 06 DW   STR,SPACE,TYPEE,EXIT   ;yes, display signed
0CD4                             ;   .(          ( -- )
0CD4                             ;               Output following string up to next ) .
0CD4                          ;*Macro unroll: mCOLON  IMEDD+2,'.(',DOTPR
0CD4                          ;*Macro unroll:  mCODE IMEDD+2, ".(", DOTPR
0CD4                          ALIGN   2   
0CD4                DOTPR:       
0CD4                VVCODE:   .SET   $   
0CD4                VVLEN:    .SET   (IMEDD+2 & 01FH) / CELLL   
15C6                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
15C6                VVNAME:   .SET   $   
15C6   D4 0C 12 16            DW   vvCODE,vvLINK   
15CA                VVLINK:   .SET   $   
15CA   42 2E 28               DB   IMEDD+2,".("   
0CD4                          .ORG   vvCODE   
0CD4   00                     NOP      
0CD5   CD 16 06               CALL   doLIST   
0CD8   24 06 04 09 14 0C 4C 06 DW   DOLIT,")",PARSE,TYPEE,EXIT   
0CE0                             ;   ?           ( a -- )
0CE0                             ;               Display the contents in a memory cell.
0CE0                          ;*Macro unroll: mCOLON  1,'?',QUEST
0CE0                          ;*Macro unroll:  mCODE 1, "?", QUEST
0CE0                          ALIGN   2   
0CE0                QUEST:       
0CE0                VVCODE:   .SET   $   
0CE0                VVLEN:    .SET   (1 & 01FH) / CELLL   
15C0                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
15C0                VVNAME:   .SET   $   
15C0   E0 0C CA 15            DW   vvCODE,vvLINK   
15C4                VVLINK:   .SET   $   
15C4   01 3F                  DB   1,"?"   
0CE0                          .ORG   vvCODE   
0CE0   00                     NOP      
0CE1   CD 16 06               CALL   doLIST   
0CE4   48 0E B6 0C 4C 06      DW   AT,DOT,EXIT   
0CEA                             ;   ^H          ( bot eot cur -- bot eot cur )
0CEA                             ;               Backup the cursor by one character.
0CEA                          ;*Macro unroll: mCOLON  2,'^H',BKSP
0CEA                          ;*Macro unroll:  mCODE 2, "^H", BKSP
0CEA                          ALIGN   2   
0CEA                BKSP:        
0CEA                VVCODE:   .SET   $   
0CEA                VVLEN:    .SET   (2 & 01FH) / CELLL   
15B8                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
15B8                VVNAME:   .SET   $   
15B8   EA 0C C4 15            DW   vvCODE,vvLINK   
15BC                VVLINK:   .SET   $   
15BC   02 5E 48               DB   2,"^H"   
0CEA                          .ORG   vvCODE   
0CEA   00                     NOP      
0CEB   CD 16 06               CALL   doLIST   
0CEE   EE 0F 1A 10 FC 0F 12 10 1A 10 84 01 DW   TOR,OVER,RFROM,SWAP,OVER,XORR   
0CFA   22 0E 1A 0D            DW   QBRAN,BACK1   
0CFE   24 06 08 00 BA 10 F4 0E 24 06 01 00 C8 01 DW   DOLIT,BKSPP,TECHO,ATEXE,DOLIT,1,SUBB   
0D0C   60 07 BA 10 F4 0E      DW   BLANK,TECHO,ATEXE   
0D12   24 06 08 00 BA 10 F4 0E DW   DOLIT,BKSPP,TECHO,ATEXE   
0D1A                BACK1:       
0D1A   4C 06                  DW   EXIT   
0D1C                             ;   TAP         ( bot eot cur c -- bot eot cur )
0D1C                             ;               Accept and echo the key stroke and bump the cursor.
0D1C                          ;*Macro unroll: mCOLON  3,'TAP',TAP
0D1C                          ;*Macro unroll:  mCODE 3, "TAP", TAP
0D1C                          ALIGN   2   
0D1C                TAP:         
0D1C                VVCODE:   .SET   $   
0D1C                VVLEN:    .SET   (3 & 01FH) / CELLL   
15B0                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
15B0                VVNAME:   .SET   $   
15B0   1C 0D BC 15            DW   vvCODE,vvLINK   
15B4                VVLINK:   .SET   $   
15B4   03 54 41 50            DB   3,"TAP"   
0D1C                          .ORG   vvCODE   
0D1C   00                     NOP      
0D1D   CD 16 06               CALL   doLIST   
0D20   0A 10 BA 10 F4 0E      DW   DUPP,TECHO,ATEXE   
0D26   1A 10 50 0E 24 06 01 00 8E 01 4C 06 DW   OVER,CSTOR,DOLIT,1,PLUS,EXIT   
0D32                             ;   kTAP        ( bot eot cur c -- bot eot cur )
0D32                             ;               Process a key stroke, CR or backspace.
0D32                          ;*Macro unroll: mCOLON  4,'kTAP',KTAP
0D32                          ;*Macro unroll:  mCODE 4, "kTAP", KTAP
0D32                          ALIGN   2   
0D32                KTAP:        
0D32                VVCODE:   .SET   $   
0D32                VVLEN:    .SET   (4 & 01FH) / CELLL   
15A6                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
15A6                VVNAME:   .SET   $   
15A6   32 0D B4 15            DW   vvCODE,vvLINK   
15AA                VVLINK:   .SET   $   
15AA   04 6B 54 41 50         DB   4,"kTAP"   
0D32                          .ORG   vvCODE   
0D32   00                     NOP      
0D33   CD 16 06               CALL   doLIST   
0D36   0A 10 24 06 0D 00 84 01 DW   DUPP,DOLIT,CRR,XORR   
0D3E   22 0E 56 0D            DW   QBRAN,KTAP2   
0D42   24 06 08 00 84 01      DW   DOLIT,BKSPP,XORR   
0D48   22 0E 52 0D            DW   QBRAN,KTAP1   
0D4C   60 07 1C 0D 4C 06      DW   BLANK,TAP,EXIT   
0D52                KTAP1:       
0D52   EA 0C 4C 06            DW   BKSP,EXIT   
0D56                KTAP2:       
0D56   0E 10 12 10 0E 10 0A 10 4C 06 DW   DROP,SWAP,DROP,DUPP,EXIT   
0D60                             ;   accept      ( b u -- b u )
0D60                             ;               Accept characters to input buffer. Return with actual count.
0D60                          ;*Macro unroll: mCOLON  6,'accept',ACCEP
0D60                          ;*Macro unroll:  mCODE 6, "accept", ACCEP
0D60                          ALIGN   2   
0D60                ACCEP:       
0D60                VVCODE:   .SET   $   
0D60                VVLEN:    .SET   (6 & 01FH) / CELLL   
159A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
159A                VVNAME:   .SET   $   
159A   60 0D AA 15            DW   vvCODE,vvLINK   
159E                VVLINK:   .SET   $   
159E   06 61 63 63 65 70 74   DB   6,"accept"   
0D60                          .ORG   vvCODE   
0D60   00                     NOP      
0D61   CD 16 06               CALL   doLIST   
0D64   1A 10 8E 01 1A 10      DW   OVER,PLUS,OVER   
0D6A                ACCP1:       
0D6A   48 10 84 01            DW   DDUP,XORR   
0D6E   22 0E 90 0D            DW   QBRAN,ACCP4   
0D72   B6 0B 0A 10            DW   KEY,DUPP   
0D76   60 07 24 06 7F 00 54 02 DW   BLANK,DOLIT,127,WITHI   
0D7E   22 0E 88 0D            DW   QBRAN,ACCP2   
0D82   1C 0D                  DW   TAP   
0D84   2E 0E 8C 0D            DW   BRAN,ACCP3   
0D88                ACCP2:       
0D88   B2 10 F4 0E            DW   TTAP,ATEXE   
0D8C                ACCP3:       
0D8C   2E 0E 6A 0D            DW   BRAN,ACCP1   
0D90                ACCP4:       
0D90   0E 10 1A 10 C8 01 4C 06 DW   DROP,OVER,SUBB,EXIT   
0D98                             ;   EXPECT      ( b u -- )
0D98                             ;               Accept input stream and STORE count in SPAN.
0D98                          ;*Macro unroll: hCOLON  6,'EXPECT',EXPEC
0D98                          ;*Macro unroll:  hCODE 6, "EXPECT", EXPEC
0D98                          ALIGN   2   
0D98                EXPEC:       
0D98   00                     NOP      
0D99   CD 16 06               CALL   doLIST   
0D9C   AA 10 F4 0E DA 10 3E 0E 0E 10 4C 06 DW   TEXPE,ATEXE,SPAN,STORE,DROP,EXIT   
0DA8                             ;   QUERY       ( -- )
0DA8                             ;               Accept input stream to terminal input buffer.
0DA8                          ;*Macro unroll: hCOLON  5,'QUERY',QUERY
0DA8                          ;*Macro unroll:  hCODE 5, "QUERY", QUERY
0DA8                          ALIGN   2   
0DA8                QUERY:       
0DA8   00                     NOP      
0DA9   CD 16 06               CALL   doLIST   
0DAC   E8 0E 24 06 50 00 AA 10 F4 0E EA 10 3E 0E DW   TIB,DOLIT,80,TEXPE,ATEXE,NTIB,STORE   
0DBA   0E 10 24 06 00 00 E2 10 3E 0E 4C 06 DW   DROP,DOLIT,0,INN,STORE,EXIT   
0DC6                          ;*Macro unroll: hCOLON	4,'KOLD',KOLD
0DC6                          ;*Macro unroll:  hCODE 4, "KOLD", KOLD
0DC6                          ALIGN   2   
0DC6                KOLD:        
0DC6   00                     NOP      
0DC7   CD 16 06               CALL   doLIST   
0DCA   84 0B                  DW   STOIO   
0DCC                             ; DW	DOLIT, 65, EMIT
0DCC   24 06 D6 0D BE 0E 14 0C DW   DOLIT,HELLO,COUNT,TYPEE   
0DD4   1C 0E                  DW   QUIT   
0DD6   0F 48 65 6C 6C 6F 20 46 6F 72 74 68 21 20 0D 0A HELLO:   .PSTR   "Hello Forth! \r\n"   
0DE6                NEXT_STEP:      
0DE6   5E                     LD   E,(HL)   ; 7t
0DE7   23                     INC   HL   ; 6t
0DE8   56                     LD   D,(HL)   ; 7t
0DE9   23                     INC   HL   ; 6t
0DEA   EB                     EX   DE,HL   ; 4t
0DEB   E9                     JP   (HL)   ; 4t
0DEC                          ;*Macro unroll: mCOLON	4,'COLD',COLD
0DEC                          ;*Macro unroll:  mCODE 4, "COLD", COLD
0DEC                          ALIGN   2   
0DEC                COLD:        
0DEC                VVCODE:   .SET   $   
0DEC                VVLEN:    .SET   (4 & 01FH) / CELLL   
1590                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1590                VVNAME:   .SET   $   
1590   EC 0D 9E 15            DW   vvCODE,vvLINK   
1594                VVLINK:   .SET   $   
1594   04 43 4F 4C 44         DB   4,"COLD"   
0DEC                          .ORG   vvCODE   
0DEC   00                     NOP      
0DED   CD 16 06               CALL   doLIST   
0DF0                COLD1:       
0DF0   24 06 2D 01 24 06 00 24 DW   DOLIT,UZERO,DOLIT,UPP   
0DF8   24 06 3A 00 04 0F      DW   DOLIT,ULAST-UZERO,CMOVE   ;initialize user area
0DFE   06 0E                  DW   PRESE   ;initialize stack and TIB
0E00                             ; DW      TBOOT,ATEXE             ;application boot
0E00                             ; DW      FORTH,CNTXT,AT,DUPP     ;initialize search order
0E00                             ; DW      CRRNT,DSTOR,OVERT
0E00   1C 0E                  DW   QUIT   ;start interpretation
0E02   2E 0E F0 0D            DW   BRAN,COLD1   ;just in case
0E06                             ;   PRESET      ( -- )
0E06                             ;               Reset data stack pointer and the terminal input buffer.
0E06                          ;*Macro unroll: mCOLON  6,'PRESET',PRESE
0E06                          ;*Macro unroll:  mCODE 6, "PRESET", PRESE
0E06                          ALIGN   2   
0E06                PRESE:       
0E06                VVCODE:   .SET   $   
0E06                VVLEN:    .SET   (6 & 01FH) / CELLL   
1584                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1584                VVNAME:   .SET   $   
1584   06 0E 94 15            DW   vvCODE,vvLINK   
1588                VVLINK:   .SET   $   
1588   06 50 52 45 53 45 54   DB   6,"PRESET"   
0E06                          .ORG   vvCODE   
0E06   00                     NOP      
0E07   CD 16 06               CALL   doLIST   
0E0A   8A 10 48 0E 84 0E      DW   SZERO,AT,SPSTO   
0E10   24 06 00 22 EA 10 8A 03 3E 0E 4C 06 DW   DOLIT,TIBB,NTIB,CELLP,STORE,EXIT   
0E1C                          ;*Macro unroll: mCODE  4, 'QUIT', QUIT
0E1C                          ALIGN   2   
0E1C                QUIT:        
0E1C                VVCODE:   .SET   $   
0E1C                VVLEN:    .SET   (4 & 01FH) / CELLL   
157A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
157A                VVNAME:   .SET   $   
157A   1C 0E 88 15            DW   vvCODE,vvLINK   
157E                VVLINK:   .SET   $   
157E   04 51 55 49 54         DB   4,"QUIT"   
0E1C                          .ORG   vvCODE   
0E1C   76                     HALT      
0E1D                             ;   EXECUTE	( i*x xt -- j*x )		\ CORE
0E1D                             ;		Perform the semantics indentified by execution token, xt.
0E1D                          ;*Macro unroll: mCODE	7,'EXECUTE', EXECU
0E1D                          ALIGN   2   
0E1E                EXECU:       
0E1E                VVCODE:   .SET   $   
0E1E                VVLEN:    .SET   (7 & 01FH) / CELLL   
156E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
156E                VVNAME:   .SET   $   
156E   1E 0E 7E 15            DW   vvCODE,vvLINK   
1572                VVLINK:   .SET   $   
1572   07 45 58 45 43 55 54 45 DB   7,"EXECUTE"   
0E1E                          .ORG   vvCODE   
0E1E   60                     LD   H,B   
0E1F   69                     LD   L,C   
0E20   C1                     POP   BC   
0E21   E9                     JP   (HL)   
0E22                             ; 
0E22                             ;   0BRAN	( flag -- )
0E22                             ;		BRAN if flag is zero.
0E22                          ;*Macro unroll: hCODE	COMPO+7,'?branch', QBRAN
0E22                          ALIGN   2   
0E22                QBRAN:       
0E22   78                     LD   A,B   ; 4t
0E23   B1                     OR   C   ; 4t
0E24   C1                     POP   BC   ;10t
0E25   CA 2E 0E               JP   Z,BRAN   ;10/7t a fast dec is ok, only
0E28   13                     INC   DE   ; 6t yes,continue past the BRAN offset
0E29   13                     INC   DE   ; 6t
0E2A                          ;*Macro unroll: 	mNEXT
0E2A   EB                     EX   DE,HL   
0E2B                          ;*Macro unroll:  mNEXTHL                         ; 34t
0E2B   FD E9                  JP   (IY)   ; 34t
0E2D                             ;   BRAN	( -- )
0E2D                             ;		BRAN to an inline address.
0E2D                          ;*Macro unroll: hCODE	COMPO+6,'branch', BRAN
0E2D                          ALIGN   2   
0E2E                BRAN:        
0E2E   1A                     LD   A,(DE)   ; 7t go back to the loop
0E2F   6F                     LD   L,A   ; 4t
0E30   13                     INC   DE   ; 6t
0E31   1A                     LD   A,(DE)   ; 7t
0E32   67                     LD   H,A   ; 4t
0E33                          ;*Macro unroll: 	mNEXTHL
0E33   FD E9                  JP   (IY)   
0E35                             ; 
0E35                             ;   THROW    ( cstr -- )
0E35                             ;   Prints string message and returns TODO: restart Forth interpreter QUIT
0E35                          ;*Macro unroll: mCOLON	5,'THROWX',THROWX
0E35                          ;*Macro unroll:  mCODE 5, "THROWX", THROWX
0E35                          ALIGN   2   
0E36                THROWX:      
0E36                VVCODE:   .SET   $   
0E36                VVLEN:    .SET   (5 & 01FH) / CELLL   
1564                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1564                VVNAME:   .SET   $   
1564   36 0E 72 15            DW   vvCODE,vvLINK   
1568                VVLINK:   .SET   $   
1568   05 54 48 52 4F 57 58   DB   5,"THROWX"   
0E36                          .ORG   vvCODE   
0E36   00                     NOP      
0E37   CD 16 06               CALL   doLIST   
0E3A   32 0C 4C 06            DW   TYPESZ,EXIT   
0E3E                             ;   !           ( w a -- )
0E3E                             ;               Pop the data stack to memory.
0E3E                          ;*Macro unroll: mCODE	1,'!',STORE
0E3E                          ALIGN   2   
0E3E                STORE:       
0E3E                VVCODE:   .SET   $   
0E3E                VVLEN:    .SET   (1 & 01FH) / CELLL   
155E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
155E                VVNAME:   .SET   $   
155E   3E 0E 68 15            DW   vvCODE,vvLINK   
1562                VVLINK:   .SET   $   
1562   01 21                  DB   1,"!"   
0E3E                          .ORG   vvCODE   
0E3E   60                     LD   H,B   
0E3F   69                     LD   L,C   
0E40   C1                     POP   BC   
0E41   71                     LD   (HL),C   
0E42   23                     INC   HL   
0E43   70                     LD   (HL),B   
0E44   C1                     POP   BC   
0E45                          ;*Macro unroll: 	mNEXT
0E45   EB                     EX   DE,HL   
0E46                          ;*Macro unroll:  mNEXTHL                         ; 34t
0E46   FD E9                  JP   (IY)   ; 34t
0E48                             ;   @           ( a -- w )
0E48                             ;               Push memory location to the data stack.
0E48                          ;*Macro unroll: mCODE	1,'@', AT
0E48                          ALIGN   2   
0E48                AT:          
0E48                VVCODE:   .SET   $   
0E48                VVLEN:    .SET   (1 & 01FH) / CELLL   
1558                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1558                VVNAME:   .SET   $   
1558   48 0E 62 15            DW   vvCODE,vvLINK   
155C                VVLINK:   .SET   $   
155C   01 40                  DB   1,"@"   
0E48                          .ORG   vvCODE   
0E48   60                     LD   H,B   
0E49   69                     LD   L,C   
0E4A   4E                     LD   C,(HL)   
0E4B   23                     INC   HL   
0E4C   46                     LD   B,(HL)   
0E4D                          ;*Macro unroll: 	mNEXT
0E4D   EB                     EX   DE,HL   
0E4E                          ;*Macro unroll:  mNEXTHL                         ; 34t
0E4E   FD E9                  JP   (IY)   ; 34t
0E50                             ;   C!          ( c b -- )
0E50                             ;               Pop the data stack to byte memory.
0E50                          ;*Macro unroll: mCODE	2,'C!',CSTOR
0E50                          ALIGN   2   
0E50                CSTOR:       
0E50                VVCODE:   .SET   $   
0E50                VVLEN:    .SET   (2 & 01FH) / CELLL   
1550                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1550                VVNAME:   .SET   $   
1550   50 0E 5C 15            DW   vvCODE,vvLINK   
1554                VVLINK:   .SET   $   
1554   02 43 21               DB   2,"C!"   
0E50                          .ORG   vvCODE   
0E50   60                     LD   H,B   
0E51   69                     LD   L,C   
0E52   C1                     POP   BC   
0E53   71                     LD   (HL),C   
0E54   C1                     POP   BC   
0E55                          ;*Macro unroll: 	mNEXT
0E55   EB                     EX   DE,HL   
0E56                          ;*Macro unroll:  mNEXTHL                         ; 34t
0E56   FD E9                  JP   (IY)   ; 34t
0E58                             ;   C@          ( b -- c )
0E58                             ;               Push byte memory location to the data stack.
0E58                          ;*Macro unroll: mCODE	2,'C@',CAT
0E58                          ALIGN   2   
0E58                CAT:         
0E58                VVCODE:   .SET   $   
0E58                VVLEN:    .SET   (2 & 01FH) / CELLL   
1548                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1548                VVNAME:   .SET   $   
1548   58 0E 54 15            DW   vvCODE,vvLINK   
154C                VVLINK:   .SET   $   
154C   02 43 40               DB   2,"C@"   
0E58                          .ORG   vvCODE   
0E58   0A                     LD   A,(BC)   
0E59   4F                     LD   C,A   
0E5A   06 00                  LD   B,0   
0E5C                          ;*Macro unroll: 	mNEXT
0E5C   EB                     EX   DE,HL   
0E5D                          ;*Macro unroll:  mNEXTHL                         ; 34t
0E5D   FD E9                  JP   (IY)   ; 34t
0E5F                             ;   R@          ( -- w )
0E5F                             ;               Copy top of return stack to the data stack.
0E5F                          ;*Macro unroll: mCODE	COMPO+2,'R@',RAT
0E5F                          ALIGN   2   
0E60                RAT:         
0E60                VVCODE:   .SET   $   
0E60                VVLEN:    .SET   (COMPO+2 & 01FH) / CELLL   
1520                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1520                VVNAME:   .SET   $   
1520   60 0E 4C 15            DW   vvCODE,vvLINK   
1524                VVLINK:   .SET   $   
1524   22 52 40               DB   COMPO+2,"R@"   
0E60                          .ORG   vvCODE   
0E60   C5                     PUSH   BC   
0E61   DD 4E 00               LD   C,(IX+0)   
0E64   DD 46 01               LD   B,(IX+1)   
0E67                          ;*Macro unroll: 	mNEXT
0E67   EB                     EX   DE,HL   
0E68                          ;*Macro unroll:  mNEXTHL                         ; 34t
0E68   FD E9                  JP   (IY)   ; 34t
0E6A                             ;   RP@         ( -- a )
0E6A                             ;               Push the current RP to the data stack
0E6A                          ;*Macro unroll: mCODE	COMPO+3, 'rp@', RPAT
0E6A                          ALIGN   2   
0E6A                RPAT:        
0E6A                VVCODE:   .SET   $   
0E6A                VVLEN:    .SET   (COMPO+3 & 01FH) / CELLL   
14F8                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
14F8                VVNAME:   .SET   $   
14F8   6A 0E 24 15            DW   vvCODE,vvLINK   
14FC                VVLINK:   .SET   $   
14FC   23 72 70 40            DB   COMPO+3,"rp@"   
0E6A                          .ORG   vvCODE   
0E6A   C5                     DB   0C5h   ; PUSH	BC	;11t
0E6B   DD E5                  DB   0DDh,0E5h   ; PUSH IX	;15t
0E6D   C1                     DB   0C1h   ; POP	BC	;10t
0E6E                          ;*Macro unroll:  mNEXT
0E6E   EB                     EX   DE,HL   
0E6F                          ;*Macro unroll:  mNEXTHL                         ; 34t
0E6F   FD E9                  JP   (IY)   ; 34t
0E71                             ;   RP!         ( a -- )
0E71                             ;               Set the return stack pointer.
0E71                          ;*Macro unroll: mCODE	COMPO+3,'rp!',RPSTO
0E71                          ALIGN   2   
0E72                RPSTO:       
0E72                VVCODE:   .SET   $   
0E72                VVLEN:    .SET   (COMPO+3 & 01FH) / CELLL   
14D0                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
14D0                VVNAME:   .SET   $   
14D0   72 0E FC 14            DW   vvCODE,vvLINK   
14D4                VVLINK:   .SET   $   
14D4   23 72 70 21            DB   COMPO+3,"rp!"   
0E72                          .ORG   vvCODE   
0E72   C5                     DB   0C5h   ; PUSH	BC	;11t
0E73   DD E1                  DB   0DDh,0E1h   ; POP IX	;14t
0E75   C1                     DB   0C1h   ; POP	BC	;10t
0E76                          ;*Macro unroll: 	mNEXT
0E76   EB                     EX   DE,HL   
0E77                          ;*Macro unroll:  mNEXTHL                         ; 34t
0E77   FD E9                  JP   (IY)   ; 34t
0E79                             ;   SP@         ( -- a )
0E79                             ;               Push the current data stack pointer.
0E79                          ;*Macro unroll: mCODE	3, 'sp@', SPAT
0E79                          ALIGN   2   
0E7A                SPAT:        
0E7A                VVCODE:   .SET   $   
0E7A                VVLEN:    .SET   (3 & 01FH) / CELLL   
14C8                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
14C8                VVNAME:   .SET   $   
14C8   7A 0E D4 14            DW   vvCODE,vvLINK   
14CC                VVLINK:   .SET   $   
14CC   03 73 70 40            DB   3,"sp@"   
0E7A                          .ORG   vvCODE   
0E7A   C5                     DB   0C5h   ; PUSH	BC	;11t
0E7B   21                     DB   021h   ; LD	HL,0	;10t
0E7C   00 00                  DW   0   
0E7E   39                     DB   039h   ; ADD	HL,SP	;11t
0E7F   44                     DB   044h   ; LD	B,H	; 4t
0E80   4D                     DB   04Dh   ; LD	C,L	; 4t
0E81                          ;*Macro unroll: 	mNEXT
0E81   EB                     EX   DE,HL   
0E82                          ;*Macro unroll:  mNEXTHL                         ; 34t
0E82   FD E9                  JP   (IY)   ; 34t
0E84                             ;   SP!         ( a -- )
0E84                             ;               Set the data stack pointer.
0E84                          ;*Macro unroll: mCODE	3,'sp!',SPSTO
0E84                          ALIGN   2   
0E84                SPSTO:       
0E84                VVCODE:   .SET   $   
0E84                VVLEN:    .SET   (3 & 01FH) / CELLL   
14C0                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
14C0                VVNAME:   .SET   $   
14C0   84 0E CC 14            DW   vvCODE,vvLINK   
14C4                VVLINK:   .SET   $   
14C4   03 73 70 21            DB   3,"sp!"   
0E84                          .ORG   vvCODE   
0E84   60                     DB   060h   ; LD	H,B	; 4t
0E85   69                     DB   069h   ; LD	L,C	; 4t
0E86   F9                     DB   0F9h   ; LD	SP,HL	; 6t
0E87   C1                     DB   0C1h   ; POP	BC	;10t
0E88                          ;*Macro unroll: 	mNEXT
0E88   EB                     EX   DE,HL   
0E89                          ;*Macro unroll:  mNEXTHL                         ; 34t
0E89   FD E9                  JP   (IY)   ; 34t
0E8B                             ;   +!          ( n a -- )
0E8B                             ;               Add n to the contents at address a.
0E8B                          ;*Macro unroll: mCOLON  2,'+!',PSTOR
0E8B                          ;*Macro unroll:  mCODE 2, "+!", PSTOR
0E8B                          ALIGN   2   
0E8C                PSTOR:       
0E8C                VVCODE:   .SET   $   
0E8C                VVLEN:    .SET   (2 & 01FH) / CELLL   
14B8                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
14B8                VVNAME:   .SET   $   
14B8   8C 0E C4 14            DW   vvCODE,vvLINK   
14BC                VVLINK:   .SET   $   
14BC   02 2B 21               DB   2,"+!"   
0E8C                          .ORG   vvCODE   
0E8C   00                     NOP      
0E8D   CD 16 06               CALL   doLIST   
0E90   12 10 1A 10 48 0E 8E 01 DW   SWAP,OVER,AT,PLUS   
0E98   12 10 3E 0E 4C 06      DW   SWAP,STORE,EXIT   
0E9E                             ;   2!          ( d a -- )
0E9E                             ;               STORE the double integer to address a.
0E9E                          ;*Macro unroll: mCOLON  2,'2!',DSTOR
0E9E                          ;*Macro unroll:  mCODE 2, "2!", DSTOR
0E9E                          ALIGN   2   
0E9E                DSTOR:       
0E9E                VVCODE:   .SET   $   
0E9E                VVLEN:    .SET   (2 & 01FH) / CELLL   
14B0                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
14B0                VVNAME:   .SET   $   
14B0   9E 0E BC 14            DW   vvCODE,vvLINK   
14B4                VVLINK:   .SET   $   
14B4   02 32 21               DB   2,"2!"   
0E9E                          .ORG   vvCODE   
0E9E   00                     NOP      
0E9F   CD 16 06               CALL   doLIST   
0EA2   12 10 1A 10 3E 0E      DW   SWAP,OVER,STORE   
0EA8   8A 03 3E 0E 4C 06      DW   CELLP,STORE,EXIT   
0EAE                             ;   2@          ( a -- d )
0EAE                             ;               Fetch double integer from address a.
0EAE                          ;*Macro unroll: mCOLON  2,'2@',DAT
0EAE                          ;*Macro unroll:  mCODE 2, "2@", DAT
0EAE                          ALIGN   2   
0EAE                DAT:         
0EAE                VVCODE:   .SET   $   
0EAE                VVLEN:    .SET   (2 & 01FH) / CELLL   
14A8                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
14A8                VVNAME:   .SET   $   
14A8   AE 0E B4 14            DW   vvCODE,vvLINK   
14AC                VVLINK:   .SET   $   
14AC   02 32 40               DB   2,"2@"   
0EAE                          .ORG   vvCODE   
0EAE   00                     NOP      
0EAF   CD 16 06               CALL   doLIST   
0EB2   0A 10 8A 03 48 0E      DW   DUPP,CELLP,AT   
0EB8   12 10 48 0E 4C 06      DW   SWAP,AT,EXIT   
0EBE                             ;   COUNT       ( b -- b +n )
0EBE                             ;               Return count byte of a string and add 1 to byte address.
0EBE                          ;*Macro unroll: mCOLON  5,'COUNT',COUNT
0EBE                          ;*Macro unroll:  mCODE 5, "COUNT", COUNT
0EBE                          ALIGN   2   
0EBE                COUNT:       
0EBE                VVCODE:   .SET   $   
0EBE                VVLEN:    .SET   (5 & 01FH) / CELLL   
149E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
149E                VVNAME:   .SET   $   
149E   BE 0E AC 14            DW   vvCODE,vvLINK   
14A2                VVLINK:   .SET   $   
14A2   05 43 4F 55 4E 54      DB   5,"COUNT"   
0EBE                          .ORG   vvCODE   
0EBE   00                     NOP      
0EBF   CD 16 06               CALL   doLIST   
0EC2   0A 10 24 06 01 00 8E 01 DW   DUPP,DOLIT,1,PLUS   
0ECA   12 10 58 0E 4C 06      DW   SWAP,CAT,EXIT   
0ED0                             ;   HERE        ( -- a )
0ED0                             ;               Return the top of the code dictionary.
0ED0                          ;*Macro unroll: mCOLON  4,'HERE',HERE
0ED0                          ;*Macro unroll:  mCODE 4, "HERE", HERE
0ED0                          ALIGN   2   
0ED0                HERE:        
0ED0                VVCODE:   .SET   $   
0ED0                VVLEN:    .SET   (4 & 01FH) / CELLL   
1494                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1494                VVNAME:   .SET   $   
1494   D0 0E A2 14            DW   vvCODE,vvLINK   
1498                VVLINK:   .SET   $   
1498   04 48 45 52 45         DB   4,"HERE"   
0ED0                          .ORG   vvCODE   
0ED0   00                     NOP      
0ED1   CD 16 06               CALL   doLIST   
0ED4   2A 11 48 0E 4C 06      DW   CP,AT,EXIT   
0EDA                             ;   PAD         ( -- a )
0EDA                             ;               Return the address of a temporary buffer.
0EDA                          ;*Macro unroll: mCOLON  3,'PAD',PAD
0EDA                          ;*Macro unroll:  mCODE 3, "PAD", PAD
0EDA                          ALIGN   2   
0EDA                PAD:         
0EDA                VVCODE:   .SET   $   
0EDA                VVLEN:    .SET   (3 & 01FH) / CELLL   
148C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
148C                VVNAME:   .SET   $   
148C   DA 0E 98 14            DW   vvCODE,vvLINK   
1490                VVLINK:   .SET   $   
1490   03 50 41 44            DB   3,"PAD"   
0EDA                          .ORG   vvCODE   
0EDA   00                     NOP      
0EDB   CD 16 06               CALL   doLIST   
0EDE   D0 0E 24 06 50 00 8E 01 4C 06 DW   HERE,DOLIT,80,PLUS,EXIT   
0EE8                             ;   TIB         ( -- a )
0EE8                             ;               Return the address of the terminal input buffer.
0EE8                          ;*Macro unroll: mCOLON  3,'TIB',TIB
0EE8                          ;*Macro unroll:  mCODE 3, "TIB", TIB
0EE8                          ALIGN   2   
0EE8                TIB:         
0EE8                VVCODE:   .SET   $   
0EE8                VVLEN:    .SET   (3 & 01FH) / CELLL   
1484                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1484                VVNAME:   .SET   $   
1484   E8 0E 90 14            DW   vvCODE,vvLINK   
1488                VVLINK:   .SET   $   
1488   03 54 49 42            DB   3,"TIB"   
0EE8                          .ORG   vvCODE   
0EE8   00                     NOP      
0EE9   CD 16 06               CALL   doLIST   
0EEC   EA 10 8A 03 48 0E 4C 06 DW   NTIB,CELLP,AT,EXIT   
0EF4                             ;   @EXECUTE    ( a -- )
0EF4                             ;               Execute vector STOREd in address a.
0EF4                          ;*Macro unroll: hCOLON  8,'@EXECUTE',ATEXE
0EF4                          ;*Macro unroll:  hCODE 8, "@EXECUTE", ATEXE
0EF4                          ALIGN   2   
0EF4                ATEXE:       
0EF4   00                     NOP      
0EF5   CD 16 06               CALL   doLIST   
0EF8   48 0E 22 10            DW   AT,QDUP   ;?address or zero
0EFC   22 0E 02 0F            DW   QBRAN,EXE1   
0F00   1E 0E                  DW   EXECU   ;execute if non-zero
0F02                EXE1:        
0F02   4C 06                  DW   EXIT   ;do nothing if zero
0F04                             ;   CMOVE       ( b1 b2 u -- )
0F04                             ;               Copy u bytes from b1 to b2.
0F04                          ;*Macro unroll: mCOLON  5,'CMOVE',CMOVE
0F04                          ;*Macro unroll:  mCODE 5, "CMOVE", CMOVE
0F04                          ALIGN   2   
0F04                CMOVE:       
0F04                VVCODE:   .SET   $   
0F04                VVLEN:    .SET   (5 & 01FH) / CELLL   
147A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
147A                VVNAME:   .SET   $   
147A   04 0F 88 14            DW   vvCODE,vvLINK   
147E                VVLINK:   .SET   $   
147E   05 43 4D 4F 56 45      DB   5,"CMOVE"   
0F04                          .ORG   vvCODE   
0F04   00                     NOP      
0F05   CD 16 06               CALL   doLIST   
0F08   EE 0F                  DW   TOR   
0F0A   2E 0E 26 0F            DW   BRAN,CMOV2   
0F0E                CMOV1:       
0F0E   EE 0F 0A 10 58 0E      DW   TOR,DUPP,CAT   
0F14   60 0E 50 0E            DW   RAT,CSTOR   
0F18   24 06 01 00 8E 01      DW   DOLIT,1,PLUS   
0F1E   FC 0F 24 06 01 00 8E 01 DW   RFROM,DOLIT,1,PLUS   
0F26                CMOV2:       
0F26   7A 06 0E 0F            DW   DONXT,CMOV1   
0F2A   3E 10 4C 06            DW   DDROP,EXIT   
0F2E                             ;   FILL        ( b u c -- )
0F2E                             ;               Fill u bytes of character c to area beginning at b.
0F2E                          ;*Macro unroll: mCOLON  4,'FILL',FILL
0F2E                          ;*Macro unroll:  mCODE 4, "FILL", FILL
0F2E                          ALIGN   2   
0F2E                FILL:        
0F2E                VVCODE:   .SET   $   
0F2E                VVLEN:    .SET   (4 & 01FH) / CELLL   
1470                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1470                VVNAME:   .SET   $   
1470   2E 0F 7E 14            DW   vvCODE,vvLINK   
1474                VVLINK:   .SET   $   
1474   04 46 49 4C 4C         DB   4,"FILL"   
0F2E                          .ORG   vvCODE   
0F2E   00                     NOP      
0F2F   CD 16 06               CALL   doLIST   
0F32   12 10 EE 0F 12 10      DW   SWAP,TOR,SWAP   
0F38   2E 0E 46 0F            DW   BRAN,FILL2   
0F3C                FILL1:       
0F3C   48 10 50 0E 24 06 01 00 8E 01 DW   DDUP,CSTOR,DOLIT,1,PLUS   
0F46                FILL2:       
0F46   7A 06 3C 0F            DW   DONXT,FILL1   
0F4A   3E 10 4C 06            DW   DDROP,EXIT   
0F4E                             ;   -TRAILING   ( b u -- b u )
0F4E                             ;               Adjust the count to eliminate trailing white space.
0F4E                          ;*Macro unroll: mCOLON  9,'-TRAILING',DTRAI
0F4E                          ;*Macro unroll:  mCODE 9, "-TRAILING", DTRAI
0F4E                          ALIGN   2   
0F4E                DTRAI:       
0F4E                VVCODE:   .SET   $   
0F4E                VVLEN:    .SET   (9 & 01FH) / CELLL   
1462                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1462                VVNAME:   .SET   $   
1462   4E 0F 74 14            DW   vvCODE,vvLINK   
1466                VVLINK:   .SET   $   
1466   09 2D 54 52 41 49 4C 49 4E 47 DB   9,"-TRAILING"   
0F4E                          .ORG   vvCODE   
0F4E   00                     NOP      
0F4F   CD 16 06               CALL   doLIST   
0F52   EE 0F                  DW   TOR   
0F54   2E 0E 72 0F            DW   BRAN,DTRA2   
0F58                DTRA1:       
0F58   60 07 1A 10 60 0E 8E 01 58 0E 14 02 DW   BLANK,OVER,RAT,PLUS,CAT,LESS   
0F64   22 0E 72 0F            DW   QBRAN,DTRA2   
0F68   FC 0F 24 06 01 00 8E 01 4C 06 DW   RFROM,DOLIT,1,PLUS,EXIT   ;adjusted count
0F72                DTRA2:       
0F72   7A 06 58 0F            DW   DONXT,DTRA1   
0F76   24 06 00 00 4C 06      DW   DOLIT,0,EXIT   ;count=0
0F7C                             ;   PACK$       ( b u a -- a )
0F7C                             ;               Build a counted string with u characters from b. Null fill.
0F7C                          ;*Macro unroll: mCOLON  5,'PACK$',PACKS
0F7C                          ;*Macro unroll:  mCODE 5, "PACK$", PACKS
0F7C                          ALIGN   2   
0F7C                PACKS:       
0F7C                VVCODE:   .SET   $   
0F7C                VVLEN:    .SET   (5 & 01FH) / CELLL   
1458                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1458                VVNAME:   .SET   $   
1458   7C 0F 66 14            DW   vvCODE,vvLINK   
145C                VVLINK:   .SET   $   
145C   05 50 41 43 4B 24      DB   5,"PACK$"   
0F7C                          .ORG   vvCODE   
0F7C   00                     NOP      
0F7D   CD 16 06               CALL   doLIST   
0F80   B6 0F 0A 10 EE 0F      DW   ALGND,DUPP,TOR   ;strings only on cell boundary
0F86   1A 10 0A 10 24 06 00 00 DW   OVER,DUPP,DOLIT,0   
0F8E   24 06 02 00 72 02 0E 10 DW   DOLIT,CELLL,UMMOD,DROP   ;count mod cell
0F96   C8 01 1A 10 8E 01      DW   SUBB,OVER,PLUS   
0F9C   24 06 00 00 12 10 3E 0E DW   DOLIT,0,SWAP,STORE   ;null fill cell
0FA4   48 10 50 0E 24 06 01 00 8E 01 DW   DDUP,CSTOR,DOLIT,1,PLUS   ;save count
0FAE   12 10 04 0F FC 0F 4C 06 DW   SWAP,CMOVE,RFROM,EXIT   ;move string
0FB6                             ;   ALIGNED     ( b -- a )
0FB6                             ;               Align address to the cell boundary.
0FB6                          ;*Macro unroll: mCOLON  7,'ALIGNED', ALGND
0FB6                          ;*Macro unroll:  mCODE 7, "ALIGNED", ALGND
0FB6                          ALIGN   2   
0FB6                ALGND:       
0FB6                VVCODE:   .SET   $   
0FB6                VVLEN:    .SET   (7 & 01FH) / CELLL   
144C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
144C                VVNAME:   .SET   $   
144C   B6 0F 5C 14            DW   vvCODE,vvLINK   
1450                VVLINK:   .SET   $   
1450   07 41 4C 49 47 4E 45 44 DB   7,"ALIGNED"   
0FB6                          .ORG   vvCODE   
0FB6   00                     NOP      
0FB7   CD 16 06               CALL   doLIST   
0FBA   0A 10 24 06 00 00 24 06 02 00 DW   DUPP,DOLIT,0,DOLIT,CELLL   
0FC4   72 02 0E 10 0A 10      DW   UMMOD,DROP,DUPP   
0FCA   22 0E D6 0F            DW   QBRAN,ALGN1   
0FCE   24 06 02 00 12 10 C8 01 DW   DOLIT,CELLL,SWAP,SUBB   
0FD6                ALGN1:       
0FD6   8E 01 4C 06            DW   PLUS,EXIT   
0FDA                             ; GREETING:       .cstr   "Type something\r\n"
0FDA   44 49 56 5A 45 52 4F 00 ERR_DIVZERO:   .CSTR   "DIVZERO"   ;-10
0FE2   4F 55 54 4F 46 52 41 4E 47 45 00 ERR_OUTOFRANGE:   .CSTR   "OUTOFRANGE"   ;-11
0FED                             ;   >R          ( w -- )
0FED                             ;               Push the data stack to the return stack.
0FED                          ;*Macro unroll: mCODE	COMPO+2, '>R', ToR
0FED                          ALIGN   2   
0FEE                TOR:         
0FEE                VVCODE:   .SET   $   
0FEE                VVLEN:    .SET   (COMPO+2 & 01FH) / CELLL   
1424                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1424                VVNAME:   .SET   $   
1424   EE 0F 50 14            DW   vvCODE,vvLINK   
1428                VVLINK:   .SET   $   
1428   22 3E 52               DB   COMPO+2,">R"   
0FEE                          .ORG   vvCODE   
0FEE   DD 2B                  DEC   IX   
0FF0   DD 70 00               LD   (IX+0),B   
0FF3   DD 2B                  DEC   IX   
0FF5   DD 71 00               LD   (IX+0),C   
0FF8   C1                     POP   BC   
0FF9                          ;*Macro unroll: 	mNEXT
0FF9   EB                     EX   DE,HL   
0FFA                          ;*Macro unroll:  mNEXTHL                         ; 34t
0FFA   FD E9                  JP   (IY)   ; 34t
0FFC                             ;   R>          ( -- w )
0FFC                             ;               Pop the return stack to the data stack.
0FFC                          ;*Macro unroll: mCODE	COMPO+2, 'R>', RFrom
0FFC                          ALIGN   2   
0FFC                RFROM:       
0FFC                VVCODE:   .SET   $   
0FFC                VVLEN:    .SET   (COMPO+2 & 01FH) / CELLL   
13FC                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
13FC                VVNAME:   .SET   $   
13FC   FC 0F 28 14            DW   vvCODE,vvLINK   
1400                VVLINK:   .SET   $   
1400   22 52 3E               DB   COMPO+2,"R>"   
0FFC                          .ORG   vvCODE   
0FFC   C5                     PUSH   BC   
0FFD   DD 4E 00               LD   C,(IX+0)   
1000   DD 23                  INC   IX   
1002   DD 46 00               LD   B,(IX+0)   
1005   DD 23                  INC   IX   
1007                          ;*Macro unroll: 	mNEXT
1007   EB                     EX   DE,HL   
1008                          ;*Macro unroll:  mNEXTHL                         ; 34t
1008   FD E9                  JP   (IY)   ; 34t
100A                             ;   DUP         ( w -- w w )
100A                             ;               Duplicate the top stack item.
100A                          ;*Macro unroll: mCODE	3, 'DUP', DUPP
100A                          ALIGN   2   
100A                DUPP:        
100A                VVCODE:   .SET   $   
100A                VVLEN:    .SET   (3 & 01FH) / CELLL   
13F4                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
13F4                VVNAME:   .SET   $   
13F4   0A 10 00 14            DW   vvCODE,vvLINK   
13F8                VVLINK:   .SET   $   
13F8   03 44 55 50            DB   3,"DUP"   
100A                          .ORG   vvCODE   
100A   C5                     PUSH   BC   
100B                          ;*Macro unroll:  mNEXT
100B   EB                     EX   DE,HL   
100C                          ;*Macro unroll:  mNEXTHL                         ; 34t
100C   FD E9                  JP   (IY)   ; 34t
100E                             ;   DROP	( x -- )			\ CORE
100E                             ;		Discard top stack item.
100E                          ;*Macro unroll: mCODE	4, 'DROP', DROP
100E                          ALIGN   2   
100E                DROP:        
100E                VVCODE:   .SET   $   
100E                VVLEN:    .SET   (4 & 01FH) / CELLL   
13EA                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
13EA                VVNAME:   .SET   $   
13EA   0E 10 F8 13            DW   vvCODE,vvLINK   
13EE                VVLINK:   .SET   $   
13EE   04 44 52 4F 50         DB   4,"DROP"   
100E                          .ORG   vvCODE   
100E   C1                     POP   BC   
100F                          ;*Macro unroll:  mNEXT
100F   EB                     EX   DE,HL   
1010                          ;*Macro unroll:  mNEXTHL                         ; 34t
1010   FD E9                  JP   (IY)   ; 34t
1012                             ;   SWAP        ( w1 w2 -- w2 w1 )
1012                             ;               Exchange top two stack items.
1012                          ;*Macro unroll: mCODE	4, 'SWAP', SWAP
1012                          ALIGN   2   
1012                SWAP:        
1012                VVCODE:   .SET   $   
1012                VVLEN:    .SET   (4 & 01FH) / CELLL   
13E0                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
13E0                VVNAME:   .SET   $   
13E0   12 10 EE 13            DW   vvCODE,vvLINK   
13E4                VVLINK:   .SET   $   
13E4   04 53 57 41 50         DB   4,"SWAP"   
1012                          .ORG   vvCODE   
1012   E1                     POP   HL   
1013   C5                     PUSH   BC   
1014   44                     LD   B,H   
1015   4D                     LD   C,L   
1016                          ;*Macro unroll: 	mNEXT
1016   EB                     EX   DE,HL   
1017                          ;*Macro unroll:  mNEXTHL                         ; 34t
1017   FD E9                  JP   (IY)   ; 34t
1019                             ;   OVER        ( w1 w2 -- w1 w2 w1 )
1019                             ;               Copy second stack item to top.
1019                          ;*Macro unroll: mCODE	4, 'OVER', OVER
1019                          ALIGN   2   
101A                OVER:        
101A                VVCODE:   .SET   $   
101A                VVLEN:    .SET   (4 & 01FH) / CELLL   
13D6                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
13D6                VVNAME:   .SET   $   
13D6   1A 10 E4 13            DW   vvCODE,vvLINK   
13DA                VVLINK:   .SET   $   
13DA   04 4F 56 45 52         DB   4,"OVER"   
101A                          .ORG   vvCODE   
101A   E1                     POP   HL   
101B   E5                     PUSH   HL   
101C   C5                     PUSH   BC   
101D   44                     LD   B,H   
101E   4D                     LD   C,L   
101F                          ;*Macro unroll: 	mNEXT
101F   EB                     EX   DE,HL   
1020                          ;*Macro unroll:  mNEXTHL                         ; 34t
1020   FD E9                  JP   (IY)   ; 34t
1022                             ;   ?DUP        ( w -- w w | 0 )
1022                             ;               Dup tos if its is not zero.
1022                          ;*Macro unroll: mCOLON	4,'?DUP', QDUP
1022                          ;*Macro unroll:  mCODE 4, "?DUP", QDUP
1022                          ALIGN   2   
1022                QDUP:        
1022                VVCODE:   .SET   $   
1022                VVLEN:    .SET   (4 & 01FH) / CELLL   
13CC                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
13CC                VVNAME:   .SET   $   
13CC   22 10 DA 13            DW   vvCODE,vvLINK   
13D0                VVLINK:   .SET   $   
13D0   04 3F 44 55 50         DB   4,"?DUP"   
1022                          .ORG   vvCODE   
1022   00                     NOP      
1023   CD 16 06               CALL   doLIST   
1026   0A 10 22 0E 2E 10      DW   DUPP,QBRAN,QDUP1   
102C   0A 10                  DW   DUPP   
102E                QDUP1:       
102E   4C 06                  DW   EXIT   
1030                             ;   ROT         ( w1 w2 w3 -- w2 w3 w1 )
1030                             ;               Rot 3rd item to top.
1030                          ;*Macro unroll: mCOLON	3,'ROT', ROT
1030                          ;*Macro unroll:  mCODE 3, "ROT", ROT
1030                          ALIGN   2   
1030                ROT:         
1030                VVCODE:   .SET   $   
1030                VVLEN:    .SET   (3 & 01FH) / CELLL   
13C4                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
13C4                VVNAME:   .SET   $   
13C4   30 10 D0 13            DW   vvCODE,vvLINK   
13C8                VVLINK:   .SET   $   
13C8   03 52 4F 54            DB   3,"ROT"   
1030                          .ORG   vvCODE   
1030   00                     NOP      
1031   CD 16 06               CALL   doLIST   
1034   EE 0F 12 10 FC 0F 12 10 4C 06 DW   ToR,SWAP,RFrom,SWAP,EXIT   
103E                             ;   2DROP       ( w w -- )
103E                             ;               Discard two items on stack.
103E                          ;*Macro unroll: mCOLON	5,'2DROP',DDROP
103E                          ;*Macro unroll:  mCODE 5, "2DROP", DDROP
103E                          ALIGN   2   
103E                DDROP:       
103E                VVCODE:   .SET   $   
103E                VVLEN:    .SET   (5 & 01FH) / CELLL   
13BA                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
13BA                VVNAME:   .SET   $   
13BA   3E 10 C8 13            DW   vvCODE,vvLINK   
13BE                VVLINK:   .SET   $   
13BE   05 32 44 52 4F 50      DB   5,"2DROP"   
103E                          .ORG   vvCODE   
103E   00                     NOP      
103F   CD 16 06               CALL   doLIST   
1042   0E 10 0E 10 4C 06      DW   DROP,DROP,EXIT   
1048                             ;   2DUP        ( w1 w2 -- w1 w2 w1 w2 )
1048                             ;               Duplicate top two items.
1048                          ;*Macro unroll: mCOLON	4,'2DUP',DDUP
1048                          ;*Macro unroll:  mCODE 4, "2DUP", DDUP
1048                          ALIGN   2   
1048                DDUP:        
1048                VVCODE:   .SET   $   
1048                VVLEN:    .SET   (4 & 01FH) / CELLL   
13B0                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
13B0                VVNAME:   .SET   $   
13B0   48 10 BE 13            DW   vvCODE,vvLINK   
13B4                VVLINK:   .SET   $   
13B4   04 32 44 55 50         DB   4,"2DUP"   
1048                          .ORG   vvCODE   
1048   00                     NOP      
1049   CD 16 06               CALL   doLIST   
104C   1A 10 1A 10 4C 06      DW   OVER,OVER,EXIT   
1052                             ;   2SWAP        ( w1 w2 w3 w4 -- w3 w4 w1 w2 )
1052                             ;               Exchange top two items.
1052                          ;*Macro unroll: mCOLON	5,'2SWAP',TwoSWAP
1052                          ;*Macro unroll:  mCODE 5, "2SWAP", TwoSWAP
1052                          ALIGN   2   
1052                TWOSWAP:      
1052                VVCODE:   .SET   $   
1052                VVLEN:    .SET   (5 & 01FH) / CELLL   
13A6                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
13A6                VVNAME:   .SET   $   
13A6   52 10 B4 13            DW   vvCODE,vvLINK   
13AA                VVLINK:   .SET   $   
13AA   05 32 53 57 41 50      DB   5,"2SWAP"   
1052                          .ORG   vvCODE   
1052   00                     NOP      
1053   CD 16 06               CALL   doLIST   
1056   30 10 EE 0F 30 10 FC 0F 4C 06 DW   ROT,ToR,ROT,RFrom,EXIT   
1060                             ;   PICK        ( ... +n -- ... w )
1060                             ;               Copy the nth stack item to tos.
1060                          ;*Macro unroll: mCOLON  4,'PICK',PICK
1060                          ;*Macro unroll:  mCODE 4, "PICK", PICK
1060                          ALIGN   2   
1060                PICK:        
1060                VVCODE:   .SET   $   
1060                VVLEN:    .SET   (4 & 01FH) / CELLL   
139C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
139C                VVNAME:   .SET   $   
139C   60 10 AA 13            DW   vvCODE,vvLINK   
13A0                VVLINK:   .SET   $   
13A0   04 50 49 43 4B         DB   4,"PICK"   
1060                          .ORG   vvCODE   
1060   00                     NOP      
1061   CD 16 06               CALL   doLIST   
1064   24 06 01 00 8E 01 A2 03 DW   DOLIT,1,PLUS,CELLS   
106C   7A 0E 8E 01 48 0E 4C 06 DW   SPAT,PLUS,AT,EXIT   
1074                             ;   DEPTH       ( -- n )
1074                             ;               Return the depth of the data stack.
1074                          ;*Macro unroll: mCOLON	5,'DEPTH',DEPTH
1074                          ;*Macro unroll:  mCODE 5, "DEPTH", DEPTH
1074                          ALIGN   2   
1074                DEPTH:       
1074                VVCODE:   .SET   $   
1074                VVLEN:    .SET   (5 & 01FH) / CELLL   
1392                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1392                VVNAME:   .SET   $   
1392   74 10 A0 13            DW   vvCODE,vvLINK   
1396                VVLINK:   .SET   $   
1396   05 44 45 50 54 48      DB   5,"DEPTH"   
1074                          .ORG   vvCODE   
1074   00                     NOP      
1075   CD 16 06               CALL   doLIST   
1078   7A 0E 8A 10 48 0E 12 10 C8 01 DW   SPAT,SZero,AT,SWAP,SUBB   
1082   24 06 02 00 20 03 4C 06 DW   DOLIT,CELLL,Slash,EXIT   
108A                             ;   SP0         ( -- a )
108A                             ;               Pointer to bottom of the data stack.
108A                          ;*Macro unroll: mUSER   3,'SP0',SZERO
108A                          ;*Macro unroll: 	mCODE 3, "SP0", SZERO
108A                          ALIGN   2   
108A                SZERO:       
108A                VVCODE:   .SET   $   
108A                VVLEN:    .SET   (3 & 01FH) / CELLL   
138A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
138A                VVNAME:   .SET   $   
138A   8A 10 96 13            DW   vvCODE,vvLINK   
138E                VVLINK:   .SET   $   
138E   03 53 50 30            DB   3,"SP0"   
108A                          .ORG   vvCODE   
108A   00                     NOP      
108B   CD 16 06               CALL   doLIST   
108E   3C 06 00 00            DW   DoUSE,vvUSER   
1092                VVUSER:   .SET   vvUSER + CELLL   
1092                             ;   RP0         ( -- a )
1092                             ;               Pointer to bottom of the return stack.
1092                          ;*Macro unroll: mUSER   3,'RP0',RZERO
1092                          ;*Macro unroll: 	mCODE 3, "RP0", RZERO
1092                          ALIGN   2   
1092                RZERO:       
1092                VVCODE:   .SET   $   
1092                VVLEN:    .SET   (3 & 01FH) / CELLL   
1382                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1382                VVNAME:   .SET   $   
1382   92 10 8E 13            DW   vvCODE,vvLINK   
1386                VVLINK:   .SET   $   
1386   03 52 50 30            DB   3,"RP0"   
1092                          .ORG   vvCODE   
1092   00                     NOP      
1093   CD 16 06               CALL   doLIST   
1096   3C 06 02 00            DW   DoUSE,vvUSER   
109A                VVUSER:   .SET   vvUSER + CELLL   
109A                             ;   '?KEY       ( -- a )
109A                             ;               Execution vector of ?KEY.
109A                          ;*Macro unroll: hUSER   5,"'?KEY",TQKEY
109A                          ;*Macro unroll: 	hCODE 5, "'?KEY", TQKEY
109A                          ALIGN   2   
109A                TQKEY:       
109A   00                     NOP      
109B   CD 16 06               CALL   doLIST   
109E   3C 06 04 00            DW   DoUSE,vvUSER   
10A2                VVUSER:   .SET   vvUSER + CELLL   
10A2                             ;   'EMIT       ( -- a )
10A2                             ;               Execution vector of EMIT.
10A2                          ;*Macro unroll: hUSER   5,"'EMIT",TEMIT
10A2                          ;*Macro unroll: 	hCODE 5, "'EMIT", TEMIT
10A2                          ALIGN   2   
10A2                TEMIT:       
10A2   00                     NOP      
10A3   CD 16 06               CALL   doLIST   
10A6   3C 06 06 00            DW   DoUSE,vvUSER   
10AA                VVUSER:   .SET   vvUSER + CELLL   
10AA                             ;   'EXPECT     ( -- a )
10AA                             ;               Execution vector of EXPECT.
10AA                          ;*Macro unroll: hUSER   7,"'EXPECT",TEXPE
10AA                          ;*Macro unroll: 	hCODE 7, "'EXPECT", TEXPE
10AA                          ALIGN   2   
10AA                TEXPE:       
10AA   00                     NOP      
10AB   CD 16 06               CALL   doLIST   
10AE   3C 06 08 00            DW   DoUSE,vvUSER   
10B2                VVUSER:   .SET   vvUSER + CELLL   
10B2                             ;   'TAP        ( -- a )
10B2                             ;               Execution vector of TAP.
10B2                          ;*Macro unroll: hUSER   4,"'TAP",TTAP
10B2                          ;*Macro unroll: 	hCODE 4, "'TAP", TTAP
10B2                          ALIGN   2   
10B2                TTAP:        
10B2   00                     NOP      
10B3   CD 16 06               CALL   doLIST   
10B6   3C 06 0A 00            DW   DoUSE,vvUSER   
10BA                VVUSER:   .SET   vvUSER + CELLL   
10BA                             ;   'ECHO       ( -- a )
10BA                             ;               Execution vector of ECHO.
10BA                          ;*Macro unroll: hUSER   5,"'ECHO",TECHO
10BA                          ;*Macro unroll: 	hCODE 5, "'ECHO", TECHO
10BA                          ALIGN   2   
10BA                TECHO:       
10BA   00                     NOP      
10BB   CD 16 06               CALL   doLIST   
10BE   3C 06 0C 00            DW   DoUSE,vvUSER   
10C2                VVUSER:   .SET   vvUSER + CELLL   
10C2                             ;   'PROMPT     ( -- a )
10C2                             ;               Execution vector of PROMPT.
10C2                          ;*Macro unroll: hUSER   7,"'PROMPT",TPROM
10C2                          ;*Macro unroll: 	hCODE 7, "'PROMPT", TPROM
10C2                          ALIGN   2   
10C2                TPROM:       
10C2   00                     NOP      
10C3   CD 16 06               CALL   doLIST   
10C6   3C 06 0E 00            DW   DoUSE,vvUSER   
10CA                VVUSER:   .SET   vvUSER + CELLL   
10CA                             ;   BASE        ( -- a )
10CA                             ;               Storage of the radix base for numeric I/O.
10CA                          ;*Macro unroll: mUSER   4,'BASE',BASE
10CA                          ;*Macro unroll: 	mCODE 4, "BASE", BASE
10CA                          ALIGN   2   
10CA                BASE:        
10CA                VVCODE:   .SET   $   
10CA                VVLEN:    .SET   (4 & 01FH) / CELLL   
1378                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1378                VVNAME:   .SET   $   
1378   CA 10 86 13            DW   vvCODE,vvLINK   
137C                VVLINK:   .SET   $   
137C   04 42 41 53 45         DB   4,"BASE"   
10CA                          .ORG   vvCODE   
10CA   00                     NOP      
10CB   CD 16 06               CALL   doLIST   
10CE   3C 06 10 00            DW   DoUSE,vvUSER   
10D2                VVUSER:   .SET   vvUSER + CELLL   
10D2                             ;   tmp         ( -- a )
10D2                             ;               A temporary storage location used in parse and find.
10D2                          ;*Macro unroll: mUSER   COMPO+3,'tmp',TEMP
10D2                          ;*Macro unroll: 	mCODE COMPO+3, "tmp", TEMP
10D2                          ALIGN   2   
10D2                TEMP:        
10D2                VVCODE:   .SET   $   
10D2                VVLEN:    .SET   (COMPO+3 & 01FH) / CELLL   
1350                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1350                VVNAME:   .SET   $   
1350   D2 10 7C 13            DW   vvCODE,vvLINK   
1354                VVLINK:   .SET   $   
1354   23 74 6D 70            DB   COMPO+3,"tmp"   
10D2                          .ORG   vvCODE   
10D2   00                     NOP      
10D3   CD 16 06               CALL   doLIST   
10D6   3C 06 12 00            DW   DoUSE,vvUSER   
10DA                VVUSER:   .SET   vvUSER + CELLL   
10DA                             ;   SPAN        ( -- a )
10DA                             ;               Hold character count received by EXPECT.
10DA                          ;*Macro unroll: hUSER   4,'SPAN',SPAN
10DA                          ;*Macro unroll: 	hCODE 4, "SPAN", SPAN
10DA                          ALIGN   2   
10DA                SPAN:        
10DA   00                     NOP      
10DB   CD 16 06               CALL   doLIST   
10DE   3C 06 14 00            DW   DoUSE,vvUSER   
10E2                VVUSER:   .SET   vvUSER + CELLL   
10E2                             ;   >IN         ( -- a )
10E2                             ;               Hold the character pointer while parsing input stream.
10E2                          ;*Macro unroll: mUSER   3,'>IN',INN
10E2                          ;*Macro unroll: 	mCODE 3, ">IN", INN
10E2                          ALIGN   2   
10E2                INN:         
10E2                VVCODE:   .SET   $   
10E2                VVLEN:    .SET   (3 & 01FH) / CELLL   
1348                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1348                VVNAME:   .SET   $   
1348   E2 10 54 13            DW   vvCODE,vvLINK   
134C                VVLINK:   .SET   $   
134C   03 3E 49 4E            DB   3,">IN"   
10E2                          .ORG   vvCODE   
10E2   00                     NOP      
10E3   CD 16 06               CALL   doLIST   
10E6   3C 06 16 00            DW   DoUSE,vvUSER   
10EA                VVUSER:   .SET   vvUSER + CELLL   
10EA                             ;   #TIB        ( -- a )
10EA                             ;               Hold the current count and address of the terminal input buffer.
10EA                          ;*Macro unroll: hUSER   4,'#TIB',NTIB
10EA                          ;*Macro unroll: 	hCODE 4, "#TIB", NTIB
10EA                          ALIGN   2   
10EA                NTIB:        
10EA   00                     NOP      
10EB   CD 16 06               CALL   doLIST   
10EE   3C 06 18 00            DW   DoUSE,vvUSER   
10F2                VVUSER:   .SET   vvUSER + CELLL   
10F2                VVUSER:   .SET   vvUSER + CELLL   
10F2                             ;   CSP         ( -- a )
10F2                             ;               Hold the stack pointer for error checking.
10F2                          ;*Macro unroll: hUSER   3,'CSP',CSP
10F2                          ;*Macro unroll: 	hCODE 3, "CSP", CSP
10F2                          ALIGN   2   
10F2                CSP:         
10F2   00                     NOP      
10F3   CD 16 06               CALL   doLIST   
10F6   3C 06 1C 00            DW   DoUSE,vvUSER   
10FA                VVUSER:   .SET   vvUSER + CELLL   
10FA                             ;   'EVAL       ( -- a )
10FA                             ;               Execution vector of EVAL.
10FA                          ;*Macro unroll: hUSER   5,"'EVAL",TEVAL
10FA                          ;*Macro unroll: 	hCODE 5, "'EVAL", TEVAL
10FA                          ALIGN   2   
10FA                TEVAL:       
10FA   00                     NOP      
10FB   CD 16 06               CALL   doLIST   
10FE   3C 06 1E 00            DW   DoUSE,vvUSER   
1102                VVUSER:   .SET   vvUSER + CELLL   
1102                             ;   'NUMBER     ( -- a )
1102                             ;               Execution vector of NUMBER?.
1102                          ;*Macro unroll: hUSER   7,"'NUMBER",TNUMB
1102                          ;*Macro unroll: 	hCODE 7, "'NUMBER", TNUMB
1102                          ALIGN   2   
1102                TNUMB:       
1102   00                     NOP      
1103   CD 16 06               CALL   doLIST   
1106   3C 06 20 00            DW   DoUSE,vvUSER   
110A                VVUSER:   .SET   vvUSER + CELLL   
110A                             ;   HLD         ( -- a )
110A                             ;               Hold a pointer in building a numeric output string.
110A                          ;*Macro unroll: hUSER   3,'HLD',HLD
110A                          ;*Macro unroll: 	hCODE 3, "HLD", HLD
110A                          ALIGN   2   
110A                HLD:         
110A   00                     NOP      
110B   CD 16 06               CALL   doLIST   
110E   3C 06 22 00            DW   DoUSE,vvUSER   
1112                VVUSER:   .SET   vvUSER + CELLL   
1112                             ;   HANDLER     ( -- a )
1112                             ;               Hold the return stack pointer for error handling.
1112                          ;*Macro unroll: hUSER   7,'HANDLER',HANDL
1112                          ;*Macro unroll: 	hCODE 7, "HANDLER", HANDL
1112                          ALIGN   2   
1112                HANDL:       
1112   00                     NOP      
1113   CD 16 06               CALL   doLIST   
1116   3C 06 24 00            DW   DoUSE,vvUSER   
111A                VVUSER:   .SET   vvUSER + CELLL   
111A                             ;   CONTEXT     ( -- a )
111A                             ;               A area to specify vocabulary search order.
111A                          ;*Macro unroll: hUSER   7,'CONTEXT',CNTXT
111A                          ;*Macro unroll: 	hCODE 7, "CONTEXT", CNTXT
111A                          ALIGN   2   
111A                CNTXT:       
111A   00                     NOP      
111B   CD 16 06               CALL   doLIST   
111E   3C 06 26 00            DW   DoUSE,vvUSER   
1122                VVUSER:   .SET   vvUSER + CELLL   
1122                VVUSER:   .SET   vvUSER + VOCSS * CELLL   ;vocabulary stack
1122                             ;   CURRENT     ( -- a )
1122                             ;               Point to the vocabulary to be extended.
1122                          ;*Macro unroll: hUSER   7,'CURRENT',CRRNT
1122                          ;*Macro unroll: 	hCODE 7, "CURRENT", CRRNT
1122                          ALIGN   2   
1122                CRRNT:       
1122   00                     NOP      
1123   CD 16 06               CALL   doLIST   
1126   3C 06 38 00            DW   DoUSE,vvUSER   
112A                VVUSER:   .SET   vvUSER + CELLL   
112A                VVUSER:   .SET   vvUSER + CELLL   ;vocabulary link pointer
112A                             ;   CP          ( -- a )
112A                             ;               Point to the top of the code dictionary.
112A                          ;*Macro unroll: hUSER   2,'CP',CP
112A                          ;*Macro unroll: 	hCODE 2, "CP", CP
112A                          ALIGN   2   
112A                CP:          
112A   00                     NOP      
112B   CD 16 06               CALL   doLIST   
112E   3C 06 3C 00            DW   DoUSE,vvUSER   
1132                VVUSER:   .SET   vvUSER + CELLL   
1132                             ;   NP          ( -- a )
1132                             ;               Point to the bottom of the name dictionary.
1132                          ;*Macro unroll: hUSER   2,'NP',NP
1132                          ;*Macro unroll: 	hCODE 2, "NP", NP
1132                          ALIGN   2   
1132                NP:          
1132   00                     NOP      
1133   CD 16 06               CALL   doLIST   
1136   3C 06 3E 00            DW   DoUSE,vvUSER   
113A                VVUSER:   .SET   vvUSER + CELLL   
113A                             ;   LAST        ( -- a )
113A                             ;               Point to the last name in the name dictionary.
113A                          ;*Macro unroll: mUSER   4,'LAST',LAST
113A                          ;*Macro unroll: 	mCODE 4, "LAST", LAST
113A                          ALIGN   2   
113A                LAST:        
113A                VVCODE:   .SET   $   
113A                VVLEN:    .SET   (4 & 01FH) / CELLL   
133E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
133E                VVNAME:   .SET   $   
133E   3A 11 4C 13            DW   vvCODE,vvLINK   
1342                VVLINK:   .SET   $   
1342   04 4C 41 53 54         DB   4,"LAST"   
113A                          .ORG   vvCODE   
113A   00                     NOP      
113B   CD 16 06               CALL   doLIST   
113E   3C 06 40 00            DW   DoUSE,vvUSER   
1142                VVUSER:   .SET   vvUSER + CELLL   
1142                             ;   forth       ( -- a )
1142                             ;               Point to the last name in the name dictionary.
1142                          ;*Macro unroll: hUSER   5,'forth',VFRTH
1142                          ;*Macro unroll: 	hCODE 5, "forth", VFRTH
1142                          ALIGN   2   
1142                VFRTH:       
1142   00                     NOP      
1143   CD 16 06               CALL   doLIST   
1146   3C 06 42 00            DW   DoUSE,vvUSER   
114A                VVUSER:   .SET   vvUSER + CELLL   
114A                             ;   _TYPE       ( b u -- )
114A                             ;               Display a string. Filter non-printing characters.
114A                          ;*Macro unroll: mCOLON  5,'_TYPE',UTYPE
114A                          ;*Macro unroll:  mCODE 5, "_TYPE", UTYPE
114A                          ALIGN   2   
114A                UTYPE:       
114A                VVCODE:   .SET   $   
114A                VVLEN:    .SET   (5 & 01FH) / CELLL   
1334                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1334                VVNAME:   .SET   $   
1334   4A 11 42 13            DW   vvCODE,vvLINK   
1338                VVLINK:   .SET   $   
1338   05 5F 54 59 50 45      DB   5,"_TYPE"   
114A                          .ORG   vvCODE   
114A   00                     NOP      
114B   CD 16 06               CALL   doLIST   
114E   EE 0F                  DW   TOR   ;start count down loop
1150   2E 0E 62 11            DW   BRAN,UTYP2   ;skip first pass
1154                UTYP1:       
1154   0A 10 58 0E 6A 07 C2 0B DW   DUPP,CAT,TCHAR,EMIT   ;display only printable
115C   24 06 01 00 8E 01      DW   DOLIT,1,PLUS   ;increment address
1162                UTYP2:       
1162   7A 06 54 11            DW   DONXT,UTYP1   ;loop till done
1166   0E 10 4C 06            DW   DROP,EXIT   
116A                             ;   dm+         ( a u -- a )
116A                             ;               Dump u bytes from , leaving a+u on the stack.
116A                          ;*Macro unroll: hCOLON  3,'dm+',DMP
116A                          ;*Macro unroll:  hCODE 3, "dm+", DMP
116A                          ALIGN   2   
116A                DMP:         
116A   00                     NOP      
116B   CD 16 06               CALL   doLIST   
116E   1A 10 24 06 04 00 8E 0C DW   OVER,DOLIT,4,UDOTR   ;display address
1176   F2 0B EE 0F            DW   SPACE,TOR   ;start count down loop
117A   2E 0E 8E 11            DW   BRAN,PDUM2   ;skip first pass
117E                PDUM1:       
117E   0A 10 58 0E 24 06 03 00 8E 0C DW   DUPP,CAT,DOLIT,3,UDOTR   ;display numeric data
1188   24 06 01 00 8E 01      DW   DOLIT,1,PLUS   ;increment address
118E                PDUM2:       
118E   7A 06 7E 11            DW   DONXT,PDUM1   ;loop till done
1192   4C 06                  DW   EXIT   
1194                             ;   DUMP        ( a u -- )
1194                             ;               Dump u bytes from a, in a formatted manner.
1194                          ;*Macro unroll: mCOLON  4,'DUMP',DUMP
1194                          ;*Macro unroll:  mCODE 4, "DUMP", DUMP
1194                          ALIGN   2   
1194                DUMP:        
1194                VVCODE:   .SET   $   
1194                VVLEN:    .SET   (4 & 01FH) / CELLL   
132A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
132A                VVNAME:   .SET   $   
132A   94 11 38 13            DW   vvCODE,vvLINK   
132E                VVLINK:   .SET   $   
132E   04 44 55 4D 50         DB   4,"DUMP"   
1194                          .ORG   vvCODE   
1194   00                     NOP      
1195   CD 16 06               CALL   doLIST   
1198   CA 10 48 0E EE 0F 44 07 DW   BASE,AT,TOR,HEX   ;save radix, set hex
11A0   24 06 10 00 20 03      DW   DOLIT,16,SLASH   ;change count to lines
11A6   EE 0F                  DW   TOR   ;start count down loop
11A8                DUMP1:       
11A8   3C 0C 24 06 10 00 48 10 6A 11 DW   CR,DOLIT,16,DDUP,DMP   ;display numeric
11B2   30 10 30 10            DW   ROT,ROT   
11B6   F2 0B F2 0B 4A 11      DW   SPACE,SPACE,UTYPE   ;display printable characters
11BC   CE 0B 98 01            DW   NUFQ,INVER   ;user control
11C0   22 0E CC 11            DW   QBRAN,DUMP2   
11C4   7A 06 A8 11            DW   DONXT,DUMP1   ;loop till done
11C8   2E 0E D0 11            DW   BRAN,DUMP3   
11CC                DUMP2:       
11CC   FC 0F 0E 10            DW   RFROM,DROP   ;cleanup loop stack, early exit
11D0                DUMP3:       
11D0   0E 10 FC 0F CA 10 3E 0E DW   DROP,RFROM,BASE,STORE   ;reSTORE radix
11D8   4C 06                  DW   EXIT   
11DA                             ;   .S          ( ... -- ... )
11DA                             ;               Display the contents of the data stack.
11DA                          ;*Macro unroll: mCOLON  2,'.S',DOTS
11DA                          ;*Macro unroll:  mCODE 2, ".S", DOTS
11DA                          ALIGN   2   
11DA                DOTS:        
11DA                VVCODE:   .SET   $   
11DA                VVLEN:    .SET   (2 & 01FH) / CELLL   
1322                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1322                VVNAME:   .SET   $   
1322   DA 11 2E 13            DW   vvCODE,vvLINK   
1326                VVLINK:   .SET   $   
1326   02 2E 53               DB   2,".S"   
11DA                          .ORG   vvCODE   
11DA   00                     NOP      
11DB   CD 16 06               CALL   doLIST   
11DE   3C 0C 74 10            DW   CR,DEPTH   ;stack depth
11E2   EE 0F                  DW   TOR   ;start count down loop
11E4   2E 0E EE 11            DW   BRAN,DOTS2   ;skip first pass
11E8                DOTS1:       
11E8   60 0E 60 10 B6 0C      DW   RAT,PICK,DOT   ;index stack, display contents
11EE                DOTS2:       
11EE   7A 06 E8 11            DW   DONXT,DOTS1   ;loop till done
11F2                          ;*Macro unroll:  mDSTR DOTQP,' <sp'
11F2   6E 0C                  DW   DOTQP   
11F4                VVLEN:    .SET   $   
11F4   00 20 3C 73 70         DB   0," <sp"   
11F9                VVCODE:   .SET   $   
11F4                          .ORG   vvLEN   
11F4   04                     DB   vvCODE - vvLEN - 1   
11F9                          .ORG   vvCODE   
11F9   4C 06                  DW   EXIT   
11FB                             ;   !CSP        ( -- )
11FB                             ;               Save stack pointer in CSP for error checking.
11FB                             ;   ?CSP        ( -- )
11FB                             ;               Abort if stack pointer differs from that saved in CSP.
11FB                             ;   >NAME       ( ca -- na | F )
11FB                             ;               Convert code address to a name address.
11FB                          ;*Macro unroll:  mCOLON  5,'>NAME',TNAME
11FB                          ;*Macro unroll:  mCODE 5, ">NAME", TNAME
11FB                          ALIGN   2   
11FC                TNAME:       
11FC                VVCODE:   .SET   $   
11FC                VVLEN:    .SET   (5 & 01FH) / CELLL   
1318                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1318                VVNAME:   .SET   $   
1318   FC 11 26 13            DW   vvCODE,vvLINK   
131C                VVLINK:   .SET   $   
131C   05 3E 4E 41 4D 45      DB   5,">NAME"   
11FC                          .ORG   vvCODE   
11FC   00                     NOP      
11FD   CD 16 06               CALL   doLIST   
1200   22 11                  DW   CRRNT   ;vocabulary link
1202                TNAM1:       
1202   8A 03 48 0E 22 10      DW   CELLP,AT,QDUP   ;check all vocabularies
1208   22 0E 3A 12            DW   QBRAN,TNAM4   
120C   48 10                  DW   DDUP   
120E                TNAM2:       
120E   48 0E 0A 10            DW   AT,DUPP   ;?last word in a vocabulary
1212   22 0E 26 12            DW   QBRAN,TNAM3   
1216   48 10 76 09 84 01      DW   DDUP,NAMET,XORR   ;compare
121C   22 0E 26 12            DW   QBRAN,TNAM3   
1220   96 03                  DW   CELLM   ;continue with next word
1222   2E 0E 0E 12            DW   BRAN,TNAM2   
1226                TNAM3:       
1226   12 10 0E 10 22 10      DW   SWAP,DROP,QDUP   
122C   22 0E 02 12            DW   QBRAN,TNAM1   
1230   12 10 0E 10 12 10 0E 10 4C 06 DW   SWAP,DROP,SWAP,DROP,EXIT   
123A                TNAM4:       
123A   0E 10 24 06 00 00 4C 06 DW   DROP,DOLIT,0,EXIT   ;false flag
1242                             ;   .ID         ( na -- )
1242                             ;               Display the name at address.
1242                          ;*Macro unroll: mCOLON  3,'.ID',DOTID
1242                          ;*Macro unroll:  mCODE 3, ".ID", DOTID
1242                          ALIGN   2   
1242                DOTID:       
1242                VVCODE:   .SET   $   
1242                VVLEN:    .SET   (3 & 01FH) / CELLL   
1310                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1310                VVNAME:   .SET   $   
1310   42 12 1C 13            DW   vvCODE,vvLINK   
1314                VVLINK:   .SET   $   
1314   03 2E 49 44            DB   3,".ID"   
1242                          .ORG   vvCODE   
1242   00                     NOP      
1243   CD 16 06               CALL   doLIST   
1246   22 10                  DW   QDUP   ;if zero no name
1248   22 0E 58 12            DW   QBRAN,DOTI1   
124C   BE 0E 24 06 1F 00 70 01 DW   COUNT,DOLIT,MASKK,ANDD   ;mask lexicon bits
1254   4A 11 4C 06            DW   UTYPE,EXIT   ;display name string
1258                DOTI1:       
1258                          ;*Macro unroll:  mDSTR   DOTQP,' {noName}'
1258   6E 0C                  DW   DOTQP   
125A                VVLEN:    .SET   $   
125A   00 20 7B 6E 6F 4E 61 6D 65 7D DB   0," {noName}"   
1264                VVCODE:   .SET   $   
125A                          .ORG   vvLEN   
125A   09                     DB   vvCODE - vvLEN - 1   
1264                          .ORG   vvCODE   
1264   4C 06                  DW   EXIT   
1266                             ;   SEE         ( -- ; <string> )
1266                             ;               A simple decompiler.
1266                          ;*Macro unroll: mCOLON  3,'SEE',SEE
1266                          ;*Macro unroll:  mCODE 3, "SEE", SEE
1266                          ALIGN   2   
1266                SEE:         
1266                VVCODE:   .SET   $   
1266                VVLEN:    .SET   (3 & 01FH) / CELLL   
1308                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1308                VVNAME:   .SET   $   
1308   66 12 14 13            DW   vvCODE,vvLINK   
130C                VVLINK:   .SET   $   
130C   03 53 45 45            DB   3,"SEE"   
1266                          .ORG   vvCODE   
1266   00                     NOP      
1267   CD 16 06               CALL   doLIST   
126A   AE 03                  DW   TICK   ;starting address
126C   3C 0C 8A 03            DW   CR,CELLP   
1270                SEE1:        
1270   8A 03 0A 10 48 0E 0A 10 DW   CELLP,DUPP,AT,DUPP   ;?does it contain a zero
1278   22 0E 7E 12            DW   QBRAN,SEE2   
127C   FC 11                  DW   TNAME   ;?is it a name
127E                SEE2:        
127E   22 10                  DW   QDUP   ;name address or zero
1280   22 0E 8C 12            DW   QBRAN,SEE3   
1284   F2 0B 42 12            DW   SPACE,DOTID   ;display name
1288   2E 0E 92 12            DW   BRAN,SEE4   
128C                SEE3:        
128C   0A 10 48 0E A6 0C      DW   DUPP,AT,UDOT   ;display number
1292                SEE4:        
1292   CE 0B                  DW   NUFQ   ;user control
1294   22 0E 70 12            DW   QBRAN,SEE1   
1298   0E 10 4C 06            DW   DROP,EXIT   
129C                             ;   WORDS       ( -- )
129C                             ;               Display the names in the context vocabulary.
129C                             ;   COLD        ( -- )
129C                             ;               The hilevel cold start sequence.
2000                          .ORG   END_ROM   
2000                          .ORG   START_RAM   
2000                          IF   TESTMODE   
                    TESTS_START:      
                              LD   HL,DONE   
                              CALL   PRINTSZ   
                              HALT      
                    DONE:     .CSTR   "Done!\r\n"   
2000                          ENDIF      
2000                          DS   DTS   ; data stack size
2200                SPP:         ; SP0 grows down
2200                TIBB:        
2200                          DS   RTS   ; return stack size
2400                RPP:         ; RP0 grows down (into TIBB)
2400                UPP:         
2400   00 00        VARSZERO:   DW   0   ; SP0
2402   00 00        VARRZERO:   DW   0   ; RP0
2404   00 00        VARTQKEY:   DW   0   ; '?KEY
2406   00 00        VARTEMIT:   DW   0   ; 'EMIT
2408   00 00        VARTEXPE:   DW   0   ; 'EXPECT
240A   00 00        VARTTAP:   DW   0   ; 'TAP
240C   00 00        VARTECHO:   DW   0   ; 'ECHO
240E   00 00        VARTPROM:   DW   0   ; 'PROMPT
2410   00 00        VARBASE:   DW   0   ; BASE
2412   00 00        VARTEMP:   DW   0   ; tmp
2414   00 00        VARSPAN:   DW   0   ; SPAN
2416   00 00        VARINN:   DW   0   ; >IN
2418   00 00        VARNTIB:   DW   0   ; #TIB
241A   00 00        VARTIB:   DW   0   ; TIB
241C   00 00        VARCSP:   DW   0   ; CSP
241E   00 00        VARTEVAL:   DW   0   ; 'EVAL
2420   00 00        VARTNUMB:   DW   0   ; 'NUMBER
2422   00 00        VARHLD:   DW   0   ; HLD
2424   00 00        VARHANDL:   DW   0   ; HANDLER
2426   00 00        VARCNTXT:   DW   0   ; CONTEXT pointer
2428   00 00        VARVOCABS:   DW   0   ; vocabulary stack    ???
242A   00 00        VARCRRNT:   DW   0   ; CURRENT pointer
242C   00 00        VARVOCABLP:   DW   0   ; vocabulary link pointer ???
242E   00 00        VARCP:    DW   0   ; CP  for runing phase on RAM
2430   00 00        VARNP:    DW   0   ; NP  for runing phase on RAM
2432   00 00        VARLAST:   DW   0   ; LAST
2434   00 00        VARVFRTH:   DW   0   ; FORTH   \ mullti-user ???
2436   00 00        VARVOCABL:   DW   0   ; vocabulary link       ???
2438   00 00        SERINPTR:   DW   0   
243A   00 00        SERRDPTR:   DW   0   
243C   00 00        SERBUFUSED:   DW   0   
243E                SERBUF:   DS   SER_BUFSIZE   
247D                VECTAB:      
247D   00 00        VRST08:   DW   0   
247F   00 00        VRST10:   DW   0   
2481   00 00        VRST18:   DW   0   
2483   00 00        VRST20:   DW   0   
2485   00 00        VRST28:   DW   0   
2487   00 00        VRST30:   DW   0   
2489   00 00        VINT:     DW   0   
248B   00 00        VNMI:     DW   0   
248D                CPP:         ; grows up
FFFE                          .ORG   END_RAM - 2   
FFFE                NPP:         ; grows down
FFFE                          .END      


TESTMODE:           0000 DEFINED AT LINE 3
MEM_SIZE:           10000 DEFINED AT LINE 1 IN constants.z80
                    > USED AT LINE 3 IN constants.z80
                    > USED AT LINE 12 IN constants.z80
ROM_SIZE:           2000 DEFINED AT LINE 2 IN constants.z80
                    > USED AT LINE 3 IN constants.z80
                    > USED AT LINE 6 IN constants.z80
                    > USED AT LINE 8 IN constants.z80
RAM_SIZE:           E000 DEFINED AT LINE 3 IN constants.z80
                    > USED AT LINE 9 IN constants.z80
START_ROM:          0000 DEFINED AT LINE 5 IN constants.z80
                    > USED AT LINE 8
END_ROM:            2000 DEFINED AT LINE 6 IN constants.z80
                    > USED AT LINE 4 IN word.macro.z80
                    > USED AT LINE 92
START_RAM:          2000 DEFINED AT LINE 8 IN constants.z80
                    > USED AT LINE 9 IN constants.z80
                    > USED AT LINE 93
END_RAM:            10000 DEFINED AT LINE 9 IN constants.z80
                    > USED AT LINE 54 IN variables.z80
BM:                 0000 DEFINED AT LINE 11 IN constants.z80
                    > USED AT LINE 5 IN constants.z80
                    > USED AT LINE 6 IN constants.z80
                    > USED AT LINE 8 IN constants.z80
                    > USED AT LINE 12 IN constants.z80
EM:                 10000 DEFINED AT LINE 12 IN constants.z80
COMPO:              0020 DEFINED AT LINE 14 IN constants.z80
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
IMEDD:              0040 DEFINED AT LINE 15 IN constants.z80
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 133 IN core-compiler.z80
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
MASKK:              001F DEFINED AT LINE 16 IN constants.z80
CHARR:              0001 DEFINED AT LINE 18 IN constants.z80
CELLL:              0002 DEFINED AT LINE 19 IN constants.z80
                    > USED AT LINE 39 IN constants.z80
                    > USED AT LINE 40 IN constants.z80
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 319 IN core-alu.z80
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 324 IN core-alu.z80
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 329 IN core-alu.z80
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 145 IN core-interpret.z80
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 184 IN core-memory.z80
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 196 IN core-memory.z80
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 90 IN core-stacks.z80
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 33
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 33
                    > USED AT LINE 63
                    > USED AT LINE 63
                    > USED AT LINE 63
                    > USED AT LINE 63
                    > USED AT LINE 63
                    > USED AT LINE 63
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 33
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 33
                    > USED AT LINE 63
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 33
                    > USED AT LINE 63
                    > USED AT LINE 65 IN core-user.z80
                    > USED AT LINE 63
                    > USED AT LINE 63
                    > USED AT LINE 63
                    > USED AT LINE 63
                    > USED AT LINE 63
                    > USED AT LINE 63
                    > USED AT LINE 96 IN core-user.z80
                    > USED AT LINE 63
                    > USED AT LINE 102 IN core-user.z80
                    > USED AT LINE 63
                    > USED AT LINE 63
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 33
                    > USED AT LINE 63
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
BASEE:              000A DEFINED AT LINE 20 IN constants.z80
VOCSS:              0008 DEFINED AT LINE 21 IN constants.z80
                    > USED AT LINE 96 IN core-user.z80
MAXCHAR:            00FF DEFINED AT LINE 23 IN constants.z80
MAXSIGNED:          7FFF DEFINED AT LINE 24 IN constants.z80
MAXUNSIGNED:        FFFF DEFINED AT LINE 25 IN constants.z80
MAXNEGATIVE:        8000 DEFINED AT LINE 26 IN constants.z80
BKSPP:              0008 DEFINED AT LINE 28 IN constants.z80
                    > USED AT LINE 188 IN core-io.z80
                    > USED AT LINE 190 IN core-io.z80
                    > USED AT LINE 205 IN core-io.z80
LFF:                000A DEFINED AT LINE 29 IN constants.z80
CRR:                000D DEFINED AT LINE 30 IN constants.z80
                    > USED AT LINE 126 IN core-io.z80
SPACEE:             0020 DEFINED AT LINE 31 IN constants.z80
                    > USED AT LINE 74 IN core-format.z80
                    > USED AT LINE 81 IN core-format.z80
TIC:                0027 DEFINED AT LINE 32 IN constants.z80
MINUSS:             002D DEFINED AT LINE 33 IN constants.z80
                    > USED AT LINE 44 IN core-format.z80
UNDERSC:            005F DEFINED AT LINE 34 IN constants.z80
CALLL:              CD00 DEFINED AT LINE 36 IN constants.z80
                    > USED AT LINE 119 IN core-compiler.z80
US:                 003A DEFINED AT LINE 38 IN constants.z80
                    > USED AT LINE 50
RTS:                0200 DEFINED AT LINE 39 IN constants.z80
                    > USED AT LINE 5 IN variables.z80
DTS:                0200 DEFINED AT LINE 40 IN constants.z80
                    > USED AT LINE 2 IN variables.z80
RET_STACK_SIZE:     0100 DEFINED AT LINE 42 IN constants.z80
DATA_STACK_SIZE:    0100 DEFINED AT LINE 43 IN constants.z80
INT_ADDR:           0038 DEFINED AT LINE 45 IN constants.z80
SER_BUFSIZE:        003F DEFINED AT LINE 46 IN constants.z80
                    > USED AT LINE 11 IN interrupt.z80
                    > USED AT LINE 19 IN interrupt.z80
                    > USED AT LINE 25 IN serial.z80
                    > USED AT LINE 41 IN variables.z80
SER_FULLSIZE:       0030 DEFINED AT LINE 47 IN constants.z80
                    > USED AT LINE 28 IN interrupt.z80
SER_EMPTYSIZE:      0005 DEFINED AT LINE 48 IN constants.z80
                    > USED AT LINE 34 IN serial.z80
RTS_HIGH:           00D6 DEFINED AT LINE 50 IN constants.z80
                    > USED AT LINE 30 IN interrupt.z80
RTS_LOW:            0096 DEFINED AT LINE 51 IN constants.z80
                    > USED AT LINE 11 IN serial.z80
                    > USED AT LINE 36 IN serial.z80
TRUEE:              00-1 DEFINED AT LINE 53 IN constants.z80
                    > USED AT LINE 41 IN core-io.z80
FALSEE:             0000 DEFINED AT LINE 54 IN constants.z80
                    > USED AT LINE 34 IN core-io.z80
VVCODE:             1266 DEFINED AT LINE 12
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 42
                    > USED AT LINE 43
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 42
                    > USED AT LINE 43
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 42
                    > USED AT LINE 43
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 42
                    > USED AT LINE 43
                    > USED AT LINE 42
                    > USED AT LINE 43
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 42
                    > USED AT LINE 43
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 42
                    > USED AT LINE 43
                    > USED AT LINE 16
                    > USED AT LINE 19
VVNAME:             1308 DEFINED AT LINE 15
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
VVLINK:             130C DEFINED AT LINE 17
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
VVUSER:             114C DEFINED AT LINE 63
                    > USED AT LINE 32
                    > USED AT LINE 33
                    > USED AT LINE 32
                    > USED AT LINE 33
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 32
                    > USED AT LINE 33
                    > USED AT LINE 32
                    > USED AT LINE 33
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 32
                    > USED AT LINE 33
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 65 IN core-user.z80
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 96 IN core-user.z80
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 102 IN core-user.z80
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 32
                    > USED AT LINE 33
                    > USED AT LINE 62
                    > USED AT LINE 63
RESET:              0000 DEFINED AT LINE 9
                    > USED AT LINE 57
RST08:              0008 DEFINED AT LINE 12
RST10:              0010 DEFINED AT LINE 16
RST18:              0018 DEFINED AT LINE 20
RST20:              0020 DEFINED AT LINE 24
RST28:              0028 DEFINED AT LINE 28
RST30:              0030 DEFINED AT LINE 32
RST38:              0038 DEFINED AT LINE 36
RST66:              0066 DEFINED AT LINE 40
INIT:               006A DEFINED AT LINE 42
                    > USED AT LINE 9
LOOP:               0090 DEFINED AT LINE 66
                    > USED AT LINE 69
SERIALINT:          0099 DEFINED AT LINE 1 IN interrupt.z80
                    > USED AT LINE 43
NOTFULL:            00AE DEFINED AT LINE 16 IN interrupt.z80
                    > USED AT LINE 12 IN interrupt.z80
NOTWRAP:            00BA DEFINED AT LINE 22 IN interrupt.z80
                    > USED AT LINE 20 IN interrupt.z80
RTS0:               00CE DEFINED AT LINE 32 IN interrupt.z80
                    > USED AT LINE 6 IN interrupt.z80
                    > USED AT LINE 14 IN interrupt.z80
                    > USED AT LINE 29 IN interrupt.z80
INIT_IO:            00D3 DEFINED AT LINE 4 IN serial.z80
                    > USED AT LINE 25 IN core-io.z80
RXA:                00E7 DEFINED AT LINE 16 IN serial.z80
                    > USED AT LINE 67
                    > USED AT LINE 37 IN core-io.z80
WAITFORCHAR:        00E7 DEFINED AT LINE 17 IN serial.z80
                    > USED AT LINE 20 IN serial.z80
NOTRDWRAP:          00FB DEFINED AT LINE 28 IN serial.z80
                    > USED AT LINE 26 IN serial.z80
RTS1:               010E DEFINED AT LINE 38 IN serial.z80
                    > USED AT LINE 35 IN serial.z80
TXA:                0112 DEFINED AT LINE 44 IN serial.z80
                    > USED AT LINE 68
                    > USED AT LINE 63 IN serial.z80
                    > USED AT LINE 49 IN core-io.z80
CONOUT1:            0113 DEFINED AT LINE 46 IN serial.z80
                    > USED AT LINE 49 IN serial.z80
CKINCHAR:           011D DEFINED AT LINE 54 IN serial.z80
                    > USED AT LINE 32 IN core-io.z80
PRINTSZ:            0123 DEFINED AT LINE 59 IN serial.z80
                    > USED AT LINE 65 IN serial.z80
                    > USED AT LINE 119 IN core-io.z80
DEFAULTS:           012D DEFINED AT LINE 3 IN defaults.z80
                    > USED AT LINE 38 IN constants.z80
                    > USED AT LINE 48
UZERO:              012D DEFINED AT LINE 4 IN defaults.z80
                    > USED AT LINE 18 IN core-kernel.z80
                    > USED AT LINE 19 IN core-kernel.z80
DEFSZERO:           012D DEFINED AT LINE 5 IN defaults.z80
DEFRZERO:           012F DEFINED AT LINE 6 IN defaults.z80
DEFTQKEY:           0131 DEFINED AT LINE 7 IN defaults.z80
DEFTEMIT:           0133 DEFINED AT LINE 8 IN defaults.z80
DEFTEXPE:           0135 DEFINED AT LINE 9 IN defaults.z80
DEFTTAP:            0137 DEFINED AT LINE 10 IN defaults.z80
DEFTECHO:           0139 DEFINED AT LINE 11 IN defaults.z80
DEFTPROM:           013B DEFINED AT LINE 12 IN defaults.z80
DEFBASE:            013D DEFINED AT LINE 13 IN defaults.z80
DEFTEMP:            013F DEFINED AT LINE 14 IN defaults.z80
DEFSPAN:            0141 DEFINED AT LINE 15 IN defaults.z80
DEFINN:             0143 DEFINED AT LINE 16 IN defaults.z80
DEFNTIB:            0145 DEFINED AT LINE 17 IN defaults.z80
DEFTIB:             0147 DEFINED AT LINE 18 IN defaults.z80
DEFCSP:             0149 DEFINED AT LINE 19 IN defaults.z80
DEFTEVAL:           014B DEFINED AT LINE 20 IN defaults.z80
DEFTNUMB:           014D DEFINED AT LINE 21 IN defaults.z80
DEFHLD:             014F DEFINED AT LINE 22 IN defaults.z80
DEFHANDL:           0151 DEFINED AT LINE 23 IN defaults.z80
DEFCNTXT:           0153 DEFINED AT LINE 24 IN defaults.z80
DEFVOCABS:          0155 DEFINED AT LINE 25 IN defaults.z80
DEFCRRENT:          0157 DEFINED AT LINE 26 IN defaults.z80
DEFVOCABLP:         0159 DEFINED AT LINE 27 IN defaults.z80
DEFCP:              015B DEFINED AT LINE 28 IN defaults.z80
DEFNP:              015D DEFINED AT LINE 29 IN defaults.z80
DEFLAST:            015F DEFINED AT LINE 30 IN defaults.z80
DEFVFRTH:           0161 DEFINED AT LINE 31 IN defaults.z80
DEFVOCABL:          0163 DEFINED AT LINE 32 IN defaults.z80
DEFCOLD:            0165 DEFINED AT LINE 33 IN defaults.z80
ULAST:              0167 DEFINED AT LINE 34 IN defaults.z80
                    > USED AT LINE 19 IN core-kernel.z80
END_DEFAULTS:       0167 DEFINED AT LINE 35 IN defaults.z80
                    > USED AT LINE 38 IN constants.z80
ZLESS:              0168 DEFINED AT LINE 11
                    > USED AT LINE 77 IN core-alu.z80
                    > USED AT LINE 98 IN core-alu.z80
                    > USED AT LINE 104 IN core-alu.z80
                    > USED AT LINE 106 IN core-alu.z80
                    > USED AT LINE 233 IN core-alu.z80
                    > USED AT LINE 250 IN core-alu.z80
                    > USED AT LINE 43 IN core-format.z80
                    > USED AT LINE 57 IN core-interpret.z80
                    > USED AT LINE 71 IN core-interpret.z80
                    > USED AT LINE 256 IN core-interpret.z80
VVLEN:              0001 DEFINED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 41
                    > USED AT LINE 42
                    > USED AT LINE 14
                    > USED AT LINE 41
                    > USED AT LINE 42
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 41
                    > USED AT LINE 42
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 41
                    > USED AT LINE 42
                    > USED AT LINE 41
                    > USED AT LINE 42
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 41
                    > USED AT LINE 42
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 41
                    > USED AT LINE 42
                    > USED AT LINE 14
ANDD:               0170 DEFINED AT LINE 11
ORR:                017A DEFINED AT LINE 11
XORR:               0184 DEFINED AT LINE 11
                    > USED AT LINE 85 IN core-alu.z80
                    > USED AT LINE 94 IN core-alu.z80
                    > USED AT LINE 103 IN core-alu.z80
                    > USED AT LINE 300 IN core-alu.z80
                    > USED AT LINE 218 IN core-io.z80
PLUS:               018E DEFINED AT LINE 11
                    > USED AT LINE 67 IN core-alu.z80
                    > USED AT LINE 72 IN core-alu.z80
                    > USED AT LINE 239 IN core-alu.z80
                    > USED AT LINE 44 IN core-compiler.z80
                    > USED AT LINE 216 IN core-io.z80
                    > USED AT LINE 198 IN core-memory.z80
                    > USED AT LINE 84 IN core-stacks.z80
INVER:              0198 DEFINED AT LINE 11
                    > USED AT LINE 60 IN core-alu.z80
                    > USED AT LINE 65 IN core-alu.z80
                    > USED AT LINE 37 IN core-utils.z80
NEGAT:              01A4 DEFINED AT LINE 11
                    > USED AT LINE 72 IN core-alu.z80
                    > USED AT LINE 78 IN core-alu.z80
                    > USED AT LINE 235 IN core-alu.z80
                    > USED AT LINE 243 IN core-alu.z80
                    > USED AT LINE 34 IN core-interpret.z80
DNEGA:              01B2 DEFINED AT LINE 11
                    > USED AT LINE 302 IN core-alu.z80
SUBB:               01C8 DEFINED AT LINE 11
                    > USED AT LINE 98 IN core-alu.z80
                    > USED AT LINE 106 IN core-alu.z80
                    > USED AT LINE 128 IN core-alu.z80
                    > USED AT LINE 129 IN core-alu.z80
                    > USED AT LINE 65 IN core-does.z80
                    > USED AT LINE 57 IN core-interpret.z80
                    > USED AT LINE 82 IN core-interpret.z80
                    > USED AT LINE 135 IN core-interpret.z80
                    > USED AT LINE 185 IN core-memory.z80
ABSS:               01D2 DEFINED AT LINE 11
ABS1:               01E0 DEFINED AT LINE 79 IN core-alu.z80
EQUAL:              01E2 DEFINED AT LINE 11
EQU1:               01F2 DEFINED AT LINE 88 IN core-alu.z80
                    > USED AT LINE 86 IN core-alu.z80
ULESS:              01F8 DEFINED AT LINE 11
ULES1:              020E DEFINED AT LINE 97 IN core-alu.z80
                    > USED AT LINE 95 IN core-alu.z80
LESS:               0214 DEFINED AT LINE 11
                    > USED AT LINE 111 IN core-alu.z80
LESS1:              0228 DEFINED AT LINE 105 IN core-alu.z80
MAX:                022E DEFINED AT LINE 11
MAX1:               023C DEFINED AT LINE 113 IN core-alu.z80
MIN:                0240 DEFINED AT LINE 11
MIN1:               0250 DEFINED AT LINE 122 IN core-alu.z80
                    > USED AT LINE 120 IN core-alu.z80
WITHI:              0254 DEFINED AT LINE 11
UMPLUS:             0266 DEFINED AT LINE 49
                    > USED AT LINE 50 IN core-alu.z80
UMP2:               026E DEFINED AT LINE 139 IN core-alu.z80
UMP1:               026F DEFINED AT LINE 141 IN core-alu.z80
                    > USED AT LINE 138 IN core-alu.z80
UMMOD:              0272 DEFINED AT LINE 11
                    > USED AT LINE 241 IN core-alu.z80
                    > USED AT LINE 194 IN core-memory.z80
UMSLMOD2:           027E DEFINED AT LINE 11
UMMOD11:            0282 DEFINED AT LINE 158 IN core-alu.z80
UMMOD12:            028D DEFINED AT LINE 169 IN core-alu.z80
UMMOD2:             02A7 DEFINED AT LINE 189 IN core-alu.z80
                    > USED AT LINE 157 IN core-alu.z80
UMMOD1:             02AD DEFINED AT LINE 192 IN core-alu.z80
                    > USED AT LINE 168 IN core-alu.z80
UMMOD4:             02B3 DEFINED AT LINE 195 IN core-alu.z80
                    > USED AT LINE 213 IN core-alu.z80
UMMOD13:            02BB DEFINED AT LINE 203 IN core-alu.z80
UMMOD3:             02C1 DEFINED AT LINE 210 IN core-alu.z80
                    > USED AT LINE 175 IN core-alu.z80
                    > USED AT LINE 179 IN core-alu.z80
                    > USED AT LINE 224 IN core-alu.z80
UMMOD14:            02C5 DEFINED AT LINE 214 IN core-alu.z80
UMMOD5:             02CB DEFINED AT LINE 221 IN core-alu.z80
                    > USED AT LINE 202 IN core-alu.z80
UMMOD15:            02CF DEFINED AT LINE 225 IN core-alu.z80
MSMOD:              02D0 DEFINED AT LINE 11
MMOD1:              02E8 DEFINED AT LINE 236 IN core-alu.z80
                    > USED AT LINE 234 IN core-alu.z80
MMOD2:              02F6 DEFINED AT LINE 240 IN core-alu.z80
                    > USED AT LINE 238 IN core-alu.z80
MMOD3:              0306 DEFINED AT LINE 244 IN core-alu.z80
                    > USED AT LINE 242 IN core-alu.z80
SLMOD:              0308 DEFINED AT LINE 11
                    > USED AT LINE 255 IN core-alu.z80
                    > USED AT LINE 260 IN core-alu.z80
MODD:               0316 DEFINED AT LINE 11
SLASH:              0320 DEFINED AT LINE 11
UMSTA:              032C DEFINED AT LINE 11
                    > USED AT LINE 295 IN core-alu.z80
                    > USED AT LINE 301 IN core-alu.z80
UMSTA1:             0334 DEFINED AT LINE 272 IN core-alu.z80
                    > USED AT LINE 285 IN core-alu.z80
UMSTA2:             033B DEFINED AT LINE 278 IN core-alu.z80
UMSTA5:             033E DEFINED AT LINE 281 IN core-alu.z80
UMSTA3:             033F DEFINED AT LINE 283 IN core-alu.z80
                    > USED AT LINE 277 IN core-alu.z80
                    > USED AT LINE 280 IN core-alu.z80
UMSTA4:             0342 DEFINED AT LINE 286 IN core-alu.z80
STAR:               0348 DEFINED AT LINE 11
MSTAR:              0352 DEFINED AT LINE 11
                    > USED AT LINE 309 IN core-alu.z80
MSTAR1:             036E DEFINED AT LINE 303 IN core-alu.z80
SSMOD:              0370 DEFINED AT LINE 11
                    > USED AT LINE 314 IN core-alu.z80
STASL:              037E DEFINED AT LINE 11
CELLP:              038A DEFINED AT LINE 11
                    > USED AT LINE 32 IN core-compiler.z80
                    > USED AT LINE 151 IN core-interpret.z80
                    > USED AT LINE 153 IN core-interpret.z80
                    > USED AT LINE 171 IN core-interpret.z80
                    > USED AT LINE 97 IN core-memory.z80
                    > USED AT LINE 102 IN core-memory.z80
                    > USED AT LINE 125 IN core-memory.z80
                    > USED AT LINE 74 IN core-utils.z80
                    > USED AT LINE 107 IN core-utils.z80
                    > USED AT LINE 109 IN core-utils.z80
CELLM:              0396 DEFINED AT LINE 11
                    > USED AT LINE 72 IN core-compiler.z80
                    > USED AT LINE 74 IN core-compiler.z80
                    > USED AT LINE 126 IN core-interpret.z80
                    > USED AT LINE 126 IN core-interpret.z80
                    > USED AT LINE 156 IN core-interpret.z80
                    > USED AT LINE 158 IN core-interpret.z80
                    > USED AT LINE 158 IN core-interpret.z80
                    > USED AT LINE 161 IN core-interpret.z80
                    > USED AT LINE 169 IN core-interpret.z80
                    > USED AT LINE 82 IN core-utils.z80
CELLS:              03A2 DEFINED AT LINE 11
TICK:               03AE DEFINED AT LINE 11
                    > USED AT LINE 25 IN core-compiler.z80
                    > USED AT LINE 106 IN core-utils.z80
TICK1:              03BC DEFINED AT LINE 7 IN core-compiler.z80
                    > USED AT LINE 5 IN core-compiler.z80
ALLOT:              03BE DEFINED AT LINE 11
COMMA:              03C8 DEFINED AT LINE 11
                    > USED AT LINE 25 IN core-compiler.z80
                    > USED AT LINE 90 IN core-compiler.z80
                    > USED AT LINE 120 IN core-compiler.z80
BCOMP:              03DA DEFINED AT LINE 11
COMPI:              03E4 DEFINED AT LINE 11
                    > USED AT LINE 38 IN core-compiler.z80
                    > USED AT LINE 107 IN core-compiler.z80
                    > USED AT LINE 142 IN core-compiler.z80
                    > USED AT LINE 150 IN core-compiler.z80
                    > USED AT LINE 4 IN core-control.z80
                    > USED AT LINE 14 IN core-control.z80
                    > USED AT LINE 19 IN core-control.z80
                    > USED AT LINE 24 IN core-control.z80
                    > USED AT LINE 30 IN core-control.z80
                    > USED AT LINE 37 IN core-control.z80
                    > USED AT LINE 69 IN core-control.z80
                    > USED AT LINE 74 IN core-control.z80
                    > USED AT LINE 79 IN core-control.z80
LITER:              03F6 DEFINED AT LINE 11
                    > USED AT LINE 94 IN core-compiler.z80
STRCQ:              0402 DEFINED AT LINE 49
RECUR:              0418 DEFINED AT LINE 11
UNIQU:              0426 DEFINED AT LINE 11
                    > USED AT LINE 69 IN core-compiler.z80
UNIQ1:              0442 DEFINED AT LINE 60 IN core-compiler.z80
                    > USED AT LINE 57 IN core-compiler.z80
SNAME:              0446 DEFINED AT LINE 11
                    > USED AT LINE 126 IN core-compiler.z80
                    > USED AT LINE 140 IN core-compiler.z80
                    > USED AT LINE 148 IN core-compiler.z80
PNAM1:              0478 DEFINED AT LINE 76 IN core-compiler.z80
                    > USED AT LINE 68 IN core-compiler.z80
SCOMP:              0482 DEFINED AT LINE 49
                    > USED AT LINE 113 IN core-compiler.z80
SCOM1:              049E DEFINED AT LINE 89 IN core-compiler.z80
                    > USED AT LINE 87 IN core-compiler.z80
SCOM2:              04A2 DEFINED AT LINE 91 IN core-compiler.z80
                    > USED AT LINE 85 IN core-compiler.z80
SCOM3:              04AE DEFINED AT LINE 95 IN core-compiler.z80
                    > USED AT LINE 93 IN core-compiler.z80
OVERT:              04B0 DEFINED AT LINE 49
SEMIS:              04C0 DEFINED AT LINE 11
RBRAC:              04CE DEFINED AT LINE 11
                    > USED AT LINE 127 IN core-compiler.z80
CALLC:              04DC DEFINED AT LINE 49
                    > USED AT LINE 127 IN core-compiler.z80
COLON:              04EA DEFINED AT LINE 11
IMMED:              04FC DEFINED AT LINE 11
USER:               0514 DEFINED AT LINE 11
CREAT:              052C DEFINED AT LINE 11
                    > USED AT LINE 156 IN core-compiler.z80
VARIA:              0542 DEFINED AT LINE 11
FOR:                0550 DEFINED AT LINE 11
BEGIN:              055C DEFINED AT LINE 11
NEXT:               0564 DEFINED AT LINE 11
UNTIL:              0570 DEFINED AT LINE 11
AGAIN:              057C DEFINED AT LINE 11
                    > USED AT LINE 43 IN core-control.z80
IFF:                0588 DEFINED AT LINE 11
                    > USED AT LINE 64 IN core-control.z80
AHEAD:              059A DEFINED AT LINE 11
                    > USED AT LINE 54 IN core-control.z80
                    > USED AT LINE 59 IN core-control.z80
REPEA:              05AC DEFINED AT LINE 11
THENN:              05BA DEFINED AT LINE 11
AFT:                05C6 DEFINED AT LINE 11
ELSEE:              05D4 DEFINED AT LINE 11
WHILE:              05E0 DEFINED AT LINE 11
ABRTQ:              05EA DEFINED AT LINE 11
STRQ:               05F6 DEFINED AT LINE 11
DOTQ:               0602 DEFINED AT LINE 11
DOCONST:            060E DEFINED AT LINE 49
DOLIST:             0616 DEFINED AT LINE 49
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 141 IN core-compiler.z80
                    > USED AT LINE 25
                    > USED AT LINE 149 IN core-compiler.z80
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 31
                    > USED AT LINE 31
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 31
                    > USED AT LINE 31
                    > USED AT LINE 61
                    > USED AT LINE 31
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 31
                    > USED AT LINE 61
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
DOLIT:              0624 DEFINED AT LINE 49
                    > USED AT LINE 55 IN core-alu.z80
                    > USED AT LINE 60 IN core-alu.z80
                    > USED AT LINE 66 IN core-alu.z80
                    > USED AT LINE 87 IN core-alu.z80
                    > USED AT LINE 89 IN core-alu.z80
                    > USED AT LINE 319 IN core-alu.z80
                    > USED AT LINE 324 IN core-alu.z80
                    > USED AT LINE 329 IN core-alu.z80
                    > USED AT LINE 38 IN core-compiler.z80
                    > USED AT LINE 43 IN core-compiler.z80
                    > USED AT LINE 86 IN core-compiler.z80
                    > USED AT LINE 113 IN core-compiler.z80
                    > USED AT LINE 119 IN core-compiler.z80
                    > USED AT LINE 133 IN core-compiler.z80
                    > USED AT LINE 141 IN core-compiler.z80
                    > USED AT LINE 149 IN core-compiler.z80
                    > USED AT LINE 156 IN core-compiler.z80
                    > USED AT LINE 31 IN core-control.z80
                    > USED AT LINE 64 IN core-does.z80
                    > USED AT LINE 4 IN core-format.z80
                    > USED AT LINE 5 IN core-format.z80
                    > USED AT LINE 6 IN core-format.z80
                    > USED AT LINE 11 IN core-format.z80
                    > USED AT LINE 44 IN core-format.z80
                    > USED AT LINE 64 IN core-format.z80
                    > USED AT LINE 69 IN core-format.z80
                    > USED AT LINE 74 IN core-format.z80
                    > USED AT LINE 79 IN core-format.z80
                    > USED AT LINE 80 IN core-format.z80
                    > USED AT LINE 81 IN core-format.z80
                    > USED AT LINE 83 IN core-format.z80
                    > USED AT LINE 5 IN core-interpret.z80
                    > USED AT LINE 6 IN core-interpret.z80
                    > USED AT LINE 8 IN core-interpret.z80
                    > USED AT LINE 9 IN core-interpret.z80
                    > USED AT LINE 20 IN core-interpret.z80
                    > USED AT LINE 25 IN core-interpret.z80
                    > USED AT LINE 30 IN core-interpret.z80
                    > USED AT LINE 52 IN core-interpret.z80
                    > USED AT LINE 59 IN core-interpret.z80
                    > USED AT LINE 74 IN core-interpret.z80
                    > USED AT LINE 80 IN core-interpret.z80
                    > USED AT LINE 99 IN core-interpret.z80
                    > USED AT LINE 139 IN core-interpret.z80
                    > USED AT LINE 145 IN core-interpret.z80
                    > USED AT LINE 151 IN core-interpret.z80
                    > USED AT LINE 178 IN core-interpret.z80
                    > USED AT LINE 227 IN core-interpret.z80
                    > USED AT LINE 241 IN core-interpret.z80
                    > USED AT LINE 247 IN core-interpret.z80
                    > USED AT LINE 84 IN core-io.z80
                    > USED AT LINE 94 IN core-io.z80
                    > USED AT LINE 109 IN core-io.z80
                    > USED AT LINE 126 IN core-io.z80
                    > USED AT LINE 176 IN core-io.z80
                    > USED AT LINE 188 IN core-io.z80
                    > USED AT LINE 190 IN core-io.z80
                    > USED AT LINE 203 IN core-io.z80
                    > USED AT LINE 205 IN core-io.z80
                    > USED AT LINE 221 IN core-io.z80
                    > USED AT LINE 240 IN core-io.z80
                    > USED AT LINE 241 IN core-io.z80
                    > USED AT LINE 4 IN core-kernel.z80
                    > USED AT LINE 18 IN core-kernel.z80
                    > USED AT LINE 19 IN core-kernel.z80
                    > USED AT LINE 31 IN core-kernel.z80
                    > USED AT LINE 108 IN core-memory.z80
                    > USED AT LINE 119 IN core-memory.z80
                    > USED AT LINE 146 IN core-memory.z80
                    > USED AT LINE 147 IN core-memory.z80
                    > USED AT LINE 173 IN core-memory.z80
                    > USED AT LINE 176 IN core-memory.z80
                    > USED AT LINE 184 IN core-memory.z80
                    > USED AT LINE 186 IN core-memory.z80
                    > USED AT LINE 193 IN core-memory.z80
                    > USED AT LINE 196 IN core-memory.z80
                    > USED AT LINE 83 IN core-stacks.z80
                    > USED AT LINE 90 IN core-stacks.z80
                    > USED AT LINE 8 IN core-utils.z80
                    > USED AT LINE 16 IN core-utils.z80
                    > USED AT LINE 21 IN core-utils.z80
                    > USED AT LINE 31 IN core-utils.z80
                    > USED AT LINE 34 IN core-utils.z80
                    > USED AT LINE 89 IN core-utils.z80
                    > USED AT LINE 96 IN core-utils.z80
DOVAR:              062C DEFINED AT LINE 49
                    > USED AT LINE 150 IN core-compiler.z80
                    > USED AT LINE 41 IN core-does.z80
                    > USED AT LINE 201 IN core-interpret.z80
UP:                 0634 DEFINED AT LINE 49
DOUSE:              063C DEFINED AT LINE 49
                    > USED AT LINE 142 IN core-compiler.z80
                    > USED AT LINE 32
                    > USED AT LINE 32
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 32
                    > USED AT LINE 32
                    > USED AT LINE 62
                    > USED AT LINE 32
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 32
                    > USED AT LINE 62
EXIT:               064C DEFINED AT LINE 11
                    > USED AT LINE 80 IN core-alu.z80
                    > USED AT LINE 114 IN core-alu.z80
                    > USED AT LINE 123 IN core-alu.z80
                    > USED AT LINE 245 IN core-alu.z80
                    > USED AT LINE 304 IN core-alu.z80
                    > USED AT LINE 6 IN core-compiler.z80
                    > USED AT LINE 61 IN core-compiler.z80
                    > USED AT LINE 75 IN core-compiler.z80
                    > USED AT LINE 88 IN core-compiler.z80
                    > USED AT LINE 90 IN core-compiler.z80
                    > USED AT LINE 94 IN core-compiler.z80
                    > USED AT LINE 107 IN core-compiler.z80
                    > USED AT LINE 120 IN core-compiler.z80
                    > USED AT LINE 9 IN core-control.z80
                    > USED AT LINE 36 IN core-does.z80
                    > USED AT LINE 38 IN core-format.z80
                    > USED AT LINE 46 IN core-format.z80
                    > USED AT LINE 85 IN core-format.z80
                    > USED AT LINE 116 IN core-interpret.z80
                    > USED AT LINE 229 IN core-interpret.z80
                    > USED AT LINE 233 IN core-interpret.z80
                    > USED AT LINE 250 IN core-interpret.z80
                    > USED AT LINE 258 IN core-interpret.z80
                    > USED AT LINE 64 IN core-io.z80
                    > USED AT LINE 79 IN core-io.z80
                    > USED AT LINE 100 IN core-io.z80
                    > USED AT LINE 112 IN core-io.z80
                    > USED AT LINE 138 IN core-io.z80
                    > USED AT LINE 169 IN core-io.z80
                    > USED AT LINE 192 IN core-io.z80
                    > USED AT LINE 209 IN core-io.z80
                    > USED AT LINE 68 IN core-kernel.z80
                    > USED AT LINE 135 IN core-memory.z80
                    > USED AT LINE 150 IN core-memory.z80
                    > USED AT LINE 162 IN core-memory.z80
                    > USED AT LINE 198 IN core-memory.z80
                    > USED AT LINE 58 IN core-stacks.z80
                    > USED AT LINE 11 IN core-utils.z80
                    > USED AT LINE 24 IN core-utils.z80
                    > USED AT LINE 45 IN core-utils.z80
                    > USED AT LINE 58 IN core-utils.z80
                    > USED AT LINE 97 IN core-utils.z80
                    > USED AT LINE 100 IN core-utils.z80
                    > USED AT LINE 122 IN core-utils.z80
DODO:               0658 DEFINED AT LINE 49
DONXT:              067A DEFINED AT LINE 11
                    > USED AT LINE 14 IN core-control.z80
                    > USED AT LINE 31 IN core-interpret.z80
                    > USED AT LINE 60 IN core-interpret.z80
                    > USED AT LINE 75 IN core-interpret.z80
                    > USED AT LINE 138 IN core-interpret.z80
                    > USED AT LINE 99 IN core-io.z80
                    > USED AT LINE 111 IN core-io.z80
                    > USED AT LINE 149 IN core-memory.z80
                    > USED AT LINE 161 IN core-memory.z80
                    > USED AT LINE 175 IN core-memory.z80
                    > USED AT LINE 10 IN core-utils.z80
                    > USED AT LINE 23 IN core-utils.z80
                    > USED AT LINE 39 IN core-utils.z80
                    > USED AT LINE 56 IN core-utils.z80
DECHILO:            068F DEFINED AT LINE 146 IN core-does.z80
                    > USED AT LINE 139 IN core-does.z80
DECLOW:             0691 DEFINED AT LINE 149 IN core-does.z80
                    > USED AT LINE 135 IN core-does.z80
DIGIT:              069A DEFINED AT LINE 49
                    > USED AT LINE 12 IN core-format.z80
EXTRC:              06B4 DEFINED AT LINE 49
BDIGS:              06C6 DEFINED AT LINE 11
                    > USED AT LINE 58 IN core-format.z80
                    > USED AT LINE 154 IN core-io.z80
                    > USED AT LINE 161 IN core-io.z80
HOLD:               06D2 DEFINED AT LINE 11
DIG:                06EA DEFINED AT LINE 11
                    > USED AT LINE 34 IN core-format.z80
DIGS:               06F8 DEFINED AT LINE 11
                    > USED AT LINE 58 IN core-format.z80
                    > USED AT LINE 161 IN core-io.z80
DIGS1:              06FC DEFINED AT LINE 33 IN core-format.z80
                    > USED AT LINE 36 IN core-format.z80
DIGS2:              0708 DEFINED AT LINE 37 IN core-format.z80
                    > USED AT LINE 35 IN core-format.z80
SIGN:               070A DEFINED AT LINE 11
                    > USED AT LINE 59 IN core-format.z80
SIGN1:              071A DEFINED AT LINE 45 IN core-format.z80
EDIGS:              071C DEFINED AT LINE 11
                    > USED AT LINE 59 IN core-format.z80
STR:                072E DEFINED AT LINE 49
                    > USED AT LINE 148 IN core-io.z80
                    > USED AT LINE 171 IN core-io.z80
HEX:                0744 DEFINED AT LINE 11
                    > USED AT LINE 19 IN core-interpret.z80
DECIMAL:            0752 DEFINED AT LINE 11
BLANK:              0760 DEFINED AT LINE 11
                    > USED AT LINE 56 IN core-interpret.z80
                    > USED AT LINE 109 IN core-interpret.z80
                    > USED AT LINE 114 IN core-interpret.z80
                    > USED AT LINE 89 IN core-io.z80
                    > USED AT LINE 189 IN core-io.z80
                    > USED AT LINE 207 IN core-io.z80
                    > USED AT LINE 221 IN core-io.z80
                    > USED AT LINE 171 IN core-memory.z80
TCHAR:              076A DEFINED AT LINE 49
TCHA1:              078A DEFINED AT LINE 84 IN core-format.z80
                    > USED AT LINE 82 IN core-format.z80
DIGTQ:              078C DEFINED AT LINE 49
DGTQ1:              07B2 DEFINED AT LINE 10 IN core-interpret.z80
                    > USED AT LINE 7 IN core-interpret.z80
NUMBQ:              07BA DEFINED AT LINE 49
NUMQ1:              07EA DEFINED AT LINE 21 IN core-interpret.z80
                    > USED AT LINE 18 IN core-interpret.z80
NUMQ2:              080E DEFINED AT LINE 26 IN core-interpret.z80
                    > USED AT LINE 31 IN core-interpret.z80
NUMQ3:              0840 DEFINED AT LINE 35 IN core-interpret.z80
                    > USED AT LINE 33 IN core-interpret.z80
NUMQ4:              0846 DEFINED AT LINE 38 IN core-interpret.z80
                    > USED AT LINE 28 IN core-interpret.z80
NUMQ5:              0852 DEFINED AT LINE 40 IN core-interpret.z80
                    > USED AT LINE 37 IN core-interpret.z80
NUMQ6:              0854 DEFINED AT LINE 42 IN core-interpret.z80
                    > USED AT LINE 24 IN core-interpret.z80
PARS:               0860 DEFINED AT LINE 49
                    > USED AT LINE 93 IN core-interpret.z80
PARS1:              0886 DEFINED AT LINE 55 IN core-interpret.z80
                    > USED AT LINE 60 IN core-interpret.z80
PARS2:              08AC DEFINED AT LINE 62 IN core-interpret.z80
                    > USED AT LINE 58 IN core-interpret.z80
PARS3:              08AE DEFINED AT LINE 64 IN core-interpret.z80
                    > USED AT LINE 53 IN core-interpret.z80
PARS4:              08B4 DEFINED AT LINE 67 IN core-interpret.z80
                    > USED AT LINE 75 IN core-interpret.z80
PARS5:              08CC DEFINED AT LINE 72 IN core-interpret.z80
                    > USED AT LINE 70 IN core-interpret.z80
PARS6:              08E2 DEFINED AT LINE 78 IN core-interpret.z80
                    > USED AT LINE 73 IN core-interpret.z80
PARS7:              08F0 DEFINED AT LINE 81 IN core-interpret.z80
                    > USED AT LINE 77 IN core-interpret.z80
PARS8:              08FC DEFINED AT LINE 84 IN core-interpret.z80
                    > USED AT LINE 51 IN core-interpret.z80
PARSE:              0904 DEFINED AT LINE 11
                    > USED AT LINE 109 IN core-interpret.z80
                    > USED AT LINE 114 IN core-interpret.z80
                    > USED AT LINE 121 IN core-interpret.z80
PAREN:              0926 DEFINED AT LINE 11
BKSLA:              0932 DEFINED AT LINE 11
CHAR:               0940 DEFINED AT LINE 11
TOKEN:              094E DEFINED AT LINE 49
                    > USED AT LINE 4 IN core-compiler.z80
                    > USED AT LINE 126 IN core-compiler.z80
                    > USED AT LINE 140 IN core-compiler.z80
                    > USED AT LINE 148 IN core-compiler.z80
                    > USED AT LINE 265 IN core-interpret.z80
WORDD:              096A DEFINED AT LINE 11
NAMET:              0976 DEFINED AT LINE 49
                    > USED AT LINE 162 IN core-interpret.z80
                    > USED AT LINE 80 IN core-utils.z80
SAMEQ:              0982 DEFINED AT LINE 49
SAME1:              098C DEFINED AT LINE 133 IN core-interpret.z80
                    > USED AT LINE 138 IN core-interpret.z80
SAME2:              09AE DEFINED AT LINE 138 IN core-interpret.z80
                    > USED AT LINE 132 IN core-interpret.z80
                    > USED AT LINE 136 IN core-interpret.z80
FIND:               09B8 DEFINED AT LINE 11
                    > USED AT LINE 174 IN core-interpret.z80
FIND1:              09D6 DEFINED AT LINE 147 IN core-interpret.z80
                    > USED AT LINE 159 IN core-interpret.z80
FIND2:              09FA DEFINED AT LINE 153 IN core-interpret.z80
                    > USED AT LINE 150 IN core-interpret.z80
FIND3:              0A02 DEFINED AT LINE 154 IN core-interpret.z80
                    > USED AT LINE 152 IN core-interpret.z80
FIND6:              0A06 DEFINED AT LINE 155 IN core-interpret.z80
                    > USED AT LINE 148 IN core-interpret.z80
FIND4:              0A12 DEFINED AT LINE 157 IN core-interpret.z80
                    > USED AT LINE 154 IN core-interpret.z80
FIND5:              0A1E DEFINED AT LINE 160 IN core-interpret.z80
                    > USED AT LINE 157 IN core-interpret.z80
NAMEQ:              0A30 DEFINED AT LINE 49
                    > USED AT LINE 4 IN core-compiler.z80
                    > USED AT LINE 56 IN core-compiler.z80
                    > USED AT LINE 84 IN core-compiler.z80
                    > USED AT LINE 225 IN core-interpret.z80
NAMQ1:              0A42 DEFINED AT LINE 170 IN core-interpret.z80
                    > USED AT LINE 168 IN core-interpret.z80
NAMQ2:              0A44 DEFINED AT LINE 171 IN core-interpret.z80
                    > USED AT LINE 175 IN core-interpret.z80
NAMQ3:              0A62 DEFINED AT LINE 177 IN core-interpret.z80
                    > USED AT LINE 173 IN core-interpret.z80
CATCH:              0A6C DEFINED AT LINE 11
THROW:              0A92 DEFINED AT LINE 11
                    > USED AT LINE 8 IN core-compiler.z80
                    > USED AT LINE 78 IN core-compiler.z80
                    > USED AT LINE 95 IN core-compiler.z80
                    > USED AT LINE 210 IN core-interpret.z80
                    > USED AT LINE 217 IN core-interpret.z80
                    > USED AT LINE 235 IN core-interpret.z80
NULLS:              0AB0 DEFINED AT LINE 49
                    > USED AT LINE 210 IN core-interpret.z80
ABORT:              0ABE DEFINED AT LINE 11
ABORQ:              0AC6 DEFINED AT LINE 11
                    > USED AT LINE 69 IN core-control.z80
                    > USED AT LINE 37
                    > USED AT LINE 37
ABOR1:              0AD2 DEFINED AT LINE 218 IN core-interpret.z80
                    > USED AT LINE 216 IN core-interpret.z80
INTER:              0AD8 DEFINED AT LINE 49
                    > USED AT LINE 241 IN core-interpret.z80
                    > USED AT LINE 247 IN core-interpret.z80
INTE1:              0B00 DEFINED AT LINE 230 IN core-interpret.z80
                    > USED AT LINE 226 IN core-interpret.z80
INTE2:              0B0A DEFINED AT LINE 234 IN core-interpret.z80
                    > USED AT LINE 232 IN core-interpret.z80
LBRAC:              0B0C DEFINED AT LINE 11
DOTOK:              0B1A DEFINED AT LINE 11
DOTO1:              0B32 DEFINED AT LINE 250 IN core-interpret.z80
                    > USED AT LINE 248 IN core-interpret.z80
QSTAC:              0B36 DEFINED AT LINE 49
EVAL:               0B4E DEFINED AT LINE 11
EVAL1:              0B52 DEFINED AT LINE 264 IN core-interpret.z80
                    > USED AT LINE 268 IN core-interpret.z80
EVAL2:              0B66 DEFINED AT LINE 269 IN core-interpret.z80
                    > USED AT LINE 266 IN core-interpret.z80
PCSTO:              0B6E DEFINED AT LINE 11
PCAT:               0B78 DEFINED AT LINE 11
STOIO:              0B84 DEFINED AT LINE 11
                    > USED AT LINE 2 IN core-kernel.z80
QRX:                0B8A DEFINED AT LINE 11
                    > USED AT LINE 7 IN defaults.z80
QRX1:               0B95 DEFINED AT LINE 36 IN core-io.z80
                    > USED AT LINE 33 IN core-io.z80
QRX2:               0B9F DEFINED AT LINE 42 IN core-io.z80
                    > USED AT LINE 35 IN core-io.z80
TXSTO:              0BA2 DEFINED AT LINE 11
                    > USED AT LINE 8 IN defaults.z80
                    > USED AT LINE 11 IN defaults.z80
QKEY:               0BAA DEFINED AT LINE 11
                    > USED AT LINE 62 IN core-io.z80
                    > USED AT LINE 75 IN core-io.z80
KEY:                0BB6 DEFINED AT LINE 11
                    > USED AT LINE 77 IN core-io.z80
                    > USED AT LINE 220 IN core-io.z80
KEY1:               0BBA DEFINED AT LINE 61 IN core-io.z80
                    > USED AT LINE 63 IN core-io.z80
EMIT:               0BC2 DEFINED AT LINE 11
                    > USED AT LINE 89 IN core-io.z80
NUFQ:               0BCE DEFINED AT LINE 11
                    > USED AT LINE 37 IN core-utils.z80
                    > USED AT LINE 120 IN core-utils.z80
NUFQ1:              0BE4 DEFINED AT LINE 78 IN core-io.z80
                    > USED AT LINE 76 IN core-io.z80
PACE:               0BE6 DEFINED AT LINE 49
SPACE:              0BF2 DEFINED AT LINE 11
                    > USED AT LINE 97 IN core-io.z80
                    > USED AT LINE 162 IN core-io.z80
                    > USED AT LINE 171 IN core-io.z80
                    > USED AT LINE 17 IN core-utils.z80
                    > USED AT LINE 36 IN core-utils.z80
                    > USED AT LINE 36 IN core-utils.z80
                    > USED AT LINE 115 IN core-utils.z80
SPACS:              0BFC DEFINED AT LINE 11
                    > USED AT LINE 149 IN core-io.z80
                    > USED AT LINE 156 IN core-io.z80
CHAR1:              0C0C DEFINED AT LINE 96 IN core-io.z80
                    > USED AT LINE 99 IN core-io.z80
CHAR2:              0C0E DEFINED AT LINE 98 IN core-io.z80
                    > USED AT LINE 95 IN core-io.z80
TYPEE:              0C14 DEFINED AT LINE 11
                    > USED AT LINE 149 IN core-io.z80
                    > USED AT LINE 156 IN core-io.z80
                    > USED AT LINE 162 IN core-io.z80
TYPE1:              0C1E DEFINED AT LINE 107 IN core-io.z80
                    > USED AT LINE 111 IN core-io.z80
TYPE2:              0C2A DEFINED AT LINE 110 IN core-io.z80
                    > USED AT LINE 106 IN core-io.z80
TYPESZ:             0C32 DEFINED AT LINE 11
                    > USED AT LINE 68 IN core-kernel.z80
CR:                 0C3C DEFINED AT LINE 11
                    > USED AT LINE 250 IN core-interpret.z80
                    > USED AT LINE 34 IN core-utils.z80
                    > USED AT LINE 50 IN core-utils.z80
                    > USED AT LINE 107 IN core-utils.z80
DOSTR:              0C4E DEFINED AT LINE 11
                    > USED AT LINE 217 IN core-interpret.z80
                    > USED AT LINE 219 IN core-interpret.z80
                    > USED AT LINE 138 IN core-io.z80
                    > USED AT LINE 143 IN core-io.z80
STRQP:              0C66 DEFINED AT LINE 49
                    > USED AT LINE 37
                    > USED AT LINE 74 IN core-control.z80
DOTQP:              0C6E DEFINED AT LINE 49
                    > USED AT LINE 37
                    > USED AT LINE 79 IN core-control.z80
                    > USED AT LINE 37
                    > USED AT LINE 37
                    > USED AT LINE 37
DOTR:               0C7A DEFINED AT LINE 11
UDOTR:              0C8E DEFINED AT LINE 11
UDOT:               0CA6 DEFINED AT LINE 11
                    > USED AT LINE 169 IN core-io.z80
DOT:                0CB6 DEFINED AT LINE 11
                    > USED AT LINE 181 IN core-io.z80
DOT1:               0CCC DEFINED AT LINE 170 IN core-io.z80
                    > USED AT LINE 168 IN core-io.z80
DOTPR:              0CD4 DEFINED AT LINE 11
QUEST:              0CE0 DEFINED AT LINE 11
BKSP:               0CEA DEFINED AT LINE 11
                    > USED AT LINE 209 IN core-io.z80
BACK1:              0D1A DEFINED AT LINE 191 IN core-io.z80
                    > USED AT LINE 187 IN core-io.z80
TAP:                0D1C DEFINED AT LINE 11
                    > USED AT LINE 207 IN core-io.z80
                    > USED AT LINE 223 IN core-io.z80
KTAP:               0D32 DEFINED AT LINE 11
KTAP1:              0D52 DEFINED AT LINE 208 IN core-io.z80
                    > USED AT LINE 206 IN core-io.z80
KTAP2:              0D56 DEFINED AT LINE 210 IN core-io.z80
                    > USED AT LINE 204 IN core-io.z80
ACCEP:              0D60 DEFINED AT LINE 11
ACCP1:              0D6A DEFINED AT LINE 217 IN core-io.z80
                    > USED AT LINE 228 IN core-io.z80
ACCP2:              0D88 DEFINED AT LINE 225 IN core-io.z80
                    > USED AT LINE 222 IN core-io.z80
ACCP3:              0D8C DEFINED AT LINE 227 IN core-io.z80
                    > USED AT LINE 224 IN core-io.z80
ACCP4:              0D90 DEFINED AT LINE 229 IN core-io.z80
                    > USED AT LINE 219 IN core-io.z80
EXPEC:              0D98 DEFINED AT LINE 49
QUERY:              0DA8 DEFINED AT LINE 49
KOLD:               0DC6 DEFINED AT LINE 49
                    > USED AT LINE 58
HELLO:              0DD6 DEFINED AT LINE 6 IN core-kernel.z80
                    > USED AT LINE 4 IN core-kernel.z80
NEXT_STEP:          0DE6 DEFINED AT LINE 8 IN core-kernel.z80
                    > USED AT LINE 54
COLD:               0DEC DEFINED AT LINE 11
COLD1:              0DF0 DEFINED AT LINE 17 IN core-kernel.z80
                    > USED AT LINE 25 IN core-kernel.z80
PRESE:              0E06 DEFINED AT LINE 11
                    > USED AT LINE 20 IN core-kernel.z80
QUIT:               0E1C DEFINED AT LINE 11
                    > USED AT LINE 5 IN core-kernel.z80
                    > USED AT LINE 24 IN core-kernel.z80
EXECU:              0E1E DEFINED AT LINE 11
                    > USED AT LINE 88 IN core-compiler.z80
                    > USED AT LINE 229 IN core-interpret.z80
                    > USED AT LINE 133 IN core-memory.z80
QBRAN:              0E22 DEFINED AT LINE 49
                    > USED AT LINE 86 IN core-alu.z80
                    > USED AT LINE 95 IN core-alu.z80
                    > USED AT LINE 120 IN core-alu.z80
                    > USED AT LINE 234 IN core-alu.z80
                    > USED AT LINE 238 IN core-alu.z80
                    > USED AT LINE 242 IN core-alu.z80
                    > USED AT LINE 5 IN core-compiler.z80
                    > USED AT LINE 57 IN core-compiler.z80
                    > USED AT LINE 68 IN core-compiler.z80
                    > USED AT LINE 85 IN core-compiler.z80
                    > USED AT LINE 87 IN core-compiler.z80
                    > USED AT LINE 93 IN core-compiler.z80
                    > USED AT LINE 19 IN core-control.z80
                    > USED AT LINE 30 IN core-control.z80
                    > USED AT LINE 35 IN core-format.z80
                    > USED AT LINE 43 IN core-format.z80
                    > USED AT LINE 82 IN core-format.z80
                    > USED AT LINE 7 IN core-interpret.z80
                    > USED AT LINE 18 IN core-interpret.z80
                    > USED AT LINE 24 IN core-interpret.z80
                    > USED AT LINE 28 IN core-interpret.z80
                    > USED AT LINE 33 IN core-interpret.z80
                    > USED AT LINE 51 IN core-interpret.z80
                    > USED AT LINE 53 IN core-interpret.z80
                    > USED AT LINE 58 IN core-interpret.z80
                    > USED AT LINE 70 IN core-interpret.z80
                    > USED AT LINE 73 IN core-interpret.z80
                    > USED AT LINE 136 IN core-interpret.z80
                    > USED AT LINE 148 IN core-interpret.z80
                    > USED AT LINE 150 IN core-interpret.z80
                    > USED AT LINE 157 IN core-interpret.z80
                    > USED AT LINE 168 IN core-interpret.z80
                    > USED AT LINE 173 IN core-interpret.z80
                    > USED AT LINE 175 IN core-interpret.z80
                    > USED AT LINE 216 IN core-interpret.z80
                    > USED AT LINE 226 IN core-interpret.z80
                    > USED AT LINE 232 IN core-interpret.z80
                    > USED AT LINE 248 IN core-interpret.z80
                    > USED AT LINE 266 IN core-interpret.z80
                    > USED AT LINE 63 IN core-io.z80
                    > USED AT LINE 76 IN core-io.z80
                    > USED AT LINE 168 IN core-io.z80
                    > USED AT LINE 187 IN core-io.z80
                    > USED AT LINE 204 IN core-io.z80
                    > USED AT LINE 206 IN core-io.z80
                    > USED AT LINE 219 IN core-io.z80
                    > USED AT LINE 222 IN core-io.z80
                    > USED AT LINE 132 IN core-memory.z80
                    > USED AT LINE 172 IN core-memory.z80
                    > USED AT LINE 195 IN core-memory.z80
                    > USED AT LINE 55 IN core-stacks.z80
                    > USED AT LINE 38 IN core-utils.z80
                    > USED AT LINE 75 IN core-utils.z80
                    > USED AT LINE 79 IN core-utils.z80
                    > USED AT LINE 81 IN core-utils.z80
                    > USED AT LINE 86 IN core-utils.z80
                    > USED AT LINE 95 IN core-utils.z80
                    > USED AT LINE 110 IN core-utils.z80
                    > USED AT LINE 114 IN core-utils.z80
                    > USED AT LINE 121 IN core-utils.z80
BRAN:               0E2E DEFINED AT LINE 49
                    > USED AT LINE 24 IN core-control.z80
                    > USED AT LINE 37 IN core-control.z80
                    > USED AT LINE 36 IN core-format.z80
                    > USED AT LINE 37 IN core-interpret.z80
                    > USED AT LINE 77 IN core-interpret.z80
                    > USED AT LINE 132 IN core-interpret.z80
                    > USED AT LINE 152 IN core-interpret.z80
                    > USED AT LINE 154 IN core-interpret.z80
                    > USED AT LINE 159 IN core-interpret.z80
                    > USED AT LINE 268 IN core-interpret.z80
                    > USED AT LINE 95 IN core-io.z80
                    > USED AT LINE 106 IN core-io.z80
                    > USED AT LINE 224 IN core-io.z80
                    > USED AT LINE 228 IN core-io.z80
                    > USED AT LINE 25 IN core-kernel.z80
                    > USED AT LINE 50 IN core-kernel.z80
                    > USED AT LINE 142 IN core-memory.z80
                    > USED AT LINE 157 IN core-memory.z80
                    > USED AT LINE 169 IN core-memory.z80
                    > USED AT LINE 5 IN core-utils.z80
                    > USED AT LINE 18 IN core-utils.z80
                    > USED AT LINE 40 IN core-utils.z80
                    > USED AT LINE 52 IN core-utils.z80
                    > USED AT LINE 83 IN core-utils.z80
                    > USED AT LINE 116 IN core-utils.z80
THROWX:             0E36 DEFINED AT LINE 11
                    > USED AT LINE 191 IN core-alu.z80
                    > USED AT LINE 194 IN core-alu.z80
STORE:              0E3E DEFINED AT LINE 11
                    > USED AT LINE 19 IN core-compiler.z80
                    > USED AT LINE 45 IN core-compiler.z80
                    > USED AT LINE 75 IN core-compiler.z80
                    > USED AT LINE 50 IN core-interpret.z80
                    > USED AT LINE 91 IN core-memory.z80
                    > USED AT LINE 97 IN core-memory.z80
AT:                 0E48 DEFINED AT LINE 11
                    > USED AT LINE 50 IN core-compiler.z80
                    > USED AT LINE 73 IN core-compiler.z80
                    > USED AT LINE 86 IN core-compiler.z80
                    > USED AT LINE 101 IN core-compiler.z80
                    > USED AT LINE 134 IN core-compiler.z80
                    > USED AT LINE 47 IN core-does.z80
                    > USED AT LINE 22 IN core-format.z80
                    > USED AT LINE 28 IN core-format.z80
                    > USED AT LINE 16 IN core-interpret.z80
                    > USED AT LINE 68 IN core-interpret.z80
                    > USED AT LINE 69 IN core-interpret.z80
                    > USED AT LINE 92 IN core-interpret.z80
                    > USED AT LINE 104 IN core-interpret.z80
                    > USED AT LINE 115 IN core-interpret.z80
                    > USED AT LINE 146 IN core-interpret.z80
                    > USED AT LINE 147 IN core-interpret.z80
                    > USED AT LINE 149 IN core-interpret.z80
                    > USED AT LINE 172 IN core-interpret.z80
                    > USED AT LINE 192 IN core-interpret.z80
                    > USED AT LINE 227 IN core-interpret.z80
                    > USED AT LINE 56 IN core-io.z80
                    > USED AT LINE 69 IN core-io.z80
                    > USED AT LINE 167 IN core-io.z80
                    > USED AT LINE 181 IN core-io.z80
                    > USED AT LINE 30 IN core-kernel.z80
                    > USED AT LINE 103 IN core-memory.z80
                    > USED AT LINE 114 IN core-memory.z80
                    > USED AT LINE 131 IN core-memory.z80
                    > USED AT LINE 30 IN core-utils.z80
                    > USED AT LINE 74 IN core-utils.z80
                    > USED AT LINE 78 IN core-utils.z80
                    > USED AT LINE 118 IN core-utils.z80
CSTOR:              0E50 DEFINED AT LINE 11
                    > USED AT LINE 198 IN core-io.z80
                    > USED AT LINE 145 IN core-memory.z80
                    > USED AT LINE 159 IN core-memory.z80
                    > USED AT LINE 187 IN core-memory.z80
CAT:                0E58 DEFINED AT LINE 11
                    > USED AT LINE 67 IN core-compiler.z80
                    > USED AT LINE 17 IN core-interpret.z80
                    > USED AT LINE 22 IN core-interpret.z80
                    > USED AT LINE 108 IN core-io.z80
                    > USED AT LINE 109 IN core-memory.z80
                    > USED AT LINE 7 IN core-utils.z80
                    > USED AT LINE 20 IN core-utils.z80
RAT:                0E60 DEFINED AT LINE 11
                    > USED AT LINE 239 IN core-alu.z80
                    > USED AT LINE 23 IN core-interpret.z80
                    > USED AT LINE 32 IN core-interpret.z80
                    > USED AT LINE 133 IN core-interpret.z80
                    > USED AT LINE 134 IN core-interpret.z80
                    > USED AT LINE 131 IN core-io.z80
                    > USED AT LINE 145 IN core-memory.z80
                    > USED AT LINE 54 IN core-utils.z80
RPAT:               0E6A DEFINED AT LINE 11
                    > USED AT LINE 185 IN core-interpret.z80
RPSTO:              0E72 DEFINED AT LINE 11
SPAT:               0E7A DEFINED AT LINE 11
                    > USED AT LINE 184 IN core-interpret.z80
                    > USED AT LINE 84 IN core-stacks.z80
                    > USED AT LINE 89 IN core-stacks.z80
SPSTO:              0E84 DEFINED AT LINE 11
PSTOR:              0E8C DEFINED AT LINE 11
                    > USED AT LINE 13 IN core-compiler.z80
DSTOR:              0E9E DEFINED AT LINE 11
DAT:                0EAE DEFINED AT LINE 11
COUNT:              0EBE DEFINED AT LINE 11
                    > USED AT LINE 44 IN core-compiler.z80
                    > USED AT LINE 59 IN core-compiler.z80
                    > USED AT LINE 143 IN core-io.z80
                    > USED AT LINE 96 IN core-utils.z80
HERE:               0ED0 DEFINED AT LINE 11
                    > USED AT LINE 18 IN core-compiler.z80
                    > USED AT LINE 71 IN core-compiler.z80
                    > USED AT LINE 9 IN core-control.z80
                    > USED AT LINE 43 IN core-control.z80
                    > USED AT LINE 48 IN core-control.z80
                    > USED AT LINE 121 IN core-interpret.z80
                    > USED AT LINE 119 IN core-memory.z80
PAD:                0EDA DEFINED AT LINE 11
                    > USED AT LINE 17 IN core-format.z80
                    > USED AT LINE 52 IN core-format.z80
TIB:                0EE8 DEFINED AT LINE 11
                    > USED AT LINE 91 IN core-interpret.z80
                    > USED AT LINE 240 IN core-io.z80
ATEXE:              0EF4 DEFINED AT LINE 49
                    > USED AT LINE 92 IN core-compiler.z80
                    > USED AT LINE 231 IN core-interpret.z80
                    > USED AT LINE 267 IN core-interpret.z80
                    > USED AT LINE 226 IN core-io.z80
                    > USED AT LINE 235 IN core-io.z80
EXE1:               0F02 DEFINED AT LINE 134 IN core-memory.z80
                    > USED AT LINE 132 IN core-memory.z80
CMOVE:              0F04 DEFINED AT LINE 11
                    > USED AT LINE 188 IN core-memory.z80
CMOV1:              0F0E DEFINED AT LINE 143 IN core-memory.z80
                    > USED AT LINE 149 IN core-memory.z80
CMOV2:              0F26 DEFINED AT LINE 148 IN core-memory.z80
                    > USED AT LINE 142 IN core-memory.z80
FILL:               0F2E DEFINED AT LINE 11
FILL1:              0F3C DEFINED AT LINE 158 IN core-memory.z80
                    > USED AT LINE 161 IN core-memory.z80
FILL2:              0F46 DEFINED AT LINE 160 IN core-memory.z80
                    > USED AT LINE 157 IN core-memory.z80
DTRAI:              0F4E DEFINED AT LINE 11
DTRA1:              0F58 DEFINED AT LINE 170 IN core-memory.z80
                    > USED AT LINE 175 IN core-memory.z80
DTRA2:              0F72 DEFINED AT LINE 174 IN core-memory.z80
                    > USED AT LINE 169 IN core-memory.z80
                    > USED AT LINE 172 IN core-memory.z80
PACKS:              0F7C DEFINED AT LINE 11
                    > USED AT LINE 116 IN core-interpret.z80
ALGND:              0FB6 DEFINED AT LINE 11
                    > USED AT LINE 71 IN core-compiler.z80
                    > USED AT LINE 132 IN core-io.z80
                    > USED AT LINE 182 IN core-memory.z80
ALGN1:              0FD6 DEFINED AT LINE 197 IN core-memory.z80
                    > USED AT LINE 195 IN core-memory.z80
ERR_DIVZERO:        0FDA DEFINED AT LINE 3 IN core-messages.z80
                    > USED AT LINE 190 IN core-alu.z80
ERR_OUTOFRANGE:     0FE2 DEFINED AT LINE 4 IN core-messages.z80
                    > USED AT LINE 193 IN core-alu.z80
TOR:                0FEE DEFINED AT LINE 11
                    > USED AT LINE 65 IN core-alu.z80
                    > USED AT LINE 235 IN core-alu.z80
                    > USED AT LINE 237 IN core-alu.z80
                    > USED AT LINE 309 IN core-alu.z80
                    > USED AT LINE 32 IN core-compiler.z80
                    > USED AT LINE 4 IN core-control.z80
                    > USED AT LINE 64 IN core-does.z80
                    > USED AT LINE 57 IN core-format.z80
                    > USED AT LINE 5 IN core-interpret.z80
                    > USED AT LINE 27 IN core-interpret.z80
                    > USED AT LINE 54 IN core-interpret.z80
                    > USED AT LINE 66 IN core-interpret.z80
                    > USED AT LINE 76 IN core-interpret.z80
                    > USED AT LINE 91 IN core-interpret.z80
                    > USED AT LINE 131 IN core-interpret.z80
                    > USED AT LINE 170 IN core-interpret.z80
                    > USED AT LINE 184 IN core-interpret.z80
                    > USED AT LINE 105 IN core-io.z80
                    > USED AT LINE 132 IN core-io.z80
                    > USED AT LINE 148 IN core-io.z80
                    > USED AT LINE 154 IN core-io.z80
                    > USED AT LINE 186 IN core-io.z80
                    > USED AT LINE 141 IN core-memory.z80
                    > USED AT LINE 144 IN core-memory.z80
                    > USED AT LINE 156 IN core-memory.z80
                    > USED AT LINE 168 IN core-memory.z80
                    > USED AT LINE 63 IN core-stacks.z80
                    > USED AT LINE 78 IN core-stacks.z80
                    > USED AT LINE 4 IN core-utils.z80
                    > USED AT LINE 17 IN core-utils.z80
                    > USED AT LINE 32 IN core-utils.z80
                    > USED AT LINE 51 IN core-utils.z80
RFROM:              0FFC DEFINED AT LINE 11
                    > USED AT LINE 67 IN core-alu.z80
                    > USED AT LINE 129 IN core-alu.z80
                    > USED AT LINE 241 IN core-alu.z80
                    > USED AT LINE 301 IN core-alu.z80
                    > USED AT LINE 31 IN core-compiler.z80
                    > USED AT LINE 36 IN core-does.z80
                    > USED AT LINE 47 IN core-does.z80
                    > USED AT LINE 11 IN core-interpret.z80
                    > USED AT LINE 39 IN core-interpret.z80
                    > USED AT LINE 39 IN core-interpret.z80
                    > USED AT LINE 43 IN core-interpret.z80
                    > USED AT LINE 44 IN core-interpret.z80
                    > USED AT LINE 61 IN core-interpret.z80
                    > USED AT LINE 63 IN core-interpret.z80
                    > USED AT LINE 79 IN core-interpret.z80
                    > USED AT LINE 83 IN core-interpret.z80
                    > USED AT LINE 83 IN core-interpret.z80
                    > USED AT LINE 85 IN core-interpret.z80
                    > USED AT LINE 93 IN core-interpret.z80
                    > USED AT LINE 137 IN core-interpret.z80
                    > USED AT LINE 155 IN core-interpret.z80
                    > USED AT LINE 160 IN core-interpret.z80
                    > USED AT LINE 171 IN core-interpret.z80
                    > USED AT LINE 176 IN core-interpret.z80
                    > USED AT LINE 177 IN core-interpret.z80
                    > USED AT LINE 186 IN core-interpret.z80
                    > USED AT LINE 187 IN core-interpret.z80
                    > USED AT LINE 193 IN core-interpret.z80
                    > USED AT LINE 194 IN core-interpret.z80
                    > USED AT LINE 195 IN core-interpret.z80
                    > USED AT LINE 131 IN core-io.z80
                    > USED AT LINE 155 IN core-io.z80
                    > USED AT LINE 147 IN core-memory.z80
                    > USED AT LINE 173 IN core-memory.z80
                    > USED AT LINE 42 IN core-utils.z80
                    > USED AT LINE 44 IN core-utils.z80
DUPP:               100A DEFINED AT LINE 11
                    > USED AT LINE 77 IN core-alu.z80
                    > USED AT LINE 233 IN core-alu.z80
                    > USED AT LINE 237 IN core-alu.z80
                    > USED AT LINE 18 IN core-compiler.z80
                    > USED AT LINE 31 IN core-compiler.z80
                    > USED AT LINE 56 IN core-compiler.z80
                    > USED AT LINE 67 IN core-compiler.z80
                    > USED AT LINE 70 IN core-compiler.z80
                    > USED AT LINE 74 IN core-compiler.z80
                    > USED AT LINE 23 IN core-format.z80
                    > USED AT LINE 34 IN core-format.z80
                    > USED AT LINE 57 IN core-format.z80
                    > USED AT LINE 9 IN core-interpret.z80
                    > USED AT LINE 11 IN core-interpret.z80
                    > USED AT LINE 27 IN core-interpret.z80
                    > USED AT LINE 41 IN core-interpret.z80
                    > USED AT LINE 76 IN core-interpret.z80
                    > USED AT LINE 144 IN core-interpret.z80
                    > USED AT LINE 146 IN core-interpret.z80
                    > USED AT LINE 147 IN core-interpret.z80
                    > USED AT LINE 149 IN core-interpret.z80
                    > USED AT LINE 162 IN core-interpret.z80
                    > USED AT LINE 167 IN core-interpret.z80
                    > USED AT LINE 265 IN core-interpret.z80
                    > USED AT LINE 75 IN core-io.z80
                    > USED AT LINE 108 IN core-io.z80
                    > USED AT LINE 197 IN core-io.z80
                    > USED AT LINE 203 IN core-io.z80
                    > USED AT LINE 220 IN core-io.z80
                    > USED AT LINE 102 IN core-memory.z80
                    > USED AT LINE 108 IN core-memory.z80
                    > USED AT LINE 144 IN core-memory.z80
                    > USED AT LINE 182 IN core-memory.z80
                    > USED AT LINE 183 IN core-memory.z80
                    > USED AT LINE 193 IN core-memory.z80
                    > USED AT LINE 55 IN core-stacks.z80
                    > USED AT LINE 56 IN core-stacks.z80
                    > USED AT LINE 7 IN core-utils.z80
                    > USED AT LINE 20 IN core-utils.z80
                    > USED AT LINE 78 IN core-utils.z80
                    > USED AT LINE 109 IN core-utils.z80
                    > USED AT LINE 118 IN core-utils.z80
DROP:               100E DEFINED AT LINE 11
                    > USED AT LINE 50 IN core-alu.z80
                    > USED AT LINE 96 IN core-alu.z80
                    > USED AT LINE 104 IN core-alu.z80
                    > USED AT LINE 114 IN core-alu.z80
                    > USED AT LINE 123 IN core-alu.z80
                    > USED AT LINE 148 IN core-alu.z80
                    > USED AT LINE 255 IN core-alu.z80
                    > USED AT LINE 295 IN core-alu.z80
                    > USED AT LINE 61 IN core-compiler.z80
                    > USED AT LINE 54 IN core-control.z80
                    > USED AT LINE 51 IN core-format.z80
                    > USED AT LINE 83 IN core-format.z80
                    > USED AT LINE 61 IN core-interpret.z80
                    > USED AT LINE 79 IN core-interpret.z80
                    > USED AT LINE 137 IN core-interpret.z80
                    > USED AT LINE 155 IN core-interpret.z80
                    > USED AT LINE 160 IN core-interpret.z80
                    > USED AT LINE 176 IN core-interpret.z80
                    > USED AT LINE 177 IN core-interpret.z80
                    > USED AT LINE 187 IN core-interpret.z80
                    > USED AT LINE 195 IN core-interpret.z80
                    > USED AT LINE 219 IN core-interpret.z80
                    > USED AT LINE 270 IN core-interpret.z80
                    > USED AT LINE 112 IN core-io.z80
                    > USED AT LINE 211 IN core-io.z80
                    > USED AT LINE 230 IN core-io.z80
                    > USED AT LINE 241 IN core-io.z80
                    > USED AT LINE 194 IN core-memory.z80
                    > USED AT LINE 68 IN core-stacks.z80
                    > USED AT LINE 68 IN core-stacks.z80
                    > USED AT LINE 11 IN core-utils.z80
                    > USED AT LINE 42 IN core-utils.z80
                    > USED AT LINE 44 IN core-utils.z80
                    > USED AT LINE 85 IN core-utils.z80
                    > USED AT LINE 87 IN core-utils.z80
                    > USED AT LINE 89 IN core-utils.z80
                    > USED AT LINE 122 IN core-utils.z80
SWAP:               1012 DEFINED AT LINE 11
                    > USED AT LINE 96 IN core-alu.z80
                    > USED AT LINE 112 IN core-alu.z80
                    > USED AT LINE 119 IN core-alu.z80
                    > USED AT LINE 121 IN core-alu.z80
                    > USED AT LINE 148 IN core-alu.z80
                    > USED AT LINE 243 IN core-alu.z80
                    > USED AT LINE 260 IN core-alu.z80
                    > USED AT LINE 314 IN core-alu.z80
                    > USED AT LINE 48 IN core-control.z80
                    > USED AT LINE 59 IN core-control.z80
                    > USED AT LINE 64 IN core-control.z80
                    > USED AT LINE 12 IN core-format.z80
                    > USED AT LINE 19 IN core-interpret.z80
                    > USED AT LINE 20 IN core-interpret.z80
                    > USED AT LINE 23 IN core-interpret.z80
                    > USED AT LINE 29 IN core-interpret.z80
                    > USED AT LINE 32 IN core-interpret.z80
                    > USED AT LINE 36 IN core-interpret.z80
                    > USED AT LINE 65 IN core-interpret.z80
                    > USED AT LINE 144 IN core-interpret.z80
                    > USED AT LINE 156 IN core-interpret.z80
                    > USED AT LINE 194 IN core-interpret.z80
                    > USED AT LINE 211 IN core-io.z80
                    > USED AT LINE 90 IN core-memory.z80
                    > USED AT LINE 91 IN core-memory.z80
                    > USED AT LINE 96 IN core-memory.z80
                    > USED AT LINE 103 IN core-memory.z80
                    > USED AT LINE 109 IN core-memory.z80
                    > USED AT LINE 156 IN core-memory.z80
                    > USED AT LINE 188 IN core-memory.z80
                    > USED AT LINE 63 IN core-stacks.z80
                    > USED AT LINE 85 IN core-utils.z80
                    > USED AT LINE 87 IN core-utils.z80
OVER:               101A DEFINED AT LINE 11
                    > USED AT LINE 128 IN core-alu.z80
                    > USED AT LINE 250 IN core-alu.z80
                    > USED AT LINE 59 IN core-compiler.z80
                    > USED AT LINE 65 IN core-does.z80
                    > USED AT LINE 52 IN core-format.z80
                    > USED AT LINE 17 IN core-interpret.z80
                    > USED AT LINE 22 IN core-interpret.z80
                    > USED AT LINE 56 IN core-interpret.z80
                    > USED AT LINE 65 IN core-interpret.z80
                    > USED AT LINE 82 IN core-interpret.z80
                    > USED AT LINE 85 IN core-interpret.z80
                    > USED AT LINE 133 IN core-interpret.z80
                    > USED AT LINE 134 IN core-interpret.z80
                    > USED AT LINE 155 IN core-io.z80
                    > USED AT LINE 186 IN core-io.z80
                    > USED AT LINE 198 IN core-io.z80
                    > USED AT LINE 216 IN core-io.z80
                    > USED AT LINE 230 IN core-io.z80
                    > USED AT LINE 90 IN core-memory.z80
                    > USED AT LINE 96 IN core-memory.z80
                    > USED AT LINE 171 IN core-memory.z80
                    > USED AT LINE 183 IN core-memory.z80
                    > USED AT LINE 185 IN core-memory.z80
                    > USED AT LINE 73 IN core-stacks.z80
                    > USED AT LINE 73 IN core-stacks.z80
                    > USED AT LINE 16 IN core-utils.z80
QDUP:               1022 DEFINED AT LINE 11
                    > USED AT LINE 84 IN core-compiler.z80
                    > USED AT LINE 135 IN core-interpret.z80
                    > USED AT LINE 172 IN core-interpret.z80
                    > USED AT LINE 174 IN core-interpret.z80
                    > USED AT LINE 225 IN core-interpret.z80
                    > USED AT LINE 131 IN core-memory.z80
                    > USED AT LINE 94 IN core-utils.z80
                    > USED AT LINE 113 IN core-utils.z80
QDUP1:              102E DEFINED AT LINE 57 IN core-stacks.z80
ROT:                1030 DEFINED AT LINE 11
                    > USED AT LINE 78 IN core-stacks.z80
                    > USED AT LINE 35 IN core-utils.z80
                    > USED AT LINE 35 IN core-utils.z80
DDROP:              103E DEFINED AT LINE 11
                    > USED AT LINE 43 IN core-interpret.z80
                    > USED AT LINE 77 IN core-io.z80
                    > USED AT LINE 150 IN core-memory.z80
                    > USED AT LINE 162 IN core-memory.z80
DDUP:               1048 DEFINED AT LINE 11
                    > USED AT LINE 94 IN core-alu.z80
                    > USED AT LINE 103 IN core-alu.z80
                    > USED AT LINE 111 IN core-alu.z80
                    > USED AT LINE 119 IN core-alu.z80
                    > USED AT LINE 300 IN core-alu.z80
                    > USED AT LINE 218 IN core-io.z80
                    > USED AT LINE 159 IN core-memory.z80
                    > USED AT LINE 187 IN core-memory.z80
                    > USED AT LINE 76 IN core-utils.z80
                    > USED AT LINE 80 IN core-utils.z80
TWOSWAP:            1052 DEFINED AT LINE 11
PICK:               1060 DEFINED AT LINE 11
                    > USED AT LINE 54 IN core-utils.z80
DEPTH:              1074 DEFINED AT LINE 11
                    > USED AT LINE 256 IN core-interpret.z80
                    > USED AT LINE 50 IN core-utils.z80
SZERO:              108A DEFINED AT LINE 11
                    > USED AT LINE 30 IN core-kernel.z80
                    > USED AT LINE 89 IN core-stacks.z80
RZERO:              1092 DEFINED AT LINE 11
TQKEY:              109A DEFINED AT LINE 49
                    > USED AT LINE 56 IN core-io.z80
TEMIT:              10A2 DEFINED AT LINE 49
                    > USED AT LINE 69 IN core-io.z80
TEXPE:              10AA DEFINED AT LINE 49
                    > USED AT LINE 235 IN core-io.z80
TTAP:               10B2 DEFINED AT LINE 49
                    > USED AT LINE 226 IN core-io.z80
TECHO:              10BA DEFINED AT LINE 49
                    > USED AT LINE 189 IN core-io.z80
                    > USED AT LINE 197 IN core-io.z80
TPROM:              10C2 DEFINED AT LINE 49
                    > USED AT LINE 270 IN core-interpret.z80
BASE:               10CA DEFINED AT LINE 11
                    > USED AT LINE 28 IN core-format.z80
                    > USED AT LINE 16 IN core-interpret.z80
                    > USED AT LINE 29 IN core-interpret.z80
                    > USED AT LINE 44 IN core-interpret.z80
                    > USED AT LINE 167 IN core-io.z80
                    > USED AT LINE 30 IN core-utils.z80
TEMP:               10D2 DEFINED AT LINE 11
                    > USED AT LINE 50 IN core-interpret.z80
                    > USED AT LINE 68 IN core-interpret.z80
                    > USED AT LINE 69 IN core-interpret.z80
                    > USED AT LINE 153 IN core-interpret.z80
SPAN:               10DA DEFINED AT LINE 49
INN:                10E2 DEFINED AT LINE 11
NTIB:               10EA DEFINED AT LINE 49
                    > USED AT LINE 92 IN core-interpret.z80
                    > USED AT LINE 104 IN core-interpret.z80
                    > USED AT LINE 125 IN core-memory.z80
CSP:                10F2 DEFINED AT LINE 49
TEVAL:              10FA DEFINED AT LINE 49
                    > USED AT LINE 267 IN core-interpret.z80
TNUMB:              1102 DEFINED AT LINE 49
                    > USED AT LINE 92 IN core-compiler.z80
                    > USED AT LINE 231 IN core-interpret.z80
HLD:                110A DEFINED AT LINE 49
                    > USED AT LINE 17 IN core-format.z80
                    > USED AT LINE 22 IN core-format.z80
                    > USED AT LINE 23 IN core-format.z80
                    > USED AT LINE 51 IN core-format.z80
HANDL:              1112 DEFINED AT LINE 49
                    > USED AT LINE 185 IN core-interpret.z80
                    > USED AT LINE 186 IN core-interpret.z80
                    > USED AT LINE 192 IN core-interpret.z80
                    > USED AT LINE 193 IN core-interpret.z80
CNTXT:              111A DEFINED AT LINE 49
                    > USED AT LINE 167 IN core-interpret.z80
CRRNT:              1122 DEFINED AT LINE 49
                    > USED AT LINE 73 IN core-compiler.z80
                    > USED AT LINE 72 IN core-utils.z80
CP:                 112A DEFINED AT LINE 49
                    > USED AT LINE 13 IN core-compiler.z80
                    > USED AT LINE 19 IN core-compiler.z80
                    > USED AT LINE 45 IN core-compiler.z80
                    > USED AT LINE 114 IN core-memory.z80
NP:                 1132 DEFINED AT LINE 49
                    > USED AT LINE 115 IN core-interpret.z80
LAST:               113A DEFINED AT LINE 11
                    > USED AT LINE 50 IN core-compiler.z80
                    > USED AT LINE 70 IN core-compiler.z80
                    > USED AT LINE 101 IN core-compiler.z80
                    > USED AT LINE 134 IN core-compiler.z80
VFRTH:              1142 DEFINED AT LINE 49
UTYPE:              114A DEFINED AT LINE 11
                    > USED AT LINE 97 IN core-utils.z80
UTYP1:              1154 DEFINED AT LINE 6 IN core-utils.z80
                    > USED AT LINE 10 IN core-utils.z80
UTYP2:              1162 DEFINED AT LINE 9 IN core-utils.z80
                    > USED AT LINE 5 IN core-utils.z80
DMP:                116A DEFINED AT LINE 49
PDUM1:              117E DEFINED AT LINE 19 IN core-utils.z80
                    > USED AT LINE 23 IN core-utils.z80
PDUM2:              118E DEFINED AT LINE 22 IN core-utils.z80
                    > USED AT LINE 18 IN core-utils.z80
DUMP:               1194 DEFINED AT LINE 11
DUMP1:              11A8 DEFINED AT LINE 33 IN core-utils.z80
                    > USED AT LINE 39 IN core-utils.z80
DUMP2:              11CC DEFINED AT LINE 41 IN core-utils.z80
                    > USED AT LINE 38 IN core-utils.z80
DUMP3:              11D0 DEFINED AT LINE 43 IN core-utils.z80
                    > USED AT LINE 40 IN core-utils.z80
DOTS:               11DA DEFINED AT LINE 11
DOTS1:              11E8 DEFINED AT LINE 53 IN core-utils.z80
                    > USED AT LINE 56 IN core-utils.z80
DOTS2:              11EE DEFINED AT LINE 55 IN core-utils.z80
                    > USED AT LINE 52 IN core-utils.z80
TNAME:              11FC DEFINED AT LINE 11
                    > USED AT LINE 111 IN core-utils.z80
TNAM1:              1202 DEFINED AT LINE 73 IN core-utils.z80
                    > USED AT LINE 86 IN core-utils.z80
TNAM2:              120E DEFINED AT LINE 77 IN core-utils.z80
                    > USED AT LINE 83 IN core-utils.z80
TNAM3:              1226 DEFINED AT LINE 84 IN core-utils.z80
                    > USED AT LINE 79 IN core-utils.z80
                    > USED AT LINE 81 IN core-utils.z80
TNAM4:              123A DEFINED AT LINE 88 IN core-utils.z80
                    > USED AT LINE 75 IN core-utils.z80
DOTID:              1242 DEFINED AT LINE 11
                    > USED AT LINE 115 IN core-utils.z80
DOTI1:              1258 DEFINED AT LINE 98 IN core-utils.z80
                    > USED AT LINE 95 IN core-utils.z80
SEE:                1266 DEFINED AT LINE 11
SEE1:               1270 DEFINED AT LINE 108 IN core-utils.z80
                    > USED AT LINE 121 IN core-utils.z80
SEE2:               127E DEFINED AT LINE 112 IN core-utils.z80
                    > USED AT LINE 110 IN core-utils.z80
SEE3:               128C DEFINED AT LINE 117 IN core-utils.z80
                    > USED AT LINE 114 IN core-utils.z80
SEE4:               1292 DEFINED AT LINE 119 IN core-utils.z80
                    > USED AT LINE 116 IN core-utils.z80
SPP:                2200 DEFINED AT LINE 3 IN variables.z80
                    > USED AT LINE 45
                    > USED AT LINE 5 IN defaults.z80
TIBB:               2200 DEFINED AT LINE 4 IN variables.z80
                    > USED AT LINE 18 IN defaults.z80
                    > USED AT LINE 31 IN core-kernel.z80
RPP:                2400 DEFINED AT LINE 6 IN variables.z80
                    > USED AT LINE 53
                    > USED AT LINE 6 IN defaults.z80
UPP:                2400 DEFINED AT LINE 7 IN variables.z80
                    > USED AT LINE 49
                    > USED AT LINE 42 IN core-does.z80
VARSZERO:           2400 DEFINED AT LINE 9 IN variables.z80
VARRZERO:           2402 DEFINED AT LINE 10 IN variables.z80
VARTQKEY:           2404 DEFINED AT LINE 11 IN variables.z80
VARTEMIT:           2406 DEFINED AT LINE 12 IN variables.z80
VARTEXPE:           2408 DEFINED AT LINE 13 IN variables.z80
VARTTAP:            240A DEFINED AT LINE 14 IN variables.z80
VARTECHO:           240C DEFINED AT LINE 15 IN variables.z80
VARTPROM:           240E DEFINED AT LINE 16 IN variables.z80
VARBASE:            2410 DEFINED AT LINE 17 IN variables.z80
VARTEMP:            2412 DEFINED AT LINE 18 IN variables.z80
VARSPAN:            2414 DEFINED AT LINE 19 IN variables.z80
VARINN:             2416 DEFINED AT LINE 20 IN variables.z80
VARNTIB:            2418 DEFINED AT LINE 21 IN variables.z80
VARTIB:             241A DEFINED AT LINE 22 IN variables.z80
VARCSP:             241C DEFINED AT LINE 23 IN variables.z80
VARTEVAL:           241E DEFINED AT LINE 24 IN variables.z80
VARTNUMB:           2420 DEFINED AT LINE 25 IN variables.z80
VARHLD:             2422 DEFINED AT LINE 26 IN variables.z80
VARHANDL:           2424 DEFINED AT LINE 27 IN variables.z80
VARCNTXT:           2426 DEFINED AT LINE 28 IN variables.z80
VARVOCABS:          2428 DEFINED AT LINE 29 IN variables.z80
VARCRRNT:           242A DEFINED AT LINE 30 IN variables.z80
VARVOCABLP:         242C DEFINED AT LINE 31 IN variables.z80
VARCP:              242E DEFINED AT LINE 32 IN variables.z80
VARNP:              2430 DEFINED AT LINE 33 IN variables.z80
VARLAST:            2432 DEFINED AT LINE 34 IN variables.z80
VARVFRTH:           2434 DEFINED AT LINE 35 IN variables.z80
VARVOCABL:          2436 DEFINED AT LINE 36 IN variables.z80
SERINPTR:           2438 DEFINED AT LINE 38 IN variables.z80
                    > USED AT LINE 16 IN interrupt.z80
                    > USED AT LINE 22 IN interrupt.z80
                    > USED AT LINE 7 IN serial.z80
SERRDPTR:           243A DEFINED AT LINE 39 IN variables.z80
                    > USED AT LINE 8 IN serial.z80
                    > USED AT LINE 22 IN serial.z80
                    > USED AT LINE 30 IN serial.z80
SERBUFUSED:         243C DEFINED AT LINE 40 IN variables.z80
                    > USED AT LINE 10 IN interrupt.z80
                    > USED AT LINE 25 IN interrupt.z80
                    > USED AT LINE 27 IN interrupt.z80
                    > USED AT LINE 10 IN serial.z80
                    > USED AT LINE 18 IN serial.z80
                    > USED AT LINE 31 IN serial.z80
                    > USED AT LINE 33 IN serial.z80
                    > USED AT LINE 55 IN serial.z80
SERBUF:             243E DEFINED AT LINE 41 IN variables.z80
                    > USED AT LINE 19 IN interrupt.z80
                    > USED AT LINE 21 IN interrupt.z80
                    > USED AT LINE 6 IN serial.z80
                    > USED AT LINE 25 IN serial.z80
                    > USED AT LINE 27 IN serial.z80
VECTAB:             247D DEFINED AT LINE 43 IN variables.z80
VRST08:             247D DEFINED AT LINE 44 IN variables.z80
                    > USED AT LINE 12
VRST10:             247F DEFINED AT LINE 45 IN variables.z80
                    > USED AT LINE 16
VRST18:             2481 DEFINED AT LINE 46 IN variables.z80
                    > USED AT LINE 20
VRST20:             2483 DEFINED AT LINE 47 IN variables.z80
                    > USED AT LINE 24
VRST28:             2485 DEFINED AT LINE 48 IN variables.z80
                    > USED AT LINE 28
VRST30:             2487 DEFINED AT LINE 49 IN variables.z80
                    > USED AT LINE 32
VINT:               2489 DEFINED AT LINE 50 IN variables.z80
                    > USED AT LINE 36
                    > USED AT LINE 44
VNMI:               248B DEFINED AT LINE 51 IN variables.z80
                    > USED AT LINE 40
CPP:                248D DEFINED AT LINE 53 IN variables.z80
                    > USED AT LINE 28 IN defaults.z80
NPP:                FFFE DEFINED AT LINE 55 IN variables.z80
                    > USED AT LINE 29 IN defaults.z80

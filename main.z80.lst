0000                          .ENGINE   mycomputer   
0000                TESTMODE:   EQU   0   
0000                MEM_SIZE:   EQU   $10000   ; MEM is 64K
0000                ROM_SIZE:   EQU   $2000   ; ROM is 8K
0000                RAM_SIZE:   EQU   MEM_SIZE - ROM_SIZE   ; RAM is 64K - 8K
0000                START_ROM:   EQU   BM   ; inclusive
0000                END_ROM:   EQU   BM + ROM_SIZE   ; exclusive
0000                START_RAM:   EQU   BM + ROM_SIZE   ; inclusive
0000                END_RAM:   EQU   START_RAM + RAM_SIZE   ; exclusive
0000                BM:       EQU   0   ; bottom of ROM memory
0000                EM:       EQU   BM + MEM_SIZE   
0000                COMPO:    EQU   $20   ;lexicon compile only bit
0000                IMEDD:    EQU   $40   ;lexicon immediate bit
0000                MASKK:    EQU   $1F   ;lexicon bit mask
0000                CHARR:    EQU   1   ;byte size of a character
0000                CELLL:    EQU   2   
0000                BASEE:    EQU   10   ;BASE
0000                VOCSS:    EQU   8   ;depth of vocabulary stack
0000                MAXCHAR:   EQU   0FFh   ;Extended character set					                    ;  Use 07Fh for ASCII only
0000                MAXSIGNED:   EQU   07FFFh   ;max value of signed integer
0000                MAXUNSIGNED:   EQU   0FFFFh   ;max value of unsigned integer
0000                MAXNEGATIVE:   EQU   8000h   ;max value of negative integer
0000                BKSPP:    EQU   8   ;backspace
0000                LFF:      EQU   $0A   ;line feed
0000                CRR:      EQU   $0D   ;carriage return
0000                SPACEE:   EQU   $20   
0000                TIC:      EQU   $27   ;tick
0000                MINUSS:   EQU   $2D   
0000                UNDERSC:   EQU   $5F   
0000                CALLL:    EQU   $CD00   ; NOP followed by CALL opcodes
0000                US:       EQU   END_DEFAULTS - DEFAULTS   ;user area size
0000                RTS:      EQU   $100 * CELLL   ;return stack/TIB size
0000                DTS:      EQU   $100 * CELLL   ;data stack size
0000                RET_STACK_SIZE:   EQU   $100   
0000                DATA_STACK_SIZE:   EQU   $100   
0000                INT_ADDR:   EQU   $0038   
0000                SER_BUFSIZE:   EQU   $3F   
0000                SER_FULLSIZE:   EQU   $30   
0000                SER_EMPTYSIZE:   EQU   5   
0000                RTS_HIGH:   EQU   $D6   
0000                RTS_LOW:   EQU   $96   
0000                TRUEE:    EQU   -1   
0000                FALSEE:   EQU   0   
0000                             ; Initialize assembly variables
0000                VVCODE:   .SET   0   
0000                VVNAME:   .SET   END_ROM   
0000                VVLINK:   .SET   0   ;force a null link
0000                VVUSER:   .SET   0   ;first user variable offset
0000                .macro MCODE,aaLEX,aaNAME,aaLABEL
0000                             ; 
0000                 .align 2                                         ; force to cell boundary
0000                aaLABEL:                                              ; assembly label
0000                 vvCODE .set $
0000                 vvLEN  .set (aaLEX & 01FH) / CELLL              ; string cell count, round down
0000                 ORG vvNAME - ((vvLEN + 3) * CELLL)                                     ; ? needed
0000                 vvNAME .set $
0000                 DW vvCODE, vvLINK                               ; token pointer and link
0000                 vvLINK .set $                                   ; link points to a name string
0000                 DB aaLEX, aaNAME                                    ; name string
0000                 ORG vvCODE                                      ; restore code pointer
0000                .endm
0000                 
0000                .macro MCOLON,aaLEX,aaNAME,aaLABEL
0000                             ; 
0000                 mCODE aaLEX, aaNAME, aaLABEL
0000                 nop
0000                 CALL doLIST
0000                .endm
0000                 
0000                .macro MUSER,aaLEX,aaNAME,aaLABEL
0000                             ; 
0000                	mCODE aaLEX, aaNAME, aaLABEL
0000                 nop
0000                 CALL doLIST
0000                 DW DoUSE,vvUSER
0000                 vvUSER .set vvUSER + CELLL
0000                .endm
0000                 
0000                             ; .align 2
0000                .macro MDSTR,aaFUNC,aaSTR
0000                             ; 
0000                 DW aaFUNC                       ; function
0000                 vvLEN .set $                    ; save address of count byte
0000                 DB 0,aaSTR                      ; count byte and string
0000                 vvCODE .set $                   ; save code pointer
0000                ORG vvLEN                           ; point to count byte
0000                 DB vvCODE - vvLEN - 1           ; set count
0000                ORG vvCODE                          ; restore code pointer
0000                .endm
0000                 
0000                .macro HCODE,aaLEX,aaNAME,aaLABEL
0000                             ; 
0000                 .align 2                                         ; force to cell boundary
0000                aaLABEL:                                              ; assembly label
0000                .endm
0000                 
0000                .macro HCOLON,aaLEX,aaNAME,aaLABEL
0000                             ; 
0000                 hCODE aaLEX, aaNAME, aaLABEL
0000                 nop
0000                 CALL doLIST
0000                .endm
0000                 
0000                .macro HUSER,aaLEX,aaNAME,aaLABEL
0000                             ; 
0000                	hCODE aaLEX, aaNAME, aaLABEL
0000                 nop
0000                 CALL doLIST
0000                 DW DoUSE,vvUSER
0000                 vvUSER .set vvUSER + CELLL
0000                .endm
0000                 
0000                             ; 	LD	E,(HL)	                    ; 7t
0000                             ; 	INC	HL	                        ; 6t
0000                             ; 	LD	D,(HL)	                    ; 7t
0000                             ; 	INC	HL	                        ; 6t
0000                             ; 	EX	DE,HL	                    ; 4t
0000                             ; 	JP	(HL)	                    ; 4t
0000                .macro MNEXTHL,
0000                             ; 
0000                 JP (IY)
0000                .endm
0000                 
0000                .macro MNEXT,
0000                             ; 
0000                	EX	DE,HL	                    ; 4t
0000                 mNEXTHL                         ; 34t
0000                .endm
0000                 
0000                          .ORG   START_ROM   
0000   C3 6C 00     RESET:    JP   INIT   
0008                          .ORG   $08   
0008   FD 2A 7D 24  RST08:    LD   IY,(vRST08)   
000C   FD E9                  JP   (IY)   
0010                          .ORG   $10   
0010   FD 2A 7F 24  RST10:    LD   IY,(vRST10)   
0014   FD E9                  JP   (IY)   
0018                          .ORG   $18   
0018   FD 2A 81 24  RST18:    LD   IY,(vRST18)   
001C   FD E9                  JP   (IY)   
0020                          .ORG   $20   
0020   FD 2A 83 24  RST20:    LD   IY,(vRST20)   
0024   FD E9                  JP   (IY)   
0028                          .ORG   $28   
0028   FD 2A 85 24  RST28:    LD   IY,(vRST28)   
002C   FD E9                  JP   (IY)   
0030                          .ORG   $30   
0030   FD 2A 87 24  RST30:    LD   IY,(vRST30)   
0034   FD E9                  JP   (IY)   
0038                          .ORG   $38   
0038   FD 2A 89 24  RST38:    LD   IY,(vINT)   
003C   FD E9                  JP   (IY)   
0066                          .ORG   $66   
0066   FD 2A 8B 24  RST66:    LD   IY,(vNMI)   
006A   FD E9                  JP   (IY)   
006C                INIT:        
006C   21 93 00               LD   HL,SER_INTR   
006F   22 89 24               LD   (vINT),HL   
0072   21 00 22               LD   HL,SPP   ; Setup Forth data stack
0075   F9                     LD   SP,HL   ; also used as return stack by interrupts etc
0076   21 1A 01               LD   HL,DEFAULTS   ; initialize user variables with defaults
0079   11 45 24               LD   DE,UPP   
007C   01 3A 00               LD   BC,US   
007F   ED B0                  LDIR      
0081   DD 21 00 24            LD   IX,RPP   ; set up Forth return stack
0085   FD 21 B1 0D            LD   IY,NEXT_STEP   
0089   01 FF FF               LD   BC,-1   ; empty stack marker
008C   21 E0 0D               LD   HL,HI   
008F   CD AA 0D               CALL   CALL_FORTH   
0092   76                     HALT      
0093                          IF   TESTMODE   
                              JP   TESTS_START   
0093                          ELSE      
0093                          ENDIF      
0093   F5           SER_INTR:   PUSH   AF   
0094   E5                     PUSH   HL   
0095   DB 80                  IN   A,($80)   
0097   E6 01                  AND   $01   ; Check if interupt due to read buffer full
0099   28 2D                  JR   Z,rts0   ; if not, ignore
009B   DB 81                  IN   A,($81)   
009D   F5                     PUSH   AF   
009E   3A 43 24               LD   A,(serBufUsed)   
00A1   FE 3F                  CP   SER_BUFSIZE   ; If full then ignore
00A3   20 03                  JR   NZ,notFull   
00A5   F1                     POP   AF   
00A6   18 20                  JR   rts0   
00A8   2A 3F 24     NOTFULL:   LD   HL,(serInPtr)   
00AB   23                     INC   HL   
00AC   7D                     LD   A,L   ; Only need to check low byte becasuse buffer<256 bytes
00AD   FE 3F                  CP   (SERBUF+SER_BUFSIZE) & $FF   
00AF   20 03                  JR   NZ,notWrap   
00B1   21 00 24               LD   HL,SERBUF   
00B4   22 3F 24     NOTWRAP:   LD   (serInPtr),HL   
00B7   F1                     POP   AF   
00B8   77                     LD   (HL),A   
00B9   3A 43 24               LD   A,(serBufUsed)   
00BC   3C                     INC   A   
00BD   32 43 24               LD   (serBufUsed),A   
00C0   FE 30                  CP   SER_FULLSIZE   
00C2   38 04                  JR   C,rts0   
00C4   3E D6                  LD   A,RTS_HIGH   
00C6   D3 80                  OUT   ($80),A   
00C8   E1           RTS0:     POP   HL   
00C9   F1                     POP   AF   
00CA   FD 21 B1 0D            LD   IY,NEXT_STEP   
00CE   FB                     EI      
00CF   ED 4D                  RETI      
00D1                             ; Modified from code by Grant Searle
00D1                             ; Minimum 6850 ACIA interrupt driven serial I/O
00D1                INIT_IO:      
00D1   F3                     DI      ; Disable interrupts
00D2   21 00 24               LD   HL,SERBUF   
00D5   22 3F 24               LD   (serInPtr),HL   
00D8   22 41 24               LD   (serRdPtr),HL   
00DB   AF                     XOR   A   
00DC   32 43 24               LD   (serBufUsed),A   
00DF   3E 96                  LD   A,RTS_LOW   
00E1   D3 80                  OUT   ($80),A   ; Initialise ACIA
00E3   FB                     EI      
00E4   C9                     RET      
00E5                RXA:         
00E5   E5                     PUSH   HL   
00E6   2A 41 24               LD   HL,(serRdPtr)   
00E9   23                     INC   HL   
00EA   7D                     LD   A,L   ; Only need to check low byte becasuse buffer<256 bytes
00EB   FE 3F                  CP   (SERBUF+SER_BUFSIZE) & $FF   
00ED   20 03                  JR   NZ,RXA1   
00EF   21 00 24               LD   HL,SERBUF   
00F2                RXA1:        
00F2   F3                     DI      
00F3   22 41 24               LD   (serRdPtr),HL   
00F6   3A 43 24               LD   A,(serBufUsed)   
00F9   3D                     DEC   A   
00FA   32 43 24               LD   (serBufUsed),A   
00FD   FE 05                  CP   SER_EMPTYSIZE   
00FF   30 04                  JR   NC,RXA2   
0101   3E 96                  LD   A,RTS_LOW   
0103   D3 80                  OUT   ($80),A   
0105                RXA2:        
0105   7E                     LD   A,(HL)   
0106   FB                     EI      
0107   E1                     POP   HL   
0108   C9                     RET      ; Char ready in A
0109                TXA:         
0109   F5                     PUSH   AF   ; Store character
010A                TXA1:        
010A   DB 80                  IN   A,($80)   ; Status byte
010C   CB 4F                  BIT   1,A   ; Set Zero flag if still transmitting character
010E   28 FA                  JR   Z,TXA1   ; Loop until flag signals ready
0110   F1                     POP   AF   ; Retrieve character
0111   D3 81                  OUT   ($81),A   ; Output the character
0113   C9                     RET      
0114                QRXA:        
0114   3A 43 24               LD   A,(serBufUsed)   
0117   FE 00                  CP   $0   
0119   C9                     RET      
011A                             ; .align 2
011A                DEFAULTS:      
011A                UZERO:       
011A   00 22        DEFSZERO:   DW   SPP   ; SP0
011C   00 24        DEFRZERO:   DW   RPP   ; RP0
011E   6C 0B        DEFTQKEY:   DW   QRX   ; '?KEY
0120   84 0B        DEFTEMIT:   DW   TXSTO   ; 'EMIT
0122   44 0D        DEFTEXPE:   DW   ACCEP   ; 'EXPECT
0124   16 0D        DEFTTAP:   DW   KTAP   ; 'TAP
0126   84 0B        DEFTECHO:   DW   TXSTO   ; 'ECHO
0128   FC 0A        DEFTPROM:   DW   DOTOK   ; 'PROMPT
012A   0A 00        DEFBASE:   DW   BASEE   ; BASE
012C   00 00        DEFTEMP:   DW   0   ; tmp
012E   00 00        DEFSPAN:   DW   0   ; SPAN
0130   00 00        DEFINN:   DW   0   ; >IN
0132   00 00        DEFNTIB:   DW   0   ; #TIB
0134   00 22        DEFTIB:   DW   TIBB   ; TIB
0136   00 00        DEFCSP:   DW   0   ; CSP
0138   BA 0A        DEFTEVAL:   DW   INTER   ; 'EVAL
013A   9C 07        DEFTNUMB:   DW   NUMBQ   ; 'NUMBER
013C   00 00        DEFHLD:   DW   0   ; HLD
013E   00 00        DEFHANDL:   DW   0   ; HANDLER
0140   00 00        DEFCNTXT:   DW   0   ; CONTEXT pointer
0142   00 00        DEFVOCABS:   DW   0   ; vocabulary stack    ???
0144   00 00        DEFCRRENT:   DW   0   ; CURRENT pointer
0146   00 00        DEFVOCABLP:   DW   0   ; vocabulary link pointer ???
0148   8D 24        DEFCP:    DW   CPP   ; CP  for runing phase on RAM
014A   FE FF        DEFNP:    DW   NPP   ; NP  for runing phase on RAM
014C   16 14        DEFLAST:   DW   LASTN   ; LAST
014E   16 14        DEFVFRTH:   DW   LASTN   ; FORTH   \ mullti-user ???
0150   00 00        DEFVOCABL:   DW   0   ; vocabulary link       ???
0152   00 00        DEFCOLD:   DW   0   ; "COLD"
0154                ULAST:       
0154                END_DEFAULTS:      
0154                VVCODE:   .SET   $   
0154                             ;   0<          ( n -- t )
0154                             ;               Return true if n is negative.
0154                          ;*Macro unroll: mCODE	2,'0<', ZLESS
0154                          ALIGN   2   
0154                ZLESS:       
0154                VVCODE:   .SET   $   
0154                VVLEN:    .SET   (2 & 01FH) / CELLL   
1FF8                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FF8                VVNAME:   .SET   $   
1FF8   54 01 00 00            DW   vvCODE,vvLINK   
1FFC                VVLINK:   .SET   $   
1FFC   02 30 3C               DB   2,"0<"   
0154                          .ORG   vvCODE   
0154   CB 20                  SLA   B   ; sign bit -> cy flag
0156   9F                     SBC   A,A   ; propagate cy through A
0157   47                     LD   B,A   ; put 0000 or FFFF in TOS
0158   4F                     LD   C,A   
0159                          ;*Macro unroll: 	mNEXT
0159   EB                     EX   DE,HL   
015A                          ;*Macro unroll:  mNEXTHL                         ; 34t
015A   FD E9                  JP   (IY)   ; 34t
015C                             ;   AND         ( w w -- w )
015C                             ;               Bitwise AND.
015C                          ;*Macro unroll: mCODE	3, 'AND', ANDD
015C                          ALIGN   2   
015C                ANDD:        
015C                VVCODE:   .SET   $   
015C                VVLEN:    .SET   (3 & 01FH) / CELLL   
1FF0                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FF0                VVNAME:   .SET   $   
1FF0   5C 01 FC 1F            DW   vvCODE,vvLINK   
1FF4                VVLINK:   .SET   $   
1FF4   03 41 4E 44            DB   3,"AND"   
015C                          .ORG   vvCODE   
015C   E1                     POP   HL   
015D   78                     LD   A,B   
015E   A4                     AND   H   
015F   47                     LD   B,A   
0160   79                     LD   A,C   
0161   A5                     AND   L   
0162   4F                     LD   C,A   
0163                          ;*Macro unroll: 	mNEXT
0163   EB                     EX   DE,HL   
0164                          ;*Macro unroll:  mNEXTHL                         ; 34t
0164   FD E9                  JP   (IY)   ; 34t
0166                             ;   OR          ( w w -- w )
0166                             ;               Bitwise inclusive OR.
0166                          ;*Macro unroll: mCODE	2,'OR', ORR
0166                          ALIGN   2   
0166                ORR:         
0166                VVCODE:   .SET   $   
0166                VVLEN:    .SET   (2 & 01FH) / CELLL   
1FE8                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FE8                VVNAME:   .SET   $   
1FE8   66 01 F4 1F            DW   vvCODE,vvLINK   
1FEC                VVLINK:   .SET   $   
1FEC   02 4F 52               DB   2,"OR"   
0166                          .ORG   vvCODE   
0166   E1                     POP   HL   
0167   78                     LD   A,B   
0168   B4                     OR   H   
0169   47                     LD   B,A   
016A   79                     LD   A,C   
016B   B5                     OR   L   
016C   4F                     LD   C,A   
016D                          ;*Macro unroll: 	mNEXT
016D   EB                     EX   DE,HL   
016E                          ;*Macro unroll:  mNEXTHL                         ; 34t
016E   FD E9                  JP   (IY)   ; 34t
0170                             ;   XOR         ( w w -- w )
0170                             ;               Bitwise exclusive
0170                          ;*Macro unroll: mCODE	3, 'XOR', XORR
0170                          ALIGN   2   
0170                XORR:        
0170                VVCODE:   .SET   $   
0170                VVLEN:    .SET   (3 & 01FH) / CELLL   
1FE0                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FE0                VVNAME:   .SET   $   
1FE0   70 01 EC 1F            DW   vvCODE,vvLINK   
1FE4                VVLINK:   .SET   $   
1FE4   03 58 4F 52            DB   3,"XOR"   
0170                          .ORG   vvCODE   
0170   E1                     POP   HL   
0171   78                     LD   A,B   
0172   AC                     XOR   H   
0173   47                     LD   B,A   
0174   79                     LD   A,C   
0175   AD                     XOR   L   
0176   4F                     LD   C,A   
0177                          ;*Macro unroll: 	mNEXT
0177   EB                     EX   DE,HL   
0178                          ;*Macro unroll:  mNEXTHL                         ; 34t
0178   FD E9                  JP   (IY)   ; 34t
017A                             ;   +           ( w w -- sum )
017A                             ;               Add top two items.
017A                          ;*Macro unroll: mCOLON	1,'+', PLUS
017A                          ;*Macro unroll:  mCODE 1, "+", PLUS
017A                          ALIGN   2   
017A                PLUS:        
017A                VVCODE:   .SET   $   
017A                VVLEN:    .SET   (1 & 01FH) / CELLL   
1FDA                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FDA                VVNAME:   .SET   $   
1FDA   7A 01 E4 1F            DW   vvCODE,vvLINK   
1FDE                VVLINK:   .SET   $   
1FDE   01 2B                  DB   1,"+"   
017A                          .ORG   vvCODE   
017A   00                     NOP      
017B   CD 02 06               CALL   doLIST   
017E   52 02 1A 10 50 06      DW   UMPlus,DROP,EXIT   
0184                             ;   NOT         ( w -- w )
0184                             ;               One's complement of tos.
0184                          ;*Macro unroll: mCOLON  3, 'NOT', INVER
0184                          ;*Macro unroll:  mCODE 3, "NOT", INVER
0184                          ALIGN   2   
0184                INVER:       
0184                VVCODE:   .SET   $   
0184                VVLEN:    .SET   (3 & 01FH) / CELLL   
1FD2                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FD2                VVNAME:   .SET   $   
1FD2   84 01 DE 1F            DW   vvCODE,vvLINK   
1FD6                VVLINK:   .SET   $   
1FD6   03 4E 4F 54            DB   3,"NOT"   
0184                          .ORG   vvCODE   
0184   00                     NOP      
0185   CD 02 06               CALL   doLIST   
0188   10 06 FF FF 70 01 50 06 DW   DOLIT,-1,XORR,EXIT   
0190                             ;   NEGAT      ( n -- -n )
0190                             ;               Two's complement of tos.
0190                          ;*Macro unroll: mCOLON	6,'NEGATE',NEGAT
0190                          ;*Macro unroll:  mCODE 6, "NEGATE", NEGAT
0190                          ALIGN   2   
0190                NEGAT:       
0190                VVCODE:   .SET   $   
0190                VVLEN:    .SET   (6 & 01FH) / CELLL   
1FC6                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FC6                VVNAME:   .SET   $   
1FC6   90 01 D6 1F            DW   vvCODE,vvLINK   
1FCA                VVLINK:   .SET   $   
1FCA   06 4E 45 47 41 54 45   DB   6,"NEGATE"   
0190                          .ORG   vvCODE   
0190   00                     NOP      
0191   CD 02 06               CALL   doLIST   
0194   84 01 10 06 01 00 7A 01 50 06 DW   INVER,DOLIT,1,Plus,EXIT   
019E                             ;   DNEGATE     ( d -- -d )
019E                             ;               Two's complement of top double.
019E                          ;*Macro unroll: mCOLON	7,'DNEGATE',DNEGA
019E                          ;*Macro unroll:  mCODE 7, "DNEGATE", DNEGA
019E                          ALIGN   2   
019E                DNEGA:       
019E                VVCODE:   .SET   $   
019E                VVLEN:    .SET   (7 & 01FH) / CELLL   
1FBA                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FBA                VVNAME:   .SET   $   
1FBA   9E 01 CA 1F            DW   vvCODE,vvLINK   
1FBE                VVLINK:   .SET   $   
1FBE   07 44 4E 45 47 41 54 45 DB   7,"DNEGATE"   
019E                          .ORG   vvCODE   
019E   00                     NOP      
019F   CD 02 06               CALL   doLIST   
01A2   84 01 FA 0F 84 01      DW   INVER,ToR,INVER   
01A8   10 06 01 00 52 02      DW   DOLIT,1,UMPlus   
01AE   08 10 7A 01 50 06      DW   RFrom,Plus,EXIT   
01B4                             ;   -           ( n1 n2 -- n1-n2 )
01B4                             ;               Subtraction.
01B4                          ;*Macro unroll: mCOLON	1, '-', SUBB
01B4                          ;*Macro unroll:  mCODE 1, "-", SUBB
01B4                          ALIGN   2   
01B4                SUBB:        
01B4                VVCODE:   .SET   $   
01B4                VVLEN:    .SET   (1 & 01FH) / CELLL   
1FB4                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FB4                VVNAME:   .SET   $   
1FB4   B4 01 BE 1F            DW   vvCODE,vvLINK   
1FB8                VVLINK:   .SET   $   
1FB8   01 2D                  DB   1,"-"   
01B4                          .ORG   vvCODE   
01B4   00                     NOP      
01B5   CD 02 06               CALL   doLIST   
01B8   90 01 7A 01 50 06      DW   NEGAT,Plus,EXIT   
01BE                             ;   ABS         ( n -- n )
01BE                             ;               Return the absolute value of n.
01BE                          ;*Macro unroll: mCOLON	3,'ABS',ABSS
01BE                          ;*Macro unroll:  mCODE 3, "ABS", ABSS
01BE                          ALIGN   2   
01BE                ABSS:        
01BE                VVCODE:   .SET   $   
01BE                VVLEN:    .SET   (3 & 01FH) / CELLL   
1FAC                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FAC                VVNAME:   .SET   $   
1FAC   BE 01 B8 1F            DW   vvCODE,vvLINK   
1FB0                VVLINK:   .SET   $   
1FB0   03 41 42 53            DB   3,"ABS"   
01BE                          .ORG   vvCODE   
01BE   00                     NOP      
01BF   CD 02 06               CALL   doLIST   
01C2   16 10 54 01 46 0E CC 01 DW   DUPP,ZLESS,QBRAN,ABS1   
01CA   90 01                  DW   NEGAT   
01CC                ABS1:        
01CC   50 06                  DW   EXIT   
01CE                             ;   =           ( w w -- t )
01CE                             ;               Return true if top two are equal.
01CE                          ;*Macro unroll: mCOLON	1, '=', EQUAL
01CE                          ;*Macro unroll:  mCODE 1, "=", EQUAL
01CE                          ALIGN   2   
01CE                EQUAL:       
01CE                VVCODE:   .SET   $   
01CE                VVLEN:    .SET   (1 & 01FH) / CELLL   
1FA6                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FA6                VVNAME:   .SET   $   
1FA6   CE 01 B0 1F            DW   vvCODE,vvLINK   
1FAA                VVLINK:   .SET   $   
1FAA   01 3D                  DB   1,"="   
01CE                          .ORG   vvCODE   
01CE   00                     NOP      
01CF   CD 02 06               CALL   doLIST   
01D2   70 01                  DW   XORR   
01D4   46 0E DE 01            DW   QBRAN,EQU1   
01D8   10 06 00 00 50 06      DW   DOLIT,0,EXIT   ;false flag
01DE                EQU1:        
01DE   10 06 FF FF 50 06      DW   DOLIT,-1,EXIT   ;true flag
01E4                             ;   U<          ( u u -- t )
01E4                             ;               Unsigned compare of top two items.
01E4                          ;*Macro unroll: mCOLON	2,'U<',ULESS
01E4                          ;*Macro unroll:  mCODE 2, "U<", ULESS
01E4                          ALIGN   2   
01E4                ULESS:       
01E4                VVCODE:   .SET   $   
01E4                VVLEN:    .SET   (2 & 01FH) / CELLL   
1F9E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F9E                VVNAME:   .SET   $   
1F9E   E4 01 AA 1F            DW   vvCODE,vvLINK   
1FA2                VVLINK:   .SET   $   
1FA2   02 55 3C               DB   2,"U<"   
01E4                          .ORG   vvCODE   
01E4   00                     NOP      
01E5   CD 02 06               CALL   doLIST   
01E8   54 10 70 01 54 01      DW   DDUP,XORR,ZLESS   
01EE   46 0E FA 01            DW   QBRAN,ULES1   
01F2   1E 10 1A 10 54 01 50 06 DW   SWAP,DROP,ZLESS,EXIT   
01FA                ULES1:       
01FA   B4 01 54 01 50 06      DW   SUBB,ZLESS,EXIT   
0200                             ;   <           ( n1 n2 -- t )
0200                             ;               is less than
0200                          ;*Macro unroll: mCOLON	1,'<',LESS
0200                          ;*Macro unroll:  mCODE 1, "<", LESS
0200                          ALIGN   2   
0200                LESS:        
0200                VVCODE:   .SET   $   
0200                VVLEN:    .SET   (1 & 01FH) / CELLL   
1F98                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F98                VVNAME:   .SET   $   
1F98   00 02 A2 1F            DW   vvCODE,vvLINK   
1F9C                VVLINK:   .SET   $   
1F9C   01 3C                  DB   1,"<"   
0200                          .ORG   vvCODE   
0200   00                     NOP      
0201   CD 02 06               CALL   doLIST   
0204   54 10 70 01 54 01 46 0E 14 02 DW   DDUP,XORR,ZLESS,QBRAN,LESS1   
020E   1A 10 54 01 50 06      DW   DROP,ZLESS,EXIT   
0214                LESS1:       
0214   B4 01 54 01 50 06      DW   SUBB,ZLESS,EXIT   
021A                             ;   MAX         ( n n -- n )
021A                             ;               Return the greater of two top stack items.
021A                          ;*Macro unroll: mCOLON	3,'MAX',MAX
021A                          ;*Macro unroll:  mCODE 3, "MAX", MAX
021A                          ALIGN   2   
021A                MAX:         
021A                VVCODE:   .SET   $   
021A                VVLEN:    .SET   (3 & 01FH) / CELLL   
1F90                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F90                VVNAME:   .SET   $   
1F90   1A 02 9C 1F            DW   vvCODE,vvLINK   
1F94                VVLINK:   .SET   $   
1F94   03 4D 41 58            DB   3,"MAX"   
021A                          .ORG   vvCODE   
021A   00                     NOP      
021B   CD 02 06               CALL   doLIST   
021E   54 10 00 02 46 0E 28 02 DW   DDUP,LESS,QBRAN,MAX1   
0226   1E 10                  DW   SWAP   
0228                MAX1:        
0228   1A 10 50 06            DW   DROP,EXIT   
022C                             ;   MIN         ( n n -- n )
022C                             ;               Return the smaller of top two stack items.
022C                          ;*Macro unroll: mCOLON	3,'MIN',MIN
022C                          ;*Macro unroll:  mCODE 3, "MIN", MIN
022C                          ALIGN   2   
022C                MIN:         
022C                VVCODE:   .SET   $   
022C                VVLEN:    .SET   (3 & 01FH) / CELLL   
1F88                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F88                VVNAME:   .SET   $   
1F88   2C 02 94 1F            DW   vvCODE,vvLINK   
1F8C                VVLINK:   .SET   $   
1F8C   03 4D 49 4E            DB   3,"MIN"   
022C                          .ORG   vvCODE   
022C   00                     NOP      
022D   CD 02 06               CALL   doLIST   
0230   54 10 1E 10 00 02      DW   DDUP,SWAP,LESS   
0236   46 0E 3C 02            DW   QBRAN,MIN1   
023A   1E 10                  DW   SWAP   
023C                MIN1:        
023C   1A 10 50 06            DW   DROP,EXIT   
0240                             ;   WITHIN      ( u ul uh -- t )
0240                             ;               Return true if u is within the range of ul and uh.
0240                          ;*Macro unroll: mCOLON	6,'WITHIN',WITHI
0240                          ;*Macro unroll:  mCODE 6, "WITHIN", WITHI
0240                          ALIGN   2   
0240                WITHI:       
0240                VVCODE:   .SET   $   
0240                VVLEN:    .SET   (6 & 01FH) / CELLL   
1F7C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F7C                VVNAME:   .SET   $   
1F7C   40 02 8C 1F            DW   vvCODE,vvLINK   
1F80                VVLINK:   .SET   $   
1F80   06 57 49 54 48 49 4E   DB   6,"WITHIN"   
0240                          .ORG   vvCODE   
0240   00                     NOP      
0241   CD 02 06               CALL   doLIST   
0244   26 10 B4 01 FA 0F      DW   OVER,SUBB,ToR   ;ul <= u < uh
024A   B4 01 08 10 E4 01 50 06 DW   SUBB,RFrom,ULess,EXIT   
0252                             ;   UM+         ( w w -- w cy )
0252                             ;               Add two numbers, return the sum and carry flag.
0252                          ;*Macro unroll: hCODE	3,'um+',UMPlus
0252                          ALIGN   2   
0252                UMPLUS:      
0252   E1                     POP   HL   ;10t
0253   09                     ADD   HL,BC   ;11t
0254   E5                     PUSH   HL   ;11t
0255   01 00 00               LD   BC,0   ;10t
0258   30 01                  JR   NC,UMP1   ;12/7t
025A                UMP2:        
025A   03                     INC   BC   ; 6t
025B                UMP1:        
025B                          ;*Macro unroll:  mNEXT
025B   EB                     EX   DE,HL   
025C                          ;*Macro unroll:  mNEXTHL                         ; 34t
025C   FD E9                  JP   (IY)   ; 34t
025E                             ; UM/MOD      ( udl udh u -- ur uq )
025E                             ; Unsigned divide of a double by a single. Return mod and quotient.
025E                             ; Note: Less range than eForth because most significant word discarded TODO: fix
025E                          ;*Macro unroll: mCOLON  6,'UM/MOD',UMMOD
025E                          ;*Macro unroll:  mCODE 6, "UM/MOD", UMMOD
025E                          ALIGN   2   
025E                UMMOD:       
025E                VVCODE:   .SET   $   
025E                VVLEN:    .SET   (6 & 01FH) / CELLL   
1F70                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F70                VVNAME:   .SET   $   
1F70   5E 02 80 1F            DW   vvCODE,vvLINK   
1F74                VVLINK:   .SET   $   
1F74   06 55 4D 2F 4D 4F 44   DB   6,"UM/MOD"   
025E                          .ORG   vvCODE   
025E   00                     NOP      
025F   CD 02 06               CALL   doLIST   
0262   1E 10 1A 10 6A 02 50 06 DW   SWAP,DROP,UMSLMOD2,EXIT   
026A                             ; UM/MOD2	( ud u1 -- u2 u3 )		
026A                             ; Unsigned division of a double-cell number ud by a single-cell
026A                             ; number u1. Return remainder u2 and quotient u3.
026A                             ; Note: Less range than eForth TODO: fix
026A                          ;*Macro unroll: mCODE	6,'UM/MOD2',UMSLMOD2
026A                          ALIGN   2   
026A                UMSLMOD2:      
026A                VVCODE:   .SET   $   
026A                VVLEN:    .SET   (6 & 01FH) / CELLL   
1F64                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F64                VVNAME:   .SET   $   
1F64   6A 02 74 1F            DW   vvCODE,vvLINK   
1F68                VVLINK:   .SET   $   
1F68   06 55 4D 2F 4D 4F 44 32 DB   6,"UM/MOD2"   
026A                          .ORG   vvCODE   
026A   78                     LD   A,B   
026B   B1                     OR   C   
026C   28 25                  JR   Z,UMMOD2   ;?zero divisor
026E                UMMOD11:      
026E   C5                     PUSH   BC   
026F   D9                     EXX      
0270   C1                     POP   BC   
0271   E1                     POP   HL   
0272   D1                     POP   DE   
0273   7D                     LD   A,L   
0274   91                     SUB   C   
0275   7C                     LD   A,H   
0276   98                     SBC   A,B   
0277   30 20                  JR   NC,UMMOD1   ;?too big
0279                UMMOD12:      
0279   7C                     LD   A,H   
027A   65                     LD   H,L   
027B   6A                     LD   L,D   
027C   16 08                  LD   D,8   
027E   D5                     PUSH   DE   
027F   CD AD 02               CALL   UMMOD3   
0282   D1                     POP   DE   
0283   E5                     PUSH   HL   
0284   6B                     LD   L,E   
0285   CD AD 02               CALL   UMMOD3   
0288   57                     LD   D,A   
0289   5C                     LD   E,H   
028A   C1                     POP   BC   
028B   61                     LD   H,C   
028C   D5                     PUSH   DE   
028D   E5                     PUSH   HL   
028E   D9                     EXX      
028F   C1                     POP   BC   
0290                          ;*Macro unroll: 	mNEXT
0290   EB                     EX   DE,HL   
0291                          ;*Macro unroll:  mNEXTHL                         ; 34t
0291   FD E9                  JP   (IY)   ; 34t
0293                UMMOD2:      
0293   01 E0 0F               LD   BC,ERR_DIVZERO   ; divide by 0
0296   C3 5A 0E               JP   THROWX   
0299                UMMOD1:      
0299   01 EC 0F               LD   BC,ERR_OUTOFRANGE   ; result out of range
029C   C3 5A 0E               JP   THROWX   
029F                UMMOD4:      
029F   5F                     LD   E,A   
02A0   7C                     LD   A,H   
02A1   91                     SUB   C   
02A2   67                     LD   H,A   
02A3   7B                     LD   A,E   
02A4   98                     SBC   A,B   
02A5   30 10                  JR   NC,UMMOD5   
02A7                UMMOD13:      
02A7   7C                     LD   A,H   
02A8   81                     ADD   A,C   
02A9   67                     LD   H,A   
02AA   7B                     LD   A,E   
02AB   15                     DEC   D   
02AC   C8                     RET   Z   
02AD                UMMOD3:      
02AD   29                     ADD   HL,HL   
02AE   17                     RLA      
02AF   30 EE                  JR   NC,UMMOD4   
02B1                UMMOD14:      
02B1   5F                     LD   E,A   
02B2   7C                     LD   A,H   
02B3   91                     SUB   C   
02B4   67                     LD   H,A   
02B5   7B                     LD   A,E   
02B6   98                     SBC   A,B   
02B7                UMMOD5:      
02B7   2C                     INC   L   
02B8   15                     DEC   D   
02B9   20 F2                  JR   NZ,UMMOD3   
02BB                UMMOD15:      
02BB   C9                     RET      
02BC                             ;   FM/MOD	( d n1 -- n2 n3 )		\ CORE
02BC                             ;		Signed floored divide of double by single. Return mod n2
02BC                             ;		and quotient n3.
02BC                             ; TODO: this is usually called M/MOD in eForth
02BC                          ;*Macro unroll: mCOLON	6,'M/MOD',MSMOD
02BC                          ;*Macro unroll:  mCODE 6, "M/MOD", MSMOD
02BC                          ALIGN   2   
02BC                MSMOD:       
02BC                VVCODE:   .SET   $   
02BC                VVLEN:    .SET   (6 & 01FH) / CELLL   
1F58                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F58                VVNAME:   .SET   $   
1F58   BC 02 68 1F            DW   vvCODE,vvLINK   
1F5C                VVLINK:   .SET   $   
1F5C   06 4D 2F 4D 4F 44      DB   6,"M/MOD"   
02BC                          .ORG   vvCODE   
02BC   00                     NOP      
02BD   CD 02 06               CALL   doLIST   
02C0   16 10 54 01 16 10 FA 0F DW   DUPP,ZLESS,DUPP,TOR   
02C8   46 0E D4 02            DW   QBRAN,MMOD1   
02CC   90 01 FA 0F 9E 01 08 10 DW   NEGAT,TOR,DNEGA,RFROM   
02D4                MMOD1:       
02D4   FA 0F 16 10 54 01      DW   TOR,DUPP,ZLESS   
02DA   46 0E E2 02            DW   QBRAN,MMOD2   
02DE   84 0E 7A 01            DW   RAT,PLUS   
02E2                MMOD2:       
02E2   08 10 5E 02 08 10      DW   RFROM,UMMOD,RFROM   
02E8   46 0E F2 02            DW   QBRAN,MMOD3   
02EC   1E 10 90 01 1E 10      DW   SWAP,NEGAT,SWAP   
02F2                MMOD3:       
02F2   50 06                  DW   EXIT   
02F4                             ;   /MOD        ( n n -- r q )
02F4                             ;               Signed divide. Return mod and quotient.
02F4                          ;*Macro unroll: mCOLON	4,'/MOD',SLMOD
02F4                          ;*Macro unroll:  mCODE 4, "/MOD", SLMOD
02F4                          ALIGN   2   
02F4                SLMOD:       
02F4                VVCODE:   .SET   $   
02F4                VVLEN:    .SET   (4 & 01FH) / CELLL   
1F4E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F4E                VVNAME:   .SET   $   
1F4E   F4 02 5C 1F            DW   vvCODE,vvLINK   
1F52                VVLINK:   .SET   $   
1F52   04 2F 4D 4F 44         DB   4,"/MOD"   
02F4                          .ORG   vvCODE   
02F4   00                     NOP      
02F5   CD 02 06               CALL   doLIST   
02F8   26 10 54 01 1E 10 BC 02 50 06 DW   OVER,ZLESS,SWAP,MSMOD,EXIT   
0302                             ;   MOD         ( n n -- r )
0302                             ;               Signed divide. Return mod only.
0302                          ;*Macro unroll: mCOLON	3,'MOD',MODD
0302                          ;*Macro unroll:  mCODE 3, "MOD", MODD
0302                          ALIGN   2   
0302                MODD:        
0302                VVCODE:   .SET   $   
0302                VVLEN:    .SET   (3 & 01FH) / CELLL   
1F46                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F46                VVNAME:   .SET   $   
1F46   02 03 52 1F            DW   vvCODE,vvLINK   
1F4A                VVLINK:   .SET   $   
1F4A   03 4D 4F 44            DB   3,"MOD"   
0302                          .ORG   vvCODE   
0302   00                     NOP      
0303   CD 02 06               CALL   doLIST   
0306   F4 02 1A 10 50 06      DW   SLMOD,DROP,EXIT   
030C                             ; 
030C                             ;   /           ( n n -- q )
030C                             ;               Signed divide. Return quotient only.
030C                          ;*Macro unroll: mCOLON	1,'/',SLASH
030C                          ;*Macro unroll:  mCODE 1, "/", SLASH
030C                          ALIGN   2   
030C                SLASH:       
030C                VVCODE:   .SET   $   
030C                VVLEN:    .SET   (1 & 01FH) / CELLL   
1F40                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F40                VVNAME:   .SET   $   
1F40   0C 03 4A 1F            DW   vvCODE,vvLINK   
1F44                VVLINK:   .SET   $   
1F44   01 2F                  DB   1,"/"   
030C                          .ORG   vvCODE   
030C   00                     NOP      
030D   CD 02 06               CALL   doLIST   
0310   F4 02 1E 10 1A 10 50 06 DW   SLMOD,SWAP,DROP,EXIT   
0318                             ; Multiply
0318                             ;   UM*         ( u u -- ud )
0318                             ;               Unsigned multiply. Return double product.
0318                          ;*Macro unroll: mCODE	3,'UM*',UMSTA
0318                          ALIGN   2   
0318                UMSTA:       
0318                VVCODE:   .SET   $   
0318                VVLEN:    .SET   (3 & 01FH) / CELLL   
1F38                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F38                VVNAME:   .SET   $   
1F38   18 03 44 1F            DW   vvCODE,vvLINK   
1F3C                VVLINK:   .SET   $   
1F3C   03 55 4D 2A            DB   3,"UM*"   
0318                          .ORG   vvCODE   
0318   EB                     EX   DE,HL   
0319   E3                     EX   (SP),HL   
031A   EB                     EX   DE,HL   
031B   21 00 00               LD   HL,0   
031E   3E 10                  LD   A,010h   
0320                UMSTA1:      
0320   29                     ADD   HL,HL   
0321   EB                     EX   DE,HL   
0322   ED 6A                  ADC   HL,HL   
0324   EB                     EX   DE,HL   
0325   30 04                  JR   NC,UMSTA3   
0327                UMSTA2:      
0327   09                     ADD   HL,BC   
0328   30 01                  JR   NC,UMSTA3   
032A                UMSTA5:      
032A   13                     INC   DE   
032B                UMSTA3:      
032B   3D                     DEC   A   
032C   20 F2                  JR   NZ,UMSTA1   
032E                UMSTA4:      
032E   42                     LD   B,D   
032F   4B                     LD   C,E   
0330   E3                     EX   (SP),HL   
0331                          ;*Macro unroll: 	mNEXTHL
0331   FD E9                  JP   (IY)   
0333                             ;   *           ( n n -- n )
0333                             ;               Signed multiply. Return single product.
0333                          ;*Macro unroll: mCOLON	1,'*',STAR
0333                          ;*Macro unroll:  mCODE 1, "*", STAR
0333                          ALIGN   2   
0334                STAR:        
0334                VVCODE:   .SET   $   
0334                VVLEN:    .SET   (1 & 01FH) / CELLL   
1F32                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F32                VVNAME:   .SET   $   
1F32   34 03 3C 1F            DW   vvCODE,vvLINK   
1F36                VVLINK:   .SET   $   
1F36   01 2A                  DB   1,"*"   
0334                          .ORG   vvCODE   
0334   00                     NOP      
0335   CD 02 06               CALL   doLIST   
0338   18 03 1A 10 50 06      DW   UMSTA,DROP,EXIT   
033E                             ;   M*          ( n n -- d )
033E                             ;               Signed multiply. Return double product.
033E                          ;*Macro unroll: mCOLON	2,'M*',MSTAR,
033E                          ;*Macro unroll:  mCODE 2, "M*", MSTAR
033E                          ALIGN   2   
033E                MSTAR:       
033E                VVCODE:   .SET   $   
033E                VVLEN:    .SET   (2 & 01FH) / CELLL   
1F2A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F2A                VVNAME:   .SET   $   
1F2A   3E 03 36 1F            DW   vvCODE,vvLINK   
1F2E                VVLINK:   .SET   $   
1F2E   02 4D 2A               DB   2,"M*"   
033E                          .ORG   vvCODE   
033E   00                     NOP      
033F   CD 02 06               CALL   doLIST   
0342   54 10 70 01 54 01 FA 0F BE 01 1E 10 BE 01 DW   DDUP,XORR,ZLESS,ToR,ABSS,SWAP,ABSS   
0350   18 03 08 10 46 0E 5A 03 DW   UMSTA,RFrom,QBRAN,MSTAR1   
0358   9E 01                  DW   DNEGA   
035A                MSTAR1:      
035A   50 06                  DW   EXIT   
035C                             ;   */MOD       ( n1 n2 n3 -- r q )
035C                             ;               Multiply n1 and n2, then divide by n3. Return mod and quotient.
035C                          ;*Macro unroll: mCOLON	5,'*/MOD',SSMOD
035C                          ;*Macro unroll:  mCODE 5, "*/MOD", SSMOD
035C                          ALIGN   2   
035C                SSMOD:       
035C                VVCODE:   .SET   $   
035C                VVLEN:    .SET   (5 & 01FH) / CELLL   
1F20                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F20                VVNAME:   .SET   $   
1F20   5C 03 2E 1F            DW   vvCODE,vvLINK   
1F24                VVLINK:   .SET   $   
1F24   05 2A 2F 4D 4F 44      DB   5,"*/MOD"   
035C                          .ORG   vvCODE   
035C   00                     NOP      
035D   CD 02 06               CALL   doLIST   
0360   FA 0F 3E 03 08 10 BC 02 50 06 DW   ToR,MStar,RFrom,MSMOD,EXIT   
036A                             ;   */          ( n1 n2 n3 -- q )
036A                             ;               Multiply n1 by n2, then divide by n3. Return quotient only.
036A                          ;*Macro unroll: mCOLON	2,'*/',STASL
036A                          ;*Macro unroll:  mCODE 2, "*/", STASL
036A                          ALIGN   2   
036A                STASL:       
036A                VVCODE:   .SET   $   
036A                VVLEN:    .SET   (2 & 01FH) / CELLL   
1F18                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F18                VVNAME:   .SET   $   
1F18   6A 03 24 1F            DW   vvCODE,vvLINK   
1F1C                VVLINK:   .SET   $   
1F1C   02 2A 2F               DB   2,"*/"   
036A                          .ORG   vvCODE   
036A   00                     NOP      
036B   CD 02 06               CALL   doLIST   
036E   5C 03 1E 10 1A 10 50 06 DW   SSMOD,SWAP,DROP,EXIT   
0376                             ;   CELL+       ( a -- a )
0376                             ;               Add cell size in byte to address.
0376                          ;*Macro unroll: mCOLON	5,'CELL+',CELLP
0376                          ;*Macro unroll:  mCODE 5, "CELL+", CELLP
0376                          ALIGN   2   
0376                CELLP:       
0376                VVCODE:   .SET   $   
0376                VVLEN:    .SET   (5 & 01FH) / CELLL   
1F0E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F0E                VVNAME:   .SET   $   
1F0E   76 03 1C 1F            DW   vvCODE,vvLINK   
1F12                VVLINK:   .SET   $   
1F12   05 43 45 4C 4C 2B      DB   5,"CELL+"   
0376                          .ORG   vvCODE   
0376   00                     NOP      
0377   CD 02 06               CALL   doLIST   
037A   10 06 02 00 7A 01 50 06 DW   DOLIT,CELLL,PLUS,EXIT   
0382                             ;   CELL-       ( a -- a )
0382                             ;               Subtract cell size in byte from address.
0382                          ;*Macro unroll: mCOLON	5,'CELL-',CELLM
0382                          ;*Macro unroll:  mCODE 5, "CELL-", CELLM
0382                          ALIGN   2   
0382                CELLM:       
0382                VVCODE:   .SET   $   
0382                VVLEN:    .SET   (5 & 01FH) / CELLL   
1F04                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F04                VVNAME:   .SET   $   
1F04   82 03 12 1F            DW   vvCODE,vvLINK   
1F08                VVLINK:   .SET   $   
1F08   05 43 45 4C 4C 2D      DB   5,"CELL-"   
0382                          .ORG   vvCODE   
0382   00                     NOP      
0383   CD 02 06               CALL   doLIST   
0386   10 06 FE FF 7A 01 50 06 DW   DOLIT,-CELLL,PLUS,EXIT   
038E                             ;   CELLS       ( n -- n )
038E                             ;               Multiply tos by cell size in bytes.
038E                          ;*Macro unroll: mCOLON	5,'CELLS',CELLS
038E                          ;*Macro unroll:  mCODE 5, "CELLS", CELLS
038E                          ALIGN   2   
038E                CELLS:       
038E                VVCODE:   .SET   $   
038E                VVLEN:    .SET   (5 & 01FH) / CELLL   
1EFA                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1EFA                VVNAME:   .SET   $   
1EFA   8E 03 08 1F            DW   vvCODE,vvLINK   
1EFE                VVLINK:   .SET   $   
1EFE   05 43 45 4C 4C 53      DB   5,"CELLS"   
038E                          .ORG   vvCODE   
038E   00                     NOP      
038F   CD 02 06               CALL   doLIST   
0392   10 06 02 00 34 03 50 06 DW   DOLIT,CELLL,STAR,EXIT   
039A                             ;   '           ( -- ca )
039A                             ;               Search context vocabularies for the next word in input stream.
039A                          ;*Macro unroll: mCOLON  1,"'",TICK
039A                          ;*Macro unroll:  mCODE 1, "'", TICK
039A                          ALIGN   2   
039A                TICK:        
039A                VVCODE:   .SET   $   
039A                VVLEN:    .SET   (1 & 01FH) / CELLL   
1EF4                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1EF4                VVNAME:   .SET   $   
1EF4   9A 03 FE 1E            DW   vvCODE,vvLINK   
1EF8                VVLINK:   .SET   $   
1EF8   01 27                  DB   1,"'"   
039A                          .ORG   vvCODE   
039A   00                     NOP      
039B   CD 02 06               CALL   doLIST   
039E   30 09 12 0A            DW   TOKEN,NAMEQ   ;?defined
03A2   46 0E A8 03            DW   QBRAN,TICK1   
03A6   50 06                  DW   EXIT   ;yes, push code address
03A8                TICK1:       
03A8   74 0A                  DW   THROW   ;no, error
03AA                             ;   ALLOT       ( n -- )
03AA                             ;               Allocate n bytes to the code dictionary.
03AA                          ;*Macro unroll: mCOLON  5,'ALLOT',ALLOT
03AA                          ;*Macro unroll:  mCODE 5, "ALLOT", ALLOT
03AA                          ALIGN   2   
03AA                ALLOT:       
03AA                VVCODE:   .SET   $   
03AA                VVLEN:    .SET   (5 & 01FH) / CELLL   
1EEA                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1EEA                VVNAME:   .SET   $   
1EEA   AA 03 F8 1E            DW   vvCODE,vvLINK   
1EEE                VVLINK:   .SET   $   
1EEE   05 41 4C 4C 4F 54      DB   5,"ALLOT"   
03AA                          .ORG   vvCODE   
03AA   00                     NOP      
03AB   CD 02 06               CALL   doLIST   
03AE   36 11 B0 0E 50 06      DW   CP,PSTOR,EXIT   ;adjust code pointer
03B4                             ;   ,           ( w -- )
03B4                             ;               Compile an integer into the code dictionary.
03B4                          ;*Macro unroll: mCOLON  1,',',COMMA
03B4                          ;*Macro unroll:  mCODE 1, ",", COMMA
03B4                          ALIGN   2   
03B4                COMMA:       
03B4                VVCODE:   .SET   $   
03B4                VVLEN:    .SET   (1 & 01FH) / CELLL   
1EE4                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1EE4                VVNAME:   .SET   $   
1EE4   B4 03 EE 1E            DW   vvCODE,vvLINK   
1EE8                VVLINK:   .SET   $   
1EE8   01 2C                  DB   1,","   
03B4                          .ORG   vvCODE   
03B4   00                     NOP      
03B5   CD 02 06               CALL   doLIST   
03B8   F4 0E 16 10 76 03      DW   HERE,DUPP,CELLP   ;cell boundary
03BE   36 11 62 0E 62 0E 50 06 DW   CP,STORE,STORE,EXIT   ;adjust code pointer, compile
03C6                             ;   [COMPILE]   ( -- ; <string> )
03C6                             ;               Compile the next immediate word into code dictionary.
03C6                          ;*Macro unroll: mCOLON  IMEDD+9,'[COMPILE]',BCOMP
03C6                          ;*Macro unroll:  mCODE IMEDD+9, "[COMPILE]", BCOMP
03C6                          ALIGN   2   
03C6                BCOMP:       
03C6                VVCODE:   .SET   $   
03C6                VVLEN:    .SET   (IMEDD+9 & 01FH) / CELLL   
1E96                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1E96                VVNAME:   .SET   $   
1E96   C6 03 E8 1E            DW   vvCODE,vvLINK   
1E9A                VVLINK:   .SET   $   
1E9A   49 5B 43 4F 4D 50 49 4C 45 5D DB   IMEDD+9,"[COMPILE]"   
03C6                          .ORG   vvCODE   
03C6   00                     NOP      
03C7   CD 02 06               CALL   doLIST   
03CA   9A 03 B4 03 50 06      DW   TICK,COMMA,EXIT   
03D0                             ;   COMPILE     ( -- )
03D0                             ;               Compile the next address in colon list to code dictionary.
03D0                          ;*Macro unroll: mCOLON  COMPO+7,'COMPILE',COMPI
03D0                          ;*Macro unroll:  mCODE COMPO+7, "COMPILE", COMPI
03D0                          ALIGN   2   
03D0                COMPI:       
03D0                VVCODE:   .SET   $   
03D0                VVLEN:    .SET   (COMPO+7 & 01FH) / CELLL   
1E6A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1E6A                VVNAME:   .SET   $   
1E6A   D0 03 9A 1E            DW   vvCODE,vvLINK   
1E6E                VVLINK:   .SET   $   
1E6E   27 43 4F 4D 50 49 4C 45 DB   COMPO+7,"COMPILE"   
03D0                          .ORG   vvCODE   
03D0   00                     NOP      
03D1   CD 02 06               CALL   doLIST   
03D4   08 10 16 10 6C 0E B4 03 DW   RFROM,DUPP,AT,COMMA   ;compile address
03DC   76 03 FA 0F 50 06      DW   CELLP,TOR,EXIT   ;adjust return address
03E2                             ;   LITERAL     ( w -- )
03E2                             ;               Compile tos to code dictionary as an integer literal.
03E2                          ;*Macro unroll: mCOLON  IMEDD+7,'LITERAL',LITER
03E2                          ;*Macro unroll:  mCODE IMEDD+7, "LITERAL", LITER
03E2                          ALIGN   2   
03E2                LITER:       
03E2                VVCODE:   .SET   $   
03E2                VVLEN:    .SET   (IMEDD+7 & 01FH) / CELLL   
1E1E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1E1E                VVNAME:   .SET   $   
1E1E   E2 03 6E 1E            DW   vvCODE,vvLINK   
1E22                VVLINK:   .SET   $   
1E22   47 4C 49 54 45 52 41 4C DB   IMEDD+7,"LITERAL"   
03E2                          .ORG   vvCODE   
03E2   00                     NOP      
03E3   CD 02 06               CALL   doLIST   
03E6   D0 03 10 06 B4 03 50 06 DW   COMPI,DOLIT,COMMA,EXIT   
03EE                             ;   $,"         ( -- )
03EE                             ;               Compile a literal string up to next " .
03EE                          ;*Macro unroll: hCOLON  3,'$,|',STRCQ
03EE                          ;*Macro unroll:  hCODE 3, "$,|", STRCQ
03EE                          ALIGN   2   
03EE                STRCQ:       
03EE   00                     NOP      
03EF   CD 02 06               CALL   doLIST   
03F2   10 06 22 00 4C 09      DW   DOLIT,$22,WORDD   ;move string to code dictionary
03F8   E2 0E 7A 01 DA 0F      DW   COUNT,PLUS,ALGND   ;calculate aligned end of string
03FE   36 11 62 0E 50 06      DW   CP,STORE,EXIT   ;adjust the code pointer
0404                             ;   RECURSE     ( -- )
0404                             ;               Make the current word available for compilation.
0404                          ;*Macro unroll: mCOLON  IMEDD+7,'RECURSE',RECUR
0404                          ;*Macro unroll:  mCODE IMEDD+7, "RECURSE", RECUR
0404                          ALIGN   2   
0404                RECUR:       
0404                VVCODE:   .SET   $   
0404                VVLEN:    .SET   (IMEDD+7 & 01FH) / CELLL   
1DD2                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1DD2                VVNAME:   .SET   $   
1DD2   04 04 22 1E            DW   vvCODE,vvLINK   
1DD6                VVLINK:   .SET   $   
1DD6   47 52 45 43 55 52 53 45 DB   IMEDD+7,"RECURSE"   
0404                          .ORG   vvCODE   
0404   00                     NOP      
0405   CD 02 06               CALL   doLIST   
0408   46 11 6C 0E 58 09 B4 03 50 06 DW   LAST,AT,NAMET,COMMA,EXIT   
0412                             ;   ?UNIQUE     ( a -- a )
0412                             ;               Display a warning message if the word already exists.
0412                          ;*Macro unroll: mCOLON  7,'?UNIQUE',UNIQU
0412                          ;*Macro unroll:  mCODE 7, "?UNIQUE", UNIQU
0412                          ALIGN   2   
0412                UNIQU:       
0412                VVCODE:   .SET   $   
0412                VVLEN:    .SET   (7 & 01FH) / CELLL   
1DC6                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1DC6                VVNAME:   .SET   $   
1DC6   12 04 D6 1D            DW   vvCODE,vvLINK   
1DCA                VVLINK:   .SET   $   
1DCA   07 3F 55 4E 49 51 55 45 DB   7,"?UNIQUE"   
0412                          .ORG   vvCODE   
0412   00                     NOP      
0413   CD 02 06               CALL   doLIST   
0416   16 10 12 0A            DW   DUPP,NAMEQ   ;?name exists
041A   46 0E 2E 04            DW   QBRAN,UNIQ1   ;redefinitions are OK
041E                          ;*Macro unroll:  mDSTR   DOTQP,' reDef '         ;but warn the user
041E   52 0C                  DW   DOTQP   ;but warn the user
0420                VVLEN:    .SET   $   
0420   00 20 72 65 44 65 66 20 DB   0," reDef "   
0428                VVCODE:   .SET   $   
0420                          .ORG   vvLEN   
0420   07                     DB   vvCODE - vvLEN - 1   
0428                          .ORG   vvCODE   
0428   26 10 E2 0E FC 0B      DW   OVER,COUNT,TYPEE   ;just in case its not planned
042E                UNIQ1:       
042E   1A 10 50 06            DW   DROP,EXIT   
0432                             ;   $,n         ( na -- )
0432                             ;               Build a new dictionary name using the string at na.
0432                          ;*Macro unroll: mCOLON  3,'$,n',SNAME
0432                          ;*Macro unroll:  mCODE 3, "$,n", SNAME
0432                          ALIGN   2   
0432                SNAME:       
0432                VVCODE:   .SET   $   
0432                VVLEN:    .SET   (3 & 01FH) / CELLL   
1DBE                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1DBE                VVNAME:   .SET   $   
1DBE   32 04 CA 1D            DW   vvCODE,vvLINK   
1DC2                VVLINK:   .SET   $   
1DC2   03 24 2C 6E            DB   3,"$,n"   
0432                          .ORG   vvCODE   
0432   00                     NOP      
0433   CD 02 06               CALL   doLIST   
0436   16 10 7C 0E            DW   DUPP,CAT   ;?null input
043A   46 0E 64 04            DW   QBRAN,PNAM1   
043E   12 04                  DW   UNIQU   ;?redefinition
0440   16 10 46 11 62 0E      DW   DUPP,LAST,STORE   ;save na for vocabulary link
0446   F4 0E DA 0F 1E 10      DW   HERE,ALGND,SWAP   ;align code address
044C   82 03                  DW   CELLM   ;link address
044E   2E 11 6C 0E 6C 0E 26 10 62 0E DW   CRRNT,AT,AT,OVER,STORE   
0458   82 03 16 10 3E 11 62 0E DW   CELLM,DUPP,NP,STORE   ;adjust name pointer
0460   62 0E 50 06            DW   STORE,EXIT   ;save code pointer
0464                PNAM1:       
0464                          ;*Macro unroll:  mDSTR   STRQP,' name'           ;null input
0464   4A 0C                  DW   STRQP   ;null input
0466                VVLEN:    .SET   $   
0466   00 20 6E 61 6D 65      DB   0," name"   
046C                VVCODE:   .SET   $   
0466                          .ORG   vvLEN   
0466   05                     DB   vvCODE - vvLEN - 1   
046C                          .ORG   vvCODE   
046C   74 0A                  DW   THROW   
046E                             ;   $COMPILE    ( a -- )
046E                             ;               Compile next word to code dictionary as a token or literal.
046E                          ;*Macro unroll: hCOLON  8,'$COMPILE',SCOMP
046E                          ;*Macro unroll:  hCODE 8, "$COMPILE", SCOMP
046E                          ALIGN   2   
046E                SCOMP:       
046E   00                     NOP      
046F   CD 02 06               CALL   doLIST   
0472   12 0A 2E 10            DW   NAMEQ,QDUP   ;?defined
0476   46 0E 8E 04            DW   QBRAN,SCOM2   
047A   6C 0E 10 06 40 00 5C 01 DW   AT,DOLIT,IMEDD,ANDD   ;?immediate
0482   46 0E 8A 04            DW   QBRAN,SCOM1   
0486   42 0E 50 06            DW   EXECU,EXIT   ;its immediate, execute
048A                SCOM1:       
048A   B4 03 50 06            DW   COMMA,EXIT   ;its not immediate, compile
048E                SCOM2:       
048E   0E 11 18 0F            DW   TNUMB,ATEXE   ;try to convert to number
0492   46 0E 9A 04            DW   QBRAN,SCOM3   
0496   E2 03 50 06            DW   LITER,EXIT   ;compile number as integer
049A   74 0A        SCOM3:    DW   THROW   ;error
049C                             ;   OVERT       ( -- )
049C                             ;               Link a new word into the current vocabulary.
049C                          ;*Macro unroll: hCOLON  5,'OVERT',OVERT
049C                          ;*Macro unroll:  hCODE 5, "OVERT", OVERT
049C                          ALIGN   2   
049C                OVERT:       
049C   00                     NOP      
049D   CD 02 06               CALL   doLIST   
04A0   46 11 6C 0E 2E 11 6C 0E 62 0E 50 06 DW   LAST,AT,CRRNT,AT,STORE,EXIT   
04AC                             ;   ;           ( -- )
04AC                             ;               Terminate a colon definition.
04AC                          ;*Macro unroll: mCOLON  IMEDD+COMPO+1,';',SEMIS
04AC                          ;*Macro unroll:  mCODE IMEDD+COMPO+1, ";", SEMIS
04AC                          ALIGN   2   
04AC                SEMIS:       
04AC                VVCODE:   .SET   $   
04AC                VVLEN:    .SET   (IMEDD+COMPO+1 & 01FH) / CELLL   
1D58                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1D58                VVNAME:   .SET   $   
1D58   AC 04 C2 1D            DW   vvCODE,vvLINK   
1D5C                VVLINK:   .SET   $   
1D5C   61 3B                  DB   IMEDD+COMPO+1,";"   
04AC                          .ORG   vvCODE   
04AC   00                     NOP      
04AD   CD 02 06               CALL   doLIST   
04B0   D0 03 50 06 EE 0A 9C 04 50 06 DW   COMPI,EXIT,LBRAC,OVERT,EXIT   
04BA                             ;   ]           ( -- )
04BA                             ;               Start compiling the words in the input stream.
04BA                          ;*Macro unroll: mCOLON  1,']',RBRAC
04BA                          ;*Macro unroll:  mCODE 1, "]", RBRAC
04BA                          ALIGN   2   
04BA                RBRAC:       
04BA                VVCODE:   .SET   $   
04BA                VVLEN:    .SET   (1 & 01FH) / CELLL   
1D52                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1D52                VVNAME:   .SET   $   
1D52   BA 04 5C 1D            DW   vvCODE,vvLINK   
1D56                VVLINK:   .SET   $   
1D56   01 5D                  DB   1,"]"   
04BA                          .ORG   vvCODE   
04BA   00                     NOP      
04BB   CD 02 06               CALL   doLIST   
04BE   10 06 6E 04 06 11 62 0E 50 06 DW   DOLIT,SCOMP,TEVAL,STORE,EXIT   
04C8                             ;   call,       ( ca -- )
04C8                             ;               Assemble a call instruction to ca.
04C8                          ;*Macro unroll: hCOLON  5,'call,',CALLC
04C8                          ;*Macro unroll:  hCODE 5, "call,", CALLC
04C8                          ALIGN   2   
04C8                CALLC:       
04C8   00                     NOP      
04C9   CD 02 06               CALL   doLIST   
04CC   10 06 00 CD B4 03      DW   DOLIT,CALLL,COMMA   ;Direct Threaded Code
04D2   B4 03 50 06            DW   COMMA,EXIT   ;DTC 8086 relative call
04D6                             ;   :           ( -- ; <string> )
04D6                             ;               Start a new colon definition using next word as its name.
04D6                          ;*Macro unroll: mCOLON  1,':',COLON
04D6                          ;*Macro unroll:  mCODE 1, ":", COLON
04D6                          ALIGN   2   
04D6                COLON:       
04D6                VVCODE:   .SET   $   
04D6                VVLEN:    .SET   (1 & 01FH) / CELLL   
1D4C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1D4C                VVNAME:   .SET   $   
1D4C   D6 04 56 1D            DW   vvCODE,vvLINK   
1D50                VVLINK:   .SET   $   
1D50   01 3A                  DB   1,":"   
04D6                          .ORG   vvCODE   
04D6   00                     NOP      
04D7   CD 02 06               CALL   doLIST   
04DA   30 09 32 04 10 06 02 06 DW   TOKEN,SNAME,DOLIT,DoLIST   
04E2   C8 04 BA 04 50 06      DW   CALLC,RBRAC,EXIT   
04E8                             ;   IMMEDIATE   ( -- )
04E8                             ;               Make the last compiled word an immediate word.
04E8                          ;*Macro unroll: mCOLON  9,'IMMEDIATE',IMMED
04E8                          ;*Macro unroll:  mCODE 9, "IMMEDIATE", IMMED
04E8                          ALIGN   2   
04E8                IMMED:       
04E8                VVCODE:   .SET   $   
04E8                VVLEN:    .SET   (9 & 01FH) / CELLL   
1D3E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1D3E                VVNAME:   .SET   $   
1D3E   E8 04 50 1D            DW   vvCODE,vvLINK   
1D42                VVLINK:   .SET   $   
1D42   09 49 4D 4D 45 44 49 41 54 45 DB   9,"IMMEDIATE"   
04E8                          .ORG   vvCODE   
04E8   00                     NOP      
04E9   CD 02 06               CALL   doLIST   
04EC   10 06 40 00 46 11 6C 0E 6C 0E 66 01 DW   DOLIT,IMEDD,LAST,AT,AT,ORR   
04F8   46 11 6C 0E 62 0E 50 06 DW   LAST,AT,STORE,EXIT   
0500                             ;   USER        ( u -- ; <string> )
0500                             ;               Compile a new user variable.
0500                          ;*Macro unroll: mCOLON  4,'USER',USER
0500                          ;*Macro unroll:  mCODE 4, "USER", USER
0500                          ALIGN   2   
0500                USER:        
0500                VVCODE:   .SET   $   
0500                VVLEN:    .SET   (4 & 01FH) / CELLL   
1D34                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1D34                VVNAME:   .SET   $   
1D34   00 05 42 1D            DW   vvCODE,vvLINK   
1D38                VVLINK:   .SET   $   
1D38   04 55 53 45 52         DB   4,"USER"   
0500                          .ORG   vvCODE   
0500   00                     NOP      
0501   CD 02 06               CALL   doLIST   
0504   30 09 32 04 9C 04      DW   TOKEN,SNAME,OVERT   
050A   10 06 02 06 C8 04      DW   DOLIT,DoLIST,CALLC   
0510   D0 03 28 06 B4 03 50 06 DW   COMPI,DOUSE,COMMA,EXIT   
0518                             ;   CREATE      ( -- ; <string> )
0518                             ;               Compile a new array entry without allocating code space.
0518                          ;*Macro unroll: mCOLON  6,'CREATE',CREAT
0518                          ;*Macro unroll:  mCODE 6, "CREATE", CREAT
0518                          ALIGN   2   
0518                CREAT:       
0518                VVCODE:   .SET   $   
0518                VVLEN:    .SET   (6 & 01FH) / CELLL   
1D28                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1D28                VVNAME:   .SET   $   
1D28   18 05 38 1D            DW   vvCODE,vvLINK   
1D2C                VVLINK:   .SET   $   
1D2C   06 43 52 45 41 54 45   DB   6,"CREATE"   
0518                          .ORG   vvCODE   
0518   00                     NOP      
0519   CD 02 06               CALL   doLIST   
051C   30 09 32 04 9C 04      DW   TOKEN,SNAME,OVERT   
0522   10 06 02 06 C8 04      DW   DOLIT,DoLIST,CALLC   
0528   D0 03 18 06 50 06      DW   COMPI,DOVAR,EXIT   
052E                             ;   VARIABLE    ( -- ; <string> )
052E                             ;               Compile a new variable initialized to 0.
052E                          ;*Macro unroll: mCOLON  8,'VARIABLE',VARIA
052E                          ;*Macro unroll:  mCODE 8, "VARIABLE", VARIA
052E                          ALIGN   2   
052E                VARIA:       
052E                VVCODE:   .SET   $   
052E                VVLEN:    .SET   (8 & 01FH) / CELLL   
1D1A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1D1A                VVNAME:   .SET   $   
1D1A   2E 05 2C 1D            DW   vvCODE,vvLINK   
1D1E                VVLINK:   .SET   $   
1D1E   08 56 41 52 49 41 42 4C 45 DB   8,"VARIABLE"   
052E                          .ORG   vvCODE   
052E   00                     NOP      
052F   CD 02 06               CALL   doLIST   
0532   18 05 10 06 00 00 B4 03 50 06 DW   CREAT,DOLIT,0,COMMA,EXIT   
053C                             ;   FOR         ( -- a )
053C                             ;               Start a FOR-NEXT loop structure in a colon definition.
053C                          ;*Macro unroll: mCOLON  IMEDD+3,'FOR',FOR
053C                          ;*Macro unroll:  mCODE IMEDD+3, "FOR", FOR
053C                          ALIGN   2   
053C                FOR:         
053C                VVCODE:   .SET   $   
053C                VVLEN:    .SET   (IMEDD+3 & 01FH) / CELLL   
1CD2                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1CD2                VVNAME:   .SET   $   
1CD2   3C 05 1E 1D            DW   vvCODE,vvLINK   
1CD6                VVLINK:   .SET   $   
1CD6   43 46 4F 52            DB   IMEDD+3,"FOR"   
053C                          .ORG   vvCODE   
053C   00                     NOP      
053D   CD 02 06               CALL   doLIST   
0540   D0 03 FA 0F F4 0E 50 06 DW   COMPI,TOR,HERE,EXIT   
0548                             ;   BEGIN       ( -- a )
0548                             ;               Start an infinite or indefinite loop structure.
0548                          ;*Macro unroll: mCOLON  IMEDD+5,'BEGIN',BEGIN
0548                          ;*Macro unroll:  mCODE IMEDD+5, "BEGIN", BEGIN
0548                          ALIGN   2   
0548                BEGIN:       
0548                VVCODE:   .SET   $   
0548                VVLEN:    .SET   (IMEDD+5 & 01FH) / CELLL   
1C88                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1C88                VVNAME:   .SET   $   
1C88   48 05 D6 1C            DW   vvCODE,vvLINK   
1C8C                VVLINK:   .SET   $   
1C8C   45 42 45 47 49 4E      DB   IMEDD+5,"BEGIN"   
0548                          .ORG   vvCODE   
0548   00                     NOP      
0549   CD 02 06               CALL   doLIST   
054C   F4 0E 50 06            DW   HERE,EXIT   
0550                             ;   NEXT        ( a -- )
0550                             ;               Terminate a FOR-NEXT loop structure.
0550                          ;*Macro unroll: mCOLON  IMEDD+4,'NEXT',NEXT
0550                          ;*Macro unroll:  mCODE IMEDD+4, "NEXT", NEXT
0550                          ALIGN   2   
0550                NEXT:        
0550                VVCODE:   .SET   $   
0550                VVLEN:    .SET   (IMEDD+4 & 01FH) / CELLL   
1C3E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1C3E                VVNAME:   .SET   $   
1C3E   50 05 8C 1C            DW   vvCODE,vvLINK   
1C42                VVLINK:   .SET   $   
1C42   44 4E 45 58 54         DB   IMEDD+4,"NEXT"   
0550                          .ORG   vvCODE   
0550   00                     NOP      
0551   CD 02 06               CALL   doLIST   
0554   D0 03 5C 06 B4 03 50 06 DW   COMPI,DONXT,COMMA,EXIT   
055C                             ;   UNTIL       ( a -- )
055C                             ;               Terminate a BEGIN-UNTIL indefinite loop structure.
055C                          ;*Macro unroll: mCOLON  IMEDD+5,'UNTIL',UNTIL
055C                          ;*Macro unroll:  mCODE IMEDD+5, "UNTIL", UNTIL
055C                          ALIGN   2   
055C                UNTIL:       
055C                VVCODE:   .SET   $   
055C                VVLEN:    .SET   (IMEDD+5 & 01FH) / CELLL   
1BF4                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1BF4                VVNAME:   .SET   $   
1BF4   5C 05 42 1C            DW   vvCODE,vvLINK   
1BF8                VVLINK:   .SET   $   
1BF8   45 55 4E 54 49 4C      DB   IMEDD+5,"UNTIL"   
055C                          .ORG   vvCODE   
055C   00                     NOP      
055D   CD 02 06               CALL   doLIST   
0560   D0 03 46 0E B4 03 50 06 DW   COMPI,QBRAN,COMMA,EXIT   
0568                             ;   AGAIN       ( a -- )
0568                             ;               Terminate a BEGIN-AGAIN infinite loop structure.
0568                          ;*Macro unroll: mCOLON  IMEDD+5,'AGAIN',AGAIN
0568                          ;*Macro unroll:  mCODE IMEDD+5, "AGAIN", AGAIN
0568                          ALIGN   2   
0568                AGAIN:       
0568                VVCODE:   .SET   $   
0568                VVLEN:    .SET   (IMEDD+5 & 01FH) / CELLL   
1BAA                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1BAA                VVNAME:   .SET   $   
1BAA   68 05 F8 1B            DW   vvCODE,vvLINK   
1BAE                VVLINK:   .SET   $   
1BAE   45 41 47 41 49 4E      DB   IMEDD+5,"AGAIN"   
0568                          .ORG   vvCODE   
0568   00                     NOP      
0569   CD 02 06               CALL   doLIST   
056C   D0 03 52 0E B4 03 50 06 DW   COMPI,BRAN,COMMA,EXIT   
0574                             ;   IF          ( -- A )
0574                             ;               Begin a conditional branch structure.
0574                          ;*Macro unroll: mCOLON  IMEDD+2,'IF',IFF
0574                          ;*Macro unroll:  mCODE IMEDD+2, "IF", IFF
0574                          ALIGN   2   
0574                IFF:         
0574                VVCODE:   .SET   $   
0574                VVLEN:    .SET   (IMEDD+2 & 01FH) / CELLL   
1B62                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1B62                VVNAME:   .SET   $   
1B62   74 05 AE 1B            DW   vvCODE,vvLINK   
1B66                VVLINK:   .SET   $   
1B66   42 49 46               DB   IMEDD+2,"IF"   
0574                          .ORG   vvCODE   
0574   00                     NOP      
0575   CD 02 06               CALL   doLIST   
0578   D0 03 46 0E F4 0E      DW   COMPI,QBRAN,HERE   
057E   10 06 00 00 B4 03 50 06 DW   DOLIT,0,COMMA,EXIT   
0586                             ;   AHEAD       ( -- A )
0586                             ;               Compile a forward branch instruction.
0586                          ;*Macro unroll: mCOLON  IMEDD+5,'AHEAD',AHEAD
0586                          ;*Macro unroll:  mCODE IMEDD+5, "AHEAD", AHEAD
0586                          ALIGN   2   
0586                AHEAD:       
0586                VVCODE:   .SET   $   
0586                VVLEN:    .SET   (IMEDD+5 & 01FH) / CELLL   
1B18                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1B18                VVNAME:   .SET   $   
1B18   86 05 66 1B            DW   vvCODE,vvLINK   
1B1C                VVLINK:   .SET   $   
1B1C   45 41 48 45 41 44      DB   IMEDD+5,"AHEAD"   
0586                          .ORG   vvCODE   
0586   00                     NOP      
0587   CD 02 06               CALL   doLIST   
058A   D0 03 52 0E F4 0E 10 06 00 00 B4 03 50 06 DW   COMPI,BRAN,HERE,DOLIT,0,COMMA,EXIT   
0598                             ;   REPEAT      ( A a -- )
0598                             ;               Terminate a BEGIN-WHILE-REPEAT indefinite loop.
0598                          ;*Macro unroll: mCOLON  IMEDD+6,'REPEAT',REPEA
0598                          ;*Macro unroll:  mCODE IMEDD+6, "REPEAT", REPEA
0598                          ALIGN   2   
0598                REPEA:       
0598                VVCODE:   .SET   $   
0598                VVLEN:    .SET   (IMEDD+6 & 01FH) / CELLL   
1ACC                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1ACC                VVNAME:   .SET   $   
1ACC   98 05 1C 1B            DW   vvCODE,vvLINK   
1AD0                VVLINK:   .SET   $   
1AD0   46 52 45 50 45 41 54   DB   IMEDD+6,"REPEAT"   
0598                          .ORG   vvCODE   
0598   00                     NOP      
0599   CD 02 06               CALL   doLIST   
059C   68 05 F4 0E 1E 10 62 0E 50 06 DW   AGAIN,HERE,SWAP,STORE,EXIT   
05A6                             ;   THEN        ( A -- )
05A6                             ;               Terminate a conditional branch structure.
05A6                          ;*Macro unroll: mCOLON  IMEDD+4,'THEN',THENN
05A6                          ;*Macro unroll:  mCODE IMEDD+4, "THEN", THENN
05A6                          ALIGN   2   
05A6                THENN:       
05A6                VVCODE:   .SET   $   
05A6                VVLEN:    .SET   (IMEDD+4 & 01FH) / CELLL   
1A82                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1A82                VVNAME:   .SET   $   
1A82   A6 05 D0 1A            DW   vvCODE,vvLINK   
1A86                VVLINK:   .SET   $   
1A86   44 54 48 45 4E         DB   IMEDD+4,"THEN"   
05A6                          .ORG   vvCODE   
05A6   00                     NOP      
05A7   CD 02 06               CALL   doLIST   
05AA   F4 0E 1E 10 62 0E 50 06 DW   HERE,SWAP,STORE,EXIT   
05B2                             ;   AFT         ( a -- a A )
05B2                             ;               Jump to THEN in a FOR-AFT-THEN-NEXT loop the 1st time through.
05B2                          ;*Macro unroll: mCOLON  IMEDD+3,'AFT',AFT
05B2                          ;*Macro unroll:  mCODE IMEDD+3, "AFT", AFT
05B2                          ALIGN   2   
05B2                AFT:         
05B2                VVCODE:   .SET   $   
05B2                VVLEN:    .SET   (IMEDD+3 & 01FH) / CELLL   
1A3A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1A3A                VVNAME:   .SET   $   
1A3A   B2 05 86 1A            DW   vvCODE,vvLINK   
1A3E                VVLINK:   .SET   $   
1A3E   43 41 46 54            DB   IMEDD+3,"AFT"   
05B2                          .ORG   vvCODE   
05B2   00                     NOP      
05B3   CD 02 06               CALL   doLIST   
05B6   1A 10 86 05 48 05 1E 10 50 06 DW   DROP,AHEAD,BEGIN,SWAP,EXIT   
05C0                             ;   ELSE        ( A -- A )
05C0                             ;               Start the false clause in an IF-ELSE-THEN structure.
05C0                          ;*Macro unroll: mCOLON  IMEDD+4,'ELSE',ELSEE
05C0                          ;*Macro unroll:  mCODE IMEDD+4, "ELSE", ELSEE
05C0                          ALIGN   2   
05C0                ELSEE:       
05C0                VVCODE:   .SET   $   
05C0                VVLEN:    .SET   (IMEDD+4 & 01FH) / CELLL   
19F0                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
19F0                VVNAME:   .SET   $   
19F0   C0 05 3E 1A            DW   vvCODE,vvLINK   
19F4                VVLINK:   .SET   $   
19F4   44 45 4C 53 45         DB   IMEDD+4,"ELSE"   
05C0                          .ORG   vvCODE   
05C0   00                     NOP      
05C1   CD 02 06               CALL   doLIST   
05C4   86 05 1E 10 A6 05 50 06 DW   AHEAD,SWAP,THENN,EXIT   
05CC                             ;   WHILE       ( a -- A a )
05CC                             ;               Conditional branch out of a BEGIN-WHILE-REPEAT loop.
05CC                          ;*Macro unroll: mCOLON  IMEDD+5,'WHILE',WHILE
05CC                          ;*Macro unroll:  mCODE IMEDD+5, "WHILE", WHILE
05CC                          ALIGN   2   
05CC                WHILE:       
05CC                VVCODE:   .SET   $   
05CC                VVLEN:    .SET   (IMEDD+5 & 01FH) / CELLL   
19A6                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
19A6                VVNAME:   .SET   $   
19A6   CC 05 F4 19            DW   vvCODE,vvLINK   
19AA                VVLINK:   .SET   $   
19AA   45 57 48 49 4C 45      DB   IMEDD+5,"WHILE"   
05CC                          .ORG   vvCODE   
05CC   00                     NOP      
05CD   CD 02 06               CALL   doLIST   
05D0   74 05 1E 10 50 06      DW   IFF,SWAP,EXIT   
05D6                             ;   ABORT"      ( -- ; <string> )
05D6                             ;               Conditional abort with an error message.
05D6                          ;*Macro unroll: mCOLON  IMEDD+6,'ABORTQ',ABRTQ
05D6                          ;*Macro unroll:  mCODE IMEDD+6, "ABORTQ", ABRTQ
05D6                          ALIGN   2   
05D6                ABRTQ:       
05D6                VVCODE:   .SET   $   
05D6                VVLEN:    .SET   (IMEDD+6 & 01FH) / CELLL   
195A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
195A                VVNAME:   .SET   $   
195A   D6 05 AA 19            DW   vvCODE,vvLINK   
195E                VVLINK:   .SET   $   
195E   46 41 42 4F 52 54 51   DB   IMEDD+6,"ABORTQ"   
05D6                          .ORG   vvCODE   
05D6   00                     NOP      
05D7   CD 02 06               CALL   doLIST   
05DA   D0 03 A8 0A EE 03 50 06 DW   COMPI,ABORQ,STRCQ,EXIT   
05E2                             ;   $"          ( -- ; <string> )
05E2                             ;               Compile an inline string literal.
05E2                          ;*Macro unroll: hCOLON  IMEDD+2,'$|',STRQ
05E2                          ;*Macro unroll:  hCODE IMEDD+2, "$|", STRQ
05E2                          ALIGN   2   
05E2                STRQ:        
05E2   00                     NOP      
05E3   CD 02 06               CALL   doLIST   
05E6   D0 03 4A 0C EE 03 50 06 DW   COMPI,STRQP,STRCQ,EXIT   
05EE                             ;   ."          ( -- ; <string> )
05EE                             ;               Compile an inline string literal to be typed out at run time.
05EE                          ;*Macro unroll: hCOLON  IMEDD+2,'.|',DOTQ
05EE                          ;*Macro unroll:  hCODE IMEDD+2, ".|", DOTQ
05EE                          ALIGN   2   
05EE                DOTQ:        
05EE   00                     NOP      
05EF   CD 02 06               CALL   doLIST   
05F2   D0 03 52 0C EE 03 50 06 DW   COMPI,DOTQP,STRCQ,EXIT   
05FA                             ; ;   UNLOOP	( -- ) ( R: loop-sys -- )	\ CORE
05FA                             ; ;		Discard loop-control parameters for the current nesting level.
05FA                             ; ;		An UNLOOP is required for each nesting level before the
05FA                             ; ;		definition may be EXITed.
05FA                             ; mCOLON	COMPO+6,"UNLOOP",UNLOOP
05FA                             ; 	DW	RFrom,RFrom,RFrom,DDROP,ToR,EXIT
05FA                             ;   doCONST	( -- x )
05FA                             ;	Run-time routine of CONSTANT and VARIABLE.
05FA                          ;*Macro unroll: hCODE	COMPO+7, 'doCONST', DoCONST
05FA                          ALIGN   2   
05FA                DOCONST:      
05FA   E1                     POP   HL   ;10t
05FB   C5                     PUSH   BC   ;11t
05FC   4E                     LD   C,(HL)   ; 7t
05FD   23                     INC   HL   ; 6t
05FE   46                     LD   B,(HL)   ; 7t
05FF                          ;*Macro unroll:  mNEXT
05FF   EB                     EX   DE,HL   
0600                          ;*Macro unroll:  mNEXTHL                         ; 34t
0600   FD E9                  JP   (IY)   ; 34t
0602                             ;   doLIST	( -- ) ( R: -- nest-sys )
0602                             ;	Process colon list.
0602                          ;*Macro unroll: hCODE	COMPO+6, 'doLIST', DoLIST
0602                          ALIGN   2   
0602                DOLIST:      
0602   DD 2B                  DEC   IX   ;10t
0604   DD 72 00               LD   (IX+0),D   ;19t
0607   DD 2B                  DEC   IX   ;10t
0609   DD 73 00               LD   (IX+0),E   ;19t
060C   E1                     POP   HL   ;10t
060D                          ;*Macro unroll:  mNEXTHL							
060D   FD E9                  JP   (IY)   
060F                             ;   DOLIT	( -- x )
060F                             ;	Push an inline literal.
060F                          ;*Macro unroll: hCODE	COMPO+5, 'DOLIT', DOLIT
060F                          ALIGN   2   
0610                DOLIT:       
0610   C5                     PUSH   BC   ; 11t
0611   EB                     EX   DE,HL   ; 4t
0612   4E                     LD   C,(HL)   ; 7t
0613   23                     INC   HL   ; 6t
0614   46                     LD   B,(HL)   ; 7t
0615   23                     INC   HL   ; 6t
0616                          ;*Macro unroll:  mNEXTHL
0616   FD E9                  JP   (IY)   
0618                             ;   doVAR       ( -- a )
0618                             ;   Run time routine for VARIABLE and CREATE.
0618                          ;*Macro unroll: hCOLON  COMPO+5, 'doVAR', DoVAR
0618                          ;*Macro unroll:  hCODE COMPO+5, "doVAR", DoVAR
0618                          ALIGN   2   
0618                DOVAR:       
0618   00                     NOP      
0619   CD 02 06               CALL   doLIST   
061C   08 10 50 06            DW   RFROM,EXIT   
0620                             ;   UP          ( -- a )
0620                             ;   Pointer to the user area.
0620                          ;*Macro unroll: hCOLON  2, 'UP', UP
0620                          ;*Macro unroll:  hCODE 2, "UP", UP
0620                          ALIGN   2   
0620                UP:          
0620   00                     NOP      
0621   CD 02 06               CALL   doLIST   
0624   18 06                  DW   DoVAR   
0626   45 24                  DW   UPP   
0628                             ;   doUSER      ( -- a )
0628                             ;   Run time routine for user variables.
0628                          ;*Macro unroll: hCOLON  COMPO+6,'doUSER',DOUSE
0628                          ;*Macro unroll:  hCODE COMPO+6, "doUSER", DOUSE
0628                          ALIGN   2   
0628                DOUSE:       
0628   00                     NOP      
0629   CD 02 06               CALL   doLIST   
062C   08 10 6C 0E 20 06 6C 0E 7A 01 50 06 DW   RFROM,AT,UP,AT,PLUS,EXIT   
0638                             ;   do$         ( -- a )
0638                             ;               Return the address of a compiled string.
0638                          ;*Macro unroll: hCOLON  COMPO+3,'do$',DOSTR
0638                          ;*Macro unroll:  hCODE COMPO+3, "do$", DOSTR
0638                          ALIGN   2   
0638                DOSTR:       
0638   00                     NOP      
0639   CD 02 06               CALL   doLIST   
063C   08 10 84 0E 08 10 E2 0E 7A 01 DW   RFROM,RAT,RFROM,COUNT,PLUS   
0646   DA 0F FA 0F 1E 10 FA 0F 50 06 DW   ALGND,TOR,SWAP,TOR,EXIT   
0650                             ;   EXIT	( -- ) ( R: nest-sys -- )	\ CORE
0650                             ;	Return control to the calling definition.
0650                          ;*Macro unroll: mCODE	COMPO+4, 'EXIT', EXIT
0650                          ALIGN   2   
0650                EXIT:        
0650                VVCODE:   .SET   $   
0650                VVLEN:    .SET   (COMPO+4 & 01FH) / CELLL   
1930                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1930                VVNAME:   .SET   $   
1930   50 06 5E 19            DW   vvCODE,vvLINK   
1934                VVLINK:   .SET   $   
1934   24 45 58 49 54         DB   COMPO+4,"EXIT"   
0650                          .ORG   vvCODE   
0650   DD 6E 00               LD   L,(IX+0)   
0653   DD 23                  INC   IX   
0655   DD 66 00               LD   H,(IX+0)   
0658   DD 23                  INC   IX   
065A                          ;*Macro unroll:  mNEXTHL
065A   FD E9                  JP   (IY)   
065C                             ;   next        ( -- )
065C                             ;               Run time code for the single index loop.
065C                             ;               : next ( -- ) \ hilevel model
065C                             ;                 r> r> dup if 1 - >r @ >r exit then drop cell+ >r ;
065C                          ;*Macro unroll: mCODE   COMPO+4,'next',DONXT
065C                          ALIGN   2   
065C                DONXT:       
065C                VVCODE:   .SET   $   
065C                VVLEN:    .SET   (COMPO+4 & 01FH) / CELLL   
1906                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1906                VVNAME:   .SET   $   
1906   5C 06 34 19            DW   vvCODE,vvLINK   
190A                VVLINK:   .SET   $   
190A   24 6E 65 78 74         DB   COMPO+4,"next"   
065C                          .ORG   vvCODE   
065C   DD E5                  PUSH   IX   
065E   E1                     POP   HL   ; load rp into HL
065F   7E                     LD   A,(HL)   ; a = low byte of r@
0660   B7                     OR   A   
0661   20 10                  JR   NZ,DECLOW   ; low > 0 goto dec low
0663   23                     INC   HL   
0664   7E                     LD   A,(HL)   ; a = high byte of r@
0665   B7                     OR   A   
0666   20 09                  JR   NZ,DECHILO   ; high > 0 goto dec hi dec lo
0668   23                     INC   HL   
0669   E5                     PUSH   HL   
066A   DD E1                  POP   IX   ; pop r@
066C   13                     INC   DE   ; IP = skip following word
066D   13                     INC   DE   
066E                          ;*Macro unroll:  mNEXT                               ; continue
066E   EB                     EX   DE,HL   ; continue
066F                          ;*Macro unroll:  mNEXTHL                         ; 34t
066F   FD E9                  JP   (IY)   ; 34t
0671                DECHILO:      
0671   35                     DEC   (HL)   ; dec high byte of r@
0672   2B                     DEC   HL   
0673                DECLOW:      
0673   35                     DEC   (HL)   ; dec low byte of r@
0674   6B                     LD   L,E   ; DE points to location of loop address
0675   62                     LD   H,D   
0676   5E                     LD   E,(HL)   ; DE points to loop address
0677   23                     INC   HL   
0678   56                     LD   D,(HL)   
0679                          ;*Macro unroll:  mNEXT                               ; continue to loop address
0679   EB                     EX   DE,HL   ; continue to loop address
067A                          ;*Macro unroll:  mNEXTHL                         ; 34t
067A   FD E9                  JP   (IY)   ; 34t
067C                             ;   DIGIT       ( u -- c )
067C                             ;               Convert digit u to a character.
067C                          ;*Macro unroll: hCOLON  5,'DIGIT',DIGIT
067C                          ;*Macro unroll:  hCODE 5, "DIGIT", DIGIT
067C                          ALIGN   2   
067C                DIGIT:       
067C   00                     NOP      
067D   CD 02 06               CALL   doLIST   
0680   10 06 09 00 26 10 00 02 DW   DOLIT,9,OVER,LESS   
0688   10 06 07 00 5C 01 7A 01 DW   DOLIT,7,ANDD,PLUS   
0690   10 06 7A 01 50 06      DW   DOLIT,"0",PLUS,EXIT   
0696                             ;   EXTRACT     ( n base -- n c )
0696                             ;               Extract the least significant digit from n.
0696                          ;*Macro unroll: hCOLON  7,'EXTRACT',EXTRC
0696                          ;*Macro unroll:  hCODE 7, "EXTRACT", EXTRC
0696                          ALIGN   2   
0696                EXTRC:       
0696   00                     NOP      
0697   CD 02 06               CALL   doLIST   
069A   10 06 00 00 1E 10 5E 02 DW   DOLIT,0,SWAP,UMMOD   
06A2   1E 10 7C 06 50 06      DW   SWAP,DIGIT,EXIT   
06A8                             ;   <#          ( -- )
06A8                             ;               Initiate the numeric output process.
06A8                          ;*Macro unroll: mCOLON  2,'<#',BDIGS
06A8                          ;*Macro unroll:  mCODE 2, "<#", BDIGS
06A8                          ALIGN   2   
06A8                BDIGS:       
06A8                VVCODE:   .SET   $   
06A8                VVLEN:    .SET   (2 & 01FH) / CELLL   
18FE                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
18FE                VVNAME:   .SET   $   
18FE   A8 06 0A 19            DW   vvCODE,vvLINK   
1902                VVLINK:   .SET   $   
1902   02 3C 23               DB   2,"<#"   
06A8                          .ORG   vvCODE   
06A8   00                     NOP      
06A9   CD 02 06               CALL   doLIST   
06AC   FE 0E 16 11 62 0E 50 06 DW   PAD,HLD,STORE,EXIT   
06B4                             ;   HOLD        ( c -- )
06B4                             ;               Insert a character into the numeric output string.
06B4                          ;*Macro unroll: mCOLON  4,'HOLD',HOLD
06B4                          ;*Macro unroll:  mCODE 4, "HOLD", HOLD
06B4                          ALIGN   2   
06B4                HOLD:        
06B4                VVCODE:   .SET   $   
06B4                VVLEN:    .SET   (4 & 01FH) / CELLL   
18F4                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
18F4                VVNAME:   .SET   $   
18F4   B4 06 02 19            DW   vvCODE,vvLINK   
18F8                VVLINK:   .SET   $   
18F8   04 48 4F 4C 44         DB   4,"HOLD"   
06B4                          .ORG   vvCODE   
06B4   00                     NOP      
06B5   CD 02 06               CALL   doLIST   
06B8   16 11 6C 0E 10 06 01 00 B4 01 DW   HLD,AT,DOLIT,1,SUBB   
06C2   16 10 16 11 62 0E 74 0E 50 06 DW   DUPP,HLD,STORE,CSTOR,EXIT   
06CC                             ;   #           ( u -- u )
06CC                             ;               Extract one digit from u and append the digit to output string.
06CC                          ;*Macro unroll: mCOLON  1,'#',DIG
06CC                          ;*Macro unroll:  mCODE 1, "#", DIG
06CC                          ALIGN   2   
06CC                DIG:         
06CC                VVCODE:   .SET   $   
06CC                VVLEN:    .SET   (1 & 01FH) / CELLL   
18EE                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
18EE                VVNAME:   .SET   $   
18EE   CC 06 F8 18            DW   vvCODE,vvLINK   
18F2                VVLINK:   .SET   $   
18F2   01 23                  DB   1,"#"   
06CC                          .ORG   vvCODE   
06CC   00                     NOP      
06CD   CD 02 06               CALL   doLIST   
06D0   D6 10 6C 0E 96 06 B4 06 50 06 DW   BASE,AT,EXTRC,HOLD,EXIT   
06DA                             ;   #S          ( u -- 0 )
06DA                             ;               Convert u until all digits are added to the output string.
06DA                          ;*Macro unroll: mCOLON  2,'#S',DIGS
06DA                          ;*Macro unroll:  mCODE 2, "#S", DIGS
06DA                          ALIGN   2   
06DA                DIGS:        
06DA                VVCODE:   .SET   $   
06DA                VVLEN:    .SET   (2 & 01FH) / CELLL   
18E6                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
18E6                VVNAME:   .SET   $   
18E6   DA 06 F2 18            DW   vvCODE,vvLINK   
18EA                VVLINK:   .SET   $   
18EA   02 23 53               DB   2,"#S"   
06DA                          .ORG   vvCODE   
06DA   00                     NOP      
06DB   CD 02 06               CALL   doLIST   
06DE                DIGS1:       
06DE   CC 06 16 10            DW   DIG,DUPP   
06E2   46 0E EA 06            DW   QBRAN,DIGS2   
06E6   52 0E DE 06            DW   BRAN,DIGS1   
06EA                DIGS2:       
06EA   50 06                  DW   EXIT   
06EC                             ;   SIGN        ( n -- )
06EC                             ;               Add a minus sign to the numeric output string.
06EC                          ;*Macro unroll: mCOLON	4,'SIGN',SIGN
06EC                          ;*Macro unroll:  mCODE 4, "SIGN", SIGN
06EC                          ALIGN   2   
06EC                SIGN:        
06EC                VVCODE:   .SET   $   
06EC                VVLEN:    .SET   (4 & 01FH) / CELLL   
18DC                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
18DC                VVNAME:   .SET   $   
18DC   EC 06 EA 18            DW   vvCODE,vvLINK   
18E0                VVLINK:   .SET   $   
18E0   04 53 49 47 4E         DB   4,"SIGN"   
06EC                          .ORG   vvCODE   
06EC   00                     NOP      
06ED   CD 02 06               CALL   doLIST   
06F0   54 01 46 0E FC 06      DW   ZLESS,QBRAN,SIGN1   
06F6   10 06 2D 00 B4 06      DW   DoLIT,MINUSS,HOLD   
06FC                SIGN1:       
06FC   50 06                  DW   EXIT   
06FE                             ;   #>          ( w -- b u )
06FE                             ;               Prepare the output string to be TYPE'd.
06FE                          ;*Macro unroll: mCOLON  2,'#>',EDIGS
06FE                          ;*Macro unroll:  mCODE 2, "#>", EDIGS
06FE                          ALIGN   2   
06FE                EDIGS:       
06FE                VVCODE:   .SET   $   
06FE                VVLEN:    .SET   (2 & 01FH) / CELLL   
18D4                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
18D4                VVNAME:   .SET   $   
18D4   FE 06 E0 18            DW   vvCODE,vvLINK   
18D8                VVLINK:   .SET   $   
18D8   02 23 3E               DB   2,"#>"   
06FE                          .ORG   vvCODE   
06FE   00                     NOP      
06FF   CD 02 06               CALL   doLIST   
0702   1A 10 16 11 6C 0E      DW   DROP,HLD,AT   
0708   FE 0E 26 10 B4 01 50 06 DW   PAD,OVER,SUBB,EXIT   
0710                             ;   str         ( n -- b u )
0710                             ;               Convert a signed integer to a numeric string.
0710                          ;*Macro unroll: hCOLON  3,'str',STR
0710                          ;*Macro unroll:  hCODE 3, "str", STR
0710                          ALIGN   2   
0710                STR:         
0710   00                     NOP      
0711   CD 02 06               CALL   doLIST   
0714   16 10 FA 0F BE 01      DW   DUPP,TOR,ABSS   
071A   A8 06 DA 06 08 10      DW   BDIGS,DIGS,RFROM   
0720   EC 06 FE 06 50 06      DW   SIGN,EDIGS,EXIT   
0726                             ;   HEX         ( -- )
0726                             ;               Use radix 16 as base for numeric conversions.
0726                          ;*Macro unroll: mCOLON  3,'HEX',HEX
0726                          ;*Macro unroll:  mCODE 3, "HEX", HEX
0726                          ALIGN   2   
0726                HEX:         
0726                VVCODE:   .SET   $   
0726                VVLEN:    .SET   (3 & 01FH) / CELLL   
18CC                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
18CC                VVNAME:   .SET   $   
18CC   26 07 D8 18            DW   vvCODE,vvLINK   
18D0                VVLINK:   .SET   $   
18D0   03 48 45 58            DB   3,"HEX"   
0726                          .ORG   vvCODE   
0726   00                     NOP      
0727   CD 02 06               CALL   doLIST   
072A   10 06 10 00 D6 10 62 0E 50 06 DW   DOLIT,16,BASE,STORE,EXIT   
0734                             ;   DECIMAL     ( -- )
0734                             ;               Use radix 10 as base for numeric conversions.
0734                          ;*Macro unroll: mCOLON  7,'DECIMAL',DECIMAL
0734                          ;*Macro unroll:  mCODE 7, "DECIMAL", DECIMAL
0734                          ALIGN   2   
0734                DECIMAL:      
0734                VVCODE:   .SET   $   
0734                VVLEN:    .SET   (7 & 01FH) / CELLL   
18C0                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
18C0                VVNAME:   .SET   $   
18C0   34 07 D0 18            DW   vvCODE,vvLINK   
18C4                VVLINK:   .SET   $   
18C4   07 44 45 43 49 4D 41 4C DB   7,"DECIMAL"   
0734                          .ORG   vvCODE   
0734   00                     NOP      
0735   CD 02 06               CALL   doLIST   
0738   10 06 10 00 D6 10 62 0E 50 06 DW   DOLIT,16,BASE,STORE,EXIT   
0742                             ;   BL          ( -- 32 )
0742                             ;               Return 32, the blank character.
0742                          ;*Macro unroll: mCOLON	2,'BL',BLANK
0742                          ;*Macro unroll:  mCODE 2, "BL", BLANK
0742                          ALIGN   2   
0742                BLANK:       
0742                VVCODE:   .SET   $   
0742                VVLEN:    .SET   (2 & 01FH) / CELLL   
18B8                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
18B8                VVNAME:   .SET   $   
18B8   42 07 C4 18            DW   vvCODE,vvLINK   
18BC                VVLINK:   .SET   $   
18BC   02 42 4C               DB   2,"BL"   
0742                          .ORG   vvCODE   
0742   00                     NOP      
0743   CD 02 06               CALL   doLIST   
0746   10 06 20 00 50 06      DW   DoLIT,SPACEE,EXIT   
074C                             ;   >CHAR       ( c -- c )
074C                             ;               Filter non-printing characters.
074C                          ;*Macro unroll: hCOLON  5,'>CHAR',TCHAR
074C                          ;*Macro unroll:  hCODE 5, ">CHAR", TCHAR
074C                          ALIGN   2   
074C                TCHAR:       
074C   00                     NOP      
074D   CD 02 06               CALL   doLIST   
0750   10 06 7F 00 5C 01 16 10 DW   DoLIT,$7F,ANDD,DUPP   ;mask msb
0758   10 06 7F 00            DW   DoLIT,127   
075C   10 06 20 00 40 02      DW   DoLIT,SPACEE,WITHI   ;check for printable
0762   46 0E 6C 07            DW   QBRAN,TCHA1   
0766   1A 10 10 06 5F 00      DW   DROP,DoLIT,UNDERSC   ;replace non-printables
076C                TCHA1:       
076C   50 06                  DW   EXIT   
076E                             ;   DIGIT?      ( c base -- u t )
076E                             ;               Convert a character to its numeric value. A flag indicates success.
076E                          ;*Macro unroll: hCOLON  6,'DIGIT?',DIGTQ
076E                          ;*Macro unroll:  hCODE 6, "DIGIT?", DIGTQ
076E                          ALIGN   2   
076E                DIGTQ:       
076E   00                     NOP      
076F   CD 02 06               CALL   doLIST   
0772   FA 0F 10 06 B4 01      DW   TOR,DOLIT,"0",SUBB   
0778   10 06 09 00 26 10 00 02 DW   DOLIT,9,OVER,LESS   
0780   46 0E 94 07            DW   QBRAN,DGTQ1   
0784   10 06 07 00 B4 01      DW   DOLIT,7,SUBB   
078A   16 10 10 06 0A 00 00 02 66 01 DW   DUPP,DOLIT,10,LESS,ORR   
0794                DGTQ1:       
0794   16 10 08 10 E4 01 50 06 DW   DUPP,RFROM,ULESS,EXIT   
079C                             ;   NUMBER?     ( a -- n T | a F )
079C                             ;               Convert a number string to integer. Push a flag on tos.
079C                          ;*Macro unroll: hCOLON  7,'NUMBER?',NUMBQ
079C                          ;*Macro unroll:  hCODE 7, "NUMBER?", NUMBQ
079C                          ALIGN   2   
079C                NUMBQ:       
079C   00                     NOP      
079D   CD 02 06               CALL   doLIST   
07A0   D6 10 6C 0E FA 0F 10 06 00 00 26 10 E2 0E DW   BASE,AT,TOR,DOLIT,0,OVER,COUNT   
07AE   26 10 7C 0E 10 06 CE 01 DW   OVER,CAT,DOLIT,"$",EQUAL   
07B6   46 0E CC 07            DW   QBRAN,NUMQ1   
07BA   26 07 1E 10 10 06 01 00 7A 01 DW   HEX,SWAP,DOLIT,1,PLUS   
07C4   1E 10 10 06 01 00 B4 01 DW   SWAP,DOLIT,1,SUBB   
07CC                NUMQ1:       
07CC   26 10 7C 0E 10 06 CE 01 FA 0F DW   OVER,CAT,DOLIT,"-",EQUAL,TOR   
07D6   1E 10 84 0E B4 01 1E 10 84 0E 7A 01 2E 10 DW   SWAP,RAT,SUBB,SWAP,RAT,PLUS,QDUP   
07E4   46 0E 36 08            DW   QBRAN,NUMQ6   
07E8   10 06 01 00 B4 01 FA 0F DW   DOLIT,1,SUBB,TOR   
07F0                NUMQ2:       
07F0   16 10 FA 0F 7C 0E D6 10 6C 0E 6E 07 DW   DUPP,TOR,CAT,BASE,AT,DIGTQ   
07FC   46 0E 28 08            DW   QBRAN,NUMQ4   
0800   1E 10 D6 10 6C 0E 34 03 7A 01 08 10 DW   SWAP,BASE,AT,STAR,PLUS,RFROM   
080C   10 06 01 00 7A 01      DW   DOLIT,1,PLUS   
0812   5C 06 F0 07            DW   DONXT,NUMQ2   
0816   84 0E 1E 10 1A 10      DW   RAT,SWAP,DROP   
081C   46 0E 22 08            DW   QBRAN,NUMQ3   
0820   90 01                  DW   NEGAT   
0822                NUMQ3:       
0822   1E 10                  DW   SWAP   
0824   52 0E 34 08            DW   BRAN,NUMQ5   
0828                NUMQ4:       
0828   08 10 08 10 4A 10 4A 10 10 06 00 00 DW   RFROM,RFROM,DDROP,DDROP,DOLIT,0   
0834                NUMQ5:       
0834   16 10                  DW   DUPP   
0836                NUMQ6:       
0836   08 10 4A 10            DW   RFROM,DDROP   
083A   08 10 D6 10 62 0E 50 06 DW   RFROM,BASE,STORE,EXIT   
0842                             ;   parse       ( b u c -- b u delta ; <string> )
0842                             ;               Scan string delimited by c. Return found string and its offset.
0842                          ;*Macro unroll: hCOLON  5,'parse',PARS
0842                          ;*Macro unroll:  hCODE 5, "parse", PARS
0842                          ALIGN   2   
0842                PARS:        
0842   00                     NOP      
0843   CD 02 06               CALL   doLIST   
0846   DE 10 62 0E 26 10 FA 0F 16 10 DW   TEMP,STORE,OVER,TOR,DUPP   
0850   46 0E DE 08            DW   QBRAN,PARS8   
0854   10 06 01 00 B4 01 DE 10 6C 0E 42 07 CE 01 DW   DOLIT,1,SUBB,TEMP,AT,BLANK,EQUAL   
0862   46 0E 90 08            DW   QBRAN,PARS3   
0866   FA 0F                  DW   TOR   
0868                PARS1:       
0868   42 07 26 10 7C 0E      DW   BLANK,OVER,CAT   ;skip leading blanks ONLY
086E   B4 01 54 01 84 01      DW   SUBB,ZLESS,INVER   
0874   46 0E 8E 08            DW   QBRAN,PARS2   
0878   10 06 01 00 7A 01      DW   DOLIT,1,PLUS   
087E   5C 06 68 08            DW   DONXT,PARS1   
0882   08 10 1A 10 10 06 00 00 16 10 50 06 DW   RFROM,DROP,DOLIT,0,DUPP,EXIT   
088E                PARS2:       
088E   08 10                  DW   RFROM   
0890                PARS3:       
0890   26 10 1E 10            DW   OVER,SWAP   
0894   FA 0F                  DW   TOR   
0896                PARS4:       
0896   DE 10 6C 0E 26 10 7C 0E B4 01 DW   TEMP,AT,OVER,CAT,SUBB   ;scan for delimiter
08A0   DE 10 6C 0E 42 07 CE 01 DW   TEMP,AT,BLANK,EQUAL   
08A8   46 0E AE 08            DW   QBRAN,PARS5   
08AC   54 01                  DW   ZLESS   
08AE                PARS5:       
08AE   46 0E C4 08            DW   QBRAN,PARS6   
08B2   10 06 01 00 7A 01      DW   DOLIT,1,PLUS   
08B8   5C 06 96 08            DW   DONXT,PARS4   
08BC   16 10 FA 0F            DW   DUPP,TOR   
08C0   52 0E D2 08            DW   BRAN,PARS7   
08C4                PARS6:       
08C4   08 10 1A 10 16 10      DW   RFROM,DROP,DUPP   
08CA   10 06 01 00 7A 01 FA 0F DW   DOLIT,1,PLUS,TOR   
08D2                PARS7:       
08D2   26 10 B4 01            DW   OVER,SUBB   
08D6   08 10 08 10 B4 01 50 06 DW   RFROM,RFROM,SUBB,EXIT   
08DE                PARS8:       
08DE   26 10 08 10 B4 01 50 06 DW   OVER,RFROM,SUBB,EXIT   
08E6                             ;   PARSE       ( c -- b u ; <string> )
08E6                             ;               Scan input stream and return counted string delimited by c.
08E6                          ;*Macro unroll: mCOLON  5,'PARSE',PARSE
08E6                          ;*Macro unroll:  mCODE 5, "PARSE", PARSE
08E6                          ALIGN   2   
08E6                PARSE:       
08E6                VVCODE:   .SET   $   
08E6                VVLEN:    .SET   (5 & 01FH) / CELLL   
18AE                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
18AE                VVNAME:   .SET   $   
18AE   E6 08 BC 18            DW   vvCODE,vvLINK   
18B2                VVLINK:   .SET   $   
18B2   05 50 41 52 53 45      DB   5,"PARSE"   
08E6                          .ORG   vvCODE   
08E6   00                     NOP      
08E7   CD 02 06               CALL   doLIST   
08EA   FA 0F 0C 0F EE 10 6C 0E 7A 01 DW   TOR,TIB,INN,AT,PLUS   ;current input buffer pointer
08F4   F6 10 6C 0E EE 10 6C 0E B4 01 DW   NTIB,AT,INN,AT,SUBB   ;remaining count
08FE   08 10 42 08 EE 10 B0 0E 50 06 DW   RFROM,PARS,INN,PSTOR,EXIT   
0908                             ;   (           ( -- )
0908                             ;               Ignore following string up to next ) . A comment.
0908                          ;*Macro unroll: mCOLON  IMEDD+1,'(',PAREN
0908                          ;*Macro unroll:  mCODE IMEDD+1, "(", PAREN
0908                          ALIGN   2   
0908                PAREN:       
0908                VVCODE:   .SET   $   
0908                VVLEN:    .SET   (IMEDD+1 & 01FH) / CELLL   
1868                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1868                VVNAME:   .SET   $   
1868   08 09 B2 18            DW   vvCODE,vvLINK   
186C                VVLINK:   .SET   $   
186C   41 28                  DB   IMEDD+1,"("   
0908                          .ORG   vvCODE   
0908   00                     NOP      
0909   CD 02 06               CALL   doLIST   
090C   10 06 E6 08 4A 10 50 06 DW   DOLIT,")",PARSE,DDROP,EXIT   
0914                             ;   \           ( -- )
0914                             ;               Ignore following text till the end of line.
0914                          ;*Macro unroll: mCOLON  IMEDD+1, $5C, BKSLA
0914                          ;*Macro unroll:  mCODE IMEDD+1, $5C, BKSLA
0914                          ALIGN   2   
0914                BKSLA:       
0914                VVCODE:   .SET   $   
0914                VVLEN:    .SET   (IMEDD+1 & 01FH) / CELLL   
1822                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1822                VVNAME:   .SET   $   
1822   14 09 6C 18            DW   vvCODE,vvLINK   
1826                VVLINK:   .SET   $   
1826   41 5C                  DB   IMEDD+1,$5C   
0914                          .ORG   vvCODE   
0914   00                     NOP      
0915   CD 02 06               CALL   doLIST   
0918   F6 10 6C 0E EE 10 62 0E 50 06 DW   NTIB,AT,INN,STORE,EXIT   
0922                             ;   CHAR        ( -- c )
0922                             ;               Parse next word and return its first character.
0922                          ;*Macro unroll: mCOLON  4,'CHAR',CHAR
0922                          ;*Macro unroll:  mCODE 4, "CHAR", CHAR
0922                          ALIGN   2   
0922                CHAR:        
0922                VVCODE:   .SET   $   
0922                VVLEN:    .SET   (4 & 01FH) / CELLL   
1818                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1818                VVNAME:   .SET   $   
1818   22 09 26 18            DW   vvCODE,vvLINK   
181C                VVLINK:   .SET   $   
181C   04 43 48 41 52         DB   4,"CHAR"   
0922                          .ORG   vvCODE   
0922   00                     NOP      
0923   CD 02 06               CALL   doLIST   
0926   42 07 E6 08 1A 10 7C 0E 50 06 DW   BLANK,PARSE,DROP,CAT,EXIT   
0930                             ;   TOKEN       ( -- a ; <string> )
0930                             ;               Parse a word from input stream and copy it to name dictionary.
0930                          ;*Macro unroll: hCOLON  5,'TOKEN',TOKEN
0930                          ;*Macro unroll:  hCODE 5, "TOKEN", TOKEN
0930                          ALIGN   2   
0930                TOKEN:       
0930   00                     NOP      
0931   CD 02 06               CALL   doLIST   
0934   42 07 E6 08 10 06 1F 00 2C 02 DW   BLANK,PARSE,DOLIT,31,MIN   
093E   3E 11 6C 0E 26 10 B4 01 82 03 DW   NP,AT,OVER,SUBB,CELLM   
0948   A0 0F 50 06            DW   PACKS,EXIT   
094C                             ;   WORD        ( c -- a ; <string> )
094C                             ;               Parse a word from input stream and copy it to code dictionary.
094C                          ;*Macro unroll: mCOLON  4,'WORD',WORDD
094C                          ;*Macro unroll:  mCODE 4, "WORD", WORDD
094C                          ALIGN   2   
094C                WORDD:       
094C                VVCODE:   .SET   $   
094C                VVLEN:    .SET   (4 & 01FH) / CELLL   
180E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
180E                VVNAME:   .SET   $   
180E   4C 09 1C 18            DW   vvCODE,vvLINK   
1812                VVLINK:   .SET   $   
1812   04 57 4F 52 44         DB   4,"WORD"   
094C                          .ORG   vvCODE   
094C   00                     NOP      
094D   CD 02 06               CALL   doLIST   
0950   E6 08 F4 0E A0 0F 50 06 DW   PARSE,HERE,PACKS,EXIT   
0958                             ;   NAME>       ( na -- ca )
0958                             ;               Return a code address given a name address.
0958                          ;*Macro unroll: hCOLON  5,'NAME>',NAMET
0958                          ;*Macro unroll:  hCODE 5, "NAME>", NAMET
0958                          ALIGN   2   
0958                NAMET:       
0958   00                     NOP      
0959   CD 02 06               CALL   doLIST   
095C   82 03 82 03 6C 0E 50 06 DW   CELLM,CELLM,AT,EXIT   
0964                             ;   SAME?       ( a a u -- a a f \ -0+ )
0964                             ;               Compare u cells in two strings. Return 0 if identical.
0964                          ;*Macro unroll: hCOLON  5,'SAME?',SAMEQ
0964                          ;*Macro unroll:  hCODE 5, "SAME?", SAMEQ
0964                          ALIGN   2   
0964                SAMEQ:       
0964   00                     NOP      
0965   CD 02 06               CALL   doLIST   
0968   FA 0F                  DW   TOR   
096A   52 0E 90 09            DW   BRAN,SAME2   
096E   26 10 84 0E 8E 03 7A 01 6C 0E SAME1:   DW   OVER,RAT,CELLS,PLUS,AT   
0978   26 10 84 0E 8E 03 7A 01 6C 0E DW   OVER,RAT,CELLS,PLUS,AT   
0982   B4 01 2E 10            DW   SUBB,QDUP   
0986   46 0E 90 09            DW   QBRAN,SAME2   
098A   08 10 1A 10 50 06      DW   RFROM,DROP,EXIT   ;strings not equal
0990   5C 06 6E 09  SAME2:    DW   DONXT,SAME1   
0994   10 06 00 00 50 06      DW   DOLIT,0,EXIT   ;strings equal
099A                             ;   find        ( a va -- ca na | a F )
099A                             ;               Search a vocabulary for a string. Return ca and na if succeeded.
099A                          ;*Macro unroll: mCOLON  4,'find',FIND
099A                          ;*Macro unroll:  mCODE 4, "find", FIND
099A                          ALIGN   2   
099A                FIND:        
099A                VVCODE:   .SET   $   
099A                VVLEN:    .SET   (4 & 01FH) / CELLL   
1804                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1804                VVNAME:   .SET   $   
1804   9A 09 12 18            DW   vvCODE,vvLINK   
1808                VVLINK:   .SET   $   
1808   04 66 69 6E 64         DB   4,"find"   
099A                          .ORG   vvCODE   
099A   00                     NOP      
099B   CD 02 06               CALL   doLIST   
099E   1E 10 16 10 7C 0E      DW   SWAP,DUPP,CAT   
09A4   10 06 02 00 0C 03 DE 10 62 0E DW   DOLIT,CELLL,SLASH,TEMP,STORE   
09AE   16 10 6C 0E FA 0F 76 03 1E 10 DW   DUPP,AT,TOR,CELLP,SWAP   
09B8   6C 0E 16 10  FIND1:    DW   AT,DUPP   
09BC   46 0E E8 09            DW   QBRAN,FIND6   
09C0   16 10 6C 0E 10 06 1F 00 5C 01 84 0E 70 01 DW   DUPP,AT,DOLIT,MASKK,ANDD,RAT,XORR   
09CE   46 0E DC 09            DW   QBRAN,FIND2   
09D2   76 03 10 06 FF FF      DW   CELLP,DOLIT,-1   ;true flag
09D8   52 0E E4 09            DW   BRAN,FIND3   
09DC   76 03 DE 10 6C 0E 64 09 FIND2:   DW   CELLP,TEMP,AT,SAMEQ   
09E4   52 0E F4 09  FIND3:    DW   BRAN,FIND4   
09E8   08 10 1A 10  FIND6:    DW   RFROM,DROP   
09EC   1E 10 82 03 1E 10 50 06 DW   SWAP,CELLM,SWAP,EXIT   
09F4   46 0E 00 0A  FIND4:    DW   QBRAN,FIND5   
09F8   82 03 82 03            DW   CELLM,CELLM   
09FC   52 0E B8 09            DW   BRAN,FIND1   
0A00   08 10 1A 10 1E 10 1A 10 FIND5:   DW   RFROM,DROP,SWAP,DROP   
0A08   82 03                  DW   CELLM   
0A0A   16 10 58 09 1E 10 50 06 DW   DUPP,NAMET,SWAP,EXIT   
0A12                             ;   NAME?       ( a -- ca na | a F )
0A12                             ;               Search all context vocabularies for a string.
0A12                          ;*Macro unroll: hCOLON  5,'NAME?',NAMEQ
0A12                          ;*Macro unroll:  hCODE 5, "NAME?", NAMEQ
0A12                          ALIGN   2   
0A12                NAMEQ:       
0A12   00                     NOP      
0A13   CD 02 06               CALL   doLIST   
0A16   26 11 16 10 D2 0E 70 01 DW   CNTXT,DUPP,DAT,XORR   ;?context=also
0A1E   46 0E 24 0A            DW   QBRAN,NAMQ1   
0A22   82 03                  DW   CELLM   ;no, start with context
0A24   FA 0F        NAMQ1:    DW   TOR   
0A26   08 10 76 03 16 10 FA 0F NAMQ2:   DW   RFROM,CELLP,DUPP,TOR   ;next in search order
0A2E   6C 0E 2E 10            DW   AT,QDUP   
0A32   46 0E 44 0A            DW   QBRAN,NAMQ3   
0A36   9A 09 2E 10            DW   FIND,QDUP   ;search vocabulary
0A3A   46 0E 26 0A            DW   QBRAN,NAMQ2   
0A3E   08 10 1A 10 50 06      DW   RFROM,DROP,EXIT   ;found name
0A44   08 10 1A 10  NAMQ3:    DW   RFROM,DROP   ;name not found
0A48   10 06 00 00 50 06      DW   DOLIT,0,EXIT   ;false flag
0A4E                             ;   CATCH       ( ca -- 0 | err# )
0A4E                             ;               Execute word at ca and set up an error frame for it.
0A4E                          ;*Macro unroll: mCOLON  5,'CATCH',CATCH
0A4E                          ;*Macro unroll:  mCODE 5, "CATCH", CATCH
0A4E                          ALIGN   2   
0A4E                CATCH:       
0A4E                VVCODE:   .SET   $   
0A4E                VVLEN:    .SET   (5 & 01FH) / CELLL   
17FA                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
17FA                VVNAME:   .SET   $   
17FA   4E 0A 08 18            DW   vvCODE,vvLINK   
17FE                VVLINK:   .SET   $   
17FE   05 43 41 54 43 48      DB   5,"CATCH"   
0A4E                          .ORG   vvCODE   
0A4E   00                     NOP      
0A4F   CD 02 06               CALL   doLIST   
0A52   9E 0E FA 0F 1E 11 6C 0E FA 0F DW   SPAT,TOR,HANDL,AT,TOR   ;save error frame
0A5C   8E 0E 1E 11 62 0E 42 0E DW   RPAT,HANDL,STORE,EXECU   ;execute
0A64   08 10 1E 11 62 0E      DW   RFROM,HANDL,STORE   ;reSTORE error frame
0A6A   08 10 1A 10 10 06 00 00 50 06 DW   RFROM,DROP,DOLIT,0,EXIT   ;no error
0A74                             ;   THROW       ( err# -- err# )
0A74                             ;               Reset system to current local error frame an update error flag.
0A74                          ;*Macro unroll: mCOLON  5,'THROW',THROW
0A74                          ;*Macro unroll:  mCODE 5, "THROW", THROW
0A74                          ALIGN   2   
0A74                THROW:       
0A74                VVCODE:   .SET   $   
0A74                VVLEN:    .SET   (5 & 01FH) / CELLL   
17F0                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
17F0                VVNAME:   .SET   $   
17F0   74 0A FE 17            DW   vvCODE,vvLINK   
17F4                VVLINK:   .SET   $   
17F4   05 54 48 52 4F 57      DB   5,"THROW"   
0A74                          .ORG   vvCODE   
0A74   00                     NOP      
0A75   CD 02 06               CALL   doLIST   
0A78   1E 11 6C 0E 96 0E      DW   HANDL,AT,RPSTO   ;reSTORE return stack
0A7E   08 10 1E 11 62 0E      DW   RFROM,HANDL,STORE   ;reSTORE handler frame
0A84   08 10 1E 10 FA 0F A8 0E DW   RFROM,SWAP,TOR,SPSTO   ;reSTORE data stack
0A8C   1A 10 08 10 50 06      DW   DROP,RFROM,EXIT   
0A92                             ;   NULL$       ( -- a )
0A92                             ;               Return address of a null string with zero count.
0A92                          ;*Macro unroll: hCOLON  5,'NULL$',NULLS
0A92                          ;*Macro unroll:  hCODE 5, "NULL$", NULLS
0A92                          ALIGN   2   
0A92                NULLS:       
0A92   00                     NOP      
0A93   CD 02 06               CALL   doLIST   
0A96   18 06                  DW   DOVAR   ;emulate CREATE
0A98   00 00                  DW   0   
0A9A   63 6F 79 6F 74 65      DB   99,111,121,111,116,101   
0AA0                          ALIGN   2   
0AA0                             ;   ABORT       ( -- )
0AA0                             ;               Reset data stack and jump to QUIT.
0AA0                          ;*Macro unroll: mCOLON  5,'ABORT',ABORT
0AA0                          ;*Macro unroll:  mCODE 5, "ABORT", ABORT
0AA0                          ALIGN   2   
0AA0                ABORT:       
0AA0                VVCODE:   .SET   $   
0AA0                VVLEN:    .SET   (5 & 01FH) / CELLL   
17E6                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
17E6                VVNAME:   .SET   $   
17E6   A0 0A F4 17            DW   vvCODE,vvLINK   
17EA                VVLINK:   .SET   $   
17EA   05 41 42 4F 52 54      DB   5,"ABORT"   
0AA0                          .ORG   vvCODE   
0AA0   00                     NOP      
0AA1   CD 02 06               CALL   doLIST   
0AA4   92 0A 74 0A            DW   NULLS,THROW   
0AA8                             ;   abort"      ( f -- )
0AA8                             ;               Run time routine of ABORT" . Abort with a message.
0AA8                          ;*Macro unroll: hCOLON  COMPO+6,'abort|',ABORQ
0AA8                          ;*Macro unroll:  hCODE COMPO+6, "abort|", ABORQ
0AA8                          ALIGN   2   
0AA8                ABORQ:       
0AA8   00                     NOP      
0AA9   CD 02 06               CALL   doLIST   
0AAC   46 0E B4 0A            DW   QBRAN,ABOR1   ;text flag
0AB0   38 06 74 0A            DW   DOSTR,THROW   ;pass error string
0AB4                ABOR1:       
0AB4   38 06 1A 10 50 06      DW   DOSTR,DROP,EXIT   ;drop error
0ABA                             ;   $INTERPRET  ( a -- )
0ABA                             ;               Interpret a word. If failed, try to convert it to an integer.
0ABA                          ;*Macro unroll: hCOLON  10,'$INTERPRET',INTER
0ABA                          ;*Macro unroll:  hCODE 10, "$INTERPRET", INTER
0ABA                          ALIGN   2   
0ABA                INTER:       
0ABA   00                     NOP      
0ABB   CD 02 06               CALL   doLIST   
0ABE   12 0A 2E 10            DW   NAMEQ,QDUP   ;?defined
0AC2   46 0E E2 0A            DW   QBRAN,INTE1   
0AC6   6C 0E 10 06 20 00 5C 01 DW   AT,DOLIT,COMPO,ANDD   ;?compile only lexicon bits
0ACE                          ;*Macro unroll:  mDSTR   ABORQ,' compile only'
0ACE   A8 0A                  DW   ABORQ   
0AD0                VVLEN:    .SET   $   
0AD0   00 20 63 6F 6D 70 69 6C 65 20 6F 6E 6C 79 DB   0," compile only"   
0ADE                VVCODE:   .SET   $   
0AD0                          .ORG   vvLEN   
0AD0   0D                     DB   vvCODE - vvLEN - 1   
0ADE                          .ORG   vvCODE   
0ADE   42 0E 50 06            DW   EXECU,EXIT   ;execute defined word
0AE2                INTE1:       
0AE2   0E 11 18 0F            DW   TNUMB,ATEXE   ;convert a number
0AE6   46 0E EC 0A            DW   QBRAN,INTE2   
0AEA   50 06                  DW   EXIT   
0AEC                INTE2:       
0AEC   74 0A                  DW   THROW   ;error
0AEE                             ;   [           ( -- )
0AEE                             ;               Start the text interpreter.
0AEE                          ;*Macro unroll: mCOLON  IMEDD+1,'[',LBRAC
0AEE                          ;*Macro unroll:  mCODE IMEDD+1, "[", LBRAC
0AEE                          ALIGN   2   
0AEE                LBRAC:       
0AEE                VVCODE:   .SET   $   
0AEE                VVLEN:    .SET   (IMEDD+1 & 01FH) / CELLL   
17A0                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
17A0                VVNAME:   .SET   $   
17A0   EE 0A EA 17            DW   vvCODE,vvLINK   
17A4                VVLINK:   .SET   $   
17A4   41 5B                  DB   IMEDD+1,"["   
0AEE                          .ORG   vvCODE   
0AEE   00                     NOP      
0AEF   CD 02 06               CALL   doLIST   
0AF2   10 06 BA 0A 06 11 62 0E 50 06 DW   DOLIT,INTER,TEVAL,STORE,EXIT   
0AFC                             ;   .OK         ( -- )
0AFC                             ;               Display "ok" only while interpreting.
0AFC                          ;*Macro unroll: mCOLON  3,'.OK',DOTOK
0AFC                          ;*Macro unroll:  mCODE 3, ".OK", DOTOK
0AFC                          ALIGN   2   
0AFC                DOTOK:       
0AFC                VVCODE:   .SET   $   
0AFC                VVLEN:    .SET   (3 & 01FH) / CELLL   
1798                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1798                VVNAME:   .SET   $   
1798   FC 0A A4 17            DW   vvCODE,vvLINK   
179C                VVLINK:   .SET   $   
179C   03 2E 4F 4B            DB   3,".OK"   
0AFC                          .ORG   vvCODE   
0AFC   00                     NOP      
0AFD   CD 02 06               CALL   doLIST   
0B00   10 06 BA 0A 06 11 6C 0E CE 01 DW   DOLIT,INTER,TEVAL,AT,EQUAL   
0B0A   46 0E 14 0B            DW   QBRAN,DOTO1   
0B0E                          ;*Macro unroll:  mDSTR      DOTQP,' ok'
0B0E   52 0C                  DW   DOTQP   
0B10                VVLEN:    .SET   $   
0B10   00 20 6F 6B            DB   0," ok"   
0B14                VVCODE:   .SET   $   
0B10                          .ORG   vvLEN   
0B10   03                     DB   vvCODE - vvLEN - 1   
0B14                          .ORG   vvCODE   
0B14   38 0C 50 06  DOTO1:    DW   CR,EXIT   
0B18                             ;   ?STACK      ( -- )
0B18                             ;               Abort if the data stack underflows.
0B18                          ;*Macro unroll: hCOLON  6,'?STACK',QSTAC
0B18                          ;*Macro unroll:  hCODE 6, "?STACK", QSTAC
0B18                          ALIGN   2   
0B18                QSTAC:       
0B18   00                     NOP      
0B19   CD 02 06               CALL   doLIST   
0B1C   80 10 54 01            DW   DEPTH,ZLESS   ;check only for underflow
0B20                          ;*Macro unroll:  mDSTR      ABORQ,' underflow'
0B20   A8 0A                  DW   ABORQ   
0B22                VVLEN:    .SET   $   
0B22   00 20 75 6E 64 65 72 66 6C 6F 77 DB   0," underflow"   
0B2D                VVCODE:   .SET   $   
0B22                          .ORG   vvLEN   
0B22   0A                     DB   vvCODE - vvLEN - 1   
0B2D                          .ORG   vvCODE   
0B2D   50 06                  DW   EXIT   
0B2F                             ;   EVAL        ( -- )
0B2F                             ;               Interpret the input stream.
0B2F                          ;*Macro unroll: mCOLON  4,'EVAL',EVAL
0B2F                          ;*Macro unroll:  mCODE 4, "EVAL", EVAL
0B2F                          ALIGN   2   
0B30                EVAL:        
0B30                VVCODE:   .SET   $   
0B30                VVLEN:    .SET   (4 & 01FH) / CELLL   
178E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
178E                VVNAME:   .SET   $   
178E   30 0B 9C 17            DW   vvCODE,vvLINK   
1792                VVLINK:   .SET   $   
1792   04 45 56 41 4C         DB   4,"EVAL"   
0B30                          .ORG   vvCODE   
0B30   00                     NOP      
0B31   CD 02 06               CALL   doLIST   
0B34                EVAL1:       
0B34   30 09 16 10 7C 0E      DW   TOKEN,DUPP,CAT   ;?input stream empty
0B3A   46 0E 48 0B            DW   QBRAN,EVAL2   
0B3E   06 11 18 0F 18 0B      DW   TEVAL,ATEXE,QSTAC   ;evaluate input, check stack
0B44   52 0E 34 0B            DW   BRAN,EVAL1   
0B48                EVAL2:       
0B48   1A 10 CE 10 18 0F 50 06 DW   DROP,TPROM,ATEXE,EXIT   ;prompt
0B50                             ;   PC!         ( uc p --  )
0B50                             ;               output uc to IO port p
0B50                          ;*Macro unroll: mCODE   3,'PC!',PCSTO
0B50                          ALIGN   2   
0B50                PCSTO:       
0B50                VVCODE:   .SET   $   
0B50                VVLEN:    .SET   (3 & 01FH) / CELLL   
1786                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1786                VVNAME:   .SET   $   
1786   50 0B 92 17            DW   vvCODE,vvLINK   
178A                VVLINK:   .SET   $   
178A   03 50 43 21            DB   3,"PC!"   
0B50                          .ORG   vvCODE   
0B50   D9                     EXX      ; 4t
0B51   D1                     POP   DE   ;10t
0B52   7B                     LD   A,E   ; 4t
0B53   ED 79                  OUT   (C),A   ;12t
0B55   D9                     EXX      ; 4t
0B56                          ;*Macro unroll:  mNEXT
0B56   EB                     EX   DE,HL   
0B57                          ;*Macro unroll:  mNEXTHL                         ; 34t
0B57   FD E9                  JP   (IY)   ; 34t
0B59                             ;   PC@         ( p -- uc )
0B59                             ;               output uc to IO port p
0B59                          ;*Macro unroll: mCODE   3,'PC@',PCAT
0B59                          ALIGN   2   
0B5A                PCAT:        
0B5A                VVCODE:   .SET   $   
0B5A                VVLEN:    .SET   (3 & 01FH) / CELLL   
177E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
177E                VVNAME:   .SET   $   
177E   5A 0B 8A 17            DW   vvCODE,vvLINK   
1782                VVLINK:   .SET   $   
1782   03 50 43 40            DB   3,"PC@"   
0B5A                          .ORG   vvCODE   
0B5A   D9                     EXX      ; 4t
0B5B   ED 78                  IN   A,(C)   ;12t
0B5D   5F                     LD   E,A   ; 4t
0B5E   16 00                  LD   D,0   ; 7t
0B60   D5                     PUSH   DE   ;11t
0B61   D9                     EXX      ; 4t
0B62                          ;*Macro unroll:  mNEXT
0B62   EB                     EX   DE,HL   
0B63                          ;*Macro unroll:  mNEXTHL                         ; 34t
0B63   FD E9                  JP   (IY)   ; 34t
0B65                             ;   !IO         ( -- )
0B65                             ;               Initialize the serial I/O devices.
0B65                          ;*Macro unroll: mCODE   3,'!IO', STOIO ;
0B65                          ALIGN   2   ; 
0B66                STOIO:       
0B66                VVCODE:   .SET   $   
0B66                VVLEN:    .SET   (3 & 01FH) / CELLL   
1776                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1776                VVNAME:   .SET   $   
1776   66 0B 82 17            DW   vvCODE,vvLINK   
177A                VVLINK:   .SET   $   
177A   03 21 49 4F            DB   3,"!IO"   
0B66                          .ORG   vvCODE   
0B66   CD D1 00               CALL   INIT_IO   
0B69                          ;*Macro unroll:  mNEXT
0B69   EB                     EX   DE,HL   
0B6A                          ;*Macro unroll:  mNEXTHL                         ; 34t
0B6A   FD E9                  JP   (IY)   ; 34t
0B6C                             ;   ?RX         ( -- c T | F )
0B6C                             ;               Return input character and true, or a false if no input.
0B6C                          ;*Macro unroll: mCODE	3, '?RX', QRX
0B6C                          ALIGN   2   
0B6C                QRX:         
0B6C                VVCODE:   .SET   $   
0B6C                VVLEN:    .SET   (3 & 01FH) / CELLL   
176E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
176E                VVNAME:   .SET   $   
176E   6C 0B 7A 17            DW   vvCODE,vvLINK   
1772                VVLINK:   .SET   $   
1772   03 3F 52 58            DB   3,"?RX"   
0B6C                          .ORG   vvCODE   
0B6C   C5                     PUSH   BC   
0B6D   CD 14 01               CALL   QRXA   
0B70   20 05                  JR   nz,QRX1   
0B72   01 00 00               LD   BC,FALSEE   
0B75   18 0A                  JR   QRX2   
0B77                QRX1:        
0B77   CD E5 00               CALL   RXA   
0B7A   4F                     LD   C,A   
0B7B   06 00                  LD   B,0   
0B7D   C5                     PUSH   BC   
0B7E   01 FF FF               LD   BC,TRUEE   
0B81                QRX2:        
0B81                          ;*Macro unroll:  mNEXT
0B81   EB                     EX   DE,HL   
0B82                          ;*Macro unroll:  mNEXTHL                         ; 34t
0B82   FD E9                  JP   (IY)   ; 34t
0B84                             ;   TX!         ( c -- )
0B84                             ;               Send character c to the output device.
0B84                          ;*Macro unroll: mCODE	3,'TX!',TXSTO
0B84                          ALIGN   2   
0B84                TXSTO:       
0B84                VVCODE:   .SET   $   
0B84                VVLEN:    .SET   (3 & 01FH) / CELLL   
1766                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1766                VVNAME:   .SET   $   
1766   84 0B 72 17            DW   vvCODE,vvLINK   
176A                VVLINK:   .SET   $   
176A   03 54 58 21            DB   3,"TX!"   
0B84                          .ORG   vvCODE   
0B84   79                     LD   A,C   
0B85   CD 09 01               CALL   TXA   
0B88   C1                     POP   BC   
0B89                          ;*Macro unroll:  mNEXT
0B89   EB                     EX   DE,HL   
0B8A                          ;*Macro unroll:  mNEXTHL                         ; 34t
0B8A   FD E9                  JP   (IY)   ; 34t
0B8C                             ;   ?KEY        ( -- c T | F )
0B8C                             ;               Return input character and true, or a false if no input.
0B8C                          ;*Macro unroll: mCOLON  4,'?KEY',QKEY
0B8C                          ;*Macro unroll:  mCODE 4, "?KEY", QKEY
0B8C                          ALIGN   2   
0B8C                QKEY:        
0B8C                VVCODE:   .SET   $   
0B8C                VVLEN:    .SET   (4 & 01FH) / CELLL   
175C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
175C                VVNAME:   .SET   $   
175C   8C 0B 6A 17            DW   vvCODE,vvLINK   
1760                VVLINK:   .SET   $   
1760   04 3F 4B 45 59         DB   4,"?KEY"   
0B8C                          .ORG   vvCODE   
0B8C   00                     NOP      
0B8D   CD 02 06               CALL   doLIST   
0B90   A6 10 6C 0E 42 0E 50 06 DW   TQKEY,AT,EXECU,EXIT   
0B98                             ;   KEY         ( -- c )
0B98                             ;               Wait for and return an input character.
0B98                          ;*Macro unroll: mCOLON  3,'KEY',KEY
0B98                          ;*Macro unroll:  mCODE 3, "KEY", KEY
0B98                          ALIGN   2   
0B98                KEY:         
0B98                VVCODE:   .SET   $   
0B98                VVLEN:    .SET   (3 & 01FH) / CELLL   
1754                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1754                VVNAME:   .SET   $   
1754   98 0B 60 17            DW   vvCODE,vvLINK   
1758                VVLINK:   .SET   $   
1758   03 4B 45 59            DB   3,"KEY"   
0B98                          .ORG   vvCODE   
0B98   00                     NOP      
0B99   CD 02 06               CALL   doLIST   
0B9C                KEY1:        
0B9C   8C 0B                  DW   QKEY   
0B9E   16 10 46 0E A4 0B      DW   DUPP,QBRAN,KEY2   
0BA4                             ; DW DOLIT, $22, EMIT
0BA4                KEY2:        
0BA4   46 0E 9C 0B            DW   QBRAN,KEY1   
0BA8   50 06                  DW   EXIT   
0BAA                             ;   EMIT        ( c -- )
0BAA                             ;               Send a character to the output device.
0BAA                          ;*Macro unroll: mCOLON  4, 'EMIT', EMIT
0BAA                          ;*Macro unroll:  mCODE 4, "EMIT", EMIT
0BAA                          ALIGN   2   
0BAA                EMIT:        
0BAA                VVCODE:   .SET   $   
0BAA                VVLEN:    .SET   (4 & 01FH) / CELLL   
174A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
174A                VVNAME:   .SET   $   
174A   AA 0B 58 17            DW   vvCODE,vvLINK   
174E                VVLINK:   .SET   $   
174E   04 45 4D 49 54         DB   4,"EMIT"   
0BAA                          .ORG   vvCODE   
0BAA   00                     NOP      
0BAB   CD 02 06               CALL   doLIST   
0BAE   AE 10 6C 0E 42 0E 50 06 DW   TEMIT,AT,EXECU,EXIT   
0BB6                             ;   NUF?        ( -- t )
0BB6                             ;               Return false if no input, else pause and if CR return true.
0BB6                          ;*Macro unroll: mCOLON  4,'NUF?',NUFQ
0BB6                          ;*Macro unroll:  mCODE 4, "NUF?", NUFQ
0BB6                          ALIGN   2   
0BB6                NUFQ:        
0BB6                VVCODE:   .SET   $   
0BB6                VVLEN:    .SET   (4 & 01FH) / CELLL   
1740                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1740                VVNAME:   .SET   $   
1740   B6 0B 4E 17            DW   vvCODE,vvLINK   
1744                VVLINK:   .SET   $   
1744   04 4E 55 46 3F         DB   4,"NUF?"   
0BB6                          .ORG   vvCODE   
0BB6   00                     NOP      
0BB7   CD 02 06               CALL   doLIST   
0BBA   8C 0B 16 10            DW   QKEY,DUPP   
0BBE   46 0E CC 0B            DW   QBRAN,NUFQ1   
0BC2   4A 10 98 0B 10 06 0D 00 CE 01 DW   DDROP,KEY,DOLIT,CRR,EQUAL   
0BCC                NUFQ1:       
0BCC   50 06                  DW   EXIT   
0BCE                             ;   PACE        ( -- )
0BCE                             ;               Send a pace character for the file downloading process.
0BCE                          ;*Macro unroll: hCOLON  4,'PACE',PACE
0BCE                          ;*Macro unroll:  hCODE 4, "PACE", PACE
0BCE                          ALIGN   2   
0BCE                PACE:        
0BCE   00                     NOP      
0BCF   CD 02 06               CALL   doLIST   
0BD2   10 06 0B 00 AA 0B 50 06 DW   DOLIT,11,EMIT,EXIT   
0BDA                             ;   SPACE       ( -- )
0BDA                             ;               Send the blank character to the output device.
0BDA                          ;*Macro unroll: mCOLON  5,'SPACE',SPACE
0BDA                          ;*Macro unroll:  mCODE 5, "SPACE", SPACE
0BDA                          ALIGN   2   
0BDA                SPACE:       
0BDA                VVCODE:   .SET   $   
0BDA                VVLEN:    .SET   (5 & 01FH) / CELLL   
1736                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1736                VVNAME:   .SET   $   
1736   DA 0B 44 17            DW   vvCODE,vvLINK   
173A                VVLINK:   .SET   $   
173A   05 53 50 41 43 45      DB   5,"SPACE"   
0BDA                          .ORG   vvCODE   
0BDA   00                     NOP      
0BDB   CD 02 06               CALL   doLIST   
0BDE   42 07 AA 0B 50 06      DW   BLANK,EMIT,EXIT   
0BE4                             ;   SPACES      ( +n -- )
0BE4                             ;               Send n spaces to the output device.
0BE4                          ;*Macro unroll: mCOLON  6,'SPACES',SPACS
0BE4                          ;*Macro unroll:  mCODE 6, "SPACES", SPACS
0BE4                          ALIGN   2   
0BE4                SPACS:       
0BE4                VVCODE:   .SET   $   
0BE4                VVLEN:    .SET   (6 & 01FH) / CELLL   
172A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
172A                VVNAME:   .SET   $   
172A   E4 0B 3A 17            DW   vvCODE,vvLINK   
172E                VVLINK:   .SET   $   
172E   06 53 50 41 43 45 53   DB   6,"SPACES"   
0BE4                          .ORG   vvCODE   
0BE4   00                     NOP      
0BE5   CD 02 06               CALL   doLIST   
0BE8   10 06 00 00 1A 02 FA 0F DW   DOLIT,0,MAX,TOR   
0BF0   52 0E F6 0B            DW   BRAN,CHAR2   
0BF4                CHAR1:       
0BF4   DA 0B                  DW   SPACE   
0BF6                CHAR2:       
0BF6   5C 06 F4 0B            DW   DONXT,CHAR1   
0BFA   50 06                  DW   EXIT   
0BFC                             ;   TYPE        ( b u -- )
0BFC                             ;               Output u characters from b.
0BFC                          ;*Macro unroll: mCOLON	4,'TYPE',TYPEE
0BFC                          ;*Macro unroll:  mCODE 4, "TYPE", TYPEE
0BFC                          ALIGN   2   
0BFC                TYPEE:       
0BFC                VVCODE:   .SET   $   
0BFC                VVLEN:    .SET   (4 & 01FH) / CELLL   
1720                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1720                VVNAME:   .SET   $   
1720   FC 0B 2E 17            DW   vvCODE,vvLINK   
1724                VVLINK:   .SET   $   
1724   04 54 59 50 45         DB   4,"TYPE"   
0BFC                          .ORG   vvCODE   
0BFC   00                     NOP      
0BFD   CD 02 06               CALL   doLIST   
0C00   FA 0F                  DW   TOR   
0C02   52 0E 12 0C            DW   BRAN,TYPE2   
0C06                TYPE1:       
0C06   16 10 7C 0E AA 0B      DW   DUPP,CAT,EMIT   
0C0C   10 06 01 00 7A 01      DW   DOLIT,1,PLUS   
0C12                TYPE2:       
0C12   5C 06 06 0C            DW   DONXT,TYPE1   
0C16   1A 10 50 06            DW   DROP,EXIT   
0C1A                             ;   TYPEZ    ( cstr -- )
0C1A                             ;   Similar to TYPE but prints C null terminated strings
0C1A                          ;*Macro unroll: mCOLON	4,'TYPEZ',TYPEZ
0C1A                          ;*Macro unroll:  mCODE 4, "TYPEZ", TYPEZ
0C1A                          ALIGN   2   
0C1A                TYPEZ:       
0C1A                VVCODE:   .SET   $   
0C1A                VVLEN:    .SET   (4 & 01FH) / CELLL   
1716                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1716                VVNAME:   .SET   $   
1716   1A 0C 24 17            DW   vvCODE,vvLINK   
171A                VVLINK:   .SET   $   
171A   04 54 59 50 45 5A      DB   4,"TYPEZ"   
0C1A                          .ORG   vvCODE   
0C1A   00                     NOP      
0C1B   CD 02 06               CALL   doLIST   
0C1E                TYPEZ1:      
0C1E   16 10 7C 0E            DW   DUPP,CAT   
0C22   16 10 46 0E 34 0C      DW   DUPP,QBRAN,TYPEZ2   
0C28   AA 0B                  DW   EMIT   
0C2A   10 06 01 00 7A 01      DW   DOLIT,1,PLUS   
0C30   52 0E 1E 0C            DW   BRAN,TYPEZ1   
0C34                TYPEZ2:      
0C34   1A 10 50 06            DW   DROP,EXIT   
0C38                             ;   CR          ( -- )
0C38                             ;               Output a carriage return and a line feed.
0C38                          ;*Macro unroll: mCOLON	2,'CR',CR
0C38                          ;*Macro unroll:  mCODE 2, "CR", CR
0C38                          ALIGN   2   
0C38                CR:          
0C38                VVCODE:   .SET   $   
0C38                VVLEN:    .SET   (2 & 01FH) / CELLL   
170E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
170E                VVNAME:   .SET   $   
170E   38 0C 1A 17            DW   vvCODE,vvLINK   
1712                VVLINK:   .SET   $   
1712   02 43 52               DB   2,"CR"   
0C38                          .ORG   vvCODE   
0C38   00                     NOP      
0C39   CD 02 06               CALL   doLIST   
0C3C   10 06 0D 00 AA 0B 10 06 0A 00 AA 0B 50 06 DW   DOLIT,CRR,EMIT,DOLIT,LFF,EMIT,EXIT   
0C4A                             ;   $"|         ( -- a )
0C4A                             ;               Run time routine compiled by $". Return address of a compiled string.
0C4A                          ;*Macro unroll: hCOLON  COMPO+3,'$||',STRQP
0C4A                          ;*Macro unroll:  hCODE COMPO+3, "$||", STRQP
0C4A                          ALIGN   2   
0C4A                STRQP:       
0C4A   00                     NOP      
0C4B   CD 02 06               CALL   doLIST   
0C4E   38 06 50 06            DW   DOSTR,EXIT   ;force a call to do$
0C52                             ;   ."|         ( -- )
0C52                             ;               Run time routine of ." . Output a compiled string.
0C52                          ;*Macro unroll: hCOLON  COMPO+3,'.||',DOTQP
0C52                          ;*Macro unroll:  hCODE COMPO+3, ".||", DOTQP
0C52                          ALIGN   2   
0C52                DOTQP:       
0C52   00                     NOP      
0C53   CD 02 06               CALL   doLIST   
0C56   38 06 E2 0E FC 0B 50 06 DW   DOSTR,COUNT,TYPEE,EXIT   
0C5E                             ;   .R          ( n +n -- )
0C5E                             ;               Display an integer in a field of n columns, right justified.
0C5E                          ;*Macro unroll: mCOLON  2,'.R',DOTR
0C5E                          ;*Macro unroll:  mCODE 2, ".R", DOTR
0C5E                          ALIGN   2   
0C5E                DOTR:        
0C5E                VVCODE:   .SET   $   
0C5E                VVLEN:    .SET   (2 & 01FH) / CELLL   
1706                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1706                VVNAME:   .SET   $   
1706   5E 0C 12 17            DW   vvCODE,vvLINK   
170A                VVLINK:   .SET   $   
170A   02 2E 52               DB   2,".R"   
0C5E                          .ORG   vvCODE   
0C5E   00                     NOP      
0C5F   CD 02 06               CALL   doLIST   
0C62   FA 0F 10 07 08 10 26 10 B4 01 DW   TOR,STR,RFROM,OVER,SUBB   
0C6C   E4 0B FC 0B 50 06      DW   SPACS,TYPEE,EXIT   
0C72                             ;   U.R         ( u +n -- )
0C72                             ;               Display an unsigned integer in n column, right justified.
0C72                          ;*Macro unroll: mCOLON  3,'U.R',UDOTR
0C72                          ;*Macro unroll:  mCODE 3, "U.R", UDOTR
0C72                          ALIGN   2   
0C72                UDOTR:       
0C72                VVCODE:   .SET   $   
0C72                VVLEN:    .SET   (3 & 01FH) / CELLL   
16FE                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
16FE                VVNAME:   .SET   $   
16FE   72 0C 0A 17            DW   vvCODE,vvLINK   
1702                VVLINK:   .SET   $   
1702   03 55 2E 52            DB   3,"U.R"   
0C72                          .ORG   vvCODE   
0C72   00                     NOP      
0C73   CD 02 06               CALL   doLIST   
0C76   FA 0F A8 06 DA 06 FE 06 DW   TOR,BDIGS,DIGS,EDIGS   
0C7E   08 10 26 10 B4 01      DW   RFROM,OVER,SUBB   
0C84   E4 0B FC 0B 50 06      DW   SPACS,TYPEE,EXIT   
0C8A                             ;   U.          ( u -- )
0C8A                             ;               Display an unsigned integer in free format.
0C8A                          ;*Macro unroll: mCOLON  2,'U.',UDOT
0C8A                          ;*Macro unroll:  mCODE 2, "U.", UDOT
0C8A                          ALIGN   2   
0C8A                UDOT:        
0C8A                VVCODE:   .SET   $   
0C8A                VVLEN:    .SET   (2 & 01FH) / CELLL   
16F6                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
16F6                VVNAME:   .SET   $   
16F6   8A 0C 02 17            DW   vvCODE,vvLINK   
16FA                VVLINK:   .SET   $   
16FA   02 55 2E               DB   2,"U."   
0C8A                          .ORG   vvCODE   
0C8A   00                     NOP      
0C8B   CD 02 06               CALL   doLIST   
0C8E   A8 06 DA 06 FE 06      DW   BDIGS,DIGS,EDIGS   
0C94   DA 0B FC 0B 50 06      DW   SPACE,TYPEE,EXIT   
0C9A                             ;   .           ( w -- )
0C9A                             ;               Display an integer in free format, preceeded by a space.
0C9A                          ;*Macro unroll: mCOLON  1,'.',DOT
0C9A                          ;*Macro unroll:  mCODE 1, ".", DOT
0C9A                          ALIGN   2   
0C9A                DOT:         
0C9A                VVCODE:   .SET   $   
0C9A                VVLEN:    .SET   (1 & 01FH) / CELLL   
16F0                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
16F0                VVNAME:   .SET   $   
16F0   9A 0C FA 16            DW   vvCODE,vvLINK   
16F4                VVLINK:   .SET   $   
16F4   01 2E                  DB   1,"."   
0C9A                          .ORG   vvCODE   
0C9A   00                     NOP      
0C9B   CD 02 06               CALL   doLIST   
0C9E   D6 10 6C 0E 10 06 0A 00 70 01 DW   BASE,AT,DOLIT,10,XORR   ;?decimal
0CA8   46 0E B0 0C            DW   QBRAN,DOT1   
0CAC   8A 0C 50 06            DW   UDOT,EXIT   ;no, display unsigned
0CB0                DOT1:        
0CB0   10 07 DA 0B FC 0B 50 06 DW   STR,SPACE,TYPEE,EXIT   ;yes, display signed
0CB8                             ;   .(          ( -- )
0CB8                             ;               Output following string up to next ) .
0CB8                          ;*Macro unroll: mCOLON  IMEDD+2,'.(',DOTPR
0CB8                          ;*Macro unroll:  mCODE IMEDD+2, ".(", DOTPR
0CB8                          ALIGN   2   
0CB8                DOTPR:       
0CB8                VVCODE:   .SET   $   
0CB8                VVLEN:    .SET   (IMEDD+2 & 01FH) / CELLL   
16A8                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
16A8                VVNAME:   .SET   $   
16A8   B8 0C F4 16            DW   vvCODE,vvLINK   
16AC                VVLINK:   .SET   $   
16AC   42 2E 28               DB   IMEDD+2,".("   
0CB8                          .ORG   vvCODE   
0CB8   00                     NOP      
0CB9   CD 02 06               CALL   doLIST   
0CBC   10 06 E6 08 FC 0B 50 06 DW   DOLIT,")",PARSE,TYPEE,EXIT   
0CC4                             ;   ?           ( a -- )
0CC4                             ;               Display the contents in a memory cell.
0CC4                          ;*Macro unroll: mCOLON  1,'?',QUEST
0CC4                          ;*Macro unroll:  mCODE 1, "?", QUEST
0CC4                          ALIGN   2   
0CC4                QUEST:       
0CC4                VVCODE:   .SET   $   
0CC4                VVLEN:    .SET   (1 & 01FH) / CELLL   
16A2                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
16A2                VVNAME:   .SET   $   
16A2   C4 0C AC 16            DW   vvCODE,vvLINK   
16A6                VVLINK:   .SET   $   
16A6   01 3F                  DB   1,"?"   
0CC4                          .ORG   vvCODE   
0CC4   00                     NOP      
0CC5   CD 02 06               CALL   doLIST   
0CC8   6C 0E 9A 0C 50 06      DW   AT,DOT,EXIT   
0CCE                             ;   ^H          ( bot eot cur -- bot eot cur )
0CCE                             ;               Backup the cursor by one character.
0CCE                          ;*Macro unroll: mCOLON  2,'^H',BKSP
0CCE                          ;*Macro unroll:  mCODE 2, "^H", BKSP
0CCE                          ALIGN   2   
0CCE                BKSP:        
0CCE                VVCODE:   .SET   $   
0CCE                VVLEN:    .SET   (2 & 01FH) / CELLL   
169A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
169A                VVNAME:   .SET   $   
169A   CE 0C A6 16            DW   vvCODE,vvLINK   
169E                VVLINK:   .SET   $   
169E   02 5E 48               DB   2,"^H"   
0CCE                          .ORG   vvCODE   
0CCE   00                     NOP      
0CCF   CD 02 06               CALL   doLIST   
0CD2   FA 0F 26 10 08 10 1E 10 26 10 70 01 DW   TOR,OVER,RFROM,SWAP,OVER,XORR   
0CDE   46 0E FE 0C            DW   QBRAN,BACK1   
0CE2   10 06 08 00 C6 10 18 0F 10 06 01 00 B4 01 DW   DOLIT,BKSPP,TECHO,ATEXE,DOLIT,1,SUBB   
0CF0   42 07 C6 10 18 0F      DW   BLANK,TECHO,ATEXE   
0CF6   10 06 08 00 C6 10 18 0F DW   DOLIT,BKSPP,TECHO,ATEXE   
0CFE                BACK1:       
0CFE   50 06                  DW   EXIT   
0D00                             ;   TAP         ( bot eot cur c -- bot eot cur )
0D00                             ;               Accept and echo the key stroke and bump the cursor.
0D00                          ;*Macro unroll: mCOLON  3,'TAP',TAP
0D00                          ;*Macro unroll:  mCODE 3, "TAP", TAP
0D00                          ALIGN   2   
0D00                TAP:         
0D00                VVCODE:   .SET   $   
0D00                VVLEN:    .SET   (3 & 01FH) / CELLL   
1692                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1692                VVNAME:   .SET   $   
1692   00 0D 9E 16            DW   vvCODE,vvLINK   
1696                VVLINK:   .SET   $   
1696   03 54 41 50            DB   3,"TAP"   
0D00                          .ORG   vvCODE   
0D00   00                     NOP      
0D01   CD 02 06               CALL   doLIST   
0D04   16 10 C6 10 18 0F      DW   DUPP,TECHO,ATEXE   
0D0A   26 10 74 0E 10 06 01 00 7A 01 50 06 DW   OVER,CSTOR,DOLIT,1,PLUS,EXIT   
0D16                             ;   kTAP        ( bot eot cur c -- bot eot cur )
0D16                             ;               Process a key stroke, CR or backspace.
0D16                          ;*Macro unroll: mCOLON  4,'kTAP',KTAP
0D16                          ;*Macro unroll:  mCODE 4, "kTAP", KTAP
0D16                          ALIGN   2   
0D16                KTAP:        
0D16                VVCODE:   .SET   $   
0D16                VVLEN:    .SET   (4 & 01FH) / CELLL   
1688                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1688                VVNAME:   .SET   $   
1688   16 0D 96 16            DW   vvCODE,vvLINK   
168C                VVLINK:   .SET   $   
168C   04 6B 54 41 50         DB   4,"kTAP"   
0D16                          .ORG   vvCODE   
0D16   00                     NOP      
0D17   CD 02 06               CALL   doLIST   
0D1A   16 10 10 06 0D 00 70 01 DW   DUPP,DOLIT,CRR,XORR   
0D22   46 0E 3A 0D            DW   QBRAN,KTAP2   
0D26   10 06 08 00 70 01      DW   DOLIT,BKSPP,XORR   
0D2C   46 0E 36 0D            DW   QBRAN,KTAP1   
0D30   42 07 00 0D 50 06      DW   BLANK,TAP,EXIT   
0D36                KTAP1:       
0D36   CE 0C 50 06            DW   BKSP,EXIT   
0D3A                KTAP2:       
0D3A   1A 10 1E 10 1A 10 16 10 50 06 DW   DROP,SWAP,DROP,DUPP,EXIT   
0D44                             ;   accept      ( b u -- b u )
0D44                             ;               Accept characters to input buffer. Return with actual count.
0D44                          ;*Macro unroll: mCOLON  6,'accept',ACCEP
0D44                          ;*Macro unroll:  mCODE 6, "accept", ACCEP
0D44                          ALIGN   2   
0D44                ACCEP:       
0D44                VVCODE:   .SET   $   
0D44                VVLEN:    .SET   (6 & 01FH) / CELLL   
167C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
167C                VVNAME:   .SET   $   
167C   44 0D 8C 16            DW   vvCODE,vvLINK   
1680                VVLINK:   .SET   $   
1680   06 61 63 63 65 70 74   DB   6,"accept"   
0D44                          .ORG   vvCODE   
0D44   00                     NOP      
0D45   CD 02 06               CALL   doLIST   
0D48   26 10 7A 01 26 10      DW   OVER,PLUS,OVER   
0D4E                ACCP1:       
0D4E   54 10 70 01            DW   DDUP,XORR   
0D52   46 0E 74 0D            DW   QBRAN,ACCP4   
0D56   98 0B 16 10            DW   KEY,DUPP   
0D5A   42 07 10 06 7F 00 40 02 DW   BLANK,DOLIT,127,WITHI   
0D62   46 0E 6C 0D            DW   QBRAN,ACCP2   
0D66   00 0D                  DW   TAP   
0D68   52 0E 70 0D            DW   BRAN,ACCP3   
0D6C                ACCP2:       
0D6C   BE 10 18 0F            DW   TTAP,ATEXE   
0D70                ACCP3:       
0D70   52 0E 4E 0D            DW   BRAN,ACCP1   
0D74                ACCP4:       
0D74   1A 10 26 10 B4 01 50 06 DW   DROP,OVER,SUBB,EXIT   
0D7C                             ;   EXPECT      ( b u -- )
0D7C                             ;               Accept input stream and STORE count in SPAN.
0D7C                          ;*Macro unroll: hCOLON  6,'EXPECT',EXPEC
0D7C                          ;*Macro unroll:  hCODE 6, "EXPECT", EXPEC
0D7C                          ALIGN   2   
0D7C                EXPEC:       
0D7C   00                     NOP      
0D7D   CD 02 06               CALL   doLIST   
0D80   B6 10 18 0F E6 10 62 0E 1A 10 50 06 DW   TEXPE,ATEXE,SPAN,STORE,DROP,EXIT   
0D8C                             ;   QUERY       ( -- )
0D8C                             ;               Accept input stream to terminal input buffer.
0D8C                          ;*Macro unroll: hCOLON  5,'QUERY',QUERY
0D8C                          ;*Macro unroll:  hCODE 5, "QUERY", QUERY
0D8C                          ALIGN   2   
0D8C                QUERY:       
0D8C   00                     NOP      
0D8D   CD 02 06               CALL   doLIST   
0D90   0C 0F 10 06 50 00 B6 10 18 0F F6 10 62 0E DW   TIB,DOLIT,80,TEXPE,ATEXE,NTIB,STORE   
0D9E   1A 10 10 06 00 00 EE 10 62 0E 50 06 DW   DROP,DOLIT,0,INN,STORE,EXIT   
0DAA                             ; HL contains the xt of the word
0DAA                CALL_FORTH:      
0DAA   11 AF 0D               LD   DE,TRETURN_HERE   
0DAD   E9                     JP   (HL)   
0DAE                RETURN_HERE:      
0DAE   C9                     RET      
0DAF                TRETURN_HERE:      
0DAF   AE 0D                  DW   RETURN_HERE   
0DB1                NEXT_STEP:      
0DB1   5E                     LD   E,(HL)   ; 7t
0DB2   23                     INC   HL   ; 6t
0DB3   56                     LD   D,(HL)   ; 7t
0DB4   23                     INC   HL   ; 6t
0DB5   EB                     EX   DE,HL   ; 4t
0DB6   E9                     JP   (HL)   ; 4t
0DB7                          ;*Macro unroll: hCOLON	2,'HI2x',HI2x
0DB7                          ;*Macro unroll:  hCODE 2, "HI2x", HI2x
0DB7                          ALIGN   2   
0DB8                HI2X:        
0DB8   00                     NOP      
0DB9   CD 02 06               CALL   doLIST   
0DBC   66 0B                  DW   STOIO   
0DBE   10 06 D0 0D            DW   DOLIT,HELLO   
0DC2   1A 0C                  DW   TYPEZ   
0DC4   98 0B                  DW   KEY   
0DC6   AA 0B                  DW   EMIT   
0DC8   10 06 D0 0D            DW   DOLIT,HELLO   
0DCC   1A 0C                  DW   TYPEZ   
0DCE   40 0E                  DW   QUIT   
0DD0   48 65 6C 6C 6F 20 46 6F 72 74 68 21 20 0D 0A 00 HELLO:   .CSTR   "Hello Forth! \r\n"   
0DE0                             ;   hi          ( -- )
0DE0                             ;               Display the sign-on message of eForth.
0DE0                          ;*Macro unroll: hCOLON  2,'hi',HI
0DE0                          ;*Macro unroll:  hCODE 2, "hi", HI
0DE0                          ALIGN   2   
0DE0                HI:          
0DE0   00                     NOP      
0DE1   CD 02 06               CALL   doLIST   
0DE4   66 0B 38 0C            DW   STOIO,CR   ;initialize I/O
0DE8                          ;*Macro unroll:  mDSTR   DOTQP,'eForth v'        ;model
0DE8   52 0C                  DW   DOTQP   ;model
0DEA                VVLEN:    .SET   $   
0DEA   00 65 46 6F 72 74 68 20 76 DB   0,"eForth v"   
0DF3                VVCODE:   .SET   $   
0DEA                          .ORG   vvLEN   
0DEA   08                     DB   vvCODE - vvLEN - 1   
0DF3                          .ORG   vvCODE   
0DF3                             ; DW      BASE,AT,HEX             ;save radix
0DF3                             ; DW      VERSN,BDIGS,DIG,DIG
0DF3                             ; DW      DOLIT,".",HOLD
0DF3                             ; DW      DIGS,EDIGS,TYPEE        ;format version number
0DF3                             ; DW      BASE,STORE              ;restore radix
0DF3   38 0C                  DW   CR   
0DF5                HI1:         
0DF5   98 0B                  DW   KEY   
0DF7   16 10 AA 0B            DW   DUPP,EMIT   
0DFB   10 06 0D 00 CE 01      DW   DOLIT,$0D,EQUAL   
0E01                             ; DW  DROP, DOLIT, 0
0E01   46 0E F5 0D            DW   QBRAN,HI1   
0E05   10 06 D0 0D            DW   DOLIT,HELLO   
0E09   1A 0C                  DW   TYPEZ   
0E0B   38 0C 50 06            DW   CR,EXIT   
0E0F                          ;*Macro unroll: mCOLON	4,'COLD',COLD
0E0F                          ;*Macro unroll:  mCODE 4, "COLD", COLD
0E0F                          ALIGN   2   
0E10                COLD:        
0E10                VVCODE:   .SET   $   
0E10                VVLEN:    .SET   (4 & 01FH) / CELLL   
1672                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1672                VVNAME:   .SET   $   
1672   10 0E 80 16            DW   vvCODE,vvLINK   
1676                VVLINK:   .SET   $   
1676   04 43 4F 4C 44         DB   4,"COLD"   
0E10                          .ORG   vvCODE   
0E10   00                     NOP      
0E11   CD 02 06               CALL   doLIST   
0E14                COLD1:       
0E14   10 06 1A 01 10 06 45 24 DW   DOLIT,UZERO,DOLIT,UPP   
0E1C   10 06 3A 00 28 0F      DW   DOLIT,ULAST-UZERO,CMOVE   ;initialize user area
0E22   2A 0E                  DW   PRESE   ;initialize stack and TIB
0E24                             ; DW      TBOOT,ATEXE             ;application boot
0E24                             ; DW      FORTH,CNTXT,AT,DUPP     ;initialize search order
0E24                             ; DW      CRRNT,DSTOR,OVERT
0E24   40 0E                  DW   QUIT   ;start interpretation
0E26   52 0E 14 0E            DW   BRAN,COLD1   ;just in case
0E2A                             ;   PRESET      ( -- )
0E2A                             ;               Reset data stack pointer and the terminal input buffer.
0E2A                          ;*Macro unroll: mCOLON  6,'PRESET',PRESE
0E2A                          ;*Macro unroll:  mCODE 6, "PRESET", PRESE
0E2A                          ALIGN   2   
0E2A                PRESE:       
0E2A                VVCODE:   .SET   $   
0E2A                VVLEN:    .SET   (6 & 01FH) / CELLL   
1666                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1666                VVNAME:   .SET   $   
1666   2A 0E 76 16            DW   vvCODE,vvLINK   
166A                VVLINK:   .SET   $   
166A   06 50 52 45 53 45 54   DB   6,"PRESET"   
0E2A                          .ORG   vvCODE   
0E2A   00                     NOP      
0E2B   CD 02 06               CALL   doLIST   
0E2E   96 10 6C 0E A8 0E      DW   SZERO,AT,SPSTO   
0E34   10 06 00 22 F6 10 76 03 62 0E 50 06 DW   DOLIT,TIBB,NTIB,CELLP,STORE,EXIT   
0E40                          ;*Macro unroll: mCODE  4, 'QUIT', QUIT
0E40                          ALIGN   2   
0E40                QUIT:        
0E40                VVCODE:   .SET   $   
0E40                VVLEN:    .SET   (4 & 01FH) / CELLL   
165C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
165C                VVNAME:   .SET   $   
165C   40 0E 6A 16            DW   vvCODE,vvLINK   
1660                VVLINK:   .SET   $   
1660   04 51 55 49 54         DB   4,"QUIT"   
0E40                          .ORG   vvCODE   
0E40   76                     HALT      
0E41                             ;   EXECUTE	( i*x xt -- j*x )		\ CORE
0E41                             ;		Perform the semantics indentified by execution token, xt.
0E41                          ;*Macro unroll: mCODE	7,'EXECUTE', EXECU
0E41                          ALIGN   2   
0E42                EXECU:       
0E42                VVCODE:   .SET   $   
0E42                VVLEN:    .SET   (7 & 01FH) / CELLL   
1650                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1650                VVNAME:   .SET   $   
1650   42 0E 60 16            DW   vvCODE,vvLINK   
1654                VVLINK:   .SET   $   
1654   07 45 58 45 43 55 54 45 DB   7,"EXECUTE"   
0E42                          .ORG   vvCODE   
0E42   60                     LD   H,B   
0E43   69                     LD   L,C   
0E44   C1                     POP   BC   
0E45   E9                     JP   (HL)   
0E46                             ; 
0E46                             ;   0BRAN	( flag -- )
0E46                             ;		BRAN if flag is zero.
0E46                          ;*Macro unroll: hCODE	COMPO+7,'?branch', QBRAN
0E46                          ALIGN   2   
0E46                QBRAN:       
0E46   78                     LD   A,B   ; 4t
0E47   B1                     OR   C   ; 4t
0E48   C1                     POP   BC   ;10t
0E49   CA 52 0E               JP   Z,BRAN   ;10/7t a fast dec is ok, only
0E4C   13                     INC   DE   ; 6t yes,continue past the BRAN offset
0E4D   13                     INC   DE   ; 6t
0E4E                          ;*Macro unroll: 	mNEXT
0E4E   EB                     EX   DE,HL   
0E4F                          ;*Macro unroll:  mNEXTHL                         ; 34t
0E4F   FD E9                  JP   (IY)   ; 34t
0E51                             ;   BRAN	( -- )
0E51                             ;		BRAN to an inline address.
0E51                          ;*Macro unroll: hCODE	COMPO+6,'branch', BRAN
0E51                          ALIGN   2   
0E52                BRAN:        
0E52   1A                     LD   A,(DE)   ; 7t go back to the loop
0E53   6F                     LD   L,A   ; 4t
0E54   13                     INC   DE   ; 6t
0E55   1A                     LD   A,(DE)   ; 7t
0E56   67                     LD   H,A   ; 4t
0E57                          ;*Macro unroll: 	mNEXTHL
0E57   FD E9                  JP   (IY)   
0E59                             ; 
0E59                             ;   THROW    ( cstr -- )
0E59                             ;   Prints string message and returns TODO: restart Forth interpreter QUIT
0E59                          ;*Macro unroll: mCOLON	5,'THROWX',THROWX
0E59                          ;*Macro unroll:  mCODE 5, "THROWX", THROWX
0E59                          ALIGN   2   
0E5A                THROWX:      
0E5A                VVCODE:   .SET   $   
0E5A                VVLEN:    .SET   (5 & 01FH) / CELLL   
1646                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1646                VVNAME:   .SET   $   
1646   5A 0E 54 16            DW   vvCODE,vvLINK   
164A                VVLINK:   .SET   $   
164A   05 54 48 52 4F 57 58   DB   5,"THROWX"   
0E5A                          .ORG   vvCODE   
0E5A   00                     NOP      
0E5B   CD 02 06               CALL   doLIST   
0E5E   1A 0C 50 06            DW   TYPEZ,EXIT   
0E62                             ;   !           ( w a -- )
0E62                             ;               Pop the data stack to memory.
0E62                          ;*Macro unroll: mCODE	1,'!',STORE
0E62                          ALIGN   2   
0E62                STORE:       
0E62                VVCODE:   .SET   $   
0E62                VVLEN:    .SET   (1 & 01FH) / CELLL   
1640                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1640                VVNAME:   .SET   $   
1640   62 0E 4A 16            DW   vvCODE,vvLINK   
1644                VVLINK:   .SET   $   
1644   01 21                  DB   1,"!"   
0E62                          .ORG   vvCODE   
0E62   60                     LD   H,B   
0E63   69                     LD   L,C   
0E64   C1                     POP   BC   
0E65   71                     LD   (HL),C   
0E66   23                     INC   HL   
0E67   70                     LD   (HL),B   
0E68   C1                     POP   BC   
0E69                          ;*Macro unroll: 	mNEXT
0E69   EB                     EX   DE,HL   
0E6A                          ;*Macro unroll:  mNEXTHL                         ; 34t
0E6A   FD E9                  JP   (IY)   ; 34t
0E6C                             ;   @           ( a -- w )
0E6C                             ;               Push memory location to the data stack.
0E6C                          ;*Macro unroll: mCODE	1,'@', AT
0E6C                          ALIGN   2   
0E6C                AT:          
0E6C                VVCODE:   .SET   $   
0E6C                VVLEN:    .SET   (1 & 01FH) / CELLL   
163A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
163A                VVNAME:   .SET   $   
163A   6C 0E 44 16            DW   vvCODE,vvLINK   
163E                VVLINK:   .SET   $   
163E   01 40                  DB   1,"@"   
0E6C                          .ORG   vvCODE   
0E6C   60                     LD   H,B   
0E6D   69                     LD   L,C   
0E6E   4E                     LD   C,(HL)   
0E6F   23                     INC   HL   
0E70   46                     LD   B,(HL)   
0E71                          ;*Macro unroll: 	mNEXT
0E71   EB                     EX   DE,HL   
0E72                          ;*Macro unroll:  mNEXTHL                         ; 34t
0E72   FD E9                  JP   (IY)   ; 34t
0E74                             ;   C!          ( c b -- )
0E74                             ;               Pop the data stack to byte memory.
0E74                          ;*Macro unroll: mCODE	2,'C!',CSTOR
0E74                          ALIGN   2   
0E74                CSTOR:       
0E74                VVCODE:   .SET   $   
0E74                VVLEN:    .SET   (2 & 01FH) / CELLL   
1632                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1632                VVNAME:   .SET   $   
1632   74 0E 3E 16            DW   vvCODE,vvLINK   
1636                VVLINK:   .SET   $   
1636   02 43 21               DB   2,"C!"   
0E74                          .ORG   vvCODE   
0E74   60                     LD   H,B   
0E75   69                     LD   L,C   
0E76   C1                     POP   BC   
0E77   71                     LD   (HL),C   
0E78   C1                     POP   BC   
0E79                          ;*Macro unroll: 	mNEXT
0E79   EB                     EX   DE,HL   
0E7A                          ;*Macro unroll:  mNEXTHL                         ; 34t
0E7A   FD E9                  JP   (IY)   ; 34t
0E7C                             ;   C@          ( b -- c )
0E7C                             ;               Push byte memory location to the data stack.
0E7C                          ;*Macro unroll: mCODE	2,'C@',CAT
0E7C                          ALIGN   2   
0E7C                CAT:         
0E7C                VVCODE:   .SET   $   
0E7C                VVLEN:    .SET   (2 & 01FH) / CELLL   
162A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
162A                VVNAME:   .SET   $   
162A   7C 0E 36 16            DW   vvCODE,vvLINK   
162E                VVLINK:   .SET   $   
162E   02 43 40               DB   2,"C@"   
0E7C                          .ORG   vvCODE   
0E7C   0A                     LD   A,(BC)   
0E7D   4F                     LD   C,A   
0E7E   06 00                  LD   B,0   
0E80                          ;*Macro unroll: 	mNEXT
0E80   EB                     EX   DE,HL   
0E81                          ;*Macro unroll:  mNEXTHL                         ; 34t
0E81   FD E9                  JP   (IY)   ; 34t
0E83                             ;   R@          ( -- w )
0E83                             ;               Copy top of return stack to the data stack.
0E83                          ;*Macro unroll: mCODE	COMPO+2,'R@',RAT
0E83                          ALIGN   2   
0E84                RAT:         
0E84                VVCODE:   .SET   $   
0E84                VVLEN:    .SET   (COMPO+2 & 01FH) / CELLL   
1602                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1602                VVNAME:   .SET   $   
1602   84 0E 2E 16            DW   vvCODE,vvLINK   
1606                VVLINK:   .SET   $   
1606   22 52 40               DB   COMPO+2,"R@"   
0E84                          .ORG   vvCODE   
0E84   C5                     PUSH   BC   
0E85   DD 4E 00               LD   C,(IX+0)   
0E88   DD 46 01               LD   B,(IX+1)   
0E8B                          ;*Macro unroll: 	mNEXT
0E8B   EB                     EX   DE,HL   
0E8C                          ;*Macro unroll:  mNEXTHL                         ; 34t
0E8C   FD E9                  JP   (IY)   ; 34t
0E8E                             ;   RP@         ( -- a )
0E8E                             ;               Push the current RP to the data stack
0E8E                          ;*Macro unroll: mCODE	COMPO+3, 'rp@', RPAT
0E8E                          ALIGN   2   
0E8E                RPAT:        
0E8E                VVCODE:   .SET   $   
0E8E                VVLEN:    .SET   (COMPO+3 & 01FH) / CELLL   
15DA                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
15DA                VVNAME:   .SET   $   
15DA   8E 0E 06 16            DW   vvCODE,vvLINK   
15DE                VVLINK:   .SET   $   
15DE   23 72 70 40            DB   COMPO+3,"rp@"   
0E8E                          .ORG   vvCODE   
0E8E   C5                     DB   0C5h   ; PUSH	BC	;11t
0E8F   DD E5                  DB   0DDh,0E5h   ; PUSH IX	;15t
0E91   C1                     DB   0C1h   ; POP	BC	;10t
0E92                          ;*Macro unroll:  mNEXT
0E92   EB                     EX   DE,HL   
0E93                          ;*Macro unroll:  mNEXTHL                         ; 34t
0E93   FD E9                  JP   (IY)   ; 34t
0E95                             ;   RP!         ( a -- )
0E95                             ;               Set the return stack pointer.
0E95                          ;*Macro unroll: mCODE	COMPO+3,'rp!',RPSTO
0E95                          ALIGN   2   
0E96                RPSTO:       
0E96                VVCODE:   .SET   $   
0E96                VVLEN:    .SET   (COMPO+3 & 01FH) / CELLL   
15B2                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
15B2                VVNAME:   .SET   $   
15B2   96 0E DE 15            DW   vvCODE,vvLINK   
15B6                VVLINK:   .SET   $   
15B6   23 72 70 21            DB   COMPO+3,"rp!"   
0E96                          .ORG   vvCODE   
0E96   C5                     DB   0C5h   ; PUSH	BC	;11t
0E97   DD E1                  DB   0DDh,0E1h   ; POP IX	;14t
0E99   C1                     DB   0C1h   ; POP	BC	;10t
0E9A                          ;*Macro unroll: 	mNEXT
0E9A   EB                     EX   DE,HL   
0E9B                          ;*Macro unroll:  mNEXTHL                         ; 34t
0E9B   FD E9                  JP   (IY)   ; 34t
0E9D                             ;   SP@         ( -- a )
0E9D                             ;               Push the current data stack pointer.
0E9D                          ;*Macro unroll: mCODE	3, 'sp@', SPAT
0E9D                          ALIGN   2   
0E9E                SPAT:        
0E9E                VVCODE:   .SET   $   
0E9E                VVLEN:    .SET   (3 & 01FH) / CELLL   
15AA                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
15AA                VVNAME:   .SET   $   
15AA   9E 0E B6 15            DW   vvCODE,vvLINK   
15AE                VVLINK:   .SET   $   
15AE   03 73 70 40            DB   3,"sp@"   
0E9E                          .ORG   vvCODE   
0E9E   C5                     DB   0C5h   ; PUSH	BC	;11t
0E9F   21                     DB   021h   ; LD	HL,0	;10t
0EA0   00 00                  DW   0   
0EA2   39                     DB   039h   ; ADD	HL,SP	;11t
0EA3   44                     DB   044h   ; LD	B,H	; 4t
0EA4   4D                     DB   04Dh   ; LD	C,L	; 4t
0EA5                          ;*Macro unroll: 	mNEXT
0EA5   EB                     EX   DE,HL   
0EA6                          ;*Macro unroll:  mNEXTHL                         ; 34t
0EA6   FD E9                  JP   (IY)   ; 34t
0EA8                             ;   SP!         ( a -- )
0EA8                             ;               Set the data stack pointer.
0EA8                          ;*Macro unroll: mCODE	3,'sp!',SPSTO
0EA8                          ALIGN   2   
0EA8                SPSTO:       
0EA8                VVCODE:   .SET   $   
0EA8                VVLEN:    .SET   (3 & 01FH) / CELLL   
15A2                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
15A2                VVNAME:   .SET   $   
15A2   A8 0E AE 15            DW   vvCODE,vvLINK   
15A6                VVLINK:   .SET   $   
15A6   03 73 70 21            DB   3,"sp!"   
0EA8                          .ORG   vvCODE   
0EA8   60                     DB   060h   ; LD	H,B	; 4t
0EA9   69                     DB   069h   ; LD	L,C	; 4t
0EAA   F9                     DB   0F9h   ; LD	SP,HL	; 6t
0EAB   C1                     DB   0C1h   ; POP	BC	;10t
0EAC                          ;*Macro unroll: 	mNEXT
0EAC   EB                     EX   DE,HL   
0EAD                          ;*Macro unroll:  mNEXTHL                         ; 34t
0EAD   FD E9                  JP   (IY)   ; 34t
0EAF                             ;   +!          ( n a -- )
0EAF                             ;               Add n to the contents at address a.
0EAF                          ;*Macro unroll: mCOLON  2,'+!',PSTOR
0EAF                          ;*Macro unroll:  mCODE 2, "+!", PSTOR
0EAF                          ALIGN   2   
0EB0                PSTOR:       
0EB0                VVCODE:   .SET   $   
0EB0                VVLEN:    .SET   (2 & 01FH) / CELLL   
159A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
159A                VVNAME:   .SET   $   
159A   B0 0E A6 15            DW   vvCODE,vvLINK   
159E                VVLINK:   .SET   $   
159E   02 2B 21               DB   2,"+!"   
0EB0                          .ORG   vvCODE   
0EB0   00                     NOP      
0EB1   CD 02 06               CALL   doLIST   
0EB4   1E 10 26 10 6C 0E 7A 01 DW   SWAP,OVER,AT,PLUS   
0EBC   1E 10 62 0E 50 06      DW   SWAP,STORE,EXIT   
0EC2                             ;   2!          ( d a -- )
0EC2                             ;               STORE the double integer to address a.
0EC2                          ;*Macro unroll: mCOLON  2,'2!',DSTOR
0EC2                          ;*Macro unroll:  mCODE 2, "2!", DSTOR
0EC2                          ALIGN   2   
0EC2                DSTOR:       
0EC2                VVCODE:   .SET   $   
0EC2                VVLEN:    .SET   (2 & 01FH) / CELLL   
1592                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1592                VVNAME:   .SET   $   
1592   C2 0E 9E 15            DW   vvCODE,vvLINK   
1596                VVLINK:   .SET   $   
1596   02 32 21               DB   2,"2!"   
0EC2                          .ORG   vvCODE   
0EC2   00                     NOP      
0EC3   CD 02 06               CALL   doLIST   
0EC6   1E 10 26 10 62 0E      DW   SWAP,OVER,STORE   
0ECC   76 03 62 0E 50 06      DW   CELLP,STORE,EXIT   
0ED2                             ;   2@          ( a -- d )
0ED2                             ;               Fetch double integer from address a.
0ED2                          ;*Macro unroll: mCOLON  2,'2@',DAT
0ED2                          ;*Macro unroll:  mCODE 2, "2@", DAT
0ED2                          ALIGN   2   
0ED2                DAT:         
0ED2                VVCODE:   .SET   $   
0ED2                VVLEN:    .SET   (2 & 01FH) / CELLL   
158A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
158A                VVNAME:   .SET   $   
158A   D2 0E 96 15            DW   vvCODE,vvLINK   
158E                VVLINK:   .SET   $   
158E   02 32 40               DB   2,"2@"   
0ED2                          .ORG   vvCODE   
0ED2   00                     NOP      
0ED3   CD 02 06               CALL   doLIST   
0ED6   16 10 76 03 6C 0E      DW   DUPP,CELLP,AT   
0EDC   1E 10 6C 0E 50 06      DW   SWAP,AT,EXIT   
0EE2                             ;   COUNT       ( b -- b +n )
0EE2                             ;               Return count byte of a string and add 1 to byte address.
0EE2                          ;*Macro unroll: mCOLON  5,'COUNT',COUNT
0EE2                          ;*Macro unroll:  mCODE 5, "COUNT", COUNT
0EE2                          ALIGN   2   
0EE2                COUNT:       
0EE2                VVCODE:   .SET   $   
0EE2                VVLEN:    .SET   (5 & 01FH) / CELLL   
1580                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1580                VVNAME:   .SET   $   
1580   E2 0E 8E 15            DW   vvCODE,vvLINK   
1584                VVLINK:   .SET   $   
1584   05 43 4F 55 4E 54      DB   5,"COUNT"   
0EE2                          .ORG   vvCODE   
0EE2   00                     NOP      
0EE3   CD 02 06               CALL   doLIST   
0EE6   16 10 10 06 01 00 7A 01 DW   DUPP,DOLIT,1,PLUS   
0EEE   1E 10 7C 0E 50 06      DW   SWAP,CAT,EXIT   
0EF4                             ;   HERE        ( -- a )
0EF4                             ;               Return the top of the code dictionary.
0EF4                          ;*Macro unroll: mCOLON  4,'HERE',HERE
0EF4                          ;*Macro unroll:  mCODE 4, "HERE", HERE
0EF4                          ALIGN   2   
0EF4                HERE:        
0EF4                VVCODE:   .SET   $   
0EF4                VVLEN:    .SET   (4 & 01FH) / CELLL   
1576                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1576                VVNAME:   .SET   $   
1576   F4 0E 84 15            DW   vvCODE,vvLINK   
157A                VVLINK:   .SET   $   
157A   04 48 45 52 45         DB   4,"HERE"   
0EF4                          .ORG   vvCODE   
0EF4   00                     NOP      
0EF5   CD 02 06               CALL   doLIST   
0EF8   36 11 6C 0E 50 06      DW   CP,AT,EXIT   
0EFE                             ;   PAD         ( -- a )
0EFE                             ;               Return the address of a temporary buffer.
0EFE                          ;*Macro unroll: mCOLON  3,'PAD',PAD
0EFE                          ;*Macro unroll:  mCODE 3, "PAD", PAD
0EFE                          ALIGN   2   
0EFE                PAD:         
0EFE                VVCODE:   .SET   $   
0EFE                VVLEN:    .SET   (3 & 01FH) / CELLL   
156E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
156E                VVNAME:   .SET   $   
156E   FE 0E 7A 15            DW   vvCODE,vvLINK   
1572                VVLINK:   .SET   $   
1572   03 50 41 44            DB   3,"PAD"   
0EFE                          .ORG   vvCODE   
0EFE   00                     NOP      
0EFF   CD 02 06               CALL   doLIST   
0F02   F4 0E 10 06 50 00 7A 01 50 06 DW   HERE,DOLIT,80,PLUS,EXIT   
0F0C                             ;   TIB         ( -- a )
0F0C                             ;               Return the address of the terminal input buffer.
0F0C                          ;*Macro unroll: mCOLON  3,'TIB',TIB
0F0C                          ;*Macro unroll:  mCODE 3, "TIB", TIB
0F0C                          ALIGN   2   
0F0C                TIB:         
0F0C                VVCODE:   .SET   $   
0F0C                VVLEN:    .SET   (3 & 01FH) / CELLL   
1566                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1566                VVNAME:   .SET   $   
1566   0C 0F 72 15            DW   vvCODE,vvLINK   
156A                VVLINK:   .SET   $   
156A   03 54 49 42            DB   3,"TIB"   
0F0C                          .ORG   vvCODE   
0F0C   00                     NOP      
0F0D   CD 02 06               CALL   doLIST   
0F10   F6 10 76 03 6C 0E 50 06 DW   NTIB,CELLP,AT,EXIT   
0F18                             ;   @EXECUTE    ( a -- )
0F18                             ;               Execute vector STOREd in address a.
0F18                          ;*Macro unroll: hCOLON  8,'@EXECUTE',ATEXE
0F18                          ;*Macro unroll:  hCODE 8, "@EXECUTE", ATEXE
0F18                          ALIGN   2   
0F18                ATEXE:       
0F18   00                     NOP      
0F19   CD 02 06               CALL   doLIST   
0F1C   6C 0E 2E 10            DW   AT,QDUP   ;?address or zero
0F20   46 0E 26 0F            DW   QBRAN,EXE1   
0F24   42 0E                  DW   EXECU   ;execute if non-zero
0F26                EXE1:        
0F26   50 06                  DW   EXIT   ;do nothing if zero
0F28                             ;   CMOVE       ( b1 b2 u -- )
0F28                             ;               Copy u bytes from b1 to b2.
0F28                          ;*Macro unroll: mCOLON  5,'CMOVE',CMOVE
0F28                          ;*Macro unroll:  mCODE 5, "CMOVE", CMOVE
0F28                          ALIGN   2   
0F28                CMOVE:       
0F28                VVCODE:   .SET   $   
0F28                VVLEN:    .SET   (5 & 01FH) / CELLL   
155C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
155C                VVNAME:   .SET   $   
155C   28 0F 6A 15            DW   vvCODE,vvLINK   
1560                VVLINK:   .SET   $   
1560   05 43 4D 4F 56 45      DB   5,"CMOVE"   
0F28                          .ORG   vvCODE   
0F28   00                     NOP      
0F29   CD 02 06               CALL   doLIST   
0F2C   FA 0F                  DW   TOR   
0F2E   52 0E 4A 0F            DW   BRAN,CMOV2   
0F32                CMOV1:       
0F32   FA 0F 16 10 7C 0E      DW   TOR,DUPP,CAT   
0F38   84 0E 74 0E            DW   RAT,CSTOR   
0F3C   10 06 01 00 7A 01      DW   DOLIT,1,PLUS   
0F42   08 10 10 06 01 00 7A 01 DW   RFROM,DOLIT,1,PLUS   
0F4A                CMOV2:       
0F4A   5C 06 32 0F            DW   DONXT,CMOV1   
0F4E   4A 10 50 06            DW   DDROP,EXIT   
0F52                             ;   FILL        ( b u c -- )
0F52                             ;               Fill u bytes of character c to area beginning at b.
0F52                          ;*Macro unroll: mCOLON  4,'FILL',FILL
0F52                          ;*Macro unroll:  mCODE 4, "FILL", FILL
0F52                          ALIGN   2   
0F52                FILL:        
0F52                VVCODE:   .SET   $   
0F52                VVLEN:    .SET   (4 & 01FH) / CELLL   
1552                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1552                VVNAME:   .SET   $   
1552   52 0F 60 15            DW   vvCODE,vvLINK   
1556                VVLINK:   .SET   $   
1556   04 46 49 4C 4C         DB   4,"FILL"   
0F52                          .ORG   vvCODE   
0F52   00                     NOP      
0F53   CD 02 06               CALL   doLIST   
0F56   1E 10 FA 0F 1E 10      DW   SWAP,TOR,SWAP   
0F5C   52 0E 6A 0F            DW   BRAN,FILL2   
0F60                FILL1:       
0F60   54 10 74 0E 10 06 01 00 7A 01 DW   DDUP,CSTOR,DOLIT,1,PLUS   
0F6A                FILL2:       
0F6A   5C 06 60 0F            DW   DONXT,FILL1   
0F6E   4A 10 50 06            DW   DDROP,EXIT   
0F72                             ;   -TRAILING   ( b u -- b u )
0F72                             ;               Adjust the count to eliminate trailing white space.
0F72                          ;*Macro unroll: mCOLON  9,'-TRAILING',DTRAI
0F72                          ;*Macro unroll:  mCODE 9, "-TRAILING", DTRAI
0F72                          ALIGN   2   
0F72                DTRAI:       
0F72                VVCODE:   .SET   $   
0F72                VVLEN:    .SET   (9 & 01FH) / CELLL   
1544                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1544                VVNAME:   .SET   $   
1544   72 0F 56 15            DW   vvCODE,vvLINK   
1548                VVLINK:   .SET   $   
1548   09 2D 54 52 41 49 4C 49 4E 47 DB   9,"-TRAILING"   
0F72                          .ORG   vvCODE   
0F72   00                     NOP      
0F73   CD 02 06               CALL   doLIST   
0F76   FA 0F                  DW   TOR   
0F78   52 0E 96 0F            DW   BRAN,DTRA2   
0F7C                DTRA1:       
0F7C   42 07 26 10 84 0E 7A 01 7C 0E 00 02 DW   BLANK,OVER,RAT,PLUS,CAT,LESS   
0F88   46 0E 96 0F            DW   QBRAN,DTRA2   
0F8C   08 10 10 06 01 00 7A 01 50 06 DW   RFROM,DOLIT,1,PLUS,EXIT   ;adjusted count
0F96                DTRA2:       
0F96   5C 06 7C 0F            DW   DONXT,DTRA1   
0F9A   10 06 00 00 50 06      DW   DOLIT,0,EXIT   ;count=0
0FA0                             ;   PACK$       ( b u a -- a )
0FA0                             ;               Build a counted string with u characters from b. Null fill.
0FA0                          ;*Macro unroll: mCOLON  5,'PACK$',PACKS
0FA0                          ;*Macro unroll:  mCODE 5, "PACK$", PACKS
0FA0                          ALIGN   2   
0FA0                PACKS:       
0FA0                VVCODE:   .SET   $   
0FA0                VVLEN:    .SET   (5 & 01FH) / CELLL   
153A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
153A                VVNAME:   .SET   $   
153A   A0 0F 48 15            DW   vvCODE,vvLINK   
153E                VVLINK:   .SET   $   
153E   05 50 41 43 4B 24      DB   5,"PACK$"   
0FA0                          .ORG   vvCODE   
0FA0   00                     NOP      
0FA1   CD 02 06               CALL   doLIST   
0FA4   DA 0F 16 10 FA 0F      DW   ALGND,DUPP,TOR   ;strings only on cell boundary
0FAA   26 10 16 10 10 06 00 00 DW   OVER,DUPP,DOLIT,0   
0FB2   10 06 02 00 5E 02 1A 10 DW   DOLIT,CELLL,UMMOD,DROP   ;count mod cell
0FBA   B4 01 26 10 7A 01      DW   SUBB,OVER,PLUS   
0FC0   10 06 00 00 1E 10 62 0E DW   DOLIT,0,SWAP,STORE   ;null fill cell
0FC8   54 10 74 0E 10 06 01 00 7A 01 DW   DDUP,CSTOR,DOLIT,1,PLUS   ;save count
0FD2   1E 10 28 0F 08 10 50 06 DW   SWAP,CMOVE,RFROM,EXIT   ;move string
0FDA                             ;   ALIGNED     ( b -- a )
0FDA                             ;               Align address to the cell boundary.
0FDA                          ;*Macro unroll: mCOLON  7,'ALIGNED', ALGND
0FDA                          ;*Macro unroll:  mCODE 7, "ALIGNED", ALGND
0FDA                          ALIGN   2   
0FDA                ALGND:       
0FDA                VVCODE:   .SET   $   
0FDA                VVLEN:    .SET   (7 & 01FH) / CELLL   
152E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
152E                VVNAME:   .SET   $   
152E   DA 0F 3E 15            DW   vvCODE,vvLINK   
1532                VVLINK:   .SET   $   
1532   07 41 4C 49 47 4E 45 44 DB   7,"ALIGNED"   
0FDA                          .ORG   vvCODE   
0FDA   00                     NOP      
0FDB   CD 02 06               CALL   doLIST   
0FDE   50 06                  DW   EXIT   
0FE0                             ; GREETING:       .cstr   "Type something\r\n"
0FE0   44 49 56 20 42 59 20 5A 45 52 4F 00 ERR_DIVZERO:   .CSTR   "DIV BY ZERO"   ;-10
0FEC   4F 55 54 20 4F 46 20 52 41 4E 47 45 00 ERR_OUTOFRANGE:   .CSTR   "OUT OF RANGE"   ;-11
0FF9                             ;   >R          ( w -- )
0FF9                             ;               Push the data stack to the return stack.
0FF9                          ;*Macro unroll: mCODE	COMPO+2, '>R', ToR
0FF9                          ALIGN   2   
0FFA                TOR:         
0FFA                VVCODE:   .SET   $   
0FFA                VVLEN:    .SET   (COMPO+2 & 01FH) / CELLL   
1506                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1506                VVNAME:   .SET   $   
1506   FA 0F 32 15            DW   vvCODE,vvLINK   
150A                VVLINK:   .SET   $   
150A   22 3E 52               DB   COMPO+2,">R"   
0FFA                          .ORG   vvCODE   
0FFA   DD 2B                  DEC   IX   
0FFC   DD 70 00               LD   (IX+0),B   
0FFF   DD 2B                  DEC   IX   
1001   DD 71 00               LD   (IX+0),C   
1004   C1                     POP   BC   
1005                          ;*Macro unroll: 	mNEXT
1005   EB                     EX   DE,HL   
1006                          ;*Macro unroll:  mNEXTHL                         ; 34t
1006   FD E9                  JP   (IY)   ; 34t
1008                             ;   R>          ( -- w )
1008                             ;               Pop the return stack to the data stack.
1008                          ;*Macro unroll: mCODE	COMPO+2, 'R>', RFrom
1008                          ALIGN   2   
1008                RFROM:       
1008                VVCODE:   .SET   $   
1008                VVLEN:    .SET   (COMPO+2 & 01FH) / CELLL   
14DE                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
14DE                VVNAME:   .SET   $   
14DE   08 10 0A 15            DW   vvCODE,vvLINK   
14E2                VVLINK:   .SET   $   
14E2   22 52 3E               DB   COMPO+2,"R>"   
1008                          .ORG   vvCODE   
1008   C5                     PUSH   BC   
1009   DD 4E 00               LD   C,(IX+0)   
100C   DD 23                  INC   IX   
100E   DD 46 00               LD   B,(IX+0)   
1011   DD 23                  INC   IX   
1013                          ;*Macro unroll: 	mNEXT
1013   EB                     EX   DE,HL   
1014                          ;*Macro unroll:  mNEXTHL                         ; 34t
1014   FD E9                  JP   (IY)   ; 34t
1016                             ;   DUP         ( w -- w w )
1016                             ;               Duplicate the top stack item.
1016                          ;*Macro unroll: mCODE	3, 'DUP', DUPP
1016                          ALIGN   2   
1016                DUPP:        
1016                VVCODE:   .SET   $   
1016                VVLEN:    .SET   (3 & 01FH) / CELLL   
14D6                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
14D6                VVNAME:   .SET   $   
14D6   16 10 E2 14            DW   vvCODE,vvLINK   
14DA                VVLINK:   .SET   $   
14DA   03 44 55 50            DB   3,"DUP"   
1016                          .ORG   vvCODE   
1016   C5                     PUSH   BC   
1017                          ;*Macro unroll:  mNEXT
1017   EB                     EX   DE,HL   
1018                          ;*Macro unroll:  mNEXTHL                         ; 34t
1018   FD E9                  JP   (IY)   ; 34t
101A                             ;   DROP	( x -- )			\ CORE
101A                             ;		Discard top stack item.
101A                          ;*Macro unroll: mCODE	4, 'DROP', DROP
101A                          ALIGN   2   
101A                DROP:        
101A                VVCODE:   .SET   $   
101A                VVLEN:    .SET   (4 & 01FH) / CELLL   
14CC                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
14CC                VVNAME:   .SET   $   
14CC   1A 10 DA 14            DW   vvCODE,vvLINK   
14D0                VVLINK:   .SET   $   
14D0   04 44 52 4F 50         DB   4,"DROP"   
101A                          .ORG   vvCODE   
101A   C1                     POP   BC   
101B                          ;*Macro unroll:  mNEXT
101B   EB                     EX   DE,HL   
101C                          ;*Macro unroll:  mNEXTHL                         ; 34t
101C   FD E9                  JP   (IY)   ; 34t
101E                             ;   SWAP        ( w1 w2 -- w2 w1 )
101E                             ;               Exchange top two stack items.
101E                          ;*Macro unroll: mCODE	4, 'SWAP', SWAP
101E                          ALIGN   2   
101E                SWAP:        
101E                VVCODE:   .SET   $   
101E                VVLEN:    .SET   (4 & 01FH) / CELLL   
14C2                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
14C2                VVNAME:   .SET   $   
14C2   1E 10 D0 14            DW   vvCODE,vvLINK   
14C6                VVLINK:   .SET   $   
14C6   04 53 57 41 50         DB   4,"SWAP"   
101E                          .ORG   vvCODE   
101E   E1                     POP   HL   
101F   C5                     PUSH   BC   
1020   44                     LD   B,H   
1021   4D                     LD   C,L   
1022                          ;*Macro unroll: 	mNEXT
1022   EB                     EX   DE,HL   
1023                          ;*Macro unroll:  mNEXTHL                         ; 34t
1023   FD E9                  JP   (IY)   ; 34t
1025                             ;   OVER        ( w1 w2 -- w1 w2 w1 )
1025                             ;               Copy second stack item to top.
1025                          ;*Macro unroll: mCODE	4, 'OVER', OVER
1025                          ALIGN   2   
1026                OVER:        
1026                VVCODE:   .SET   $   
1026                VVLEN:    .SET   (4 & 01FH) / CELLL   
14B8                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
14B8                VVNAME:   .SET   $   
14B8   26 10 C6 14            DW   vvCODE,vvLINK   
14BC                VVLINK:   .SET   $   
14BC   04 4F 56 45 52         DB   4,"OVER"   
1026                          .ORG   vvCODE   
1026   E1                     POP   HL   
1027   E5                     PUSH   HL   
1028   C5                     PUSH   BC   
1029   44                     LD   B,H   
102A   4D                     LD   C,L   
102B                          ;*Macro unroll: 	mNEXT
102B   EB                     EX   DE,HL   
102C                          ;*Macro unroll:  mNEXTHL                         ; 34t
102C   FD E9                  JP   (IY)   ; 34t
102E                             ;   ?DUP        ( w -- w w | 0 )
102E                             ;               Dup tos if its is not zero.
102E                          ;*Macro unroll: mCOLON	4,'?DUP', QDUP
102E                          ;*Macro unroll:  mCODE 4, "?DUP", QDUP
102E                          ALIGN   2   
102E                QDUP:        
102E                VVCODE:   .SET   $   
102E                VVLEN:    .SET   (4 & 01FH) / CELLL   
14AE                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
14AE                VVNAME:   .SET   $   
14AE   2E 10 BC 14            DW   vvCODE,vvLINK   
14B2                VVLINK:   .SET   $   
14B2   04 3F 44 55 50         DB   4,"?DUP"   
102E                          .ORG   vvCODE   
102E   00                     NOP      
102F   CD 02 06               CALL   doLIST   
1032   16 10 46 0E 3A 10      DW   DUPP,QBRAN,QDUP1   
1038   16 10                  DW   DUPP   
103A                QDUP1:       
103A   50 06                  DW   EXIT   
103C                             ;   ROT         ( w1 w2 w3 -- w2 w3 w1 )
103C                             ;               Rot 3rd item to top.
103C                          ;*Macro unroll: mCOLON	3,'ROT', ROT
103C                          ;*Macro unroll:  mCODE 3, "ROT", ROT
103C                          ALIGN   2   
103C                ROT:         
103C                VVCODE:   .SET   $   
103C                VVLEN:    .SET   (3 & 01FH) / CELLL   
14A6                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
14A6                VVNAME:   .SET   $   
14A6   3C 10 B2 14            DW   vvCODE,vvLINK   
14AA                VVLINK:   .SET   $   
14AA   03 52 4F 54            DB   3,"ROT"   
103C                          .ORG   vvCODE   
103C   00                     NOP      
103D   CD 02 06               CALL   doLIST   
1040   FA 0F 1E 10 08 10 1E 10 50 06 DW   ToR,SWAP,RFrom,SWAP,EXIT   
104A                             ;   2DROP       ( w w -- )
104A                             ;               Discard two items on stack.
104A                          ;*Macro unroll: mCOLON	5,'2DROP',DDROP
104A                          ;*Macro unroll:  mCODE 5, "2DROP", DDROP
104A                          ALIGN   2   
104A                DDROP:       
104A                VVCODE:   .SET   $   
104A                VVLEN:    .SET   (5 & 01FH) / CELLL   
149C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
149C                VVNAME:   .SET   $   
149C   4A 10 AA 14            DW   vvCODE,vvLINK   
14A0                VVLINK:   .SET   $   
14A0   05 32 44 52 4F 50      DB   5,"2DROP"   
104A                          .ORG   vvCODE   
104A   00                     NOP      
104B   CD 02 06               CALL   doLIST   
104E   1A 10 1A 10 50 06      DW   DROP,DROP,EXIT   
1054                             ;   2DUP        ( w1 w2 -- w1 w2 w1 w2 )
1054                             ;               Duplicate top two items.
1054                          ;*Macro unroll: mCOLON	4,'2DUP',DDUP
1054                          ;*Macro unroll:  mCODE 4, "2DUP", DDUP
1054                          ALIGN   2   
1054                DDUP:        
1054                VVCODE:   .SET   $   
1054                VVLEN:    .SET   (4 & 01FH) / CELLL   
1492                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1492                VVNAME:   .SET   $   
1492   54 10 A0 14            DW   vvCODE,vvLINK   
1496                VVLINK:   .SET   $   
1496   04 32 44 55 50         DB   4,"2DUP"   
1054                          .ORG   vvCODE   
1054   00                     NOP      
1055   CD 02 06               CALL   doLIST   
1058   26 10 26 10 50 06      DW   OVER,OVER,EXIT   
105E                             ;   2SWAP        ( w1 w2 w3 w4 -- w3 w4 w1 w2 )
105E                             ;               Exchange top two items.
105E                          ;*Macro unroll: mCOLON	5,'2SWAP',TwoSWAP
105E                          ;*Macro unroll:  mCODE 5, "2SWAP", TwoSWAP
105E                          ALIGN   2   
105E                TWOSWAP:      
105E                VVCODE:   .SET   $   
105E                VVLEN:    .SET   (5 & 01FH) / CELLL   
1488                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1488                VVNAME:   .SET   $   
1488   5E 10 96 14            DW   vvCODE,vvLINK   
148C                VVLINK:   .SET   $   
148C   05 32 53 57 41 50      DB   5,"2SWAP"   
105E                          .ORG   vvCODE   
105E   00                     NOP      
105F   CD 02 06               CALL   doLIST   
1062   3C 10 FA 0F 3C 10 08 10 50 06 DW   ROT,ToR,ROT,RFrom,EXIT   
106C                             ;   PICK        ( ... +n -- ... w )
106C                             ;               Copy the nth stack item to tos.
106C                          ;*Macro unroll: mCOLON  4,'PICK',PICK
106C                          ;*Macro unroll:  mCODE 4, "PICK", PICK
106C                          ALIGN   2   
106C                PICK:        
106C                VVCODE:   .SET   $   
106C                VVLEN:    .SET   (4 & 01FH) / CELLL   
147E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
147E                VVNAME:   .SET   $   
147E   6C 10 8C 14            DW   vvCODE,vvLINK   
1482                VVLINK:   .SET   $   
1482   04 50 49 43 4B         DB   4,"PICK"   
106C                          .ORG   vvCODE   
106C   00                     NOP      
106D   CD 02 06               CALL   doLIST   
1070   10 06 01 00 7A 01 8E 03 DW   DOLIT,1,PLUS,CELLS   
1078   9E 0E 7A 01 6C 0E 50 06 DW   SPAT,PLUS,AT,EXIT   
1080                             ;   DEPTH       ( -- n )
1080                             ;               Return the depth of the data stack.
1080                          ;*Macro unroll: mCOLON	5,'DEPTH',DEPTH
1080                          ;*Macro unroll:  mCODE 5, "DEPTH", DEPTH
1080                          ALIGN   2   
1080                DEPTH:       
1080                VVCODE:   .SET   $   
1080                VVLEN:    .SET   (5 & 01FH) / CELLL   
1474                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1474                VVNAME:   .SET   $   
1474   80 10 82 14            DW   vvCODE,vvLINK   
1478                VVLINK:   .SET   $   
1478   05 44 45 50 54 48      DB   5,"DEPTH"   
1080                          .ORG   vvCODE   
1080   00                     NOP      
1081   CD 02 06               CALL   doLIST   
1084   9E 0E 96 10 6C 0E 1E 10 B4 01 DW   SPAT,SZero,AT,SWAP,SUBB   
108E   10 06 02 00 0C 03 50 06 DW   DOLIT,CELLL,Slash,EXIT   
1096                             ;   SP0         ( -- a )
1096                             ;               Pointer to bottom of the data stack.
1096                          ;*Macro unroll: mUSER   3,'SP0',SZERO
1096                          ;*Macro unroll: 	mCODE 3, "SP0", SZERO
1096                          ALIGN   2   
1096                SZERO:       
1096                VVCODE:   .SET   $   
1096                VVLEN:    .SET   (3 & 01FH) / CELLL   
146C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
146C                VVNAME:   .SET   $   
146C   96 10 78 14            DW   vvCODE,vvLINK   
1470                VVLINK:   .SET   $   
1470   03 53 50 30            DB   3,"SP0"   
1096                          .ORG   vvCODE   
1096   00                     NOP      
1097   CD 02 06               CALL   doLIST   
109A   28 06 00 00            DW   DoUSE,vvUSER   
109E                VVUSER:   .SET   vvUSER + CELLL   
109E                             ;   RP0         ( -- a )
109E                             ;               Pointer to bottom of the return stack.
109E                          ;*Macro unroll: mUSER   3,'RP0',RZERO
109E                          ;*Macro unroll: 	mCODE 3, "RP0", RZERO
109E                          ALIGN   2   
109E                RZERO:       
109E                VVCODE:   .SET   $   
109E                VVLEN:    .SET   (3 & 01FH) / CELLL   
1464                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1464                VVNAME:   .SET   $   
1464   9E 10 70 14            DW   vvCODE,vvLINK   
1468                VVLINK:   .SET   $   
1468   03 52 50 30            DB   3,"RP0"   
109E                          .ORG   vvCODE   
109E   00                     NOP      
109F   CD 02 06               CALL   doLIST   
10A2   28 06 02 00            DW   DoUSE,vvUSER   
10A6                VVUSER:   .SET   vvUSER + CELLL   
10A6                             ;   '?KEY       ( -- a )
10A6                             ;               Execution vector of ?KEY.
10A6                          ;*Macro unroll: hUSER   5,"'?KEY",TQKEY
10A6                          ;*Macro unroll: 	hCODE 5, "'?KEY", TQKEY
10A6                          ALIGN   2   
10A6                TQKEY:       
10A6   00                     NOP      
10A7   CD 02 06               CALL   doLIST   
10AA   28 06 04 00            DW   DoUSE,vvUSER   
10AE                VVUSER:   .SET   vvUSER + CELLL   
10AE                             ;   'EMIT       ( -- a )
10AE                             ;               Execution vector of EMIT.
10AE                          ;*Macro unroll: hUSER   5,"'EMIT",TEMIT
10AE                          ;*Macro unroll: 	hCODE 5, "'EMIT", TEMIT
10AE                          ALIGN   2   
10AE                TEMIT:       
10AE   00                     NOP      
10AF   CD 02 06               CALL   doLIST   
10B2   28 06 06 00            DW   DoUSE,vvUSER   
10B6                VVUSER:   .SET   vvUSER + CELLL   
10B6                             ;   'EXPECT     ( -- a )
10B6                             ;               Execution vector of EXPECT.
10B6                          ;*Macro unroll: hUSER   7,"'EXPECT",TEXPE
10B6                          ;*Macro unroll: 	hCODE 7, "'EXPECT", TEXPE
10B6                          ALIGN   2   
10B6                TEXPE:       
10B6   00                     NOP      
10B7   CD 02 06               CALL   doLIST   
10BA   28 06 08 00            DW   DoUSE,vvUSER   
10BE                VVUSER:   .SET   vvUSER + CELLL   
10BE                             ;   'TAP        ( -- a )
10BE                             ;               Execution vector of TAP.
10BE                          ;*Macro unroll: hUSER   4,"'TAP",TTAP
10BE                          ;*Macro unroll: 	hCODE 4, "'TAP", TTAP
10BE                          ALIGN   2   
10BE                TTAP:        
10BE   00                     NOP      
10BF   CD 02 06               CALL   doLIST   
10C2   28 06 0A 00            DW   DoUSE,vvUSER   
10C6                VVUSER:   .SET   vvUSER + CELLL   
10C6                             ;   'ECHO       ( -- a )
10C6                             ;               Execution vector of ECHO.
10C6                          ;*Macro unroll: hUSER   5,"'ECHO",TECHO
10C6                          ;*Macro unroll: 	hCODE 5, "'ECHO", TECHO
10C6                          ALIGN   2   
10C6                TECHO:       
10C6   00                     NOP      
10C7   CD 02 06               CALL   doLIST   
10CA   28 06 0C 00            DW   DoUSE,vvUSER   
10CE                VVUSER:   .SET   vvUSER + CELLL   
10CE                             ;   'PROMPT     ( -- a )
10CE                             ;               Execution vector of PROMPT.
10CE                          ;*Macro unroll: hUSER   7,"'PROMPT",TPROM
10CE                          ;*Macro unroll: 	hCODE 7, "'PROMPT", TPROM
10CE                          ALIGN   2   
10CE                TPROM:       
10CE   00                     NOP      
10CF   CD 02 06               CALL   doLIST   
10D2   28 06 0E 00            DW   DoUSE,vvUSER   
10D6                VVUSER:   .SET   vvUSER + CELLL   
10D6                             ;   BASE        ( -- a )
10D6                             ;               Storage of the radix base for numeric I/O.
10D6                          ;*Macro unroll: mUSER   4,'BASE',BASE
10D6                          ;*Macro unroll: 	mCODE 4, "BASE", BASE
10D6                          ALIGN   2   
10D6                BASE:        
10D6                VVCODE:   .SET   $   
10D6                VVLEN:    .SET   (4 & 01FH) / CELLL   
145A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
145A                VVNAME:   .SET   $   
145A   D6 10 68 14            DW   vvCODE,vvLINK   
145E                VVLINK:   .SET   $   
145E   04 42 41 53 45         DB   4,"BASE"   
10D6                          .ORG   vvCODE   
10D6   00                     NOP      
10D7   CD 02 06               CALL   doLIST   
10DA   28 06 10 00            DW   DoUSE,vvUSER   
10DE                VVUSER:   .SET   vvUSER + CELLL   
10DE                             ;   tmp         ( -- a )
10DE                             ;               A temporary storage location used in parse and find.
10DE                          ;*Macro unroll: hUSER   COMPO+3,'tmp',TEMP
10DE                          ;*Macro unroll: 	hCODE COMPO+3, "tmp", TEMP
10DE                          ALIGN   2   
10DE                TEMP:        
10DE   00                     NOP      
10DF   CD 02 06               CALL   doLIST   
10E2   28 06 12 00            DW   DoUSE,vvUSER   
10E6                VVUSER:   .SET   vvUSER + CELLL   
10E6                             ;   SPAN        ( -- a )
10E6                             ;               Hold character count received by EXPECT.
10E6                          ;*Macro unroll: hUSER   4,'SPAN',SPAN
10E6                          ;*Macro unroll: 	hCODE 4, "SPAN", SPAN
10E6                          ALIGN   2   
10E6                SPAN:        
10E6   00                     NOP      
10E7   CD 02 06               CALL   doLIST   
10EA   28 06 14 00            DW   DoUSE,vvUSER   
10EE                VVUSER:   .SET   vvUSER + CELLL   
10EE                             ;   >IN         ( -- a )
10EE                             ;               Hold the character pointer while parsing input stream.
10EE                          ;*Macro unroll: mUSER   3,'>IN',INN
10EE                          ;*Macro unroll: 	mCODE 3, ">IN", INN
10EE                          ALIGN   2   
10EE                INN:         
10EE                VVCODE:   .SET   $   
10EE                VVLEN:    .SET   (3 & 01FH) / CELLL   
1452                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1452                VVNAME:   .SET   $   
1452   EE 10 5E 14            DW   vvCODE,vvLINK   
1456                VVLINK:   .SET   $   
1456   03 3E 49 4E            DB   3,">IN"   
10EE                          .ORG   vvCODE   
10EE   00                     NOP      
10EF   CD 02 06               CALL   doLIST   
10F2   28 06 16 00            DW   DoUSE,vvUSER   
10F6                VVUSER:   .SET   vvUSER + CELLL   
10F6                             ;   #TIB        ( -- a )
10F6                             ;               Hold the current count and address of the terminal input buffer.
10F6                          ;*Macro unroll: hUSER   4,'#TIB',NTIB
10F6                          ;*Macro unroll: 	hCODE 4, "#TIB", NTIB
10F6                          ALIGN   2   
10F6                NTIB:        
10F6   00                     NOP      
10F7   CD 02 06               CALL   doLIST   
10FA   28 06 18 00            DW   DoUSE,vvUSER   
10FE                VVUSER:   .SET   vvUSER + CELLL   
10FE                VVUSER:   .SET   vvUSER + CELLL   
10FE                             ;   CSP         ( -- a )
10FE                             ;               Hold the stack pointer for error checking.
10FE                          ;*Macro unroll: hUSER   3,'CSP',CSP
10FE                          ;*Macro unroll: 	hCODE 3, "CSP", CSP
10FE                          ALIGN   2   
10FE                CSP:         
10FE   00                     NOP      
10FF   CD 02 06               CALL   doLIST   
1102   28 06 1C 00            DW   DoUSE,vvUSER   
1106                VVUSER:   .SET   vvUSER + CELLL   
1106                             ;   'EVAL       ( -- a )
1106                             ;               Execution vector of EVAL.
1106                          ;*Macro unroll: hUSER   5,"'EVAL",TEVAL
1106                          ;*Macro unroll: 	hCODE 5, "'EVAL", TEVAL
1106                          ALIGN   2   
1106                TEVAL:       
1106   00                     NOP      
1107   CD 02 06               CALL   doLIST   
110A   28 06 1E 00            DW   DoUSE,vvUSER   
110E                VVUSER:   .SET   vvUSER + CELLL   
110E                             ;   'NUMBER     ( -- a )
110E                             ;               Execution vector of NUMBER?.
110E                          ;*Macro unroll: hUSER   7,"'NUMBER",TNUMB
110E                          ;*Macro unroll: 	hCODE 7, "'NUMBER", TNUMB
110E                          ALIGN   2   
110E                TNUMB:       
110E   00                     NOP      
110F   CD 02 06               CALL   doLIST   
1112   28 06 20 00            DW   DoUSE,vvUSER   
1116                VVUSER:   .SET   vvUSER + CELLL   
1116                             ;   HLD         ( -- a )
1116                             ;               Hold a pointer in building a numeric output string.
1116                          ;*Macro unroll: hUSER   3,'HLD',HLD
1116                          ;*Macro unroll: 	hCODE 3, "HLD", HLD
1116                          ALIGN   2   
1116                HLD:         
1116   00                     NOP      
1117   CD 02 06               CALL   doLIST   
111A   28 06 22 00            DW   DoUSE,vvUSER   
111E                VVUSER:   .SET   vvUSER + CELLL   
111E                             ;   HANDLER     ( -- a )
111E                             ;               Hold the return stack pointer for error handling.
111E                          ;*Macro unroll: hUSER   7,'HANDLER',HANDL
111E                          ;*Macro unroll: 	hCODE 7, "HANDLER", HANDL
111E                          ALIGN   2   
111E                HANDL:       
111E   00                     NOP      
111F   CD 02 06               CALL   doLIST   
1122   28 06 24 00            DW   DoUSE,vvUSER   
1126                VVUSER:   .SET   vvUSER + CELLL   
1126                             ;   CONTEXT     ( -- a )
1126                             ;               A area to specify vocabulary search order.
1126                          ;*Macro unroll: hUSER   7,'CONTEXT',CNTXT
1126                          ;*Macro unroll: 	hCODE 7, "CONTEXT", CNTXT
1126                          ALIGN   2   
1126                CNTXT:       
1126   00                     NOP      
1127   CD 02 06               CALL   doLIST   
112A   28 06 26 00            DW   DoUSE,vvUSER   
112E                VVUSER:   .SET   vvUSER + CELLL   
112E                VVUSER:   .SET   vvUSER + VOCSS * CELLL   ;vocabulary stack
112E                             ;   CURRENT     ( -- a )
112E                             ;               Point to the vocabulary to be extended.
112E                          ;*Macro unroll: hUSER   7,'CURRENT',CRRNT
112E                          ;*Macro unroll: 	hCODE 7, "CURRENT", CRRNT
112E                          ALIGN   2   
112E                CRRNT:       
112E   00                     NOP      
112F   CD 02 06               CALL   doLIST   
1132   28 06 38 00            DW   DoUSE,vvUSER   
1136                VVUSER:   .SET   vvUSER + CELLL   
1136                VVUSER:   .SET   vvUSER + CELLL   ;vocabulary link pointer
1136                             ;   CP          ( -- a )
1136                             ;               Point to the top of the code dictionary.
1136                          ;*Macro unroll: hUSER   2,'CP',CP
1136                          ;*Macro unroll: 	hCODE 2, "CP", CP
1136                          ALIGN   2   
1136                CP:          
1136   00                     NOP      
1137   CD 02 06               CALL   doLIST   
113A   28 06 3C 00            DW   DoUSE,vvUSER   
113E                VVUSER:   .SET   vvUSER + CELLL   
113E                             ;   NP          ( -- a )
113E                             ;               Point to the bottom of the name dictionary.
113E                          ;*Macro unroll: hUSER   2,'NP',NP
113E                          ;*Macro unroll: 	hCODE 2, "NP", NP
113E                          ALIGN   2   
113E                NP:          
113E   00                     NOP      
113F   CD 02 06               CALL   doLIST   
1142   28 06 3E 00            DW   DoUSE,vvUSER   
1146                VVUSER:   .SET   vvUSER + CELLL   
1146                             ;   LAST        ( -- a )
1146                             ;               Point to the last name in the name dictionary.
1146                          ;*Macro unroll: mUSER   4,'LAST',LAST
1146                          ;*Macro unroll: 	mCODE 4, "LAST", LAST
1146                          ALIGN   2   
1146                LAST:        
1146                VVCODE:   .SET   $   
1146                VVLEN:    .SET   (4 & 01FH) / CELLL   
1448                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1448                VVNAME:   .SET   $   
1448   46 11 56 14            DW   vvCODE,vvLINK   
144C                VVLINK:   .SET   $   
144C   04 4C 41 53 54         DB   4,"LAST"   
1146                          .ORG   vvCODE   
1146   00                     NOP      
1147   CD 02 06               CALL   doLIST   
114A   28 06 40 00            DW   DoUSE,vvUSER   
114E                VVUSER:   .SET   vvUSER + CELLL   
114E                             ;   forth       ( -- a )
114E                             ;               Point to the last name in the name dictionary.
114E                          ;*Macro unroll: hUSER   5,'forth',VFRTH
114E                          ;*Macro unroll: 	hCODE 5, "forth", VFRTH
114E                          ALIGN   2   
114E                VFRTH:       
114E   00                     NOP      
114F   CD 02 06               CALL   doLIST   
1152   28 06 42 00            DW   DoUSE,vvUSER   
1156                VVUSER:   .SET   vvUSER + CELLL   
1156                             ;   _TYPE       ( b u -- )
1156                             ;               Display a string. Filter non-printing characters.
1156                          ;*Macro unroll: mCOLON  5,'_TYPE',UTYPE
1156                          ;*Macro unroll:  mCODE 5, "_TYPE", UTYPE
1156                          ALIGN   2   
1156                UTYPE:       
1156                VVCODE:   .SET   $   
1156                VVLEN:    .SET   (5 & 01FH) / CELLL   
143E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
143E                VVNAME:   .SET   $   
143E   56 11 4C 14            DW   vvCODE,vvLINK   
1442                VVLINK:   .SET   $   
1442   05 5F 54 59 50 45      DB   5,"_TYPE"   
1156                          .ORG   vvCODE   
1156   00                     NOP      
1157   CD 02 06               CALL   doLIST   
115A   FA 0F                  DW   TOR   ;start count down loop
115C   52 0E 6E 11            DW   BRAN,UTYP2   ;skip first pass
1160                UTYP1:       
1160   16 10 7C 0E 4C 07 AA 0B DW   DUPP,CAT,TCHAR,EMIT   ;display only printable
1168   10 06 01 00 7A 01      DW   DOLIT,1,PLUS   ;increment address
116E                UTYP2:       
116E   5C 06 60 11            DW   DONXT,UTYP1   ;loop till done
1172   1A 10 50 06            DW   DROP,EXIT   
1176                             ;   dm+         ( a u -- a )
1176                             ;               Dump u bytes from , leaving a+u on the stack.
1176                          ;*Macro unroll: hCOLON  3,'dm+',DMP
1176                          ;*Macro unroll:  hCODE 3, "dm+", DMP
1176                          ALIGN   2   
1176                DMP:         
1176   00                     NOP      
1177   CD 02 06               CALL   doLIST   
117A   26 10 10 06 04 00 72 0C DW   OVER,DOLIT,4,UDOTR   ;display address
1182   DA 0B FA 0F            DW   SPACE,TOR   ;start count down loop
1186   52 0E 9A 11            DW   BRAN,PDUM2   ;skip first pass
118A                PDUM1:       
118A   16 10 7C 0E 10 06 03 00 72 0C DW   DUPP,CAT,DOLIT,3,UDOTR   ;display numeric data
1194   10 06 01 00 7A 01      DW   DOLIT,1,PLUS   ;increment address
119A                PDUM2:       
119A   5C 06 8A 11            DW   DONXT,PDUM1   ;loop till done
119E   50 06                  DW   EXIT   
11A0                             ;   DUMP        ( a u -- )
11A0                             ;               Dump u bytes from a, in a formatted manner.
11A0                          ;*Macro unroll: mCOLON  4,'DUMP',DUMP
11A0                          ;*Macro unroll:  mCODE 4, "DUMP", DUMP
11A0                          ALIGN   2   
11A0                DUMP:        
11A0                VVCODE:   .SET   $   
11A0                VVLEN:    .SET   (4 & 01FH) / CELLL   
1434                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1434                VVNAME:   .SET   $   
1434   A0 11 42 14            DW   vvCODE,vvLINK   
1438                VVLINK:   .SET   $   
1438   04 44 55 4D 50         DB   4,"DUMP"   
11A0                          .ORG   vvCODE   
11A0   00                     NOP      
11A1   CD 02 06               CALL   doLIST   
11A4   D6 10 6C 0E FA 0F 26 07 DW   BASE,AT,TOR,HEX   ;save radix, set hex
11AC   10 06 10 00 0C 03      DW   DOLIT,16,SLASH   ;change count to lines
11B2   FA 0F                  DW   TOR   ;start count down loop
11B4                DUMP1:       
11B4   38 0C 10 06 10 00 54 10 76 11 DW   CR,DOLIT,16,DDUP,DMP   ;display numeric
11BE   3C 10 3C 10            DW   ROT,ROT   
11C2   DA 0B DA 0B 56 11      DW   SPACE,SPACE,UTYPE   ;display printable characters
11C8   B6 0B 84 01            DW   NUFQ,INVER   ;user control
11CC   46 0E D8 11            DW   QBRAN,DUMP2   
11D0   5C 06 B4 11            DW   DONXT,DUMP1   ;loop till done
11D4   52 0E DC 11            DW   BRAN,DUMP3   
11D8                DUMP2:       
11D8   08 10 1A 10            DW   RFROM,DROP   ;cleanup loop stack, early exit
11DC                DUMP3:       
11DC   1A 10 08 10 D6 10 62 0E DW   DROP,RFROM,BASE,STORE   ;reSTORE radix
11E4   50 06                  DW   EXIT   
11E6                             ;   .S          ( ... -- ... )
11E6                             ;               Display the contents of the data stack.
11E6                          ;*Macro unroll: mCOLON  2,'.S',DOTS
11E6                          ;*Macro unroll:  mCODE 2, ".S", DOTS
11E6                          ALIGN   2   
11E6                DOTS:        
11E6                VVCODE:   .SET   $   
11E6                VVLEN:    .SET   (2 & 01FH) / CELLL   
142C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
142C                VVNAME:   .SET   $   
142C   E6 11 38 14            DW   vvCODE,vvLINK   
1430                VVLINK:   .SET   $   
1430   02 2E 53               DB   2,".S"   
11E6                          .ORG   vvCODE   
11E6   00                     NOP      
11E7   CD 02 06               CALL   doLIST   
11EA   38 0C 80 10            DW   CR,DEPTH   ;stack depth
11EE   FA 0F                  DW   TOR   ;start count down loop
11F0   52 0E FA 11            DW   BRAN,DOTS2   ;skip first pass
11F4                DOTS1:       
11F4   84 0E 6C 10 9A 0C      DW   RAT,PICK,DOT   ;index stack, display contents
11FA                DOTS2:       
11FA   5C 06 F4 11            DW   DONXT,DOTS1   ;loop till done
11FE                          ;*Macro unroll:  mDSTR DOTQP,' <sp'
11FE   52 0C                  DW   DOTQP   
1200                VVLEN:    .SET   $   
1200   00 20 3C 73 70         DB   0," <sp"   
1205                VVCODE:   .SET   $   
1200                          .ORG   vvLEN   
1200   04                     DB   vvCODE - vvLEN - 1   
1205                          .ORG   vvCODE   
1205   50 06                  DW   EXIT   
1207                             ;   !CSP        ( -- )
1207                             ;               Save stack pointer in CSP for error checking.
1207                             ;   ?CSP        ( -- )
1207                             ;               Abort if stack pointer differs from that saved in CSP.
1207                             ;   >NAME       ( ca -- na | F )
1207                             ;               Convert code address to a name address.
1207                          ;*Macro unroll:  mCOLON  5,'>NAME',TNAME
1207                          ;*Macro unroll:  mCODE 5, ">NAME", TNAME
1207                          ALIGN   2   
1208                TNAME:       
1208                VVCODE:   .SET   $   
1208                VVLEN:    .SET   (5 & 01FH) / CELLL   
1422                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1422                VVNAME:   .SET   $   
1422   08 12 30 14            DW   vvCODE,vvLINK   
1426                VVLINK:   .SET   $   
1426   05 3E 4E 41 4D 45      DB   5,">NAME"   
1208                          .ORG   vvCODE   
1208   00                     NOP      
1209   CD 02 06               CALL   doLIST   
120C   2E 11                  DW   CRRNT   ;vocabulary link
120E                TNAM1:       
120E   76 03 6C 0E 2E 10      DW   CELLP,AT,QDUP   ;check all vocabularies
1214   46 0E 46 12            DW   QBRAN,TNAM4   
1218   54 10                  DW   DDUP   
121A                TNAM2:       
121A   6C 0E 16 10            DW   AT,DUPP   ;?last word in a vocabulary
121E   46 0E 32 12            DW   QBRAN,TNAM3   
1222   54 10 58 09 70 01      DW   DDUP,NAMET,XORR   ;compare
1228   46 0E 32 12            DW   QBRAN,TNAM3   
122C   82 03                  DW   CELLM   ;continue with next word
122E   52 0E 1A 12            DW   BRAN,TNAM2   
1232                TNAM3:       
1232   1E 10 1A 10 2E 10      DW   SWAP,DROP,QDUP   
1238   46 0E 0E 12            DW   QBRAN,TNAM1   
123C   1E 10 1A 10 1E 10 1A 10 50 06 DW   SWAP,DROP,SWAP,DROP,EXIT   
1246                TNAM4:       
1246   1A 10 10 06 00 00 50 06 DW   DROP,DOLIT,0,EXIT   ;false flag
124E                             ;   .ID         ( na -- )
124E                             ;               Display the name at address.
124E                          ;*Macro unroll: mCOLON  3,'.ID',DOTID
124E                          ;*Macro unroll:  mCODE 3, ".ID", DOTID
124E                          ALIGN   2   
124E                DOTID:       
124E                VVCODE:   .SET   $   
124E                VVLEN:    .SET   (3 & 01FH) / CELLL   
141A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
141A                VVNAME:   .SET   $   
141A   4E 12 26 14            DW   vvCODE,vvLINK   
141E                VVLINK:   .SET   $   
141E   03 2E 49 44            DB   3,".ID"   
124E                          .ORG   vvCODE   
124E   00                     NOP      
124F   CD 02 06               CALL   doLIST   
1252   2E 10                  DW   QDUP   ;if zero no name
1254   46 0E 64 12            DW   QBRAN,DOTI1   
1258   E2 0E 10 06 1F 00 5C 01 DW   COUNT,DOLIT,MASKK,ANDD   ;mask lexicon bits
1260   56 11 50 06            DW   UTYPE,EXIT   ;display name string
1264                DOTI1:       
1264                          ;*Macro unroll:  mDSTR   DOTQP,' {noName}'
1264   52 0C                  DW   DOTQP   
1266                VVLEN:    .SET   $   
1266   00 20 7B 6E 6F 4E 61 6D 65 7D DB   0," {noName}"   
1270                VVCODE:   .SET   $   
1266                          .ORG   vvLEN   
1266   09                     DB   vvCODE - vvLEN - 1   
1270                          .ORG   vvCODE   
1270   50 06                  DW   EXIT   
1272                             ;   SEE         ( -- ; <string> )
1272                             ;               A simple decompiler.
1272                          ;*Macro unroll: mCOLON  3,'SEE',SEE
1272                          ;*Macro unroll:  mCODE 3, "SEE", SEE
1272                          ALIGN   2   
1272                SEE:         
1272                VVCODE:   .SET   $   
1272                VVLEN:    .SET   (3 & 01FH) / CELLL   
1412                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1412                VVNAME:   .SET   $   
1412   72 12 1E 14            DW   vvCODE,vvLINK   
1416                VVLINK:   .SET   $   
1416   03 53 45 45            DB   3,"SEE"   
1272                          .ORG   vvCODE   
1272   00                     NOP      
1273   CD 02 06               CALL   doLIST   
1276   9A 03                  DW   TICK   ;starting address
1278   38 0C 76 03            DW   CR,CELLP   
127C                SEE1:        
127C   76 03 16 10 6C 0E 16 10 DW   CELLP,DUPP,AT,DUPP   ;?does it contain a zero
1284   46 0E 8A 12            DW   QBRAN,SEE2   
1288   08 12                  DW   TNAME   ;?is it a name
128A                SEE2:        
128A   2E 10                  DW   QDUP   ;name address or zero
128C   46 0E 98 12            DW   QBRAN,SEE3   
1290   DA 0B 4E 12            DW   SPACE,DOTID   ;display name
1294   52 0E 9E 12            DW   BRAN,SEE4   
1298                SEE3:        
1298   16 10 6C 0E 8A 0C      DW   DUPP,AT,UDOT   ;display number
129E                SEE4:        
129E   B6 0B                  DW   NUFQ   ;user control
12A0   46 0E 7C 12            DW   QBRAN,SEE1   
12A4   1A 10 50 06            DW   DROP,EXIT   
12A8                             ;   WORDS       ( -- )
12A8                             ;               Display the names in the context vocabulary.
12A8                             ;   COLD        ( -- )
12A8                             ;               The hilevel cold start sequence.
12A8                LASTN:    EQU   vvNAME+4   ;last name address
2000                          .ORG   END_ROM   
2000                          .ORG   START_RAM   
2000                          IF   TESTMODE   
                    TESTS_START:      
                              LD   HL,DONE   
                              CALL   PRINTSZ   
                              HALT      
                    DONE:     .CSTR   "Done!\r\n"   
2000                          ENDIF      
2000                          DS   DTS   ; data stack size
2200                SPP:         ; SP0 grows down
2200                TIBB:        
2200                          DS   RTS   ; return stack size
2400                RPP:         ; RP0 grows down (into TIBB)
2400                SERBUF:   DS   SER_BUFSIZE   
243F   00 00        SERINPTR:   DW   0   
2441   00 00        SERRDPTR:   DW   0   
2443   00 00        SERBUFUSED:   DW   0   
2445                UPP:         
2445   00 00        VARSZERO:   DW   0   ; SP0
2447   00 00        VARRZERO:   DW   0   ; RP0
2449   00 00        VARTQKEY:   DW   0   ; '?KEY
244B   00 00        VARTEMIT:   DW   0   ; 'EMIT
244D   00 00        VARTEXPE:   DW   0   ; 'EXPECT
244F   00 00        VARTTAP:   DW   0   ; 'TAP
2451   00 00        VARTECHO:   DW   0   ; 'ECHO
2453   00 00        VARTPROM:   DW   0   ; 'PROMPT
2455   00 00        VARBASE:   DW   0   ; BASE
2457   00 00        VARTEMP:   DW   0   ; tmp
2459   00 00        VARSPAN:   DW   0   ; SPAN
245B   00 00        VARINN:   DW   0   ; >IN
245D   00 00        VARNTIB:   DW   0   ; #TIB
245F   00 00        VARTIB:   DW   0   ; TIB
2461   00 00        VARCSP:   DW   0   ; CSP
2463   00 00        VARTEVAL:   DW   0   ; 'EVAL
2465   00 00        VARTNUMB:   DW   0   ; 'NUMBER
2467   00 00        VARHLD:   DW   0   ; HLD
2469   00 00        VARHANDL:   DW   0   ; HANDLER
246B   00 00        VARCNTXT:   DW   0   ; CONTEXT pointer
246D   00 00        VARVOCABS:   DW   0   ; vocabulary stack    ???
246F   00 00        VARCRRNT:   DW   0   ; CURRENT pointer
2471   00 00        VARVOCABLP:   DW   0   ; vocabulary link pointer ???
2473   00 00        VARCP:    DW   0   ; CP  for runing phase on RAM
2475   00 00        VARNP:    DW   0   ; NP  for runing phase on RAM
2477   00 00        VARLAST:   DW   0   ; LAST
2479   00 00        VARVFRTH:   DW   0   ; FORTH   \ mullti-user ???
247B   00 00        VARVOCABL:   DW   0   ; vocabulary link       ???
247D                VECTAB:      
247D   00 00        VRST08:   DW   0   
247F   00 00        VRST10:   DW   0   
2481   00 00        VRST18:   DW   0   
2483   00 00        VRST20:   DW   0   
2485   00 00        VRST28:   DW   0   
2487   00 00        VRST30:   DW   0   
2489   00 00        VINT:     DW   0   
248B   00 00        VNMI:     DW   0   
248D                CPP:         ; grows up
FFFE                          .ORG   END_RAM - 2   
FFFE                NPP:         ; grows down
FFFE                          .END      


TESTMODE:           0000 DEFINED AT LINE 3
MEM_SIZE:           10000 DEFINED AT LINE 1 IN constants.z80
                    > USED AT LINE 3 IN constants.z80
                    > USED AT LINE 12 IN constants.z80
ROM_SIZE:           2000 DEFINED AT LINE 2 IN constants.z80
                    > USED AT LINE 3 IN constants.z80
                    > USED AT LINE 6 IN constants.z80
                    > USED AT LINE 8 IN constants.z80
RAM_SIZE:           E000 DEFINED AT LINE 3 IN constants.z80
                    > USED AT LINE 9 IN constants.z80
START_ROM:          0000 DEFINED AT LINE 5 IN constants.z80
                    > USED AT LINE 8
END_ROM:            2000 DEFINED AT LINE 6 IN constants.z80
                    > USED AT LINE 4 IN word.macro.z80
                    > USED AT LINE 89
START_RAM:          2000 DEFINED AT LINE 8 IN constants.z80
                    > USED AT LINE 9 IN constants.z80
                    > USED AT LINE 90
END_RAM:            10000 DEFINED AT LINE 9 IN constants.z80
                    > USED AT LINE 55 IN variables.z80
BM:                 0000 DEFINED AT LINE 11 IN constants.z80
                    > USED AT LINE 5 IN constants.z80
                    > USED AT LINE 6 IN constants.z80
                    > USED AT LINE 8 IN constants.z80
                    > USED AT LINE 12 IN constants.z80
EM:                 10000 DEFINED AT LINE 12 IN constants.z80
COMPO:              0020 DEFINED AT LINE 14 IN constants.z80
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
IMEDD:              0040 DEFINED AT LINE 15 IN constants.z80
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 133 IN core-compiler.z80
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
MASKK:              001F DEFINED AT LINE 16 IN constants.z80
CHARR:              0001 DEFINED AT LINE 18 IN constants.z80
CELLL:              0002 DEFINED AT LINE 19 IN constants.z80
                    > USED AT LINE 39 IN constants.z80
                    > USED AT LINE 40 IN constants.z80
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 319 IN core-alu.z80
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 324 IN core-alu.z80
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 329 IN core-alu.z80
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 145 IN core-interpret.z80
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 184 IN core-memory.z80
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 90 IN core-stacks.z80
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 33
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 33
                    > USED AT LINE 63
                    > USED AT LINE 63
                    > USED AT LINE 63
                    > USED AT LINE 63
                    > USED AT LINE 63
                    > USED AT LINE 63
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 33
                    > USED AT LINE 63
                    > USED AT LINE 63
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 33
                    > USED AT LINE 63
                    > USED AT LINE 65 IN core-user.z80
                    > USED AT LINE 63
                    > USED AT LINE 63
                    > USED AT LINE 63
                    > USED AT LINE 63
                    > USED AT LINE 63
                    > USED AT LINE 63
                    > USED AT LINE 96 IN core-user.z80
                    > USED AT LINE 63
                    > USED AT LINE 102 IN core-user.z80
                    > USED AT LINE 63
                    > USED AT LINE 63
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 33
                    > USED AT LINE 63
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
BASEE:              000A DEFINED AT LINE 20 IN constants.z80
                    > USED AT LINE 13 IN defaults.z80
VOCSS:              0008 DEFINED AT LINE 21 IN constants.z80
                    > USED AT LINE 96 IN core-user.z80
MAXCHAR:            00FF DEFINED AT LINE 23 IN constants.z80
MAXSIGNED:          7FFF DEFINED AT LINE 24 IN constants.z80
MAXUNSIGNED:        FFFF DEFINED AT LINE 25 IN constants.z80
MAXNEGATIVE:        8000 DEFINED AT LINE 26 IN constants.z80
BKSPP:              0008 DEFINED AT LINE 28 IN constants.z80
                    > USED AT LINE 187 IN core-io.z80
                    > USED AT LINE 189 IN core-io.z80
                    > USED AT LINE 204 IN core-io.z80
LFF:                000A DEFINED AT LINE 29 IN constants.z80
CRR:                000D DEFINED AT LINE 30 IN constants.z80
                    > USED AT LINE 132 IN core-io.z80
SPACEE:             0020 DEFINED AT LINE 31 IN constants.z80
                    > USED AT LINE 74 IN core-format.z80
                    > USED AT LINE 81 IN core-format.z80
TIC:                0027 DEFINED AT LINE 32 IN constants.z80
MINUSS:             002D DEFINED AT LINE 33 IN constants.z80
                    > USED AT LINE 44 IN core-format.z80
UNDERSC:            005F DEFINED AT LINE 34 IN constants.z80
CALLL:              CD00 DEFINED AT LINE 36 IN constants.z80
                    > USED AT LINE 119 IN core-compiler.z80
US:                 003A DEFINED AT LINE 38 IN constants.z80
                    > USED AT LINE 50
RTS:                0200 DEFINED AT LINE 39 IN constants.z80
                    > USED AT LINE 5 IN variables.z80
DTS:                0200 DEFINED AT LINE 40 IN constants.z80
                    > USED AT LINE 2 IN variables.z80
RET_STACK_SIZE:     0100 DEFINED AT LINE 42 IN constants.z80
DATA_STACK_SIZE:    0100 DEFINED AT LINE 43 IN constants.z80
INT_ADDR:           0038 DEFINED AT LINE 45 IN constants.z80
SER_BUFSIZE:        003F DEFINED AT LINE 46 IN constants.z80
                    > USED AT LINE 11 IN interrupt.z80
                    > USED AT LINE 19 IN interrupt.z80
                    > USED AT LINE 21 IN serial.z80
                    > USED AT LINE 8 IN variables.z80
SER_FULLSIZE:       0030 DEFINED AT LINE 47 IN constants.z80
                    > USED AT LINE 28 IN interrupt.z80
SER_EMPTYSIZE:      0005 DEFINED AT LINE 48 IN constants.z80
                    > USED AT LINE 30 IN serial.z80
RTS_HIGH:           00D6 DEFINED AT LINE 50 IN constants.z80
                    > USED AT LINE 30 IN interrupt.z80
RTS_LOW:            0096 DEFINED AT LINE 51 IN constants.z80
                    > USED AT LINE 11 IN serial.z80
                    > USED AT LINE 32 IN serial.z80
TRUEE:              00-1 DEFINED AT LINE 53 IN constants.z80
                    > USED AT LINE 41 IN core-io.z80
FALSEE:             0000 DEFINED AT LINE 54 IN constants.z80
                    > USED AT LINE 34 IN core-io.z80
VVCODE:             1272 DEFINED AT LINE 12
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 42
                    > USED AT LINE 43
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 42
                    > USED AT LINE 43
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 42
                    > USED AT LINE 43
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 42
                    > USED AT LINE 43
                    > USED AT LINE 42
                    > USED AT LINE 43
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 42
                    > USED AT LINE 43
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 42
                    > USED AT LINE 43
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 42
                    > USED AT LINE 43
                    > USED AT LINE 16
                    > USED AT LINE 19
VVNAME:             1412 DEFINED AT LINE 15
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 87
VVLINK:             1416 DEFINED AT LINE 17
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
VVUSER:             1158 DEFINED AT LINE 63
                    > USED AT LINE 32
                    > USED AT LINE 33
                    > USED AT LINE 32
                    > USED AT LINE 33
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 32
                    > USED AT LINE 33
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 32
                    > USED AT LINE 33
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 65 IN core-user.z80
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 96 IN core-user.z80
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 102 IN core-user.z80
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 32
                    > USED AT LINE 33
                    > USED AT LINE 62
                    > USED AT LINE 63
RESET:              0000 DEFINED AT LINE 9
RST08:              0008 DEFINED AT LINE 12
RST10:              0010 DEFINED AT LINE 16
RST18:              0018 DEFINED AT LINE 20
RST20:              0020 DEFINED AT LINE 24
RST28:              0028 DEFINED AT LINE 28
RST30:              0030 DEFINED AT LINE 32
RST38:              0038 DEFINED AT LINE 36
RST66:              0066 DEFINED AT LINE 40
INIT:               006C DEFINED AT LINE 42
                    > USED AT LINE 9
SER_INTR:           0093 DEFINED AT LINE 1 IN interrupt.z80
                    > USED AT LINE 43
NOTFULL:            00A8 DEFINED AT LINE 16 IN interrupt.z80
                    > USED AT LINE 12 IN interrupt.z80
NOTWRAP:            00B4 DEFINED AT LINE 22 IN interrupt.z80
                    > USED AT LINE 20 IN interrupt.z80
RTS0:               00C8 DEFINED AT LINE 32 IN interrupt.z80
                    > USED AT LINE 6 IN interrupt.z80
                    > USED AT LINE 14 IN interrupt.z80
                    > USED AT LINE 29 IN interrupt.z80
INIT_IO:            00D1 DEFINED AT LINE 4 IN serial.z80
                    > USED AT LINE 25 IN core-io.z80
RXA:                00E5 DEFINED AT LINE 16 IN serial.z80
                    > USED AT LINE 37 IN core-io.z80
RXA1:               00F2 DEFINED AT LINE 24 IN serial.z80
                    > USED AT LINE 22 IN serial.z80
RXA2:               0105 DEFINED AT LINE 34 IN serial.z80
                    > USED AT LINE 31 IN serial.z80
TXA:                0109 DEFINED AT LINE 40 IN serial.z80
                    > USED AT LINE 49 IN core-io.z80
TXA1:               010A DEFINED AT LINE 42 IN serial.z80
                    > USED AT LINE 45 IN serial.z80
QRXA:               0114 DEFINED AT LINE 50 IN serial.z80
                    > USED AT LINE 32 IN core-io.z80
DEFAULTS:           011A DEFINED AT LINE 3 IN defaults.z80
                    > USED AT LINE 38 IN constants.z80
                    > USED AT LINE 48
UZERO:              011A DEFINED AT LINE 4 IN defaults.z80
                    > USED AT LINE 54 IN core-kernel.z80
                    > USED AT LINE 55 IN core-kernel.z80
DEFSZERO:           011A DEFINED AT LINE 5 IN defaults.z80
DEFRZERO:           011C DEFINED AT LINE 6 IN defaults.z80
DEFTQKEY:           011E DEFINED AT LINE 7 IN defaults.z80
DEFTEMIT:           0120 DEFINED AT LINE 8 IN defaults.z80
DEFTEXPE:           0122 DEFINED AT LINE 9 IN defaults.z80
DEFTTAP:            0124 DEFINED AT LINE 10 IN defaults.z80
DEFTECHO:           0126 DEFINED AT LINE 11 IN defaults.z80
DEFTPROM:           0128 DEFINED AT LINE 12 IN defaults.z80
DEFBASE:            012A DEFINED AT LINE 13 IN defaults.z80
DEFTEMP:            012C DEFINED AT LINE 14 IN defaults.z80
DEFSPAN:            012E DEFINED AT LINE 15 IN defaults.z80
DEFINN:             0130 DEFINED AT LINE 16 IN defaults.z80
DEFNTIB:            0132 DEFINED AT LINE 17 IN defaults.z80
DEFTIB:             0134 DEFINED AT LINE 18 IN defaults.z80
DEFCSP:             0136 DEFINED AT LINE 19 IN defaults.z80
DEFTEVAL:           0138 DEFINED AT LINE 20 IN defaults.z80
DEFTNUMB:           013A DEFINED AT LINE 21 IN defaults.z80
DEFHLD:             013C DEFINED AT LINE 22 IN defaults.z80
DEFHANDL:           013E DEFINED AT LINE 23 IN defaults.z80
DEFCNTXT:           0140 DEFINED AT LINE 24 IN defaults.z80
DEFVOCABS:          0142 DEFINED AT LINE 25 IN defaults.z80
DEFCRRENT:          0144 DEFINED AT LINE 26 IN defaults.z80
DEFVOCABLP:         0146 DEFINED AT LINE 27 IN defaults.z80
DEFCP:              0148 DEFINED AT LINE 28 IN defaults.z80
DEFNP:              014A DEFINED AT LINE 29 IN defaults.z80
DEFLAST:            014C DEFINED AT LINE 30 IN defaults.z80
DEFVFRTH:           014E DEFINED AT LINE 31 IN defaults.z80
DEFVOCABL:          0150 DEFINED AT LINE 32 IN defaults.z80
DEFCOLD:            0152 DEFINED AT LINE 33 IN defaults.z80
ULAST:              0154 DEFINED AT LINE 34 IN defaults.z80
                    > USED AT LINE 55 IN core-kernel.z80
END_DEFAULTS:       0154 DEFINED AT LINE 35 IN defaults.z80
                    > USED AT LINE 38 IN constants.z80
ZLESS:              0154 DEFINED AT LINE 11
                    > USED AT LINE 77 IN core-alu.z80
                    > USED AT LINE 98 IN core-alu.z80
                    > USED AT LINE 104 IN core-alu.z80
                    > USED AT LINE 106 IN core-alu.z80
                    > USED AT LINE 233 IN core-alu.z80
                    > USED AT LINE 250 IN core-alu.z80
                    > USED AT LINE 43 IN core-format.z80
                    > USED AT LINE 57 IN core-interpret.z80
                    > USED AT LINE 71 IN core-interpret.z80
                    > USED AT LINE 256 IN core-interpret.z80
VVLEN:              0001 DEFINED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 41
                    > USED AT LINE 42
                    > USED AT LINE 14
                    > USED AT LINE 41
                    > USED AT LINE 42
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 41
                    > USED AT LINE 42
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 41
                    > USED AT LINE 42
                    > USED AT LINE 41
                    > USED AT LINE 42
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 41
                    > USED AT LINE 42
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 41
                    > USED AT LINE 42
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 41
                    > USED AT LINE 42
                    > USED AT LINE 14
ANDD:               015C DEFINED AT LINE 11
ORR:                0166 DEFINED AT LINE 11
XORR:               0170 DEFINED AT LINE 11
                    > USED AT LINE 85 IN core-alu.z80
                    > USED AT LINE 94 IN core-alu.z80
                    > USED AT LINE 103 IN core-alu.z80
                    > USED AT LINE 300 IN core-alu.z80
                    > USED AT LINE 217 IN core-io.z80
PLUS:               017A DEFINED AT LINE 11
                    > USED AT LINE 67 IN core-alu.z80
                    > USED AT LINE 72 IN core-alu.z80
                    > USED AT LINE 239 IN core-alu.z80
                    > USED AT LINE 44 IN core-compiler.z80
                    > USED AT LINE 215 IN core-io.z80
                    > USED AT LINE 84 IN core-stacks.z80
INVER:              0184 DEFINED AT LINE 11
                    > USED AT LINE 60 IN core-alu.z80
                    > USED AT LINE 65 IN core-alu.z80
                    > USED AT LINE 37 IN core-utils.z80
NEGAT:              0190 DEFINED AT LINE 11
                    > USED AT LINE 72 IN core-alu.z80
                    > USED AT LINE 78 IN core-alu.z80
                    > USED AT LINE 235 IN core-alu.z80
                    > USED AT LINE 243 IN core-alu.z80
                    > USED AT LINE 34 IN core-interpret.z80
DNEGA:              019E DEFINED AT LINE 11
                    > USED AT LINE 302 IN core-alu.z80
SUBB:               01B4 DEFINED AT LINE 11
                    > USED AT LINE 98 IN core-alu.z80
                    > USED AT LINE 106 IN core-alu.z80
                    > USED AT LINE 128 IN core-alu.z80
                    > USED AT LINE 129 IN core-alu.z80
                    > USED AT LINE 57 IN core-interpret.z80
                    > USED AT LINE 82 IN core-interpret.z80
                    > USED AT LINE 135 IN core-interpret.z80
                    > USED AT LINE 185 IN core-memory.z80
ABSS:               01BE DEFINED AT LINE 11
ABS1:               01CC DEFINED AT LINE 79 IN core-alu.z80
EQUAL:              01CE DEFINED AT LINE 11
EQU1:               01DE DEFINED AT LINE 88 IN core-alu.z80
                    > USED AT LINE 86 IN core-alu.z80
ULESS:              01E4 DEFINED AT LINE 11
ULES1:              01FA DEFINED AT LINE 97 IN core-alu.z80
                    > USED AT LINE 95 IN core-alu.z80
LESS:               0200 DEFINED AT LINE 11
                    > USED AT LINE 111 IN core-alu.z80
LESS1:              0214 DEFINED AT LINE 105 IN core-alu.z80
MAX:                021A DEFINED AT LINE 11
MAX1:               0228 DEFINED AT LINE 113 IN core-alu.z80
MIN:                022C DEFINED AT LINE 11
MIN1:               023C DEFINED AT LINE 122 IN core-alu.z80
                    > USED AT LINE 120 IN core-alu.z80
WITHI:              0240 DEFINED AT LINE 11
UMPLUS:             0252 DEFINED AT LINE 49
                    > USED AT LINE 50 IN core-alu.z80
UMP2:               025A DEFINED AT LINE 139 IN core-alu.z80
UMP1:               025B DEFINED AT LINE 141 IN core-alu.z80
                    > USED AT LINE 138 IN core-alu.z80
UMMOD:              025E DEFINED AT LINE 11
                    > USED AT LINE 241 IN core-alu.z80
UMSLMOD2:           026A DEFINED AT LINE 11
UMMOD11:            026E DEFINED AT LINE 158 IN core-alu.z80
UMMOD12:            0279 DEFINED AT LINE 169 IN core-alu.z80
UMMOD2:             0293 DEFINED AT LINE 189 IN core-alu.z80
                    > USED AT LINE 157 IN core-alu.z80
UMMOD1:             0299 DEFINED AT LINE 192 IN core-alu.z80
                    > USED AT LINE 168 IN core-alu.z80
UMMOD4:             029F DEFINED AT LINE 195 IN core-alu.z80
                    > USED AT LINE 213 IN core-alu.z80
UMMOD13:            02A7 DEFINED AT LINE 203 IN core-alu.z80
UMMOD3:             02AD DEFINED AT LINE 210 IN core-alu.z80
                    > USED AT LINE 175 IN core-alu.z80
                    > USED AT LINE 179 IN core-alu.z80
                    > USED AT LINE 224 IN core-alu.z80
UMMOD14:            02B1 DEFINED AT LINE 214 IN core-alu.z80
UMMOD5:             02B7 DEFINED AT LINE 221 IN core-alu.z80
                    > USED AT LINE 202 IN core-alu.z80
UMMOD15:            02BB DEFINED AT LINE 225 IN core-alu.z80
MSMOD:              02BC DEFINED AT LINE 11
MMOD1:              02D4 DEFINED AT LINE 236 IN core-alu.z80
                    > USED AT LINE 234 IN core-alu.z80
MMOD2:              02E2 DEFINED AT LINE 240 IN core-alu.z80
                    > USED AT LINE 238 IN core-alu.z80
MMOD3:              02F2 DEFINED AT LINE 244 IN core-alu.z80
                    > USED AT LINE 242 IN core-alu.z80
SLMOD:              02F4 DEFINED AT LINE 11
                    > USED AT LINE 255 IN core-alu.z80
                    > USED AT LINE 260 IN core-alu.z80
MODD:               0302 DEFINED AT LINE 11
SLASH:              030C DEFINED AT LINE 11
UMSTA:              0318 DEFINED AT LINE 11
                    > USED AT LINE 295 IN core-alu.z80
                    > USED AT LINE 301 IN core-alu.z80
UMSTA1:             0320 DEFINED AT LINE 272 IN core-alu.z80
                    > USED AT LINE 285 IN core-alu.z80
UMSTA2:             0327 DEFINED AT LINE 278 IN core-alu.z80
UMSTA5:             032A DEFINED AT LINE 281 IN core-alu.z80
UMSTA3:             032B DEFINED AT LINE 283 IN core-alu.z80
                    > USED AT LINE 277 IN core-alu.z80
                    > USED AT LINE 280 IN core-alu.z80
UMSTA4:             032E DEFINED AT LINE 286 IN core-alu.z80
STAR:               0334 DEFINED AT LINE 11
MSTAR:              033E DEFINED AT LINE 11
                    > USED AT LINE 309 IN core-alu.z80
MSTAR1:             035A DEFINED AT LINE 303 IN core-alu.z80
SSMOD:              035C DEFINED AT LINE 11
                    > USED AT LINE 314 IN core-alu.z80
STASL:              036A DEFINED AT LINE 11
CELLP:              0376 DEFINED AT LINE 11
                    > USED AT LINE 32 IN core-compiler.z80
                    > USED AT LINE 151 IN core-interpret.z80
                    > USED AT LINE 153 IN core-interpret.z80
                    > USED AT LINE 171 IN core-interpret.z80
                    > USED AT LINE 97 IN core-memory.z80
                    > USED AT LINE 102 IN core-memory.z80
                    > USED AT LINE 125 IN core-memory.z80
                    > USED AT LINE 74 IN core-utils.z80
                    > USED AT LINE 107 IN core-utils.z80
                    > USED AT LINE 109 IN core-utils.z80
CELLM:              0382 DEFINED AT LINE 11
                    > USED AT LINE 72 IN core-compiler.z80
                    > USED AT LINE 74 IN core-compiler.z80
                    > USED AT LINE 126 IN core-interpret.z80
                    > USED AT LINE 126 IN core-interpret.z80
                    > USED AT LINE 156 IN core-interpret.z80
                    > USED AT LINE 158 IN core-interpret.z80
                    > USED AT LINE 158 IN core-interpret.z80
                    > USED AT LINE 161 IN core-interpret.z80
                    > USED AT LINE 169 IN core-interpret.z80
                    > USED AT LINE 82 IN core-utils.z80
CELLS:              038E DEFINED AT LINE 11
TICK:               039A DEFINED AT LINE 11
                    > USED AT LINE 25 IN core-compiler.z80
                    > USED AT LINE 106 IN core-utils.z80
TICK1:              03A8 DEFINED AT LINE 7 IN core-compiler.z80
                    > USED AT LINE 5 IN core-compiler.z80
ALLOT:              03AA DEFINED AT LINE 11
COMMA:              03B4 DEFINED AT LINE 11
                    > USED AT LINE 25 IN core-compiler.z80
                    > USED AT LINE 90 IN core-compiler.z80
                    > USED AT LINE 120 IN core-compiler.z80
BCOMP:              03C6 DEFINED AT LINE 11
COMPI:              03D0 DEFINED AT LINE 11
                    > USED AT LINE 38 IN core-compiler.z80
                    > USED AT LINE 107 IN core-compiler.z80
                    > USED AT LINE 142 IN core-compiler.z80
                    > USED AT LINE 150 IN core-compiler.z80
                    > USED AT LINE 4 IN core-control.z80
                    > USED AT LINE 14 IN core-control.z80
                    > USED AT LINE 19 IN core-control.z80
                    > USED AT LINE 24 IN core-control.z80
                    > USED AT LINE 30 IN core-control.z80
                    > USED AT LINE 37 IN core-control.z80
                    > USED AT LINE 69 IN core-control.z80
                    > USED AT LINE 74 IN core-control.z80
                    > USED AT LINE 79 IN core-control.z80
LITER:              03E2 DEFINED AT LINE 11
                    > USED AT LINE 94 IN core-compiler.z80
STRCQ:              03EE DEFINED AT LINE 49
RECUR:              0404 DEFINED AT LINE 11
UNIQU:              0412 DEFINED AT LINE 11
                    > USED AT LINE 69 IN core-compiler.z80
UNIQ1:              042E DEFINED AT LINE 60 IN core-compiler.z80
                    > USED AT LINE 57 IN core-compiler.z80
SNAME:              0432 DEFINED AT LINE 11
                    > USED AT LINE 126 IN core-compiler.z80
                    > USED AT LINE 140 IN core-compiler.z80
                    > USED AT LINE 148 IN core-compiler.z80
PNAM1:              0464 DEFINED AT LINE 76 IN core-compiler.z80
                    > USED AT LINE 68 IN core-compiler.z80
SCOMP:              046E DEFINED AT LINE 49
                    > USED AT LINE 113 IN core-compiler.z80
SCOM1:              048A DEFINED AT LINE 89 IN core-compiler.z80
                    > USED AT LINE 87 IN core-compiler.z80
SCOM2:              048E DEFINED AT LINE 91 IN core-compiler.z80
                    > USED AT LINE 85 IN core-compiler.z80
SCOM3:              049A DEFINED AT LINE 95 IN core-compiler.z80
                    > USED AT LINE 93 IN core-compiler.z80
OVERT:              049C DEFINED AT LINE 49
SEMIS:              04AC DEFINED AT LINE 11
RBRAC:              04BA DEFINED AT LINE 11
                    > USED AT LINE 127 IN core-compiler.z80
CALLC:              04C8 DEFINED AT LINE 49
                    > USED AT LINE 127 IN core-compiler.z80
COLON:              04D6 DEFINED AT LINE 11
IMMED:              04E8 DEFINED AT LINE 11
USER:               0500 DEFINED AT LINE 11
CREAT:              0518 DEFINED AT LINE 11
                    > USED AT LINE 156 IN core-compiler.z80
VARIA:              052E DEFINED AT LINE 11
FOR:                053C DEFINED AT LINE 11
BEGIN:              0548 DEFINED AT LINE 11
NEXT:               0550 DEFINED AT LINE 11
UNTIL:              055C DEFINED AT LINE 11
AGAIN:              0568 DEFINED AT LINE 11
                    > USED AT LINE 43 IN core-control.z80
IFF:                0574 DEFINED AT LINE 11
                    > USED AT LINE 64 IN core-control.z80
AHEAD:              0586 DEFINED AT LINE 11
                    > USED AT LINE 54 IN core-control.z80
                    > USED AT LINE 59 IN core-control.z80
REPEA:              0598 DEFINED AT LINE 11
THENN:              05A6 DEFINED AT LINE 11
AFT:                05B2 DEFINED AT LINE 11
ELSEE:              05C0 DEFINED AT LINE 11
WHILE:              05CC DEFINED AT LINE 11
ABRTQ:              05D6 DEFINED AT LINE 11
STRQ:               05E2 DEFINED AT LINE 49
DOTQ:               05EE DEFINED AT LINE 49
DOCONST:            05FA DEFINED AT LINE 49
DOLIST:             0602 DEFINED AT LINE 49
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 141 IN core-compiler.z80
                    > USED AT LINE 25
                    > USED AT LINE 149 IN core-compiler.z80
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 31
                    > USED AT LINE 31
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 31
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 31
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 31
                    > USED AT LINE 61
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
DOLIT:              0610 DEFINED AT LINE 49
                    > USED AT LINE 55 IN core-alu.z80
                    > USED AT LINE 60 IN core-alu.z80
                    > USED AT LINE 66 IN core-alu.z80
                    > USED AT LINE 87 IN core-alu.z80
                    > USED AT LINE 89 IN core-alu.z80
                    > USED AT LINE 319 IN core-alu.z80
                    > USED AT LINE 324 IN core-alu.z80
                    > USED AT LINE 329 IN core-alu.z80
                    > USED AT LINE 38 IN core-compiler.z80
                    > USED AT LINE 43 IN core-compiler.z80
                    > USED AT LINE 86 IN core-compiler.z80
                    > USED AT LINE 113 IN core-compiler.z80
                    > USED AT LINE 119 IN core-compiler.z80
                    > USED AT LINE 133 IN core-compiler.z80
                    > USED AT LINE 141 IN core-compiler.z80
                    > USED AT LINE 149 IN core-compiler.z80
                    > USED AT LINE 156 IN core-compiler.z80
                    > USED AT LINE 31 IN core-control.z80
                    > USED AT LINE 4 IN core-format.z80
                    > USED AT LINE 5 IN core-format.z80
                    > USED AT LINE 6 IN core-format.z80
                    > USED AT LINE 11 IN core-format.z80
                    > USED AT LINE 44 IN core-format.z80
                    > USED AT LINE 64 IN core-format.z80
                    > USED AT LINE 69 IN core-format.z80
                    > USED AT LINE 74 IN core-format.z80
                    > USED AT LINE 79 IN core-format.z80
                    > USED AT LINE 80 IN core-format.z80
                    > USED AT LINE 81 IN core-format.z80
                    > USED AT LINE 83 IN core-format.z80
                    > USED AT LINE 5 IN core-interpret.z80
                    > USED AT LINE 6 IN core-interpret.z80
                    > USED AT LINE 8 IN core-interpret.z80
                    > USED AT LINE 9 IN core-interpret.z80
                    > USED AT LINE 20 IN core-interpret.z80
                    > USED AT LINE 25 IN core-interpret.z80
                    > USED AT LINE 30 IN core-interpret.z80
                    > USED AT LINE 52 IN core-interpret.z80
                    > USED AT LINE 59 IN core-interpret.z80
                    > USED AT LINE 74 IN core-interpret.z80
                    > USED AT LINE 80 IN core-interpret.z80
                    > USED AT LINE 99 IN core-interpret.z80
                    > USED AT LINE 139 IN core-interpret.z80
                    > USED AT LINE 145 IN core-interpret.z80
                    > USED AT LINE 151 IN core-interpret.z80
                    > USED AT LINE 178 IN core-interpret.z80
                    > USED AT LINE 227 IN core-interpret.z80
                    > USED AT LINE 241 IN core-interpret.z80
                    > USED AT LINE 247 IN core-interpret.z80
                    > USED AT LINE 87 IN core-io.z80
                    > USED AT LINE 97 IN core-io.z80
                    > USED AT LINE 112 IN core-io.z80
                    > USED AT LINE 124 IN core-io.z80
                    > USED AT LINE 132 IN core-io.z80
                    > USED AT LINE 175 IN core-io.z80
                    > USED AT LINE 187 IN core-io.z80
                    > USED AT LINE 189 IN core-io.z80
                    > USED AT LINE 202 IN core-io.z80
                    > USED AT LINE 204 IN core-io.z80
                    > USED AT LINE 220 IN core-io.z80
                    > USED AT LINE 239 IN core-io.z80
                    > USED AT LINE 240 IN core-io.z80
                    > USED AT LINE 20 IN core-kernel.z80
                    > USED AT LINE 24 IN core-kernel.z80
                    > USED AT LINE 44 IN core-kernel.z80
                    > USED AT LINE 47 IN core-kernel.z80
                    > USED AT LINE 54 IN core-kernel.z80
                    > USED AT LINE 55 IN core-kernel.z80
                    > USED AT LINE 67 IN core-kernel.z80
                    > USED AT LINE 108 IN core-memory.z80
                    > USED AT LINE 119 IN core-memory.z80
                    > USED AT LINE 146 IN core-memory.z80
                    > USED AT LINE 147 IN core-memory.z80
                    > USED AT LINE 173 IN core-memory.z80
                    > USED AT LINE 176 IN core-memory.z80
                    > USED AT LINE 184 IN core-memory.z80
                    > USED AT LINE 186 IN core-memory.z80
                    > USED AT LINE 83 IN core-stacks.z80
                    > USED AT LINE 90 IN core-stacks.z80
                    > USED AT LINE 8 IN core-utils.z80
                    > USED AT LINE 16 IN core-utils.z80
                    > USED AT LINE 21 IN core-utils.z80
                    > USED AT LINE 31 IN core-utils.z80
                    > USED AT LINE 34 IN core-utils.z80
                    > USED AT LINE 89 IN core-utils.z80
                    > USED AT LINE 96 IN core-utils.z80
DOVAR:              0618 DEFINED AT LINE 49
                    > USED AT LINE 150 IN core-compiler.z80
                    > USED AT LINE 41 IN core-does.z80
                    > USED AT LINE 201 IN core-interpret.z80
UP:                 0620 DEFINED AT LINE 49
DOUSE:              0628 DEFINED AT LINE 49
                    > USED AT LINE 142 IN core-compiler.z80
                    > USED AT LINE 32
                    > USED AT LINE 32
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 32
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 32
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 32
                    > USED AT LINE 62
DOSTR:              0638 DEFINED AT LINE 49
                    > USED AT LINE 217 IN core-interpret.z80
                    > USED AT LINE 219 IN core-interpret.z80
                    > USED AT LINE 137 IN core-io.z80
                    > USED AT LINE 142 IN core-io.z80
EXIT:               0650 DEFINED AT LINE 11
                    > USED AT LINE 80 IN core-alu.z80
                    > USED AT LINE 114 IN core-alu.z80
                    > USED AT LINE 123 IN core-alu.z80
                    > USED AT LINE 245 IN core-alu.z80
                    > USED AT LINE 304 IN core-alu.z80
                    > USED AT LINE 6 IN core-compiler.z80
                    > USED AT LINE 61 IN core-compiler.z80
                    > USED AT LINE 75 IN core-compiler.z80
                    > USED AT LINE 88 IN core-compiler.z80
                    > USED AT LINE 90 IN core-compiler.z80
                    > USED AT LINE 94 IN core-compiler.z80
                    > USED AT LINE 107 IN core-compiler.z80
                    > USED AT LINE 120 IN core-compiler.z80
                    > USED AT LINE 9 IN core-control.z80
                    > USED AT LINE 36 IN core-does.z80
                    > USED AT LINE 38 IN core-format.z80
                    > USED AT LINE 46 IN core-format.z80
                    > USED AT LINE 85 IN core-format.z80
                    > USED AT LINE 116 IN core-interpret.z80
                    > USED AT LINE 229 IN core-interpret.z80
                    > USED AT LINE 233 IN core-interpret.z80
                    > USED AT LINE 250 IN core-interpret.z80
                    > USED AT LINE 258 IN core-interpret.z80
                    > USED AT LINE 67 IN core-io.z80
                    > USED AT LINE 82 IN core-io.z80
                    > USED AT LINE 103 IN core-io.z80
                    > USED AT LINE 115 IN core-io.z80
                    > USED AT LINE 127 IN core-io.z80
                    > USED AT LINE 137 IN core-io.z80
                    > USED AT LINE 168 IN core-io.z80
                    > USED AT LINE 191 IN core-io.z80
                    > USED AT LINE 208 IN core-io.z80
                    > USED AT LINE 49 IN core-kernel.z80
                    > USED AT LINE 104 IN core-kernel.z80
                    > USED AT LINE 135 IN core-memory.z80
                    > USED AT LINE 150 IN core-memory.z80
                    > USED AT LINE 162 IN core-memory.z80
                    > USED AT LINE 193 IN core-memory.z80
                    > USED AT LINE 58 IN core-stacks.z80
                    > USED AT LINE 11 IN core-utils.z80
                    > USED AT LINE 24 IN core-utils.z80
                    > USED AT LINE 45 IN core-utils.z80
                    > USED AT LINE 58 IN core-utils.z80
                    > USED AT LINE 97 IN core-utils.z80
                    > USED AT LINE 100 IN core-utils.z80
                    > USED AT LINE 122 IN core-utils.z80
DONXT:              065C DEFINED AT LINE 11
                    > USED AT LINE 14 IN core-control.z80
                    > USED AT LINE 31 IN core-interpret.z80
                    > USED AT LINE 60 IN core-interpret.z80
                    > USED AT LINE 75 IN core-interpret.z80
                    > USED AT LINE 138 IN core-interpret.z80
                    > USED AT LINE 102 IN core-io.z80
                    > USED AT LINE 114 IN core-io.z80
                    > USED AT LINE 149 IN core-memory.z80
                    > USED AT LINE 161 IN core-memory.z80
                    > USED AT LINE 175 IN core-memory.z80
                    > USED AT LINE 10 IN core-utils.z80
                    > USED AT LINE 23 IN core-utils.z80
                    > USED AT LINE 39 IN core-utils.z80
                    > USED AT LINE 56 IN core-utils.z80
DECHILO:            0671 DEFINED AT LINE 84 IN core-does.z80
                    > USED AT LINE 77 IN core-does.z80
DECLOW:             0673 DEFINED AT LINE 87 IN core-does.z80
                    > USED AT LINE 73 IN core-does.z80
DIGIT:              067C DEFINED AT LINE 49
                    > USED AT LINE 12 IN core-format.z80
EXTRC:              0696 DEFINED AT LINE 49
BDIGS:              06A8 DEFINED AT LINE 11
                    > USED AT LINE 58 IN core-format.z80
                    > USED AT LINE 153 IN core-io.z80
                    > USED AT LINE 160 IN core-io.z80
HOLD:               06B4 DEFINED AT LINE 11
DIG:                06CC DEFINED AT LINE 11
                    > USED AT LINE 34 IN core-format.z80
DIGS:               06DA DEFINED AT LINE 11
                    > USED AT LINE 58 IN core-format.z80
                    > USED AT LINE 160 IN core-io.z80
DIGS1:              06DE DEFINED AT LINE 33 IN core-format.z80
                    > USED AT LINE 36 IN core-format.z80
DIGS2:              06EA DEFINED AT LINE 37 IN core-format.z80
                    > USED AT LINE 35 IN core-format.z80
SIGN:               06EC DEFINED AT LINE 11
                    > USED AT LINE 59 IN core-format.z80
SIGN1:              06FC DEFINED AT LINE 45 IN core-format.z80
EDIGS:              06FE DEFINED AT LINE 11
                    > USED AT LINE 59 IN core-format.z80
STR:                0710 DEFINED AT LINE 49
                    > USED AT LINE 147 IN core-io.z80
                    > USED AT LINE 170 IN core-io.z80
HEX:                0726 DEFINED AT LINE 11
                    > USED AT LINE 19 IN core-interpret.z80
DECIMAL:            0734 DEFINED AT LINE 11
BLANK:              0742 DEFINED AT LINE 11
                    > USED AT LINE 56 IN core-interpret.z80
                    > USED AT LINE 109 IN core-interpret.z80
                    > USED AT LINE 114 IN core-interpret.z80
                    > USED AT LINE 92 IN core-io.z80
                    > USED AT LINE 188 IN core-io.z80
                    > USED AT LINE 206 IN core-io.z80
                    > USED AT LINE 220 IN core-io.z80
                    > USED AT LINE 171 IN core-memory.z80
TCHAR:              074C DEFINED AT LINE 49
TCHA1:              076C DEFINED AT LINE 84 IN core-format.z80
                    > USED AT LINE 82 IN core-format.z80
DIGTQ:              076E DEFINED AT LINE 49
DGTQ1:              0794 DEFINED AT LINE 10 IN core-interpret.z80
                    > USED AT LINE 7 IN core-interpret.z80
NUMBQ:              079C DEFINED AT LINE 49
                    > USED AT LINE 21 IN defaults.z80
NUMQ1:              07CC DEFINED AT LINE 21 IN core-interpret.z80
                    > USED AT LINE 18 IN core-interpret.z80
NUMQ2:              07F0 DEFINED AT LINE 26 IN core-interpret.z80
                    > USED AT LINE 31 IN core-interpret.z80
NUMQ3:              0822 DEFINED AT LINE 35 IN core-interpret.z80
                    > USED AT LINE 33 IN core-interpret.z80
NUMQ4:              0828 DEFINED AT LINE 38 IN core-interpret.z80
                    > USED AT LINE 28 IN core-interpret.z80
NUMQ5:              0834 DEFINED AT LINE 40 IN core-interpret.z80
                    > USED AT LINE 37 IN core-interpret.z80
NUMQ6:              0836 DEFINED AT LINE 42 IN core-interpret.z80
                    > USED AT LINE 24 IN core-interpret.z80
PARS:               0842 DEFINED AT LINE 49
                    > USED AT LINE 93 IN core-interpret.z80
PARS1:              0868 DEFINED AT LINE 55 IN core-interpret.z80
                    > USED AT LINE 60 IN core-interpret.z80
PARS2:              088E DEFINED AT LINE 62 IN core-interpret.z80
                    > USED AT LINE 58 IN core-interpret.z80
PARS3:              0890 DEFINED AT LINE 64 IN core-interpret.z80
                    > USED AT LINE 53 IN core-interpret.z80
PARS4:              0896 DEFINED AT LINE 67 IN core-interpret.z80
                    > USED AT LINE 75 IN core-interpret.z80
PARS5:              08AE DEFINED AT LINE 72 IN core-interpret.z80
                    > USED AT LINE 70 IN core-interpret.z80
PARS6:              08C4 DEFINED AT LINE 78 IN core-interpret.z80
                    > USED AT LINE 73 IN core-interpret.z80
PARS7:              08D2 DEFINED AT LINE 81 IN core-interpret.z80
                    > USED AT LINE 77 IN core-interpret.z80
PARS8:              08DE DEFINED AT LINE 84 IN core-interpret.z80
                    > USED AT LINE 51 IN core-interpret.z80
PARSE:              08E6 DEFINED AT LINE 11
                    > USED AT LINE 109 IN core-interpret.z80
                    > USED AT LINE 114 IN core-interpret.z80
                    > USED AT LINE 121 IN core-interpret.z80
PAREN:              0908 DEFINED AT LINE 11
BKSLA:              0914 DEFINED AT LINE 11
CHAR:               0922 DEFINED AT LINE 11
TOKEN:              0930 DEFINED AT LINE 49
                    > USED AT LINE 4 IN core-compiler.z80
                    > USED AT LINE 126 IN core-compiler.z80
                    > USED AT LINE 140 IN core-compiler.z80
                    > USED AT LINE 148 IN core-compiler.z80
                    > USED AT LINE 265 IN core-interpret.z80
WORDD:              094C DEFINED AT LINE 11
NAMET:              0958 DEFINED AT LINE 49
                    > USED AT LINE 162 IN core-interpret.z80
                    > USED AT LINE 80 IN core-utils.z80
SAMEQ:              0964 DEFINED AT LINE 49
SAME1:              096E DEFINED AT LINE 133 IN core-interpret.z80
                    > USED AT LINE 138 IN core-interpret.z80
SAME2:              0990 DEFINED AT LINE 138 IN core-interpret.z80
                    > USED AT LINE 132 IN core-interpret.z80
                    > USED AT LINE 136 IN core-interpret.z80
FIND:               099A DEFINED AT LINE 11
                    > USED AT LINE 174 IN core-interpret.z80
FIND1:              09B8 DEFINED AT LINE 147 IN core-interpret.z80
                    > USED AT LINE 159 IN core-interpret.z80
FIND2:              09DC DEFINED AT LINE 153 IN core-interpret.z80
                    > USED AT LINE 150 IN core-interpret.z80
FIND3:              09E4 DEFINED AT LINE 154 IN core-interpret.z80
                    > USED AT LINE 152 IN core-interpret.z80
FIND6:              09E8 DEFINED AT LINE 155 IN core-interpret.z80
                    > USED AT LINE 148 IN core-interpret.z80
FIND4:              09F4 DEFINED AT LINE 157 IN core-interpret.z80
                    > USED AT LINE 154 IN core-interpret.z80
FIND5:              0A00 DEFINED AT LINE 160 IN core-interpret.z80
                    > USED AT LINE 157 IN core-interpret.z80
NAMEQ:              0A12 DEFINED AT LINE 49
                    > USED AT LINE 4 IN core-compiler.z80
                    > USED AT LINE 56 IN core-compiler.z80
                    > USED AT LINE 84 IN core-compiler.z80
                    > USED AT LINE 225 IN core-interpret.z80
NAMQ1:              0A24 DEFINED AT LINE 170 IN core-interpret.z80
                    > USED AT LINE 168 IN core-interpret.z80
NAMQ2:              0A26 DEFINED AT LINE 171 IN core-interpret.z80
                    > USED AT LINE 175 IN core-interpret.z80
NAMQ3:              0A44 DEFINED AT LINE 177 IN core-interpret.z80
                    > USED AT LINE 173 IN core-interpret.z80
CATCH:              0A4E DEFINED AT LINE 11
THROW:              0A74 DEFINED AT LINE 11
                    > USED AT LINE 8 IN core-compiler.z80
                    > USED AT LINE 78 IN core-compiler.z80
                    > USED AT LINE 95 IN core-compiler.z80
                    > USED AT LINE 210 IN core-interpret.z80
                    > USED AT LINE 217 IN core-interpret.z80
                    > USED AT LINE 235 IN core-interpret.z80
NULLS:              0A92 DEFINED AT LINE 49
                    > USED AT LINE 210 IN core-interpret.z80
ABORT:              0AA0 DEFINED AT LINE 11
ABORQ:              0AA8 DEFINED AT LINE 49
                    > USED AT LINE 69 IN core-control.z80
                    > USED AT LINE 37
                    > USED AT LINE 37
ABOR1:              0AB4 DEFINED AT LINE 218 IN core-interpret.z80
                    > USED AT LINE 216 IN core-interpret.z80
INTER:              0ABA DEFINED AT LINE 49
                    > USED AT LINE 20 IN defaults.z80
                    > USED AT LINE 241 IN core-interpret.z80
                    > USED AT LINE 247 IN core-interpret.z80
INTE1:              0AE2 DEFINED AT LINE 230 IN core-interpret.z80
                    > USED AT LINE 226 IN core-interpret.z80
INTE2:              0AEC DEFINED AT LINE 234 IN core-interpret.z80
                    > USED AT LINE 232 IN core-interpret.z80
LBRAC:              0AEE DEFINED AT LINE 11
DOTOK:              0AFC DEFINED AT LINE 11
                    > USED AT LINE 12 IN defaults.z80
DOTO1:              0B14 DEFINED AT LINE 250 IN core-interpret.z80
                    > USED AT LINE 248 IN core-interpret.z80
QSTAC:              0B18 DEFINED AT LINE 49
EVAL:               0B30 DEFINED AT LINE 11
EVAL1:              0B34 DEFINED AT LINE 264 IN core-interpret.z80
                    > USED AT LINE 268 IN core-interpret.z80
EVAL2:              0B48 DEFINED AT LINE 269 IN core-interpret.z80
                    > USED AT LINE 266 IN core-interpret.z80
PCSTO:              0B50 DEFINED AT LINE 11
PCAT:               0B5A DEFINED AT LINE 11
STOIO:              0B66 DEFINED AT LINE 11
                    > USED AT LINE 19 IN core-kernel.z80
                    > USED AT LINE 33 IN core-kernel.z80
QRX:                0B6C DEFINED AT LINE 11
                    > USED AT LINE 7 IN defaults.z80
QRX1:               0B77 DEFINED AT LINE 36 IN core-io.z80
                    > USED AT LINE 33 IN core-io.z80
QRX2:               0B81 DEFINED AT LINE 42 IN core-io.z80
                    > USED AT LINE 35 IN core-io.z80
TXSTO:              0B84 DEFINED AT LINE 11
                    > USED AT LINE 8 IN defaults.z80
                    > USED AT LINE 11 IN defaults.z80
QKEY:               0B8C DEFINED AT LINE 11
                    > USED AT LINE 62 IN core-io.z80
                    > USED AT LINE 78 IN core-io.z80
KEY:                0B98 DEFINED AT LINE 11
                    > USED AT LINE 80 IN core-io.z80
                    > USED AT LINE 219 IN core-io.z80
                    > USED AT LINE 22 IN core-kernel.z80
                    > USED AT LINE 42 IN core-kernel.z80
KEY1:               0B9C DEFINED AT LINE 61 IN core-io.z80
                    > USED AT LINE 66 IN core-io.z80
KEY2:               0BA4 DEFINED AT LINE 65 IN core-io.z80
EMIT:               0BAA DEFINED AT LINE 11
                    > USED AT LINE 92 IN core-io.z80
                    > USED AT LINE 123 IN core-io.z80
                    > USED AT LINE 23 IN core-kernel.z80
                    > USED AT LINE 43 IN core-kernel.z80
NUFQ:               0BB6 DEFINED AT LINE 11
                    > USED AT LINE 37 IN core-utils.z80
                    > USED AT LINE 120 IN core-utils.z80
NUFQ1:              0BCC DEFINED AT LINE 81 IN core-io.z80
                    > USED AT LINE 79 IN core-io.z80
PACE:               0BCE DEFINED AT LINE 49
SPACE:              0BDA DEFINED AT LINE 11
                    > USED AT LINE 100 IN core-io.z80
                    > USED AT LINE 161 IN core-io.z80
                    > USED AT LINE 170 IN core-io.z80
                    > USED AT LINE 17 IN core-utils.z80
                    > USED AT LINE 36 IN core-utils.z80
                    > USED AT LINE 36 IN core-utils.z80
                    > USED AT LINE 115 IN core-utils.z80
SPACS:              0BE4 DEFINED AT LINE 11
                    > USED AT LINE 148 IN core-io.z80
                    > USED AT LINE 155 IN core-io.z80
CHAR1:              0BF4 DEFINED AT LINE 99 IN core-io.z80
                    > USED AT LINE 102 IN core-io.z80
CHAR2:              0BF6 DEFINED AT LINE 101 IN core-io.z80
                    > USED AT LINE 98 IN core-io.z80
TYPEE:              0BFC DEFINED AT LINE 11
                    > USED AT LINE 148 IN core-io.z80
                    > USED AT LINE 155 IN core-io.z80
                    > USED AT LINE 161 IN core-io.z80
TYPE1:              0C06 DEFINED AT LINE 110 IN core-io.z80
                    > USED AT LINE 114 IN core-io.z80
TYPE2:              0C12 DEFINED AT LINE 113 IN core-io.z80
                    > USED AT LINE 109 IN core-io.z80
TYPEZ:              0C1A DEFINED AT LINE 11
                    > USED AT LINE 21 IN core-kernel.z80
                    > USED AT LINE 25 IN core-kernel.z80
                    > USED AT LINE 48 IN core-kernel.z80
                    > USED AT LINE 104 IN core-kernel.z80
TYPEZ1:             0C1E DEFINED AT LINE 120 IN core-io.z80
                    > USED AT LINE 125 IN core-io.z80
TYPEZ2:             0C34 DEFINED AT LINE 126 IN core-io.z80
CR:                 0C38 DEFINED AT LINE 11
                    > USED AT LINE 250 IN core-interpret.z80
                    > USED AT LINE 33 IN core-kernel.z80
                    > USED AT LINE 40 IN core-kernel.z80
                    > USED AT LINE 49 IN core-kernel.z80
                    > USED AT LINE 34 IN core-utils.z80
                    > USED AT LINE 50 IN core-utils.z80
                    > USED AT LINE 107 IN core-utils.z80
STRQP:              0C4A DEFINED AT LINE 49
                    > USED AT LINE 37
                    > USED AT LINE 74 IN core-control.z80
DOTQP:              0C52 DEFINED AT LINE 49
                    > USED AT LINE 37
                    > USED AT LINE 79 IN core-control.z80
                    > USED AT LINE 37
                    > USED AT LINE 37
                    > USED AT LINE 37
                    > USED AT LINE 37
DOTR:               0C5E DEFINED AT LINE 11
UDOTR:              0C72 DEFINED AT LINE 11
UDOT:               0C8A DEFINED AT LINE 11
                    > USED AT LINE 168 IN core-io.z80
DOT:                0C9A DEFINED AT LINE 11
                    > USED AT LINE 180 IN core-io.z80
DOT1:               0CB0 DEFINED AT LINE 169 IN core-io.z80
                    > USED AT LINE 167 IN core-io.z80
DOTPR:              0CB8 DEFINED AT LINE 11
QUEST:              0CC4 DEFINED AT LINE 11
BKSP:               0CCE DEFINED AT LINE 11
                    > USED AT LINE 208 IN core-io.z80
BACK1:              0CFE DEFINED AT LINE 190 IN core-io.z80
                    > USED AT LINE 186 IN core-io.z80
TAP:                0D00 DEFINED AT LINE 11
                    > USED AT LINE 206 IN core-io.z80
                    > USED AT LINE 222 IN core-io.z80
KTAP:               0D16 DEFINED AT LINE 11
                    > USED AT LINE 10 IN defaults.z80
KTAP1:              0D36 DEFINED AT LINE 207 IN core-io.z80
                    > USED AT LINE 205 IN core-io.z80
KTAP2:              0D3A DEFINED AT LINE 209 IN core-io.z80
                    > USED AT LINE 203 IN core-io.z80
ACCEP:              0D44 DEFINED AT LINE 11
                    > USED AT LINE 9 IN defaults.z80
ACCP1:              0D4E DEFINED AT LINE 216 IN core-io.z80
                    > USED AT LINE 227 IN core-io.z80
ACCP2:              0D6C DEFINED AT LINE 224 IN core-io.z80
                    > USED AT LINE 221 IN core-io.z80
ACCP3:              0D70 DEFINED AT LINE 226 IN core-io.z80
                    > USED AT LINE 223 IN core-io.z80
ACCP4:              0D74 DEFINED AT LINE 228 IN core-io.z80
                    > USED AT LINE 218 IN core-io.z80
EXPEC:              0D7C DEFINED AT LINE 49
QUERY:              0D8C DEFINED AT LINE 49
CALL_FORTH:         0DAA DEFINED AT LINE 2 IN core-kernel.z80
                    > USED AT LINE 58
RETURN_HERE:        0DAE DEFINED AT LINE 5 IN core-kernel.z80
                    > USED AT LINE 8 IN core-kernel.z80
TRETURN_HERE:       0DAF DEFINED AT LINE 7 IN core-kernel.z80
                    > USED AT LINE 3 IN core-kernel.z80
NEXT_STEP:          0DB1 DEFINED AT LINE 10 IN core-kernel.z80
                    > USED AT LINE 54
                    > USED AT LINE 34 IN interrupt.z80
HI2X:               0DB8 DEFINED AT LINE 49
HELLO:              0DD0 DEFINED AT LINE 27 IN core-kernel.z80
                    > USED AT LINE 20 IN core-kernel.z80
                    > USED AT LINE 24 IN core-kernel.z80
                    > USED AT LINE 47 IN core-kernel.z80
HI:                 0DE0 DEFINED AT LINE 49
                    > USED AT LINE 57
HI1:                0DF5 DEFINED AT LINE 41 IN core-kernel.z80
                    > USED AT LINE 46 IN core-kernel.z80
COLD:               0E10 DEFINED AT LINE 11
COLD1:              0E14 DEFINED AT LINE 53 IN core-kernel.z80
                    > USED AT LINE 61 IN core-kernel.z80
PRESE:              0E2A DEFINED AT LINE 11
                    > USED AT LINE 56 IN core-kernel.z80
QUIT:               0E40 DEFINED AT LINE 11
                    > USED AT LINE 26 IN core-kernel.z80
                    > USED AT LINE 60 IN core-kernel.z80
EXECU:              0E42 DEFINED AT LINE 11
                    > USED AT LINE 88 IN core-compiler.z80
                    > USED AT LINE 229 IN core-interpret.z80
                    > USED AT LINE 133 IN core-memory.z80
QBRAN:              0E46 DEFINED AT LINE 49
                    > USED AT LINE 86 IN core-alu.z80
                    > USED AT LINE 95 IN core-alu.z80
                    > USED AT LINE 120 IN core-alu.z80
                    > USED AT LINE 234 IN core-alu.z80
                    > USED AT LINE 238 IN core-alu.z80
                    > USED AT LINE 242 IN core-alu.z80
                    > USED AT LINE 5 IN core-compiler.z80
                    > USED AT LINE 57 IN core-compiler.z80
                    > USED AT LINE 68 IN core-compiler.z80
                    > USED AT LINE 85 IN core-compiler.z80
                    > USED AT LINE 87 IN core-compiler.z80
                    > USED AT LINE 93 IN core-compiler.z80
                    > USED AT LINE 19 IN core-control.z80
                    > USED AT LINE 30 IN core-control.z80
                    > USED AT LINE 35 IN core-format.z80
                    > USED AT LINE 43 IN core-format.z80
                    > USED AT LINE 82 IN core-format.z80
                    > USED AT LINE 7 IN core-interpret.z80
                    > USED AT LINE 18 IN core-interpret.z80
                    > USED AT LINE 24 IN core-interpret.z80
                    > USED AT LINE 28 IN core-interpret.z80
                    > USED AT LINE 33 IN core-interpret.z80
                    > USED AT LINE 51 IN core-interpret.z80
                    > USED AT LINE 53 IN core-interpret.z80
                    > USED AT LINE 58 IN core-interpret.z80
                    > USED AT LINE 70 IN core-interpret.z80
                    > USED AT LINE 73 IN core-interpret.z80
                    > USED AT LINE 136 IN core-interpret.z80
                    > USED AT LINE 148 IN core-interpret.z80
                    > USED AT LINE 150 IN core-interpret.z80
                    > USED AT LINE 157 IN core-interpret.z80
                    > USED AT LINE 168 IN core-interpret.z80
                    > USED AT LINE 173 IN core-interpret.z80
                    > USED AT LINE 175 IN core-interpret.z80
                    > USED AT LINE 216 IN core-interpret.z80
                    > USED AT LINE 226 IN core-interpret.z80
                    > USED AT LINE 232 IN core-interpret.z80
                    > USED AT LINE 248 IN core-interpret.z80
                    > USED AT LINE 266 IN core-interpret.z80
                    > USED AT LINE 63 IN core-io.z80
                    > USED AT LINE 66 IN core-io.z80
                    > USED AT LINE 79 IN core-io.z80
                    > USED AT LINE 122 IN core-io.z80
                    > USED AT LINE 167 IN core-io.z80
                    > USED AT LINE 186 IN core-io.z80
                    > USED AT LINE 203 IN core-io.z80
                    > USED AT LINE 205 IN core-io.z80
                    > USED AT LINE 218 IN core-io.z80
                    > USED AT LINE 221 IN core-io.z80
                    > USED AT LINE 46 IN core-kernel.z80
                    > USED AT LINE 132 IN core-memory.z80
                    > USED AT LINE 172 IN core-memory.z80
                    > USED AT LINE 55 IN core-stacks.z80
                    > USED AT LINE 38 IN core-utils.z80
                    > USED AT LINE 75 IN core-utils.z80
                    > USED AT LINE 79 IN core-utils.z80
                    > USED AT LINE 81 IN core-utils.z80
                    > USED AT LINE 86 IN core-utils.z80
                    > USED AT LINE 95 IN core-utils.z80
                    > USED AT LINE 110 IN core-utils.z80
                    > USED AT LINE 114 IN core-utils.z80
                    > USED AT LINE 121 IN core-utils.z80
BRAN:               0E52 DEFINED AT LINE 49
                    > USED AT LINE 24 IN core-control.z80
                    > USED AT LINE 37 IN core-control.z80
                    > USED AT LINE 36 IN core-format.z80
                    > USED AT LINE 37 IN core-interpret.z80
                    > USED AT LINE 77 IN core-interpret.z80
                    > USED AT LINE 132 IN core-interpret.z80
                    > USED AT LINE 152 IN core-interpret.z80
                    > USED AT LINE 154 IN core-interpret.z80
                    > USED AT LINE 159 IN core-interpret.z80
                    > USED AT LINE 268 IN core-interpret.z80
                    > USED AT LINE 98 IN core-io.z80
                    > USED AT LINE 109 IN core-io.z80
                    > USED AT LINE 125 IN core-io.z80
                    > USED AT LINE 223 IN core-io.z80
                    > USED AT LINE 227 IN core-io.z80
                    > USED AT LINE 61 IN core-kernel.z80
                    > USED AT LINE 86 IN core-kernel.z80
                    > USED AT LINE 142 IN core-memory.z80
                    > USED AT LINE 157 IN core-memory.z80
                    > USED AT LINE 169 IN core-memory.z80
                    > USED AT LINE 5 IN core-utils.z80
                    > USED AT LINE 18 IN core-utils.z80
                    > USED AT LINE 40 IN core-utils.z80
                    > USED AT LINE 52 IN core-utils.z80
                    > USED AT LINE 83 IN core-utils.z80
                    > USED AT LINE 116 IN core-utils.z80
THROWX:             0E5A DEFINED AT LINE 11
                    > USED AT LINE 191 IN core-alu.z80
                    > USED AT LINE 194 IN core-alu.z80
STORE:              0E62 DEFINED AT LINE 11
                    > USED AT LINE 19 IN core-compiler.z80
                    > USED AT LINE 45 IN core-compiler.z80
                    > USED AT LINE 75 IN core-compiler.z80
                    > USED AT LINE 50 IN core-interpret.z80
                    > USED AT LINE 91 IN core-memory.z80
                    > USED AT LINE 97 IN core-memory.z80
AT:                 0E6C DEFINED AT LINE 11
                    > USED AT LINE 50 IN core-compiler.z80
                    > USED AT LINE 73 IN core-compiler.z80
                    > USED AT LINE 86 IN core-compiler.z80
                    > USED AT LINE 101 IN core-compiler.z80
                    > USED AT LINE 134 IN core-compiler.z80
                    > USED AT LINE 47 IN core-does.z80
                    > USED AT LINE 22 IN core-format.z80
                    > USED AT LINE 28 IN core-format.z80
                    > USED AT LINE 16 IN core-interpret.z80
                    > USED AT LINE 68 IN core-interpret.z80
                    > USED AT LINE 69 IN core-interpret.z80
                    > USED AT LINE 92 IN core-interpret.z80
                    > USED AT LINE 104 IN core-interpret.z80
                    > USED AT LINE 115 IN core-interpret.z80
                    > USED AT LINE 146 IN core-interpret.z80
                    > USED AT LINE 147 IN core-interpret.z80
                    > USED AT LINE 149 IN core-interpret.z80
                    > USED AT LINE 172 IN core-interpret.z80
                    > USED AT LINE 192 IN core-interpret.z80
                    > USED AT LINE 227 IN core-interpret.z80
                    > USED AT LINE 56 IN core-io.z80
                    > USED AT LINE 72 IN core-io.z80
                    > USED AT LINE 166 IN core-io.z80
                    > USED AT LINE 180 IN core-io.z80
                    > USED AT LINE 66 IN core-kernel.z80
                    > USED AT LINE 103 IN core-memory.z80
                    > USED AT LINE 114 IN core-memory.z80
                    > USED AT LINE 131 IN core-memory.z80
                    > USED AT LINE 30 IN core-utils.z80
                    > USED AT LINE 74 IN core-utils.z80
                    > USED AT LINE 78 IN core-utils.z80
                    > USED AT LINE 118 IN core-utils.z80
CSTOR:              0E74 DEFINED AT LINE 11
                    > USED AT LINE 197 IN core-io.z80
                    > USED AT LINE 145 IN core-memory.z80
                    > USED AT LINE 159 IN core-memory.z80
                    > USED AT LINE 187 IN core-memory.z80
CAT:                0E7C DEFINED AT LINE 11
                    > USED AT LINE 67 IN core-compiler.z80
                    > USED AT LINE 17 IN core-interpret.z80
                    > USED AT LINE 22 IN core-interpret.z80
                    > USED AT LINE 111 IN core-io.z80
                    > USED AT LINE 121 IN core-io.z80
                    > USED AT LINE 109 IN core-memory.z80
                    > USED AT LINE 7 IN core-utils.z80
                    > USED AT LINE 20 IN core-utils.z80
RAT:                0E84 DEFINED AT LINE 11
                    > USED AT LINE 239 IN core-alu.z80
                    > USED AT LINE 52 IN core-does.z80
                    > USED AT LINE 23 IN core-interpret.z80
                    > USED AT LINE 32 IN core-interpret.z80
                    > USED AT LINE 133 IN core-interpret.z80
                    > USED AT LINE 134 IN core-interpret.z80
                    > USED AT LINE 145 IN core-memory.z80
                    > USED AT LINE 54 IN core-utils.z80
RPAT:               0E8E DEFINED AT LINE 11
                    > USED AT LINE 185 IN core-interpret.z80
RPSTO:              0E96 DEFINED AT LINE 11
SPAT:               0E9E DEFINED AT LINE 11
                    > USED AT LINE 184 IN core-interpret.z80
                    > USED AT LINE 84 IN core-stacks.z80
                    > USED AT LINE 89 IN core-stacks.z80
SPSTO:              0EA8 DEFINED AT LINE 11
PSTOR:              0EB0 DEFINED AT LINE 11
                    > USED AT LINE 13 IN core-compiler.z80
DSTOR:              0EC2 DEFINED AT LINE 11
DAT:                0ED2 DEFINED AT LINE 11
COUNT:              0EE2 DEFINED AT LINE 11
                    > USED AT LINE 44 IN core-compiler.z80
                    > USED AT LINE 59 IN core-compiler.z80
                    > USED AT LINE 142 IN core-io.z80
                    > USED AT LINE 96 IN core-utils.z80
HERE:               0EF4 DEFINED AT LINE 11
                    > USED AT LINE 18 IN core-compiler.z80
                    > USED AT LINE 71 IN core-compiler.z80
                    > USED AT LINE 9 IN core-control.z80
                    > USED AT LINE 43 IN core-control.z80
                    > USED AT LINE 48 IN core-control.z80
                    > USED AT LINE 121 IN core-interpret.z80
                    > USED AT LINE 119 IN core-memory.z80
PAD:                0EFE DEFINED AT LINE 11
                    > USED AT LINE 17 IN core-format.z80
                    > USED AT LINE 52 IN core-format.z80
TIB:                0F0C DEFINED AT LINE 11
                    > USED AT LINE 91 IN core-interpret.z80
                    > USED AT LINE 239 IN core-io.z80
ATEXE:              0F18 DEFINED AT LINE 49
                    > USED AT LINE 92 IN core-compiler.z80
                    > USED AT LINE 231 IN core-interpret.z80
                    > USED AT LINE 267 IN core-interpret.z80
                    > USED AT LINE 225 IN core-io.z80
                    > USED AT LINE 234 IN core-io.z80
EXE1:               0F26 DEFINED AT LINE 134 IN core-memory.z80
                    > USED AT LINE 132 IN core-memory.z80
CMOVE:              0F28 DEFINED AT LINE 11
                    > USED AT LINE 188 IN core-memory.z80
CMOV1:              0F32 DEFINED AT LINE 143 IN core-memory.z80
                    > USED AT LINE 149 IN core-memory.z80
CMOV2:              0F4A DEFINED AT LINE 148 IN core-memory.z80
                    > USED AT LINE 142 IN core-memory.z80
FILL:               0F52 DEFINED AT LINE 11
FILL1:              0F60 DEFINED AT LINE 158 IN core-memory.z80
                    > USED AT LINE 161 IN core-memory.z80
FILL2:              0F6A DEFINED AT LINE 160 IN core-memory.z80
                    > USED AT LINE 157 IN core-memory.z80
DTRAI:              0F72 DEFINED AT LINE 11
DTRA1:              0F7C DEFINED AT LINE 170 IN core-memory.z80
                    > USED AT LINE 175 IN core-memory.z80
DTRA2:              0F96 DEFINED AT LINE 174 IN core-memory.z80
                    > USED AT LINE 169 IN core-memory.z80
                    > USED AT LINE 172 IN core-memory.z80
PACKS:              0FA0 DEFINED AT LINE 11
                    > USED AT LINE 116 IN core-interpret.z80
ALGND:              0FDA DEFINED AT LINE 11
                    > USED AT LINE 71 IN core-compiler.z80
                    > USED AT LINE 53 IN core-does.z80
                    > USED AT LINE 182 IN core-memory.z80
ERR_DIVZERO:        0FE0 DEFINED AT LINE 3 IN core-messages.z80
                    > USED AT LINE 190 IN core-alu.z80
ERR_OUTOFRANGE:     0FEC DEFINED AT LINE 4 IN core-messages.z80
                    > USED AT LINE 193 IN core-alu.z80
TOR:                0FFA DEFINED AT LINE 11
                    > USED AT LINE 65 IN core-alu.z80
                    > USED AT LINE 235 IN core-alu.z80
                    > USED AT LINE 237 IN core-alu.z80
                    > USED AT LINE 309 IN core-alu.z80
                    > USED AT LINE 32 IN core-compiler.z80
                    > USED AT LINE 4 IN core-control.z80
                    > USED AT LINE 53 IN core-does.z80
                    > USED AT LINE 57 IN core-format.z80
                    > USED AT LINE 5 IN core-interpret.z80
                    > USED AT LINE 27 IN core-interpret.z80
                    > USED AT LINE 54 IN core-interpret.z80
                    > USED AT LINE 66 IN core-interpret.z80
                    > USED AT LINE 76 IN core-interpret.z80
                    > USED AT LINE 91 IN core-interpret.z80
                    > USED AT LINE 131 IN core-interpret.z80
                    > USED AT LINE 170 IN core-interpret.z80
                    > USED AT LINE 184 IN core-interpret.z80
                    > USED AT LINE 108 IN core-io.z80
                    > USED AT LINE 147 IN core-io.z80
                    > USED AT LINE 153 IN core-io.z80
                    > USED AT LINE 185 IN core-io.z80
                    > USED AT LINE 141 IN core-memory.z80
                    > USED AT LINE 144 IN core-memory.z80
                    > USED AT LINE 156 IN core-memory.z80
                    > USED AT LINE 168 IN core-memory.z80
                    > USED AT LINE 63 IN core-stacks.z80
                    > USED AT LINE 78 IN core-stacks.z80
                    > USED AT LINE 4 IN core-utils.z80
                    > USED AT LINE 17 IN core-utils.z80
                    > USED AT LINE 32 IN core-utils.z80
                    > USED AT LINE 51 IN core-utils.z80
RFROM:              1008 DEFINED AT LINE 11
                    > USED AT LINE 67 IN core-alu.z80
                    > USED AT LINE 129 IN core-alu.z80
                    > USED AT LINE 241 IN core-alu.z80
                    > USED AT LINE 301 IN core-alu.z80
                    > USED AT LINE 31 IN core-compiler.z80
                    > USED AT LINE 36 IN core-does.z80
                    > USED AT LINE 47 IN core-does.z80
                    > USED AT LINE 52 IN core-does.z80
                    > USED AT LINE 11 IN core-interpret.z80
                    > USED AT LINE 39 IN core-interpret.z80
                    > USED AT LINE 39 IN core-interpret.z80
                    > USED AT LINE 43 IN core-interpret.z80
                    > USED AT LINE 44 IN core-interpret.z80
                    > USED AT LINE 61 IN core-interpret.z80
                    > USED AT LINE 63 IN core-interpret.z80
                    > USED AT LINE 79 IN core-interpret.z80
                    > USED AT LINE 83 IN core-interpret.z80
                    > USED AT LINE 83 IN core-interpret.z80
                    > USED AT LINE 85 IN core-interpret.z80
                    > USED AT LINE 93 IN core-interpret.z80
                    > USED AT LINE 137 IN core-interpret.z80
                    > USED AT LINE 155 IN core-interpret.z80
                    > USED AT LINE 160 IN core-interpret.z80
                    > USED AT LINE 171 IN core-interpret.z80
                    > USED AT LINE 176 IN core-interpret.z80
                    > USED AT LINE 177 IN core-interpret.z80
                    > USED AT LINE 186 IN core-interpret.z80
                    > USED AT LINE 187 IN core-interpret.z80
                    > USED AT LINE 193 IN core-interpret.z80
                    > USED AT LINE 194 IN core-interpret.z80
                    > USED AT LINE 195 IN core-interpret.z80
                    > USED AT LINE 154 IN core-io.z80
                    > USED AT LINE 147 IN core-memory.z80
                    > USED AT LINE 173 IN core-memory.z80
                    > USED AT LINE 42 IN core-utils.z80
                    > USED AT LINE 44 IN core-utils.z80
DUPP:               1016 DEFINED AT LINE 11
                    > USED AT LINE 77 IN core-alu.z80
                    > USED AT LINE 233 IN core-alu.z80
                    > USED AT LINE 237 IN core-alu.z80
                    > USED AT LINE 18 IN core-compiler.z80
                    > USED AT LINE 31 IN core-compiler.z80
                    > USED AT LINE 56 IN core-compiler.z80
                    > USED AT LINE 67 IN core-compiler.z80
                    > USED AT LINE 70 IN core-compiler.z80
                    > USED AT LINE 74 IN core-compiler.z80
                    > USED AT LINE 23 IN core-format.z80
                    > USED AT LINE 34 IN core-format.z80
                    > USED AT LINE 57 IN core-format.z80
                    > USED AT LINE 9 IN core-interpret.z80
                    > USED AT LINE 11 IN core-interpret.z80
                    > USED AT LINE 27 IN core-interpret.z80
                    > USED AT LINE 41 IN core-interpret.z80
                    > USED AT LINE 76 IN core-interpret.z80
                    > USED AT LINE 144 IN core-interpret.z80
                    > USED AT LINE 146 IN core-interpret.z80
                    > USED AT LINE 147 IN core-interpret.z80
                    > USED AT LINE 149 IN core-interpret.z80
                    > USED AT LINE 162 IN core-interpret.z80
                    > USED AT LINE 167 IN core-interpret.z80
                    > USED AT LINE 265 IN core-interpret.z80
                    > USED AT LINE 63 IN core-io.z80
                    > USED AT LINE 78 IN core-io.z80
                    > USED AT LINE 111 IN core-io.z80
                    > USED AT LINE 121 IN core-io.z80
                    > USED AT LINE 122 IN core-io.z80
                    > USED AT LINE 196 IN core-io.z80
                    > USED AT LINE 202 IN core-io.z80
                    > USED AT LINE 219 IN core-io.z80
                    > USED AT LINE 43 IN core-kernel.z80
                    > USED AT LINE 102 IN core-memory.z80
                    > USED AT LINE 108 IN core-memory.z80
                    > USED AT LINE 144 IN core-memory.z80
                    > USED AT LINE 182 IN core-memory.z80
                    > USED AT LINE 183 IN core-memory.z80
                    > USED AT LINE 55 IN core-stacks.z80
                    > USED AT LINE 56 IN core-stacks.z80
                    > USED AT LINE 7 IN core-utils.z80
                    > USED AT LINE 20 IN core-utils.z80
                    > USED AT LINE 78 IN core-utils.z80
                    > USED AT LINE 109 IN core-utils.z80
                    > USED AT LINE 118 IN core-utils.z80
DROP:               101A DEFINED AT LINE 11
                    > USED AT LINE 50 IN core-alu.z80
                    > USED AT LINE 96 IN core-alu.z80
                    > USED AT LINE 104 IN core-alu.z80
                    > USED AT LINE 114 IN core-alu.z80
                    > USED AT LINE 123 IN core-alu.z80
                    > USED AT LINE 148 IN core-alu.z80
                    > USED AT LINE 255 IN core-alu.z80
                    > USED AT LINE 295 IN core-alu.z80
                    > USED AT LINE 61 IN core-compiler.z80
                    > USED AT LINE 54 IN core-control.z80
                    > USED AT LINE 51 IN core-format.z80
                    > USED AT LINE 83 IN core-format.z80
                    > USED AT LINE 61 IN core-interpret.z80
                    > USED AT LINE 79 IN core-interpret.z80
                    > USED AT LINE 137 IN core-interpret.z80
                    > USED AT LINE 155 IN core-interpret.z80
                    > USED AT LINE 160 IN core-interpret.z80
                    > USED AT LINE 176 IN core-interpret.z80
                    > USED AT LINE 177 IN core-interpret.z80
                    > USED AT LINE 187 IN core-interpret.z80
                    > USED AT LINE 195 IN core-interpret.z80
                    > USED AT LINE 219 IN core-interpret.z80
                    > USED AT LINE 270 IN core-interpret.z80
                    > USED AT LINE 115 IN core-io.z80
                    > USED AT LINE 127 IN core-io.z80
                    > USED AT LINE 210 IN core-io.z80
                    > USED AT LINE 229 IN core-io.z80
                    > USED AT LINE 240 IN core-io.z80
                    > USED AT LINE 68 IN core-stacks.z80
                    > USED AT LINE 68 IN core-stacks.z80
                    > USED AT LINE 11 IN core-utils.z80
                    > USED AT LINE 42 IN core-utils.z80
                    > USED AT LINE 44 IN core-utils.z80
                    > USED AT LINE 85 IN core-utils.z80
                    > USED AT LINE 87 IN core-utils.z80
                    > USED AT LINE 89 IN core-utils.z80
                    > USED AT LINE 122 IN core-utils.z80
SWAP:               101E DEFINED AT LINE 11
                    > USED AT LINE 96 IN core-alu.z80
                    > USED AT LINE 112 IN core-alu.z80
                    > USED AT LINE 119 IN core-alu.z80
                    > USED AT LINE 121 IN core-alu.z80
                    > USED AT LINE 148 IN core-alu.z80
                    > USED AT LINE 243 IN core-alu.z80
                    > USED AT LINE 260 IN core-alu.z80
                    > USED AT LINE 314 IN core-alu.z80
                    > USED AT LINE 48 IN core-control.z80
                    > USED AT LINE 59 IN core-control.z80
                    > USED AT LINE 64 IN core-control.z80
                    > USED AT LINE 12 IN core-format.z80
                    > USED AT LINE 19 IN core-interpret.z80
                    > USED AT LINE 20 IN core-interpret.z80
                    > USED AT LINE 23 IN core-interpret.z80
                    > USED AT LINE 29 IN core-interpret.z80
                    > USED AT LINE 32 IN core-interpret.z80
                    > USED AT LINE 36 IN core-interpret.z80
                    > USED AT LINE 65 IN core-interpret.z80
                    > USED AT LINE 144 IN core-interpret.z80
                    > USED AT LINE 156 IN core-interpret.z80
                    > USED AT LINE 194 IN core-interpret.z80
                    > USED AT LINE 210 IN core-io.z80
                    > USED AT LINE 90 IN core-memory.z80
                    > USED AT LINE 91 IN core-memory.z80
                    > USED AT LINE 96 IN core-memory.z80
                    > USED AT LINE 103 IN core-memory.z80
                    > USED AT LINE 109 IN core-memory.z80
                    > USED AT LINE 156 IN core-memory.z80
                    > USED AT LINE 188 IN core-memory.z80
                    > USED AT LINE 63 IN core-stacks.z80
                    > USED AT LINE 85 IN core-utils.z80
                    > USED AT LINE 87 IN core-utils.z80
OVER:               1026 DEFINED AT LINE 11
                    > USED AT LINE 128 IN core-alu.z80
                    > USED AT LINE 250 IN core-alu.z80
                    > USED AT LINE 59 IN core-compiler.z80
                    > USED AT LINE 52 IN core-format.z80
                    > USED AT LINE 17 IN core-interpret.z80
                    > USED AT LINE 22 IN core-interpret.z80
                    > USED AT LINE 56 IN core-interpret.z80
                    > USED AT LINE 65 IN core-interpret.z80
                    > USED AT LINE 82 IN core-interpret.z80
                    > USED AT LINE 85 IN core-interpret.z80
                    > USED AT LINE 133 IN core-interpret.z80
                    > USED AT LINE 134 IN core-interpret.z80
                    > USED AT LINE 154 IN core-io.z80
                    > USED AT LINE 185 IN core-io.z80
                    > USED AT LINE 197 IN core-io.z80
                    > USED AT LINE 215 IN core-io.z80
                    > USED AT LINE 229 IN core-io.z80
                    > USED AT LINE 90 IN core-memory.z80
                    > USED AT LINE 96 IN core-memory.z80
                    > USED AT LINE 171 IN core-memory.z80
                    > USED AT LINE 183 IN core-memory.z80
                    > USED AT LINE 185 IN core-memory.z80
                    > USED AT LINE 73 IN core-stacks.z80
                    > USED AT LINE 73 IN core-stacks.z80
                    > USED AT LINE 16 IN core-utils.z80
QDUP:               102E DEFINED AT LINE 11
                    > USED AT LINE 84 IN core-compiler.z80
                    > USED AT LINE 135 IN core-interpret.z80
                    > USED AT LINE 172 IN core-interpret.z80
                    > USED AT LINE 174 IN core-interpret.z80
                    > USED AT LINE 225 IN core-interpret.z80
                    > USED AT LINE 131 IN core-memory.z80
                    > USED AT LINE 94 IN core-utils.z80
                    > USED AT LINE 113 IN core-utils.z80
QDUP1:              103A DEFINED AT LINE 57 IN core-stacks.z80
ROT:                103C DEFINED AT LINE 11
                    > USED AT LINE 78 IN core-stacks.z80
                    > USED AT LINE 35 IN core-utils.z80
                    > USED AT LINE 35 IN core-utils.z80
DDROP:              104A DEFINED AT LINE 11
                    > USED AT LINE 43 IN core-interpret.z80
                    > USED AT LINE 80 IN core-io.z80
                    > USED AT LINE 150 IN core-memory.z80
                    > USED AT LINE 162 IN core-memory.z80
DDUP:               1054 DEFINED AT LINE 11
                    > USED AT LINE 94 IN core-alu.z80
                    > USED AT LINE 103 IN core-alu.z80
                    > USED AT LINE 111 IN core-alu.z80
                    > USED AT LINE 119 IN core-alu.z80
                    > USED AT LINE 300 IN core-alu.z80
                    > USED AT LINE 217 IN core-io.z80
                    > USED AT LINE 159 IN core-memory.z80
                    > USED AT LINE 187 IN core-memory.z80
                    > USED AT LINE 76 IN core-utils.z80
                    > USED AT LINE 80 IN core-utils.z80
TWOSWAP:            105E DEFINED AT LINE 11
PICK:               106C DEFINED AT LINE 11
                    > USED AT LINE 54 IN core-utils.z80
DEPTH:              1080 DEFINED AT LINE 11
                    > USED AT LINE 256 IN core-interpret.z80
                    > USED AT LINE 50 IN core-utils.z80
SZERO:              1096 DEFINED AT LINE 11
                    > USED AT LINE 66 IN core-kernel.z80
                    > USED AT LINE 89 IN core-stacks.z80
RZERO:              109E DEFINED AT LINE 11
TQKEY:              10A6 DEFINED AT LINE 49
                    > USED AT LINE 56 IN core-io.z80
TEMIT:              10AE DEFINED AT LINE 49
                    > USED AT LINE 72 IN core-io.z80
TEXPE:              10B6 DEFINED AT LINE 49
                    > USED AT LINE 234 IN core-io.z80
TTAP:               10BE DEFINED AT LINE 49
                    > USED AT LINE 225 IN core-io.z80
TECHO:              10C6 DEFINED AT LINE 49
                    > USED AT LINE 188 IN core-io.z80
                    > USED AT LINE 196 IN core-io.z80
TPROM:              10CE DEFINED AT LINE 49
                    > USED AT LINE 270 IN core-interpret.z80
BASE:               10D6 DEFINED AT LINE 11
                    > USED AT LINE 28 IN core-format.z80
                    > USED AT LINE 16 IN core-interpret.z80
                    > USED AT LINE 29 IN core-interpret.z80
                    > USED AT LINE 44 IN core-interpret.z80
                    > USED AT LINE 166 IN core-io.z80
                    > USED AT LINE 30 IN core-utils.z80
TEMP:               10DE DEFINED AT LINE 49
                    > USED AT LINE 50 IN core-interpret.z80
                    > USED AT LINE 68 IN core-interpret.z80
                    > USED AT LINE 69 IN core-interpret.z80
                    > USED AT LINE 153 IN core-interpret.z80
SPAN:               10E6 DEFINED AT LINE 49
INN:                10EE DEFINED AT LINE 11
NTIB:               10F6 DEFINED AT LINE 49
                    > USED AT LINE 92 IN core-interpret.z80
                    > USED AT LINE 104 IN core-interpret.z80
                    > USED AT LINE 125 IN core-memory.z80
CSP:                10FE DEFINED AT LINE 49
TEVAL:              1106 DEFINED AT LINE 49
                    > USED AT LINE 267 IN core-interpret.z80
TNUMB:              110E DEFINED AT LINE 49
                    > USED AT LINE 92 IN core-compiler.z80
                    > USED AT LINE 231 IN core-interpret.z80
HLD:                1116 DEFINED AT LINE 49
                    > USED AT LINE 17 IN core-format.z80
                    > USED AT LINE 22 IN core-format.z80
                    > USED AT LINE 23 IN core-format.z80
                    > USED AT LINE 51 IN core-format.z80
HANDL:              111E DEFINED AT LINE 49
                    > USED AT LINE 185 IN core-interpret.z80
                    > USED AT LINE 186 IN core-interpret.z80
                    > USED AT LINE 192 IN core-interpret.z80
                    > USED AT LINE 193 IN core-interpret.z80
CNTXT:              1126 DEFINED AT LINE 49
                    > USED AT LINE 167 IN core-interpret.z80
CRRNT:              112E DEFINED AT LINE 49
                    > USED AT LINE 73 IN core-compiler.z80
                    > USED AT LINE 72 IN core-utils.z80
CP:                 1136 DEFINED AT LINE 49
                    > USED AT LINE 13 IN core-compiler.z80
                    > USED AT LINE 19 IN core-compiler.z80
                    > USED AT LINE 45 IN core-compiler.z80
                    > USED AT LINE 114 IN core-memory.z80
NP:                 113E DEFINED AT LINE 49
                    > USED AT LINE 115 IN core-interpret.z80
LAST:               1146 DEFINED AT LINE 11
                    > USED AT LINE 50 IN core-compiler.z80
                    > USED AT LINE 70 IN core-compiler.z80
                    > USED AT LINE 101 IN core-compiler.z80
                    > USED AT LINE 134 IN core-compiler.z80
VFRTH:              114E DEFINED AT LINE 49
UTYPE:              1156 DEFINED AT LINE 11
                    > USED AT LINE 97 IN core-utils.z80
UTYP1:              1160 DEFINED AT LINE 6 IN core-utils.z80
                    > USED AT LINE 10 IN core-utils.z80
UTYP2:              116E DEFINED AT LINE 9 IN core-utils.z80
                    > USED AT LINE 5 IN core-utils.z80
DMP:                1176 DEFINED AT LINE 49
PDUM1:              118A DEFINED AT LINE 19 IN core-utils.z80
                    > USED AT LINE 23 IN core-utils.z80
PDUM2:              119A DEFINED AT LINE 22 IN core-utils.z80
                    > USED AT LINE 18 IN core-utils.z80
DUMP:               11A0 DEFINED AT LINE 11
DUMP1:              11B4 DEFINED AT LINE 33 IN core-utils.z80
                    > USED AT LINE 39 IN core-utils.z80
DUMP2:              11D8 DEFINED AT LINE 41 IN core-utils.z80
                    > USED AT LINE 38 IN core-utils.z80
DUMP3:              11DC DEFINED AT LINE 43 IN core-utils.z80
                    > USED AT LINE 40 IN core-utils.z80
DOTS:               11E6 DEFINED AT LINE 11
DOTS1:              11F4 DEFINED AT LINE 53 IN core-utils.z80
                    > USED AT LINE 56 IN core-utils.z80
DOTS2:              11FA DEFINED AT LINE 55 IN core-utils.z80
                    > USED AT LINE 52 IN core-utils.z80
TNAME:              1208 DEFINED AT LINE 11
                    > USED AT LINE 111 IN core-utils.z80
TNAM1:              120E DEFINED AT LINE 73 IN core-utils.z80
                    > USED AT LINE 86 IN core-utils.z80
TNAM2:              121A DEFINED AT LINE 77 IN core-utils.z80
                    > USED AT LINE 83 IN core-utils.z80
TNAM3:              1232 DEFINED AT LINE 84 IN core-utils.z80
                    > USED AT LINE 79 IN core-utils.z80
                    > USED AT LINE 81 IN core-utils.z80
TNAM4:              1246 DEFINED AT LINE 88 IN core-utils.z80
                    > USED AT LINE 75 IN core-utils.z80
DOTID:              124E DEFINED AT LINE 11
                    > USED AT LINE 115 IN core-utils.z80
DOTI1:              1264 DEFINED AT LINE 98 IN core-utils.z80
                    > USED AT LINE 95 IN core-utils.z80
SEE:                1272 DEFINED AT LINE 11
SEE1:               127C DEFINED AT LINE 108 IN core-utils.z80
                    > USED AT LINE 121 IN core-utils.z80
SEE2:               128A DEFINED AT LINE 112 IN core-utils.z80
                    > USED AT LINE 110 IN core-utils.z80
SEE3:               1298 DEFINED AT LINE 117 IN core-utils.z80
                    > USED AT LINE 114 IN core-utils.z80
SEE4:               129E DEFINED AT LINE 119 IN core-utils.z80
                    > USED AT LINE 116 IN core-utils.z80
LASTN:              1416 DEFINED AT LINE 87
                    > USED AT LINE 30 IN defaults.z80
                    > USED AT LINE 31 IN defaults.z80
SPP:                2200 DEFINED AT LINE 3 IN variables.z80
                    > USED AT LINE 45
                    > USED AT LINE 5 IN defaults.z80
TIBB:               2200 DEFINED AT LINE 4 IN variables.z80
                    > USED AT LINE 18 IN defaults.z80
                    > USED AT LINE 67 IN core-kernel.z80
RPP:                2400 DEFINED AT LINE 6 IN variables.z80
                    > USED AT LINE 53
                    > USED AT LINE 6 IN defaults.z80
SERBUF:             2400 DEFINED AT LINE 8 IN variables.z80
                    > USED AT LINE 19 IN interrupt.z80
                    > USED AT LINE 21 IN interrupt.z80
                    > USED AT LINE 6 IN serial.z80
                    > USED AT LINE 21 IN serial.z80
                    > USED AT LINE 23 IN serial.z80
SERINPTR:           243F DEFINED AT LINE 9 IN variables.z80
                    > USED AT LINE 16 IN interrupt.z80
                    > USED AT LINE 22 IN interrupt.z80
                    > USED AT LINE 7 IN serial.z80
SERRDPTR:           2441 DEFINED AT LINE 10 IN variables.z80
                    > USED AT LINE 8 IN serial.z80
                    > USED AT LINE 18 IN serial.z80
                    > USED AT LINE 26 IN serial.z80
SERBUFUSED:         2443 DEFINED AT LINE 11 IN variables.z80
                    > USED AT LINE 10 IN interrupt.z80
                    > USED AT LINE 25 IN interrupt.z80
                    > USED AT LINE 27 IN interrupt.z80
                    > USED AT LINE 10 IN serial.z80
                    > USED AT LINE 27 IN serial.z80
                    > USED AT LINE 29 IN serial.z80
                    > USED AT LINE 51 IN serial.z80
UPP:                2445 DEFINED AT LINE 13 IN variables.z80
                    > USED AT LINE 49
                    > USED AT LINE 42 IN core-does.z80
VARSZERO:           2445 DEFINED AT LINE 15 IN variables.z80
VARRZERO:           2447 DEFINED AT LINE 16 IN variables.z80
VARTQKEY:           2449 DEFINED AT LINE 17 IN variables.z80
VARTEMIT:           244B DEFINED AT LINE 18 IN variables.z80
VARTEXPE:           244D DEFINED AT LINE 19 IN variables.z80
VARTTAP:            244F DEFINED AT LINE 20 IN variables.z80
VARTECHO:           2451 DEFINED AT LINE 21 IN variables.z80
VARTPROM:           2453 DEFINED AT LINE 22 IN variables.z80
VARBASE:            2455 DEFINED AT LINE 23 IN variables.z80
VARTEMP:            2457 DEFINED AT LINE 24 IN variables.z80
VARSPAN:            2459 DEFINED AT LINE 25 IN variables.z80
VARINN:             245B DEFINED AT LINE 26 IN variables.z80
VARNTIB:            245D DEFINED AT LINE 27 IN variables.z80
VARTIB:             245F DEFINED AT LINE 28 IN variables.z80
VARCSP:             2461 DEFINED AT LINE 29 IN variables.z80
VARTEVAL:           2463 DEFINED AT LINE 30 IN variables.z80
VARTNUMB:           2465 DEFINED AT LINE 31 IN variables.z80
VARHLD:             2467 DEFINED AT LINE 32 IN variables.z80
VARHANDL:           2469 DEFINED AT LINE 33 IN variables.z80
VARCNTXT:           246B DEFINED AT LINE 34 IN variables.z80
VARVOCABS:          246D DEFINED AT LINE 35 IN variables.z80
VARCRRNT:           246F DEFINED AT LINE 36 IN variables.z80
VARVOCABLP:         2471 DEFINED AT LINE 37 IN variables.z80
VARCP:              2473 DEFINED AT LINE 38 IN variables.z80
VARNP:              2475 DEFINED AT LINE 39 IN variables.z80
VARLAST:            2477 DEFINED AT LINE 40 IN variables.z80
VARVFRTH:           2479 DEFINED AT LINE 41 IN variables.z80
VARVOCABL:          247B DEFINED AT LINE 42 IN variables.z80
VECTAB:             247D DEFINED AT LINE 44 IN variables.z80
VRST08:             247D DEFINED AT LINE 45 IN variables.z80
                    > USED AT LINE 12
VRST10:             247F DEFINED AT LINE 46 IN variables.z80
                    > USED AT LINE 16
VRST18:             2481 DEFINED AT LINE 47 IN variables.z80
                    > USED AT LINE 20
VRST20:             2483 DEFINED AT LINE 48 IN variables.z80
                    > USED AT LINE 24
VRST28:             2485 DEFINED AT LINE 49 IN variables.z80
                    > USED AT LINE 28
VRST30:             2487 DEFINED AT LINE 50 IN variables.z80
                    > USED AT LINE 32
VINT:               2489 DEFINED AT LINE 51 IN variables.z80
                    > USED AT LINE 36
                    > USED AT LINE 44
VNMI:               248B DEFINED AT LINE 52 IN variables.z80
                    > USED AT LINE 40
CPP:                248D DEFINED AT LINE 54 IN variables.z80
                    > USED AT LINE 28 IN defaults.z80
NPP:                FFFE DEFINED AT LINE 56 IN variables.z80
                    > USED AT LINE 29 IN defaults.z80

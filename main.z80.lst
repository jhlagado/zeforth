0000                          .ENGINE   mycomputer   
0000                TESTMODE:   EQU   0   
0000                MEM_SIZE:   EQU   $10000   ; MEM is 64K
0000                ROM_SIZE:   EQU   $2000   ; ROM is 8K
0000                RAM_SIZE:   EQU   MEM_SIZE - ROM_SIZE   ; RAM is 64K - 8K
0000                START_ROM:   EQU   BM   ; inclusive
0000                END_ROM:   EQU   BM + ROM_SIZE   ; exclusive
0000                START_RAM:   EQU   BM + ROM_SIZE   ; inclusive
0000                END_RAM:   EQU   START_RAM + RAM_SIZE   ; exclusive
0000                BM:       EQU   0   ; bottom of ROM memory
0000                EM:       EQU   BM + MEM_SIZE   
0000                COMPO:    EQU   $20   ;lexicon compile only bit
0000                IMEDD:    EQU   $40   ;lexicon immediate bit
0000                MASKK:    EQU   $1F   ;lexicon bit mask
0000                CHARR:    EQU   1   ;byte size of a character
0000                CELLL:    EQU   2   
0000                BASEE:    EQU   10   ;BASE
0000                VOCSS:    EQU   8   ;depth of vocabulary stack
0000                MAXCHAR:   EQU   0FFh   ;Extended character set					                    ;  Use 07Fh for ASCII only
0000                MAXSIGNED:   EQU   07FFFh   ;max value of signed integer
0000                MAXUNSIGNED:   EQU   0FFFFh   ;max value of unsigned integer
0000                MAXNEGATIVE:   EQU   8000h   ;max value of negative integer
0000                BKSPP:    EQU   8   ;backspace
0000                LFF:      EQU   $0A   ;line feed
0000                CRR:      EQU   $0D   ;carriage return
0000                SPACEE:   EQU   $20   
0000                TIC:      EQU   $27   ;tick
0000                MINUSS:   EQU   $2D   
0000                UNDERSC:   EQU   $5F   
0000                CALLL:    EQU   $CD00   ; NOP followed by CALL opcodes
0000                US:       EQU   END_DEFAULTS - DEFAULTS   ;user area size
0000                RTS:      EQU   $100 * CELLL   ;return stack/TIB size
0000                DTS:      EQU   $100 * CELLL   ;data stack size
0000                RET_STACK_SIZE:   EQU   $100   
0000                DATA_STACK_SIZE:   EQU   $100   
0000                INT_ADDR:   EQU   $0038   
0000                SER_BUFSIZE:   EQU   $3F   
0000                SER_FULLSIZE:   EQU   $30   
0000                SER_EMPTYSIZE:   EQU   5   
0000                RTS_HIGH:   EQU   $D6   
0000                RTS_LOW:   EQU   $96   
0000                TRUEE:    EQU   -1   
0000                FALSEE:   EQU   0   
0000                             ; Initialize assembly variables
0000                VVCODE:   .SET   0   
0000                VVNAME:   .SET   END_ROM   
0000                VVLINK:   .SET   0   ;force a null link
0000                VVUSER:   .SET   0   ;first user variable offset
0000                .macro MCODE,aaLEX,aaNAME,aaLABEL
0000                             ; 
0000                 .align 2                                         ;;force to cell boundary
0000                aaLABEL:                                              ;;assembly label
0000                 vvCODE .set $
0000                 vvLEN  .set (aaLEX & 01FH) / CELLL              ;;string cell count, round down
0000                 ORG vvNAME - ((vvLEN + 3) * CELLL)                                     ; ? needed
0000                 vvNAME .set $
0000                 DW vvCODE, vvLINK                               ;;token pointer and link
0000                 vvLINK .set $                                   ;;link points to a name string
0000                 DB aaLEX, aaNAME                                    ;;name string
0000                 ORG vvCODE                                      ;;restore code pointer
0000                .endm
0000                 
0000                .macro MCOLON,aaLEX,aaNAME,aaLABEL
0000                             ; 
0000                 mCODE aaLEX, aaNAME, aaLABEL
0000                 nop
0000                 CALL doLIST
0000                .endm
0000                 
0000                .macro MUSER,aaLEX,aaNAME,aaLABEL
0000                             ; 
0000                	mCODE aaLEX, aaNAME, aaLABEL
0000                 nop
0000                 CALL doLIST
0000                 DW DoUSE,vvUSER
0000                 vvUSER .set vvUSER + CELLL
0000                .endm
0000                 
0000                             ; .align 2
0000                .macro MDSTR,aaFUNC,aaSTR
0000                             ; 
0000                 DW aaFUNC                       ;;function
0000                 vvLEN .set $                    ;;save address of count byte
0000                 DB 0,aaSTR                      ;;count byte and string
0000                 vvCODE .set $                   ;;save code pointer
0000                ORG vvLEN                           ;;point to count byte
0000                 DB vvCODE - vvLEN - 1           ;;set count
0000                ORG vvCODE                          ;;restore code pointer
0000                .endm
0000                 
0000                .macro HCODE,aaLEX,aaNAME,aaLABEL
0000                             ; 
0000                 .align 2                                         ;;force to cell boundary
0000                aaLABEL:                                              ;;assembly label
0000                .endm
0000                 
0000                .macro HCOLON,aaLEX,aaNAME,aaLABEL
0000                             ; 
0000                 hCODE aaLEX, aaNAME, aaLABEL
0000                 nop
0000                 CALL doLIST
0000                .endm
0000                 
0000                .macro HUSER,aaLEX,aaNAME,aaLABEL
0000                             ; 
0000                	hCODE aaLEX, aaNAME, aaLABEL
0000                 nop
0000                 CALL doLIST
0000                 DW DoUSE,vvUSER
0000                 vvUSER .set vvUSER + CELLL
0000                .endm
0000                 
0000                             ; 	LD	E,(HL)	                    ; 7t
0000                             ; 	INC	HL	                        ; 6t
0000                             ; 	LD	D,(HL)	                    ; 7t
0000                             ; 	INC	HL	                        ; 6t
0000                             ; 	EX	DE,HL	                    ; 4t
0000                             ; 	JP	(HL)	                    ; 4t
0000                .macro MNEXTHL,
0000                             ; 
0000                 JP (IY)
0000                .endm
0000                 
0000                .macro MNEXT,
0000                             ; 
0000                	EX	DE,HL	                    ; 4t
0000                 mNEXTHL                         ; 34t
0000                .endm
0000                 
0000                          .ORG   START_ROM   
0000   C3 6C 00     RESET:    JP   INIT   
0008                          .ORG   $08   
0008   FD 2A 7D 24  RST08:    LD   IY,(vRST08)   
000C   FD E9                  JP   (IY)   
0010                          .ORG   $10   
0010   FD 2A 7F 24  RST10:    LD   IY,(vRST10)   
0014   FD E9                  JP   (IY)   
0018                          .ORG   $18   
0018   FD 2A 81 24  RST18:    LD   IY,(vRST18)   
001C   FD E9                  JP   (IY)   
0020                          .ORG   $20   
0020   FD 2A 83 24  RST20:    LD   IY,(vRST20)   
0024   FD E9                  JP   (IY)   
0028                          .ORG   $28   
0028   FD 2A 85 24  RST28:    LD   IY,(vRST28)   
002C   FD E9                  JP   (IY)   
0030                          .ORG   $30   
0030   FD 2A 87 24  RST30:    LD   IY,(vRST30)   
0034   FD E9                  JP   (IY)   
0038                          .ORG   $38   
0038   FD 2A 89 24  RST38:    LD   IY,(vINT)   
003C   FD E9                  JP   (IY)   
0066                          .ORG   $66   
0066   FD 2A 8B 24  RST66:    LD   IY,(vNMI)   
006A   FD E9                  JP   (IY)   
006C                INIT:        
006C   21 98 00               LD   HL,serialInt   
006F   22 89 24               LD   (vINT),HL   
0072   21 00 22               LD   HL,SPP   ; Setup Forth data stack
0075   F9                     LD   SP,HL   ; also used as return stack by interrupts etc
0076   21 29 01               LD   HL,DEFAULTS   ; initialize user variables with defaults
0079   11 00 24               LD   DE,UPP   
007C   01 3A 00               LD   BC,US   
007F   ED B0                  LDIR      
0081   DD 21 00 24            LD   IX,RPP   ; set up Forth return stack
0085   FD 21 04 0E            LD   IY,NEXT_STEP   
0089   01 FF FF               LD   BC,-1   ; empty stack marker
008C   C3 DC 0D               JP   HI   
008F                          IF   TESTMODE   
                              JP   TESTS_START   
008F                          ELSE      
008F                             ; LD      HL,GREETING
008F                             ; CALL    PRINTSZ
008F                LOOP:        
008F   CD EA 00               CALL   RXA   
0092   CD 18 01               CALL   TXA   
0095   C3 8F 00               JP   LOOP   
0098                          ENDIF      
0098   F5           SERIALINT:   PUSH   AF   
0099   E5                     PUSH   HL   
009A   DB 80                  IN   A,($80)   
009C   E6 01                  AND   $01   ; Check if interupt due to read buffer full
009E   28 2D                  JR   Z,rts0   ; if not, ignore
00A0   DB 81                  IN   A,($81)   
00A2   F5                     PUSH   AF   
00A3   3A 3C 24               LD   A,(serBufUsed)   
00A6   FE 3F                  CP   SER_BUFSIZE   ; If full then ignore
00A8   20 03                  JR   NZ,notFull   
00AA   F1                     POP   AF   
00AB   18 20                  JR   rts0   
00AD   2A 38 24     NOTFULL:   LD   HL,(serInPtr)   
00B0   23                     INC   HL   
00B1   7D                     LD   A,L   ; Only need to check low byte becasuse buffer<256 bytes
00B2   FE 7D                  CP   (serBuf+SER_BUFSIZE) & $FF   
00B4   20 03                  JR   NZ,notWrap   
00B6   21 3E 24               LD   HL,serBuf   
00B9   22 38 24     NOTWRAP:   LD   (serInPtr),HL   
00BC   F1                     POP   AF   
00BD   77                     LD   (HL),A   
00BE   3A 3C 24               LD   A,(serBufUsed)   
00C1   3C                     INC   A   
00C2   32 3C 24               LD   (serBufUsed),A   
00C5   FE 30                  CP   SER_FULLSIZE   
00C7   38 04                  JR   C,rts0   
00C9   3E D6                  LD   A,RTS_HIGH   
00CB   D3 80                  OUT   ($80),A   
00CD   E1           RTS0:     POP   HL   
00CE   F1                     POP   AF   
00CF   FD 21 04 0E            LD   IY,NEXT_STEP   
00D3   FB                     EI      
00D4   ED 4D                  RETI      
00D6                             ; Modified from code by Grant Searle
00D6                             ; Minimum 6850 ACIA interrupt driven serial I/O
00D6                INIT_IO:      
00D6   F3                     DI      ; Disable interrupts
00D7   21 3E 24               LD   HL,serBuf   
00DA   22 38 24               LD   (serInPtr),HL   
00DD   22 3A 24               LD   (serRdPtr),HL   
00E0   AF                     XOR   A   
00E1   32 3C 24               LD   (serBufUsed),A   
00E4   3E 96                  LD   A,RTS_LOW   
00E6   D3 80                  OUT   ($80),A   ; Initialise ACIA
00E8   FB                     EI      
00E9   C9                     RET      
00EA                RXA:         
00EA                WAITFORCHAR:      
00EA   3A 3C 24               LD   A,(serBufUsed)   
00ED   FE 00                  CP   $00   
00EF   28 F9                  JR   Z,waitForChar   
00F1                RXA1:        
00F1   E5                     PUSH   HL   
00F2   2A 3A 24               LD   HL,(serRdPtr)   
00F5   23                     INC   HL   
00F6   7D                     LD   A,L   ; Only need to check low byte becasuse buffer<256 bytes
00F7   FE 7D                  CP   (serBuf+SER_BUFSIZE) & $FF   
00F9   20 03                  JR   NZ,notRdWrap   
00FB   21 3E 24               LD   HL,serBuf   
00FE                NOTRDWRAP:      
00FE   F3                     DI      
00FF   22 3A 24               LD   (serRdPtr),HL   
0102   3A 3C 24               LD   A,(serBufUsed)   
0105   3D                     DEC   A   
0106   32 3C 24               LD   (serBufUsed),A   
0109   FE 05                  CP   SER_EMPTYSIZE   
010B   30 04                  JR   NC,rts1   
010D   3E 96                  LD   A,RTS_LOW   
010F   D3 80                  OUT   ($80),A   
0111                RTS1:        
0111   7E                     LD   A,(HL)   
0112   CD 18 01               CALL   TXA   
0115   FB                     EI      
0116   E1                     POP   HL   
0117   C9                     RET      ; Char ready in A
0118                TXA:         
0118   F5                     PUSH   AF   ; Store character
0119                CONOUT1:      
0119   DB 80                  IN   A,($80)   ; Status byte
011B   CB 4F                  BIT   1,A   ; Set Zero flag if still transmitting character
011D   28 FA                  JR   Z,conout1   ; Loop until flag signals ready
011F   F1                     POP   AF   ; Retrieve character
0120   D3 81                  OUT   ($81),A   ; Output the character
0122   C9                     RET      
0123                QRXA:      
0123   3A 3C 24               LD   A,(serBufUsed)   
0126   FE 00                  CP   $0   
0128   C9                     RET      
0129                             ; .align 2
0129                DEFAULTS:      
0129                UZERO:       
0129   00 22        DEFSZERO:   DW   SPP   ; SP0
012B   00 24        DEFRZERO:   DW   RPP   ; RP0
012D   86 0B        DEFTQKEY:   DW   QRX   ; '?KEY
012F   9E 0B        DEFTEMIT:   DW   TXSTO   ; 'EMIT
0131   76 0D        DEFTEXPE:   DW   ACCEP   ; 'EXPECT
0133   48 0D        DEFTTAP:   DW   KTAP   ; 'TAP
0135   9E 0B        DEFTECHO:   DW   TXSTO   ; 'ECHO
0137   16 0B        DEFTPROM:   DW   DOTOK   ; 'PROMPT
0139   0A 00        DEFBASE:   DW   BASEE   ; BASE
013B   00 00        DEFTEMP:   DW   0   ; tmp
013D   00 00        DEFSPAN:   DW   0   ; SPAN
013F   00 00        DEFINN:   DW   0   ; >IN
0141   00 00        DEFNTIB:   DW   0   ; #TIB
0143   00 22        DEFTIB:   DW   TIBB   ; TIB
0145   00 00        DEFCSP:   DW   0   ; CSP
0147   D4 0A        DEFTEVAL:   DW   INTER   ; 'EVAL
0149   B6 07        DEFTNUMB:   DW   NUMBQ   ; 'NUMBER
014B   00 00        DEFHLD:   DW   0   ; HLD
014D   00 00        DEFHANDL:   DW   0   ; HANDLER
014F   00 00        DEFCNTXT:   DW   0   ; CONTEXT pointer
0151   00 00        DEFVOCABS:   DW   0   ; vocabulary stack    ???
0153   00 00        DEFCRRENT:   DW   0   ; CURRENT pointer
0155   00 00        DEFVOCABLP:   DW   0   ; vocabulary link pointer ???
0157   8D 24        DEFCP:    DW   CPP   ; CP  for runing phase on RAM
0159   FE FF        DEFNP:    DW   NPP   ; NP  for runing phase on RAM
015B   0A 13        DEFLAST:   DW   LASTN   ; LAST
015D   0A 13        DEFVFRTH:   DW   LASTN   ; FORTH   \ mullti-user ???
015F   00 00        DEFVOCABL:   DW   0   ; vocabulary link       ???
0161   00 00        DEFCOLD:   DW   0   ; "COLD"
0163                ULAST:       
0163                END_DEFAULTS:      
0163                VVCODE:   .SET   $   
0163                             ;   0<          ( n -- t )
0163                             ;               Return true if n is negative.
0163                          ;*Macro unroll: mCODE	2,'0<', ZLESS
0163                          ALIGN   2   
0164                ZLESS:       
0164                VVCODE:   .SET   $   
0164                VVLEN:    .SET   (2 & 01FH) / CELLL   
1FF8                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FF8                VVNAME:   .SET   $   
1FF8   64 01 00 00            DW   vvCODE,vvLINK   
1FFC                VVLINK:   .SET   $   
1FFC   02 30 3C               DB   2,"0<"   
0164                          .ORG   vvCODE   
0164   CB 20                  SLA   B   ; sign bit -> cy flag
0166   9F                     SBC   A,A   ; propagate cy through A
0167   47                     LD   B,A   ; put 0000 or FFFF in TOS
0168   4F                     LD   C,A   
0169                          ;*Macro unroll: 	mNEXT
0169   EB                     EX   DE,HL   
016A                          ;*Macro unroll:  mNEXTHL                         ; 34t
016A   FD E9                  JP   (IY)   ; 34t
016C                             ;   AND         ( w w -- w )
016C                             ;               Bitwise AND.
016C                          ;*Macro unroll: mCODE	3, 'AND', ANDD
016C                          ALIGN   2   
016C                ANDD:        
016C                VVCODE:   .SET   $   
016C                VVLEN:    .SET   (3 & 01FH) / CELLL   
1FF0                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FF0                VVNAME:   .SET   $   
1FF0   6C 01 FC 1F            DW   vvCODE,vvLINK   
1FF4                VVLINK:   .SET   $   
1FF4   03 41 4E 44            DB   3,"AND"   
016C                          .ORG   vvCODE   
016C   E1                     POP   HL   
016D   78                     LD   A,B   
016E   A4                     AND   H   
016F   47                     LD   B,A   
0170   79                     LD   A,C   
0171   A5                     AND   L   
0172   4F                     LD   C,A   
0173                          ;*Macro unroll: 	mNEXT
0173   EB                     EX   DE,HL   
0174                          ;*Macro unroll:  mNEXTHL                         ; 34t
0174   FD E9                  JP   (IY)   ; 34t
0176                             ;   OR          ( w w -- w )
0176                             ;               Bitwise inclusive OR.
0176                          ;*Macro unroll: mCODE	2,'OR', ORR
0176                          ALIGN   2   
0176                ORR:         
0176                VVCODE:   .SET   $   
0176                VVLEN:    .SET   (2 & 01FH) / CELLL   
1FE8                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FE8                VVNAME:   .SET   $   
1FE8   76 01 F4 1F            DW   vvCODE,vvLINK   
1FEC                VVLINK:   .SET   $   
1FEC   02 4F 52               DB   2,"OR"   
0176                          .ORG   vvCODE   
0176   E1                     POP   HL   
0177   78                     LD   A,B   
0178   B4                     OR   H   
0179   47                     LD   B,A   
017A   79                     LD   A,C   
017B   B5                     OR   L   
017C   4F                     LD   C,A   
017D                          ;*Macro unroll: 	mNEXT
017D   EB                     EX   DE,HL   
017E                          ;*Macro unroll:  mNEXTHL                         ; 34t
017E   FD E9                  JP   (IY)   ; 34t
0180                             ;   XOR         ( w w -- w )
0180                             ;               Bitwise exclusive
0180                          ;*Macro unroll: mCODE	3, 'XOR', XORR
0180                          ALIGN   2   
0180                XORR:        
0180                VVCODE:   .SET   $   
0180                VVLEN:    .SET   (3 & 01FH) / CELLL   
1FE0                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FE0                VVNAME:   .SET   $   
1FE0   80 01 EC 1F            DW   vvCODE,vvLINK   
1FE4                VVLINK:   .SET   $   
1FE4   03 58 4F 52            DB   3,"XOR"   
0180                          .ORG   vvCODE   
0180   E1                     POP   HL   
0181   78                     LD   A,B   
0182   AC                     XOR   H   
0183   47                     LD   B,A   
0184   79                     LD   A,C   
0185   AD                     XOR   L   
0186   4F                     LD   C,A   
0187                          ;*Macro unroll: 	mNEXT
0187   EB                     EX   DE,HL   
0188                          ;*Macro unroll:  mNEXTHL                         ; 34t
0188   FD E9                  JP   (IY)   ; 34t
018A                             ;   +           ( w w -- sum )
018A                             ;               Add top two items.
018A                          ;*Macro unroll: mCOLON	1,'+', PLUS
018A                          ;*Macro unroll:  mCODE 1, "+", PLUS
018A                          ALIGN   2   
018A                PLUS:        
018A                VVCODE:   .SET   $   
018A                VVLEN:    .SET   (1 & 01FH) / CELLL   
1FDA                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FDA                VVNAME:   .SET   $   
1FDA   8A 01 E4 1F            DW   vvCODE,vvLINK   
1FDE                VVLINK:   .SET   $   
1FDE   01 2B                  DB   1,"+"   
018A                          .ORG   vvCODE   
018A   00                     NOP      
018B   CD 12 06               CALL   doLIST   
018E   62 02 2C 10 48 06      DW   UMPlus,DROP,EXIT   
0194                             ;   NOT         ( w -- w )
0194                             ;               One's complement of tos.
0194                          ;*Macro unroll: mCOLON  3, 'NOT', INVER
0194                          ;*Macro unroll:  mCODE 3, "NOT", INVER
0194                          ALIGN   2   
0194                INVER:       
0194                VVCODE:   .SET   $   
0194                VVLEN:    .SET   (3 & 01FH) / CELLL   
1FD2                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FD2                VVNAME:   .SET   $   
1FD2   94 01 DE 1F            DW   vvCODE,vvLINK   
1FD6                VVLINK:   .SET   $   
1FD6   03 4E 4F 54            DB   3,"NOT"   
0194                          .ORG   vvCODE   
0194   00                     NOP      
0195   CD 12 06               CALL   doLIST   
0198   20 06 FF FF 80 01 48 06 DW   DOLIT,-1,XORR,EXIT   
01A0                             ;   NEGAT      ( n -- -n )
01A0                             ;               Two's complement of tos.
01A0                          ;*Macro unroll: mCOLON	6,'NEGATE',NEGAT
01A0                          ;*Macro unroll:  mCODE 6, "NEGATE", NEGAT
01A0                          ALIGN   2   
01A0                NEGAT:       
01A0                VVCODE:   .SET   $   
01A0                VVLEN:    .SET   (6 & 01FH) / CELLL   
1FC6                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FC6                VVNAME:   .SET   $   
1FC6   A0 01 D6 1F            DW   vvCODE,vvLINK   
1FCA                VVLINK:   .SET   $   
1FCA   06 4E 45 47 41 54 45   DB   6,"NEGATE"   
01A0                          .ORG   vvCODE   
01A0   00                     NOP      
01A1   CD 12 06               CALL   doLIST   
01A4   94 01 20 06 01 00 8A 01 48 06 DW   INVER,DOLIT,1,Plus,EXIT   
01AE                             ;   DNEGATE     ( d -- -d )
01AE                             ;               Two's complement of top double.
01AE                          ;*Macro unroll: mCOLON	7,'DNEGATE',DNEGA
01AE                          ;*Macro unroll:  mCODE 7, "DNEGATE", DNEGA
01AE                          ALIGN   2   
01AE                DNEGA:       
01AE                VVCODE:   .SET   $   
01AE                VVLEN:    .SET   (7 & 01FH) / CELLL   
1FBA                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FBA                VVNAME:   .SET   $   
1FBA   AE 01 CA 1F            DW   vvCODE,vvLINK   
1FBE                VVLINK:   .SET   $   
1FBE   07 44 4E 45 47 41 54 45 DB   7,"DNEGATE"   
01AE                          .ORG   vvCODE   
01AE   00                     NOP      
01AF   CD 12 06               CALL   doLIST   
01B2   94 01 0C 10 94 01      DW   INVER,ToR,INVER   
01B8   20 06 01 00 62 02      DW   DOLIT,1,UMPlus   
01BE   1A 10 8A 01 48 06      DW   RFrom,Plus,EXIT   
01C4                             ;   -           ( n1 n2 -- n1-n2 )
01C4                             ;               Subtraction.
01C4                          ;*Macro unroll: mCOLON	1, '-', SUBB
01C4                          ;*Macro unroll:  mCODE 1, "-", SUBB
01C4                          ALIGN   2   
01C4                SUBB:        
01C4                VVCODE:   .SET   $   
01C4                VVLEN:    .SET   (1 & 01FH) / CELLL   
1FB4                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FB4                VVNAME:   .SET   $   
1FB4   C4 01 BE 1F            DW   vvCODE,vvLINK   
1FB8                VVLINK:   .SET   $   
1FB8   01 2D                  DB   1,"-"   
01C4                          .ORG   vvCODE   
01C4   00                     NOP      
01C5   CD 12 06               CALL   doLIST   
01C8   A0 01 8A 01 48 06      DW   NEGAT,Plus,EXIT   
01CE                             ;   ABS         ( n -- n )
01CE                             ;               Return the absolute value of n.
01CE                          ;*Macro unroll: mCOLON	3,'ABS',ABSS
01CE                          ;*Macro unroll:  mCODE 3, "ABS", ABSS
01CE                          ALIGN   2   
01CE                ABSS:        
01CE                VVCODE:   .SET   $   
01CE                VVLEN:    .SET   (3 & 01FH) / CELLL   
1FAC                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FAC                VVNAME:   .SET   $   
1FAC   CE 01 B8 1F            DW   vvCODE,vvLINK   
1FB0                VVLINK:   .SET   $   
1FB0   03 41 42 53            DB   3,"ABS"   
01CE                          .ORG   vvCODE   
01CE   00                     NOP      
01CF   CD 12 06               CALL   doLIST   
01D2   28 10 64 01 40 0E DC 01 DW   DUPP,ZLESS,QBRAN,ABS1   
01DA   A0 01                  DW   NEGAT   
01DC                ABS1:        
01DC   48 06                  DW   EXIT   
01DE                             ;   =           ( w w -- t )
01DE                             ;               Return true if top two are equal.
01DE                          ;*Macro unroll: mCOLON	1, '=', EQUAL
01DE                          ;*Macro unroll:  mCODE 1, "=", EQUAL
01DE                          ALIGN   2   
01DE                EQUAL:       
01DE                VVCODE:   .SET   $   
01DE                VVLEN:    .SET   (1 & 01FH) / CELLL   
1FA6                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FA6                VVNAME:   .SET   $   
1FA6   DE 01 B0 1F            DW   vvCODE,vvLINK   
1FAA                VVLINK:   .SET   $   
1FAA   01 3D                  DB   1,"="   
01DE                          .ORG   vvCODE   
01DE   00                     NOP      
01DF   CD 12 06               CALL   doLIST   
01E2   80 01                  DW   XORR   
01E4   40 0E EE 01            DW   QBRAN,EQU1   
01E8   20 06 00 00 48 06      DW   DOLIT,0,EXIT   ;false flag
01EE                EQU1:        
01EE   20 06 FF FF 48 06      DW   DOLIT,-1,EXIT   ;true flag
01F4                             ;   U<          ( u u -- t )
01F4                             ;               Unsigned compare of top two items.
01F4                          ;*Macro unroll: mCOLON	2,'U<',ULESS
01F4                          ;*Macro unroll:  mCODE 2, "U<", ULESS
01F4                          ALIGN   2   
01F4                ULESS:       
01F4                VVCODE:   .SET   $   
01F4                VVLEN:    .SET   (2 & 01FH) / CELLL   
1F9E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F9E                VVNAME:   .SET   $   
1F9E   F4 01 AA 1F            DW   vvCODE,vvLINK   
1FA2                VVLINK:   .SET   $   
1FA2   02 55 3C               DB   2,"U<"   
01F4                          .ORG   vvCODE   
01F4   00                     NOP      
01F5   CD 12 06               CALL   doLIST   
01F8   66 10 80 01 64 01      DW   DDUP,XORR,ZLESS   
01FE   40 0E 0A 02            DW   QBRAN,ULES1   
0202   30 10 2C 10 64 01 48 06 DW   SWAP,DROP,ZLESS,EXIT   
020A                ULES1:       
020A   C4 01 64 01 48 06      DW   SUBB,ZLESS,EXIT   
0210                             ;   <           ( n1 n2 -- t )
0210                             ;               is less than
0210                          ;*Macro unroll: mCOLON	1,'<',LESS
0210                          ;*Macro unroll:  mCODE 1, "<", LESS
0210                          ALIGN   2   
0210                LESS:        
0210                VVCODE:   .SET   $   
0210                VVLEN:    .SET   (1 & 01FH) / CELLL   
1F98                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F98                VVNAME:   .SET   $   
1F98   10 02 A2 1F            DW   vvCODE,vvLINK   
1F9C                VVLINK:   .SET   $   
1F9C   01 3C                  DB   1,"<"   
0210                          .ORG   vvCODE   
0210   00                     NOP      
0211   CD 12 06               CALL   doLIST   
0214   66 10 80 01 64 01 40 0E 24 02 DW   DDUP,XORR,ZLESS,QBRAN,LESS1   
021E   2C 10 64 01 48 06      DW   DROP,ZLESS,EXIT   
0224                LESS1:       
0224   C4 01 64 01 48 06      DW   SUBB,ZLESS,EXIT   
022A                             ;   MAX         ( n n -- n )
022A                             ;               Return the greater of two top stack items.
022A                          ;*Macro unroll: mCOLON	3,'MAX',MAX
022A                          ;*Macro unroll:  mCODE 3, "MAX", MAX
022A                          ALIGN   2   
022A                MAX:         
022A                VVCODE:   .SET   $   
022A                VVLEN:    .SET   (3 & 01FH) / CELLL   
1F90                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F90                VVNAME:   .SET   $   
1F90   2A 02 9C 1F            DW   vvCODE,vvLINK   
1F94                VVLINK:   .SET   $   
1F94   03 4D 41 58            DB   3,"MAX"   
022A                          .ORG   vvCODE   
022A   00                     NOP      
022B   CD 12 06               CALL   doLIST   
022E   66 10 10 02 40 0E 38 02 DW   DDUP,LESS,QBRAN,MAX1   
0236   30 10                  DW   SWAP   
0238                MAX1:        
0238   2C 10 48 06            DW   DROP,EXIT   
023C                             ;   MIN         ( n n -- n )
023C                             ;               Return the smaller of top two stack items.
023C                          ;*Macro unroll: mCOLON	3,'MIN',MIN
023C                          ;*Macro unroll:  mCODE 3, "MIN", MIN
023C                          ALIGN   2   
023C                MIN:         
023C                VVCODE:   .SET   $   
023C                VVLEN:    .SET   (3 & 01FH) / CELLL   
1F88                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F88                VVNAME:   .SET   $   
1F88   3C 02 94 1F            DW   vvCODE,vvLINK   
1F8C                VVLINK:   .SET   $   
1F8C   03 4D 49 4E            DB   3,"MIN"   
023C                          .ORG   vvCODE   
023C   00                     NOP      
023D   CD 12 06               CALL   doLIST   
0240   66 10 30 10 10 02      DW   DDUP,SWAP,LESS   
0246   40 0E 4C 02            DW   QBRAN,MIN1   
024A   30 10                  DW   SWAP   
024C                MIN1:        
024C   2C 10 48 06            DW   DROP,EXIT   
0250                             ;   WITHIN      ( u ul uh -- t )
0250                             ;               Return true if u is within the range of ul and uh.
0250                          ;*Macro unroll: mCOLON	6,'WITHIN',WITHI
0250                          ;*Macro unroll:  mCODE 6, "WITHIN", WITHI
0250                          ALIGN   2   
0250                WITHI:       
0250                VVCODE:   .SET   $   
0250                VVLEN:    .SET   (6 & 01FH) / CELLL   
1F7C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F7C                VVNAME:   .SET   $   
1F7C   50 02 8C 1F            DW   vvCODE,vvLINK   
1F80                VVLINK:   .SET   $   
1F80   06 57 49 54 48 49 4E   DB   6,"WITHIN"   
0250                          .ORG   vvCODE   
0250   00                     NOP      
0251   CD 12 06               CALL   doLIST   
0254   38 10 C4 01 0C 10      DW   OVER,SUBB,ToR   ;ul <= u < uh
025A   C4 01 1A 10 F4 01 48 06 DW   SUBB,RFrom,ULess,EXIT   
0262                             ;   UM+         ( w w -- w cy )
0262                             ;               Add two numbers, return the sum and carry flag.
0262                          ;*Macro unroll: hCODE	3,'um+',UMPlus
0262                          ALIGN   2   
0262                UMPLUS:      
0262   E1                     POP   HL   ;10t
0263   09                     ADD   HL,BC   ;11t
0264   E5                     PUSH   HL   ;11t
0265   01 00 00               LD   BC,0   ;10t
0268   30 01                  JR   NC,UMP1   ;12/7t
026A                UMP2:        
026A   03                     INC   BC   ; 6t
026B                UMP1:        
026B                          ;*Macro unroll:  mNEXT
026B   EB                     EX   DE,HL   
026C                          ;*Macro unroll:  mNEXTHL                         ; 34t
026C   FD E9                  JP   (IY)   ; 34t
026E                             ; UM/MOD      ( udl udh u -- ur uq )
026E                             ; Unsigned divide of a double by a single. Return mod and quotient.
026E                             ; Note: Less range than eForth because most significant word discarded TODO: fix
026E                          ;*Macro unroll: mCOLON  6,'UM/MOD',UMMOD
026E                          ;*Macro unroll:  mCODE 6, "UM/MOD", UMMOD
026E                          ALIGN   2   
026E                UMMOD:       
026E                VVCODE:   .SET   $   
026E                VVLEN:    .SET   (6 & 01FH) / CELLL   
1F70                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F70                VVNAME:   .SET   $   
1F70   6E 02 80 1F            DW   vvCODE,vvLINK   
1F74                VVLINK:   .SET   $   
1F74   06 55 4D 2F 4D 4F 44   DB   6,"UM/MOD"   
026E                          .ORG   vvCODE   
026E   00                     NOP      
026F   CD 12 06               CALL   doLIST   
0272   30 10 2C 10 7A 02 48 06 DW   SWAP,DROP,UMSLMOD2,EXIT   
027A                             ; UM/MOD2	( ud u1 -- u2 u3 )		
027A                             ; Unsigned division of a double-cell number ud by a single-cell
027A                             ; number u1. Return remainder u2 and quotient u3.
027A                             ; Note: Less range than eForth TODO: fix
027A                          ;*Macro unroll: mCODE	6,'UM/MOD2',UMSLMOD2
027A                          ALIGN   2   
027A                UMSLMOD2:      
027A                VVCODE:   .SET   $   
027A                VVLEN:    .SET   (6 & 01FH) / CELLL   
1F64                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F64                VVNAME:   .SET   $   
1F64   7A 02 74 1F            DW   vvCODE,vvLINK   
1F68                VVLINK:   .SET   $   
1F68   06 55 4D 2F 4D 4F 44 32 DB   6,"UM/MOD2"   
027A                          .ORG   vvCODE   
027A   78                     LD   A,B   
027B   B1                     OR   C   
027C   28 25                  JR   Z,UMMOD2   ;?zero divisor
027E                UMMOD11:      
027E   C5                     PUSH   BC   
027F   D9                     EXX      
0280   C1                     POP   BC   
0281   E1                     POP   HL   
0282   D1                     POP   DE   
0283   7D                     LD   A,L   
0284   91                     SUB   C   
0285   7C                     LD   A,H   
0286   98                     SBC   A,B   
0287   30 20                  JR   NC,UMMOD1   ;?too big
0289                UMMOD12:      
0289   7C                     LD   A,H   
028A   65                     LD   H,L   
028B   6A                     LD   L,D   
028C   16 08                  LD   D,8   
028E   D5                     PUSH   DE   
028F   CD BD 02               CALL   UMMOD3   
0292   D1                     POP   DE   
0293   E5                     PUSH   HL   
0294   6B                     LD   L,E   
0295   CD BD 02               CALL   UMMOD3   
0298   57                     LD   D,A   
0299   5C                     LD   E,H   
029A   C1                     POP   BC   
029B   61                     LD   H,C   
029C   D5                     PUSH   DE   
029D   E5                     PUSH   HL   
029E   D9                     EXX      
029F   C1                     POP   BC   
02A0                          ;*Macro unroll: 	mNEXT
02A0   EB                     EX   DE,HL   
02A1                          ;*Macro unroll:  mNEXTHL                         ; 34t
02A1   FD E9                  JP   (IY)   ; 34t
02A3                UMMOD2:      
02A3   01 F8 0F               LD   BC,ERR_DIVZERO   ; divide by 0
02A6   C3 54 0E               JP   THROWX   
02A9                UMMOD1:      
02A9   01 00 10               LD   BC,ERR_OUTOFRANGE   ; result out of range
02AC   C3 54 0E               JP   THROWX   
02AF                UMMOD4:      
02AF   5F                     LD   E,A   
02B0   7C                     LD   A,H   
02B1   91                     SUB   C   
02B2   67                     LD   H,A   
02B3   7B                     LD   A,E   
02B4   98                     SBC   A,B   
02B5   30 10                  JR   NC,UMMOD5   
02B7                UMMOD13:      
02B7   7C                     LD   A,H   
02B8   81                     ADD   A,C   
02B9   67                     LD   H,A   
02BA   7B                     LD   A,E   
02BB   15                     DEC   D   
02BC   C8                     RET   Z   
02BD                UMMOD3:      
02BD   29                     ADD   HL,HL   
02BE   17                     RLA      
02BF   30 EE                  JR   NC,UMMOD4   
02C1                UMMOD14:      
02C1   5F                     LD   E,A   
02C2   7C                     LD   A,H   
02C3   91                     SUB   C   
02C4   67                     LD   H,A   
02C5   7B                     LD   A,E   
02C6   98                     SBC   A,B   
02C7                UMMOD5:      
02C7   2C                     INC   L   
02C8   15                     DEC   D   
02C9   20 F2                  JR   NZ,UMMOD3   
02CB                UMMOD15:      
02CB   C9                     RET      
02CC                             ;   FM/MOD	( d n1 -- n2 n3 )		\ CORE
02CC                             ;		Signed floored divide of double by single. Return mod n2
02CC                             ;		and quotient n3.
02CC                             ; TODO: this is usually called M/MOD in eForth
02CC                          ;*Macro unroll: mCOLON	6,'M/MOD',MSMOD
02CC                          ;*Macro unroll:  mCODE 6, "M/MOD", MSMOD
02CC                          ALIGN   2   
02CC                MSMOD:       
02CC                VVCODE:   .SET   $   
02CC                VVLEN:    .SET   (6 & 01FH) / CELLL   
1F58                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F58                VVNAME:   .SET   $   
1F58   CC 02 68 1F            DW   vvCODE,vvLINK   
1F5C                VVLINK:   .SET   $   
1F5C   06 4D 2F 4D 4F 44      DB   6,"M/MOD"   
02CC                          .ORG   vvCODE   
02CC   00                     NOP      
02CD   CD 12 06               CALL   doLIST   
02D0   28 10 64 01 28 10 0C 10 DW   DUPP,ZLESS,DUPP,TOR   
02D8   40 0E E4 02            DW   QBRAN,MMOD1   
02DC   A0 01 0C 10 AE 01 1A 10 DW   NEGAT,TOR,DNEGA,RFROM   
02E4                MMOD1:       
02E4   0C 10 28 10 64 01      DW   TOR,DUPP,ZLESS   
02EA   40 0E F2 02            DW   QBRAN,MMOD2   
02EE   7E 0E 8A 01            DW   RAT,PLUS   
02F2                MMOD2:       
02F2   1A 10 6E 02 1A 10      DW   RFROM,UMMOD,RFROM   
02F8   40 0E 02 03            DW   QBRAN,MMOD3   
02FC   30 10 A0 01 30 10      DW   SWAP,NEGAT,SWAP   
0302                MMOD3:       
0302   48 06                  DW   EXIT   
0304                             ;   /MOD        ( n n -- r q )
0304                             ;               Signed divide. Return mod and quotient.
0304                          ;*Macro unroll: mCOLON	4,'/MOD',SLMOD
0304                          ;*Macro unroll:  mCODE 4, "/MOD", SLMOD
0304                          ALIGN   2   
0304                SLMOD:       
0304                VVCODE:   .SET   $   
0304                VVLEN:    .SET   (4 & 01FH) / CELLL   
1F4E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F4E                VVNAME:   .SET   $   
1F4E   04 03 5C 1F            DW   vvCODE,vvLINK   
1F52                VVLINK:   .SET   $   
1F52   04 2F 4D 4F 44         DB   4,"/MOD"   
0304                          .ORG   vvCODE   
0304   00                     NOP      
0305   CD 12 06               CALL   doLIST   
0308   38 10 64 01 30 10 CC 02 48 06 DW   OVER,ZLESS,SWAP,MSMOD,EXIT   
0312                             ;   MOD         ( n n -- r )
0312                             ;               Signed divide. Return mod only.
0312                          ;*Macro unroll: mCOLON	3,'MOD',MODD
0312                          ;*Macro unroll:  mCODE 3, "MOD", MODD
0312                          ALIGN   2   
0312                MODD:        
0312                VVCODE:   .SET   $   
0312                VVLEN:    .SET   (3 & 01FH) / CELLL   
1F46                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F46                VVNAME:   .SET   $   
1F46   12 03 52 1F            DW   vvCODE,vvLINK   
1F4A                VVLINK:   .SET   $   
1F4A   03 4D 4F 44            DB   3,"MOD"   
0312                          .ORG   vvCODE   
0312   00                     NOP      
0313   CD 12 06               CALL   doLIST   
0316   04 03 2C 10 48 06      DW   SLMOD,DROP,EXIT   
031C                             ; 
031C                             ;   /           ( n n -- q )
031C                             ;               Signed divide. Return quotient only.
031C                          ;*Macro unroll: mCOLON	1,'/',SLASH
031C                          ;*Macro unroll:  mCODE 1, "/", SLASH
031C                          ALIGN   2   
031C                SLASH:       
031C                VVCODE:   .SET   $   
031C                VVLEN:    .SET   (1 & 01FH) / CELLL   
1F40                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F40                VVNAME:   .SET   $   
1F40   1C 03 4A 1F            DW   vvCODE,vvLINK   
1F44                VVLINK:   .SET   $   
1F44   01 2F                  DB   1,"/"   
031C                          .ORG   vvCODE   
031C   00                     NOP      
031D   CD 12 06               CALL   doLIST   
0320   04 03 30 10 2C 10 48 06 DW   SLMOD,SWAP,DROP,EXIT   
0328                             ; Multiply
0328                             ;   UM*         ( u u -- ud )
0328                             ;               Unsigned multiply. Return double product.
0328                          ;*Macro unroll: mCODE	3,'UM*',UMSTA
0328                          ALIGN   2   
0328                UMSTA:       
0328                VVCODE:   .SET   $   
0328                VVLEN:    .SET   (3 & 01FH) / CELLL   
1F38                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F38                VVNAME:   .SET   $   
1F38   28 03 44 1F            DW   vvCODE,vvLINK   
1F3C                VVLINK:   .SET   $   
1F3C   03 55 4D 2A            DB   3,"UM*"   
0328                          .ORG   vvCODE   
0328   EB                     EX   DE,HL   
0329   E3                     EX   (SP),HL   
032A   EB                     EX   DE,HL   
032B   21 00 00               LD   HL,0   
032E   3E 10                  LD   A,010h   
0330                UMSTA1:      
0330   29                     ADD   HL,HL   
0331   EB                     EX   DE,HL   
0332   ED 6A                  ADC   HL,HL   
0334   EB                     EX   DE,HL   
0335   30 04                  JR   NC,UMSTA3   
0337                UMSTA2:      
0337   09                     ADD   HL,BC   
0338   30 01                  JR   NC,UMSTA3   
033A                UMSTA5:      
033A   13                     INC   DE   
033B                UMSTA3:      
033B   3D                     DEC   A   
033C   20 F2                  JR   NZ,UMSTA1   
033E                UMSTA4:      
033E   42                     LD   B,D   
033F   4B                     LD   C,E   
0340   E3                     EX   (SP),HL   
0341                          ;*Macro unroll: 	mNEXTHL
0341   FD E9                  JP   (IY)   
0343                             ;   *           ( n n -- n )
0343                             ;               Signed multiply. Return single product.
0343                          ;*Macro unroll: mCOLON	1,'*',STAR
0343                          ;*Macro unroll:  mCODE 1, "*", STAR
0343                          ALIGN   2   
0344                STAR:        
0344                VVCODE:   .SET   $   
0344                VVLEN:    .SET   (1 & 01FH) / CELLL   
1F32                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F32                VVNAME:   .SET   $   
1F32   44 03 3C 1F            DW   vvCODE,vvLINK   
1F36                VVLINK:   .SET   $   
1F36   01 2A                  DB   1,"*"   
0344                          .ORG   vvCODE   
0344   00                     NOP      
0345   CD 12 06               CALL   doLIST   
0348   28 03 2C 10 48 06      DW   UMSTA,DROP,EXIT   
034E                             ;   M*          ( n n -- d )
034E                             ;               Signed multiply. Return double product.
034E                          ;*Macro unroll: mCOLON	2,'M*',MSTAR,
034E                          ;*Macro unroll:  mCODE 2, "M*", MSTAR
034E                          ALIGN   2   
034E                MSTAR:       
034E                VVCODE:   .SET   $   
034E                VVLEN:    .SET   (2 & 01FH) / CELLL   
1F2A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F2A                VVNAME:   .SET   $   
1F2A   4E 03 36 1F            DW   vvCODE,vvLINK   
1F2E                VVLINK:   .SET   $   
1F2E   02 4D 2A               DB   2,"M*"   
034E                          .ORG   vvCODE   
034E   00                     NOP      
034F   CD 12 06               CALL   doLIST   
0352   66 10 80 01 64 01 0C 10 CE 01 30 10 CE 01 DW   DDUP,XORR,ZLESS,ToR,ABSS,SWAP,ABSS   
0360   28 03 1A 10 40 0E 6A 03 DW   UMSTA,RFrom,QBRAN,MSTAR1   
0368   AE 01                  DW   DNEGA   
036A                MSTAR1:      
036A   48 06                  DW   EXIT   
036C                             ;   */MOD       ( n1 n2 n3 -- r q )
036C                             ;               Multiply n1 and n2, then divide by n3. Return mod and quotient.
036C                          ;*Macro unroll: mCOLON	5,'*/MOD',SSMOD
036C                          ;*Macro unroll:  mCODE 5, "*/MOD", SSMOD
036C                          ALIGN   2   
036C                SSMOD:       
036C                VVCODE:   .SET   $   
036C                VVLEN:    .SET   (5 & 01FH) / CELLL   
1F20                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F20                VVNAME:   .SET   $   
1F20   6C 03 2E 1F            DW   vvCODE,vvLINK   
1F24                VVLINK:   .SET   $   
1F24   05 2A 2F 4D 4F 44      DB   5,"*/MOD"   
036C                          .ORG   vvCODE   
036C   00                     NOP      
036D   CD 12 06               CALL   doLIST   
0370   0C 10 4E 03 1A 10 CC 02 48 06 DW   ToR,MStar,RFrom,MSMOD,EXIT   
037A                             ;   */          ( n1 n2 n3 -- q )
037A                             ;               Multiply n1 by n2, then divide by n3. Return quotient only.
037A                          ;*Macro unroll: mCOLON	2,'*/',STASL
037A                          ;*Macro unroll:  mCODE 2, "*/", STASL
037A                          ALIGN   2   
037A                STASL:       
037A                VVCODE:   .SET   $   
037A                VVLEN:    .SET   (2 & 01FH) / CELLL   
1F18                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F18                VVNAME:   .SET   $   
1F18   7A 03 24 1F            DW   vvCODE,vvLINK   
1F1C                VVLINK:   .SET   $   
1F1C   02 2A 2F               DB   2,"*/"   
037A                          .ORG   vvCODE   
037A   00                     NOP      
037B   CD 12 06               CALL   doLIST   
037E   6C 03 30 10 2C 10 48 06 DW   SSMOD,SWAP,DROP,EXIT   
0386                             ;   CELL+       ( a -- a )
0386                             ;               Add cell size in byte to address.
0386                          ;*Macro unroll: mCOLON	5,'CELL+',CELLP
0386                          ;*Macro unroll:  mCODE 5, "CELL+", CELLP
0386                          ALIGN   2   
0386                CELLP:       
0386                VVCODE:   .SET   $   
0386                VVLEN:    .SET   (5 & 01FH) / CELLL   
1F0E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F0E                VVNAME:   .SET   $   
1F0E   86 03 1C 1F            DW   vvCODE,vvLINK   
1F12                VVLINK:   .SET   $   
1F12   05 43 45 4C 4C 2B      DB   5,"CELL+"   
0386                          .ORG   vvCODE   
0386   00                     NOP      
0387   CD 12 06               CALL   doLIST   
038A   20 06 02 00 8A 01 48 06 DW   DOLIT,CELLL,PLUS,EXIT   
0392                             ;   CELL-       ( a -- a )
0392                             ;               Subtract cell size in byte from address.
0392                          ;*Macro unroll: mCOLON	5,'CELL-',CELLM
0392                          ;*Macro unroll:  mCODE 5, "CELL-", CELLM
0392                          ALIGN   2   
0392                CELLM:       
0392                VVCODE:   .SET   $   
0392                VVLEN:    .SET   (5 & 01FH) / CELLL   
1F04                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F04                VVNAME:   .SET   $   
1F04   92 03 12 1F            DW   vvCODE,vvLINK   
1F08                VVLINK:   .SET   $   
1F08   05 43 45 4C 4C 2D      DB   5,"CELL-"   
0392                          .ORG   vvCODE   
0392   00                     NOP      
0393   CD 12 06               CALL   doLIST   
0396   20 06 FE FF 8A 01 48 06 DW   DOLIT,-CELLL,PLUS,EXIT   
039E                             ;   CELLS       ( n -- n )
039E                             ;               Multiply tos by cell size in bytes.
039E                          ;*Macro unroll: mCOLON	5,'CELLS',CELLS
039E                          ;*Macro unroll:  mCODE 5, "CELLS", CELLS
039E                          ALIGN   2   
039E                CELLS:       
039E                VVCODE:   .SET   $   
039E                VVLEN:    .SET   (5 & 01FH) / CELLL   
1EFA                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1EFA                VVNAME:   .SET   $   
1EFA   9E 03 08 1F            DW   vvCODE,vvLINK   
1EFE                VVLINK:   .SET   $   
1EFE   05 43 45 4C 4C 53      DB   5,"CELLS"   
039E                          .ORG   vvCODE   
039E   00                     NOP      
039F   CD 12 06               CALL   doLIST   
03A2   20 06 02 00 44 03 48 06 DW   DOLIT,CELLL,STAR,EXIT   
03AA                             ;   '           ( -- ca )
03AA                             ;               Search context vocabularies for the next word in input stream.
03AA                          ;*Macro unroll: mCOLON  1,"'",TICK
03AA                          ;*Macro unroll:  mCODE 1, "'", TICK
03AA                          ALIGN   2   
03AA                TICK:        
03AA                VVCODE:   .SET   $   
03AA                VVLEN:    .SET   (1 & 01FH) / CELLL   
1EF4                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1EF4                VVNAME:   .SET   $   
1EF4   AA 03 FE 1E            DW   vvCODE,vvLINK   
1EF8                VVLINK:   .SET   $   
1EF8   01 27                  DB   1,"'"   
03AA                          .ORG   vvCODE   
03AA   00                     NOP      
03AB   CD 12 06               CALL   doLIST   
03AE   4A 09 2C 0A            DW   TOKEN,NAMEQ   ;?defined
03B2   40 0E B8 03            DW   QBRAN,TICK1   
03B6   48 06                  DW   EXIT   ;yes, push code address
03B8                TICK1:       
03B8   8E 0A                  DW   THROW   ;no, error
03BA                             ;   ALLOT       ( n -- )
03BA                             ;               Allocate n bytes to the code dictionary.
03BA                          ;*Macro unroll: mCOLON  5,'ALLOT',ALLOT
03BA                          ;*Macro unroll:  mCODE 5, "ALLOT", ALLOT
03BA                          ALIGN   2   
03BA                ALLOT:       
03BA                VVCODE:   .SET   $   
03BA                VVLEN:    .SET   (5 & 01FH) / CELLL   
1EEA                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1EEA                VVNAME:   .SET   $   
1EEA   BA 03 F8 1E            DW   vvCODE,vvLINK   
1EEE                VVLINK:   .SET   $   
1EEE   05 41 4C 4C 4F 54      DB   5,"ALLOT"   
03BA                          .ORG   vvCODE   
03BA   00                     NOP      
03BB   CD 12 06               CALL   doLIST   
03BE   48 11 AA 0E 48 06      DW   CP,PSTOR,EXIT   ;adjust code pointer
03C4                             ;   ,           ( w -- )
03C4                             ;               Compile an integer into the code dictionary.
03C4                          ;*Macro unroll: mCOLON  1,',',COMMA
03C4                          ;*Macro unroll:  mCODE 1, ",", COMMA
03C4                          ALIGN   2   
03C4                COMMA:       
03C4                VVCODE:   .SET   $   
03C4                VVLEN:    .SET   (1 & 01FH) / CELLL   
1EE4                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1EE4                VVNAME:   .SET   $   
1EE4   C4 03 EE 1E            DW   vvCODE,vvLINK   
1EE8                VVLINK:   .SET   $   
1EE8   01 2C                  DB   1,","   
03C4                          .ORG   vvCODE   
03C4   00                     NOP      
03C5   CD 12 06               CALL   doLIST   
03C8   EE 0E 28 10 86 03      DW   HERE,DUPP,CELLP   ;cell boundary
03CE   48 11 5C 0E 5C 0E 48 06 DW   CP,STORE,STORE,EXIT   ;adjust code pointer, compile
03D6                             ;   [COMPILE]   ( -- ; <string> )
03D6                             ;               Compile the next immediate word into code dictionary.
03D6                          ;*Macro unroll: mCOLON  IMEDD+9,'[COMPILE]',BCOMP
03D6                          ;*Macro unroll:  mCODE IMEDD+9, "[COMPILE]", BCOMP
03D6                          ALIGN   2   
03D6                BCOMP:       
03D6                VVCODE:   .SET   $   
03D6                VVLEN:    .SET   (IMEDD+9 & 01FH) / CELLL   
1E96                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1E96                VVNAME:   .SET   $   
1E96   D6 03 E8 1E            DW   vvCODE,vvLINK   
1E9A                VVLINK:   .SET   $   
1E9A   49 5B 43 4F 4D 50 49 4C 45 5D DB   IMEDD+9,"[COMPILE]"   
03D6                          .ORG   vvCODE   
03D6   00                     NOP      
03D7   CD 12 06               CALL   doLIST   
03DA   AA 03 C4 03 48 06      DW   TICK,COMMA,EXIT   
03E0                             ;   COMPILE     ( -- )
03E0                             ;               Compile the next address in colon list to code dictionary.
03E0                          ;*Macro unroll: mCOLON  COMPO+7,'COMPILE',COMPI
03E0                          ;*Macro unroll:  mCODE COMPO+7, "COMPILE", COMPI
03E0                          ALIGN   2   
03E0                COMPI:       
03E0                VVCODE:   .SET   $   
03E0                VVLEN:    .SET   (COMPO+7 & 01FH) / CELLL   
1E6A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1E6A                VVNAME:   .SET   $   
1E6A   E0 03 9A 1E            DW   vvCODE,vvLINK   
1E6E                VVLINK:   .SET   $   
1E6E   27 43 4F 4D 50 49 4C 45 DB   COMPO+7,"COMPILE"   
03E0                          .ORG   vvCODE   
03E0   00                     NOP      
03E1   CD 12 06               CALL   doLIST   
03E4   1A 10 28 10 66 0E C4 03 DW   RFROM,DUPP,AT,COMMA   ;compile address
03EC   86 03 0C 10 48 06      DW   CELLP,TOR,EXIT   ;adjust return address
03F2                             ;   LITERAL     ( w -- )
03F2                             ;               Compile tos to code dictionary as an integer literal.
03F2                          ;*Macro unroll: mCOLON  IMEDD+7,'LITERAL',LITER
03F2                          ;*Macro unroll:  mCODE IMEDD+7, "LITERAL", LITER
03F2                          ALIGN   2   
03F2                LITER:       
03F2                VVCODE:   .SET   $   
03F2                VVLEN:    .SET   (IMEDD+7 & 01FH) / CELLL   
1E1E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1E1E                VVNAME:   .SET   $   
1E1E   F2 03 6E 1E            DW   vvCODE,vvLINK   
1E22                VVLINK:   .SET   $   
1E22   47 4C 49 54 45 52 41 4C DB   IMEDD+7,"LITERAL"   
03F2                          .ORG   vvCODE   
03F2   00                     NOP      
03F3   CD 12 06               CALL   doLIST   
03F6   E0 03 20 06 C4 03 48 06 DW   COMPI,DOLIT,COMMA,EXIT   
03FE                             ;   $,"         ( -- )
03FE                             ;               Compile a literal string up to next " .
03FE                          ;*Macro unroll: hCOLON  3,'$,|',STRCQ
03FE                          ;*Macro unroll:  hCODE 3, "$,|", STRCQ
03FE                          ALIGN   2   
03FE                STRCQ:       
03FE   00                     NOP      
03FF   CD 12 06               CALL   doLIST   
0402   20 06 22 00 66 09      DW   DOLIT,$22,WORDD   ;move string to code dictionary
0408   DC 0E 8A 01 D4 0F      DW   COUNT,PLUS,ALGND   ;calculate aligned end of string
040E   48 11 5C 0E 48 06      DW   CP,STORE,EXIT   ;adjust the code pointer
0414                             ;   RECURSE     ( -- )
0414                             ;               Make the current word available for compilation.
0414                          ;*Macro unroll: mCOLON  IMEDD+7,'RECURSE',RECUR
0414                          ;*Macro unroll:  mCODE IMEDD+7, "RECURSE", RECUR
0414                          ALIGN   2   
0414                RECUR:       
0414                VVCODE:   .SET   $   
0414                VVLEN:    .SET   (IMEDD+7 & 01FH) / CELLL   
1DD2                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1DD2                VVNAME:   .SET   $   
1DD2   14 04 22 1E            DW   vvCODE,vvLINK   
1DD6                VVLINK:   .SET   $   
1DD6   47 52 45 43 55 52 53 45 DB   IMEDD+7,"RECURSE"   
0414                          .ORG   vvCODE   
0414   00                     NOP      
0415   CD 12 06               CALL   doLIST   
0418   58 11 66 0E 72 09 C4 03 48 06 DW   LAST,AT,NAMET,COMMA,EXIT   
0422                             ;   ?UNIQUE     ( a -- a )
0422                             ;               Display a warning message if the word already exists.
0422                          ;*Macro unroll: mCOLON  7,'?UNIQUE',UNIQU
0422                          ;*Macro unroll:  mCODE 7, "?UNIQUE", UNIQU
0422                          ALIGN   2   
0422                UNIQU:       
0422                VVCODE:   .SET   $   
0422                VVLEN:    .SET   (7 & 01FH) / CELLL   
1DC6                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1DC6                VVNAME:   .SET   $   
1DC6   22 04 D6 1D            DW   vvCODE,vvLINK   
1DCA                VVLINK:   .SET   $   
1DCA   07 3F 55 4E 49 51 55 45 DB   7,"?UNIQUE"   
0422                          .ORG   vvCODE   
0422   00                     NOP      
0423   CD 12 06               CALL   doLIST   
0426   28 10 2C 0A            DW   DUPP,NAMEQ   ;?name exists
042A   40 0E 3E 04            DW   QBRAN,UNIQ1   ;redefinitions are OK
042E                          ;*Macro unroll:  mDSTR   DOTQP,' reDef '         ;but warn the user
042E   84 0C                  DW   DOTQP   ;but warn the user
0430                VVLEN:    .SET   $   
0430   00 20 72 65 44 65 66 20 DB   0," reDef "   
0438                VVCODE:   .SET   $   
0430                          .ORG   vvLEN   
0430   07                     DB   vvCODE - vvLEN - 1   
0438                          .ORG   vvCODE   
0438   38 10 DC 0E 16 0C      DW   OVER,COUNT,TYPEE   ;just in case its not planned
043E                UNIQ1:       
043E   2C 10 48 06            DW   DROP,EXIT   
0442                             ;   $,n         ( na -- )
0442                             ;               Build a new dictionary name using the string at na.
0442                          ;*Macro unroll: mCOLON  3,'$,n',SNAME
0442                          ;*Macro unroll:  mCODE 3, "$,n", SNAME
0442                          ALIGN   2   
0442                SNAME:       
0442                VVCODE:   .SET   $   
0442                VVLEN:    .SET   (3 & 01FH) / CELLL   
1DBE                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1DBE                VVNAME:   .SET   $   
1DBE   42 04 CA 1D            DW   vvCODE,vvLINK   
1DC2                VVLINK:   .SET   $   
1DC2   03 24 2C 6E            DB   3,"$,n"   
0442                          .ORG   vvCODE   
0442   00                     NOP      
0443   CD 12 06               CALL   doLIST   
0446   28 10 76 0E            DW   DUPP,CAT   ;?null input
044A   40 0E 74 04            DW   QBRAN,PNAM1   
044E   22 04                  DW   UNIQU   ;?redefinition
0450   28 10 58 11 5C 0E      DW   DUPP,LAST,STORE   ;save na for vocabulary link
0456   EE 0E D4 0F 30 10      DW   HERE,ALGND,SWAP   ;align code address
045C   92 03                  DW   CELLM   ;link address
045E   40 11 66 0E 66 0E 38 10 5C 0E DW   CRRNT,AT,AT,OVER,STORE   
0468   92 03 28 10 50 11 5C 0E DW   CELLM,DUPP,NP,STORE   ;adjust name pointer
0470   5C 0E 48 06            DW   STORE,EXIT   ;save code pointer
0474                PNAM1:       
0474                          ;*Macro unroll:  mDSTR   STRQP,' name'           ;null input
0474   7C 0C                  DW   STRQP   ;null input
0476                VVLEN:    .SET   $   
0476   00 20 6E 61 6D 65      DB   0," name"   
047C                VVCODE:   .SET   $   
0476                          .ORG   vvLEN   
0476   05                     DB   vvCODE - vvLEN - 1   
047C                          .ORG   vvCODE   
047C   8E 0A                  DW   THROW   
047E                             ;   $COMPILE    ( a -- )
047E                             ;               Compile next word to code dictionary as a token or literal.
047E                          ;*Macro unroll: hCOLON  8,'$COMPILE',SCOMP
047E                          ;*Macro unroll:  hCODE 8, "$COMPILE", SCOMP
047E                          ALIGN   2   
047E                SCOMP:       
047E   00                     NOP      
047F   CD 12 06               CALL   doLIST   
0482   2C 0A 40 10            DW   NAMEQ,QDUP   ;?defined
0486   40 0E 9E 04            DW   QBRAN,SCOM2   
048A   66 0E 20 06 40 00 6C 01 DW   AT,DOLIT,IMEDD,ANDD   ;?immediate
0492   40 0E 9A 04            DW   QBRAN,SCOM1   
0496   3C 0E 48 06            DW   EXECU,EXIT   ;its immediate, execute
049A                SCOM1:       
049A   C4 03 48 06            DW   COMMA,EXIT   ;its not immediate, compile
049E                SCOM2:       
049E   20 11 12 0F            DW   TNUMB,ATEXE   ;try to convert to number
04A2   40 0E AA 04            DW   QBRAN,SCOM3   
04A6   F2 03 48 06            DW   LITER,EXIT   ;compile number as integer
04AA   8E 0A        SCOM3:    DW   THROW   ;error
04AC                             ;   OVERT       ( -- )
04AC                             ;               Link a new word into the current vocabulary.
04AC                          ;*Macro unroll: hCOLON  5,'OVERT',OVERT
04AC                          ;*Macro unroll:  hCODE 5, "OVERT", OVERT
04AC                          ALIGN   2   
04AC                OVERT:       
04AC   00                     NOP      
04AD   CD 12 06               CALL   doLIST   
04B0   58 11 66 0E 40 11 66 0E 5C 0E 48 06 DW   LAST,AT,CRRNT,AT,STORE,EXIT   
04BC                             ;   ;           ( -- )
04BC                             ;               Terminate a colon definition.
04BC                          ;*Macro unroll: mCOLON  IMEDD+COMPO+1,';',SEMIS
04BC                          ;*Macro unroll:  mCODE IMEDD+COMPO+1, ";", SEMIS
04BC                          ALIGN   2   
04BC                SEMIS:       
04BC                VVCODE:   .SET   $   
04BC                VVLEN:    .SET   (IMEDD+COMPO+1 & 01FH) / CELLL   
1D58                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1D58                VVNAME:   .SET   $   
1D58   BC 04 C2 1D            DW   vvCODE,vvLINK   
1D5C                VVLINK:   .SET   $   
1D5C   61 3B                  DB   IMEDD+COMPO+1,";"   
04BC                          .ORG   vvCODE   
04BC   00                     NOP      
04BD   CD 12 06               CALL   doLIST   
04C0   E0 03 48 06 08 0B AC 04 48 06 DW   COMPI,EXIT,LBRAC,OVERT,EXIT   
04CA                             ;   ]           ( -- )
04CA                             ;               Start compiling the words in the input stream.
04CA                          ;*Macro unroll: mCOLON  1,']',RBRAC
04CA                          ;*Macro unroll:  mCODE 1, "]", RBRAC
04CA                          ALIGN   2   
04CA                RBRAC:       
04CA                VVCODE:   .SET   $   
04CA                VVLEN:    .SET   (1 & 01FH) / CELLL   
1D52                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1D52                VVNAME:   .SET   $   
1D52   CA 04 5C 1D            DW   vvCODE,vvLINK   
1D56                VVLINK:   .SET   $   
1D56   01 5D                  DB   1,"]"   
04CA                          .ORG   vvCODE   
04CA   00                     NOP      
04CB   CD 12 06               CALL   doLIST   
04CE   20 06 7E 04 18 11 5C 0E 48 06 DW   DOLIT,SCOMP,TEVAL,STORE,EXIT   
04D8                             ;   call,       ( ca -- )
04D8                             ;               Assemble a call instruction to ca.
04D8                          ;*Macro unroll: hCOLON  5,'call,',CALLC
04D8                          ;*Macro unroll:  hCODE 5, "call,", CALLC
04D8                          ALIGN   2   
04D8                CALLC:       
04D8   00                     NOP      
04D9   CD 12 06               CALL   doLIST   
04DC   20 06 00 CD C4 03      DW   DOLIT,CALLL,COMMA   ;Direct Threaded Code
04E2   C4 03 48 06            DW   COMMA,EXIT   ;DTC 8086 relative call
04E6                             ;   :           ( -- ; <string> )
04E6                             ;               Start a new colon definition using next word as its name.
04E6                          ;*Macro unroll: mCOLON  1,':',COLON
04E6                          ;*Macro unroll:  mCODE 1, ":", COLON
04E6                          ALIGN   2   
04E6                COLON:       
04E6                VVCODE:   .SET   $   
04E6                VVLEN:    .SET   (1 & 01FH) / CELLL   
1D4C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1D4C                VVNAME:   .SET   $   
1D4C   E6 04 56 1D            DW   vvCODE,vvLINK   
1D50                VVLINK:   .SET   $   
1D50   01 3A                  DB   1,":"   
04E6                          .ORG   vvCODE   
04E6   00                     NOP      
04E7   CD 12 06               CALL   doLIST   
04EA   4A 09 42 04 20 06 12 06 DW   TOKEN,SNAME,DOLIT,DoLIST   
04F2   D8 04 CA 04 48 06      DW   CALLC,RBRAC,EXIT   
04F8                             ;   IMMEDIATE   ( -- )
04F8                             ;               Make the last compiled word an immediate word.
04F8                          ;*Macro unroll: mCOLON  9,'IMMEDIATE',IMMED
04F8                          ;*Macro unroll:  mCODE 9, "IMMEDIATE", IMMED
04F8                          ALIGN   2   
04F8                IMMED:       
04F8                VVCODE:   .SET   $   
04F8                VVLEN:    .SET   (9 & 01FH) / CELLL   
1D3E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1D3E                VVNAME:   .SET   $   
1D3E   F8 04 50 1D            DW   vvCODE,vvLINK   
1D42                VVLINK:   .SET   $   
1D42   09 49 4D 4D 45 44 49 41 54 45 DB   9,"IMMEDIATE"   
04F8                          .ORG   vvCODE   
04F8   00                     NOP      
04F9   CD 12 06               CALL   doLIST   
04FC   20 06 40 00 58 11 66 0E 66 0E 76 01 DW   DOLIT,IMEDD,LAST,AT,AT,ORR   
0508   58 11 66 0E 5C 0E 48 06 DW   LAST,AT,STORE,EXIT   
0510                             ;   USER        ( u -- ; <string> )
0510                             ;               Compile a new user variable.
0510                          ;*Macro unroll: mCOLON  4,'USER',USER
0510                          ;*Macro unroll:  mCODE 4, "USER", USER
0510                          ALIGN   2   
0510                USER:        
0510                VVCODE:   .SET   $   
0510                VVLEN:    .SET   (4 & 01FH) / CELLL   
1D34                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1D34                VVNAME:   .SET   $   
1D34   10 05 42 1D            DW   vvCODE,vvLINK   
1D38                VVLINK:   .SET   $   
1D38   04 55 53 45 52         DB   4,"USER"   
0510                          .ORG   vvCODE   
0510   00                     NOP      
0511   CD 12 06               CALL   doLIST   
0514   4A 09 42 04 AC 04      DW   TOKEN,SNAME,OVERT   
051A   20 06 12 06 D8 04      DW   DOLIT,DoLIST,CALLC   
0520   E0 03 38 06 C4 03 48 06 DW   COMPI,DOUSE,COMMA,EXIT   
0528                             ;   CREATE      ( -- ; <string> )
0528                             ;               Compile a new array entry without allocating code space.
0528                          ;*Macro unroll: mCOLON  6,'CREATE',CREAT
0528                          ;*Macro unroll:  mCODE 6, "CREATE", CREAT
0528                          ALIGN   2   
0528                CREAT:       
0528                VVCODE:   .SET   $   
0528                VVLEN:    .SET   (6 & 01FH) / CELLL   
1D28                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1D28                VVNAME:   .SET   $   
1D28   28 05 38 1D            DW   vvCODE,vvLINK   
1D2C                VVLINK:   .SET   $   
1D2C   06 43 52 45 41 54 45   DB   6,"CREATE"   
0528                          .ORG   vvCODE   
0528   00                     NOP      
0529   CD 12 06               CALL   doLIST   
052C   4A 09 42 04 AC 04      DW   TOKEN,SNAME,OVERT   
0532   20 06 12 06 D8 04      DW   DOLIT,DoLIST,CALLC   
0538   E0 03 28 06 48 06      DW   COMPI,DOVAR,EXIT   
053E                             ;   VARIABLE    ( -- ; <string> )
053E                             ;               Compile a new variable initialized to 0.
053E                          ;*Macro unroll: mCOLON  8,'VARIABLE',VARIA
053E                          ;*Macro unroll:  mCODE 8, "VARIABLE", VARIA
053E                          ALIGN   2   
053E                VARIA:       
053E                VVCODE:   .SET   $   
053E                VVLEN:    .SET   (8 & 01FH) / CELLL   
1D1A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1D1A                VVNAME:   .SET   $   
1D1A   3E 05 2C 1D            DW   vvCODE,vvLINK   
1D1E                VVLINK:   .SET   $   
1D1E   08 56 41 52 49 41 42 4C 45 DB   8,"VARIABLE"   
053E                          .ORG   vvCODE   
053E   00                     NOP      
053F   CD 12 06               CALL   doLIST   
0542   28 05 20 06 00 00 C4 03 48 06 DW   CREAT,DOLIT,0,COMMA,EXIT   
054C                             ;   FOR         ( -- a )
054C                             ;               Start a FOR-NEXT loop structure in a colon definition.
054C                          ;*Macro unroll: mCOLON  IMEDD+3,'FOR',FOR
054C                          ;*Macro unroll:  mCODE IMEDD+3, "FOR", FOR
054C                          ALIGN   2   
054C                FOR:         
054C                VVCODE:   .SET   $   
054C                VVLEN:    .SET   (IMEDD+3 & 01FH) / CELLL   
1CD2                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1CD2                VVNAME:   .SET   $   
1CD2   4C 05 1E 1D            DW   vvCODE,vvLINK   
1CD6                VVLINK:   .SET   $   
1CD6   43 46 4F 52            DB   IMEDD+3,"FOR"   
054C                          .ORG   vvCODE   
054C   00                     NOP      
054D   CD 12 06               CALL   doLIST   
0550   E0 03 0C 10 EE 0E 48 06 DW   COMPI,TOR,HERE,EXIT   
0558                             ;   BEGIN       ( -- a )
0558                             ;               Start an infinite or indefinite loop structure.
0558                          ;*Macro unroll: mCOLON  IMEDD+5,'BEGIN',BEGIN
0558                          ;*Macro unroll:  mCODE IMEDD+5, "BEGIN", BEGIN
0558                          ALIGN   2   
0558                BEGIN:       
0558                VVCODE:   .SET   $   
0558                VVLEN:    .SET   (IMEDD+5 & 01FH) / CELLL   
1C88                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1C88                VVNAME:   .SET   $   
1C88   58 05 D6 1C            DW   vvCODE,vvLINK   
1C8C                VVLINK:   .SET   $   
1C8C   45 42 45 47 49 4E      DB   IMEDD+5,"BEGIN"   
0558                          .ORG   vvCODE   
0558   00                     NOP      
0559   CD 12 06               CALL   doLIST   
055C   EE 0E 48 06            DW   HERE,EXIT   
0560                             ;   NEXT        ( a -- )
0560                             ;               Terminate a FOR-NEXT loop structure.
0560                          ;*Macro unroll: mCOLON  IMEDD+4,'NEXT',NEXT
0560                          ;*Macro unroll:  mCODE IMEDD+4, "NEXT", NEXT
0560                          ALIGN   2   
0560                NEXT:        
0560                VVCODE:   .SET   $   
0560                VVLEN:    .SET   (IMEDD+4 & 01FH) / CELLL   
1C3E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1C3E                VVNAME:   .SET   $   
1C3E   60 05 8C 1C            DW   vvCODE,vvLINK   
1C42                VVLINK:   .SET   $   
1C42   44 4E 45 58 54         DB   IMEDD+4,"NEXT"   
0560                          .ORG   vvCODE   
0560   00                     NOP      
0561   CD 12 06               CALL   doLIST   
0564   E0 03 76 06 C4 03 48 06 DW   COMPI,DONXT,COMMA,EXIT   
056C                             ;   UNTIL       ( a -- )
056C                             ;               Terminate a BEGIN-UNTIL indefinite loop structure.
056C                          ;*Macro unroll: mCOLON  IMEDD+5,'UNTIL',UNTIL
056C                          ;*Macro unroll:  mCODE IMEDD+5, "UNTIL", UNTIL
056C                          ALIGN   2   
056C                UNTIL:       
056C                VVCODE:   .SET   $   
056C                VVLEN:    .SET   (IMEDD+5 & 01FH) / CELLL   
1BF4                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1BF4                VVNAME:   .SET   $   
1BF4   6C 05 42 1C            DW   vvCODE,vvLINK   
1BF8                VVLINK:   .SET   $   
1BF8   45 55 4E 54 49 4C      DB   IMEDD+5,"UNTIL"   
056C                          .ORG   vvCODE   
056C   00                     NOP      
056D   CD 12 06               CALL   doLIST   
0570   E0 03 40 0E C4 03 48 06 DW   COMPI,QBRAN,COMMA,EXIT   
0578                             ;   AGAIN       ( a -- )
0578                             ;               Terminate a BEGIN-AGAIN infinite loop structure.
0578                          ;*Macro unroll: mCOLON  IMEDD+5,'AGAIN',AGAIN
0578                          ;*Macro unroll:  mCODE IMEDD+5, "AGAIN", AGAIN
0578                          ALIGN   2   
0578                AGAIN:       
0578                VVCODE:   .SET   $   
0578                VVLEN:    .SET   (IMEDD+5 & 01FH) / CELLL   
1BAA                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1BAA                VVNAME:   .SET   $   
1BAA   78 05 F8 1B            DW   vvCODE,vvLINK   
1BAE                VVLINK:   .SET   $   
1BAE   45 41 47 41 49 4E      DB   IMEDD+5,"AGAIN"   
0578                          .ORG   vvCODE   
0578   00                     NOP      
0579   CD 12 06               CALL   doLIST   
057C   E0 03 4C 0E C4 03 48 06 DW   COMPI,BRAN,COMMA,EXIT   
0584                             ;   IF          ( -- A )
0584                             ;               Begin a conditional branch structure.
0584                          ;*Macro unroll: mCOLON  IMEDD+2,'IF',IFF
0584                          ;*Macro unroll:  mCODE IMEDD+2, "IF", IFF
0584                          ALIGN   2   
0584                IFF:         
0584                VVCODE:   .SET   $   
0584                VVLEN:    .SET   (IMEDD+2 & 01FH) / CELLL   
1B62                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1B62                VVNAME:   .SET   $   
1B62   84 05 AE 1B            DW   vvCODE,vvLINK   
1B66                VVLINK:   .SET   $   
1B66   42 49 46               DB   IMEDD+2,"IF"   
0584                          .ORG   vvCODE   
0584   00                     NOP      
0585   CD 12 06               CALL   doLIST   
0588   E0 03 40 0E EE 0E      DW   COMPI,QBRAN,HERE   
058E   20 06 00 00 C4 03 48 06 DW   DOLIT,0,COMMA,EXIT   
0596                             ;   AHEAD       ( -- A )
0596                             ;               Compile a forward branch instruction.
0596                          ;*Macro unroll: mCOLON  IMEDD+5,'AHEAD',AHEAD
0596                          ;*Macro unroll:  mCODE IMEDD+5, "AHEAD", AHEAD
0596                          ALIGN   2   
0596                AHEAD:       
0596                VVCODE:   .SET   $   
0596                VVLEN:    .SET   (IMEDD+5 & 01FH) / CELLL   
1B18                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1B18                VVNAME:   .SET   $   
1B18   96 05 66 1B            DW   vvCODE,vvLINK   
1B1C                VVLINK:   .SET   $   
1B1C   45 41 48 45 41 44      DB   IMEDD+5,"AHEAD"   
0596                          .ORG   vvCODE   
0596   00                     NOP      
0597   CD 12 06               CALL   doLIST   
059A   E0 03 4C 0E EE 0E 20 06 00 00 C4 03 48 06 DW   COMPI,BRAN,HERE,DOLIT,0,COMMA,EXIT   
05A8                             ;   REPEAT      ( A a -- )
05A8                             ;               Terminate a BEGIN-WHILE-REPEAT indefinite loop.
05A8                          ;*Macro unroll: mCOLON  IMEDD+6,'REPEAT',REPEA
05A8                          ;*Macro unroll:  mCODE IMEDD+6, "REPEAT", REPEA
05A8                          ALIGN   2   
05A8                REPEA:       
05A8                VVCODE:   .SET   $   
05A8                VVLEN:    .SET   (IMEDD+6 & 01FH) / CELLL   
1ACC                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1ACC                VVNAME:   .SET   $   
1ACC   A8 05 1C 1B            DW   vvCODE,vvLINK   
1AD0                VVLINK:   .SET   $   
1AD0   46 52 45 50 45 41 54   DB   IMEDD+6,"REPEAT"   
05A8                          .ORG   vvCODE   
05A8   00                     NOP      
05A9   CD 12 06               CALL   doLIST   
05AC   78 05 EE 0E 30 10 5C 0E 48 06 DW   AGAIN,HERE,SWAP,STORE,EXIT   
05B6                             ;   THEN        ( A -- )
05B6                             ;               Terminate a conditional branch structure.
05B6                          ;*Macro unroll: mCOLON  IMEDD+4,'THEN',THENN
05B6                          ;*Macro unroll:  mCODE IMEDD+4, "THEN", THENN
05B6                          ALIGN   2   
05B6                THENN:       
05B6                VVCODE:   .SET   $   
05B6                VVLEN:    .SET   (IMEDD+4 & 01FH) / CELLL   
1A82                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1A82                VVNAME:   .SET   $   
1A82   B6 05 D0 1A            DW   vvCODE,vvLINK   
1A86                VVLINK:   .SET   $   
1A86   44 54 48 45 4E         DB   IMEDD+4,"THEN"   
05B6                          .ORG   vvCODE   
05B6   00                     NOP      
05B7   CD 12 06               CALL   doLIST   
05BA   EE 0E 30 10 5C 0E 48 06 DW   HERE,SWAP,STORE,EXIT   
05C2                             ;   AFT         ( a -- a A )
05C2                             ;               Jump to THEN in a FOR-AFT-THEN-NEXT loop the 1st time through.
05C2                          ;*Macro unroll: mCOLON  IMEDD+3,'AFT',AFT
05C2                          ;*Macro unroll:  mCODE IMEDD+3, "AFT", AFT
05C2                          ALIGN   2   
05C2                AFT:         
05C2                VVCODE:   .SET   $   
05C2                VVLEN:    .SET   (IMEDD+3 & 01FH) / CELLL   
1A3A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1A3A                VVNAME:   .SET   $   
1A3A   C2 05 86 1A            DW   vvCODE,vvLINK   
1A3E                VVLINK:   .SET   $   
1A3E   43 41 46 54            DB   IMEDD+3,"AFT"   
05C2                          .ORG   vvCODE   
05C2   00                     NOP      
05C3   CD 12 06               CALL   doLIST   
05C6   2C 10 96 05 58 05 30 10 48 06 DW   DROP,AHEAD,BEGIN,SWAP,EXIT   
05D0                             ;   ELSE        ( A -- A )
05D0                             ;               Start the false clause in an IF-ELSE-THEN structure.
05D0                          ;*Macro unroll: mCOLON  IMEDD+4,'ELSE',ELSEE
05D0                          ;*Macro unroll:  mCODE IMEDD+4, "ELSE", ELSEE
05D0                          ALIGN   2   
05D0                ELSEE:       
05D0                VVCODE:   .SET   $   
05D0                VVLEN:    .SET   (IMEDD+4 & 01FH) / CELLL   
19F0                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
19F0                VVNAME:   .SET   $   
19F0   D0 05 3E 1A            DW   vvCODE,vvLINK   
19F4                VVLINK:   .SET   $   
19F4   44 45 4C 53 45         DB   IMEDD+4,"ELSE"   
05D0                          .ORG   vvCODE   
05D0   00                     NOP      
05D1   CD 12 06               CALL   doLIST   
05D4   96 05 30 10 B6 05 48 06 DW   AHEAD,SWAP,THENN,EXIT   
05DC                             ;   WHILE       ( a -- A a )
05DC                             ;               Conditional branch out of a BEGIN-WHILE-REPEAT loop.
05DC                          ;*Macro unroll: mCOLON  IMEDD+5,'WHILE',WHILE
05DC                          ;*Macro unroll:  mCODE IMEDD+5, "WHILE", WHILE
05DC                          ALIGN   2   
05DC                WHILE:       
05DC                VVCODE:   .SET   $   
05DC                VVLEN:    .SET   (IMEDD+5 & 01FH) / CELLL   
19A6                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
19A6                VVNAME:   .SET   $   
19A6   DC 05 F4 19            DW   vvCODE,vvLINK   
19AA                VVLINK:   .SET   $   
19AA   45 57 48 49 4C 45      DB   IMEDD+5,"WHILE"   
05DC                          .ORG   vvCODE   
05DC   00                     NOP      
05DD   CD 12 06               CALL   doLIST   
05E0   84 05 30 10 48 06      DW   IFF,SWAP,EXIT   
05E6                             ;   ABORT"      ( -- ; <string> )
05E6                             ;               Conditional abort with an error message.
05E6                          ;*Macro unroll: mCOLON  IMEDD+6,'ABORT|',ABRTQ
05E6                          ;*Macro unroll:  mCODE IMEDD+6, "ABORT|", ABRTQ
05E6                          ALIGN   2   
05E6                ABRTQ:       
05E6                VVCODE:   .SET   $   
05E6                VVLEN:    .SET   (IMEDD+6 & 01FH) / CELLL   
195A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
195A                VVNAME:   .SET   $   
195A   E6 05 AA 19            DW   vvCODE,vvLINK   
195E                VVLINK:   .SET   $   
195E   46 41 42 4F 52 54 7C   DB   IMEDD+6,"ABORT|"   
05E6                          .ORG   vvCODE   
05E6   00                     NOP      
05E7   CD 12 06               CALL   doLIST   
05EA   E0 03 C2 0A FE 03 48 06 DW   COMPI,ABORQ,STRCQ,EXIT   
05F2                             ;   $"          ( -- ; <string> )
05F2                             ;               Compile an inline string literal.
05F2                          ;*Macro unroll: mCOLON  IMEDD+2,'$|',STRQ
05F2                          ;*Macro unroll:  mCODE IMEDD+2, "$|", STRQ
05F2                          ALIGN   2   
05F2                STRQ:        
05F2                VVCODE:   .SET   $   
05F2                VVLEN:    .SET   (IMEDD+2 & 01FH) / CELLL   
1912                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1912                VVNAME:   .SET   $   
1912   F2 05 5E 19            DW   vvCODE,vvLINK   
1916                VVLINK:   .SET   $   
1916   42 24 7C               DB   IMEDD+2,"$|"   
05F2                          .ORG   vvCODE   
05F2   00                     NOP      
05F3   CD 12 06               CALL   doLIST   
05F6   E0 03 7C 0C FE 03 48 06 DW   COMPI,STRQP,STRCQ,EXIT   
05FE                             ;   ."          ( -- ; <string> )
05FE                             ;               Compile an inline string literal to be typed out at run time.
05FE                          ;*Macro unroll: mCOLON  IMEDD+2,'.|',DOTQ
05FE                          ;*Macro unroll:  mCODE IMEDD+2, ".|", DOTQ
05FE                          ALIGN   2   
05FE                DOTQ:        
05FE                VVCODE:   .SET   $   
05FE                VVLEN:    .SET   (IMEDD+2 & 01FH) / CELLL   
18CA                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
18CA                VVNAME:   .SET   $   
18CA   FE 05 16 19            DW   vvCODE,vvLINK   
18CE                VVLINK:   .SET   $   
18CE   42 2E 7C               DB   IMEDD+2,".|"   
05FE                          .ORG   vvCODE   
05FE   00                     NOP      
05FF   CD 12 06               CALL   doLIST   
0602   E0 03 84 0C FE 03 48 06 DW   COMPI,DOTQP,STRCQ,EXIT   
060A                             ; ;   UNLOOP	( -- ) ( R: loop-sys -- )	\ CORE
060A                             ; ;		Discard loop-control parameters for the current nesting level.
060A                             ; ;		An UNLOOP is required for each nesting level before the
060A                             ; ;		definition may be EXITed.
060A                             ; mCOLON	COMPO+6,"UNLOOP",UNLOOP
060A                             ; 	DW	RFrom,RFrom,RFrom,DDROP,ToR,EXIT
060A                             ;   doCONST	( -- x )
060A                             ;	Run-time routine of CONSTANT and VARIABLE.
060A                          ;*Macro unroll: hCODE	COMPO+7, 'doCONST', DoCONST
060A                          ALIGN   2   
060A                DOCONST:      
060A   E1                     POP   HL   ;10t
060B   C5                     PUSH   BC   ;11t
060C   4E                     LD   C,(HL)   ; 7t
060D   23                     INC   HL   ; 6t
060E   46                     LD   B,(HL)   ; 7t
060F                          ;*Macro unroll:  mNEXT
060F   EB                     EX   DE,HL   
0610                          ;*Macro unroll:  mNEXTHL                         ; 34t
0610   FD E9                  JP   (IY)   ; 34t
0612                             ;   doLIST	( -- ) ( R: -- nest-sys )
0612                             ;	Process colon list.
0612                          ;*Macro unroll: hCODE	COMPO+6, 'doLIST', DoLIST
0612                          ALIGN   2   
0612                DOLIST:      
0612   DD 2B                  DEC   IX   ;10t
0614   DD 72 00               LD   (IX+0),D   ;19t
0617   DD 2B                  DEC   IX   ;10t
0619   DD 73 00               LD   (IX+0),E   ;19t
061C   E1                     POP   HL   ;10t
061D                          ;*Macro unroll:  mNEXTHL							
061D   FD E9                  JP   (IY)   
061F                             ;   DOLIT	( -- x )
061F                             ;	Push an inline literal.
061F                          ;*Macro unroll: hCODE	COMPO+5, 'DOLIT', DOLIT
061F                          ALIGN   2   
0620                DOLIT:       
0620   C5                     PUSH   BC   ; 11t
0621   EB                     EX   DE,HL   ; 4t
0622   4E                     LD   C,(HL)   ; 7t
0623   23                     INC   HL   ; 6t
0624   46                     LD   B,(HL)   ; 7t
0625   23                     INC   HL   ; 6t
0626                          ;*Macro unroll:  mNEXTHL
0626   FD E9                  JP   (IY)   
0628                             ;   doVAR       ( -- a )
0628                             ;   Run time routine for VARIABLE and CREATE.
0628                          ;*Macro unroll: hCOLON  COMPO+5, 'doVAR', DoVAR
0628                          ;*Macro unroll:  hCODE COMPO+5, "doVAR", DoVAR
0628                          ALIGN   2   
0628                DOVAR:       
0628   00                     NOP      
0629   CD 12 06               CALL   doLIST   
062C   1A 10 48 06            DW   RFROM,EXIT   
0630                             ;   UP          ( -- a )
0630                             ;   Pointer to the user area.
0630                          ;*Macro unroll: hCOLON  2, 'UP', UP
0630                          ;*Macro unroll:  hCODE 2, "UP", UP
0630                          ALIGN   2   
0630                UP:          
0630   00                     NOP      
0631   CD 12 06               CALL   doLIST   
0634   28 06                  DW   DoVAR   
0636   00 24                  DW   UPP   
0638                             ;   doUSER      ( -- a )
0638                             ;   Run time routine for user variables.
0638                          ;*Macro unroll: hCOLON  COMPO+6,'doUSER',DOUSE
0638                          ;*Macro unroll:  hCODE COMPO+6, "doUSER", DOUSE
0638                          ALIGN   2   
0638                DOUSE:       
0638   00                     NOP      
0639   CD 12 06               CALL   doLIST   
063C   1A 10 66 0E 30 06 66 0E 8A 01 48 06 DW   RFROM,AT,UP,AT,PLUS,EXIT   
0648                             ;   EXIT	( -- ) ( R: nest-sys -- )	\ CORE
0648                             ;	Return control to the calling definition.
0648                          ;*Macro unroll: mCODE	COMPO+4, 'EXIT', EXIT
0648                          ALIGN   2   
0648                EXIT:        
0648                VVCODE:   .SET   $   
0648                VVLEN:    .SET   (COMPO+4 & 01FH) / CELLL   
18A0                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
18A0                VVNAME:   .SET   $   
18A0   48 06 CE 18            DW   vvCODE,vvLINK   
18A4                VVLINK:   .SET   $   
18A4   24 45 58 49 54         DB   COMPO+4,"EXIT"   
0648                          .ORG   vvCODE   
0648   DD 6E 00               LD   L,(IX+0)   
064B   DD 23                  INC   IX   
064D   DD 66 00               LD   H,(IX+0)   
0650   DD 23                  INC   IX   
0652                          ;*Macro unroll:  mNEXTHL
0652   FD E9                  JP   (IY)   
0654                             ;   doDO	( n1|u1 n2|u2 -- ) ( R: -- n1 n2-n1-max_negative )
0654                             ;		Run-time funtion of DO.
0654                             ; 
0654                             ;   : doDO	>R max-negative + R> OVER - SWAP R> SWAP >R SWAP >R >R ;
0654                          ;*Macro unroll: hCOLON	COMPO+4,'doDO',DoDO
0654                          ;*Macro unroll:  hCODE COMPO+4, "doDO", DoDO
0654                          ALIGN   2   
0654                DODO:        
0654   00                     NOP      
0655   CD 12 06               CALL   doLIST   
0658   0C 10 20 06 00 80 8A 01 1A 10 DW   ToR,DOLIT,MaxNegative,Plus,RFrom   
0662   38 10 C4 01 30 10 1A 10 30 10 0C 10 30 10 0C 10 0C 10 48 06 DW   OVER,SUBB,SWAP,RFrom,SWAP,ToR,SWAP,ToR,ToR,EXIT   
0676                             ; ;   doLOOP	( -- ) ( R: loop-sys1 -- | loop-sys2 )
0676                             ; ;		Run time routine for LOOP.
0676                             ; hCODE	COMPO+6,"doLOOP",DoLOOP
0676                             ; 	PUSH IX	        ; 15t
0676                             ; 	POP	HL	        ; 10t
0676                             ; 	INC	(HL)	    ; 11t
0676                             ; 	JR Z,DOLOOP2	; 12/7t a fast dec is ok, only
0676                             ; DOLOOP1: 	
0676                             ;     LD	A,(DE)	    ; 7t go back to the loop
0676                             ; 	LD	L,A	        ; 4t
0676                             ; 	INC	DE	        ; 6t
0676                             ; 	LD	A,(DE)	    ; 7t
0676                             ; 	LD	H,A	        ; 4t
0676                             ; 	mNEXTHL
0676                             ; DOLOOP2: 	
0676                             ;     INC	HL	        ; 6t
0676                             ; 	INC	(HL)	    ;11t
0676                             ; 	JP PO,DOLOOP1   ;10/7t ?loop end
0676                             ; 	EX	DE,HL	    ; 4t yes,continue past the BRAN offset
0676                             ; 	LD	DE,4	    ;10t clear return stack
0676                             ; 	ADD IX,DE	    ;15h
0676                             ; 	INC	HL	        ; 6t
0676                             ; 	INC	HL	        ; 6t
0676                             ; 	mNEXTHL
0676                             ; ;   do+LOOP	( n -- ) ( R: loop-sys1 -- | loop-sys2 )
0676                             ; ;		Run time routine for +LOOP.
0676                             ; hCODE	COMPO+7,"do+LOOP",DoPLOOP
0676                             ; 	POP	HL	        ;10t this will be the new TOS
0676                             ; 	PUSH	BC	    ;11t
0676                             ; 	LD	B,H	        ; 4t
0676                             ; 	LD	C,L	        ; 4t
0676                             ; 	EXX		        ; 4t
0676                             ; 	POP	BC	        ;10t old TOS = loop increment
0676                             ; 	LD L,(IX+0)     ;19t
0676                             ; 	LD H,(IX+1)     ;19t
0676                             ; 	OR	A	        ; 4t clear carry
0676                             ; 	ADC HL,BC	    ;15t
0676                             ; 	JP PE,DOPLP1	;10/7t ?loop end
0676                             ; 	LD (IX+0),L     ;19t   no, go back
0676                             ; 	LD (IX+1),H     ;19t
0676                             ; 	EXX		        ; 4t
0676                             ; 	LD	A,(DE)	    ; 7t go back to the loop
0676                             ; 	LD	L,A	        ; 4t
0676                             ; 	INC	DE	        ; 6t
0676                             ; 	LD	A,(DE)	    ; 7t
0676                             ; 	LD	H,A	        ; 4t
0676                             ; 	mNEXTHL
0676                             ; DOPLP1:		
0676                             ;     LD	BC,4	    ;10t clear return stack
0676                             ; 	ADD IX,BC	    ;15h
0676                             ; 	EXX		        ; 4t
0676                             ; 	INC	DE	        ; 6t yes,continue past the BRAN offset
0676                             ; 	INC	DE	        ; 6t
0676                             ; 	mNEXT
0676                             ;   next        ( -- )
0676                             ;               Run time code for the single index loop.
0676                             ;               : next ( -- ) \ hilevel model
0676                             ;                 r> r> dup if 1 - >r @ >r exit then drop cell+ >r ;
0676                          ;*Macro unroll: mCODE   COMPO+4,'next',DONXT
0676                          ALIGN   2   
0676                DONXT:       
0676                VVCODE:   .SET   $   
0676                VVLEN:    .SET   (COMPO+4 & 01FH) / CELLL   
1876                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1876                VVNAME:   .SET   $   
1876   76 06 A4 18            DW   vvCODE,vvLINK   
187A                VVLINK:   .SET   $   
187A   24 6E 65 78 74         DB   COMPO+4,"next"   
0676                          .ORG   vvCODE   
0676   DD E5                  PUSH   IX   
0678   E1                     POP   HL   ; load rp into HL
0679   7E                     LD   A,(HL)   ; a = low byte of r@
067A   B7                     OR   A   
067B   20 10                  JR   NZ,DECLOW   ; low > 0 goto dec low
067D   23                     INC   HL   
067E   7E                     LD   A,(HL)   ; a = high byte of r@
067F   B7                     OR   A   
0680   20 09                  JR   NZ,DECHILO   ; high > 0 goto dec hi dec lo
0682   23                     INC   HL   
0683   E5                     PUSH   HL   
0684   DD E1                  POP   IX   ; pop r@
0686   13                     INC   DE   ; IP = skip following word
0687   13                     INC   DE   
0688                          ;*Macro unroll:  mNEXT                               ; continue
0688   EB                     EX   DE,HL   ; continue
0689                          ;*Macro unroll:  mNEXTHL                         ; 34t
0689   FD E9                  JP   (IY)   ; 34t
068B                DECHILO:      
068B   35                     DEC   (HL)   ; dec high byte of r@
068C   2B                     DEC   HL   
068D                DECLOW:      
068D   35                     DEC   (HL)   ; dec low byte of r@
068E   6B                     LD   L,E   ; DE points to location of loop address
068F   62                     LD   H,D   
0690   5E                     LD   E,(HL)   ; DE points to loop address
0691   23                     INC   HL   
0692   56                     LD   D,(HL)   
0693                          ;*Macro unroll:  mNEXT                               ; continue to loop address
0693   EB                     EX   DE,HL   ; continue to loop address
0694                          ;*Macro unroll:  mNEXTHL                         ; 34t
0694   FD E9                  JP   (IY)   ; 34t
0696                             ;   DIGIT       ( u -- c )
0696                             ;               Convert digit u to a character.
0696                          ;*Macro unroll: hCOLON  5,'DIGIT',DIGIT
0696                          ;*Macro unroll:  hCODE 5, "DIGIT", DIGIT
0696                          ALIGN   2   
0696                DIGIT:       
0696   00                     NOP      
0697   CD 12 06               CALL   doLIST   
069A   20 06 09 00 38 10 10 02 DW   DOLIT,9,OVER,LESS   
06A2   20 06 07 00 6C 01 8A 01 DW   DOLIT,7,ANDD,PLUS   
06AA   20 06 8A 01 48 06      DW   DOLIT,"0",PLUS,EXIT   
06B0                             ;   EXTRACT     ( n base -- n c )
06B0                             ;               Extract the least significant digit from n.
06B0                          ;*Macro unroll: hCOLON  7,'EXTRACT',EXTRC
06B0                          ;*Macro unroll:  hCODE 7, "EXTRACT", EXTRC
06B0                          ALIGN   2   
06B0                EXTRC:       
06B0   00                     NOP      
06B1   CD 12 06               CALL   doLIST   
06B4   20 06 00 00 30 10 6E 02 DW   DOLIT,0,SWAP,UMMOD   
06BC   30 10 96 06 48 06      DW   SWAP,DIGIT,EXIT   
06C2                             ;   <#          ( -- )
06C2                             ;               Initiate the numeric output process.
06C2                          ;*Macro unroll: mCOLON  2,'<#',BDIGS
06C2                          ;*Macro unroll:  mCODE 2, "<#", BDIGS
06C2                          ALIGN   2   
06C2                BDIGS:       
06C2                VVCODE:   .SET   $   
06C2                VVLEN:    .SET   (2 & 01FH) / CELLL   
186E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
186E                VVNAME:   .SET   $   
186E   C2 06 7A 18            DW   vvCODE,vvLINK   
1872                VVLINK:   .SET   $   
1872   02 3C 23               DB   2,"<#"   
06C2                          .ORG   vvCODE   
06C2   00                     NOP      
06C3   CD 12 06               CALL   doLIST   
06C6   F8 0E 28 11 5C 0E 48 06 DW   PAD,HLD,STORE,EXIT   
06CE                             ;   HOLD        ( c -- )
06CE                             ;               Insert a character into the numeric output string.
06CE                          ;*Macro unroll: mCOLON  4,'HOLD',HOLD
06CE                          ;*Macro unroll:  mCODE 4, "HOLD", HOLD
06CE                          ALIGN   2   
06CE                HOLD:        
06CE                VVCODE:   .SET   $   
06CE                VVLEN:    .SET   (4 & 01FH) / CELLL   
1864                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1864                VVNAME:   .SET   $   
1864   CE 06 72 18            DW   vvCODE,vvLINK   
1868                VVLINK:   .SET   $   
1868   04 48 4F 4C 44         DB   4,"HOLD"   
06CE                          .ORG   vvCODE   
06CE   00                     NOP      
06CF   CD 12 06               CALL   doLIST   
06D2   28 11 66 0E 20 06 01 00 C4 01 DW   HLD,AT,DOLIT,1,SUBB   
06DC   28 10 28 11 5C 0E 6E 0E 48 06 DW   DUPP,HLD,STORE,CSTOR,EXIT   
06E6                             ;   #           ( u -- u )
06E6                             ;               Extract one digit from u and append the digit to output string.
06E6                          ;*Macro unroll: mCOLON  1,'#',DIG
06E6                          ;*Macro unroll:  mCODE 1, "#", DIG
06E6                          ALIGN   2   
06E6                DIG:         
06E6                VVCODE:   .SET   $   
06E6                VVLEN:    .SET   (1 & 01FH) / CELLL   
185E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
185E                VVNAME:   .SET   $   
185E   E6 06 68 18            DW   vvCODE,vvLINK   
1862                VVLINK:   .SET   $   
1862   01 23                  DB   1,"#"   
06E6                          .ORG   vvCODE   
06E6   00                     NOP      
06E7   CD 12 06               CALL   doLIST   
06EA   E8 10 66 0E B0 06 CE 06 48 06 DW   BASE,AT,EXTRC,HOLD,EXIT   
06F4                             ;   #S          ( u -- 0 )
06F4                             ;               Convert u until all digits are added to the output string.
06F4                          ;*Macro unroll: mCOLON  2,'#S',DIGS
06F4                          ;*Macro unroll:  mCODE 2, "#S", DIGS
06F4                          ALIGN   2   
06F4                DIGS:        
06F4                VVCODE:   .SET   $   
06F4                VVLEN:    .SET   (2 & 01FH) / CELLL   
1856                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1856                VVNAME:   .SET   $   
1856   F4 06 62 18            DW   vvCODE,vvLINK   
185A                VVLINK:   .SET   $   
185A   02 23 53               DB   2,"#S"   
06F4                          .ORG   vvCODE   
06F4   00                     NOP      
06F5   CD 12 06               CALL   doLIST   
06F8                DIGS1:       
06F8   E6 06 28 10            DW   DIG,DUPP   
06FC   40 0E 04 07            DW   QBRAN,DIGS2   
0700   4C 0E F8 06            DW   BRAN,DIGS1   
0704                DIGS2:       
0704   48 06                  DW   EXIT   
0706                             ;   SIGN        ( n -- )
0706                             ;               Add a minus sign to the numeric output string.
0706                          ;*Macro unroll: mCOLON	4,'SIGN',SIGN
0706                          ;*Macro unroll:  mCODE 4, "SIGN", SIGN
0706                          ALIGN   2   
0706                SIGN:        
0706                VVCODE:   .SET   $   
0706                VVLEN:    .SET   (4 & 01FH) / CELLL   
184C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
184C                VVNAME:   .SET   $   
184C   06 07 5A 18            DW   vvCODE,vvLINK   
1850                VVLINK:   .SET   $   
1850   04 53 49 47 4E         DB   4,"SIGN"   
0706                          .ORG   vvCODE   
0706   00                     NOP      
0707   CD 12 06               CALL   doLIST   
070A   64 01 40 0E 16 07      DW   ZLESS,QBRAN,SIGN1   
0710   20 06 2D 00 CE 06      DW   DoLIT,MINUSS,HOLD   
0716                SIGN1:       
0716   48 06                  DW   EXIT   
0718                             ;   #>          ( w -- b u )
0718                             ;               Prepare the output string to be TYPE'd.
0718                          ;*Macro unroll: mCOLON  2,'#>',EDIGS
0718                          ;*Macro unroll:  mCODE 2, "#>", EDIGS
0718                          ALIGN   2   
0718                EDIGS:       
0718                VVCODE:   .SET   $   
0718                VVLEN:    .SET   (2 & 01FH) / CELLL   
1844                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1844                VVNAME:   .SET   $   
1844   18 07 50 18            DW   vvCODE,vvLINK   
1848                VVLINK:   .SET   $   
1848   02 23 3E               DB   2,"#>"   
0718                          .ORG   vvCODE   
0718   00                     NOP      
0719   CD 12 06               CALL   doLIST   
071C   2C 10 28 11 66 0E      DW   DROP,HLD,AT   
0722   F8 0E 38 10 C4 01 48 06 DW   PAD,OVER,SUBB,EXIT   
072A                             ;   str         ( n -- b u )
072A                             ;               Convert a signed integer to a numeric string.
072A                          ;*Macro unroll: hCOLON  3,'str',STR
072A                          ;*Macro unroll:  hCODE 3, "str", STR
072A                          ALIGN   2   
072A                STR:         
072A   00                     NOP      
072B   CD 12 06               CALL   doLIST   
072E   28 10 0C 10 CE 01      DW   DUPP,TOR,ABSS   
0734   C2 06 F4 06 1A 10      DW   BDIGS,DIGS,RFROM   
073A   06 07 18 07 48 06      DW   SIGN,EDIGS,EXIT   
0740                             ;   HEX         ( -- )
0740                             ;               Use radix 16 as base for numeric conversions.
0740                          ;*Macro unroll: mCOLON  3,'HEX',HEX
0740                          ;*Macro unroll:  mCODE 3, "HEX", HEX
0740                          ALIGN   2   
0740                HEX:         
0740                VVCODE:   .SET   $   
0740                VVLEN:    .SET   (3 & 01FH) / CELLL   
183C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
183C                VVNAME:   .SET   $   
183C   40 07 48 18            DW   vvCODE,vvLINK   
1840                VVLINK:   .SET   $   
1840   03 48 45 58            DB   3,"HEX"   
0740                          .ORG   vvCODE   
0740   00                     NOP      
0741   CD 12 06               CALL   doLIST   
0744   20 06 10 00 E8 10 5C 0E 48 06 DW   DOLIT,16,BASE,STORE,EXIT   
074E                             ;   DECIMAL     ( -- )
074E                             ;               Use radix 10 as base for numeric conversions.
074E                          ;*Macro unroll: mCOLON  7,'DECIMAL',DECIMAL
074E                          ;*Macro unroll:  mCODE 7, "DECIMAL", DECIMAL
074E                          ALIGN   2   
074E                DECIMAL:      
074E                VVCODE:   .SET   $   
074E                VVLEN:    .SET   (7 & 01FH) / CELLL   
1830                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1830                VVNAME:   .SET   $   
1830   4E 07 40 18            DW   vvCODE,vvLINK   
1834                VVLINK:   .SET   $   
1834   07 44 45 43 49 4D 41 4C DB   7,"DECIMAL"   
074E                          .ORG   vvCODE   
074E   00                     NOP      
074F   CD 12 06               CALL   doLIST   
0752   20 06 10 00 E8 10 5C 0E 48 06 DW   DOLIT,16,BASE,STORE,EXIT   
075C                             ;   BL          ( -- 32 )
075C                             ;               Return 32, the blank character.
075C                          ;*Macro unroll: mCOLON	2,'BL',BLANK
075C                          ;*Macro unroll:  mCODE 2, "BL", BLANK
075C                          ALIGN   2   
075C                BLANK:       
075C                VVCODE:   .SET   $   
075C                VVLEN:    .SET   (2 & 01FH) / CELLL   
1828                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1828                VVNAME:   .SET   $   
1828   5C 07 34 18            DW   vvCODE,vvLINK   
182C                VVLINK:   .SET   $   
182C   02 42 4C               DB   2,"BL"   
075C                          .ORG   vvCODE   
075C   00                     NOP      
075D   CD 12 06               CALL   doLIST   
0760   20 06 20 00 48 06      DW   DoLIT,SPACEE,EXIT   
0766                             ;   >CHAR       ( c -- c )
0766                             ;               Filter non-printing characters.
0766                          ;*Macro unroll: hCOLON  5,'>CHAR',TCHAR
0766                          ;*Macro unroll:  hCODE 5, ">CHAR", TCHAR
0766                          ALIGN   2   
0766                TCHAR:       
0766   00                     NOP      
0767   CD 12 06               CALL   doLIST   
076A   20 06 7F 00 6C 01 28 10 DW   DoLIT,$7F,ANDD,DUPP   ;mask msb
0772   20 06 7F 00            DW   DoLIT,127   
0776   20 06 20 00 50 02      DW   DoLIT,SPACEE,WITHI   ;check for printable
077C   40 0E 86 07            DW   QBRAN,TCHA1   
0780   2C 10 20 06 5F 00      DW   DROP,DoLIT,UNDERSC   ;replace non-printables
0786                TCHA1:       
0786   48 06                  DW   EXIT   
0788                             ;   DIGIT?      ( c base -- u t )
0788                             ;               Convert a character to its numeric value. A flag indicates success.
0788                          ;*Macro unroll: hCOLON  6,'DIGIT?',DIGTQ
0788                          ;*Macro unroll:  hCODE 6, "DIGIT?", DIGTQ
0788                          ALIGN   2   
0788                DIGTQ:       
0788   00                     NOP      
0789   CD 12 06               CALL   doLIST   
078C   0C 10 20 06 C4 01      DW   TOR,DOLIT,"0",SUBB   
0792   20 06 09 00 38 10 10 02 DW   DOLIT,9,OVER,LESS   
079A   40 0E AE 07            DW   QBRAN,DGTQ1   
079E   20 06 07 00 C4 01      DW   DOLIT,7,SUBB   
07A4   28 10 20 06 0A 00 10 02 76 01 DW   DUPP,DOLIT,10,LESS,ORR   
07AE                DGTQ1:       
07AE   28 10 1A 10 F4 01 48 06 DW   DUPP,RFROM,ULESS,EXIT   
07B6                             ;   NUMBER?     ( a -- n T | a F )
07B6                             ;               Convert a number string to integer. Push a flag on tos.
07B6                          ;*Macro unroll: hCOLON  7,'NUMBER?',NUMBQ
07B6                          ;*Macro unroll:  hCODE 7, "NUMBER?", NUMBQ
07B6                          ALIGN   2   
07B6                NUMBQ:       
07B6   00                     NOP      
07B7   CD 12 06               CALL   doLIST   
07BA   E8 10 66 0E 0C 10 20 06 00 00 38 10 DC 0E DW   BASE,AT,TOR,DOLIT,0,OVER,COUNT   
07C8   38 10 76 0E 20 06 DE 01 DW   OVER,CAT,DOLIT,"$",EQUAL   
07D0   40 0E E6 07            DW   QBRAN,NUMQ1   
07D4   40 07 30 10 20 06 01 00 8A 01 DW   HEX,SWAP,DOLIT,1,PLUS   
07DE   30 10 20 06 01 00 C4 01 DW   SWAP,DOLIT,1,SUBB   
07E6                NUMQ1:       
07E6   38 10 76 0E 20 06 DE 01 0C 10 DW   OVER,CAT,DOLIT,"-",EQUAL,TOR   
07F0   30 10 7E 0E C4 01 30 10 7E 0E 8A 01 40 10 DW   SWAP,RAT,SUBB,SWAP,RAT,PLUS,QDUP   
07FE   40 0E 50 08            DW   QBRAN,NUMQ6   
0802   20 06 01 00 C4 01 0C 10 DW   DOLIT,1,SUBB,TOR   
080A                NUMQ2:       
080A   28 10 0C 10 76 0E E8 10 66 0E 88 07 DW   DUPP,TOR,CAT,BASE,AT,DIGTQ   
0816   40 0E 42 08            DW   QBRAN,NUMQ4   
081A   30 10 E8 10 66 0E 44 03 8A 01 1A 10 DW   SWAP,BASE,AT,STAR,PLUS,RFROM   
0826   20 06 01 00 8A 01      DW   DOLIT,1,PLUS   
082C   76 06 0A 08            DW   DONXT,NUMQ2   
0830   7E 0E 30 10 2C 10      DW   RAT,SWAP,DROP   
0836   40 0E 3C 08            DW   QBRAN,NUMQ3   
083A   A0 01                  DW   NEGAT   
083C                NUMQ3:       
083C   30 10                  DW   SWAP   
083E   4C 0E 4E 08            DW   BRAN,NUMQ5   
0842                NUMQ4:       
0842   1A 10 1A 10 5C 10 5C 10 20 06 00 00 DW   RFROM,RFROM,DDROP,DDROP,DOLIT,0   
084E                NUMQ5:       
084E   28 10                  DW   DUPP   
0850                NUMQ6:       
0850   1A 10 5C 10            DW   RFROM,DDROP   
0854   1A 10 E8 10 5C 0E 48 06 DW   RFROM,BASE,STORE,EXIT   
085C                             ;   parse       ( b u c -- b u delta ; <string> )
085C                             ;               Scan string delimited by c. Return found string and its offset.
085C                          ;*Macro unroll: hCOLON  5,'parse',PARS
085C                          ;*Macro unroll:  hCODE 5, "parse", PARS
085C                          ALIGN   2   
085C                PARS:        
085C   00                     NOP      
085D   CD 12 06               CALL   doLIST   
0860   F0 10 5C 0E 38 10 0C 10 28 10 DW   TEMP,STORE,OVER,TOR,DUPP   
086A   40 0E F8 08            DW   QBRAN,PARS8   
086E   20 06 01 00 C4 01 F0 10 66 0E 5C 07 DE 01 DW   DOLIT,1,SUBB,TEMP,AT,BLANK,EQUAL   
087C   40 0E AA 08            DW   QBRAN,PARS3   
0880   0C 10                  DW   TOR   
0882                PARS1:       
0882   5C 07 38 10 76 0E      DW   BLANK,OVER,CAT   ;skip leading blanks ONLY
0888   C4 01 64 01 94 01      DW   SUBB,ZLESS,INVER   
088E   40 0E A8 08            DW   QBRAN,PARS2   
0892   20 06 01 00 8A 01      DW   DOLIT,1,PLUS   
0898   76 06 82 08            DW   DONXT,PARS1   
089C   1A 10 2C 10 20 06 00 00 28 10 48 06 DW   RFROM,DROP,DOLIT,0,DUPP,EXIT   
08A8                PARS2:       
08A8   1A 10                  DW   RFROM   
08AA                PARS3:       
08AA   38 10 30 10            DW   OVER,SWAP   
08AE   0C 10                  DW   TOR   
08B0                PARS4:       
08B0   F0 10 66 0E 38 10 76 0E C4 01 DW   TEMP,AT,OVER,CAT,SUBB   ;scan for delimiter
08BA   F0 10 66 0E 5C 07 DE 01 DW   TEMP,AT,BLANK,EQUAL   
08C2   40 0E C8 08            DW   QBRAN,PARS5   
08C6   64 01                  DW   ZLESS   
08C8                PARS5:       
08C8   40 0E DE 08            DW   QBRAN,PARS6   
08CC   20 06 01 00 8A 01      DW   DOLIT,1,PLUS   
08D2   76 06 B0 08            DW   DONXT,PARS4   
08D6   28 10 0C 10            DW   DUPP,TOR   
08DA   4C 0E EC 08            DW   BRAN,PARS7   
08DE                PARS6:       
08DE   1A 10 2C 10 28 10      DW   RFROM,DROP,DUPP   
08E4   20 06 01 00 8A 01 0C 10 DW   DOLIT,1,PLUS,TOR   
08EC                PARS7:       
08EC   38 10 C4 01            DW   OVER,SUBB   
08F0   1A 10 1A 10 C4 01 48 06 DW   RFROM,RFROM,SUBB,EXIT   
08F8                PARS8:       
08F8   38 10 1A 10 C4 01 48 06 DW   OVER,RFROM,SUBB,EXIT   
0900                             ;   PARSE       ( c -- b u ; <string> )
0900                             ;               Scan input stream and return counted string delimited by c.
0900                          ;*Macro unroll: mCOLON  5,'PARSE',PARSE
0900                          ;*Macro unroll:  mCODE 5, "PARSE", PARSE
0900                          ALIGN   2   
0900                PARSE:       
0900                VVCODE:   .SET   $   
0900                VVLEN:    .SET   (5 & 01FH) / CELLL   
181E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
181E                VVNAME:   .SET   $   
181E   00 09 2C 18            DW   vvCODE,vvLINK   
1822                VVLINK:   .SET   $   
1822   05 50 41 52 53 45      DB   5,"PARSE"   
0900                          .ORG   vvCODE   
0900   00                     NOP      
0901   CD 12 06               CALL   doLIST   
0904   0C 10 06 0F 00 11 66 0E 8A 01 DW   TOR,TIB,INN,AT,PLUS   ;current input buffer pointer
090E   08 11 66 0E 00 11 66 0E C4 01 DW   NTIB,AT,INN,AT,SUBB   ;remaining count
0918   1A 10 5C 08 00 11 AA 0E 48 06 DW   RFROM,PARS,INN,PSTOR,EXIT   
0922                             ;   (           ( -- )
0922                             ;               Ignore following string up to next ) . A comment.
0922                          ;*Macro unroll: mCOLON  IMEDD+1,'(',PAREN
0922                          ;*Macro unroll:  mCODE IMEDD+1, "(", PAREN
0922                          ALIGN   2   
0922                PAREN:       
0922                VVCODE:   .SET   $   
0922                VVLEN:    .SET   (IMEDD+1 & 01FH) / CELLL   
17D8                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
17D8                VVNAME:   .SET   $   
17D8   22 09 22 18            DW   vvCODE,vvLINK   
17DC                VVLINK:   .SET   $   
17DC   41 28                  DB   IMEDD+1,"("   
0922                          .ORG   vvCODE   
0922   00                     NOP      
0923   CD 12 06               CALL   doLIST   
0926   20 06 00 09 5C 10 48 06 DW   DOLIT,")",PARSE,DDROP,EXIT   
092E                             ;   \           ( -- )
092E                             ;               Ignore following text till the end of line.
092E                          ;*Macro unroll: mCOLON  IMEDD+1,'||',BKSLA
092E                          ;*Macro unroll:  mCODE IMEDD+1, "||", BKSLA
092E                          ALIGN   2   
092E                BKSLA:       
092E                VVCODE:   .SET   $   
092E                VVLEN:    .SET   (IMEDD+1 & 01FH) / CELLL   
1792                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1792                VVNAME:   .SET   $   
1792   2E 09 DC 17            DW   vvCODE,vvLINK   
1796                VVLINK:   .SET   $   
1796   41 7C 7C               DB   IMEDD+1,"||"   
092E                          .ORG   vvCODE   
092E   00                     NOP      
092F   CD 12 06               CALL   doLIST   
0932   08 11 66 0E 00 11 5C 0E 48 06 DW   NTIB,AT,INN,STORE,EXIT   
093C                             ;   CHAR        ( -- c )
093C                             ;               Parse next word and return its first character.
093C                          ;*Macro unroll: mCOLON  4,'CHAR',CHAR
093C                          ;*Macro unroll:  mCODE 4, "CHAR", CHAR
093C                          ALIGN   2   
093C                CHAR:        
093C                VVCODE:   .SET   $   
093C                VVLEN:    .SET   (4 & 01FH) / CELLL   
1788                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1788                VVNAME:   .SET   $   
1788   3C 09 96 17            DW   vvCODE,vvLINK   
178C                VVLINK:   .SET   $   
178C   04 43 48 41 52         DB   4,"CHAR"   
093C                          .ORG   vvCODE   
093C   00                     NOP      
093D   CD 12 06               CALL   doLIST   
0940   5C 07 00 09 2C 10 76 0E 48 06 DW   BLANK,PARSE,DROP,CAT,EXIT   
094A                             ;   TOKEN       ( -- a ; <string> )
094A                             ;               Parse a word from input stream and copy it to name dictionary.
094A                          ;*Macro unroll: hCOLON  5,'TOKEN',TOKEN
094A                          ;*Macro unroll:  hCODE 5, "TOKEN", TOKEN
094A                          ALIGN   2   
094A                TOKEN:       
094A   00                     NOP      
094B   CD 12 06               CALL   doLIST   
094E   5C 07 00 09 20 06 1F 00 3C 02 DW   BLANK,PARSE,DOLIT,31,MIN   
0958   50 11 66 0E 38 10 C4 01 92 03 DW   NP,AT,OVER,SUBB,CELLM   
0962   9A 0F 48 06            DW   PACKS,EXIT   
0966                             ;   WORD        ( c -- a ; <string> )
0966                             ;               Parse a word from input stream and copy it to code dictionary.
0966                          ;*Macro unroll: mCOLON  4,'WORD',WORDD
0966                          ;*Macro unroll:  mCODE 4, "WORD", WORDD
0966                          ALIGN   2   
0966                WORDD:       
0966                VVCODE:   .SET   $   
0966                VVLEN:    .SET   (4 & 01FH) / CELLL   
177E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
177E                VVNAME:   .SET   $   
177E   66 09 8C 17            DW   vvCODE,vvLINK   
1782                VVLINK:   .SET   $   
1782   04 57 4F 52 44         DB   4,"WORD"   
0966                          .ORG   vvCODE   
0966   00                     NOP      
0967   CD 12 06               CALL   doLIST   
096A   00 09 EE 0E 9A 0F 48 06 DW   PARSE,HERE,PACKS,EXIT   
0972                             ;   NAME>       ( na -- ca )
0972                             ;               Return a code address given a name address.
0972                          ;*Macro unroll: hCOLON  5,'NAME>',NAMET
0972                          ;*Macro unroll:  hCODE 5, "NAME>", NAMET
0972                          ALIGN   2   
0972                NAMET:       
0972   00                     NOP      
0973   CD 12 06               CALL   doLIST   
0976   92 03 92 03 66 0E 48 06 DW   CELLM,CELLM,AT,EXIT   
097E                             ;   SAME?       ( a a u -- a a f \ -0+ )
097E                             ;               Compare u cells in two strings. Return 0 if identical.
097E                          ;*Macro unroll: hCOLON  5,'SAME?',SAMEQ
097E                          ;*Macro unroll:  hCODE 5, "SAME?", SAMEQ
097E                          ALIGN   2   
097E                SAMEQ:       
097E   00                     NOP      
097F   CD 12 06               CALL   doLIST   
0982   0C 10                  DW   TOR   
0984   4C 0E AA 09            DW   BRAN,SAME2   
0988   38 10 7E 0E 9E 03 8A 01 66 0E SAME1:   DW   OVER,RAT,CELLS,PLUS,AT   
0992   38 10 7E 0E 9E 03 8A 01 66 0E DW   OVER,RAT,CELLS,PLUS,AT   
099C   C4 01 40 10            DW   SUBB,QDUP   
09A0   40 0E AA 09            DW   QBRAN,SAME2   
09A4   1A 10 2C 10 48 06      DW   RFROM,DROP,EXIT   ;strings not equal
09AA   76 06 88 09  SAME2:    DW   DONXT,SAME1   
09AE   20 06 00 00 48 06      DW   DOLIT,0,EXIT   ;strings equal
09B4                             ;   find        ( a va -- ca na | a F )
09B4                             ;               Search a vocabulary for a string. Return ca and na if succeeded.
09B4                          ;*Macro unroll: mCOLON  4,'find',FIND
09B4                          ;*Macro unroll:  mCODE 4, "find", FIND
09B4                          ALIGN   2   
09B4                FIND:        
09B4                VVCODE:   .SET   $   
09B4                VVLEN:    .SET   (4 & 01FH) / CELLL   
1774                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1774                VVNAME:   .SET   $   
1774   B4 09 82 17            DW   vvCODE,vvLINK   
1778                VVLINK:   .SET   $   
1778   04 66 69 6E 64         DB   4,"find"   
09B4                          .ORG   vvCODE   
09B4   00                     NOP      
09B5   CD 12 06               CALL   doLIST   
09B8   30 10 28 10 76 0E      DW   SWAP,DUPP,CAT   
09BE   20 06 02 00 1C 03 F0 10 5C 0E DW   DOLIT,CELLL,SLASH,TEMP,STORE   
09C8   28 10 66 0E 0C 10 86 03 30 10 DW   DUPP,AT,TOR,CELLP,SWAP   
09D2   66 0E 28 10  FIND1:    DW   AT,DUPP   
09D6   40 0E 02 0A            DW   QBRAN,FIND6   
09DA   28 10 66 0E 20 06 1F 00 6C 01 7E 0E 80 01 DW   DUPP,AT,DOLIT,MASKK,ANDD,RAT,XORR   
09E8   40 0E F6 09            DW   QBRAN,FIND2   
09EC   86 03 20 06 FF FF      DW   CELLP,DOLIT,-1   ;true flag
09F2   4C 0E FE 09            DW   BRAN,FIND3   
09F6   86 03 F0 10 66 0E 7E 09 FIND2:   DW   CELLP,TEMP,AT,SAMEQ   
09FE   4C 0E 0E 0A  FIND3:    DW   BRAN,FIND4   
0A02   1A 10 2C 10  FIND6:    DW   RFROM,DROP   
0A06   30 10 92 03 30 10 48 06 DW   SWAP,CELLM,SWAP,EXIT   
0A0E   40 0E 1A 0A  FIND4:    DW   QBRAN,FIND5   
0A12   92 03 92 03            DW   CELLM,CELLM   
0A16   4C 0E D2 09            DW   BRAN,FIND1   
0A1A   1A 10 2C 10 30 10 2C 10 FIND5:   DW   RFROM,DROP,SWAP,DROP   
0A22   92 03                  DW   CELLM   
0A24   28 10 72 09 30 10 48 06 DW   DUPP,NAMET,SWAP,EXIT   
0A2C                             ;   NAME?       ( a -- ca na | a F )
0A2C                             ;               Search all context vocabularies for a string.
0A2C                          ;*Macro unroll: hCOLON  5,'NAME?',NAMEQ
0A2C                          ;*Macro unroll:  hCODE 5, "NAME?", NAMEQ
0A2C                          ALIGN   2   
0A2C                NAMEQ:       
0A2C   00                     NOP      
0A2D   CD 12 06               CALL   doLIST   
0A30   38 11 28 10 CC 0E 80 01 DW   CNTXT,DUPP,DAT,XORR   ;?context=also
0A38   40 0E 3E 0A            DW   QBRAN,NAMQ1   
0A3C   92 03                  DW   CELLM   ;no, start with context
0A3E   0C 10        NAMQ1:    DW   TOR   
0A40   1A 10 86 03 28 10 0C 10 NAMQ2:   DW   RFROM,CELLP,DUPP,TOR   ;next in search order
0A48   66 0E 40 10            DW   AT,QDUP   
0A4C   40 0E 5E 0A            DW   QBRAN,NAMQ3   
0A50   B4 09 40 10            DW   FIND,QDUP   ;search vocabulary
0A54   40 0E 40 0A            DW   QBRAN,NAMQ2   
0A58   1A 10 2C 10 48 06      DW   RFROM,DROP,EXIT   ;found name
0A5E   1A 10 2C 10  NAMQ3:    DW   RFROM,DROP   ;name not found
0A62   20 06 00 00 48 06      DW   DOLIT,0,EXIT   ;false flag
0A68                             ;   CATCH       ( ca -- 0 | err# )
0A68                             ;               Execute word at ca and set up an error frame for it.
0A68                          ;*Macro unroll: mCOLON  5,'CATCH',CATCH
0A68                          ;*Macro unroll:  mCODE 5, "CATCH", CATCH
0A68                          ALIGN   2   
0A68                CATCH:       
0A68                VVCODE:   .SET   $   
0A68                VVLEN:    .SET   (5 & 01FH) / CELLL   
176A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
176A                VVNAME:   .SET   $   
176A   68 0A 78 17            DW   vvCODE,vvLINK   
176E                VVLINK:   .SET   $   
176E   05 43 41 54 43 48      DB   5,"CATCH"   
0A68                          .ORG   vvCODE   
0A68   00                     NOP      
0A69   CD 12 06               CALL   doLIST   
0A6C   98 0E 0C 10 30 11 66 0E 0C 10 DW   SPAT,TOR,HANDL,AT,TOR   ;save error frame
0A76   88 0E 30 11 5C 0E 3C 0E DW   RPAT,HANDL,STORE,EXECU   ;execute
0A7E   1A 10 30 11 5C 0E      DW   RFROM,HANDL,STORE   ;reSTORE error frame
0A84   1A 10 2C 10 20 06 00 00 48 06 DW   RFROM,DROP,DOLIT,0,EXIT   ;no error
0A8E                             ;   THROW       ( err# -- err# )
0A8E                             ;               Reset system to current local error frame an update error flag.
0A8E                          ;*Macro unroll: mCOLON  5,'THROW',THROW
0A8E                          ;*Macro unroll:  mCODE 5, "THROW", THROW
0A8E                          ALIGN   2   
0A8E                THROW:       
0A8E                VVCODE:   .SET   $   
0A8E                VVLEN:    .SET   (5 & 01FH) / CELLL   
1760                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1760                VVNAME:   .SET   $   
1760   8E 0A 6E 17            DW   vvCODE,vvLINK   
1764                VVLINK:   .SET   $   
1764   05 54 48 52 4F 57      DB   5,"THROW"   
0A8E                          .ORG   vvCODE   
0A8E   00                     NOP      
0A8F   CD 12 06               CALL   doLIST   
0A92   30 11 66 0E 90 0E      DW   HANDL,AT,RPSTO   ;reSTORE return stack
0A98   1A 10 30 11 5C 0E      DW   RFROM,HANDL,STORE   ;reSTORE handler frame
0A9E   1A 10 30 10 0C 10 A2 0E DW   RFROM,SWAP,TOR,SPSTO   ;reSTORE data stack
0AA6   2C 10 1A 10 48 06      DW   DROP,RFROM,EXIT   
0AAC                             ;   NULL$       ( -- a )
0AAC                             ;               Return address of a null string with zero count.
0AAC                          ;*Macro unroll: hCOLON  5,'NULL$',NULLS
0AAC                          ;*Macro unroll:  hCODE 5, "NULL$", NULLS
0AAC                          ALIGN   2   
0AAC                NULLS:       
0AAC   00                     NOP      
0AAD   CD 12 06               CALL   doLIST   
0AB0   28 06                  DW   DOVAR   ;emulate CREATE
0AB2   00 00                  DW   0   
0AB4   63 6F 79 6F 74 65      DB   99,111,121,111,116,101   
0ABA                          ALIGN   2   
0ABA                             ;   ABORT       ( -- )
0ABA                             ;               Reset data stack and jump to QUIT.
0ABA                          ;*Macro unroll: mCOLON  5,'ABORT',ABORT
0ABA                          ;*Macro unroll:  mCODE 5, "ABORT", ABORT
0ABA                          ALIGN   2   
0ABA                ABORT:       
0ABA                VVCODE:   .SET   $   
0ABA                VVLEN:    .SET   (5 & 01FH) / CELLL   
1756                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1756                VVNAME:   .SET   $   
1756   BA 0A 64 17            DW   vvCODE,vvLINK   
175A                VVLINK:   .SET   $   
175A   05 41 42 4F 52 54      DB   5,"ABORT"   
0ABA                          .ORG   vvCODE   
0ABA   00                     NOP      
0ABB   CD 12 06               CALL   doLIST   
0ABE   AC 0A 8E 0A            DW   NULLS,THROW   
0AC2                             ;   abort"      ( f -- )
0AC2                             ;               Run time routine of ABORT" . Abort with a message.
0AC2                          ;*Macro unroll: mCOLON  COMPO+6,'abort|',ABORQ
0AC2                          ;*Macro unroll:  mCODE COMPO+6, "abort|", ABORQ
0AC2                          ALIGN   2   
0AC2                ABORQ:       
0AC2                VVCODE:   .SET   $   
0AC2                VVLEN:    .SET   (COMPO+6 & 01FH) / CELLL   
172A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
172A                VVNAME:   .SET   $   
172A   C2 0A 5A 17            DW   vvCODE,vvLINK   
172E                VVLINK:   .SET   $   
172E   26 61 62 6F 72 74 7C   DB   COMPO+6,"abort|"   
0AC2                          .ORG   vvCODE   
0AC2   00                     NOP      
0AC3   CD 12 06               CALL   doLIST   
0AC6   40 0E CE 0A            DW   QBRAN,ABOR1   ;text flag
0ACA   64 0C 8E 0A            DW   DOSTR,THROW   ;pass error string
0ACE                ABOR1:       
0ACE   64 0C 2C 10 48 06      DW   DOSTR,DROP,EXIT   ;drop error
0AD4                             ;   $INTERPRET  ( a -- )
0AD4                             ;               Interpret a word. If failed, try to convert it to an integer.
0AD4                          ;*Macro unroll: hCOLON  10,'$INTERPRET',INTER
0AD4                          ;*Macro unroll:  hCODE 10, "$INTERPRET", INTER
0AD4                          ALIGN   2   
0AD4                INTER:       
0AD4   00                     NOP      
0AD5   CD 12 06               CALL   doLIST   
0AD8   2C 0A 40 10            DW   NAMEQ,QDUP   ;?defined
0ADC   40 0E FC 0A            DW   QBRAN,INTE1   
0AE0   66 0E 20 06 20 00 6C 01 DW   AT,DOLIT,COMPO,ANDD   ;?compile only lexicon bits
0AE8                          ;*Macro unroll:  mDSTR   ABORQ,' compile only'
0AE8   C2 0A                  DW   ABORQ   
0AEA                VVLEN:    .SET   $   
0AEA   00 20 63 6F 6D 70 69 6C 65 20 6F 6E 6C 79 DB   0," compile only"   
0AF8                VVCODE:   .SET   $   
0AEA                          .ORG   vvLEN   
0AEA   0D                     DB   vvCODE - vvLEN - 1   
0AF8                          .ORG   vvCODE   
0AF8   3C 0E 48 06            DW   EXECU,EXIT   ;execute defined word
0AFC                INTE1:       
0AFC   20 11 12 0F            DW   TNUMB,ATEXE   ;convert a number
0B00   40 0E 06 0B            DW   QBRAN,INTE2   
0B04   48 06                  DW   EXIT   
0B06                INTE2:       
0B06   8E 0A                  DW   THROW   ;error
0B08                             ;   [           ( -- )
0B08                             ;               Start the text interpreter.
0B08                          ;*Macro unroll: mCOLON  IMEDD+1,'[',LBRAC
0B08                          ;*Macro unroll:  mCODE IMEDD+1, "[", LBRAC
0B08                          ALIGN   2   
0B08                LBRAC:       
0B08                VVCODE:   .SET   $   
0B08                VVLEN:    .SET   (IMEDD+1 & 01FH) / CELLL   
16E4                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
16E4                VVNAME:   .SET   $   
16E4   08 0B 2E 17            DW   vvCODE,vvLINK   
16E8                VVLINK:   .SET   $   
16E8   41 5B                  DB   IMEDD+1,"["   
0B08                          .ORG   vvCODE   
0B08   00                     NOP      
0B09   CD 12 06               CALL   doLIST   
0B0C   20 06 D4 0A 18 11 5C 0E 48 06 DW   DOLIT,INTER,TEVAL,STORE,EXIT   
0B16                             ;   .OK         ( -- )
0B16                             ;               Display "ok" only while interpreting.
0B16                          ;*Macro unroll: mCOLON  3,'.OK',DOTOK
0B16                          ;*Macro unroll:  mCODE 3, ".OK", DOTOK
0B16                          ALIGN   2   
0B16                DOTOK:       
0B16                VVCODE:   .SET   $   
0B16                VVLEN:    .SET   (3 & 01FH) / CELLL   
16DC                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
16DC                VVNAME:   .SET   $   
16DC   16 0B E8 16            DW   vvCODE,vvLINK   
16E0                VVLINK:   .SET   $   
16E0   03 2E 4F 4B            DB   3,".OK"   
0B16                          .ORG   vvCODE   
0B16   00                     NOP      
0B17   CD 12 06               CALL   doLIST   
0B1A   20 06 D4 0A 18 11 66 0E DE 01 DW   DOLIT,INTER,TEVAL,AT,EQUAL   
0B24   40 0E 2E 0B            DW   QBRAN,DOTO1   
0B28                          ;*Macro unroll:  mDSTR      DOTQP,' ok'
0B28   84 0C                  DW   DOTQP   
0B2A                VVLEN:    .SET   $   
0B2A   00 20 6F 6B            DB   0," ok"   
0B2E                VVCODE:   .SET   $   
0B2A                          .ORG   vvLEN   
0B2A   03                     DB   vvCODE - vvLEN - 1   
0B2E                          .ORG   vvCODE   
0B2E   52 0C 48 06  DOTO1:    DW   CR,EXIT   
0B32                             ;   ?STACK      ( -- )
0B32                             ;               Abort if the data stack underflows.
0B32                          ;*Macro unroll: hCOLON  6,'?STACK',QSTAC
0B32                          ;*Macro unroll:  hCODE 6, "?STACK", QSTAC
0B32                          ALIGN   2   
0B32                QSTAC:       
0B32   00                     NOP      
0B33   CD 12 06               CALL   doLIST   
0B36   92 10 64 01            DW   DEPTH,ZLESS   ;check only for underflow
0B3A                          ;*Macro unroll:  mDSTR      ABORQ,' underflow'
0B3A   C2 0A                  DW   ABORQ   
0B3C                VVLEN:    .SET   $   
0B3C   00 20 75 6E 64 65 72 66 6C 6F 77 DB   0," underflow"   
0B47                VVCODE:   .SET   $   
0B3C                          .ORG   vvLEN   
0B3C   0A                     DB   vvCODE - vvLEN - 1   
0B47                          .ORG   vvCODE   
0B47   48 06                  DW   EXIT   
0B49                             ;   EVAL        ( -- )
0B49                             ;               Interpret the input stream.
0B49                          ;*Macro unroll: mCOLON  4,'EVAL',EVAL
0B49                          ;*Macro unroll:  mCODE 4, "EVAL", EVAL
0B49                          ALIGN   2   
0B4A                EVAL:        
0B4A                VVCODE:   .SET   $   
0B4A                VVLEN:    .SET   (4 & 01FH) / CELLL   
16D2                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
16D2                VVNAME:   .SET   $   
16D2   4A 0B E0 16            DW   vvCODE,vvLINK   
16D6                VVLINK:   .SET   $   
16D6   04 45 56 41 4C         DB   4,"EVAL"   
0B4A                          .ORG   vvCODE   
0B4A   00                     NOP      
0B4B   CD 12 06               CALL   doLIST   
0B4E                EVAL1:       
0B4E   4A 09 28 10 76 0E      DW   TOKEN,DUPP,CAT   ;?input stream empty
0B54   40 0E 62 0B            DW   QBRAN,EVAL2   
0B58   18 11 12 0F 32 0B      DW   TEVAL,ATEXE,QSTAC   ;evaluate input, check stack
0B5E   4C 0E 4E 0B            DW   BRAN,EVAL1   
0B62                EVAL2:       
0B62   2C 10 E0 10 12 0F 48 06 DW   DROP,TPROM,ATEXE,EXIT   ;prompt
0B6A                             ;   PC!         ( uc p --  )
0B6A                             ;               output uc to IO port p
0B6A                          ;*Macro unroll: mCODE   3,'PC!',PCSTO
0B6A                          ALIGN   2   
0B6A                PCSTO:       
0B6A                VVCODE:   .SET   $   
0B6A                VVLEN:    .SET   (3 & 01FH) / CELLL   
16CA                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
16CA                VVNAME:   .SET   $   
16CA   6A 0B D6 16            DW   vvCODE,vvLINK   
16CE                VVLINK:   .SET   $   
16CE   03 50 43 21            DB   3,"PC!"   
0B6A                          .ORG   vvCODE   
0B6A   D9                     EXX      ; 4t
0B6B   D1                     POP   DE   ;10t
0B6C   7B                     LD   A,E   ; 4t
0B6D   ED 79                  OUT   (C),A   ;12t
0B6F   D9                     EXX      ; 4t
0B70                          ;*Macro unroll:  mNEXT
0B70   EB                     EX   DE,HL   
0B71                          ;*Macro unroll:  mNEXTHL                         ; 34t
0B71   FD E9                  JP   (IY)   ; 34t
0B73                             ;   PC@         ( p -- uc )
0B73                             ;               output uc to IO port p
0B73                          ;*Macro unroll: mCODE   3,'PC@',PCAT
0B73                          ALIGN   2   
0B74                PCAT:        
0B74                VVCODE:   .SET   $   
0B74                VVLEN:    .SET   (3 & 01FH) / CELLL   
16C2                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
16C2                VVNAME:   .SET   $   
16C2   74 0B CE 16            DW   vvCODE,vvLINK   
16C6                VVLINK:   .SET   $   
16C6   03 50 43 40            DB   3,"PC@"   
0B74                          .ORG   vvCODE   
0B74   D9                     EXX      ; 4t
0B75   ED 78                  IN   A,(C)   ;12t
0B77   5F                     LD   E,A   ; 4t
0B78   16 00                  LD   D,0   ; 7t
0B7A   D5                     PUSH   DE   ;11t
0B7B   D9                     EXX      ; 4t
0B7C                          ;*Macro unroll:  mNEXT
0B7C   EB                     EX   DE,HL   
0B7D                          ;*Macro unroll:  mNEXTHL                         ; 34t
0B7D   FD E9                  JP   (IY)   ; 34t
0B7F                             ;   !IO         ( -- )
0B7F                             ;               Initialize the serial I/O devices.
0B7F                          ;*Macro unroll: mCODE   3,'!IO', STOIO ;
0B7F                          ALIGN   2   ; 
0B80                STOIO:       
0B80                VVCODE:   .SET   $   
0B80                VVLEN:    .SET   (3 & 01FH) / CELLL   
16BA                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
16BA                VVNAME:   .SET   $   
16BA   80 0B C6 16            DW   vvCODE,vvLINK   
16BE                VVLINK:   .SET   $   
16BE   03 21 49 4F            DB   3,"!IO"   
0B80                          .ORG   vvCODE   
0B80   CD D6 00               CALL   INIT_IO   
0B83                          ;*Macro unroll:  mNEXT
0B83   EB                     EX   DE,HL   
0B84                          ;*Macro unroll:  mNEXTHL                         ; 34t
0B84   FD E9                  JP   (IY)   ; 34t
0B86                             ;   ?RX         ( -- c T | F )
0B86                             ;               Return input character and true, or a false if no input.
0B86                          ;*Macro unroll: mCODE	3, '?RX', QRX
0B86                          ALIGN   2   
0B86                QRX:         
0B86                VVCODE:   .SET   $   
0B86                VVLEN:    .SET   (3 & 01FH) / CELLL   
16B2                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
16B2                VVNAME:   .SET   $   
16B2   86 0B BE 16            DW   vvCODE,vvLINK   
16B6                VVLINK:   .SET   $   
16B6   03 3F 52 58            DB   3,"?RX"   
0B86                          .ORG   vvCODE   
0B86   C5                     PUSH   BC   
0B87   CD 23 01               CALL   QRXA   
0B8A   20 05                  JR   nz,QRX1   
0B8C   01 00 00               LD   BC,FALSEE   
0B8F   18 0A                  JR   QRX2   
0B91                QRX1:        
0B91   CD F1 00               CALL   RXA1   
0B94   4F                     LD   C,A   
0B95   06 00                  LD   B,0   
0B97   C5                     PUSH   BC   
0B98   01 FF FF               LD   BC,TRUEE   
0B9B                QRX2:        
0B9B                          ;*Macro unroll:  mNEXT
0B9B   EB                     EX   DE,HL   
0B9C                          ;*Macro unroll:  mNEXTHL                         ; 34t
0B9C   FD E9                  JP   (IY)   ; 34t
0B9E                             ;   TX!         ( c -- )
0B9E                             ;               Send character c to the output device.
0B9E                          ;*Macro unroll: mCODE	3,'TX!',TXSTO
0B9E                          ALIGN   2   
0B9E                TXSTO:       
0B9E                VVCODE:   .SET   $   
0B9E                VVLEN:    .SET   (3 & 01FH) / CELLL   
16AA                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
16AA                VVNAME:   .SET   $   
16AA   9E 0B B6 16            DW   vvCODE,vvLINK   
16AE                VVLINK:   .SET   $   
16AE   03 54 58 21            DB   3,"TX!"   
0B9E                          .ORG   vvCODE   
0B9E   79                     LD   A,C   
0B9F   CD 18 01               CALL   TXA   
0BA2   C1                     POP   BC   
0BA3                          ;*Macro unroll:  mNEXT
0BA3   EB                     EX   DE,HL   
0BA4                          ;*Macro unroll:  mNEXTHL                         ; 34t
0BA4   FD E9                  JP   (IY)   ; 34t
0BA6                             ;   ?KEY        ( -- c T | F )
0BA6                             ;               Return input character and true, or a false if no input.
0BA6                          ;*Macro unroll: mCOLON  4,'?KEY',QKEY
0BA6                          ;*Macro unroll:  mCODE 4, "?KEY", QKEY
0BA6                          ALIGN   2   
0BA6                QKEY:        
0BA6                VVCODE:   .SET   $   
0BA6                VVLEN:    .SET   (4 & 01FH) / CELLL   
16A0                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
16A0                VVNAME:   .SET   $   
16A0   A6 0B AE 16            DW   vvCODE,vvLINK   
16A4                VVLINK:   .SET   $   
16A4   04 3F 4B 45 59         DB   4,"?KEY"   
0BA6                          .ORG   vvCODE   
0BA6   00                     NOP      
0BA7   CD 12 06               CALL   doLIST   
0BAA   B8 10 66 0E 3C 0E 48 06 DW   TQKEY,AT,EXECU,EXIT   
0BB2                             ;   KEY         ( -- c )
0BB2                             ;               Wait for and return an input character.
0BB2                          ;*Macro unroll: mCOLON  3,'KEY',KEY
0BB2                          ;*Macro unroll:  mCODE 3, "KEY", KEY
0BB2                          ALIGN   2   
0BB2                KEY:         
0BB2                VVCODE:   .SET   $   
0BB2                VVLEN:    .SET   (3 & 01FH) / CELLL   
1698                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1698                VVNAME:   .SET   $   
1698   B2 0B A4 16            DW   vvCODE,vvLINK   
169C                VVLINK:   .SET   $   
169C   03 4B 45 59            DB   3,"KEY"   
0BB2                          .ORG   vvCODE   
0BB2   00                     NOP      
0BB3   CD 12 06               CALL   doLIST   
0BB6                KEY1:        
0BB6   A6 0B                  DW   QKEY   
0BB8   28 10 40 0E BE 0B      DW   DUPP,QBRAN,KEY2   
0BBE                             ; DW DOLIT, $22, EMIT
0BBE                KEY2:        
0BBE   40 0E B6 0B            DW   QBRAN,KEY1   
0BC2   48 06                  DW   EXIT   
0BC4                             ;   EMIT        ( c -- )
0BC4                             ;               Send a character to the output device.
0BC4                          ;*Macro unroll: mCOLON  4, 'EMIT', EMIT
0BC4                          ;*Macro unroll:  mCODE 4, "EMIT", EMIT
0BC4                          ALIGN   2   
0BC4                EMIT:        
0BC4                VVCODE:   .SET   $   
0BC4                VVLEN:    .SET   (4 & 01FH) / CELLL   
168E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
168E                VVNAME:   .SET   $   
168E   C4 0B 9C 16            DW   vvCODE,vvLINK   
1692                VVLINK:   .SET   $   
1692   04 45 4D 49 54         DB   4,"EMIT"   
0BC4                          .ORG   vvCODE   
0BC4   00                     NOP      
0BC5   CD 12 06               CALL   doLIST   
0BC8   C0 10 66 0E 3C 0E 48 06 DW   TEMIT,AT,EXECU,EXIT   
0BD0                             ;   NUF?        ( -- t )
0BD0                             ;               Return false if no input, else pause and if CR return true.
0BD0                          ;*Macro unroll: mCOLON  4,'NUF?',NUFQ
0BD0                          ;*Macro unroll:  mCODE 4, "NUF?", NUFQ
0BD0                          ALIGN   2   
0BD0                NUFQ:        
0BD0                VVCODE:   .SET   $   
0BD0                VVLEN:    .SET   (4 & 01FH) / CELLL   
1684                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1684                VVNAME:   .SET   $   
1684   D0 0B 92 16            DW   vvCODE,vvLINK   
1688                VVLINK:   .SET   $   
1688   04 4E 55 46 3F         DB   4,"NUF?"   
0BD0                          .ORG   vvCODE   
0BD0   00                     NOP      
0BD1   CD 12 06               CALL   doLIST   
0BD4   A6 0B 28 10            DW   QKEY,DUPP   
0BD8   40 0E E6 0B            DW   QBRAN,NUFQ1   
0BDC   5C 10 B2 0B 20 06 0D 00 DE 01 DW   DDROP,KEY,DOLIT,CRR,EQUAL   
0BE6                NUFQ1:       
0BE6   48 06                  DW   EXIT   
0BE8                             ;   PACE        ( -- )
0BE8                             ;               Send a pace character for the file downloading process.
0BE8                          ;*Macro unroll: hCOLON  4,'PACE',PACE
0BE8                          ;*Macro unroll:  hCODE 4, "PACE", PACE
0BE8                          ALIGN   2   
0BE8                PACE:        
0BE8   00                     NOP      
0BE9   CD 12 06               CALL   doLIST   
0BEC   20 06 0B 00 C4 0B 48 06 DW   DOLIT,11,EMIT,EXIT   
0BF4                             ;   SPACE       ( -- )
0BF4                             ;               Send the blank character to the output device.
0BF4                          ;*Macro unroll: mCOLON  5,'SPACE',SPACE
0BF4                          ;*Macro unroll:  mCODE 5, "SPACE", SPACE
0BF4                          ALIGN   2   
0BF4                SPACE:       
0BF4                VVCODE:   .SET   $   
0BF4                VVLEN:    .SET   (5 & 01FH) / CELLL   
167A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
167A                VVNAME:   .SET   $   
167A   F4 0B 88 16            DW   vvCODE,vvLINK   
167E                VVLINK:   .SET   $   
167E   05 53 50 41 43 45      DB   5,"SPACE"   
0BF4                          .ORG   vvCODE   
0BF4   00                     NOP      
0BF5   CD 12 06               CALL   doLIST   
0BF8   5C 07 C4 0B 48 06      DW   BLANK,EMIT,EXIT   
0BFE                             ;   SPACES      ( +n -- )
0BFE                             ;               Send n spaces to the output device.
0BFE                          ;*Macro unroll: mCOLON  6,'SPACES',SPACS
0BFE                          ;*Macro unroll:  mCODE 6, "SPACES", SPACS
0BFE                          ALIGN   2   
0BFE                SPACS:       
0BFE                VVCODE:   .SET   $   
0BFE                VVLEN:    .SET   (6 & 01FH) / CELLL   
166E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
166E                VVNAME:   .SET   $   
166E   FE 0B 7E 16            DW   vvCODE,vvLINK   
1672                VVLINK:   .SET   $   
1672   06 53 50 41 43 45 53   DB   6,"SPACES"   
0BFE                          .ORG   vvCODE   
0BFE   00                     NOP      
0BFF   CD 12 06               CALL   doLIST   
0C02   20 06 00 00 2A 02 0C 10 DW   DOLIT,0,MAX,TOR   
0C0A   4C 0E 10 0C            DW   BRAN,CHAR2   
0C0E                CHAR1:       
0C0E   F4 0B                  DW   SPACE   
0C10                CHAR2:       
0C10   76 06 0E 0C            DW   DONXT,CHAR1   
0C14   48 06                  DW   EXIT   
0C16                             ;   TYPE        ( b u -- )
0C16                             ;               Output u characters from b.
0C16                          ;*Macro unroll: mCOLON	4,'TYPE',TYPEE
0C16                          ;*Macro unroll:  mCODE 4, "TYPE", TYPEE
0C16                          ALIGN   2   
0C16                TYPEE:       
0C16                VVCODE:   .SET   $   
0C16                VVLEN:    .SET   (4 & 01FH) / CELLL   
1664                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1664                VVNAME:   .SET   $   
1664   16 0C 72 16            DW   vvCODE,vvLINK   
1668                VVLINK:   .SET   $   
1668   04 54 59 50 45         DB   4,"TYPE"   
0C16                          .ORG   vvCODE   
0C16   00                     NOP      
0C17   CD 12 06               CALL   doLIST   
0C1A   0C 10                  DW   TOR   
0C1C   4C 0E 2C 0C            DW   BRAN,TYPE2   
0C20                TYPE1:       
0C20   28 10 76 0E C4 0B      DW   DUPP,CAT,EMIT   
0C26   20 06 01 00 8A 01      DW   DOLIT,1,PLUS   
0C2C                TYPE2:       
0C2C   76 06 20 0C            DW   DONXT,TYPE1   
0C30   2C 10 48 06            DW   DROP,EXIT   
0C34                             ;   TYPEZ    ( cstr -- )
0C34                             ;   Similar to TYPE but prints C null terminated strings
0C34                          ;*Macro unroll: mCOLON	4,'TYPEZ',TYPEZ
0C34                          ;*Macro unroll:  mCODE 4, "TYPEZ", TYPEZ
0C34                          ALIGN   2   
0C34                TYPEZ:       
0C34                VVCODE:   .SET   $   
0C34                VVLEN:    .SET   (4 & 01FH) / CELLL   
165A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
165A                VVNAME:   .SET   $   
165A   34 0C 68 16            DW   vvCODE,vvLINK   
165E                VVLINK:   .SET   $   
165E   04 54 59 50 45 5A      DB   4,"TYPEZ"   
0C34                          .ORG   vvCODE   
0C34   00                     NOP      
0C35   CD 12 06               CALL   doLIST   
0C38                TYPEZ1:      
0C38   28 10 76 0E            DW   DUPP,CAT   
0C3C   28 10 40 0E 4E 0C      DW   DUPP,QBRAN,TYPEZ2   
0C42   C4 0B                  DW   EMIT   
0C44   20 06 01 00 8A 01      DW   DOLIT,1,PLUS   
0C4A   4C 0E 38 0C            DW   BRAN,TYPEZ1   
0C4E                TYPEZ2:      
0C4E   2C 10 48 06            DW   DROP,EXIT   
0C52                             ;   CR          ( -- )
0C52                             ;               Output a carriage return and a line feed.
0C52                          ;*Macro unroll: mCOLON	2,'CR',CR
0C52                          ;*Macro unroll:  mCODE 2, "CR", CR
0C52                          ALIGN   2   
0C52                CR:          
0C52                VVCODE:   .SET   $   
0C52                VVLEN:    .SET   (2 & 01FH) / CELLL   
1652                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1652                VVNAME:   .SET   $   
1652   52 0C 5E 16            DW   vvCODE,vvLINK   
1656                VVLINK:   .SET   $   
1656   02 43 52               DB   2,"CR"   
0C52                          .ORG   vvCODE   
0C52   00                     NOP      
0C53   CD 12 06               CALL   doLIST   
0C56   20 06 0D 00 C4 0B 20 06 0A 00 C4 0B 48 06 DW   DOLIT,CRR,EMIT,DOLIT,LFF,EMIT,EXIT   
0C64                             ;   do$         ( -- a )
0C64                             ;               Return the address of a compiled string.
0C64                          ;*Macro unroll: mCOLON  COMPO+3,'do$',DOSTR
0C64                          ;*Macro unroll:  mCODE COMPO+3, "do$", DOSTR
0C64                          ALIGN   2   
0C64                DOSTR:       
0C64                VVCODE:   .SET   $   
0C64                VVLEN:    .SET   (COMPO+3 & 01FH) / CELLL   
162A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
162A                VVNAME:   .SET   $   
162A   64 0C 56 16            DW   vvCODE,vvLINK   
162E                VVLINK:   .SET   $   
162E   23 64 6F 24            DB   COMPO+3,"do$"   
0C64                          .ORG   vvCODE   
0C64   00                     NOP      
0C65   CD 12 06               CALL   doLIST   
0C68   1A 10 7E 0E 1A 10 DC 0E 8A 01 DW   RFROM,RAT,RFROM,COUNT,PLUS   
0C72   D4 0F 0C 10 30 10 0C 10 48 06 DW   ALGND,TOR,SWAP,TOR,EXIT   
0C7C                             ;   $"|         ( -- a )
0C7C                             ;               Run time routine compiled by $". Return address of a compiled string.
0C7C                          ;*Macro unroll: hCOLON  COMPO+3,'$||',STRQP
0C7C                          ;*Macro unroll:  hCODE COMPO+3, "$||", STRQP
0C7C                          ALIGN   2   
0C7C                STRQP:       
0C7C   00                     NOP      
0C7D   CD 12 06               CALL   doLIST   
0C80   64 0C 48 06            DW   DOSTR,EXIT   ;force a call to do$
0C84                             ;   ."|         ( -- )
0C84                             ;               Run time routine of ." . Output a compiled string.
0C84                          ;*Macro unroll: hCOLON  COMPO+3,'.||',DOTQP
0C84                          ;*Macro unroll:  hCODE COMPO+3, ".||", DOTQP
0C84                          ALIGN   2   
0C84                DOTQP:       
0C84   00                     NOP      
0C85   CD 12 06               CALL   doLIST   
0C88   64 0C DC 0E 16 0C 48 06 DW   DOSTR,COUNT,TYPEE,EXIT   
0C90                             ;   .R          ( n +n -- )
0C90                             ;               Display an integer in a field of n columns, right justified.
0C90                          ;*Macro unroll: mCOLON  2,'.R',DOTR
0C90                          ;*Macro unroll:  mCODE 2, ".R", DOTR
0C90                          ALIGN   2   
0C90                DOTR:        
0C90                VVCODE:   .SET   $   
0C90                VVLEN:    .SET   (2 & 01FH) / CELLL   
1622                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1622                VVNAME:   .SET   $   
1622   90 0C 2E 16            DW   vvCODE,vvLINK   
1626                VVLINK:   .SET   $   
1626   02 2E 52               DB   2,".R"   
0C90                          .ORG   vvCODE   
0C90   00                     NOP      
0C91   CD 12 06               CALL   doLIST   
0C94   0C 10 2A 07 1A 10 38 10 C4 01 DW   TOR,STR,RFROM,OVER,SUBB   
0C9E   FE 0B 16 0C 48 06      DW   SPACS,TYPEE,EXIT   
0CA4                             ;   U.R         ( u +n -- )
0CA4                             ;               Display an unsigned integer in n column, right justified.
0CA4                          ;*Macro unroll: mCOLON  3,'U.R',UDOTR
0CA4                          ;*Macro unroll:  mCODE 3, "U.R", UDOTR
0CA4                          ALIGN   2   
0CA4                UDOTR:       
0CA4                VVCODE:   .SET   $   
0CA4                VVLEN:    .SET   (3 & 01FH) / CELLL   
161A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
161A                VVNAME:   .SET   $   
161A   A4 0C 26 16            DW   vvCODE,vvLINK   
161E                VVLINK:   .SET   $   
161E   03 55 2E 52            DB   3,"U.R"   
0CA4                          .ORG   vvCODE   
0CA4   00                     NOP      
0CA5   CD 12 06               CALL   doLIST   
0CA8   0C 10 C2 06 F4 06 18 07 DW   TOR,BDIGS,DIGS,EDIGS   
0CB0   1A 10 38 10 C4 01      DW   RFROM,OVER,SUBB   
0CB6   FE 0B 16 0C 48 06      DW   SPACS,TYPEE,EXIT   
0CBC                             ;   U.          ( u -- )
0CBC                             ;               Display an unsigned integer in free format.
0CBC                          ;*Macro unroll: mCOLON  2,'U.',UDOT
0CBC                          ;*Macro unroll:  mCODE 2, "U.", UDOT
0CBC                          ALIGN   2   
0CBC                UDOT:        
0CBC                VVCODE:   .SET   $   
0CBC                VVLEN:    .SET   (2 & 01FH) / CELLL   
1612                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1612                VVNAME:   .SET   $   
1612   BC 0C 1E 16            DW   vvCODE,vvLINK   
1616                VVLINK:   .SET   $   
1616   02 55 2E               DB   2,"U."   
0CBC                          .ORG   vvCODE   
0CBC   00                     NOP      
0CBD   CD 12 06               CALL   doLIST   
0CC0   C2 06 F4 06 18 07      DW   BDIGS,DIGS,EDIGS   
0CC6   F4 0B 16 0C 48 06      DW   SPACE,TYPEE,EXIT   
0CCC                             ;   .           ( w -- )
0CCC                             ;               Display an integer in free format, preceeded by a space.
0CCC                          ;*Macro unroll: mCOLON  1,'.',DOT
0CCC                          ;*Macro unroll:  mCODE 1, ".", DOT
0CCC                          ALIGN   2   
0CCC                DOT:         
0CCC                VVCODE:   .SET   $   
0CCC                VVLEN:    .SET   (1 & 01FH) / CELLL   
160C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
160C                VVNAME:   .SET   $   
160C   CC 0C 16 16            DW   vvCODE,vvLINK   
1610                VVLINK:   .SET   $   
1610   01 2E                  DB   1,"."   
0CCC                          .ORG   vvCODE   
0CCC   00                     NOP      
0CCD   CD 12 06               CALL   doLIST   
0CD0   E8 10 66 0E 20 06 0A 00 80 01 DW   BASE,AT,DOLIT,10,XORR   ;?decimal
0CDA   40 0E E2 0C            DW   QBRAN,DOT1   
0CDE   BC 0C 48 06            DW   UDOT,EXIT   ;no, display unsigned
0CE2                DOT1:        
0CE2   2A 07 F4 0B 16 0C 48 06 DW   STR,SPACE,TYPEE,EXIT   ;yes, display signed
0CEA                             ;   .(          ( -- )
0CEA                             ;               Output following string up to next ) .
0CEA                          ;*Macro unroll: mCOLON  IMEDD+2,'.(',DOTPR
0CEA                          ;*Macro unroll:  mCODE IMEDD+2, ".(", DOTPR
0CEA                          ALIGN   2   
0CEA                DOTPR:       
0CEA                VVCODE:   .SET   $   
0CEA                VVLEN:    .SET   (IMEDD+2 & 01FH) / CELLL   
15C4                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
15C4                VVNAME:   .SET   $   
15C4   EA 0C 10 16            DW   vvCODE,vvLINK   
15C8                VVLINK:   .SET   $   
15C8   42 2E 28               DB   IMEDD+2,".("   
0CEA                          .ORG   vvCODE   
0CEA   00                     NOP      
0CEB   CD 12 06               CALL   doLIST   
0CEE   20 06 00 09 16 0C 48 06 DW   DOLIT,")",PARSE,TYPEE,EXIT   
0CF6                             ;   ?           ( a -- )
0CF6                             ;               Display the contents in a memory cell.
0CF6                          ;*Macro unroll: mCOLON  1,'?',QUEST
0CF6                          ;*Macro unroll:  mCODE 1, "?", QUEST
0CF6                          ALIGN   2   
0CF6                QUEST:       
0CF6                VVCODE:   .SET   $   
0CF6                VVLEN:    .SET   (1 & 01FH) / CELLL   
15BE                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
15BE                VVNAME:   .SET   $   
15BE   F6 0C C8 15            DW   vvCODE,vvLINK   
15C2                VVLINK:   .SET   $   
15C2   01 3F                  DB   1,"?"   
0CF6                          .ORG   vvCODE   
0CF6   00                     NOP      
0CF7   CD 12 06               CALL   doLIST   
0CFA   66 0E CC 0C 48 06      DW   AT,DOT,EXIT   
0D00                             ;   ^H          ( bot eot cur -- bot eot cur )
0D00                             ;               Backup the cursor by one character.
0D00                          ;*Macro unroll: mCOLON  2,'^H',BKSP
0D00                          ;*Macro unroll:  mCODE 2, "^H", BKSP
0D00                          ALIGN   2   
0D00                BKSP:        
0D00                VVCODE:   .SET   $   
0D00                VVLEN:    .SET   (2 & 01FH) / CELLL   
15B6                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
15B6                VVNAME:   .SET   $   
15B6   00 0D C2 15            DW   vvCODE,vvLINK   
15BA                VVLINK:   .SET   $   
15BA   02 5E 48               DB   2,"^H"   
0D00                          .ORG   vvCODE   
0D00   00                     NOP      
0D01   CD 12 06               CALL   doLIST   
0D04   0C 10 38 10 1A 10 30 10 38 10 80 01 DW   TOR,OVER,RFROM,SWAP,OVER,XORR   
0D10   40 0E 30 0D            DW   QBRAN,BACK1   
0D14   20 06 08 00 D8 10 12 0F 20 06 01 00 C4 01 DW   DOLIT,BKSPP,TECHO,ATEXE,DOLIT,1,SUBB   
0D22   5C 07 D8 10 12 0F      DW   BLANK,TECHO,ATEXE   
0D28   20 06 08 00 D8 10 12 0F DW   DOLIT,BKSPP,TECHO,ATEXE   
0D30                BACK1:       
0D30   48 06                  DW   EXIT   
0D32                             ;   TAP         ( bot eot cur c -- bot eot cur )
0D32                             ;               Accept and echo the key stroke and bump the cursor.
0D32                          ;*Macro unroll: mCOLON  3,'TAP',TAP
0D32                          ;*Macro unroll:  mCODE 3, "TAP", TAP
0D32                          ALIGN   2   
0D32                TAP:         
0D32                VVCODE:   .SET   $   
0D32                VVLEN:    .SET   (3 & 01FH) / CELLL   
15AE                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
15AE                VVNAME:   .SET   $   
15AE   32 0D BA 15            DW   vvCODE,vvLINK   
15B2                VVLINK:   .SET   $   
15B2   03 54 41 50            DB   3,"TAP"   
0D32                          .ORG   vvCODE   
0D32   00                     NOP      
0D33   CD 12 06               CALL   doLIST   
0D36   28 10 D8 10 12 0F      DW   DUPP,TECHO,ATEXE   
0D3C   38 10 6E 0E 20 06 01 00 8A 01 48 06 DW   OVER,CSTOR,DOLIT,1,PLUS,EXIT   
0D48                             ;   kTAP        ( bot eot cur c -- bot eot cur )
0D48                             ;               Process a key stroke, CR or backspace.
0D48                          ;*Macro unroll: mCOLON  4,'kTAP',KTAP
0D48                          ;*Macro unroll:  mCODE 4, "kTAP", KTAP
0D48                          ALIGN   2   
0D48                KTAP:        
0D48                VVCODE:   .SET   $   
0D48                VVLEN:    .SET   (4 & 01FH) / CELLL   
15A4                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
15A4                VVNAME:   .SET   $   
15A4   48 0D B2 15            DW   vvCODE,vvLINK   
15A8                VVLINK:   .SET   $   
15A8   04 6B 54 41 50         DB   4,"kTAP"   
0D48                          .ORG   vvCODE   
0D48   00                     NOP      
0D49   CD 12 06               CALL   doLIST   
0D4C   28 10 20 06 0D 00 80 01 DW   DUPP,DOLIT,CRR,XORR   
0D54   40 0E 6C 0D            DW   QBRAN,KTAP2   
0D58   20 06 08 00 80 01      DW   DOLIT,BKSPP,XORR   
0D5E   40 0E 68 0D            DW   QBRAN,KTAP1   
0D62   5C 07 32 0D 48 06      DW   BLANK,TAP,EXIT   
0D68                KTAP1:       
0D68   00 0D 48 06            DW   BKSP,EXIT   
0D6C                KTAP2:       
0D6C   2C 10 30 10 2C 10 28 10 48 06 DW   DROP,SWAP,DROP,DUPP,EXIT   
0D76                             ;   accept      ( b u -- b u )
0D76                             ;               Accept characters to input buffer. Return with actual count.
0D76                          ;*Macro unroll: mCOLON  6,'accept',ACCEP
0D76                          ;*Macro unroll:  mCODE 6, "accept", ACCEP
0D76                          ALIGN   2   
0D76                ACCEP:       
0D76                VVCODE:   .SET   $   
0D76                VVLEN:    .SET   (6 & 01FH) / CELLL   
1598                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1598                VVNAME:   .SET   $   
1598   76 0D A8 15            DW   vvCODE,vvLINK   
159C                VVLINK:   .SET   $   
159C   06 61 63 63 65 70 74   DB   6,"accept"   
0D76                          .ORG   vvCODE   
0D76   00                     NOP      
0D77   CD 12 06               CALL   doLIST   
0D7A   38 10 8A 01 38 10      DW   OVER,PLUS,OVER   
0D80                ACCP1:       
0D80   66 10 80 01            DW   DDUP,XORR   
0D84   40 0E A6 0D            DW   QBRAN,ACCP4   
0D88   B2 0B 28 10            DW   KEY,DUPP   
0D8C   5C 07 20 06 7F 00 50 02 DW   BLANK,DOLIT,127,WITHI   
0D94   40 0E 9E 0D            DW   QBRAN,ACCP2   
0D98   32 0D                  DW   TAP   
0D9A   4C 0E A2 0D            DW   BRAN,ACCP3   
0D9E                ACCP2:       
0D9E   D0 10 12 0F            DW   TTAP,ATEXE   
0DA2                ACCP3:       
0DA2   4C 0E 80 0D            DW   BRAN,ACCP1   
0DA6                ACCP4:       
0DA6   2C 10 38 10 C4 01 48 06 DW   DROP,OVER,SUBB,EXIT   
0DAE                             ;   EXPECT      ( b u -- )
0DAE                             ;               Accept input stream and STORE count in SPAN.
0DAE                          ;*Macro unroll: hCOLON  6,'EXPECT',EXPEC
0DAE                          ;*Macro unroll:  hCODE 6, "EXPECT", EXPEC
0DAE                          ALIGN   2   
0DAE                EXPEC:       
0DAE   00                     NOP      
0DAF   CD 12 06               CALL   doLIST   
0DB2   C8 10 12 0F F8 10 5C 0E 2C 10 48 06 DW   TEXPE,ATEXE,SPAN,STORE,DROP,EXIT   
0DBE                             ;   QUERY       ( -- )
0DBE                             ;               Accept input stream to terminal input buffer.
0DBE                          ;*Macro unroll: hCOLON  5,'QUERY',QUERY
0DBE                          ;*Macro unroll:  hCODE 5, "QUERY", QUERY
0DBE                          ALIGN   2   
0DBE                QUERY:       
0DBE   00                     NOP      
0DBF   CD 12 06               CALL   doLIST   
0DC2   06 0F 20 06 50 00 C8 10 12 0F 08 11 5C 0E DW   TIB,DOLIT,80,TEXPE,ATEXE,NTIB,STORE   
0DD0   2C 10 20 06 00 00 00 11 5C 0E 48 06 DW   DROP,DOLIT,0,INN,STORE,EXIT   
0DDC                          ;*Macro unroll: hCOLON	4,'HI',HI
0DDC                          ;*Macro unroll:  hCODE 4, "HI", HI
0DDC                          ALIGN   2   
0DDC                HI:          
0DDC   00                     NOP      
0DDD   CD 12 06               CALL   doLIST   
0DE0   80 0B                  DW   STOIO   
0DE2   20 06 F4 0D            DW   DOLIT,HELLO   
0DE6   34 0C                  DW   TYPEZ   
0DE8   B2 0B                  DW   KEY   
0DEA   C4 0B                  DW   EMIT   
0DEC   20 06 F4 0D            DW   DOLIT,HELLO   
0DF0   34 0C                  DW   TYPEZ   
0DF2   3A 0E                  DW   QUIT   
0DF4   48 65 6C 6C 6F 20 46 6F 72 74 68 21 20 0D 0A 00 HELLO:   .CSTR   "Hello Forth! \r\n"   
0E04                NEXT_STEP:      
0E04   5E                     LD   E,(HL)   ; 7t
0E05   23                     INC   HL   ; 6t
0E06   56                     LD   D,(HL)   ; 7t
0E07   23                     INC   HL   ; 6t
0E08   EB                     EX   DE,HL   ; 4t
0E09   E9                     JP   (HL)   ; 4t
0E0A                          ;*Macro unroll: mCOLON	4,'COLD',COLD
0E0A                          ;*Macro unroll:  mCODE 4, "COLD", COLD
0E0A                          ALIGN   2   
0E0A                COLD:        
0E0A                VVCODE:   .SET   $   
0E0A                VVLEN:    .SET   (4 & 01FH) / CELLL   
158E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
158E                VVNAME:   .SET   $   
158E   0A 0E 9C 15            DW   vvCODE,vvLINK   
1592                VVLINK:   .SET   $   
1592   04 43 4F 4C 44         DB   4,"COLD"   
0E0A                          .ORG   vvCODE   
0E0A   00                     NOP      
0E0B   CD 12 06               CALL   doLIST   
0E0E                COLD1:       
0E0E   20 06 29 01 20 06 00 24 DW   DOLIT,UZERO,DOLIT,UPP   
0E16   20 06 3A 00 22 0F      DW   DOLIT,ULAST-UZERO,CMOVE   ;initialize user area
0E1C   24 0E                  DW   PRESE   ;initialize stack and TIB
0E1E                             ; DW      TBOOT,ATEXE             ;application boot
0E1E                             ; DW      FORTH,CNTXT,AT,DUPP     ;initialize search order
0E1E                             ; DW      CRRNT,DSTOR,OVERT
0E1E   3A 0E                  DW   QUIT   ;start interpretation
0E20   4C 0E 0E 0E            DW   BRAN,COLD1   ;just in case
0E24                             ;   PRESET      ( -- )
0E24                             ;               Reset data stack pointer and the terminal input buffer.
0E24                          ;*Macro unroll: mCOLON  6,'PRESET',PRESE
0E24                          ;*Macro unroll:  mCODE 6, "PRESET", PRESE
0E24                          ALIGN   2   
0E24                PRESE:       
0E24                VVCODE:   .SET   $   
0E24                VVLEN:    .SET   (6 & 01FH) / CELLL   
1582                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1582                VVNAME:   .SET   $   
1582   24 0E 92 15            DW   vvCODE,vvLINK   
1586                VVLINK:   .SET   $   
1586   06 50 52 45 53 45 54   DB   6,"PRESET"   
0E24                          .ORG   vvCODE   
0E24   00                     NOP      
0E25   CD 12 06               CALL   doLIST   
0E28   A8 10 66 0E A2 0E      DW   SZERO,AT,SPSTO   
0E2E   20 06 00 22 08 11 86 03 5C 0E 48 06 DW   DOLIT,TIBB,NTIB,CELLP,STORE,EXIT   
0E3A                          ;*Macro unroll: mCODE  4, 'QUIT', QUIT
0E3A                          ALIGN   2   
0E3A                QUIT:        
0E3A                VVCODE:   .SET   $   
0E3A                VVLEN:    .SET   (4 & 01FH) / CELLL   
1578                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1578                VVNAME:   .SET   $   
1578   3A 0E 86 15            DW   vvCODE,vvLINK   
157C                VVLINK:   .SET   $   
157C   04 51 55 49 54         DB   4,"QUIT"   
0E3A                          .ORG   vvCODE   
0E3A   76                     HALT      
0E3B                             ;   EXECUTE	( i*x xt -- j*x )		\ CORE
0E3B                             ;		Perform the semantics indentified by execution token, xt.
0E3B                          ;*Macro unroll: mCODE	7,'EXECUTE', EXECU
0E3B                          ALIGN   2   
0E3C                EXECU:       
0E3C                VVCODE:   .SET   $   
0E3C                VVLEN:    .SET   (7 & 01FH) / CELLL   
156C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
156C                VVNAME:   .SET   $   
156C   3C 0E 7C 15            DW   vvCODE,vvLINK   
1570                VVLINK:   .SET   $   
1570   07 45 58 45 43 55 54 45 DB   7,"EXECUTE"   
0E3C                          .ORG   vvCODE   
0E3C   60                     LD   H,B   
0E3D   69                     LD   L,C   
0E3E   C1                     POP   BC   
0E3F   E9                     JP   (HL)   
0E40                             ; 
0E40                             ;   0BRAN	( flag -- )
0E40                             ;		BRAN if flag is zero.
0E40                          ;*Macro unroll: hCODE	COMPO+7,'?branch', QBRAN
0E40                          ALIGN   2   
0E40                QBRAN:       
0E40   78                     LD   A,B   ; 4t
0E41   B1                     OR   C   ; 4t
0E42   C1                     POP   BC   ;10t
0E43   CA 4C 0E               JP   Z,BRAN   ;10/7t a fast dec is ok, only
0E46   13                     INC   DE   ; 6t yes,continue past the BRAN offset
0E47   13                     INC   DE   ; 6t
0E48                          ;*Macro unroll: 	mNEXT
0E48   EB                     EX   DE,HL   
0E49                          ;*Macro unroll:  mNEXTHL                         ; 34t
0E49   FD E9                  JP   (IY)   ; 34t
0E4B                             ;   BRAN	( -- )
0E4B                             ;		BRAN to an inline address.
0E4B                          ;*Macro unroll: hCODE	COMPO+6,'branch', BRAN
0E4B                          ALIGN   2   
0E4C                BRAN:        
0E4C   1A                     LD   A,(DE)   ; 7t go back to the loop
0E4D   6F                     LD   L,A   ; 4t
0E4E   13                     INC   DE   ; 6t
0E4F   1A                     LD   A,(DE)   ; 7t
0E50   67                     LD   H,A   ; 4t
0E51                          ;*Macro unroll: 	mNEXTHL
0E51   FD E9                  JP   (IY)   
0E53                             ; 
0E53                             ;   THROW    ( cstr -- )
0E53                             ;   Prints string message and returns TODO: restart Forth interpreter QUIT
0E53                          ;*Macro unroll: mCOLON	5,'THROWX',THROWX
0E53                          ;*Macro unroll:  mCODE 5, "THROWX", THROWX
0E53                          ALIGN   2   
0E54                THROWX:      
0E54                VVCODE:   .SET   $   
0E54                VVLEN:    .SET   (5 & 01FH) / CELLL   
1562                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1562                VVNAME:   .SET   $   
1562   54 0E 70 15            DW   vvCODE,vvLINK   
1566                VVLINK:   .SET   $   
1566   05 54 48 52 4F 57 58   DB   5,"THROWX"   
0E54                          .ORG   vvCODE   
0E54   00                     NOP      
0E55   CD 12 06               CALL   doLIST   
0E58   34 0C 48 06            DW   TYPEZ,EXIT   
0E5C                             ;   !           ( w a -- )
0E5C                             ;               Pop the data stack to memory.
0E5C                          ;*Macro unroll: mCODE	1,'!',STORE
0E5C                          ALIGN   2   
0E5C                STORE:       
0E5C                VVCODE:   .SET   $   
0E5C                VVLEN:    .SET   (1 & 01FH) / CELLL   
155C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
155C                VVNAME:   .SET   $   
155C   5C 0E 66 15            DW   vvCODE,vvLINK   
1560                VVLINK:   .SET   $   
1560   01 21                  DB   1,"!"   
0E5C                          .ORG   vvCODE   
0E5C   60                     LD   H,B   
0E5D   69                     LD   L,C   
0E5E   C1                     POP   BC   
0E5F   71                     LD   (HL),C   
0E60   23                     INC   HL   
0E61   70                     LD   (HL),B   
0E62   C1                     POP   BC   
0E63                          ;*Macro unroll: 	mNEXT
0E63   EB                     EX   DE,HL   
0E64                          ;*Macro unroll:  mNEXTHL                         ; 34t
0E64   FD E9                  JP   (IY)   ; 34t
0E66                             ;   @           ( a -- w )
0E66                             ;               Push memory location to the data stack.
0E66                          ;*Macro unroll: mCODE	1,'@', AT
0E66                          ALIGN   2   
0E66                AT:          
0E66                VVCODE:   .SET   $   
0E66                VVLEN:    .SET   (1 & 01FH) / CELLL   
1556                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1556                VVNAME:   .SET   $   
1556   66 0E 60 15            DW   vvCODE,vvLINK   
155A                VVLINK:   .SET   $   
155A   01 40                  DB   1,"@"   
0E66                          .ORG   vvCODE   
0E66   60                     LD   H,B   
0E67   69                     LD   L,C   
0E68   4E                     LD   C,(HL)   
0E69   23                     INC   HL   
0E6A   46                     LD   B,(HL)   
0E6B                          ;*Macro unroll: 	mNEXT
0E6B   EB                     EX   DE,HL   
0E6C                          ;*Macro unroll:  mNEXTHL                         ; 34t
0E6C   FD E9                  JP   (IY)   ; 34t
0E6E                             ;   C!          ( c b -- )
0E6E                             ;               Pop the data stack to byte memory.
0E6E                          ;*Macro unroll: mCODE	2,'C!',CSTOR
0E6E                          ALIGN   2   
0E6E                CSTOR:       
0E6E                VVCODE:   .SET   $   
0E6E                VVLEN:    .SET   (2 & 01FH) / CELLL   
154E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
154E                VVNAME:   .SET   $   
154E   6E 0E 5A 15            DW   vvCODE,vvLINK   
1552                VVLINK:   .SET   $   
1552   02 43 21               DB   2,"C!"   
0E6E                          .ORG   vvCODE   
0E6E   60                     LD   H,B   
0E6F   69                     LD   L,C   
0E70   C1                     POP   BC   
0E71   71                     LD   (HL),C   
0E72   C1                     POP   BC   
0E73                          ;*Macro unroll: 	mNEXT
0E73   EB                     EX   DE,HL   
0E74                          ;*Macro unroll:  mNEXTHL                         ; 34t
0E74   FD E9                  JP   (IY)   ; 34t
0E76                             ;   C@          ( b -- c )
0E76                             ;               Push byte memory location to the data stack.
0E76                          ;*Macro unroll: mCODE	2,'C@',CAT
0E76                          ALIGN   2   
0E76                CAT:         
0E76                VVCODE:   .SET   $   
0E76                VVLEN:    .SET   (2 & 01FH) / CELLL   
1546                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1546                VVNAME:   .SET   $   
1546   76 0E 52 15            DW   vvCODE,vvLINK   
154A                VVLINK:   .SET   $   
154A   02 43 40               DB   2,"C@"   
0E76                          .ORG   vvCODE   
0E76   0A                     LD   A,(BC)   
0E77   4F                     LD   C,A   
0E78   06 00                  LD   B,0   
0E7A                          ;*Macro unroll: 	mNEXT
0E7A   EB                     EX   DE,HL   
0E7B                          ;*Macro unroll:  mNEXTHL                         ; 34t
0E7B   FD E9                  JP   (IY)   ; 34t
0E7D                             ;   R@          ( -- w )
0E7D                             ;               Copy top of return stack to the data stack.
0E7D                          ;*Macro unroll: mCODE	COMPO+2,'R@',RAT
0E7D                          ALIGN   2   
0E7E                RAT:         
0E7E                VVCODE:   .SET   $   
0E7E                VVLEN:    .SET   (COMPO+2 & 01FH) / CELLL   
151E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
151E                VVNAME:   .SET   $   
151E   7E 0E 4A 15            DW   vvCODE,vvLINK   
1522                VVLINK:   .SET   $   
1522   22 52 40               DB   COMPO+2,"R@"   
0E7E                          .ORG   vvCODE   
0E7E   C5                     PUSH   BC   
0E7F   DD 4E 00               LD   C,(IX+0)   
0E82   DD 46 01               LD   B,(IX+1)   
0E85                          ;*Macro unroll: 	mNEXT
0E85   EB                     EX   DE,HL   
0E86                          ;*Macro unroll:  mNEXTHL                         ; 34t
0E86   FD E9                  JP   (IY)   ; 34t
0E88                             ;   RP@         ( -- a )
0E88                             ;               Push the current RP to the data stack
0E88                          ;*Macro unroll: mCODE	COMPO+3, 'rp@', RPAT
0E88                          ALIGN   2   
0E88                RPAT:        
0E88                VVCODE:   .SET   $   
0E88                VVLEN:    .SET   (COMPO+3 & 01FH) / CELLL   
14F6                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
14F6                VVNAME:   .SET   $   
14F6   88 0E 22 15            DW   vvCODE,vvLINK   
14FA                VVLINK:   .SET   $   
14FA   23 72 70 40            DB   COMPO+3,"rp@"   
0E88                          .ORG   vvCODE   
0E88   C5                     DB   0C5h   ; PUSH	BC	;11t
0E89   DD E5                  DB   0DDh,0E5h   ; PUSH IX	;15t
0E8B   C1                     DB   0C1h   ; POP	BC	;10t
0E8C                          ;*Macro unroll:  mNEXT
0E8C   EB                     EX   DE,HL   
0E8D                          ;*Macro unroll:  mNEXTHL                         ; 34t
0E8D   FD E9                  JP   (IY)   ; 34t
0E8F                             ;   RP!         ( a -- )
0E8F                             ;               Set the return stack pointer.
0E8F                          ;*Macro unroll: mCODE	COMPO+3,'rp!',RPSTO
0E8F                          ALIGN   2   
0E90                RPSTO:       
0E90                VVCODE:   .SET   $   
0E90                VVLEN:    .SET   (COMPO+3 & 01FH) / CELLL   
14CE                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
14CE                VVNAME:   .SET   $   
14CE   90 0E FA 14            DW   vvCODE,vvLINK   
14D2                VVLINK:   .SET   $   
14D2   23 72 70 21            DB   COMPO+3,"rp!"   
0E90                          .ORG   vvCODE   
0E90   C5                     DB   0C5h   ; PUSH	BC	;11t
0E91   DD E1                  DB   0DDh,0E1h   ; POP IX	;14t
0E93   C1                     DB   0C1h   ; POP	BC	;10t
0E94                          ;*Macro unroll: 	mNEXT
0E94   EB                     EX   DE,HL   
0E95                          ;*Macro unroll:  mNEXTHL                         ; 34t
0E95   FD E9                  JP   (IY)   ; 34t
0E97                             ;   SP@         ( -- a )
0E97                             ;               Push the current data stack pointer.
0E97                          ;*Macro unroll: mCODE	3, 'sp@', SPAT
0E97                          ALIGN   2   
0E98                SPAT:        
0E98                VVCODE:   .SET   $   
0E98                VVLEN:    .SET   (3 & 01FH) / CELLL   
14C6                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
14C6                VVNAME:   .SET   $   
14C6   98 0E D2 14            DW   vvCODE,vvLINK   
14CA                VVLINK:   .SET   $   
14CA   03 73 70 40            DB   3,"sp@"   
0E98                          .ORG   vvCODE   
0E98   C5                     DB   0C5h   ; PUSH	BC	;11t
0E99   21                     DB   021h   ; LD	HL,0	;10t
0E9A   00 00                  DW   0   
0E9C   39                     DB   039h   ; ADD	HL,SP	;11t
0E9D   44                     DB   044h   ; LD	B,H	; 4t
0E9E   4D                     DB   04Dh   ; LD	C,L	; 4t
0E9F                          ;*Macro unroll: 	mNEXT
0E9F   EB                     EX   DE,HL   
0EA0                          ;*Macro unroll:  mNEXTHL                         ; 34t
0EA0   FD E9                  JP   (IY)   ; 34t
0EA2                             ;   SP!         ( a -- )
0EA2                             ;               Set the data stack pointer.
0EA2                          ;*Macro unroll: mCODE	3,'sp!',SPSTO
0EA2                          ALIGN   2   
0EA2                SPSTO:       
0EA2                VVCODE:   .SET   $   
0EA2                VVLEN:    .SET   (3 & 01FH) / CELLL   
14BE                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
14BE                VVNAME:   .SET   $   
14BE   A2 0E CA 14            DW   vvCODE,vvLINK   
14C2                VVLINK:   .SET   $   
14C2   03 73 70 21            DB   3,"sp!"   
0EA2                          .ORG   vvCODE   
0EA2   60                     DB   060h   ; LD	H,B	; 4t
0EA3   69                     DB   069h   ; LD	L,C	; 4t
0EA4   F9                     DB   0F9h   ; LD	SP,HL	; 6t
0EA5   C1                     DB   0C1h   ; POP	BC	;10t
0EA6                          ;*Macro unroll: 	mNEXT
0EA6   EB                     EX   DE,HL   
0EA7                          ;*Macro unroll:  mNEXTHL                         ; 34t
0EA7   FD E9                  JP   (IY)   ; 34t
0EA9                             ;   +!          ( n a -- )
0EA9                             ;               Add n to the contents at address a.
0EA9                          ;*Macro unroll: mCOLON  2,'+!',PSTOR
0EA9                          ;*Macro unroll:  mCODE 2, "+!", PSTOR
0EA9                          ALIGN   2   
0EAA                PSTOR:       
0EAA                VVCODE:   .SET   $   
0EAA                VVLEN:    .SET   (2 & 01FH) / CELLL   
14B6                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
14B6                VVNAME:   .SET   $   
14B6   AA 0E C2 14            DW   vvCODE,vvLINK   
14BA                VVLINK:   .SET   $   
14BA   02 2B 21               DB   2,"+!"   
0EAA                          .ORG   vvCODE   
0EAA   00                     NOP      
0EAB   CD 12 06               CALL   doLIST   
0EAE   30 10 38 10 66 0E 8A 01 DW   SWAP,OVER,AT,PLUS   
0EB6   30 10 5C 0E 48 06      DW   SWAP,STORE,EXIT   
0EBC                             ;   2!          ( d a -- )
0EBC                             ;               STORE the double integer to address a.
0EBC                          ;*Macro unroll: mCOLON  2,'2!',DSTOR
0EBC                          ;*Macro unroll:  mCODE 2, "2!", DSTOR
0EBC                          ALIGN   2   
0EBC                DSTOR:       
0EBC                VVCODE:   .SET   $   
0EBC                VVLEN:    .SET   (2 & 01FH) / CELLL   
14AE                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
14AE                VVNAME:   .SET   $   
14AE   BC 0E BA 14            DW   vvCODE,vvLINK   
14B2                VVLINK:   .SET   $   
14B2   02 32 21               DB   2,"2!"   
0EBC                          .ORG   vvCODE   
0EBC   00                     NOP      
0EBD   CD 12 06               CALL   doLIST   
0EC0   30 10 38 10 5C 0E      DW   SWAP,OVER,STORE   
0EC6   86 03 5C 0E 48 06      DW   CELLP,STORE,EXIT   
0ECC                             ;   2@          ( a -- d )
0ECC                             ;               Fetch double integer from address a.
0ECC                          ;*Macro unroll: mCOLON  2,'2@',DAT
0ECC                          ;*Macro unroll:  mCODE 2, "2@", DAT
0ECC                          ALIGN   2   
0ECC                DAT:         
0ECC                VVCODE:   .SET   $   
0ECC                VVLEN:    .SET   (2 & 01FH) / CELLL   
14A6                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
14A6                VVNAME:   .SET   $   
14A6   CC 0E B2 14            DW   vvCODE,vvLINK   
14AA                VVLINK:   .SET   $   
14AA   02 32 40               DB   2,"2@"   
0ECC                          .ORG   vvCODE   
0ECC   00                     NOP      
0ECD   CD 12 06               CALL   doLIST   
0ED0   28 10 86 03 66 0E      DW   DUPP,CELLP,AT   
0ED6   30 10 66 0E 48 06      DW   SWAP,AT,EXIT   
0EDC                             ;   COUNT       ( b -- b +n )
0EDC                             ;               Return count byte of a string and add 1 to byte address.
0EDC                          ;*Macro unroll: mCOLON  5,'COUNT',COUNT
0EDC                          ;*Macro unroll:  mCODE 5, "COUNT", COUNT
0EDC                          ALIGN   2   
0EDC                COUNT:       
0EDC                VVCODE:   .SET   $   
0EDC                VVLEN:    .SET   (5 & 01FH) / CELLL   
149C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
149C                VVNAME:   .SET   $   
149C   DC 0E AA 14            DW   vvCODE,vvLINK   
14A0                VVLINK:   .SET   $   
14A0   05 43 4F 55 4E 54      DB   5,"COUNT"   
0EDC                          .ORG   vvCODE   
0EDC   00                     NOP      
0EDD   CD 12 06               CALL   doLIST   
0EE0   28 10 20 06 01 00 8A 01 DW   DUPP,DOLIT,1,PLUS   
0EE8   30 10 76 0E 48 06      DW   SWAP,CAT,EXIT   
0EEE                             ;   HERE        ( -- a )
0EEE                             ;               Return the top of the code dictionary.
0EEE                          ;*Macro unroll: mCOLON  4,'HERE',HERE
0EEE                          ;*Macro unroll:  mCODE 4, "HERE", HERE
0EEE                          ALIGN   2   
0EEE                HERE:        
0EEE                VVCODE:   .SET   $   
0EEE                VVLEN:    .SET   (4 & 01FH) / CELLL   
1492                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1492                VVNAME:   .SET   $   
1492   EE 0E A0 14            DW   vvCODE,vvLINK   
1496                VVLINK:   .SET   $   
1496   04 48 45 52 45         DB   4,"HERE"   
0EEE                          .ORG   vvCODE   
0EEE   00                     NOP      
0EEF   CD 12 06               CALL   doLIST   
0EF2   48 11 66 0E 48 06      DW   CP,AT,EXIT   
0EF8                             ;   PAD         ( -- a )
0EF8                             ;               Return the address of a temporary buffer.
0EF8                          ;*Macro unroll: mCOLON  3,'PAD',PAD
0EF8                          ;*Macro unroll:  mCODE 3, "PAD", PAD
0EF8                          ALIGN   2   
0EF8                PAD:         
0EF8                VVCODE:   .SET   $   
0EF8                VVLEN:    .SET   (3 & 01FH) / CELLL   
148A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
148A                VVNAME:   .SET   $   
148A   F8 0E 96 14            DW   vvCODE,vvLINK   
148E                VVLINK:   .SET   $   
148E   03 50 41 44            DB   3,"PAD"   
0EF8                          .ORG   vvCODE   
0EF8   00                     NOP      
0EF9   CD 12 06               CALL   doLIST   
0EFC   EE 0E 20 06 50 00 8A 01 48 06 DW   HERE,DOLIT,80,PLUS,EXIT   
0F06                             ;   TIB         ( -- a )
0F06                             ;               Return the address of the terminal input buffer.
0F06                          ;*Macro unroll: mCOLON  3,'TIB',TIB
0F06                          ;*Macro unroll:  mCODE 3, "TIB", TIB
0F06                          ALIGN   2   
0F06                TIB:         
0F06                VVCODE:   .SET   $   
0F06                VVLEN:    .SET   (3 & 01FH) / CELLL   
1482                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1482                VVNAME:   .SET   $   
1482   06 0F 8E 14            DW   vvCODE,vvLINK   
1486                VVLINK:   .SET   $   
1486   03 54 49 42            DB   3,"TIB"   
0F06                          .ORG   vvCODE   
0F06   00                     NOP      
0F07   CD 12 06               CALL   doLIST   
0F0A   08 11 86 03 66 0E 48 06 DW   NTIB,CELLP,AT,EXIT   
0F12                             ;   @EXECUTE    ( a -- )
0F12                             ;               Execute vector STOREd in address a.
0F12                          ;*Macro unroll: hCOLON  8,'@EXECUTE',ATEXE
0F12                          ;*Macro unroll:  hCODE 8, "@EXECUTE", ATEXE
0F12                          ALIGN   2   
0F12                ATEXE:       
0F12   00                     NOP      
0F13   CD 12 06               CALL   doLIST   
0F16   66 0E 40 10            DW   AT,QDUP   ;?address or zero
0F1A   40 0E 20 0F            DW   QBRAN,EXE1   
0F1E   3C 0E                  DW   EXECU   ;execute if non-zero
0F20                EXE1:        
0F20   48 06                  DW   EXIT   ;do nothing if zero
0F22                             ;   CMOVE       ( b1 b2 u -- )
0F22                             ;               Copy u bytes from b1 to b2.
0F22                          ;*Macro unroll: mCOLON  5,'CMOVE',CMOVE
0F22                          ;*Macro unroll:  mCODE 5, "CMOVE", CMOVE
0F22                          ALIGN   2   
0F22                CMOVE:       
0F22                VVCODE:   .SET   $   
0F22                VVLEN:    .SET   (5 & 01FH) / CELLL   
1478                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1478                VVNAME:   .SET   $   
1478   22 0F 86 14            DW   vvCODE,vvLINK   
147C                VVLINK:   .SET   $   
147C   05 43 4D 4F 56 45      DB   5,"CMOVE"   
0F22                          .ORG   vvCODE   
0F22   00                     NOP      
0F23   CD 12 06               CALL   doLIST   
0F26   0C 10                  DW   TOR   
0F28   4C 0E 44 0F            DW   BRAN,CMOV2   
0F2C                CMOV1:       
0F2C   0C 10 28 10 76 0E      DW   TOR,DUPP,CAT   
0F32   7E 0E 6E 0E            DW   RAT,CSTOR   
0F36   20 06 01 00 8A 01      DW   DOLIT,1,PLUS   
0F3C   1A 10 20 06 01 00 8A 01 DW   RFROM,DOLIT,1,PLUS   
0F44                CMOV2:       
0F44   76 06 2C 0F            DW   DONXT,CMOV1   
0F48   5C 10 48 06            DW   DDROP,EXIT   
0F4C                             ;   FILL        ( b u c -- )
0F4C                             ;               Fill u bytes of character c to area beginning at b.
0F4C                          ;*Macro unroll: mCOLON  4,'FILL',FILL
0F4C                          ;*Macro unroll:  mCODE 4, "FILL", FILL
0F4C                          ALIGN   2   
0F4C                FILL:        
0F4C                VVCODE:   .SET   $   
0F4C                VVLEN:    .SET   (4 & 01FH) / CELLL   
146E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
146E                VVNAME:   .SET   $   
146E   4C 0F 7C 14            DW   vvCODE,vvLINK   
1472                VVLINK:   .SET   $   
1472   04 46 49 4C 4C         DB   4,"FILL"   
0F4C                          .ORG   vvCODE   
0F4C   00                     NOP      
0F4D   CD 12 06               CALL   doLIST   
0F50   30 10 0C 10 30 10      DW   SWAP,TOR,SWAP   
0F56   4C 0E 64 0F            DW   BRAN,FILL2   
0F5A                FILL1:       
0F5A   66 10 6E 0E 20 06 01 00 8A 01 DW   DDUP,CSTOR,DOLIT,1,PLUS   
0F64                FILL2:       
0F64   76 06 5A 0F            DW   DONXT,FILL1   
0F68   5C 10 48 06            DW   DDROP,EXIT   
0F6C                             ;   -TRAILING   ( b u -- b u )
0F6C                             ;               Adjust the count to eliminate trailing white space.
0F6C                          ;*Macro unroll: mCOLON  9,'-TRAILING',DTRAI
0F6C                          ;*Macro unroll:  mCODE 9, "-TRAILING", DTRAI
0F6C                          ALIGN   2   
0F6C                DTRAI:       
0F6C                VVCODE:   .SET   $   
0F6C                VVLEN:    .SET   (9 & 01FH) / CELLL   
1460                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1460                VVNAME:   .SET   $   
1460   6C 0F 72 14            DW   vvCODE,vvLINK   
1464                VVLINK:   .SET   $   
1464   09 2D 54 52 41 49 4C 49 4E 47 DB   9,"-TRAILING"   
0F6C                          .ORG   vvCODE   
0F6C   00                     NOP      
0F6D   CD 12 06               CALL   doLIST   
0F70   0C 10                  DW   TOR   
0F72   4C 0E 90 0F            DW   BRAN,DTRA2   
0F76                DTRA1:       
0F76   5C 07 38 10 7E 0E 8A 01 76 0E 10 02 DW   BLANK,OVER,RAT,PLUS,CAT,LESS   
0F82   40 0E 90 0F            DW   QBRAN,DTRA2   
0F86   1A 10 20 06 01 00 8A 01 48 06 DW   RFROM,DOLIT,1,PLUS,EXIT   ;adjusted count
0F90                DTRA2:       
0F90   76 06 76 0F            DW   DONXT,DTRA1   
0F94   20 06 00 00 48 06      DW   DOLIT,0,EXIT   ;count=0
0F9A                             ;   PACK$       ( b u a -- a )
0F9A                             ;               Build a counted string with u characters from b. Null fill.
0F9A                          ;*Macro unroll: mCOLON  5,'PACK$',PACKS
0F9A                          ;*Macro unroll:  mCODE 5, "PACK$", PACKS
0F9A                          ALIGN   2   
0F9A                PACKS:       
0F9A                VVCODE:   .SET   $   
0F9A                VVLEN:    .SET   (5 & 01FH) / CELLL   
1456                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1456                VVNAME:   .SET   $   
1456   9A 0F 64 14            DW   vvCODE,vvLINK   
145A                VVLINK:   .SET   $   
145A   05 50 41 43 4B 24      DB   5,"PACK$"   
0F9A                          .ORG   vvCODE   
0F9A   00                     NOP      
0F9B   CD 12 06               CALL   doLIST   
0F9E   D4 0F 28 10 0C 10      DW   ALGND,DUPP,TOR   ;strings only on cell boundary
0FA4   38 10 28 10 20 06 00 00 DW   OVER,DUPP,DOLIT,0   
0FAC   20 06 02 00 6E 02 2C 10 DW   DOLIT,CELLL,UMMOD,DROP   ;count mod cell
0FB4   C4 01 38 10 8A 01      DW   SUBB,OVER,PLUS   
0FBA   20 06 00 00 30 10 5C 0E DW   DOLIT,0,SWAP,STORE   ;null fill cell
0FC2   66 10 6E 0E 20 06 01 00 8A 01 DW   DDUP,CSTOR,DOLIT,1,PLUS   ;save count
0FCC   30 10 22 0F 1A 10 48 06 DW   SWAP,CMOVE,RFROM,EXIT   ;move string
0FD4                             ;   ALIGNED     ( b -- a )
0FD4                             ;               Align address to the cell boundary.
0FD4                          ;*Macro unroll: mCOLON  7,'ALIGNED', ALGND
0FD4                          ;*Macro unroll:  mCODE 7, "ALIGNED", ALGND
0FD4                          ALIGN   2   
0FD4                ALGND:       
0FD4                VVCODE:   .SET   $   
0FD4                VVLEN:    .SET   (7 & 01FH) / CELLL   
144A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
144A                VVNAME:   .SET   $   
144A   D4 0F 5A 14            DW   vvCODE,vvLINK   
144E                VVLINK:   .SET   $   
144E   07 41 4C 49 47 4E 45 44 DB   7,"ALIGNED"   
0FD4                          .ORG   vvCODE   
0FD4   00                     NOP      
0FD5   CD 12 06               CALL   doLIST   
0FD8   28 10 20 06 00 00 20 06 02 00 DW   DUPP,DOLIT,0,DOLIT,CELLL   
0FE2   6E 02 2C 10 28 10      DW   UMMOD,DROP,DUPP   
0FE8   40 0E F4 0F            DW   QBRAN,ALGN1   
0FEC   20 06 02 00 30 10 C4 01 DW   DOLIT,CELLL,SWAP,SUBB   
0FF4                ALGN1:       
0FF4   8A 01 48 06            DW   PLUS,EXIT   
0FF8                             ; GREETING:       .cstr   "Type something\r\n"
0FF8   44 49 56 5A 45 52 4F 00 ERR_DIVZERO:   .CSTR   "DIVZERO"   ;-10
1000   4F 55 54 4F 46 52 41 4E 47 45 00 ERR_OUTOFRANGE:   .CSTR   "OUTOFRANGE"   ;-11
100B                             ;   >R          ( w -- )
100B                             ;               Push the data stack to the return stack.
100B                          ;*Macro unroll: mCODE	COMPO+2, '>R', ToR
100B                          ALIGN   2   
100C                TOR:         
100C                VVCODE:   .SET   $   
100C                VVLEN:    .SET   (COMPO+2 & 01FH) / CELLL   
1422                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1422                VVNAME:   .SET   $   
1422   0C 10 4E 14            DW   vvCODE,vvLINK   
1426                VVLINK:   .SET   $   
1426   22 3E 52               DB   COMPO+2,">R"   
100C                          .ORG   vvCODE   
100C   DD 2B                  DEC   IX   
100E   DD 70 00               LD   (IX+0),B   
1011   DD 2B                  DEC   IX   
1013   DD 71 00               LD   (IX+0),C   
1016   C1                     POP   BC   
1017                          ;*Macro unroll: 	mNEXT
1017   EB                     EX   DE,HL   
1018                          ;*Macro unroll:  mNEXTHL                         ; 34t
1018   FD E9                  JP   (IY)   ; 34t
101A                             ;   R>          ( -- w )
101A                             ;               Pop the return stack to the data stack.
101A                          ;*Macro unroll: mCODE	COMPO+2, 'R>', RFrom
101A                          ALIGN   2   
101A                RFROM:       
101A                VVCODE:   .SET   $   
101A                VVLEN:    .SET   (COMPO+2 & 01FH) / CELLL   
13FA                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
13FA                VVNAME:   .SET   $   
13FA   1A 10 26 14            DW   vvCODE,vvLINK   
13FE                VVLINK:   .SET   $   
13FE   22 52 3E               DB   COMPO+2,"R>"   
101A                          .ORG   vvCODE   
101A   C5                     PUSH   BC   
101B   DD 4E 00               LD   C,(IX+0)   
101E   DD 23                  INC   IX   
1020   DD 46 00               LD   B,(IX+0)   
1023   DD 23                  INC   IX   
1025                          ;*Macro unroll: 	mNEXT
1025   EB                     EX   DE,HL   
1026                          ;*Macro unroll:  mNEXTHL                         ; 34t
1026   FD E9                  JP   (IY)   ; 34t
1028                             ;   DUP         ( w -- w w )
1028                             ;               Duplicate the top stack item.
1028                          ;*Macro unroll: mCODE	3, 'DUP', DUPP
1028                          ALIGN   2   
1028                DUPP:        
1028                VVCODE:   .SET   $   
1028                VVLEN:    .SET   (3 & 01FH) / CELLL   
13F2                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
13F2                VVNAME:   .SET   $   
13F2   28 10 FE 13            DW   vvCODE,vvLINK   
13F6                VVLINK:   .SET   $   
13F6   03 44 55 50            DB   3,"DUP"   
1028                          .ORG   vvCODE   
1028   C5                     PUSH   BC   
1029                          ;*Macro unroll:  mNEXT
1029   EB                     EX   DE,HL   
102A                          ;*Macro unroll:  mNEXTHL                         ; 34t
102A   FD E9                  JP   (IY)   ; 34t
102C                             ;   DROP	( x -- )			\ CORE
102C                             ;		Discard top stack item.
102C                          ;*Macro unroll: mCODE	4, 'DROP', DROP
102C                          ALIGN   2   
102C                DROP:        
102C                VVCODE:   .SET   $   
102C                VVLEN:    .SET   (4 & 01FH) / CELLL   
13E8                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
13E8                VVNAME:   .SET   $   
13E8   2C 10 F6 13            DW   vvCODE,vvLINK   
13EC                VVLINK:   .SET   $   
13EC   04 44 52 4F 50         DB   4,"DROP"   
102C                          .ORG   vvCODE   
102C   C1                     POP   BC   
102D                          ;*Macro unroll:  mNEXT
102D   EB                     EX   DE,HL   
102E                          ;*Macro unroll:  mNEXTHL                         ; 34t
102E   FD E9                  JP   (IY)   ; 34t
1030                             ;   SWAP        ( w1 w2 -- w2 w1 )
1030                             ;               Exchange top two stack items.
1030                          ;*Macro unroll: mCODE	4, 'SWAP', SWAP
1030                          ALIGN   2   
1030                SWAP:        
1030                VVCODE:   .SET   $   
1030                VVLEN:    .SET   (4 & 01FH) / CELLL   
13DE                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
13DE                VVNAME:   .SET   $   
13DE   30 10 EC 13            DW   vvCODE,vvLINK   
13E2                VVLINK:   .SET   $   
13E2   04 53 57 41 50         DB   4,"SWAP"   
1030                          .ORG   vvCODE   
1030   E1                     POP   HL   
1031   C5                     PUSH   BC   
1032   44                     LD   B,H   
1033   4D                     LD   C,L   
1034                          ;*Macro unroll: 	mNEXT
1034   EB                     EX   DE,HL   
1035                          ;*Macro unroll:  mNEXTHL                         ; 34t
1035   FD E9                  JP   (IY)   ; 34t
1037                             ;   OVER        ( w1 w2 -- w1 w2 w1 )
1037                             ;               Copy second stack item to top.
1037                          ;*Macro unroll: mCODE	4, 'OVER', OVER
1037                          ALIGN   2   
1038                OVER:        
1038                VVCODE:   .SET   $   
1038                VVLEN:    .SET   (4 & 01FH) / CELLL   
13D4                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
13D4                VVNAME:   .SET   $   
13D4   38 10 E2 13            DW   vvCODE,vvLINK   
13D8                VVLINK:   .SET   $   
13D8   04 4F 56 45 52         DB   4,"OVER"   
1038                          .ORG   vvCODE   
1038   E1                     POP   HL   
1039   E5                     PUSH   HL   
103A   C5                     PUSH   BC   
103B   44                     LD   B,H   
103C   4D                     LD   C,L   
103D                          ;*Macro unroll: 	mNEXT
103D   EB                     EX   DE,HL   
103E                          ;*Macro unroll:  mNEXTHL                         ; 34t
103E   FD E9                  JP   (IY)   ; 34t
1040                             ;   ?DUP        ( w -- w w | 0 )
1040                             ;               Dup tos if its is not zero.
1040                          ;*Macro unroll: mCOLON	4,'?DUP', QDUP
1040                          ;*Macro unroll:  mCODE 4, "?DUP", QDUP
1040                          ALIGN   2   
1040                QDUP:        
1040                VVCODE:   .SET   $   
1040                VVLEN:    .SET   (4 & 01FH) / CELLL   
13CA                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
13CA                VVNAME:   .SET   $   
13CA   40 10 D8 13            DW   vvCODE,vvLINK   
13CE                VVLINK:   .SET   $   
13CE   04 3F 44 55 50         DB   4,"?DUP"   
1040                          .ORG   vvCODE   
1040   00                     NOP      
1041   CD 12 06               CALL   doLIST   
1044   28 10 40 0E 4C 10      DW   DUPP,QBRAN,QDUP1   
104A   28 10                  DW   DUPP   
104C                QDUP1:       
104C   48 06                  DW   EXIT   
104E                             ;   ROT         ( w1 w2 w3 -- w2 w3 w1 )
104E                             ;               Rot 3rd item to top.
104E                          ;*Macro unroll: mCOLON	3,'ROT', ROT
104E                          ;*Macro unroll:  mCODE 3, "ROT", ROT
104E                          ALIGN   2   
104E                ROT:         
104E                VVCODE:   .SET   $   
104E                VVLEN:    .SET   (3 & 01FH) / CELLL   
13C2                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
13C2                VVNAME:   .SET   $   
13C2   4E 10 CE 13            DW   vvCODE,vvLINK   
13C6                VVLINK:   .SET   $   
13C6   03 52 4F 54            DB   3,"ROT"   
104E                          .ORG   vvCODE   
104E   00                     NOP      
104F   CD 12 06               CALL   doLIST   
1052   0C 10 30 10 1A 10 30 10 48 06 DW   ToR,SWAP,RFrom,SWAP,EXIT   
105C                             ;   2DROP       ( w w -- )
105C                             ;               Discard two items on stack.
105C                          ;*Macro unroll: mCOLON	5,'2DROP',DDROP
105C                          ;*Macro unroll:  mCODE 5, "2DROP", DDROP
105C                          ALIGN   2   
105C                DDROP:       
105C                VVCODE:   .SET   $   
105C                VVLEN:    .SET   (5 & 01FH) / CELLL   
13B8                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
13B8                VVNAME:   .SET   $   
13B8   5C 10 C6 13            DW   vvCODE,vvLINK   
13BC                VVLINK:   .SET   $   
13BC   05 32 44 52 4F 50      DB   5,"2DROP"   
105C                          .ORG   vvCODE   
105C   00                     NOP      
105D   CD 12 06               CALL   doLIST   
1060   2C 10 2C 10 48 06      DW   DROP,DROP,EXIT   
1066                             ;   2DUP        ( w1 w2 -- w1 w2 w1 w2 )
1066                             ;               Duplicate top two items.
1066                          ;*Macro unroll: mCOLON	4,'2DUP',DDUP
1066                          ;*Macro unroll:  mCODE 4, "2DUP", DDUP
1066                          ALIGN   2   
1066                DDUP:        
1066                VVCODE:   .SET   $   
1066                VVLEN:    .SET   (4 & 01FH) / CELLL   
13AE                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
13AE                VVNAME:   .SET   $   
13AE   66 10 BC 13            DW   vvCODE,vvLINK   
13B2                VVLINK:   .SET   $   
13B2   04 32 44 55 50         DB   4,"2DUP"   
1066                          .ORG   vvCODE   
1066   00                     NOP      
1067   CD 12 06               CALL   doLIST   
106A   38 10 38 10 48 06      DW   OVER,OVER,EXIT   
1070                             ;   2SWAP        ( w1 w2 w3 w4 -- w3 w4 w1 w2 )
1070                             ;               Exchange top two items.
1070                          ;*Macro unroll: mCOLON	5,'2SWAP',TwoSWAP
1070                          ;*Macro unroll:  mCODE 5, "2SWAP", TwoSWAP
1070                          ALIGN   2   
1070                TWOSWAP:      
1070                VVCODE:   .SET   $   
1070                VVLEN:    .SET   (5 & 01FH) / CELLL   
13A4                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
13A4                VVNAME:   .SET   $   
13A4   70 10 B2 13            DW   vvCODE,vvLINK   
13A8                VVLINK:   .SET   $   
13A8   05 32 53 57 41 50      DB   5,"2SWAP"   
1070                          .ORG   vvCODE   
1070   00                     NOP      
1071   CD 12 06               CALL   doLIST   
1074   4E 10 0C 10 4E 10 1A 10 48 06 DW   ROT,ToR,ROT,RFrom,EXIT   
107E                             ;   PICK        ( ... +n -- ... w )
107E                             ;               Copy the nth stack item to tos.
107E                          ;*Macro unroll: mCOLON  4,'PICK',PICK
107E                          ;*Macro unroll:  mCODE 4, "PICK", PICK
107E                          ALIGN   2   
107E                PICK:        
107E                VVCODE:   .SET   $   
107E                VVLEN:    .SET   (4 & 01FH) / CELLL   
139A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
139A                VVNAME:   .SET   $   
139A   7E 10 A8 13            DW   vvCODE,vvLINK   
139E                VVLINK:   .SET   $   
139E   04 50 49 43 4B         DB   4,"PICK"   
107E                          .ORG   vvCODE   
107E   00                     NOP      
107F   CD 12 06               CALL   doLIST   
1082   20 06 01 00 8A 01 9E 03 DW   DOLIT,1,PLUS,CELLS   
108A   98 0E 8A 01 66 0E 48 06 DW   SPAT,PLUS,AT,EXIT   
1092                             ;   DEPTH       ( -- n )
1092                             ;               Return the depth of the data stack.
1092                          ;*Macro unroll: mCOLON	5,'DEPTH',DEPTH
1092                          ;*Macro unroll:  mCODE 5, "DEPTH", DEPTH
1092                          ALIGN   2   
1092                DEPTH:       
1092                VVCODE:   .SET   $   
1092                VVLEN:    .SET   (5 & 01FH) / CELLL   
1390                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1390                VVNAME:   .SET   $   
1390   92 10 9E 13            DW   vvCODE,vvLINK   
1394                VVLINK:   .SET   $   
1394   05 44 45 50 54 48      DB   5,"DEPTH"   
1092                          .ORG   vvCODE   
1092   00                     NOP      
1093   CD 12 06               CALL   doLIST   
1096   98 0E A8 10 66 0E 30 10 C4 01 DW   SPAT,SZero,AT,SWAP,SUBB   
10A0   20 06 02 00 1C 03 48 06 DW   DOLIT,CELLL,Slash,EXIT   
10A8                             ;   SP0         ( -- a )
10A8                             ;               Pointer to bottom of the data stack.
10A8                          ;*Macro unroll: mUSER   3,'SP0',SZERO
10A8                          ;*Macro unroll: 	mCODE 3, "SP0", SZERO
10A8                          ALIGN   2   
10A8                SZERO:       
10A8                VVCODE:   .SET   $   
10A8                VVLEN:    .SET   (3 & 01FH) / CELLL   
1388                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1388                VVNAME:   .SET   $   
1388   A8 10 94 13            DW   vvCODE,vvLINK   
138C                VVLINK:   .SET   $   
138C   03 53 50 30            DB   3,"SP0"   
10A8                          .ORG   vvCODE   
10A8   00                     NOP      
10A9   CD 12 06               CALL   doLIST   
10AC   38 06 00 00            DW   DoUSE,vvUSER   
10B0                VVUSER:   .SET   vvUSER + CELLL   
10B0                             ;   RP0         ( -- a )
10B0                             ;               Pointer to bottom of the return stack.
10B0                          ;*Macro unroll: mUSER   3,'RP0',RZERO
10B0                          ;*Macro unroll: 	mCODE 3, "RP0", RZERO
10B0                          ALIGN   2   
10B0                RZERO:       
10B0                VVCODE:   .SET   $   
10B0                VVLEN:    .SET   (3 & 01FH) / CELLL   
1380                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1380                VVNAME:   .SET   $   
1380   B0 10 8C 13            DW   vvCODE,vvLINK   
1384                VVLINK:   .SET   $   
1384   03 52 50 30            DB   3,"RP0"   
10B0                          .ORG   vvCODE   
10B0   00                     NOP      
10B1   CD 12 06               CALL   doLIST   
10B4   38 06 02 00            DW   DoUSE,vvUSER   
10B8                VVUSER:   .SET   vvUSER + CELLL   
10B8                             ;   '?KEY       ( -- a )
10B8                             ;               Execution vector of ?KEY.
10B8                          ;*Macro unroll: hUSER   5,"'?KEY",TQKEY
10B8                          ;*Macro unroll: 	hCODE 5, "'?KEY", TQKEY
10B8                          ALIGN   2   
10B8                TQKEY:       
10B8   00                     NOP      
10B9   CD 12 06               CALL   doLIST   
10BC   38 06 04 00            DW   DoUSE,vvUSER   
10C0                VVUSER:   .SET   vvUSER + CELLL   
10C0                             ;   'EMIT       ( -- a )
10C0                             ;               Execution vector of EMIT.
10C0                          ;*Macro unroll: hUSER   5,"'EMIT",TEMIT
10C0                          ;*Macro unroll: 	hCODE 5, "'EMIT", TEMIT
10C0                          ALIGN   2   
10C0                TEMIT:       
10C0   00                     NOP      
10C1   CD 12 06               CALL   doLIST   
10C4   38 06 06 00            DW   DoUSE,vvUSER   
10C8                VVUSER:   .SET   vvUSER + CELLL   
10C8                             ;   'EXPECT     ( -- a )
10C8                             ;               Execution vector of EXPECT.
10C8                          ;*Macro unroll: hUSER   7,"'EXPECT",TEXPE
10C8                          ;*Macro unroll: 	hCODE 7, "'EXPECT", TEXPE
10C8                          ALIGN   2   
10C8                TEXPE:       
10C8   00                     NOP      
10C9   CD 12 06               CALL   doLIST   
10CC   38 06 08 00            DW   DoUSE,vvUSER   
10D0                VVUSER:   .SET   vvUSER + CELLL   
10D0                             ;   'TAP        ( -- a )
10D0                             ;               Execution vector of TAP.
10D0                          ;*Macro unroll: hUSER   4,"'TAP",TTAP
10D0                          ;*Macro unroll: 	hCODE 4, "'TAP", TTAP
10D0                          ALIGN   2   
10D0                TTAP:        
10D0   00                     NOP      
10D1   CD 12 06               CALL   doLIST   
10D4   38 06 0A 00            DW   DoUSE,vvUSER   
10D8                VVUSER:   .SET   vvUSER + CELLL   
10D8                             ;   'ECHO       ( -- a )
10D8                             ;               Execution vector of ECHO.
10D8                          ;*Macro unroll: hUSER   5,"'ECHO",TECHO
10D8                          ;*Macro unroll: 	hCODE 5, "'ECHO", TECHO
10D8                          ALIGN   2   
10D8                TECHO:       
10D8   00                     NOP      
10D9   CD 12 06               CALL   doLIST   
10DC   38 06 0C 00            DW   DoUSE,vvUSER   
10E0                VVUSER:   .SET   vvUSER + CELLL   
10E0                             ;   'PROMPT     ( -- a )
10E0                             ;               Execution vector of PROMPT.
10E0                          ;*Macro unroll: hUSER   7,"'PROMPT",TPROM
10E0                          ;*Macro unroll: 	hCODE 7, "'PROMPT", TPROM
10E0                          ALIGN   2   
10E0                TPROM:       
10E0   00                     NOP      
10E1   CD 12 06               CALL   doLIST   
10E4   38 06 0E 00            DW   DoUSE,vvUSER   
10E8                VVUSER:   .SET   vvUSER + CELLL   
10E8                             ;   BASE        ( -- a )
10E8                             ;               Storage of the radix base for numeric I/O.
10E8                          ;*Macro unroll: mUSER   4,'BASE',BASE
10E8                          ;*Macro unroll: 	mCODE 4, "BASE", BASE
10E8                          ALIGN   2   
10E8                BASE:        
10E8                VVCODE:   .SET   $   
10E8                VVLEN:    .SET   (4 & 01FH) / CELLL   
1376                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1376                VVNAME:   .SET   $   
1376   E8 10 84 13            DW   vvCODE,vvLINK   
137A                VVLINK:   .SET   $   
137A   04 42 41 53 45         DB   4,"BASE"   
10E8                          .ORG   vvCODE   
10E8   00                     NOP      
10E9   CD 12 06               CALL   doLIST   
10EC   38 06 10 00            DW   DoUSE,vvUSER   
10F0                VVUSER:   .SET   vvUSER + CELLL   
10F0                             ;   tmp         ( -- a )
10F0                             ;               A temporary storage location used in parse and find.
10F0                          ;*Macro unroll: mUSER   COMPO+3,'tmp',TEMP
10F0                          ;*Macro unroll: 	mCODE COMPO+3, "tmp", TEMP
10F0                          ALIGN   2   
10F0                TEMP:        
10F0                VVCODE:   .SET   $   
10F0                VVLEN:    .SET   (COMPO+3 & 01FH) / CELLL   
134E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
134E                VVNAME:   .SET   $   
134E   F0 10 7A 13            DW   vvCODE,vvLINK   
1352                VVLINK:   .SET   $   
1352   23 74 6D 70            DB   COMPO+3,"tmp"   
10F0                          .ORG   vvCODE   
10F0   00                     NOP      
10F1   CD 12 06               CALL   doLIST   
10F4   38 06 12 00            DW   DoUSE,vvUSER   
10F8                VVUSER:   .SET   vvUSER + CELLL   
10F8                             ;   SPAN        ( -- a )
10F8                             ;               Hold character count received by EXPECT.
10F8                          ;*Macro unroll: hUSER   4,'SPAN',SPAN
10F8                          ;*Macro unroll: 	hCODE 4, "SPAN", SPAN
10F8                          ALIGN   2   
10F8                SPAN:        
10F8   00                     NOP      
10F9   CD 12 06               CALL   doLIST   
10FC   38 06 14 00            DW   DoUSE,vvUSER   
1100                VVUSER:   .SET   vvUSER + CELLL   
1100                             ;   >IN         ( -- a )
1100                             ;               Hold the character pointer while parsing input stream.
1100                          ;*Macro unroll: mUSER   3,'>IN',INN
1100                          ;*Macro unroll: 	mCODE 3, ">IN", INN
1100                          ALIGN   2   
1100                INN:         
1100                VVCODE:   .SET   $   
1100                VVLEN:    .SET   (3 & 01FH) / CELLL   
1346                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1346                VVNAME:   .SET   $   
1346   00 11 52 13            DW   vvCODE,vvLINK   
134A                VVLINK:   .SET   $   
134A   03 3E 49 4E            DB   3,">IN"   
1100                          .ORG   vvCODE   
1100   00                     NOP      
1101   CD 12 06               CALL   doLIST   
1104   38 06 16 00            DW   DoUSE,vvUSER   
1108                VVUSER:   .SET   vvUSER + CELLL   
1108                             ;   #TIB        ( -- a )
1108                             ;               Hold the current count and address of the terminal input buffer.
1108                          ;*Macro unroll: hUSER   4,'#TIB',NTIB
1108                          ;*Macro unroll: 	hCODE 4, "#TIB", NTIB
1108                          ALIGN   2   
1108                NTIB:        
1108   00                     NOP      
1109   CD 12 06               CALL   doLIST   
110C   38 06 18 00            DW   DoUSE,vvUSER   
1110                VVUSER:   .SET   vvUSER + CELLL   
1110                VVUSER:   .SET   vvUSER + CELLL   
1110                             ;   CSP         ( -- a )
1110                             ;               Hold the stack pointer for error checking.
1110                          ;*Macro unroll: hUSER   3,'CSP',CSP
1110                          ;*Macro unroll: 	hCODE 3, "CSP", CSP
1110                          ALIGN   2   
1110                CSP:         
1110   00                     NOP      
1111   CD 12 06               CALL   doLIST   
1114   38 06 1C 00            DW   DoUSE,vvUSER   
1118                VVUSER:   .SET   vvUSER + CELLL   
1118                             ;   'EVAL       ( -- a )
1118                             ;               Execution vector of EVAL.
1118                          ;*Macro unroll: hUSER   5,"'EVAL",TEVAL
1118                          ;*Macro unroll: 	hCODE 5, "'EVAL", TEVAL
1118                          ALIGN   2   
1118                TEVAL:       
1118   00                     NOP      
1119   CD 12 06               CALL   doLIST   
111C   38 06 1E 00            DW   DoUSE,vvUSER   
1120                VVUSER:   .SET   vvUSER + CELLL   
1120                             ;   'NUMBER     ( -- a )
1120                             ;               Execution vector of NUMBER?.
1120                          ;*Macro unroll: hUSER   7,"'NUMBER",TNUMB
1120                          ;*Macro unroll: 	hCODE 7, "'NUMBER", TNUMB
1120                          ALIGN   2   
1120                TNUMB:       
1120   00                     NOP      
1121   CD 12 06               CALL   doLIST   
1124   38 06 20 00            DW   DoUSE,vvUSER   
1128                VVUSER:   .SET   vvUSER + CELLL   
1128                             ;   HLD         ( -- a )
1128                             ;               Hold a pointer in building a numeric output string.
1128                          ;*Macro unroll: hUSER   3,'HLD',HLD
1128                          ;*Macro unroll: 	hCODE 3, "HLD", HLD
1128                          ALIGN   2   
1128                HLD:         
1128   00                     NOP      
1129   CD 12 06               CALL   doLIST   
112C   38 06 22 00            DW   DoUSE,vvUSER   
1130                VVUSER:   .SET   vvUSER + CELLL   
1130                             ;   HANDLER     ( -- a )
1130                             ;               Hold the return stack pointer for error handling.
1130                          ;*Macro unroll: hUSER   7,'HANDLER',HANDL
1130                          ;*Macro unroll: 	hCODE 7, "HANDLER", HANDL
1130                          ALIGN   2   
1130                HANDL:       
1130   00                     NOP      
1131   CD 12 06               CALL   doLIST   
1134   38 06 24 00            DW   DoUSE,vvUSER   
1138                VVUSER:   .SET   vvUSER + CELLL   
1138                             ;   CONTEXT     ( -- a )
1138                             ;               A area to specify vocabulary search order.
1138                          ;*Macro unroll: hUSER   7,'CONTEXT',CNTXT
1138                          ;*Macro unroll: 	hCODE 7, "CONTEXT", CNTXT
1138                          ALIGN   2   
1138                CNTXT:       
1138   00                     NOP      
1139   CD 12 06               CALL   doLIST   
113C   38 06 26 00            DW   DoUSE,vvUSER   
1140                VVUSER:   .SET   vvUSER + CELLL   
1140                VVUSER:   .SET   vvUSER + VOCSS * CELLL   ;vocabulary stack
1140                             ;   CURRENT     ( -- a )
1140                             ;               Point to the vocabulary to be extended.
1140                          ;*Macro unroll: hUSER   7,'CURRENT',CRRNT
1140                          ;*Macro unroll: 	hCODE 7, "CURRENT", CRRNT
1140                          ALIGN   2   
1140                CRRNT:       
1140   00                     NOP      
1141   CD 12 06               CALL   doLIST   
1144   38 06 38 00            DW   DoUSE,vvUSER   
1148                VVUSER:   .SET   vvUSER + CELLL   
1148                VVUSER:   .SET   vvUSER + CELLL   ;vocabulary link pointer
1148                             ;   CP          ( -- a )
1148                             ;               Point to the top of the code dictionary.
1148                          ;*Macro unroll: hUSER   2,'CP',CP
1148                          ;*Macro unroll: 	hCODE 2, "CP", CP
1148                          ALIGN   2   
1148                CP:          
1148   00                     NOP      
1149   CD 12 06               CALL   doLIST   
114C   38 06 3C 00            DW   DoUSE,vvUSER   
1150                VVUSER:   .SET   vvUSER + CELLL   
1150                             ;   NP          ( -- a )
1150                             ;               Point to the bottom of the name dictionary.
1150                          ;*Macro unroll: hUSER   2,'NP',NP
1150                          ;*Macro unroll: 	hCODE 2, "NP", NP
1150                          ALIGN   2   
1150                NP:          
1150   00                     NOP      
1151   CD 12 06               CALL   doLIST   
1154   38 06 3E 00            DW   DoUSE,vvUSER   
1158                VVUSER:   .SET   vvUSER + CELLL   
1158                             ;   LAST        ( -- a )
1158                             ;               Point to the last name in the name dictionary.
1158                          ;*Macro unroll: mUSER   4,'LAST',LAST
1158                          ;*Macro unroll: 	mCODE 4, "LAST", LAST
1158                          ALIGN   2   
1158                LAST:        
1158                VVCODE:   .SET   $   
1158                VVLEN:    .SET   (4 & 01FH) / CELLL   
133C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
133C                VVNAME:   .SET   $   
133C   58 11 4A 13            DW   vvCODE,vvLINK   
1340                VVLINK:   .SET   $   
1340   04 4C 41 53 54         DB   4,"LAST"   
1158                          .ORG   vvCODE   
1158   00                     NOP      
1159   CD 12 06               CALL   doLIST   
115C   38 06 40 00            DW   DoUSE,vvUSER   
1160                VVUSER:   .SET   vvUSER + CELLL   
1160                             ;   forth       ( -- a )
1160                             ;               Point to the last name in the name dictionary.
1160                          ;*Macro unroll: hUSER   5,'forth',VFRTH
1160                          ;*Macro unroll: 	hCODE 5, "forth", VFRTH
1160                          ALIGN   2   
1160                VFRTH:       
1160   00                     NOP      
1161   CD 12 06               CALL   doLIST   
1164   38 06 42 00            DW   DoUSE,vvUSER   
1168                VVUSER:   .SET   vvUSER + CELLL   
1168                             ;   _TYPE       ( b u -- )
1168                             ;               Display a string. Filter non-printing characters.
1168                          ;*Macro unroll: mCOLON  5,'_TYPE',UTYPE
1168                          ;*Macro unroll:  mCODE 5, "_TYPE", UTYPE
1168                          ALIGN   2   
1168                UTYPE:       
1168                VVCODE:   .SET   $   
1168                VVLEN:    .SET   (5 & 01FH) / CELLL   
1332                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1332                VVNAME:   .SET   $   
1332   68 11 40 13            DW   vvCODE,vvLINK   
1336                VVLINK:   .SET   $   
1336   05 5F 54 59 50 45      DB   5,"_TYPE"   
1168                          .ORG   vvCODE   
1168   00                     NOP      
1169   CD 12 06               CALL   doLIST   
116C   0C 10                  DW   TOR   ;start count down loop
116E   4C 0E 80 11            DW   BRAN,UTYP2   ;skip first pass
1172                UTYP1:       
1172   28 10 76 0E 66 07 C4 0B DW   DUPP,CAT,TCHAR,EMIT   ;display only printable
117A   20 06 01 00 8A 01      DW   DOLIT,1,PLUS   ;increment address
1180                UTYP2:       
1180   76 06 72 11            DW   DONXT,UTYP1   ;loop till done
1184   2C 10 48 06            DW   DROP,EXIT   
1188                             ;   dm+         ( a u -- a )
1188                             ;               Dump u bytes from , leaving a+u on the stack.
1188                          ;*Macro unroll: hCOLON  3,'dm+',DMP
1188                          ;*Macro unroll:  hCODE 3, "dm+", DMP
1188                          ALIGN   2   
1188                DMP:         
1188   00                     NOP      
1189   CD 12 06               CALL   doLIST   
118C   38 10 20 06 04 00 A4 0C DW   OVER,DOLIT,4,UDOTR   ;display address
1194   F4 0B 0C 10            DW   SPACE,TOR   ;start count down loop
1198   4C 0E AC 11            DW   BRAN,PDUM2   ;skip first pass
119C                PDUM1:       
119C   28 10 76 0E 20 06 03 00 A4 0C DW   DUPP,CAT,DOLIT,3,UDOTR   ;display numeric data
11A6   20 06 01 00 8A 01      DW   DOLIT,1,PLUS   ;increment address
11AC                PDUM2:       
11AC   76 06 9C 11            DW   DONXT,PDUM1   ;loop till done
11B0   48 06                  DW   EXIT   
11B2                             ;   DUMP        ( a u -- )
11B2                             ;               Dump u bytes from a, in a formatted manner.
11B2                          ;*Macro unroll: mCOLON  4,'DUMP',DUMP
11B2                          ;*Macro unroll:  mCODE 4, "DUMP", DUMP
11B2                          ALIGN   2   
11B2                DUMP:        
11B2                VVCODE:   .SET   $   
11B2                VVLEN:    .SET   (4 & 01FH) / CELLL   
1328                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1328                VVNAME:   .SET   $   
1328   B2 11 36 13            DW   vvCODE,vvLINK   
132C                VVLINK:   .SET   $   
132C   04 44 55 4D 50         DB   4,"DUMP"   
11B2                          .ORG   vvCODE   
11B2   00                     NOP      
11B3   CD 12 06               CALL   doLIST   
11B6   E8 10 66 0E 0C 10 40 07 DW   BASE,AT,TOR,HEX   ;save radix, set hex
11BE   20 06 10 00 1C 03      DW   DOLIT,16,SLASH   ;change count to lines
11C4   0C 10                  DW   TOR   ;start count down loop
11C6                DUMP1:       
11C6   52 0C 20 06 10 00 66 10 88 11 DW   CR,DOLIT,16,DDUP,DMP   ;display numeric
11D0   4E 10 4E 10            DW   ROT,ROT   
11D4   F4 0B F4 0B 68 11      DW   SPACE,SPACE,UTYPE   ;display printable characters
11DA   D0 0B 94 01            DW   NUFQ,INVER   ;user control
11DE   40 0E EA 11            DW   QBRAN,DUMP2   
11E2   76 06 C6 11            DW   DONXT,DUMP1   ;loop till done
11E6   4C 0E EE 11            DW   BRAN,DUMP3   
11EA                DUMP2:       
11EA   1A 10 2C 10            DW   RFROM,DROP   ;cleanup loop stack, early exit
11EE                DUMP3:       
11EE   2C 10 1A 10 E8 10 5C 0E DW   DROP,RFROM,BASE,STORE   ;reSTORE radix
11F6   48 06                  DW   EXIT   
11F8                             ;   .S          ( ... -- ... )
11F8                             ;               Display the contents of the data stack.
11F8                          ;*Macro unroll: mCOLON  2,'.S',DOTS
11F8                          ;*Macro unroll:  mCODE 2, ".S", DOTS
11F8                          ALIGN   2   
11F8                DOTS:        
11F8                VVCODE:   .SET   $   
11F8                VVLEN:    .SET   (2 & 01FH) / CELLL   
1320                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1320                VVNAME:   .SET   $   
1320   F8 11 2C 13            DW   vvCODE,vvLINK   
1324                VVLINK:   .SET   $   
1324   02 2E 53               DB   2,".S"   
11F8                          .ORG   vvCODE   
11F8   00                     NOP      
11F9   CD 12 06               CALL   doLIST   
11FC   52 0C 92 10            DW   CR,DEPTH   ;stack depth
1200   0C 10                  DW   TOR   ;start count down loop
1202   4C 0E 0C 12            DW   BRAN,DOTS2   ;skip first pass
1206                DOTS1:       
1206   7E 0E 7E 10 CC 0C      DW   RAT,PICK,DOT   ;index stack, display contents
120C                DOTS2:       
120C   76 06 06 12            DW   DONXT,DOTS1   ;loop till done
1210                          ;*Macro unroll:  mDSTR DOTQP,' <sp'
1210   84 0C                  DW   DOTQP   
1212                VVLEN:    .SET   $   
1212   00 20 3C 73 70         DB   0," <sp"   
1217                VVCODE:   .SET   $   
1212                          .ORG   vvLEN   
1212   04                     DB   vvCODE - vvLEN - 1   
1217                          .ORG   vvCODE   
1217   48 06                  DW   EXIT   
1219                             ;   !CSP        ( -- )
1219                             ;               Save stack pointer in CSP for error checking.
1219                             ;   ?CSP        ( -- )
1219                             ;               Abort if stack pointer differs from that saved in CSP.
1219                             ;   >NAME       ( ca -- na | F )
1219                             ;               Convert code address to a name address.
1219                          ;*Macro unroll:  mCOLON  5,'>NAME',TNAME
1219                          ;*Macro unroll:  mCODE 5, ">NAME", TNAME
1219                          ALIGN   2   
121A                TNAME:       
121A                VVCODE:   .SET   $   
121A                VVLEN:    .SET   (5 & 01FH) / CELLL   
1316                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1316                VVNAME:   .SET   $   
1316   1A 12 24 13            DW   vvCODE,vvLINK   
131A                VVLINK:   .SET   $   
131A   05 3E 4E 41 4D 45      DB   5,">NAME"   
121A                          .ORG   vvCODE   
121A   00                     NOP      
121B   CD 12 06               CALL   doLIST   
121E   40 11                  DW   CRRNT   ;vocabulary link
1220                TNAM1:       
1220   86 03 66 0E 40 10      DW   CELLP,AT,QDUP   ;check all vocabularies
1226   40 0E 58 12            DW   QBRAN,TNAM4   
122A   66 10                  DW   DDUP   
122C                TNAM2:       
122C   66 0E 28 10            DW   AT,DUPP   ;?last word in a vocabulary
1230   40 0E 44 12            DW   QBRAN,TNAM3   
1234   66 10 72 09 80 01      DW   DDUP,NAMET,XORR   ;compare
123A   40 0E 44 12            DW   QBRAN,TNAM3   
123E   92 03                  DW   CELLM   ;continue with next word
1240   4C 0E 2C 12            DW   BRAN,TNAM2   
1244                TNAM3:       
1244   30 10 2C 10 40 10      DW   SWAP,DROP,QDUP   
124A   40 0E 20 12            DW   QBRAN,TNAM1   
124E   30 10 2C 10 30 10 2C 10 48 06 DW   SWAP,DROP,SWAP,DROP,EXIT   
1258                TNAM4:       
1258   2C 10 20 06 00 00 48 06 DW   DROP,DOLIT,0,EXIT   ;false flag
1260                             ;   .ID         ( na -- )
1260                             ;               Display the name at address.
1260                          ;*Macro unroll: mCOLON  3,'.ID',DOTID
1260                          ;*Macro unroll:  mCODE 3, ".ID", DOTID
1260                          ALIGN   2   
1260                DOTID:       
1260                VVCODE:   .SET   $   
1260                VVLEN:    .SET   (3 & 01FH) / CELLL   
130E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
130E                VVNAME:   .SET   $   
130E   60 12 1A 13            DW   vvCODE,vvLINK   
1312                VVLINK:   .SET   $   
1312   03 2E 49 44            DB   3,".ID"   
1260                          .ORG   vvCODE   
1260   00                     NOP      
1261   CD 12 06               CALL   doLIST   
1264   40 10                  DW   QDUP   ;if zero no name
1266   40 0E 76 12            DW   QBRAN,DOTI1   
126A   DC 0E 20 06 1F 00 6C 01 DW   COUNT,DOLIT,MASKK,ANDD   ;mask lexicon bits
1272   68 11 48 06            DW   UTYPE,EXIT   ;display name string
1276                DOTI1:       
1276                          ;*Macro unroll:  mDSTR   DOTQP,' {noName}'
1276   84 0C                  DW   DOTQP   
1278                VVLEN:    .SET   $   
1278   00 20 7B 6E 6F 4E 61 6D 65 7D DB   0," {noName}"   
1282                VVCODE:   .SET   $   
1278                          .ORG   vvLEN   
1278   09                     DB   vvCODE - vvLEN - 1   
1282                          .ORG   vvCODE   
1282   48 06                  DW   EXIT   
1284                             ;   SEE         ( -- ; <string> )
1284                             ;               A simple decompiler.
1284                          ;*Macro unroll: mCOLON  3,'SEE',SEE
1284                          ;*Macro unroll:  mCODE 3, "SEE", SEE
1284                          ALIGN   2   
1284                SEE:         
1284                VVCODE:   .SET   $   
1284                VVLEN:    .SET   (3 & 01FH) / CELLL   
1306                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1306                VVNAME:   .SET   $   
1306   84 12 12 13            DW   vvCODE,vvLINK   
130A                VVLINK:   .SET   $   
130A   03 53 45 45            DB   3,"SEE"   
1284                          .ORG   vvCODE   
1284   00                     NOP      
1285   CD 12 06               CALL   doLIST   
1288   AA 03                  DW   TICK   ;starting address
128A   52 0C 86 03            DW   CR,CELLP   
128E                SEE1:        
128E   86 03 28 10 66 0E 28 10 DW   CELLP,DUPP,AT,DUPP   ;?does it contain a zero
1296   40 0E 9C 12            DW   QBRAN,SEE2   
129A   1A 12                  DW   TNAME   ;?is it a name
129C                SEE2:        
129C   40 10                  DW   QDUP   ;name address or zero
129E   40 0E AA 12            DW   QBRAN,SEE3   
12A2   F4 0B 60 12            DW   SPACE,DOTID   ;display name
12A6   4C 0E B0 12            DW   BRAN,SEE4   
12AA                SEE3:        
12AA   28 10 66 0E BC 0C      DW   DUPP,AT,UDOT   ;display number
12B0                SEE4:        
12B0   D0 0B                  DW   NUFQ   ;user control
12B2   40 0E 8E 12            DW   QBRAN,SEE1   
12B6   2C 10 48 06            DW   DROP,EXIT   
12BA                             ;   WORDS       ( -- )
12BA                             ;               Display the names in the context vocabulary.
12BA                             ;   COLD        ( -- )
12BA                             ;               The hilevel cold start sequence.
12BA                LASTN:    EQU   vvNAME+4   ;last name address
2000                          .ORG   END_ROM   
2000                          .ORG   START_RAM   
2000                          IF   TESTMODE   
                    TESTS_START:      
                              LD   HL,DONE   
                              CALL   PRINTSZ   
                              HALT      
                    DONE:     .CSTR   "Done!\r\n"   
2000                          ENDIF      
2000                          DS   DTS   ; data stack size
2200                SPP:         ; SP0 grows down
2200                TIBB:        
2200                          DS   RTS   ; return stack size
2400                RPP:         ; RP0 grows down (into TIBB)
2400                UPP:         
2400   00 00        VARSZERO:   DW   0   ; SP0
2402   00 00        VARRZERO:   DW   0   ; RP0
2404   00 00        VARTQKEY:   DW   0   ; '?KEY
2406   00 00        VARTEMIT:   DW   0   ; 'EMIT
2408   00 00        VARTEXPE:   DW   0   ; 'EXPECT
240A   00 00        VARTTAP:   DW   0   ; 'TAP
240C   00 00        VARTECHO:   DW   0   ; 'ECHO
240E   00 00        VARTPROM:   DW   0   ; 'PROMPT
2410   00 00        VARBASE:   DW   0   ; BASE
2412   00 00        VARTEMP:   DW   0   ; tmp
2414   00 00        VARSPAN:   DW   0   ; SPAN
2416   00 00        VARINN:   DW   0   ; >IN
2418   00 00        VARNTIB:   DW   0   ; #TIB
241A   00 00        VARTIB:   DW   0   ; TIB
241C   00 00        VARCSP:   DW   0   ; CSP
241E   00 00        VARTEVAL:   DW   0   ; 'EVAL
2420   00 00        VARTNUMB:   DW   0   ; 'NUMBER
2422   00 00        VARHLD:   DW   0   ; HLD
2424   00 00        VARHANDL:   DW   0   ; HANDLER
2426   00 00        VARCNTXT:   DW   0   ; CONTEXT pointer
2428   00 00        VARVOCABS:   DW   0   ; vocabulary stack    ???
242A   00 00        VARCRRNT:   DW   0   ; CURRENT pointer
242C   00 00        VARVOCABLP:   DW   0   ; vocabulary link pointer ???
242E   00 00        VARCP:    DW   0   ; CP  for runing phase on RAM
2430   00 00        VARNP:    DW   0   ; NP  for runing phase on RAM
2432   00 00        VARLAST:   DW   0   ; LAST
2434   00 00        VARVFRTH:   DW   0   ; FORTH   \ mullti-user ???
2436   00 00        VARVOCABL:   DW   0   ; vocabulary link       ???
2438   00 00        SERINPTR:   DW   0   
243A   00 00        SERRDPTR:   DW   0   
243C   00 00        SERBUFUSED:   DW   0   
243E                SERBUF:   DS   SER_BUFSIZE   
247D                VECTAB:      
247D   00 00        VRST08:   DW   0   
247F   00 00        VRST10:   DW   0   
2481   00 00        VRST18:   DW   0   
2483   00 00        VRST20:   DW   0   
2485   00 00        VRST28:   DW   0   
2487   00 00        VRST30:   DW   0   
2489   00 00        VINT:     DW   0   
248B   00 00        VNMI:     DW   0   
248D                CPP:         ; grows up
FFFE                          .ORG   END_RAM - 2   
FFFE                NPP:         ; grows down
FFFE                          .END      


TESTMODE:           0000 DEFINED AT LINE 3
MEM_SIZE:           10000 DEFINED AT LINE 1 IN constants.z80
                    > USED AT LINE 3 IN constants.z80
                    > USED AT LINE 12 IN constants.z80
ROM_SIZE:           2000 DEFINED AT LINE 2 IN constants.z80
                    > USED AT LINE 3 IN constants.z80
                    > USED AT LINE 6 IN constants.z80
                    > USED AT LINE 8 IN constants.z80
RAM_SIZE:           E000 DEFINED AT LINE 3 IN constants.z80
                    > USED AT LINE 9 IN constants.z80
START_ROM:          0000 DEFINED AT LINE 5 IN constants.z80
                    > USED AT LINE 8
END_ROM:            2000 DEFINED AT LINE 6 IN constants.z80
                    > USED AT LINE 4 IN word.macro.z80
                    > USED AT LINE 93
START_RAM:          2000 DEFINED AT LINE 8 IN constants.z80
                    > USED AT LINE 9 IN constants.z80
                    > USED AT LINE 94
END_RAM:            10000 DEFINED AT LINE 9 IN constants.z80
                    > USED AT LINE 54 IN variables.z80
BM:                 0000 DEFINED AT LINE 11 IN constants.z80
                    > USED AT LINE 5 IN constants.z80
                    > USED AT LINE 6 IN constants.z80
                    > USED AT LINE 8 IN constants.z80
                    > USED AT LINE 12 IN constants.z80
EM:                 10000 DEFINED AT LINE 12 IN constants.z80
COMPO:              0020 DEFINED AT LINE 14 IN constants.z80
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
IMEDD:              0040 DEFINED AT LINE 15 IN constants.z80
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 133 IN core-compiler.z80
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
MASKK:              001F DEFINED AT LINE 16 IN constants.z80
CHARR:              0001 DEFINED AT LINE 18 IN constants.z80
CELLL:              0002 DEFINED AT LINE 19 IN constants.z80
                    > USED AT LINE 39 IN constants.z80
                    > USED AT LINE 40 IN constants.z80
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 319 IN core-alu.z80
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 324 IN core-alu.z80
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 329 IN core-alu.z80
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 145 IN core-interpret.z80
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 184 IN core-memory.z80
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 196 IN core-memory.z80
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 90 IN core-stacks.z80
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 33
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 33
                    > USED AT LINE 63
                    > USED AT LINE 63
                    > USED AT LINE 63
                    > USED AT LINE 63
                    > USED AT LINE 63
                    > USED AT LINE 63
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 33
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 33
                    > USED AT LINE 63
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 33
                    > USED AT LINE 63
                    > USED AT LINE 65 IN core-user.z80
                    > USED AT LINE 63
                    > USED AT LINE 63
                    > USED AT LINE 63
                    > USED AT LINE 63
                    > USED AT LINE 63
                    > USED AT LINE 63
                    > USED AT LINE 96 IN core-user.z80
                    > USED AT LINE 63
                    > USED AT LINE 102 IN core-user.z80
                    > USED AT LINE 63
                    > USED AT LINE 63
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 33
                    > USED AT LINE 63
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
BASEE:              000A DEFINED AT LINE 20 IN constants.z80
                    > USED AT LINE 13 IN defaults.z80
VOCSS:              0008 DEFINED AT LINE 21 IN constants.z80
                    > USED AT LINE 96 IN core-user.z80
MAXCHAR:            00FF DEFINED AT LINE 23 IN constants.z80
MAXSIGNED:          7FFF DEFINED AT LINE 24 IN constants.z80
MAXUNSIGNED:        FFFF DEFINED AT LINE 25 IN constants.z80
MAXNEGATIVE:        8000 DEFINED AT LINE 26 IN constants.z80
BKSPP:              0008 DEFINED AT LINE 28 IN constants.z80
                    > USED AT LINE 194 IN core-io.z80
                    > USED AT LINE 196 IN core-io.z80
                    > USED AT LINE 211 IN core-io.z80
LFF:                000A DEFINED AT LINE 29 IN constants.z80
CRR:                000D DEFINED AT LINE 30 IN constants.z80
                    > USED AT LINE 132 IN core-io.z80
SPACEE:             0020 DEFINED AT LINE 31 IN constants.z80
                    > USED AT LINE 74 IN core-format.z80
                    > USED AT LINE 81 IN core-format.z80
TIC:                0027 DEFINED AT LINE 32 IN constants.z80
MINUSS:             002D DEFINED AT LINE 33 IN constants.z80
                    > USED AT LINE 44 IN core-format.z80
UNDERSC:            005F DEFINED AT LINE 34 IN constants.z80
CALLL:              CD00 DEFINED AT LINE 36 IN constants.z80
                    > USED AT LINE 119 IN core-compiler.z80
US:                 003A DEFINED AT LINE 38 IN constants.z80
                    > USED AT LINE 50
RTS:                0200 DEFINED AT LINE 39 IN constants.z80
                    > USED AT LINE 5 IN variables.z80
DTS:                0200 DEFINED AT LINE 40 IN constants.z80
                    > USED AT LINE 2 IN variables.z80
RET_STACK_SIZE:     0100 DEFINED AT LINE 42 IN constants.z80
DATA_STACK_SIZE:    0100 DEFINED AT LINE 43 IN constants.z80
INT_ADDR:           0038 DEFINED AT LINE 45 IN constants.z80
SER_BUFSIZE:        003F DEFINED AT LINE 46 IN constants.z80
                    > USED AT LINE 11 IN interrupt.z80
                    > USED AT LINE 19 IN interrupt.z80
                    > USED AT LINE 26 IN serial.z80
                    > USED AT LINE 41 IN variables.z80
SER_FULLSIZE:       0030 DEFINED AT LINE 47 IN constants.z80
                    > USED AT LINE 28 IN interrupt.z80
SER_EMPTYSIZE:      0005 DEFINED AT LINE 48 IN constants.z80
                    > USED AT LINE 35 IN serial.z80
RTS_HIGH:           00D6 DEFINED AT LINE 50 IN constants.z80
                    > USED AT LINE 30 IN interrupt.z80
RTS_LOW:            0096 DEFINED AT LINE 51 IN constants.z80
                    > USED AT LINE 11 IN serial.z80
                    > USED AT LINE 37 IN serial.z80
TRUEE:              00-1 DEFINED AT LINE 53 IN constants.z80
                    > USED AT LINE 41 IN core-io.z80
FALSEE:             0000 DEFINED AT LINE 54 IN constants.z80
                    > USED AT LINE 34 IN core-io.z80
VVCODE:             1284 DEFINED AT LINE 12
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 42
                    > USED AT LINE 43
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 42
                    > USED AT LINE 43
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 42
                    > USED AT LINE 43
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 42
                    > USED AT LINE 43
                    > USED AT LINE 42
                    > USED AT LINE 43
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 42
                    > USED AT LINE 43
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 42
                    > USED AT LINE 43
                    > USED AT LINE 16
                    > USED AT LINE 19
VVNAME:             1306 DEFINED AT LINE 15
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 91
VVLINK:             130A DEFINED AT LINE 17
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
VVUSER:             116A DEFINED AT LINE 63
                    > USED AT LINE 32
                    > USED AT LINE 33
                    > USED AT LINE 32
                    > USED AT LINE 33
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 32
                    > USED AT LINE 33
                    > USED AT LINE 32
                    > USED AT LINE 33
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 32
                    > USED AT LINE 33
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 65 IN core-user.z80
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 96 IN core-user.z80
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 102 IN core-user.z80
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 32
                    > USED AT LINE 33
                    > USED AT LINE 62
                    > USED AT LINE 63
RESET:              0000 DEFINED AT LINE 9
RST08:              0008 DEFINED AT LINE 12
RST10:              0010 DEFINED AT LINE 16
RST18:              0018 DEFINED AT LINE 20
RST20:              0020 DEFINED AT LINE 24
RST28:              0028 DEFINED AT LINE 28
RST30:              0030 DEFINED AT LINE 32
RST38:              0038 DEFINED AT LINE 36
RST66:              0066 DEFINED AT LINE 40
INIT:               006C DEFINED AT LINE 42
                    > USED AT LINE 9
LOOP:               008F DEFINED AT LINE 65
                    > USED AT LINE 68
SERIALINT:          0098 DEFINED AT LINE 1 IN interrupt.z80
                    > USED AT LINE 43
NOTFULL:            00AD DEFINED AT LINE 16 IN interrupt.z80
                    > USED AT LINE 12 IN interrupt.z80
NOTWRAP:            00B9 DEFINED AT LINE 22 IN interrupt.z80
                    > USED AT LINE 20 IN interrupt.z80
RTS0:               00CD DEFINED AT LINE 32 IN interrupt.z80
                    > USED AT LINE 6 IN interrupt.z80
                    > USED AT LINE 14 IN interrupt.z80
                    > USED AT LINE 29 IN interrupt.z80
INIT_IO:            00D6 DEFINED AT LINE 4 IN serial.z80
                    > USED AT LINE 25 IN core-io.z80
RXA:                00EA DEFINED AT LINE 16 IN serial.z80
                    > USED AT LINE 66
WAITFORCHAR:        00EA DEFINED AT LINE 17 IN serial.z80
                    > USED AT LINE 20 IN serial.z80
RXA1:               00F1 DEFINED AT LINE 21 IN serial.z80
                    > USED AT LINE 37 IN core-io.z80
NOTRDWRAP:          00FE DEFINED AT LINE 29 IN serial.z80
                    > USED AT LINE 27 IN serial.z80
RTS1:               0111 DEFINED AT LINE 39 IN serial.z80
                    > USED AT LINE 36 IN serial.z80
TXA:                0118 DEFINED AT LINE 49 IN serial.z80
                    > USED AT LINE 67
                    > USED AT LINE 42 IN serial.z80
                    > USED AT LINE 49 IN core-io.z80
CONOUT1:            0119 DEFINED AT LINE 51 IN serial.z80
                    > USED AT LINE 54 IN serial.z80
QRXA:           0123 DEFINED AT LINE 59 IN serial.z80
                    > USED AT LINE 32 IN core-io.z80
DEFAULTS:           0129 DEFINED AT LINE 3 IN defaults.z80
                    > USED AT LINE 38 IN constants.z80
                    > USED AT LINE 48
UZERO:              0129 DEFINED AT LINE 4 IN defaults.z80
                    > USED AT LINE 22 IN core-kernel.z80
                    > USED AT LINE 23 IN core-kernel.z80
DEFSZERO:           0129 DEFINED AT LINE 5 IN defaults.z80
DEFRZERO:           012B DEFINED AT LINE 6 IN defaults.z80
DEFTQKEY:           012D DEFINED AT LINE 7 IN defaults.z80
DEFTEMIT:           012F DEFINED AT LINE 8 IN defaults.z80
DEFTEXPE:           0131 DEFINED AT LINE 9 IN defaults.z80
DEFTTAP:            0133 DEFINED AT LINE 10 IN defaults.z80
DEFTECHO:           0135 DEFINED AT LINE 11 IN defaults.z80
DEFTPROM:           0137 DEFINED AT LINE 12 IN defaults.z80
DEFBASE:            0139 DEFINED AT LINE 13 IN defaults.z80
DEFTEMP:            013B DEFINED AT LINE 14 IN defaults.z80
DEFSPAN:            013D DEFINED AT LINE 15 IN defaults.z80
DEFINN:             013F DEFINED AT LINE 16 IN defaults.z80
DEFNTIB:            0141 DEFINED AT LINE 17 IN defaults.z80
DEFTIB:             0143 DEFINED AT LINE 18 IN defaults.z80
DEFCSP:             0145 DEFINED AT LINE 19 IN defaults.z80
DEFTEVAL:           0147 DEFINED AT LINE 20 IN defaults.z80
DEFTNUMB:           0149 DEFINED AT LINE 21 IN defaults.z80
DEFHLD:             014B DEFINED AT LINE 22 IN defaults.z80
DEFHANDL:           014D DEFINED AT LINE 23 IN defaults.z80
DEFCNTXT:           014F DEFINED AT LINE 24 IN defaults.z80
DEFVOCABS:          0151 DEFINED AT LINE 25 IN defaults.z80
DEFCRRENT:          0153 DEFINED AT LINE 26 IN defaults.z80
DEFVOCABLP:         0155 DEFINED AT LINE 27 IN defaults.z80
DEFCP:              0157 DEFINED AT LINE 28 IN defaults.z80
DEFNP:              0159 DEFINED AT LINE 29 IN defaults.z80
DEFLAST:            015B DEFINED AT LINE 30 IN defaults.z80
DEFVFRTH:           015D DEFINED AT LINE 31 IN defaults.z80
DEFVOCABL:          015F DEFINED AT LINE 32 IN defaults.z80
DEFCOLD:            0161 DEFINED AT LINE 33 IN defaults.z80
ULAST:              0163 DEFINED AT LINE 34 IN defaults.z80
                    > USED AT LINE 23 IN core-kernel.z80
END_DEFAULTS:       0163 DEFINED AT LINE 35 IN defaults.z80
                    > USED AT LINE 38 IN constants.z80
ZLESS:              0164 DEFINED AT LINE 11
                    > USED AT LINE 77 IN core-alu.z80
                    > USED AT LINE 98 IN core-alu.z80
                    > USED AT LINE 104 IN core-alu.z80
                    > USED AT LINE 106 IN core-alu.z80
                    > USED AT LINE 233 IN core-alu.z80
                    > USED AT LINE 250 IN core-alu.z80
                    > USED AT LINE 43 IN core-format.z80
                    > USED AT LINE 57 IN core-interpret.z80
                    > USED AT LINE 71 IN core-interpret.z80
                    > USED AT LINE 256 IN core-interpret.z80
VVLEN:              0001 DEFINED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 41
                    > USED AT LINE 42
                    > USED AT LINE 14
                    > USED AT LINE 41
                    > USED AT LINE 42
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 41
                    > USED AT LINE 42
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 41
                    > USED AT LINE 42
                    > USED AT LINE 41
                    > USED AT LINE 42
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 41
                    > USED AT LINE 42
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 41
                    > USED AT LINE 42
                    > USED AT LINE 14
ANDD:               016C DEFINED AT LINE 11
ORR:                0176 DEFINED AT LINE 11
XORR:               0180 DEFINED AT LINE 11
                    > USED AT LINE 85 IN core-alu.z80
                    > USED AT LINE 94 IN core-alu.z80
                    > USED AT LINE 103 IN core-alu.z80
                    > USED AT LINE 300 IN core-alu.z80
                    > USED AT LINE 224 IN core-io.z80
PLUS:               018A DEFINED AT LINE 11
                    > USED AT LINE 67 IN core-alu.z80
                    > USED AT LINE 72 IN core-alu.z80
                    > USED AT LINE 239 IN core-alu.z80
                    > USED AT LINE 44 IN core-compiler.z80
                    > USED AT LINE 222 IN core-io.z80
                    > USED AT LINE 198 IN core-memory.z80
                    > USED AT LINE 84 IN core-stacks.z80
INVER:              0194 DEFINED AT LINE 11
                    > USED AT LINE 60 IN core-alu.z80
                    > USED AT LINE 65 IN core-alu.z80
                    > USED AT LINE 37 IN core-utils.z80
NEGAT:              01A0 DEFINED AT LINE 11
                    > USED AT LINE 72 IN core-alu.z80
                    > USED AT LINE 78 IN core-alu.z80
                    > USED AT LINE 235 IN core-alu.z80
                    > USED AT LINE 243 IN core-alu.z80
                    > USED AT LINE 34 IN core-interpret.z80
DNEGA:              01AE DEFINED AT LINE 11
                    > USED AT LINE 302 IN core-alu.z80
SUBB:               01C4 DEFINED AT LINE 11
                    > USED AT LINE 98 IN core-alu.z80
                    > USED AT LINE 106 IN core-alu.z80
                    > USED AT LINE 128 IN core-alu.z80
                    > USED AT LINE 129 IN core-alu.z80
                    > USED AT LINE 65 IN core-does.z80
                    > USED AT LINE 57 IN core-interpret.z80
                    > USED AT LINE 82 IN core-interpret.z80
                    > USED AT LINE 135 IN core-interpret.z80
                    > USED AT LINE 185 IN core-memory.z80
ABSS:               01CE DEFINED AT LINE 11
ABS1:               01DC DEFINED AT LINE 79 IN core-alu.z80
EQUAL:              01DE DEFINED AT LINE 11
EQU1:               01EE DEFINED AT LINE 88 IN core-alu.z80
                    > USED AT LINE 86 IN core-alu.z80
ULESS:              01F4 DEFINED AT LINE 11
ULES1:              020A DEFINED AT LINE 97 IN core-alu.z80
                    > USED AT LINE 95 IN core-alu.z80
LESS:               0210 DEFINED AT LINE 11
                    > USED AT LINE 111 IN core-alu.z80
LESS1:              0224 DEFINED AT LINE 105 IN core-alu.z80
MAX:                022A DEFINED AT LINE 11
MAX1:               0238 DEFINED AT LINE 113 IN core-alu.z80
MIN:                023C DEFINED AT LINE 11
MIN1:               024C DEFINED AT LINE 122 IN core-alu.z80
                    > USED AT LINE 120 IN core-alu.z80
WITHI:              0250 DEFINED AT LINE 11
UMPLUS:             0262 DEFINED AT LINE 49
                    > USED AT LINE 50 IN core-alu.z80
UMP2:               026A DEFINED AT LINE 139 IN core-alu.z80
UMP1:               026B DEFINED AT LINE 141 IN core-alu.z80
                    > USED AT LINE 138 IN core-alu.z80
UMMOD:              026E DEFINED AT LINE 11
                    > USED AT LINE 241 IN core-alu.z80
                    > USED AT LINE 194 IN core-memory.z80
UMSLMOD2:           027A DEFINED AT LINE 11
UMMOD11:            027E DEFINED AT LINE 158 IN core-alu.z80
UMMOD12:            0289 DEFINED AT LINE 169 IN core-alu.z80
UMMOD2:             02A3 DEFINED AT LINE 189 IN core-alu.z80
                    > USED AT LINE 157 IN core-alu.z80
UMMOD1:             02A9 DEFINED AT LINE 192 IN core-alu.z80
                    > USED AT LINE 168 IN core-alu.z80
UMMOD4:             02AF DEFINED AT LINE 195 IN core-alu.z80
                    > USED AT LINE 213 IN core-alu.z80
UMMOD13:            02B7 DEFINED AT LINE 203 IN core-alu.z80
UMMOD3:             02BD DEFINED AT LINE 210 IN core-alu.z80
                    > USED AT LINE 175 IN core-alu.z80
                    > USED AT LINE 179 IN core-alu.z80
                    > USED AT LINE 224 IN core-alu.z80
UMMOD14:            02C1 DEFINED AT LINE 214 IN core-alu.z80
UMMOD5:             02C7 DEFINED AT LINE 221 IN core-alu.z80
                    > USED AT LINE 202 IN core-alu.z80
UMMOD15:            02CB DEFINED AT LINE 225 IN core-alu.z80
MSMOD:              02CC DEFINED AT LINE 11
MMOD1:              02E4 DEFINED AT LINE 236 IN core-alu.z80
                    > USED AT LINE 234 IN core-alu.z80
MMOD2:              02F2 DEFINED AT LINE 240 IN core-alu.z80
                    > USED AT LINE 238 IN core-alu.z80
MMOD3:              0302 DEFINED AT LINE 244 IN core-alu.z80
                    > USED AT LINE 242 IN core-alu.z80
SLMOD:              0304 DEFINED AT LINE 11
                    > USED AT LINE 255 IN core-alu.z80
                    > USED AT LINE 260 IN core-alu.z80
MODD:               0312 DEFINED AT LINE 11
SLASH:              031C DEFINED AT LINE 11
UMSTA:              0328 DEFINED AT LINE 11
                    > USED AT LINE 295 IN core-alu.z80
                    > USED AT LINE 301 IN core-alu.z80
UMSTA1:             0330 DEFINED AT LINE 272 IN core-alu.z80
                    > USED AT LINE 285 IN core-alu.z80
UMSTA2:             0337 DEFINED AT LINE 278 IN core-alu.z80
UMSTA5:             033A DEFINED AT LINE 281 IN core-alu.z80
UMSTA3:             033B DEFINED AT LINE 283 IN core-alu.z80
                    > USED AT LINE 277 IN core-alu.z80
                    > USED AT LINE 280 IN core-alu.z80
UMSTA4:             033E DEFINED AT LINE 286 IN core-alu.z80
STAR:               0344 DEFINED AT LINE 11
MSTAR:              034E DEFINED AT LINE 11
                    > USED AT LINE 309 IN core-alu.z80
MSTAR1:             036A DEFINED AT LINE 303 IN core-alu.z80
SSMOD:              036C DEFINED AT LINE 11
                    > USED AT LINE 314 IN core-alu.z80
STASL:              037A DEFINED AT LINE 11
CELLP:              0386 DEFINED AT LINE 11
                    > USED AT LINE 32 IN core-compiler.z80
                    > USED AT LINE 151 IN core-interpret.z80
                    > USED AT LINE 153 IN core-interpret.z80
                    > USED AT LINE 171 IN core-interpret.z80
                    > USED AT LINE 97 IN core-memory.z80
                    > USED AT LINE 102 IN core-memory.z80
                    > USED AT LINE 125 IN core-memory.z80
                    > USED AT LINE 74 IN core-utils.z80
                    > USED AT LINE 107 IN core-utils.z80
                    > USED AT LINE 109 IN core-utils.z80
CELLM:              0392 DEFINED AT LINE 11
                    > USED AT LINE 72 IN core-compiler.z80
                    > USED AT LINE 74 IN core-compiler.z80
                    > USED AT LINE 126 IN core-interpret.z80
                    > USED AT LINE 126 IN core-interpret.z80
                    > USED AT LINE 156 IN core-interpret.z80
                    > USED AT LINE 158 IN core-interpret.z80
                    > USED AT LINE 158 IN core-interpret.z80
                    > USED AT LINE 161 IN core-interpret.z80
                    > USED AT LINE 169 IN core-interpret.z80
                    > USED AT LINE 82 IN core-utils.z80
CELLS:              039E DEFINED AT LINE 11
TICK:               03AA DEFINED AT LINE 11
                    > USED AT LINE 25 IN core-compiler.z80
                    > USED AT LINE 106 IN core-utils.z80
TICK1:              03B8 DEFINED AT LINE 7 IN core-compiler.z80
                    > USED AT LINE 5 IN core-compiler.z80
ALLOT:              03BA DEFINED AT LINE 11
COMMA:              03C4 DEFINED AT LINE 11
                    > USED AT LINE 25 IN core-compiler.z80
                    > USED AT LINE 90 IN core-compiler.z80
                    > USED AT LINE 120 IN core-compiler.z80
BCOMP:              03D6 DEFINED AT LINE 11
COMPI:              03E0 DEFINED AT LINE 11
                    > USED AT LINE 38 IN core-compiler.z80
                    > USED AT LINE 107 IN core-compiler.z80
                    > USED AT LINE 142 IN core-compiler.z80
                    > USED AT LINE 150 IN core-compiler.z80
                    > USED AT LINE 4 IN core-control.z80
                    > USED AT LINE 14 IN core-control.z80
                    > USED AT LINE 19 IN core-control.z80
                    > USED AT LINE 24 IN core-control.z80
                    > USED AT LINE 30 IN core-control.z80
                    > USED AT LINE 37 IN core-control.z80
                    > USED AT LINE 69 IN core-control.z80
                    > USED AT LINE 74 IN core-control.z80
                    > USED AT LINE 79 IN core-control.z80
LITER:              03F2 DEFINED AT LINE 11
                    > USED AT LINE 94 IN core-compiler.z80
STRCQ:              03FE DEFINED AT LINE 49
RECUR:              0414 DEFINED AT LINE 11
UNIQU:              0422 DEFINED AT LINE 11
                    > USED AT LINE 69 IN core-compiler.z80
UNIQ1:              043E DEFINED AT LINE 60 IN core-compiler.z80
                    > USED AT LINE 57 IN core-compiler.z80
SNAME:              0442 DEFINED AT LINE 11
                    > USED AT LINE 126 IN core-compiler.z80
                    > USED AT LINE 140 IN core-compiler.z80
                    > USED AT LINE 148 IN core-compiler.z80
PNAM1:              0474 DEFINED AT LINE 76 IN core-compiler.z80
                    > USED AT LINE 68 IN core-compiler.z80
SCOMP:              047E DEFINED AT LINE 49
                    > USED AT LINE 113 IN core-compiler.z80
SCOM1:              049A DEFINED AT LINE 89 IN core-compiler.z80
                    > USED AT LINE 87 IN core-compiler.z80
SCOM2:              049E DEFINED AT LINE 91 IN core-compiler.z80
                    > USED AT LINE 85 IN core-compiler.z80
SCOM3:              04AA DEFINED AT LINE 95 IN core-compiler.z80
                    > USED AT LINE 93 IN core-compiler.z80
OVERT:              04AC DEFINED AT LINE 49
SEMIS:              04BC DEFINED AT LINE 11
RBRAC:              04CA DEFINED AT LINE 11
                    > USED AT LINE 127 IN core-compiler.z80
CALLC:              04D8 DEFINED AT LINE 49
                    > USED AT LINE 127 IN core-compiler.z80
COLON:              04E6 DEFINED AT LINE 11
IMMED:              04F8 DEFINED AT LINE 11
USER:               0510 DEFINED AT LINE 11
CREAT:              0528 DEFINED AT LINE 11
                    > USED AT LINE 156 IN core-compiler.z80
VARIA:              053E DEFINED AT LINE 11
FOR:                054C DEFINED AT LINE 11
BEGIN:              0558 DEFINED AT LINE 11
NEXT:               0560 DEFINED AT LINE 11
UNTIL:              056C DEFINED AT LINE 11
AGAIN:              0578 DEFINED AT LINE 11
                    > USED AT LINE 43 IN core-control.z80
IFF:                0584 DEFINED AT LINE 11
                    > USED AT LINE 64 IN core-control.z80
AHEAD:              0596 DEFINED AT LINE 11
                    > USED AT LINE 54 IN core-control.z80
                    > USED AT LINE 59 IN core-control.z80
REPEA:              05A8 DEFINED AT LINE 11
THENN:              05B6 DEFINED AT LINE 11
AFT:                05C2 DEFINED AT LINE 11
ELSEE:              05D0 DEFINED AT LINE 11
WHILE:              05DC DEFINED AT LINE 11
ABRTQ:              05E6 DEFINED AT LINE 11
STRQ:               05F2 DEFINED AT LINE 11
DOTQ:               05FE DEFINED AT LINE 11
DOCONST:            060A DEFINED AT LINE 49
DOLIST:             0612 DEFINED AT LINE 49
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 141 IN core-compiler.z80
                    > USED AT LINE 25
                    > USED AT LINE 149 IN core-compiler.z80
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 31
                    > USED AT LINE 31
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 31
                    > USED AT LINE 31
                    > USED AT LINE 61
                    > USED AT LINE 31
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 31
                    > USED AT LINE 61
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
DOLIT:              0620 DEFINED AT LINE 49
                    > USED AT LINE 55 IN core-alu.z80
                    > USED AT LINE 60 IN core-alu.z80
                    > USED AT LINE 66 IN core-alu.z80
                    > USED AT LINE 87 IN core-alu.z80
                    > USED AT LINE 89 IN core-alu.z80
                    > USED AT LINE 319 IN core-alu.z80
                    > USED AT LINE 324 IN core-alu.z80
                    > USED AT LINE 329 IN core-alu.z80
                    > USED AT LINE 38 IN core-compiler.z80
                    > USED AT LINE 43 IN core-compiler.z80
                    > USED AT LINE 86 IN core-compiler.z80
                    > USED AT LINE 113 IN core-compiler.z80
                    > USED AT LINE 119 IN core-compiler.z80
                    > USED AT LINE 133 IN core-compiler.z80
                    > USED AT LINE 141 IN core-compiler.z80
                    > USED AT LINE 149 IN core-compiler.z80
                    > USED AT LINE 156 IN core-compiler.z80
                    > USED AT LINE 31 IN core-control.z80
                    > USED AT LINE 64 IN core-does.z80
                    > USED AT LINE 4 IN core-format.z80
                    > USED AT LINE 5 IN core-format.z80
                    > USED AT LINE 6 IN core-format.z80
                    > USED AT LINE 11 IN core-format.z80
                    > USED AT LINE 44 IN core-format.z80
                    > USED AT LINE 64 IN core-format.z80
                    > USED AT LINE 69 IN core-format.z80
                    > USED AT LINE 74 IN core-format.z80
                    > USED AT LINE 79 IN core-format.z80
                    > USED AT LINE 80 IN core-format.z80
                    > USED AT LINE 81 IN core-format.z80
                    > USED AT LINE 83 IN core-format.z80
                    > USED AT LINE 5 IN core-interpret.z80
                    > USED AT LINE 6 IN core-interpret.z80
                    > USED AT LINE 8 IN core-interpret.z80
                    > USED AT LINE 9 IN core-interpret.z80
                    > USED AT LINE 20 IN core-interpret.z80
                    > USED AT LINE 25 IN core-interpret.z80
                    > USED AT LINE 30 IN core-interpret.z80
                    > USED AT LINE 52 IN core-interpret.z80
                    > USED AT LINE 59 IN core-interpret.z80
                    > USED AT LINE 74 IN core-interpret.z80
                    > USED AT LINE 80 IN core-interpret.z80
                    > USED AT LINE 99 IN core-interpret.z80
                    > USED AT LINE 139 IN core-interpret.z80
                    > USED AT LINE 145 IN core-interpret.z80
                    > USED AT LINE 151 IN core-interpret.z80
                    > USED AT LINE 178 IN core-interpret.z80
                    > USED AT LINE 227 IN core-interpret.z80
                    > USED AT LINE 241 IN core-interpret.z80
                    > USED AT LINE 247 IN core-interpret.z80
                    > USED AT LINE 87 IN core-io.z80
                    > USED AT LINE 97 IN core-io.z80
                    > USED AT LINE 112 IN core-io.z80
                    > USED AT LINE 124 IN core-io.z80
                    > USED AT LINE 132 IN core-io.z80
                    > USED AT LINE 182 IN core-io.z80
                    > USED AT LINE 194 IN core-io.z80
                    > USED AT LINE 196 IN core-io.z80
                    > USED AT LINE 209 IN core-io.z80
                    > USED AT LINE 211 IN core-io.z80
                    > USED AT LINE 227 IN core-io.z80
                    > USED AT LINE 246 IN core-io.z80
                    > USED AT LINE 247 IN core-io.z80
                    > USED AT LINE 3 IN core-kernel.z80
                    > USED AT LINE 7 IN core-kernel.z80
                    > USED AT LINE 22 IN core-kernel.z80
                    > USED AT LINE 23 IN core-kernel.z80
                    > USED AT LINE 35 IN core-kernel.z80
                    > USED AT LINE 108 IN core-memory.z80
                    > USED AT LINE 119 IN core-memory.z80
                    > USED AT LINE 146 IN core-memory.z80
                    > USED AT LINE 147 IN core-memory.z80
                    > USED AT LINE 173 IN core-memory.z80
                    > USED AT LINE 176 IN core-memory.z80
                    > USED AT LINE 184 IN core-memory.z80
                    > USED AT LINE 186 IN core-memory.z80
                    > USED AT LINE 193 IN core-memory.z80
                    > USED AT LINE 196 IN core-memory.z80
                    > USED AT LINE 83 IN core-stacks.z80
                    > USED AT LINE 90 IN core-stacks.z80
                    > USED AT LINE 8 IN core-utils.z80
                    > USED AT LINE 16 IN core-utils.z80
                    > USED AT LINE 21 IN core-utils.z80
                    > USED AT LINE 31 IN core-utils.z80
                    > USED AT LINE 34 IN core-utils.z80
                    > USED AT LINE 89 IN core-utils.z80
                    > USED AT LINE 96 IN core-utils.z80
DOVAR:              0628 DEFINED AT LINE 49
                    > USED AT LINE 150 IN core-compiler.z80
                    > USED AT LINE 41 IN core-does.z80
                    > USED AT LINE 201 IN core-interpret.z80
UP:                 0630 DEFINED AT LINE 49
DOUSE:              0638 DEFINED AT LINE 49
                    > USED AT LINE 142 IN core-compiler.z80
                    > USED AT LINE 32
                    > USED AT LINE 32
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 32
                    > USED AT LINE 32
                    > USED AT LINE 62
                    > USED AT LINE 32
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 32
                    > USED AT LINE 62
EXIT:               0648 DEFINED AT LINE 11
                    > USED AT LINE 80 IN core-alu.z80
                    > USED AT LINE 114 IN core-alu.z80
                    > USED AT LINE 123 IN core-alu.z80
                    > USED AT LINE 245 IN core-alu.z80
                    > USED AT LINE 304 IN core-alu.z80
                    > USED AT LINE 6 IN core-compiler.z80
                    > USED AT LINE 61 IN core-compiler.z80
                    > USED AT LINE 75 IN core-compiler.z80
                    > USED AT LINE 88 IN core-compiler.z80
                    > USED AT LINE 90 IN core-compiler.z80
                    > USED AT LINE 94 IN core-compiler.z80
                    > USED AT LINE 107 IN core-compiler.z80
                    > USED AT LINE 120 IN core-compiler.z80
                    > USED AT LINE 9 IN core-control.z80
                    > USED AT LINE 36 IN core-does.z80
                    > USED AT LINE 38 IN core-format.z80
                    > USED AT LINE 46 IN core-format.z80
                    > USED AT LINE 85 IN core-format.z80
                    > USED AT LINE 116 IN core-interpret.z80
                    > USED AT LINE 229 IN core-interpret.z80
                    > USED AT LINE 233 IN core-interpret.z80
                    > USED AT LINE 250 IN core-interpret.z80
                    > USED AT LINE 258 IN core-interpret.z80
                    > USED AT LINE 67 IN core-io.z80
                    > USED AT LINE 82 IN core-io.z80
                    > USED AT LINE 103 IN core-io.z80
                    > USED AT LINE 115 IN core-io.z80
                    > USED AT LINE 127 IN core-io.z80
                    > USED AT LINE 144 IN core-io.z80
                    > USED AT LINE 175 IN core-io.z80
                    > USED AT LINE 198 IN core-io.z80
                    > USED AT LINE 215 IN core-io.z80
                    > USED AT LINE 72 IN core-kernel.z80
                    > USED AT LINE 135 IN core-memory.z80
                    > USED AT LINE 150 IN core-memory.z80
                    > USED AT LINE 162 IN core-memory.z80
                    > USED AT LINE 198 IN core-memory.z80
                    > USED AT LINE 58 IN core-stacks.z80
                    > USED AT LINE 11 IN core-utils.z80
                    > USED AT LINE 24 IN core-utils.z80
                    > USED AT LINE 45 IN core-utils.z80
                    > USED AT LINE 58 IN core-utils.z80
                    > USED AT LINE 97 IN core-utils.z80
                    > USED AT LINE 100 IN core-utils.z80
                    > USED AT LINE 122 IN core-utils.z80
DODO:               0654 DEFINED AT LINE 49
DONXT:              0676 DEFINED AT LINE 11
                    > USED AT LINE 14 IN core-control.z80
                    > USED AT LINE 31 IN core-interpret.z80
                    > USED AT LINE 60 IN core-interpret.z80
                    > USED AT LINE 75 IN core-interpret.z80
                    > USED AT LINE 138 IN core-interpret.z80
                    > USED AT LINE 102 IN core-io.z80
                    > USED AT LINE 114 IN core-io.z80
                    > USED AT LINE 149 IN core-memory.z80
                    > USED AT LINE 161 IN core-memory.z80
                    > USED AT LINE 175 IN core-memory.z80
                    > USED AT LINE 10 IN core-utils.z80
                    > USED AT LINE 23 IN core-utils.z80
                    > USED AT LINE 39 IN core-utils.z80
                    > USED AT LINE 56 IN core-utils.z80
DECHILO:            068B DEFINED AT LINE 146 IN core-does.z80
                    > USED AT LINE 139 IN core-does.z80
DECLOW:             068D DEFINED AT LINE 149 IN core-does.z80
                    > USED AT LINE 135 IN core-does.z80
DIGIT:              0696 DEFINED AT LINE 49
                    > USED AT LINE 12 IN core-format.z80
EXTRC:              06B0 DEFINED AT LINE 49
BDIGS:              06C2 DEFINED AT LINE 11
                    > USED AT LINE 58 IN core-format.z80
                    > USED AT LINE 160 IN core-io.z80
                    > USED AT LINE 167 IN core-io.z80
HOLD:               06CE DEFINED AT LINE 11
DIG:                06E6 DEFINED AT LINE 11
                    > USED AT LINE 34 IN core-format.z80
DIGS:               06F4 DEFINED AT LINE 11
                    > USED AT LINE 58 IN core-format.z80
                    > USED AT LINE 167 IN core-io.z80
DIGS1:              06F8 DEFINED AT LINE 33 IN core-format.z80
                    > USED AT LINE 36 IN core-format.z80
DIGS2:              0704 DEFINED AT LINE 37 IN core-format.z80
                    > USED AT LINE 35 IN core-format.z80
SIGN:               0706 DEFINED AT LINE 11
                    > USED AT LINE 59 IN core-format.z80
SIGN1:              0716 DEFINED AT LINE 45 IN core-format.z80
EDIGS:              0718 DEFINED AT LINE 11
                    > USED AT LINE 59 IN core-format.z80
STR:                072A DEFINED AT LINE 49
                    > USED AT LINE 154 IN core-io.z80
                    > USED AT LINE 177 IN core-io.z80
HEX:                0740 DEFINED AT LINE 11
                    > USED AT LINE 19 IN core-interpret.z80
DECIMAL:            074E DEFINED AT LINE 11
BLANK:              075C DEFINED AT LINE 11
                    > USED AT LINE 56 IN core-interpret.z80
                    > USED AT LINE 109 IN core-interpret.z80
                    > USED AT LINE 114 IN core-interpret.z80
                    > USED AT LINE 92 IN core-io.z80
                    > USED AT LINE 195 IN core-io.z80
                    > USED AT LINE 213 IN core-io.z80
                    > USED AT LINE 227 IN core-io.z80
                    > USED AT LINE 171 IN core-memory.z80
TCHAR:              0766 DEFINED AT LINE 49
TCHA1:              0786 DEFINED AT LINE 84 IN core-format.z80
                    > USED AT LINE 82 IN core-format.z80
DIGTQ:              0788 DEFINED AT LINE 49
DGTQ1:              07AE DEFINED AT LINE 10 IN core-interpret.z80
                    > USED AT LINE 7 IN core-interpret.z80
NUMBQ:              07B6 DEFINED AT LINE 49
                    > USED AT LINE 21 IN defaults.z80
NUMQ1:              07E6 DEFINED AT LINE 21 IN core-interpret.z80
                    > USED AT LINE 18 IN core-interpret.z80
NUMQ2:              080A DEFINED AT LINE 26 IN core-interpret.z80
                    > USED AT LINE 31 IN core-interpret.z80
NUMQ3:              083C DEFINED AT LINE 35 IN core-interpret.z80
                    > USED AT LINE 33 IN core-interpret.z80
NUMQ4:              0842 DEFINED AT LINE 38 IN core-interpret.z80
                    > USED AT LINE 28 IN core-interpret.z80
NUMQ5:              084E DEFINED AT LINE 40 IN core-interpret.z80
                    > USED AT LINE 37 IN core-interpret.z80
NUMQ6:              0850 DEFINED AT LINE 42 IN core-interpret.z80
                    > USED AT LINE 24 IN core-interpret.z80
PARS:               085C DEFINED AT LINE 49
                    > USED AT LINE 93 IN core-interpret.z80
PARS1:              0882 DEFINED AT LINE 55 IN core-interpret.z80
                    > USED AT LINE 60 IN core-interpret.z80
PARS2:              08A8 DEFINED AT LINE 62 IN core-interpret.z80
                    > USED AT LINE 58 IN core-interpret.z80
PARS3:              08AA DEFINED AT LINE 64 IN core-interpret.z80
                    > USED AT LINE 53 IN core-interpret.z80
PARS4:              08B0 DEFINED AT LINE 67 IN core-interpret.z80
                    > USED AT LINE 75 IN core-interpret.z80
PARS5:              08C8 DEFINED AT LINE 72 IN core-interpret.z80
                    > USED AT LINE 70 IN core-interpret.z80
PARS6:              08DE DEFINED AT LINE 78 IN core-interpret.z80
                    > USED AT LINE 73 IN core-interpret.z80
PARS7:              08EC DEFINED AT LINE 81 IN core-interpret.z80
                    > USED AT LINE 77 IN core-interpret.z80
PARS8:              08F8 DEFINED AT LINE 84 IN core-interpret.z80
                    > USED AT LINE 51 IN core-interpret.z80
PARSE:              0900 DEFINED AT LINE 11
                    > USED AT LINE 109 IN core-interpret.z80
                    > USED AT LINE 114 IN core-interpret.z80
                    > USED AT LINE 121 IN core-interpret.z80
PAREN:              0922 DEFINED AT LINE 11
BKSLA:              092E DEFINED AT LINE 11
CHAR:               093C DEFINED AT LINE 11
TOKEN:              094A DEFINED AT LINE 49
                    > USED AT LINE 4 IN core-compiler.z80
                    > USED AT LINE 126 IN core-compiler.z80
                    > USED AT LINE 140 IN core-compiler.z80
                    > USED AT LINE 148 IN core-compiler.z80
                    > USED AT LINE 265 IN core-interpret.z80
WORDD:              0966 DEFINED AT LINE 11
NAMET:              0972 DEFINED AT LINE 49
                    > USED AT LINE 162 IN core-interpret.z80
                    > USED AT LINE 80 IN core-utils.z80
SAMEQ:              097E DEFINED AT LINE 49
SAME1:              0988 DEFINED AT LINE 133 IN core-interpret.z80
                    > USED AT LINE 138 IN core-interpret.z80
SAME2:              09AA DEFINED AT LINE 138 IN core-interpret.z80
                    > USED AT LINE 132 IN core-interpret.z80
                    > USED AT LINE 136 IN core-interpret.z80
FIND:               09B4 DEFINED AT LINE 11
                    > USED AT LINE 174 IN core-interpret.z80
FIND1:              09D2 DEFINED AT LINE 147 IN core-interpret.z80
                    > USED AT LINE 159 IN core-interpret.z80
FIND2:              09F6 DEFINED AT LINE 153 IN core-interpret.z80
                    > USED AT LINE 150 IN core-interpret.z80
FIND3:              09FE DEFINED AT LINE 154 IN core-interpret.z80
                    > USED AT LINE 152 IN core-interpret.z80
FIND6:              0A02 DEFINED AT LINE 155 IN core-interpret.z80
                    > USED AT LINE 148 IN core-interpret.z80
FIND4:              0A0E DEFINED AT LINE 157 IN core-interpret.z80
                    > USED AT LINE 154 IN core-interpret.z80
FIND5:              0A1A DEFINED AT LINE 160 IN core-interpret.z80
                    > USED AT LINE 157 IN core-interpret.z80
NAMEQ:              0A2C DEFINED AT LINE 49
                    > USED AT LINE 4 IN core-compiler.z80
                    > USED AT LINE 56 IN core-compiler.z80
                    > USED AT LINE 84 IN core-compiler.z80
                    > USED AT LINE 225 IN core-interpret.z80
NAMQ1:              0A3E DEFINED AT LINE 170 IN core-interpret.z80
                    > USED AT LINE 168 IN core-interpret.z80
NAMQ2:              0A40 DEFINED AT LINE 171 IN core-interpret.z80
                    > USED AT LINE 175 IN core-interpret.z80
NAMQ3:              0A5E DEFINED AT LINE 177 IN core-interpret.z80
                    > USED AT LINE 173 IN core-interpret.z80
CATCH:              0A68 DEFINED AT LINE 11
THROW:              0A8E DEFINED AT LINE 11
                    > USED AT LINE 8 IN core-compiler.z80
                    > USED AT LINE 78 IN core-compiler.z80
                    > USED AT LINE 95 IN core-compiler.z80
                    > USED AT LINE 210 IN core-interpret.z80
                    > USED AT LINE 217 IN core-interpret.z80
                    > USED AT LINE 235 IN core-interpret.z80
NULLS:              0AAC DEFINED AT LINE 49
                    > USED AT LINE 210 IN core-interpret.z80
ABORT:              0ABA DEFINED AT LINE 11
ABORQ:              0AC2 DEFINED AT LINE 11
                    > USED AT LINE 69 IN core-control.z80
                    > USED AT LINE 37
                    > USED AT LINE 37
ABOR1:              0ACE DEFINED AT LINE 218 IN core-interpret.z80
                    > USED AT LINE 216 IN core-interpret.z80
INTER:              0AD4 DEFINED AT LINE 49
                    > USED AT LINE 20 IN defaults.z80
                    > USED AT LINE 241 IN core-interpret.z80
                    > USED AT LINE 247 IN core-interpret.z80
INTE1:              0AFC DEFINED AT LINE 230 IN core-interpret.z80
                    > USED AT LINE 226 IN core-interpret.z80
INTE2:              0B06 DEFINED AT LINE 234 IN core-interpret.z80
                    > USED AT LINE 232 IN core-interpret.z80
LBRAC:              0B08 DEFINED AT LINE 11
DOTOK:              0B16 DEFINED AT LINE 11
                    > USED AT LINE 12 IN defaults.z80
DOTO1:              0B2E DEFINED AT LINE 250 IN core-interpret.z80
                    > USED AT LINE 248 IN core-interpret.z80
QSTAC:              0B32 DEFINED AT LINE 49
EVAL:               0B4A DEFINED AT LINE 11
EVAL1:              0B4E DEFINED AT LINE 264 IN core-interpret.z80
                    > USED AT LINE 268 IN core-interpret.z80
EVAL2:              0B62 DEFINED AT LINE 269 IN core-interpret.z80
                    > USED AT LINE 266 IN core-interpret.z80
PCSTO:              0B6A DEFINED AT LINE 11
PCAT:               0B74 DEFINED AT LINE 11
STOIO:              0B80 DEFINED AT LINE 11
                    > USED AT LINE 2 IN core-kernel.z80
QRX:                0B86 DEFINED AT LINE 11
                    > USED AT LINE 7 IN defaults.z80
QRX1:               0B91 DEFINED AT LINE 36 IN core-io.z80
                    > USED AT LINE 33 IN core-io.z80
QRX2:               0B9B DEFINED AT LINE 42 IN core-io.z80
                    > USED AT LINE 35 IN core-io.z80
TXSTO:              0B9E DEFINED AT LINE 11
                    > USED AT LINE 8 IN defaults.z80
                    > USED AT LINE 11 IN defaults.z80
QKEY:               0BA6 DEFINED AT LINE 11
                    > USED AT LINE 62 IN core-io.z80
                    > USED AT LINE 78 IN core-io.z80
KEY:                0BB2 DEFINED AT LINE 11
                    > USED AT LINE 80 IN core-io.z80
                    > USED AT LINE 226 IN core-io.z80
                    > USED AT LINE 5 IN core-kernel.z80
KEY1:               0BB6 DEFINED AT LINE 61 IN core-io.z80
                    > USED AT LINE 66 IN core-io.z80
KEY2:               0BBE DEFINED AT LINE 65 IN core-io.z80
EMIT:               0BC4 DEFINED AT LINE 11
                    > USED AT LINE 92 IN core-io.z80
                    > USED AT LINE 123 IN core-io.z80
                    > USED AT LINE 6 IN core-kernel.z80
NUFQ:               0BD0 DEFINED AT LINE 11
                    > USED AT LINE 37 IN core-utils.z80
                    > USED AT LINE 120 IN core-utils.z80
NUFQ1:              0BE6 DEFINED AT LINE 81 IN core-io.z80
                    > USED AT LINE 79 IN core-io.z80
PACE:               0BE8 DEFINED AT LINE 49
SPACE:              0BF4 DEFINED AT LINE 11
                    > USED AT LINE 100 IN core-io.z80
                    > USED AT LINE 168 IN core-io.z80
                    > USED AT LINE 177 IN core-io.z80
                    > USED AT LINE 17 IN core-utils.z80
                    > USED AT LINE 36 IN core-utils.z80
                    > USED AT LINE 36 IN core-utils.z80
                    > USED AT LINE 115 IN core-utils.z80
SPACS:              0BFE DEFINED AT LINE 11
                    > USED AT LINE 155 IN core-io.z80
                    > USED AT LINE 162 IN core-io.z80
CHAR1:              0C0E DEFINED AT LINE 99 IN core-io.z80
                    > USED AT LINE 102 IN core-io.z80
CHAR2:              0C10 DEFINED AT LINE 101 IN core-io.z80
                    > USED AT LINE 98 IN core-io.z80
TYPEE:              0C16 DEFINED AT LINE 11
                    > USED AT LINE 155 IN core-io.z80
                    > USED AT LINE 162 IN core-io.z80
                    > USED AT LINE 168 IN core-io.z80
TYPE1:              0C20 DEFINED AT LINE 110 IN core-io.z80
                    > USED AT LINE 114 IN core-io.z80
TYPE2:              0C2C DEFINED AT LINE 113 IN core-io.z80
                    > USED AT LINE 109 IN core-io.z80
TYPEZ:              0C34 DEFINED AT LINE 11
                    > USED AT LINE 4 IN core-kernel.z80
                    > USED AT LINE 8 IN core-kernel.z80
                    > USED AT LINE 72 IN core-kernel.z80
TYPEZ1:             0C38 DEFINED AT LINE 120 IN core-io.z80
                    > USED AT LINE 125 IN core-io.z80
TYPEZ2:             0C4E DEFINED AT LINE 126 IN core-io.z80
CR:                 0C52 DEFINED AT LINE 11
                    > USED AT LINE 250 IN core-interpret.z80
                    > USED AT LINE 34 IN core-utils.z80
                    > USED AT LINE 50 IN core-utils.z80
                    > USED AT LINE 107 IN core-utils.z80
DOSTR:              0C64 DEFINED AT LINE 11
                    > USED AT LINE 217 IN core-interpret.z80
                    > USED AT LINE 219 IN core-interpret.z80
                    > USED AT LINE 144 IN core-io.z80
                    > USED AT LINE 149 IN core-io.z80
STRQP:              0C7C DEFINED AT LINE 49
                    > USED AT LINE 37
                    > USED AT LINE 74 IN core-control.z80
DOTQP:              0C84 DEFINED AT LINE 49
                    > USED AT LINE 37
                    > USED AT LINE 79 IN core-control.z80
                    > USED AT LINE 37
                    > USED AT LINE 37
                    > USED AT LINE 37
DOTR:               0C90 DEFINED AT LINE 11
UDOTR:              0CA4 DEFINED AT LINE 11
UDOT:               0CBC DEFINED AT LINE 11
                    > USED AT LINE 175 IN core-io.z80
DOT:                0CCC DEFINED AT LINE 11
                    > USED AT LINE 187 IN core-io.z80
DOT1:               0CE2 DEFINED AT LINE 176 IN core-io.z80
                    > USED AT LINE 174 IN core-io.z80
DOTPR:              0CEA DEFINED AT LINE 11
QUEST:              0CF6 DEFINED AT LINE 11
BKSP:               0D00 DEFINED AT LINE 11
                    > USED AT LINE 215 IN core-io.z80
BACK1:              0D30 DEFINED AT LINE 197 IN core-io.z80
                    > USED AT LINE 193 IN core-io.z80
TAP:                0D32 DEFINED AT LINE 11
                    > USED AT LINE 213 IN core-io.z80
                    > USED AT LINE 229 IN core-io.z80
KTAP:               0D48 DEFINED AT LINE 11
                    > USED AT LINE 10 IN defaults.z80
KTAP1:              0D68 DEFINED AT LINE 214 IN core-io.z80
                    > USED AT LINE 212 IN core-io.z80
KTAP2:              0D6C DEFINED AT LINE 216 IN core-io.z80
                    > USED AT LINE 210 IN core-io.z80
ACCEP:              0D76 DEFINED AT LINE 11
                    > USED AT LINE 9 IN defaults.z80
ACCP1:              0D80 DEFINED AT LINE 223 IN core-io.z80
                    > USED AT LINE 234 IN core-io.z80
ACCP2:              0D9E DEFINED AT LINE 231 IN core-io.z80
                    > USED AT LINE 228 IN core-io.z80
ACCP3:              0DA2 DEFINED AT LINE 233 IN core-io.z80
                    > USED AT LINE 230 IN core-io.z80
ACCP4:              0DA6 DEFINED AT LINE 235 IN core-io.z80
                    > USED AT LINE 225 IN core-io.z80
EXPEC:              0DAE DEFINED AT LINE 49
QUERY:              0DBE DEFINED AT LINE 49
HI:                 0DDC DEFINED AT LINE 49
                    > USED AT LINE 57
HELLO:              0DF4 DEFINED AT LINE 10 IN core-kernel.z80
                    > USED AT LINE 3 IN core-kernel.z80
                    > USED AT LINE 7 IN core-kernel.z80
NEXT_STEP:          0E04 DEFINED AT LINE 12 IN core-kernel.z80
                    > USED AT LINE 54
                    > USED AT LINE 34 IN interrupt.z80
COLD:               0E0A DEFINED AT LINE 11
COLD1:              0E0E DEFINED AT LINE 21 IN core-kernel.z80
                    > USED AT LINE 29 IN core-kernel.z80
PRESE:              0E24 DEFINED AT LINE 11
                    > USED AT LINE 24 IN core-kernel.z80
QUIT:               0E3A DEFINED AT LINE 11
                    > USED AT LINE 9 IN core-kernel.z80
                    > USED AT LINE 28 IN core-kernel.z80
EXECU:              0E3C DEFINED AT LINE 11
                    > USED AT LINE 88 IN core-compiler.z80
                    > USED AT LINE 229 IN core-interpret.z80
                    > USED AT LINE 133 IN core-memory.z80
QBRAN:              0E40 DEFINED AT LINE 49
                    > USED AT LINE 86 IN core-alu.z80
                    > USED AT LINE 95 IN core-alu.z80
                    > USED AT LINE 120 IN core-alu.z80
                    > USED AT LINE 234 IN core-alu.z80
                    > USED AT LINE 238 IN core-alu.z80
                    > USED AT LINE 242 IN core-alu.z80
                    > USED AT LINE 5 IN core-compiler.z80
                    > USED AT LINE 57 IN core-compiler.z80
                    > USED AT LINE 68 IN core-compiler.z80
                    > USED AT LINE 85 IN core-compiler.z80
                    > USED AT LINE 87 IN core-compiler.z80
                    > USED AT LINE 93 IN core-compiler.z80
                    > USED AT LINE 19 IN core-control.z80
                    > USED AT LINE 30 IN core-control.z80
                    > USED AT LINE 35 IN core-format.z80
                    > USED AT LINE 43 IN core-format.z80
                    > USED AT LINE 82 IN core-format.z80
                    > USED AT LINE 7 IN core-interpret.z80
                    > USED AT LINE 18 IN core-interpret.z80
                    > USED AT LINE 24 IN core-interpret.z80
                    > USED AT LINE 28 IN core-interpret.z80
                    > USED AT LINE 33 IN core-interpret.z80
                    > USED AT LINE 51 IN core-interpret.z80
                    > USED AT LINE 53 IN core-interpret.z80
                    > USED AT LINE 58 IN core-interpret.z80
                    > USED AT LINE 70 IN core-interpret.z80
                    > USED AT LINE 73 IN core-interpret.z80
                    > USED AT LINE 136 IN core-interpret.z80
                    > USED AT LINE 148 IN core-interpret.z80
                    > USED AT LINE 150 IN core-interpret.z80
                    > USED AT LINE 157 IN core-interpret.z80
                    > USED AT LINE 168 IN core-interpret.z80
                    > USED AT LINE 173 IN core-interpret.z80
                    > USED AT LINE 175 IN core-interpret.z80
                    > USED AT LINE 216 IN core-interpret.z80
                    > USED AT LINE 226 IN core-interpret.z80
                    > USED AT LINE 232 IN core-interpret.z80
                    > USED AT LINE 248 IN core-interpret.z80
                    > USED AT LINE 266 IN core-interpret.z80
                    > USED AT LINE 63 IN core-io.z80
                    > USED AT LINE 66 IN core-io.z80
                    > USED AT LINE 79 IN core-io.z80
                    > USED AT LINE 122 IN core-io.z80
                    > USED AT LINE 174 IN core-io.z80
                    > USED AT LINE 193 IN core-io.z80
                    > USED AT LINE 210 IN core-io.z80
                    > USED AT LINE 212 IN core-io.z80
                    > USED AT LINE 225 IN core-io.z80
                    > USED AT LINE 228 IN core-io.z80
                    > USED AT LINE 132 IN core-memory.z80
                    > USED AT LINE 172 IN core-memory.z80
                    > USED AT LINE 195 IN core-memory.z80
                    > USED AT LINE 55 IN core-stacks.z80
                    > USED AT LINE 38 IN core-utils.z80
                    > USED AT LINE 75 IN core-utils.z80
                    > USED AT LINE 79 IN core-utils.z80
                    > USED AT LINE 81 IN core-utils.z80
                    > USED AT LINE 86 IN core-utils.z80
                    > USED AT LINE 95 IN core-utils.z80
                    > USED AT LINE 110 IN core-utils.z80
                    > USED AT LINE 114 IN core-utils.z80
                    > USED AT LINE 121 IN core-utils.z80
BRAN:               0E4C DEFINED AT LINE 49
                    > USED AT LINE 24 IN core-control.z80
                    > USED AT LINE 37 IN core-control.z80
                    > USED AT LINE 36 IN core-format.z80
                    > USED AT LINE 37 IN core-interpret.z80
                    > USED AT LINE 77 IN core-interpret.z80
                    > USED AT LINE 132 IN core-interpret.z80
                    > USED AT LINE 152 IN core-interpret.z80
                    > USED AT LINE 154 IN core-interpret.z80
                    > USED AT LINE 159 IN core-interpret.z80
                    > USED AT LINE 268 IN core-interpret.z80
                    > USED AT LINE 98 IN core-io.z80
                    > USED AT LINE 109 IN core-io.z80
                    > USED AT LINE 125 IN core-io.z80
                    > USED AT LINE 230 IN core-io.z80
                    > USED AT LINE 234 IN core-io.z80
                    > USED AT LINE 29 IN core-kernel.z80
                    > USED AT LINE 54 IN core-kernel.z80
                    > USED AT LINE 142 IN core-memory.z80
                    > USED AT LINE 157 IN core-memory.z80
                    > USED AT LINE 169 IN core-memory.z80
                    > USED AT LINE 5 IN core-utils.z80
                    > USED AT LINE 18 IN core-utils.z80
                    > USED AT LINE 40 IN core-utils.z80
                    > USED AT LINE 52 IN core-utils.z80
                    > USED AT LINE 83 IN core-utils.z80
                    > USED AT LINE 116 IN core-utils.z80
THROWX:             0E54 DEFINED AT LINE 11
                    > USED AT LINE 191 IN core-alu.z80
                    > USED AT LINE 194 IN core-alu.z80
STORE:              0E5C DEFINED AT LINE 11
                    > USED AT LINE 19 IN core-compiler.z80
                    > USED AT LINE 45 IN core-compiler.z80
                    > USED AT LINE 75 IN core-compiler.z80
                    > USED AT LINE 50 IN core-interpret.z80
                    > USED AT LINE 91 IN core-memory.z80
                    > USED AT LINE 97 IN core-memory.z80
AT:                 0E66 DEFINED AT LINE 11
                    > USED AT LINE 50 IN core-compiler.z80
                    > USED AT LINE 73 IN core-compiler.z80
                    > USED AT LINE 86 IN core-compiler.z80
                    > USED AT LINE 101 IN core-compiler.z80
                    > USED AT LINE 134 IN core-compiler.z80
                    > USED AT LINE 47 IN core-does.z80
                    > USED AT LINE 22 IN core-format.z80
                    > USED AT LINE 28 IN core-format.z80
                    > USED AT LINE 16 IN core-interpret.z80
                    > USED AT LINE 68 IN core-interpret.z80
                    > USED AT LINE 69 IN core-interpret.z80
                    > USED AT LINE 92 IN core-interpret.z80
                    > USED AT LINE 104 IN core-interpret.z80
                    > USED AT LINE 115 IN core-interpret.z80
                    > USED AT LINE 146 IN core-interpret.z80
                    > USED AT LINE 147 IN core-interpret.z80
                    > USED AT LINE 149 IN core-interpret.z80
                    > USED AT LINE 172 IN core-interpret.z80
                    > USED AT LINE 192 IN core-interpret.z80
                    > USED AT LINE 227 IN core-interpret.z80
                    > USED AT LINE 56 IN core-io.z80
                    > USED AT LINE 72 IN core-io.z80
                    > USED AT LINE 173 IN core-io.z80
                    > USED AT LINE 187 IN core-io.z80
                    > USED AT LINE 34 IN core-kernel.z80
                    > USED AT LINE 103 IN core-memory.z80
                    > USED AT LINE 114 IN core-memory.z80
                    > USED AT LINE 131 IN core-memory.z80
                    > USED AT LINE 30 IN core-utils.z80
                    > USED AT LINE 74 IN core-utils.z80
                    > USED AT LINE 78 IN core-utils.z80
                    > USED AT LINE 118 IN core-utils.z80
CSTOR:              0E6E DEFINED AT LINE 11
                    > USED AT LINE 204 IN core-io.z80
                    > USED AT LINE 145 IN core-memory.z80
                    > USED AT LINE 159 IN core-memory.z80
                    > USED AT LINE 187 IN core-memory.z80
CAT:                0E76 DEFINED AT LINE 11
                    > USED AT LINE 67 IN core-compiler.z80
                    > USED AT LINE 17 IN core-interpret.z80
                    > USED AT LINE 22 IN core-interpret.z80
                    > USED AT LINE 111 IN core-io.z80
                    > USED AT LINE 121 IN core-io.z80
                    > USED AT LINE 109 IN core-memory.z80
                    > USED AT LINE 7 IN core-utils.z80
                    > USED AT LINE 20 IN core-utils.z80
RAT:                0E7E DEFINED AT LINE 11
                    > USED AT LINE 239 IN core-alu.z80
                    > USED AT LINE 23 IN core-interpret.z80
                    > USED AT LINE 32 IN core-interpret.z80
                    > USED AT LINE 133 IN core-interpret.z80
                    > USED AT LINE 134 IN core-interpret.z80
                    > USED AT LINE 137 IN core-io.z80
                    > USED AT LINE 145 IN core-memory.z80
                    > USED AT LINE 54 IN core-utils.z80
RPAT:               0E88 DEFINED AT LINE 11
                    > USED AT LINE 185 IN core-interpret.z80
RPSTO:              0E90 DEFINED AT LINE 11
SPAT:               0E98 DEFINED AT LINE 11
                    > USED AT LINE 184 IN core-interpret.z80
                    > USED AT LINE 84 IN core-stacks.z80
                    > USED AT LINE 89 IN core-stacks.z80
SPSTO:              0EA2 DEFINED AT LINE 11
PSTOR:              0EAA DEFINED AT LINE 11
                    > USED AT LINE 13 IN core-compiler.z80
DSTOR:              0EBC DEFINED AT LINE 11
DAT:                0ECC DEFINED AT LINE 11
COUNT:              0EDC DEFINED AT LINE 11
                    > USED AT LINE 44 IN core-compiler.z80
                    > USED AT LINE 59 IN core-compiler.z80
                    > USED AT LINE 149 IN core-io.z80
                    > USED AT LINE 96 IN core-utils.z80
HERE:               0EEE DEFINED AT LINE 11
                    > USED AT LINE 18 IN core-compiler.z80
                    > USED AT LINE 71 IN core-compiler.z80
                    > USED AT LINE 9 IN core-control.z80
                    > USED AT LINE 43 IN core-control.z80
                    > USED AT LINE 48 IN core-control.z80
                    > USED AT LINE 121 IN core-interpret.z80
                    > USED AT LINE 119 IN core-memory.z80
PAD:                0EF8 DEFINED AT LINE 11
                    > USED AT LINE 17 IN core-format.z80
                    > USED AT LINE 52 IN core-format.z80
TIB:                0F06 DEFINED AT LINE 11
                    > USED AT LINE 91 IN core-interpret.z80
                    > USED AT LINE 246 IN core-io.z80
ATEXE:              0F12 DEFINED AT LINE 49
                    > USED AT LINE 92 IN core-compiler.z80
                    > USED AT LINE 231 IN core-interpret.z80
                    > USED AT LINE 267 IN core-interpret.z80
                    > USED AT LINE 232 IN core-io.z80
                    > USED AT LINE 241 IN core-io.z80
EXE1:               0F20 DEFINED AT LINE 134 IN core-memory.z80
                    > USED AT LINE 132 IN core-memory.z80
CMOVE:              0F22 DEFINED AT LINE 11
                    > USED AT LINE 188 IN core-memory.z80
CMOV1:              0F2C DEFINED AT LINE 143 IN core-memory.z80
                    > USED AT LINE 149 IN core-memory.z80
CMOV2:              0F44 DEFINED AT LINE 148 IN core-memory.z80
                    > USED AT LINE 142 IN core-memory.z80
FILL:               0F4C DEFINED AT LINE 11
FILL1:              0F5A DEFINED AT LINE 158 IN core-memory.z80
                    > USED AT LINE 161 IN core-memory.z80
FILL2:              0F64 DEFINED AT LINE 160 IN core-memory.z80
                    > USED AT LINE 157 IN core-memory.z80
DTRAI:              0F6C DEFINED AT LINE 11
DTRA1:              0F76 DEFINED AT LINE 170 IN core-memory.z80
                    > USED AT LINE 175 IN core-memory.z80
DTRA2:              0F90 DEFINED AT LINE 174 IN core-memory.z80
                    > USED AT LINE 169 IN core-memory.z80
                    > USED AT LINE 172 IN core-memory.z80
PACKS:              0F9A DEFINED AT LINE 11
                    > USED AT LINE 116 IN core-interpret.z80
ALGND:              0FD4 DEFINED AT LINE 11
                    > USED AT LINE 71 IN core-compiler.z80
                    > USED AT LINE 138 IN core-io.z80
                    > USED AT LINE 182 IN core-memory.z80
ALGN1:              0FF4 DEFINED AT LINE 197 IN core-memory.z80
                    > USED AT LINE 195 IN core-memory.z80
ERR_DIVZERO:        0FF8 DEFINED AT LINE 3 IN core-messages.z80
                    > USED AT LINE 190 IN core-alu.z80
ERR_OUTOFRANGE:     1000 DEFINED AT LINE 4 IN core-messages.z80
                    > USED AT LINE 193 IN core-alu.z80
TOR:                100C DEFINED AT LINE 11
                    > USED AT LINE 65 IN core-alu.z80
                    > USED AT LINE 235 IN core-alu.z80
                    > USED AT LINE 237 IN core-alu.z80
                    > USED AT LINE 309 IN core-alu.z80
                    > USED AT LINE 32 IN core-compiler.z80
                    > USED AT LINE 4 IN core-control.z80
                    > USED AT LINE 64 IN core-does.z80
                    > USED AT LINE 57 IN core-format.z80
                    > USED AT LINE 5 IN core-interpret.z80
                    > USED AT LINE 27 IN core-interpret.z80
                    > USED AT LINE 54 IN core-interpret.z80
                    > USED AT LINE 66 IN core-interpret.z80
                    > USED AT LINE 76 IN core-interpret.z80
                    > USED AT LINE 91 IN core-interpret.z80
                    > USED AT LINE 131 IN core-interpret.z80
                    > USED AT LINE 170 IN core-interpret.z80
                    > USED AT LINE 184 IN core-interpret.z80
                    > USED AT LINE 108 IN core-io.z80
                    > USED AT LINE 138 IN core-io.z80
                    > USED AT LINE 154 IN core-io.z80
                    > USED AT LINE 160 IN core-io.z80
                    > USED AT LINE 192 IN core-io.z80
                    > USED AT LINE 141 IN core-memory.z80
                    > USED AT LINE 144 IN core-memory.z80
                    > USED AT LINE 156 IN core-memory.z80
                    > USED AT LINE 168 IN core-memory.z80
                    > USED AT LINE 63 IN core-stacks.z80
                    > USED AT LINE 78 IN core-stacks.z80
                    > USED AT LINE 4 IN core-utils.z80
                    > USED AT LINE 17 IN core-utils.z80
                    > USED AT LINE 32 IN core-utils.z80
                    > USED AT LINE 51 IN core-utils.z80
RFROM:              101A DEFINED AT LINE 11
                    > USED AT LINE 67 IN core-alu.z80
                    > USED AT LINE 129 IN core-alu.z80
                    > USED AT LINE 241 IN core-alu.z80
                    > USED AT LINE 301 IN core-alu.z80
                    > USED AT LINE 31 IN core-compiler.z80
                    > USED AT LINE 36 IN core-does.z80
                    > USED AT LINE 47 IN core-does.z80
                    > USED AT LINE 11 IN core-interpret.z80
                    > USED AT LINE 39 IN core-interpret.z80
                    > USED AT LINE 39 IN core-interpret.z80
                    > USED AT LINE 43 IN core-interpret.z80
                    > USED AT LINE 44 IN core-interpret.z80
                    > USED AT LINE 61 IN core-interpret.z80
                    > USED AT LINE 63 IN core-interpret.z80
                    > USED AT LINE 79 IN core-interpret.z80
                    > USED AT LINE 83 IN core-interpret.z80
                    > USED AT LINE 83 IN core-interpret.z80
                    > USED AT LINE 85 IN core-interpret.z80
                    > USED AT LINE 93 IN core-interpret.z80
                    > USED AT LINE 137 IN core-interpret.z80
                    > USED AT LINE 155 IN core-interpret.z80
                    > USED AT LINE 160 IN core-interpret.z80
                    > USED AT LINE 171 IN core-interpret.z80
                    > USED AT LINE 176 IN core-interpret.z80
                    > USED AT LINE 177 IN core-interpret.z80
                    > USED AT LINE 186 IN core-interpret.z80
                    > USED AT LINE 187 IN core-interpret.z80
                    > USED AT LINE 193 IN core-interpret.z80
                    > USED AT LINE 194 IN core-interpret.z80
                    > USED AT LINE 195 IN core-interpret.z80
                    > USED AT LINE 137 IN core-io.z80
                    > USED AT LINE 161 IN core-io.z80
                    > USED AT LINE 147 IN core-memory.z80
                    > USED AT LINE 173 IN core-memory.z80
                    > USED AT LINE 42 IN core-utils.z80
                    > USED AT LINE 44 IN core-utils.z80
DUPP:               1028 DEFINED AT LINE 11
                    > USED AT LINE 77 IN core-alu.z80
                    > USED AT LINE 233 IN core-alu.z80
                    > USED AT LINE 237 IN core-alu.z80
                    > USED AT LINE 18 IN core-compiler.z80
                    > USED AT LINE 31 IN core-compiler.z80
                    > USED AT LINE 56 IN core-compiler.z80
                    > USED AT LINE 67 IN core-compiler.z80
                    > USED AT LINE 70 IN core-compiler.z80
                    > USED AT LINE 74 IN core-compiler.z80
                    > USED AT LINE 23 IN core-format.z80
                    > USED AT LINE 34 IN core-format.z80
                    > USED AT LINE 57 IN core-format.z80
                    > USED AT LINE 9 IN core-interpret.z80
                    > USED AT LINE 11 IN core-interpret.z80
                    > USED AT LINE 27 IN core-interpret.z80
                    > USED AT LINE 41 IN core-interpret.z80
                    > USED AT LINE 76 IN core-interpret.z80
                    > USED AT LINE 144 IN core-interpret.z80
                    > USED AT LINE 146 IN core-interpret.z80
                    > USED AT LINE 147 IN core-interpret.z80
                    > USED AT LINE 149 IN core-interpret.z80
                    > USED AT LINE 162 IN core-interpret.z80
                    > USED AT LINE 167 IN core-interpret.z80
                    > USED AT LINE 265 IN core-interpret.z80
                    > USED AT LINE 63 IN core-io.z80
                    > USED AT LINE 78 IN core-io.z80
                    > USED AT LINE 111 IN core-io.z80
                    > USED AT LINE 121 IN core-io.z80
                    > USED AT LINE 122 IN core-io.z80
                    > USED AT LINE 203 IN core-io.z80
                    > USED AT LINE 209 IN core-io.z80
                    > USED AT LINE 226 IN core-io.z80
                    > USED AT LINE 102 IN core-memory.z80
                    > USED AT LINE 108 IN core-memory.z80
                    > USED AT LINE 144 IN core-memory.z80
                    > USED AT LINE 182 IN core-memory.z80
                    > USED AT LINE 183 IN core-memory.z80
                    > USED AT LINE 193 IN core-memory.z80
                    > USED AT LINE 55 IN core-stacks.z80
                    > USED AT LINE 56 IN core-stacks.z80
                    > USED AT LINE 7 IN core-utils.z80
                    > USED AT LINE 20 IN core-utils.z80
                    > USED AT LINE 78 IN core-utils.z80
                    > USED AT LINE 109 IN core-utils.z80
                    > USED AT LINE 118 IN core-utils.z80
DROP:               102C DEFINED AT LINE 11
                    > USED AT LINE 50 IN core-alu.z80
                    > USED AT LINE 96 IN core-alu.z80
                    > USED AT LINE 104 IN core-alu.z80
                    > USED AT LINE 114 IN core-alu.z80
                    > USED AT LINE 123 IN core-alu.z80
                    > USED AT LINE 148 IN core-alu.z80
                    > USED AT LINE 255 IN core-alu.z80
                    > USED AT LINE 295 IN core-alu.z80
                    > USED AT LINE 61 IN core-compiler.z80
                    > USED AT LINE 54 IN core-control.z80
                    > USED AT LINE 51 IN core-format.z80
                    > USED AT LINE 83 IN core-format.z80
                    > USED AT LINE 61 IN core-interpret.z80
                    > USED AT LINE 79 IN core-interpret.z80
                    > USED AT LINE 137 IN core-interpret.z80
                    > USED AT LINE 155 IN core-interpret.z80
                    > USED AT LINE 160 IN core-interpret.z80
                    > USED AT LINE 176 IN core-interpret.z80
                    > USED AT LINE 177 IN core-interpret.z80
                    > USED AT LINE 187 IN core-interpret.z80
                    > USED AT LINE 195 IN core-interpret.z80
                    > USED AT LINE 219 IN core-interpret.z80
                    > USED AT LINE 270 IN core-interpret.z80
                    > USED AT LINE 115 IN core-io.z80
                    > USED AT LINE 127 IN core-io.z80
                    > USED AT LINE 217 IN core-io.z80
                    > USED AT LINE 236 IN core-io.z80
                    > USED AT LINE 247 IN core-io.z80
                    > USED AT LINE 194 IN core-memory.z80
                    > USED AT LINE 68 IN core-stacks.z80
                    > USED AT LINE 68 IN core-stacks.z80
                    > USED AT LINE 11 IN core-utils.z80
                    > USED AT LINE 42 IN core-utils.z80
                    > USED AT LINE 44 IN core-utils.z80
                    > USED AT LINE 85 IN core-utils.z80
                    > USED AT LINE 87 IN core-utils.z80
                    > USED AT LINE 89 IN core-utils.z80
                    > USED AT LINE 122 IN core-utils.z80
SWAP:               1030 DEFINED AT LINE 11
                    > USED AT LINE 96 IN core-alu.z80
                    > USED AT LINE 112 IN core-alu.z80
                    > USED AT LINE 119 IN core-alu.z80
                    > USED AT LINE 121 IN core-alu.z80
                    > USED AT LINE 148 IN core-alu.z80
                    > USED AT LINE 243 IN core-alu.z80
                    > USED AT LINE 260 IN core-alu.z80
                    > USED AT LINE 314 IN core-alu.z80
                    > USED AT LINE 48 IN core-control.z80
                    > USED AT LINE 59 IN core-control.z80
                    > USED AT LINE 64 IN core-control.z80
                    > USED AT LINE 12 IN core-format.z80
                    > USED AT LINE 19 IN core-interpret.z80
                    > USED AT LINE 20 IN core-interpret.z80
                    > USED AT LINE 23 IN core-interpret.z80
                    > USED AT LINE 29 IN core-interpret.z80
                    > USED AT LINE 32 IN core-interpret.z80
                    > USED AT LINE 36 IN core-interpret.z80
                    > USED AT LINE 65 IN core-interpret.z80
                    > USED AT LINE 144 IN core-interpret.z80
                    > USED AT LINE 156 IN core-interpret.z80
                    > USED AT LINE 194 IN core-interpret.z80
                    > USED AT LINE 217 IN core-io.z80
                    > USED AT LINE 90 IN core-memory.z80
                    > USED AT LINE 91 IN core-memory.z80
                    > USED AT LINE 96 IN core-memory.z80
                    > USED AT LINE 103 IN core-memory.z80
                    > USED AT LINE 109 IN core-memory.z80
                    > USED AT LINE 156 IN core-memory.z80
                    > USED AT LINE 188 IN core-memory.z80
                    > USED AT LINE 63 IN core-stacks.z80
                    > USED AT LINE 85 IN core-utils.z80
                    > USED AT LINE 87 IN core-utils.z80
OVER:               1038 DEFINED AT LINE 11
                    > USED AT LINE 128 IN core-alu.z80
                    > USED AT LINE 250 IN core-alu.z80
                    > USED AT LINE 59 IN core-compiler.z80
                    > USED AT LINE 65 IN core-does.z80
                    > USED AT LINE 52 IN core-format.z80
                    > USED AT LINE 17 IN core-interpret.z80
                    > USED AT LINE 22 IN core-interpret.z80
                    > USED AT LINE 56 IN core-interpret.z80
                    > USED AT LINE 65 IN core-interpret.z80
                    > USED AT LINE 82 IN core-interpret.z80
                    > USED AT LINE 85 IN core-interpret.z80
                    > USED AT LINE 133 IN core-interpret.z80
                    > USED AT LINE 134 IN core-interpret.z80
                    > USED AT LINE 161 IN core-io.z80
                    > USED AT LINE 192 IN core-io.z80
                    > USED AT LINE 204 IN core-io.z80
                    > USED AT LINE 222 IN core-io.z80
                    > USED AT LINE 236 IN core-io.z80
                    > USED AT LINE 90 IN core-memory.z80
                    > USED AT LINE 96 IN core-memory.z80
                    > USED AT LINE 171 IN core-memory.z80
                    > USED AT LINE 183 IN core-memory.z80
                    > USED AT LINE 185 IN core-memory.z80
                    > USED AT LINE 73 IN core-stacks.z80
                    > USED AT LINE 73 IN core-stacks.z80
                    > USED AT LINE 16 IN core-utils.z80
QDUP:               1040 DEFINED AT LINE 11
                    > USED AT LINE 84 IN core-compiler.z80
                    > USED AT LINE 135 IN core-interpret.z80
                    > USED AT LINE 172 IN core-interpret.z80
                    > USED AT LINE 174 IN core-interpret.z80
                    > USED AT LINE 225 IN core-interpret.z80
                    > USED AT LINE 131 IN core-memory.z80
                    > USED AT LINE 94 IN core-utils.z80
                    > USED AT LINE 113 IN core-utils.z80
QDUP1:              104C DEFINED AT LINE 57 IN core-stacks.z80
ROT:                104E DEFINED AT LINE 11
                    > USED AT LINE 78 IN core-stacks.z80
                    > USED AT LINE 35 IN core-utils.z80
                    > USED AT LINE 35 IN core-utils.z80
DDROP:              105C DEFINED AT LINE 11
                    > USED AT LINE 43 IN core-interpret.z80
                    > USED AT LINE 80 IN core-io.z80
                    > USED AT LINE 150 IN core-memory.z80
                    > USED AT LINE 162 IN core-memory.z80
DDUP:               1066 DEFINED AT LINE 11
                    > USED AT LINE 94 IN core-alu.z80
                    > USED AT LINE 103 IN core-alu.z80
                    > USED AT LINE 111 IN core-alu.z80
                    > USED AT LINE 119 IN core-alu.z80
                    > USED AT LINE 300 IN core-alu.z80
                    > USED AT LINE 224 IN core-io.z80
                    > USED AT LINE 159 IN core-memory.z80
                    > USED AT LINE 187 IN core-memory.z80
                    > USED AT LINE 76 IN core-utils.z80
                    > USED AT LINE 80 IN core-utils.z80
TWOSWAP:            1070 DEFINED AT LINE 11
PICK:               107E DEFINED AT LINE 11
                    > USED AT LINE 54 IN core-utils.z80
DEPTH:              1092 DEFINED AT LINE 11
                    > USED AT LINE 256 IN core-interpret.z80
                    > USED AT LINE 50 IN core-utils.z80
SZERO:              10A8 DEFINED AT LINE 11
                    > USED AT LINE 34 IN core-kernel.z80
                    > USED AT LINE 89 IN core-stacks.z80
RZERO:              10B0 DEFINED AT LINE 11
TQKEY:              10B8 DEFINED AT LINE 49
                    > USED AT LINE 56 IN core-io.z80
TEMIT:              10C0 DEFINED AT LINE 49
                    > USED AT LINE 72 IN core-io.z80
TEXPE:              10C8 DEFINED AT LINE 49
                    > USED AT LINE 241 IN core-io.z80
TTAP:               10D0 DEFINED AT LINE 49
                    > USED AT LINE 232 IN core-io.z80
TECHO:              10D8 DEFINED AT LINE 49
                    > USED AT LINE 195 IN core-io.z80
                    > USED AT LINE 203 IN core-io.z80
TPROM:              10E0 DEFINED AT LINE 49
                    > USED AT LINE 270 IN core-interpret.z80
BASE:               10E8 DEFINED AT LINE 11
                    > USED AT LINE 28 IN core-format.z80
                    > USED AT LINE 16 IN core-interpret.z80
                    > USED AT LINE 29 IN core-interpret.z80
                    > USED AT LINE 44 IN core-interpret.z80
                    > USED AT LINE 173 IN core-io.z80
                    > USED AT LINE 30 IN core-utils.z80
TEMP:               10F0 DEFINED AT LINE 11
                    > USED AT LINE 50 IN core-interpret.z80
                    > USED AT LINE 68 IN core-interpret.z80
                    > USED AT LINE 69 IN core-interpret.z80
                    > USED AT LINE 153 IN core-interpret.z80
SPAN:               10F8 DEFINED AT LINE 49
INN:                1100 DEFINED AT LINE 11
NTIB:               1108 DEFINED AT LINE 49
                    > USED AT LINE 92 IN core-interpret.z80
                    > USED AT LINE 104 IN core-interpret.z80
                    > USED AT LINE 125 IN core-memory.z80
CSP:                1110 DEFINED AT LINE 49
TEVAL:              1118 DEFINED AT LINE 49
                    > USED AT LINE 267 IN core-interpret.z80
TNUMB:              1120 DEFINED AT LINE 49
                    > USED AT LINE 92 IN core-compiler.z80
                    > USED AT LINE 231 IN core-interpret.z80
HLD:                1128 DEFINED AT LINE 49
                    > USED AT LINE 17 IN core-format.z80
                    > USED AT LINE 22 IN core-format.z80
                    > USED AT LINE 23 IN core-format.z80
                    > USED AT LINE 51 IN core-format.z80
HANDL:              1130 DEFINED AT LINE 49
                    > USED AT LINE 185 IN core-interpret.z80
                    > USED AT LINE 186 IN core-interpret.z80
                    > USED AT LINE 192 IN core-interpret.z80
                    > USED AT LINE 193 IN core-interpret.z80
CNTXT:              1138 DEFINED AT LINE 49
                    > USED AT LINE 167 IN core-interpret.z80
CRRNT:              1140 DEFINED AT LINE 49
                    > USED AT LINE 73 IN core-compiler.z80
                    > USED AT LINE 72 IN core-utils.z80
CP:                 1148 DEFINED AT LINE 49
                    > USED AT LINE 13 IN core-compiler.z80
                    > USED AT LINE 19 IN core-compiler.z80
                    > USED AT LINE 45 IN core-compiler.z80
                    > USED AT LINE 114 IN core-memory.z80
NP:                 1150 DEFINED AT LINE 49
                    > USED AT LINE 115 IN core-interpret.z80
LAST:               1158 DEFINED AT LINE 11
                    > USED AT LINE 50 IN core-compiler.z80
                    > USED AT LINE 70 IN core-compiler.z80
                    > USED AT LINE 101 IN core-compiler.z80
                    > USED AT LINE 134 IN core-compiler.z80
VFRTH:              1160 DEFINED AT LINE 49
UTYPE:              1168 DEFINED AT LINE 11
                    > USED AT LINE 97 IN core-utils.z80
UTYP1:              1172 DEFINED AT LINE 6 IN core-utils.z80
                    > USED AT LINE 10 IN core-utils.z80
UTYP2:              1180 DEFINED AT LINE 9 IN core-utils.z80
                    > USED AT LINE 5 IN core-utils.z80
DMP:                1188 DEFINED AT LINE 49
PDUM1:              119C DEFINED AT LINE 19 IN core-utils.z80
                    > USED AT LINE 23 IN core-utils.z80
PDUM2:              11AC DEFINED AT LINE 22 IN core-utils.z80
                    > USED AT LINE 18 IN core-utils.z80
DUMP:               11B2 DEFINED AT LINE 11
DUMP1:              11C6 DEFINED AT LINE 33 IN core-utils.z80
                    > USED AT LINE 39 IN core-utils.z80
DUMP2:              11EA DEFINED AT LINE 41 IN core-utils.z80
                    > USED AT LINE 38 IN core-utils.z80
DUMP3:              11EE DEFINED AT LINE 43 IN core-utils.z80
                    > USED AT LINE 40 IN core-utils.z80
DOTS:               11F8 DEFINED AT LINE 11
DOTS1:              1206 DEFINED AT LINE 53 IN core-utils.z80
                    > USED AT LINE 56 IN core-utils.z80
DOTS2:              120C DEFINED AT LINE 55 IN core-utils.z80
                    > USED AT LINE 52 IN core-utils.z80
TNAME:              121A DEFINED AT LINE 11
                    > USED AT LINE 111 IN core-utils.z80
TNAM1:              1220 DEFINED AT LINE 73 IN core-utils.z80
                    > USED AT LINE 86 IN core-utils.z80
TNAM2:              122C DEFINED AT LINE 77 IN core-utils.z80
                    > USED AT LINE 83 IN core-utils.z80
TNAM3:              1244 DEFINED AT LINE 84 IN core-utils.z80
                    > USED AT LINE 79 IN core-utils.z80
                    > USED AT LINE 81 IN core-utils.z80
TNAM4:              1258 DEFINED AT LINE 88 IN core-utils.z80
                    > USED AT LINE 75 IN core-utils.z80
DOTID:              1260 DEFINED AT LINE 11
                    > USED AT LINE 115 IN core-utils.z80
DOTI1:              1276 DEFINED AT LINE 98 IN core-utils.z80
                    > USED AT LINE 95 IN core-utils.z80
SEE:                1284 DEFINED AT LINE 11
SEE1:               128E DEFINED AT LINE 108 IN core-utils.z80
                    > USED AT LINE 121 IN core-utils.z80
SEE2:               129C DEFINED AT LINE 112 IN core-utils.z80
                    > USED AT LINE 110 IN core-utils.z80
SEE3:               12AA DEFINED AT LINE 117 IN core-utils.z80
                    > USED AT LINE 114 IN core-utils.z80
SEE4:               12B0 DEFINED AT LINE 119 IN core-utils.z80
                    > USED AT LINE 116 IN core-utils.z80
LASTN:              130A DEFINED AT LINE 91
                    > USED AT LINE 30 IN defaults.z80
                    > USED AT LINE 31 IN defaults.z80
SPP:                2200 DEFINED AT LINE 3 IN variables.z80
                    > USED AT LINE 45
                    > USED AT LINE 5 IN defaults.z80
TIBB:               2200 DEFINED AT LINE 4 IN variables.z80
                    > USED AT LINE 18 IN defaults.z80
                    > USED AT LINE 35 IN core-kernel.z80
RPP:                2400 DEFINED AT LINE 6 IN variables.z80
                    > USED AT LINE 53
                    > USED AT LINE 6 IN defaults.z80
UPP:                2400 DEFINED AT LINE 7 IN variables.z80
                    > USED AT LINE 49
                    > USED AT LINE 42 IN core-does.z80
VARSZERO:           2400 DEFINED AT LINE 9 IN variables.z80
VARRZERO:           2402 DEFINED AT LINE 10 IN variables.z80
VARTQKEY:           2404 DEFINED AT LINE 11 IN variables.z80
VARTEMIT:           2406 DEFINED AT LINE 12 IN variables.z80
VARTEXPE:           2408 DEFINED AT LINE 13 IN variables.z80
VARTTAP:            240A DEFINED AT LINE 14 IN variables.z80
VARTECHO:           240C DEFINED AT LINE 15 IN variables.z80
VARTPROM:           240E DEFINED AT LINE 16 IN variables.z80
VARBASE:            2410 DEFINED AT LINE 17 IN variables.z80
VARTEMP:            2412 DEFINED AT LINE 18 IN variables.z80
VARSPAN:            2414 DEFINED AT LINE 19 IN variables.z80
VARINN:             2416 DEFINED AT LINE 20 IN variables.z80
VARNTIB:            2418 DEFINED AT LINE 21 IN variables.z80
VARTIB:             241A DEFINED AT LINE 22 IN variables.z80
VARCSP:             241C DEFINED AT LINE 23 IN variables.z80
VARTEVAL:           241E DEFINED AT LINE 24 IN variables.z80
VARTNUMB:           2420 DEFINED AT LINE 25 IN variables.z80
VARHLD:             2422 DEFINED AT LINE 26 IN variables.z80
VARHANDL:           2424 DEFINED AT LINE 27 IN variables.z80
VARCNTXT:           2426 DEFINED AT LINE 28 IN variables.z80
VARVOCABS:          2428 DEFINED AT LINE 29 IN variables.z80
VARCRRNT:           242A DEFINED AT LINE 30 IN variables.z80
VARVOCABLP:         242C DEFINED AT LINE 31 IN variables.z80
VARCP:              242E DEFINED AT LINE 32 IN variables.z80
VARNP:              2430 DEFINED AT LINE 33 IN variables.z80
VARLAST:            2432 DEFINED AT LINE 34 IN variables.z80
VARVFRTH:           2434 DEFINED AT LINE 35 IN variables.z80
VARVOCABL:          2436 DEFINED AT LINE 36 IN variables.z80
SERINPTR:           2438 DEFINED AT LINE 38 IN variables.z80
                    > USED AT LINE 16 IN interrupt.z80
                    > USED AT LINE 22 IN interrupt.z80
                    > USED AT LINE 7 IN serial.z80
SERRDPTR:           243A DEFINED AT LINE 39 IN variables.z80
                    > USED AT LINE 8 IN serial.z80
                    > USED AT LINE 23 IN serial.z80
                    > USED AT LINE 31 IN serial.z80
SERBUFUSED:         243C DEFINED AT LINE 40 IN variables.z80
                    > USED AT LINE 10 IN interrupt.z80
                    > USED AT LINE 25 IN interrupt.z80
                    > USED AT LINE 27 IN interrupt.z80
                    > USED AT LINE 10 IN serial.z80
                    > USED AT LINE 18 IN serial.z80
                    > USED AT LINE 32 IN serial.z80
                    > USED AT LINE 34 IN serial.z80
                    > USED AT LINE 60 IN serial.z80
SERBUF:             243E DEFINED AT LINE 41 IN variables.z80
                    > USED AT LINE 19 IN interrupt.z80
                    > USED AT LINE 21 IN interrupt.z80
                    > USED AT LINE 6 IN serial.z80
                    > USED AT LINE 26 IN serial.z80
                    > USED AT LINE 28 IN serial.z80
VECTAB:             247D DEFINED AT LINE 43 IN variables.z80
VRST08:             247D DEFINED AT LINE 44 IN variables.z80
                    > USED AT LINE 12
VRST10:             247F DEFINED AT LINE 45 IN variables.z80
                    > USED AT LINE 16
VRST18:             2481 DEFINED AT LINE 46 IN variables.z80
                    > USED AT LINE 20
VRST20:             2483 DEFINED AT LINE 47 IN variables.z80
                    > USED AT LINE 24
VRST28:             2485 DEFINED AT LINE 48 IN variables.z80
                    > USED AT LINE 28
VRST30:             2487 DEFINED AT LINE 49 IN variables.z80
                    > USED AT LINE 32
VINT:               2489 DEFINED AT LINE 50 IN variables.z80
                    > USED AT LINE 36
                    > USED AT LINE 44
VNMI:               248B DEFINED AT LINE 51 IN variables.z80
                    > USED AT LINE 40
CPP:                248D DEFINED AT LINE 53 IN variables.z80
                    > USED AT LINE 28 IN defaults.z80
NPP:                FFFE DEFINED AT LINE 55 IN variables.z80
                    > USED AT LINE 29 IN defaults.z80

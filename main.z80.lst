0000                             ; .ENGINE mycomputer
0000                TESTMODE:   EQU   0   
0000                MEM_SIZE:   EQU   $10000   ; MEM is 64K
0000                ROM_SIZE:   EQU   $2000   ; ROM is 8K
0000                RAM_SIZE:   EQU   MEM_SIZE - ROM_SIZE   ; RAM is 64K - 8K
0000                START_ROM:   EQU   BM   ; inclusive
0000                END_ROM:   EQU   BM + ROM_SIZE   ; exclusive
0000                START_RAM:   EQU   BM + ROM_SIZE   ; inclusive
0000                END_RAM:   EQU   START_RAM + RAM_SIZE   ; exclusive
0000                BM:       EQU   0   ; bottom of ROM memory
0000                EM:       EQU   BM + MEM_SIZE   
0000                COMPO:    EQU   $20   ;lexicon compile only bit
0000                IMEDD:    EQU   $40   ;lexicon immediate bit
0000                MASKK:    EQU   $1F   ;lexicon bit mask
0000                CHARR:    EQU   1   ;byte size of a character
0000                CELLL:    EQU   2   
0000                BASEE:    EQU   10   ;BASE
0000                VOCSS:    EQU   8   ;depth of vocabulary stack
0000                MAXCHAR:   EQU   0FFh   ;Extended character set					                    ;  Use 07Fh for ASCII only
0000                MAXSIGNED:   EQU   07FFFh   ;max value of signed integer
0000                MAXUNSIGNED:   EQU   0FFFFh   ;max value of unsigned integer
0000                MAXNEGATIVE:   EQU   8000h   ;max value of negative integer
0000                BKSPP:    EQU   8   ;backspace
0000                LFF:      EQU   $0A   ;line feed
0000                CRR:      EQU   $0D   ;carriage return
0000                SPACEE:   EQU   $20   
0000                TIC:      EQU   $27   ;tick
0000                MINUSS:   EQU   $2D   
0000                UNDERSC:   EQU   $5F   
0000                CALLL:    EQU   $CD00   ; NOP followed by CALL opcodes
0000                US:       EQU   END_DEFAULTS - DEFAULTS   ;user area size
0000                RTS:      EQU   $100 * CELLL   ;return stack/TIB size
0000                DTS:      EQU   $100 * CELLL   ;data stack size
0000                RET_STACK_SIZE:   EQU   $100   
0000                DATA_STACK_SIZE:   EQU   $100   
0000                INT_ADDR:   EQU   $0038   
0000                SER_BUFSIZE:   EQU   $3F   
0000                SER_FULLSIZE:   EQU   $30   
0000                SER_EMPTYSIZE:   EQU   5   
0000                RTS_HIGH:   EQU   $D6   
0000                RTS_LOW:   EQU   $96   
0000                TRUEE:    EQU   -1   
0000                FALSEE:   EQU   0   
0000                             ; Initialize assembly variables
0000                VVCODE:   .SET   0   
0000                VVNAME:   .SET   END_ROM   
0000                VVLINK:   .SET   0   ;force a null link
0000                VVUSER:   .SET   0   ;first user variable offset
0000                .macro MCODE,aaLEX,aaNAME,aaLABEL
0000                             ; 
0000                 .align 2                                         ; force to cell boundary
0000                aaLABEL:                                              ; assembly label
0000                 vvCODE .set $
0000                 vvLEN  .set (aaLEX & 01FH) / CELLL              ; string cell count, round down
0000                 ORG vvNAME - ((vvLEN + 3) * CELLL)                                     ; ? needed
0000                 vvNAME .set $
0000                 DW vvCODE, vvLINK                               ; token pointer and link
0000                 vvLINK .set $                                   ; link points to a name string
0000                 DB aaLEX, aaNAME                                    ; name string
0000                 ORG vvCODE                                      ; restore code pointer
0000                .endm
0000                 
0000                .macro MCOLON,aaLEX,aaNAME,aaLABEL
0000                             ; 
0000                 mCODE aaLEX, aaNAME, aaLABEL
0000                 nop
0000                 CALL doLIST
0000                .endm
0000                 
0000                .macro MUSER,aaLEX,aaNAME,aaLABEL
0000                             ; 
0000                	mCODE aaLEX, aaNAME, aaLABEL
0000                 nop
0000                 CALL doLIST
0000                 DW DoUSE,vvUSER
0000                 vvUSER .set vvUSER + CELLL
0000                .endm
0000                 
0000                             ; .align 2
0000                .macro MDSTR,aaFUNC,aaSTR
0000                             ; 
0000                 DW aaFUNC                       ; function
0000                 vvLEN .set $                    ; save address of count byte
0000                 DB 0,aaSTR                      ; count byte and string
0000                 vvCODE .set $                   ; save code pointer
0000                ORG vvLEN                           ; point to count byte
0000                 DB vvCODE - vvLEN - 1           ; set count
0000                ORG vvCODE                          ; restore code pointer
0000                .endm
0000                 
0000                .macro HCODE,aaLEX,aaNAME,aaLABEL
0000                             ; 
0000                 .align 2                                         ; force to cell boundary
0000                aaLABEL:                                              ; assembly label
0000                .endm
0000                 
0000                .macro HCOLON,aaLEX,aaNAME,aaLABEL
0000                             ; 
0000                 hCODE aaLEX, aaNAME, aaLABEL
0000                 nop
0000                 CALL doLIST
0000                .endm
0000                 
0000                .macro HUSER,aaLEX,aaNAME,aaLABEL
0000                             ; 
0000                	hCODE aaLEX, aaNAME, aaLABEL
0000                 nop
0000                 CALL doLIST
0000                 DW DoUSE,vvUSER
0000                 vvUSER .set vvUSER + CELLL
0000                .endm
0000                 
0000                .macro MNEXTHL,
0000                             ; 
0000                 JP (IY)
0000                .endm
0000                 
0000                .macro MNEXT,
0000                             ; 
0000                	EX	DE,HL	                    ; 4t
0000                 JP (IY)
0000                .endm
0000                 
0000                          .ORG   START_ROM   
0000   C3 6C 00     RESET:    JP   INIT   
0008                          .ORG   $08   
0008   FD 2A 7D 24  RST08:    LD   IY,(vRST08)   
000C   FD E9                  JP   (IY)   
0010                          .ORG   $10   
0010   FD 2A 7F 24  RST10:    LD   IY,(vRST10)   
0014   FD E9                  JP   (IY)   
0018                          .ORG   $18   
0018   FD 2A 81 24  RST18:    LD   IY,(vRST18)   
001C   FD E9                  JP   (IY)   
0020                          .ORG   $20   
0020   FD 2A 83 24  RST20:    LD   IY,(vRST20)   
0024   FD E9                  JP   (IY)   
0028                          .ORG   $28   
0028   FD 2A 85 24  RST28:    LD   IY,(vRST28)   
002C   FD E9                  JP   (IY)   
0030                          .ORG   $30   
0030   FD 2A 87 24  RST30:    LD   IY,(vRST30)   
0034   FD E9                  JP   (IY)   
0038                          .ORG   $38   
0038   FD 2A 89 24  RST38:    LD   IY,(vINT)   
003C   FD E9                  JP   (IY)   
0066                          .ORG   $66   
0066   FD 2A 8B 24  RST66:    LD   IY,(vNMI)   
006A   FD E9                  JP   (IY)   
006C                INIT:        
006C   21 93 00               LD   HL,SER_INTR   
006F   22 89 24               LD   (vINT),HL   
0072   21 00 22               LD   HL,SPP   ; Setup Forth data stack
0075   F9                     LD   SP,HL   ; also used as return stack by interrupts etc
0076   21 1A 01               LD   HL,DEFAULTS   ; initialize user variables with defaults
0079   11 45 24               LD   DE,UPP   
007C   01 3A 00               LD   BC,US   
007F   ED B0                  LDIR      
0081   DD 21 00 24            LD   IX,RPP   ; set up Forth return stack
0085   FD 21 F7 0D            LD   IY,NEXT_STEP   
0089   01 FF FF               LD   BC,-1   ; empty stack marker
008C   21 FE 0D               LD   HL,HI   
008F   CD F0 0D               CALL   CALL_FORTH   
0092   76                     HALT      
0093                          IF   TESTMODE   
                              JP   TESTS_START   
0093                          ELSE      
0093                          ENDIF      
0093   F5           SER_INTR:   PUSH   AF   
0094   E5                     PUSH   HL   
0095   DB 80                  IN   A,($80)   
0097   E6 01                  AND   $01   ; Check if interupt due to read buffer full
0099   28 2D                  JR   Z,rts0   ; if not, ignore
009B   DB 81                  IN   A,($81)   
009D   F5                     PUSH   AF   
009E   3A 43 24               LD   A,(serBufUsed)   
00A1   FE 3F                  CP   SER_BUFSIZE   ; If full then ignore
00A3   20 03                  JR   NZ,notFull   
00A5   F1                     POP   AF   
00A6   18 20                  JR   rts0   
00A8   2A 3F 24     NOTFULL:   LD   HL,(serInPtr)   
00AB   23                     INC   HL   
00AC   7D                     LD   A,L   ; Only need to check low byte becasuse buffer<256 bytes
00AD   FE 3F                  CP   (SERBUF+SER_BUFSIZE) & $FF   
00AF   20 03                  JR   NZ,notWrap   
00B1   21 00 24               LD   HL,SERBUF   
00B4   22 3F 24     NOTWRAP:   LD   (serInPtr),HL   
00B7   F1                     POP   AF   
00B8   77                     LD   (HL),A   
00B9   3A 43 24               LD   A,(serBufUsed)   
00BC   3C                     INC   A   
00BD   32 43 24               LD   (serBufUsed),A   
00C0   FE 30                  CP   SER_FULLSIZE   
00C2   38 04                  JR   C,rts0   
00C4   3E D6                  LD   A,RTS_HIGH   
00C6   D3 80                  OUT   ($80),A   
00C8   E1           RTS0:     POP   HL   
00C9   F1                     POP   AF   
00CA   FD 21 F7 0D            LD   IY,NEXT_STEP   
00CE   FB                     EI      
00CF   ED 4D                  RETI      
00D1                             ; Modified from code by Grant Searle
00D1                             ; Minimum 6850 ACIA interrupt driven serial I/O
00D1                INIT_IO:      
00D1   F3                     DI      ; Disable interrupts
00D2   21 00 24               LD   HL,SERBUF   
00D5   22 3F 24               LD   (serInPtr),HL   
00D8   22 41 24               LD   (serRdPtr),HL   
00DB   AF                     XOR   A   
00DC   32 43 24               LD   (serBufUsed),A   
00DF   3E 96                  LD   A,RTS_LOW   
00E1   D3 80                  OUT   ($80),A   ; Initialise ACIA
00E3   FB                     EI      
00E4   C9                     RET      
00E5                RXA:         
00E5   E5                     PUSH   HL   
00E6   2A 41 24               LD   HL,(serRdPtr)   
00E9   23                     INC   HL   
00EA   7D                     LD   A,L   ; Only need to check low byte becasuse buffer<256 bytes
00EB   FE 3F                  CP   (SERBUF+SER_BUFSIZE) & $FF   
00ED   20 03                  JR   NZ,RXA1   
00EF   21 00 24               LD   HL,SERBUF   
00F2                RXA1:        
00F2   F3                     DI      
00F3   22 41 24               LD   (serRdPtr),HL   
00F6   3A 43 24               LD   A,(serBufUsed)   
00F9   3D                     DEC   A   
00FA   32 43 24               LD   (serBufUsed),A   
00FD   FE 05                  CP   SER_EMPTYSIZE   
00FF   30 04                  JR   NC,RXA2   
0101   3E 96                  LD   A,RTS_LOW   
0103   D3 80                  OUT   ($80),A   
0105                RXA2:        
0105   7E                     LD   A,(HL)   
0106   FB                     EI      
0107   E1                     POP   HL   
0108   C9                     RET      ; Char ready in A
0109                TXA:         
0109   F5                     PUSH   AF   ; Store character
010A                TXA1:        
010A   DB 80                  IN   A,($80)   ; Status byte
010C   CB 4F                  BIT   1,A   ; Set Zero flag if still transmitting character
010E   28 FA                  JR   Z,TXA1   ; Loop until flag signals ready
0110   F1                     POP   AF   ; Retrieve character
0111   D3 81                  OUT   ($81),A   ; Output the character
0113   C9                     RET      
0114                QRXA:        
0114   3A 43 24               LD   A,(serBufUsed)   
0117   FE 00                  CP   $0   
0119   C9                     RET      
011A                             ; .align 2
011A                DEFAULTS:      
011A                UZERO:       
011A   00 22        DEFSZERO:   DW   SPP   ; SP0
011C   00 24        DEFRZERO:   DW   RPP   ; RP0
011E   B0 0B        DEFTQKEY:   DW   QRX   ; '?KEY
0120   C8 0B        DEFTEMIT:   DW   TXSTO   ; 'EMIT
0122   8A 0D        DEFTEXPE:   DW   ACCEP   ; 'EXPECT
0124   5C 0D        DEFTTAP:   DW   KTAP   ; 'TAP
0126   C8 0B        DEFTECHO:   DW   TXSTO   ; 'ECHO
0128   40 0B        DEFTPROM:   DW   DOTOK   ; 'PROMPT
012A   0A 00        DEFBASE:   DW   BASEE   ; BASE
012C   00 00        DEFTEMP:   DW   0   ; tmp
012E   00 00        DEFSPAN:   DW   0   ; SPAN
0130   00 00        DEFINN:   DW   0   ; >IN
0132   00 00        DEFNTIB:   DW   0   ; #TIB
0134   00 22        DEFTIB:   DW   TIBB   ; TIB
0136   00 00        DEFCSP:   DW   0   ; CSP
0138   FE 0A        DEFTEVAL:   DW   INTER   ; 'EVAL
013A   DA 07        DEFTNUMB:   DW   NUMBQ   ; 'NUMBER
013C   00 00        DEFHLD:   DW   0   ; HLD
013E   00 00        DEFHANDL:   DW   0   ; HANDLER
0140   00 00        DEFCNTXT:   DW   0   ; CONTEXT pointer
0142   00 00        DEFVOCABS:   DW   0   ; vocabulary stack    ???
0144   00 00        DEFCRRENT:   DW   0   ; CURRENT pointer
0146   00 00        DEFVOCABLP:   DW   0   ; vocabulary link pointer ???
0148   91 24        DEFCP:    DW   CPP   ; CP  for runing phase on RAM
014A   FE FF        DEFNP:    DW   NPP   ; NP  for runing phase on RAM
014C   FC 13        DEFLAST:   DW   LASTN   ; LAST
014E   FC 13        DEFVFRTH:   DW   LASTN   ; FORTH   \ mullti-user ???
0150   00 00        DEFVOCABL:   DW   0   ; vocabulary link       ???
0152   00 00        DEFCOLD:   DW   0   ; "COLD"
0154                ULAST:       
0154                END_DEFAULTS:      
0154                VVCODE:   .SET   $   
0154                             ;   0<          ( n -- t )
0154                             ;               Return true if n is negative.
0154                          ;*Macro unroll: mCODE	2,'0<', ZLESS
0154                          ALIGN   2   
0154                ZLESS:       
0154                VVCODE:   .SET   $   
0154                VVLEN:    .SET   (2 & 01FH) / CELLL   
1FF8                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FF8                VVNAME:   .SET   $   
1FF8   54 01 00 00            DW   vvCODE,vvLINK   
1FFC                VVLINK:   .SET   $   
1FFC   02 30 3C               DB   2,"0<"   
0154                          .ORG   vvCODE   
0154   CB 20                  SLA   B   ; sign bit -> cy flag
0156   9F                     SBC   A,A   ; propagate cy through A
0157   47                     LD   B,A   ; put 0000 or FFFF in TOS
0158   4F                     LD   C,A   
0159                          ;*Macro unroll: 	mNEXT
0159   EB                     EX   DE,HL   
015A   FD E9                  JP   (IY)   
015C                             ;   AND         ( w w -- w )
015C                             ;               Bitwise AND.
015C                          ;*Macro unroll: mCODE	3, 'AND', ANDD
015C                          ALIGN   2   
015C                ANDD:        
015C                VVCODE:   .SET   $   
015C                VVLEN:    .SET   (3 & 01FH) / CELLL   
1FF0                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FF0                VVNAME:   .SET   $   
1FF0   5C 01 FC 1F            DW   vvCODE,vvLINK   
1FF4                VVLINK:   .SET   $   
1FF4   03 41 4E 44            DB   3,"AND"   
015C                          .ORG   vvCODE   
015C   E1                     POP   HL   
015D   78                     LD   A,B   
015E   A4                     AND   H   
015F   47                     LD   B,A   
0160   79                     LD   A,C   
0161   A5                     AND   L   
0162   4F                     LD   C,A   
0163                          ;*Macro unroll: 	mNEXT
0163   EB                     EX   DE,HL   
0164   FD E9                  JP   (IY)   
0166                             ;   OR          ( w w -- w )
0166                             ;               Bitwise inclusive OR.
0166                          ;*Macro unroll: mCODE	2,'OR', ORR
0166                          ALIGN   2   
0166                ORR:         
0166                VVCODE:   .SET   $   
0166                VVLEN:    .SET   (2 & 01FH) / CELLL   
1FE8                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FE8                VVNAME:   .SET   $   
1FE8   66 01 F4 1F            DW   vvCODE,vvLINK   
1FEC                VVLINK:   .SET   $   
1FEC   02 4F 52               DB   2,"OR"   
0166                          .ORG   vvCODE   
0166   E1                     POP   HL   
0167   78                     LD   A,B   
0168   B4                     OR   H   
0169   47                     LD   B,A   
016A   79                     LD   A,C   
016B   B5                     OR   L   
016C   4F                     LD   C,A   
016D                          ;*Macro unroll: 	mNEXT
016D   EB                     EX   DE,HL   
016E   FD E9                  JP   (IY)   
0170                             ;   XOR         ( w w -- w )
0170                             ;               Bitwise exclusive
0170                          ;*Macro unroll: mCODE	3, 'XOR', XORR
0170                          ALIGN   2   
0170                XORR:        
0170                VVCODE:   .SET   $   
0170                VVLEN:    .SET   (3 & 01FH) / CELLL   
1FE0                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FE0                VVNAME:   .SET   $   
1FE0   70 01 EC 1F            DW   vvCODE,vvLINK   
1FE4                VVLINK:   .SET   $   
1FE4   03 58 4F 52            DB   3,"XOR"   
0170                          .ORG   vvCODE   
0170   E1                     POP   HL   
0171   78                     LD   A,B   
0172   AC                     XOR   H   
0173   47                     LD   B,A   
0174   79                     LD   A,C   
0175   AD                     XOR   L   
0176   4F                     LD   C,A   
0177                          ;*Macro unroll: 	mNEXT
0177   EB                     EX   DE,HL   
0178   FD E9                  JP   (IY)   
017A                             ;   +           ( w w -- sum )
017A                             ;               Add top two items.
017A                          ;*Macro unroll: mCOLON	1,'+', PLUS
017A                          ;*Macro unroll:  mCODE 1, "+", PLUS
017A                          ALIGN   2   
017A                PLUS:        
017A                VVCODE:   .SET   $   
017A                VVLEN:    .SET   (1 & 01FH) / CELLL   
1FDA                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FDA                VVNAME:   .SET   $   
1FDA   7A 01 E4 1F            DW   vvCODE,vvLINK   
1FDE                VVLINK:   .SET   $   
1FDE   01 2B                  DB   1,"+"   
017A                          .ORG   vvCODE   
017A   00                     NOP      
017B   CD 3C 06               CALL   doLIST   
017E   52 02 6C 10 8A 06      DW   UPLUS,DROP,EXIT   
0184                             ;   NOT         ( w -- w )
0184                             ;               One's complement of tos.
0184                          ;*Macro unroll: mCOLON  3, 'NOT', INVER
0184                          ;*Macro unroll:  mCODE 3, "NOT", INVER
0184                          ALIGN   2   
0184                INVER:       
0184                VVCODE:   .SET   $   
0184                VVLEN:    .SET   (3 & 01FH) / CELLL   
1FD2                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FD2                VVNAME:   .SET   $   
1FD2   84 01 DE 1F            DW   vvCODE,vvLINK   
1FD6                VVLINK:   .SET   $   
1FD6   03 4E 4F 54            DB   3,"NOT"   
0184                          .ORG   vvCODE   
0184   00                     NOP      
0185   CD 3C 06               CALL   doLIST   
0188   4A 06 FF FF 70 01 8A 06 DW   DOLIT,-1,XORR,EXIT   
0190                             ;   NEGAT      ( n -- -n )
0190                             ;               Two's complement of tos.
0190                          ;*Macro unroll: mCOLON	6,'NEGATE',NEGAT
0190                          ;*Macro unroll:  mCODE 6, "NEGATE", NEGAT
0190                          ALIGN   2   
0190                NEGAT:       
0190                VVCODE:   .SET   $   
0190                VVLEN:    .SET   (6 & 01FH) / CELLL   
1FC6                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FC6                VVNAME:   .SET   $   
1FC6   90 01 D6 1F            DW   vvCODE,vvLINK   
1FCA                VVLINK:   .SET   $   
1FCA   06 4E 45 47 41 54 45   DB   6,"NEGATE"   
0190                          .ORG   vvCODE   
0190   00                     NOP      
0191   CD 3C 06               CALL   doLIST   
0194   84 01 4A 06 01 00 7A 01 8A 06 DW   INVER,DOLIT,1,Plus,EXIT   
019E                             ;   DNEGATE     ( d -- -d )
019E                             ;               Two's complement of top double.
019E                          ;*Macro unroll: mCOLON	7,'DNEGATE',DNEGA
019E                          ;*Macro unroll:  mCODE 7, "DNEGATE", DNEGA
019E                          ALIGN   2   
019E                DNEGA:       
019E                VVCODE:   .SET   $   
019E                VVLEN:    .SET   (7 & 01FH) / CELLL   
1FBA                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FBA                VVNAME:   .SET   $   
1FBA   9E 01 CA 1F            DW   vvCODE,vvLINK   
1FBE                VVLINK:   .SET   $   
1FBE   07 44 4E 45 47 41 54 45 DB   7,"DNEGATE"   
019E                          .ORG   vvCODE   
019E   00                     NOP      
019F   CD 3C 06               CALL   doLIST   
01A2   84 01 4C 10 84 01      DW   INVER,ToR,INVER   
01A8   4A 06 01 00 52 02      DW   DOLIT,1,UPLUS   
01AE   5A 10 7A 01 8A 06      DW   RFrom,Plus,EXIT   
01B4                             ;   -           ( n1 n2 -- n1-n2 )
01B4                             ;               Subtraction.
01B4                          ;*Macro unroll: mCOLON	1, '-', SUBB
01B4                          ;*Macro unroll:  mCODE 1, "-", SUBB
01B4                          ALIGN   2   
01B4                SUBB:        
01B4                VVCODE:   .SET   $   
01B4                VVLEN:    .SET   (1 & 01FH) / CELLL   
1FB4                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FB4                VVNAME:   .SET   $   
1FB4   B4 01 BE 1F            DW   vvCODE,vvLINK   
1FB8                VVLINK:   .SET   $   
1FB8   01 2D                  DB   1,"-"   
01B4                          .ORG   vvCODE   
01B4   00                     NOP      
01B5   CD 3C 06               CALL   doLIST   
01B8   90 01 7A 01 8A 06      DW   NEGAT,Plus,EXIT   
01BE                             ;   ABS         ( n -- n )
01BE                             ;               Return the absolute value of n.
01BE                          ;*Macro unroll: mCOLON	3,'ABS',ABSS
01BE                          ;*Macro unroll:  mCODE 3, "ABS", ABSS
01BE                          ALIGN   2   
01BE                ABSS:        
01BE                VVCODE:   .SET   $   
01BE                VVLEN:    .SET   (3 & 01FH) / CELLL   
1FAC                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FAC                VVNAME:   .SET   $   
1FAC   BE 01 B8 1F            DW   vvCODE,vvLINK   
1FB0                VVLINK:   .SET   $   
1FB0   03 41 42 53            DB   3,"ABS"   
01BE                          .ORG   vvCODE   
01BE   00                     NOP      
01BF   CD 3C 06               CALL   doLIST   
01C2   68 10 54 01 92 0E CC 01 DW   DUPP,ZLESS,QBRAN,ABS1   
01CA   90 01                  DW   NEGAT   
01CC                ABS1:        
01CC   8A 06                  DW   EXIT   
01CE                             ;   =           ( w w -- t )
01CE                             ;               Return true if top two are equal.
01CE                          ;*Macro unroll: mCOLON	1, '=', EQUAL
01CE                          ;*Macro unroll:  mCODE 1, "=", EQUAL
01CE                          ALIGN   2   
01CE                EQUAL:       
01CE                VVCODE:   .SET   $   
01CE                VVLEN:    .SET   (1 & 01FH) / CELLL   
1FA6                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FA6                VVNAME:   .SET   $   
1FA6   CE 01 B0 1F            DW   vvCODE,vvLINK   
1FAA                VVLINK:   .SET   $   
1FAA   01 3D                  DB   1,"="   
01CE                          .ORG   vvCODE   
01CE   00                     NOP      
01CF   CD 3C 06               CALL   doLIST   
01D2   70 01                  DW   XORR   
01D4   92 0E DE 01            DW   QBRAN,EQU1   
01D8   4A 06 00 00 8A 06      DW   DOLIT,0,EXIT   ;false flag
01DE                EQU1:        
01DE   4A 06 FF FF 8A 06      DW   DOLIT,-1,EXIT   ;true flag
01E4                             ;   U<          ( u u -- t )
01E4                             ;               Unsigned compare of top two items.
01E4                          ;*Macro unroll: mCOLON	2,'U<',ULESS
01E4                          ;*Macro unroll:  mCODE 2, "U<", ULESS
01E4                          ALIGN   2   
01E4                ULESS:       
01E4                VVCODE:   .SET   $   
01E4                VVLEN:    .SET   (2 & 01FH) / CELLL   
1F9E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F9E                VVNAME:   .SET   $   
1F9E   E4 01 AA 1F            DW   vvCODE,vvLINK   
1FA2                VVLINK:   .SET   $   
1FA2   02 55 3C               DB   2,"U<"   
01E4                          .ORG   vvCODE   
01E4   00                     NOP      
01E5   CD 3C 06               CALL   doLIST   
01E8   A6 10 70 01 54 01      DW   DDUP,XORR,ZLESS   
01EE   92 0E FA 01            DW   QBRAN,ULES1   
01F2   70 10 6C 10 54 01 8A 06 DW   SWAP,DROP,ZLESS,EXIT   
01FA                ULES1:       
01FA   B4 01 54 01 8A 06      DW   SUBB,ZLESS,EXIT   
0200                             ;   <           ( n1 n2 -- t )
0200                             ;               is less than
0200                          ;*Macro unroll: mCOLON	1,'<',LESS
0200                          ;*Macro unroll:  mCODE 1, "<", LESS
0200                          ALIGN   2   
0200                LESS:        
0200                VVCODE:   .SET   $   
0200                VVLEN:    .SET   (1 & 01FH) / CELLL   
1F98                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F98                VVNAME:   .SET   $   
1F98   00 02 A2 1F            DW   vvCODE,vvLINK   
1F9C                VVLINK:   .SET   $   
1F9C   01 3C                  DB   1,"<"   
0200                          .ORG   vvCODE   
0200   00                     NOP      
0201   CD 3C 06               CALL   doLIST   
0204   A6 10 70 01 54 01 92 0E 14 02 DW   DDUP,XORR,ZLESS,QBRAN,LESS1   
020E   6C 10 54 01 8A 06      DW   DROP,ZLESS,EXIT   
0214                LESS1:       
0214   B4 01 54 01 8A 06      DW   SUBB,ZLESS,EXIT   
021A                             ;   MAX         ( n n -- n )
021A                             ;               Return the greater of two top stack items.
021A                          ;*Macro unroll: mCOLON	3,'MAX',MAX
021A                          ;*Macro unroll:  mCODE 3, "MAX", MAX
021A                          ALIGN   2   
021A                MAX:         
021A                VVCODE:   .SET   $   
021A                VVLEN:    .SET   (3 & 01FH) / CELLL   
1F90                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F90                VVNAME:   .SET   $   
1F90   1A 02 9C 1F            DW   vvCODE,vvLINK   
1F94                VVLINK:   .SET   $   
1F94   03 4D 41 58            DB   3,"MAX"   
021A                          .ORG   vvCODE   
021A   00                     NOP      
021B   CD 3C 06               CALL   doLIST   
021E   A6 10 00 02 92 0E 28 02 DW   DDUP,LESS,QBRAN,MAX1   
0226   70 10                  DW   SWAP   
0228                MAX1:        
0228   6C 10 8A 06            DW   DROP,EXIT   
022C                             ;   MIN         ( n n -- n )
022C                             ;               Return the smaller of top two stack items.
022C                          ;*Macro unroll: mCOLON	3,'MIN',MIN
022C                          ;*Macro unroll:  mCODE 3, "MIN", MIN
022C                          ALIGN   2   
022C                MIN:         
022C                VVCODE:   .SET   $   
022C                VVLEN:    .SET   (3 & 01FH) / CELLL   
1F88                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F88                VVNAME:   .SET   $   
1F88   2C 02 94 1F            DW   vvCODE,vvLINK   
1F8C                VVLINK:   .SET   $   
1F8C   03 4D 49 4E            DB   3,"MIN"   
022C                          .ORG   vvCODE   
022C   00                     NOP      
022D   CD 3C 06               CALL   doLIST   
0230   A6 10 70 10 00 02      DW   DDUP,SWAP,LESS   
0236   92 0E 3C 02            DW   QBRAN,MIN1   
023A   70 10                  DW   SWAP   
023C                MIN1:        
023C   6C 10 8A 06            DW   DROP,EXIT   
0240                             ;   WITHIN      ( u ul uh -- t )
0240                             ;               Return true if u is within the range of ul and uh.
0240                          ;*Macro unroll: mCOLON	6,'WITHIN',WITHI
0240                          ;*Macro unroll:  mCODE 6, "WITHIN", WITHI
0240                          ALIGN   2   
0240                WITHI:       
0240                VVCODE:   .SET   $   
0240                VVLEN:    .SET   (6 & 01FH) / CELLL   
1F7C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F7C                VVNAME:   .SET   $   
1F7C   40 02 8C 1F            DW   vvCODE,vvLINK   
1F80                VVLINK:   .SET   $   
1F80   06 57 49 54 48 49 4E   DB   6,"WITHIN"   
0240                          .ORG   vvCODE   
0240   00                     NOP      
0241   CD 3C 06               CALL   doLIST   
0244   78 10 B4 01 4C 10      DW   OVER,SUBB,ToR   ;ul <= u < uh
024A   B4 01 5A 10 E4 01 8A 06 DW   SUBB,RFrom,ULess,EXIT   
0252                             ;   UM+         ( w w -- w cy )
0252                             ;               Add two numbers, return the sum and carry flag.
0252                          ;*Macro unroll: hCODE	3,'um+',UPLUS
0252                          ALIGN   2   
0252                UPLUS:       
0252   E1                     POP   HL   ;10t
0253   09                     ADD   HL,BC   ;11t
0254   E5                     PUSH   HL   ;11t
0255   01 00 00               LD   BC,0   ;10t
0258   30 01                  JR   NC,UMP1   ;12/7t
025A                UMP2:        
025A   03                     INC   BC   ; 6t
025B                UMP1:        
025B                          ;*Macro unroll:  mNEXT
025B   EB                     EX   DE,HL   
025C   FD E9                  JP   (IY)   
025E                             ;   UM/MOD      ( udl udh u -- ur uq )
025E                             ;               Unsigned divide of a double by a single. Return mod and quotient.
025E                          ;*Macro unroll: mCOLON  6,'UM/MOD',UMMOD
025E                          ;*Macro unroll:  mCODE 6, "UM/MOD", UMMOD
025E                          ALIGN   2   
025E                UMMOD:       
025E                VVCODE:   .SET   $   
025E                VVLEN:    .SET   (6 & 01FH) / CELLL   
1F70                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F70                VVNAME:   .SET   $   
1F70   5E 02 80 1F            DW   vvCODE,vvLINK   
1F74                VVLINK:   .SET   $   
1F74   06 55 4D 2F 4D 4F 44   DB   6,"UM/MOD"   
025E                          .ORG   vvCODE   
025E   00                     NOP      
025F   CD 3C 06               CALL   doLIST   
0262   A6 10 E4 01            DW   DDUP,ULESS   
0266   92 0E B6 02            DW   QBRAN,UMM4   
026A   90 01 4A 06 0F 00 4C 10 DW   NEGAT,DOLIT,15,TOR   
0272                UMM1:        
0272   4C 10 68 10 52 02      DW   TOR,DUPP,UPLUS   
0278   4C 10 4C 10 68 10 52 02 DW   TOR,TOR,DUPP,UPLUS   
0280   5A 10 7A 01 68 10      DW   RFROM,PLUS,DUPP   
0286   5A 10 D0 0E 70 10 4C 10 DW   RFROM,RAT,SWAP,TOR   
028E   52 02 5A 10 66 01      DW   UPLUS,RFROM,ORR   
0294   92 0E A8 02            DW   QBRAN,UMM2   
0298   4C 10 6C 10 4A 06 01 00 7A 01 5A 10 DW   TOR,DROP,DOLIT,1,PLUS,RFROM   
02A4   9E 0E AA 02            DW   BRAN,UMM3   
02A8                UMM2:        
02A8   6C 10                  DW   DROP   
02AA                UMM3:        
02AA   5A 10                  DW   RFROM   
02AC   96 06 72 02            DW   DONXT,UMM1   
02B0   6C 10 70 10 8A 06      DW   DROP,SWAP,EXIT   
02B6                UMM4:        
02B6   6C 10 9C 10            DW   DROP,DDROP   
02BA   4A 06 FF FF 68 10 8A 06 DW   DOLIT,-1,DUPP,EXIT   ;overflow, return max
02C2                             ; ; UM/MOD      ( udl udh u -- ur uq )
02C2                             ; ; Unsigned divide of a double by a single. Return mod and quotient.
02C2                             ; ; Note: Less range than eForth because most significant word discarded TODO: fix
02C2                             ; mCOLON  6,"UM/MOD",UMMOD
02C2                             ;     DW  SWAP,DROP, UMSLMOD2, EXIT
02C2                             ; ; UM/MOD2	( ud u1 -- u2 u3 )		
02C2                             ; ; Unsigned division of a double-cell number ud by a single-cell
02C2                             ; ; number u1. Return remainder u2 and quotient u3.
02C2                             ; ; Note: Less range than eForth TODO: fix
02C2                             ; mCODE	6,"UM/MOD2",UMSLMOD2
02C2                             ;     LD	A,B
02C2                             ; 	OR	C
02C2                             ; 	JR	Z,UMMOD2	;?zero divisor
02C2                             ; UMMOD11: 	
02C2                             ;     PUSH	BC
02C2                             ; 	EXX
02C2                             ; 	POP	BC
02C2                             ; 	POP	HL
02C2                             ; 	POP	DE
02C2                             ; 	LD	A,L
02C2                             ; 	SUB	C
02C2                             ; 	LD	A,H
02C2                             ; 	SBC	A,B
02C2                             ; 	JR	NC,UMMOD1	;?too big
02C2                             ; UMMOD12: 	
02C2                             ;     LD	A,H
02C2                             ;     LD	H,L
02C2                             ; 	LD	L,D
02C2                             ; 	LD	D,8
02C2                             ; 	PUSH	DE
02C2                             ; 	CALL	UMMOD3
02C2                             ; 	POP	DE
02C2                             ; 	PUSH	HL
02C2                             ; 	LD	L,E
02C2                             ; 	CALL	UMMOD3
02C2                             ; 	LD	D,A
02C2                             ; 	LD	E,H
02C2                             ; 	POP	BC
02C2                             ; 	LD	H,C
02C2                             ; 	PUSH	DE
02C2                             ; 	PUSH	HL
02C2                             ; 	EXX
02C2                             ; 	POP	BC
02C2                             ; 	mNEXT
02C2                             ; UMMOD2:		
02C2                             ;     LD	BC,ERR_DIVZERO ; divide by 0
02C2                             ; 	JP	THROWX
02C2                             ; UMMOD1:		
02C2                             ;     LD	BC,ERR_OUTOFRANGE ; result out of range
02C2                             ; 	JP	THROWX
02C2                             ; UMMOD4:		
02C2                             ;     LD	E,A
02C2                             ; 	LD	A,H
02C2                             ; 	SUB	C
02C2                             ; 	LD	H,A
02C2                             ; 	LD	A,E
02C2                             ; 	SBC	A,B
02C2                             ; 	JR	NC,UMMOD5
02C2                             ; UMMOD13: 	
02C2                             ;     LD	A,H
02C2                             ; 	ADD	A,C
02C2                             ; 	LD	H,A
02C2                             ; 	LD	A,E
02C2                             ; 	DEC	D
02C2                             ; 	RET	Z
02C2                             ; UMMOD3:		
02C2                             ;     ADD	HL,HL
02C2                             ; 	RLA
02C2                             ; 	JR	NC,UMMOD4
02C2                             ; UMMOD14: 	
02C2                             ;     LD	E,A
02C2                             ; 	LD	A,H
02C2                             ; 	SUB	C
02C2                             ; 	LD	H,A
02C2                             ; 	LD	A,E
02C2                             ; 	SBC	A,B
02C2                             ; UMMOD5:		
02C2                             ;     INC	L
02C2                             ; 	DEC	D
02C2                             ; 	JR	NZ,UMMOD3
02C2                             ; UMMOD15: 	
02C2                             ;     RET
02C2                             ;   FM/MOD	( d n1 -- n2 n3 )		\ CORE
02C2                             ;		Signed floored divide of double by single. Return mod n2
02C2                             ;		and quotient n3.
02C2                             ; TODO: this is usually called M/MOD in eForth
02C2                          ;*Macro unroll: mCOLON	6,'M/MOD',MSMOD
02C2                          ;*Macro unroll:  mCODE 6, "M/MOD", MSMOD
02C2                          ALIGN   2   
02C2                MSMOD:       
02C2                VVCODE:   .SET   $   
02C2                VVLEN:    .SET   (6 & 01FH) / CELLL   
1F64                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F64                VVNAME:   .SET   $   
1F64   C2 02 74 1F            DW   vvCODE,vvLINK   
1F68                VVLINK:   .SET   $   
1F68   06 4D 2F 4D 4F 44      DB   6,"M/MOD"   
02C2                          .ORG   vvCODE   
02C2   00                     NOP      
02C3   CD 3C 06               CALL   doLIST   
02C6   68 10 54 01 68 10 4C 10 DW   DUPP,ZLESS,DUPP,TOR   
02CE   92 0E DA 02            DW   QBRAN,MMOD1   
02D2   90 01 4C 10 9E 01 5A 10 DW   NEGAT,TOR,DNEGA,RFROM   
02DA                MMOD1:       
02DA   4C 10 68 10 54 01      DW   TOR,DUPP,ZLESS   
02E0   92 0E E8 02            DW   QBRAN,MMOD2   
02E4   D0 0E 7A 01            DW   RAT,PLUS   
02E8                MMOD2:       
02E8   5A 10 5E 02 5A 10      DW   RFROM,UMMOD,RFROM   
02EE   92 0E F8 02            DW   QBRAN,MMOD3   
02F2   70 10 90 01 70 10      DW   SWAP,NEGAT,SWAP   
02F8                MMOD3:       
02F8   8A 06                  DW   EXIT   
02FA                             ;   /MOD        ( n n -- r q )
02FA                             ;               Signed divide. Return mod and quotient.
02FA                          ;*Macro unroll: mCOLON	4,'/MOD',SLMOD
02FA                          ;*Macro unroll:  mCODE 4, "/MOD", SLMOD
02FA                          ALIGN   2   
02FA                SLMOD:       
02FA                VVCODE:   .SET   $   
02FA                VVLEN:    .SET   (4 & 01FH) / CELLL   
1F5A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F5A                VVNAME:   .SET   $   
1F5A   FA 02 68 1F            DW   vvCODE,vvLINK   
1F5E                VVLINK:   .SET   $   
1F5E   04 2F 4D 4F 44         DB   4,"/MOD"   
02FA                          .ORG   vvCODE   
02FA   00                     NOP      
02FB   CD 3C 06               CALL   doLIST   
02FE   78 10 54 01 70 10 C2 02 8A 06 DW   OVER,ZLESS,SWAP,MSMOD,EXIT   
0308                             ;   MOD         ( n n -- r )
0308                             ;               Signed divide. Return mod only.
0308                          ;*Macro unroll: mCOLON	3,'MOD',MODD
0308                          ;*Macro unroll:  mCODE 3, "MOD", MODD
0308                          ALIGN   2   
0308                MODD:        
0308                VVCODE:   .SET   $   
0308                VVLEN:    .SET   (3 & 01FH) / CELLL   
1F52                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F52                VVNAME:   .SET   $   
1F52   08 03 5E 1F            DW   vvCODE,vvLINK   
1F56                VVLINK:   .SET   $   
1F56   03 4D 4F 44            DB   3,"MOD"   
0308                          .ORG   vvCODE   
0308   00                     NOP      
0309   CD 3C 06               CALL   doLIST   
030C   FA 02 6C 10 8A 06      DW   SLMOD,DROP,EXIT   
0312                             ; 
0312                             ;   /           ( n n -- q )
0312                             ;               Signed divide. Return quotient only.
0312                          ;*Macro unroll: mCOLON	1,'/',SLASH
0312                          ;*Macro unroll:  mCODE 1, "/", SLASH
0312                          ALIGN   2   
0312                SLASH:       
0312                VVCODE:   .SET   $   
0312                VVLEN:    .SET   (1 & 01FH) / CELLL   
1F4C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F4C                VVNAME:   .SET   $   
1F4C   12 03 56 1F            DW   vvCODE,vvLINK   
1F50                VVLINK:   .SET   $   
1F50   01 2F                  DB   1,"/"   
0312                          .ORG   vvCODE   
0312   00                     NOP      
0313   CD 3C 06               CALL   doLIST   
0316   FA 02 70 10 6C 10 8A 06 DW   SLMOD,SWAP,DROP,EXIT   
031E                             ; Multiply
031E                             ;   UM*         ( u u -- ud )
031E                             ;               Unsigned multiply. Return double product.
031E                          ;*Macro unroll: mCODE	3,'UM*',UMSTA
031E                          ALIGN   2   
031E                UMSTA:       
031E                VVCODE:   .SET   $   
031E                VVLEN:    .SET   (3 & 01FH) / CELLL   
1F44                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F44                VVNAME:   .SET   $   
1F44   1E 03 50 1F            DW   vvCODE,vvLINK   
1F48                VVLINK:   .SET   $   
1F48   03 55 4D 2A            DB   3,"UM*"   
031E                          .ORG   vvCODE   
031E   EB                     EX   DE,HL   
031F   E3                     EX   (SP),HL   
0320   EB                     EX   DE,HL   
0321   21 00 00               LD   HL,0   
0324   3E 10                  LD   A,010h   
0326                UMSTA1:      
0326   29                     ADD   HL,HL   
0327   EB                     EX   DE,HL   
0328   ED 6A                  ADC   HL,HL   
032A   EB                     EX   DE,HL   
032B   30 04                  JR   NC,UMSTA3   
032D                UMSTA2:      
032D   09                     ADD   HL,BC   
032E   30 01                  JR   NC,UMSTA3   
0330                UMSTA5:      
0330   13                     INC   DE   
0331                UMSTA3:      
0331   3D                     DEC   A   
0332   20 F2                  JR   NZ,UMSTA1   
0334                UMSTA4:      
0334   42                     LD   B,D   
0335   4B                     LD   C,E   
0336   E3                     EX   (SP),HL   
0337                          ;*Macro unroll: 	mNEXTHL
0337   FD E9                  JP   (IY)   
0339                             ;   *           ( n n -- n )
0339                             ;               Signed multiply. Return single product.
0339                          ;*Macro unroll: mCOLON	1,'*',STAR
0339                          ;*Macro unroll:  mCODE 1, "*", STAR
0339                          ALIGN   2   
033A                STAR:        
033A                VVCODE:   .SET   $   
033A                VVLEN:    .SET   (1 & 01FH) / CELLL   
1F3E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F3E                VVNAME:   .SET   $   
1F3E   3A 03 48 1F            DW   vvCODE,vvLINK   
1F42                VVLINK:   .SET   $   
1F42   01 2A                  DB   1,"*"   
033A                          .ORG   vvCODE   
033A   00                     NOP      
033B   CD 3C 06               CALL   doLIST   
033E   1E 03 6C 10 8A 06      DW   UMSTA,DROP,EXIT   
0344                             ;   M*          ( n n -- d )
0344                             ;               Signed multiply. Return double product.
0344                          ;*Macro unroll: mCOLON	2,'M*',MSTAR,
0344                          ;*Macro unroll:  mCODE 2, "M*", MSTAR
0344                          ALIGN   2   
0344                MSTAR:       
0344                VVCODE:   .SET   $   
0344                VVLEN:    .SET   (2 & 01FH) / CELLL   
1F36                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F36                VVNAME:   .SET   $   
1F36   44 03 42 1F            DW   vvCODE,vvLINK   
1F3A                VVLINK:   .SET   $   
1F3A   02 4D 2A               DB   2,"M*"   
0344                          .ORG   vvCODE   
0344   00                     NOP      
0345   CD 3C 06               CALL   doLIST   
0348   A6 10 70 01 54 01 4C 10 BE 01 70 10 BE 01 DW   DDUP,XORR,ZLESS,ToR,ABSS,SWAP,ABSS   
0356   1E 03 5A 10 92 0E 60 03 DW   UMSTA,RFrom,QBRAN,MSTAR1   
035E   9E 01                  DW   DNEGA   
0360                MSTAR1:      
0360   8A 06                  DW   EXIT   
0362                             ;   */MOD       ( n1 n2 n3 -- r q )
0362                             ;               Multiply n1 and n2, then divide by n3. Return mod and quotient.
0362                          ;*Macro unroll: mCOLON	5,'*/MOD',SSMOD
0362                          ;*Macro unroll:  mCODE 5, "*/MOD", SSMOD
0362                          ALIGN   2   
0362                SSMOD:       
0362                VVCODE:   .SET   $   
0362                VVLEN:    .SET   (5 & 01FH) / CELLL   
1F2C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F2C                VVNAME:   .SET   $   
1F2C   62 03 3A 1F            DW   vvCODE,vvLINK   
1F30                VVLINK:   .SET   $   
1F30   05 2A 2F 4D 4F 44      DB   5,"*/MOD"   
0362                          .ORG   vvCODE   
0362   00                     NOP      
0363   CD 3C 06               CALL   doLIST   
0366   4C 10 44 03 5A 10 C2 02 8A 06 DW   ToR,MStar,RFrom,MSMOD,EXIT   
0370                             ;   */          ( n1 n2 n3 -- q )
0370                             ;               Multiply n1 by n2, then divide by n3. Return quotient only.
0370                          ;*Macro unroll: mCOLON	2,'*/',STASL
0370                          ;*Macro unroll:  mCODE 2, "*/", STASL
0370                          ALIGN   2   
0370                STASL:       
0370                VVCODE:   .SET   $   
0370                VVLEN:    .SET   (2 & 01FH) / CELLL   
1F24                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F24                VVNAME:   .SET   $   
1F24   70 03 30 1F            DW   vvCODE,vvLINK   
1F28                VVLINK:   .SET   $   
1F28   02 2A 2F               DB   2,"*/"   
0370                          .ORG   vvCODE   
0370   00                     NOP      
0371   CD 3C 06               CALL   doLIST   
0374   62 03 70 10 6C 10 8A 06 DW   SSMOD,SWAP,DROP,EXIT   
037C                             ;   CELL+       ( a -- a )
037C                             ;               Add cell size in byte to address.
037C                          ;*Macro unroll: mCOLON	5,'CELL+',CELLP
037C                          ;*Macro unroll:  mCODE 5, "CELL+", CELLP
037C                          ALIGN   2   
037C                CELLP:       
037C                VVCODE:   .SET   $   
037C                VVLEN:    .SET   (5 & 01FH) / CELLL   
1F1A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F1A                VVNAME:   .SET   $   
1F1A   7C 03 28 1F            DW   vvCODE,vvLINK   
1F1E                VVLINK:   .SET   $   
1F1E   05 43 45 4C 4C 2B      DB   5,"CELL+"   
037C                          .ORG   vvCODE   
037C   00                     NOP      
037D   CD 3C 06               CALL   doLIST   
0380   4A 06 02 00 7A 01 8A 06 DW   DOLIT,CELLL,PLUS,EXIT   
0388                             ;   CELL-       ( a -- a )
0388                             ;               Subtract cell size in byte from address.
0388                          ;*Macro unroll: mCOLON	5,'CELL-',CELLM
0388                          ;*Macro unroll:  mCODE 5, "CELL-", CELLM
0388                          ALIGN   2   
0388                CELLM:       
0388                VVCODE:   .SET   $   
0388                VVLEN:    .SET   (5 & 01FH) / CELLL   
1F10                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F10                VVNAME:   .SET   $   
1F10   88 03 1E 1F            DW   vvCODE,vvLINK   
1F14                VVLINK:   .SET   $   
1F14   05 43 45 4C 4C 2D      DB   5,"CELL-"   
0388                          .ORG   vvCODE   
0388   00                     NOP      
0389   CD 3C 06               CALL   doLIST   
038C   4A 06 FE FF 7A 01 8A 06 DW   DOLIT,-CELLL,PLUS,EXIT   
0394                             ;   CELLS       ( n -- n )
0394                             ;               Multiply tos by cell size in bytes.
0394                          ;*Macro unroll: mCOLON	5,'CELLS',CELLS
0394                          ;*Macro unroll:  mCODE 5, "CELLS", CELLS
0394                          ALIGN   2   
0394                CELLS:       
0394                VVCODE:   .SET   $   
0394                VVLEN:    .SET   (5 & 01FH) / CELLL   
1F06                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F06                VVNAME:   .SET   $   
1F06   94 03 14 1F            DW   vvCODE,vvLINK   
1F0A                VVLINK:   .SET   $   
1F0A   05 43 45 4C 4C 53      DB   5,"CELLS"   
0394                          .ORG   vvCODE   
0394   00                     NOP      
0395   CD 3C 06               CALL   doLIST   
0398   4A 06 02 00 3A 03 8A 06 DW   DOLIT,CELLL,STAR,EXIT   
03A0                             ;  EXTRAS ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
03A0                          ;*Macro unroll: mCOLON  1,'>',GREAT
03A0                          ;*Macro unroll:  mCODE 1, ">", GREAT
03A0                          ALIGN   2   
03A0                GREAT:       
03A0                VVCODE:   .SET   $   
03A0                VVLEN:    .SET   (1 & 01FH) / CELLL   
1F00                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F00                VVNAME:   .SET   $   
1F00   A0 03 0A 1F            DW   vvCODE,vvLINK   
1F04                VVLINK:   .SET   $   
1F04   01 3E                  DB   1,">"   
03A0                          .ORG   vvCODE   
03A0   00                     NOP      
03A1   CD 3C 06               CALL   doLIST   
03A4   70 10 00 02 8A 06      DW   SWAP,LESS,EXIT   
03AA                          ;*Macro unroll: mCOLON  2,'1+',ONEP
03AA                          ;*Macro unroll:  mCODE 2, "1+", ONEP
03AA                          ALIGN   2   
03AA                ONEP:        
03AA                VVCODE:   .SET   $   
03AA                VVLEN:    .SET   (2 & 01FH) / CELLL   
1EF8                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1EF8                VVNAME:   .SET   $   
1EF8   AA 03 04 1F            DW   vvCODE,vvLINK   
1EFC                VVLINK:   .SET   $   
1EFC   02 31 2B               DB   2,"1+"   
03AA                          .ORG   vvCODE   
03AA   00                     NOP      
03AB   CD 3C 06               CALL   doLIST   
03AE   4A 06 01 00 7A 01 8A 06 DW   DOLIT,1,PLUS,EXIT   
03B6                          ;*Macro unroll: mCOLON  2,'1-',ONEM
03B6                          ;*Macro unroll:  mCODE 2, "1-", ONEM
03B6                          ALIGN   2   
03B6                ONEM:        
03B6                VVCODE:   .SET   $   
03B6                VVLEN:    .SET   (2 & 01FH) / CELLL   
1EF0                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1EF0                VVNAME:   .SET   $   
1EF0   B6 03 FC 1E            DW   vvCODE,vvLINK   
1EF4                VVLINK:   .SET   $   
1EF4   02 31 2D               DB   2,"1-"   
03B6                          .ORG   vvCODE   
03B6   00                     NOP      
03B7   CD 3C 06               CALL   doLIST   
03BA   4A 06 01 00 B4 01 8A 06 DW   DOLIT,1,SUBB,EXIT   
03C2                          ;*Macro unroll: mCOLON  2,'2*',TWSTA
03C2                          ;*Macro unroll:  mCODE 2, "2*", TWSTA
03C2                          ALIGN   2   
03C2                TWSTA:       
03C2                VVCODE:   .SET   $   
03C2                VVLEN:    .SET   (2 & 01FH) / CELLL   
1EE8                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1EE8                VVNAME:   .SET   $   
1EE8   C2 03 F4 1E            DW   vvCODE,vvLINK   
1EEC                VVLINK:   .SET   $   
1EEC   02 32 2A               DB   2,"2*"   
03C2                          .ORG   vvCODE   
03C2   00                     NOP      
03C3   CD 3C 06               CALL   doLIST   
03C6   68 10 7A 01 8A 06      DW   DUPP,PLUS,EXIT   
03CC                          ;*Macro unroll: mCODE  2,'2/',TWSLA
03CC                          ALIGN   2   
03CC                TWSLA:       
03CC                VVCODE:   .SET   $   
03CC                VVLEN:    .SET   (2 & 01FH) / CELLL   
1EE0                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1EE0                VVNAME:   .SET   $   
1EE0   CC 03 EC 1E            DW   vvCODE,vvLINK   
1EE4                VVLINK:   .SET   $   
1EE4   02 32 2F               DB   2,"2/"   
03CC                          .ORG   vvCODE   
03CC   CB 38                  SRL   B   
03CE   CB 19                  RR   C   
03D0                          ;*Macro unroll:  mNEXT
03D0   EB                     EX   DE,HL   
03D1   FD E9                  JP   (IY)   
03D3                             ;   '           ( -- ca )
03D3                             ;               Search context vocabularies for the next word in input stream.
03D3                          ;*Macro unroll: mCOLON  1,"'",TICK
03D3                          ;*Macro unroll:  mCODE 1, "'", TICK
03D3                          ALIGN   2   
03D4                TICK:        
03D4                VVCODE:   .SET   $   
03D4                VVLEN:    .SET   (1 & 01FH) / CELLL   
1EDA                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1EDA                VVNAME:   .SET   $   
1EDA   D4 03 E4 1E            DW   vvCODE,vvLINK   
1EDE                VVLINK:   .SET   $   
1EDE   01 27                  DB   1,"'"   
03D4                          .ORG   vvCODE   
03D4   00                     NOP      
03D5   CD 3C 06               CALL   doLIST   
03D8   74 09 56 0A            DW   TOKEN,NAMEQ   ;?defined
03DC   92 0E E2 03            DW   QBRAN,TICK1   
03E0   8A 06                  DW   EXIT   ;yes, push code address
03E2                TICK1:       
03E2   B8 0A                  DW   THROW   ;no, error
03E4                             ;   ALLOT       ( n -- )
03E4                             ;               Allocate n bytes to the code dictionary.
03E4                          ;*Macro unroll: mCOLON  5,'ALLOT',ALLOT
03E4                          ;*Macro unroll:  mCODE 5, "ALLOT", ALLOT
03E4                          ALIGN   2   
03E4                ALLOT:       
03E4                VVCODE:   .SET   $   
03E4                VVLEN:    .SET   (5 & 01FH) / CELLL   
1ED0                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1ED0                VVNAME:   .SET   $   
1ED0   E4 03 DE 1E            DW   vvCODE,vvLINK   
1ED4                VVLINK:   .SET   $   
1ED4   05 41 4C 4C 4F 54      DB   5,"ALLOT"   
03E4                          .ORG   vvCODE   
03E4   00                     NOP      
03E5   CD 3C 06               CALL   doLIST   
03E8   88 11 FC 0E 8A 06      DW   CP,PSTOR,EXIT   ;adjust code pointer
03EE                             ;   ,           ( w -- )
03EE                             ;               Compile an integer into the code dictionary.
03EE                          ;*Macro unroll: mCOLON  1,',',COMMA
03EE                          ;*Macro unroll:  mCODE 1, ",", COMMA
03EE                          ALIGN   2   
03EE                COMMA:       
03EE                VVCODE:   .SET   $   
03EE                VVLEN:    .SET   (1 & 01FH) / CELLL   
1ECA                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1ECA                VVNAME:   .SET   $   
1ECA   EE 03 D4 1E            DW   vvCODE,vvLINK   
1ECE                VVLINK:   .SET   $   
1ECE   01 2C                  DB   1,","   
03EE                          .ORG   vvCODE   
03EE   00                     NOP      
03EF   CD 3C 06               CALL   doLIST   
03F2   40 0F 68 10 7C 03      DW   HERE,DUPP,CELLP   ;cell boundary
03F8   88 11 AE 0E AE 0E 8A 06 DW   CP,STORE,STORE,EXIT   ;adjust code pointer, compile
0400                             ;   [COMPILE]   ( -- ; <string> )
0400                             ;               Compile the next immediate word into code dictionary.
0400                          ;*Macro unroll: mCOLON  IMEDD+9,'[COMPILE]',BCOMP
0400                          ;*Macro unroll:  mCODE IMEDD+9, "[COMPILE]", BCOMP
0400                          ALIGN   2   
0400                BCOMP:       
0400                VVCODE:   .SET   $   
0400                VVLEN:    .SET   (IMEDD+9 & 01FH) / CELLL   
1E7C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1E7C                VVNAME:   .SET   $   
1E7C   00 04 CE 1E            DW   vvCODE,vvLINK   
1E80                VVLINK:   .SET   $   
1E80   49 5B 43 4F 4D 50 49 4C 45 5D DB   IMEDD+9,"[COMPILE]"   
0400                          .ORG   vvCODE   
0400   00                     NOP      
0401   CD 3C 06               CALL   doLIST   
0404   D4 03 EE 03 8A 06      DW   TICK,COMMA,EXIT   
040A                             ;   COMPILE     ( -- )
040A                             ;               Compile the next address in colon list to code dictionary.
040A                          ;*Macro unroll: mCOLON  COMPO+7,'COMPILE',COMPI
040A                          ;*Macro unroll:  mCODE COMPO+7, "COMPILE", COMPI
040A                          ALIGN   2   
040A                COMPI:       
040A                VVCODE:   .SET   $   
040A                VVLEN:    .SET   (COMPO+7 & 01FH) / CELLL   
1E50                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1E50                VVNAME:   .SET   $   
1E50   0A 04 80 1E            DW   vvCODE,vvLINK   
1E54                VVLINK:   .SET   $   
1E54   27 43 4F 4D 50 49 4C 45 DB   COMPO+7,"COMPILE"   
040A                          .ORG   vvCODE   
040A   00                     NOP      
040B   CD 3C 06               CALL   doLIST   
040E   5A 10 68 10 B8 0E EE 03 DW   RFROM,DUPP,AT,COMMA   ;compile address
0416   7C 03 4C 10 8A 06      DW   CELLP,TOR,EXIT   ;adjust return address
041C                             ;   LITERAL     ( w -- )
041C                             ;               Compile tos to code dictionary as an integer literal.
041C                          ;*Macro unroll: mCOLON  IMEDD+7,'LITERAL',LITER
041C                          ;*Macro unroll:  mCODE IMEDD+7, "LITERAL", LITER
041C                          ALIGN   2   
041C                LITER:       
041C                VVCODE:   .SET   $   
041C                VVLEN:    .SET   (IMEDD+7 & 01FH) / CELLL   
1E04                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1E04                VVNAME:   .SET   $   
1E04   1C 04 54 1E            DW   vvCODE,vvLINK   
1E08                VVLINK:   .SET   $   
1E08   47 4C 49 54 45 52 41 4C DB   IMEDD+7,"LITERAL"   
041C                          .ORG   vvCODE   
041C   00                     NOP      
041D   CD 3C 06               CALL   doLIST   
0420   0A 04 4A 06 EE 03 8A 06 DW   COMPI,DOLIT,COMMA,EXIT   
0428                             ;   $,"         ( -- )
0428                             ;               Compile a literal string up to next " .
0428                          ;*Macro unroll: hCOLON  3,'$,|',STRCQ
0428                          ;*Macro unroll:  hCODE 3, "$,|", STRCQ
0428                          ALIGN   2   
0428                STRCQ:       
0428   00                     NOP      
0429   CD 3C 06               CALL   doLIST   
042C   4A 06 22 00 90 09      DW   DOLIT,$22,WORDD   ;move string to code dictionary
0432   2E 0F 7A 01 26 10      DW   COUNT,PLUS,ALGND   ;calculate aligned end of string
0438   88 11 AE 0E 8A 06      DW   CP,STORE,EXIT   ;adjust the code pointer
043E                             ;   RECURSE     ( -- )
043E                             ;               Make the current word available for compilation.
043E                          ;*Macro unroll: mCOLON  IMEDD+7,'RECURSE',RECUR
043E                          ;*Macro unroll:  mCODE IMEDD+7, "RECURSE", RECUR
043E                          ALIGN   2   
043E                RECUR:       
043E                VVCODE:   .SET   $   
043E                VVLEN:    .SET   (IMEDD+7 & 01FH) / CELLL   
1DB8                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1DB8                VVNAME:   .SET   $   
1DB8   3E 04 08 1E            DW   vvCODE,vvLINK   
1DBC                VVLINK:   .SET   $   
1DBC   47 52 45 43 55 52 53 45 DB   IMEDD+7,"RECURSE"   
043E                          .ORG   vvCODE   
043E   00                     NOP      
043F   CD 3C 06               CALL   doLIST   
0442   98 11 B8 0E 9C 09 EE 03 8A 06 DW   LAST,AT,NAMET,COMMA,EXIT   
044C                             ;   ?UNIQUE     ( a -- a )
044C                             ;               Display a warning message if the word already exists.
044C                          ;*Macro unroll: mCOLON  7,'?UNIQUE',UNIQU
044C                          ;*Macro unroll:  mCODE 7, "?UNIQUE", UNIQU
044C                          ALIGN   2   
044C                UNIQU:       
044C                VVCODE:   .SET   $   
044C                VVLEN:    .SET   (7 & 01FH) / CELLL   
1DAC                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1DAC                VVNAME:   .SET   $   
1DAC   4C 04 BC 1D            DW   vvCODE,vvLINK   
1DB0                VVLINK:   .SET   $   
1DB0   07 3F 55 4E 49 51 55 45 DB   7,"?UNIQUE"   
044C                          .ORG   vvCODE   
044C   00                     NOP      
044D   CD 3C 06               CALL   doLIST   
0450   68 10 56 0A            DW   DUPP,NAMEQ   ;?name exists
0454   92 0E 68 04            DW   QBRAN,UNIQ1   ;redefinitions are OK
0458                          ;*Macro unroll:  mDSTR   DOTQP,' reDef '         ;but warn the user
0458   96 0C                  DW   DOTQP   ;but warn the user
045A                VVLEN:    .SET   $   
045A   00 20 72 65 44 65 66 20 DB   0," reDef "   
0462                VVCODE:   .SET   $   
045A                          .ORG   vvLEN   
045A   07                     DB   vvCODE - vvLEN - 1   
0462                          .ORG   vvCODE   
0462   78 10 2E 0F 40 0C      DW   OVER,COUNT,TYPEE   ;just in case its not planned
0468                UNIQ1:       
0468   6C 10 8A 06            DW   DROP,EXIT   
046C                             ;   $,n         ( na -- )
046C                             ;               Build a new dictionary name using the string at na.
046C                          ;*Macro unroll: mCOLON  3,'$,n',SNAME
046C                          ;*Macro unroll:  mCODE 3, "$,n", SNAME
046C                          ALIGN   2   
046C                SNAME:       
046C                VVCODE:   .SET   $   
046C                VVLEN:    .SET   (3 & 01FH) / CELLL   
1DA4                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1DA4                VVNAME:   .SET   $   
1DA4   6C 04 B0 1D            DW   vvCODE,vvLINK   
1DA8                VVLINK:   .SET   $   
1DA8   03 24 2C 6E            DB   3,"$,n"   
046C                          .ORG   vvCODE   
046C   00                     NOP      
046D   CD 3C 06               CALL   doLIST   
0470   68 10 C8 0E            DW   DUPP,CAT   ;?null input
0474   92 0E 9E 04            DW   QBRAN,PNAM1   
0478   4C 04                  DW   UNIQU   ;?redefinition
047A   68 10 98 11 AE 0E      DW   DUPP,LAST,STORE   ;save na for vocabulary link
0480   40 0F 26 10 70 10      DW   HERE,ALGND,SWAP   ;align code address
0486   88 03                  DW   CELLM   ;link address
0488   80 11 B8 0E B8 0E 78 10 AE 0E DW   CRRNT,AT,AT,OVER,STORE   
0492   88 03 68 10 90 11 AE 0E DW   CELLM,DUPP,NP,STORE   ;adjust name pointer
049A   AE 0E 8A 06            DW   STORE,EXIT   ;save code pointer
049E                PNAM1:       
049E                          ;*Macro unroll:  mDSTR   STRQP,' name'           ;null input
049E   8E 0C                  DW   STRQP   ;null input
04A0                VVLEN:    .SET   $   
04A0   00 20 6E 61 6D 65      DB   0," name"   
04A6                VVCODE:   .SET   $   
04A0                          .ORG   vvLEN   
04A0   05                     DB   vvCODE - vvLEN - 1   
04A6                          .ORG   vvCODE   
04A6   B8 0A                  DW   THROW   
04A8                             ;   $COMPILE    ( a -- )
04A8                             ;               Compile next word to code dictionary as a token or literal.
04A8                          ;*Macro unroll: hCOLON  8,'$COMPILE',SCOMP
04A8                          ;*Macro unroll:  hCODE 8, "$COMPILE", SCOMP
04A8                          ALIGN   2   
04A8                SCOMP:       
04A8   00                     NOP      
04A9   CD 3C 06               CALL   doLIST   
04AC   56 0A 80 10            DW   NAMEQ,QDUP   ;?defined
04B0   92 0E C8 04            DW   QBRAN,SCOM2   
04B4   B8 0E 4A 06 40 00 5C 01 DW   AT,DOLIT,IMEDD,ANDD   ;?immediate
04BC   92 0E C4 04            DW   QBRAN,SCOM1   
04C0   8E 0E 8A 06            DW   EXECU,EXIT   ;its immediate, execute
04C4                SCOM1:       
04C4   EE 03 8A 06            DW   COMMA,EXIT   ;its not immediate, compile
04C8                SCOM2:       
04C8   60 11 64 0F            DW   TNUMB,ATEXE   ;try to convert to number
04CC   92 0E D4 04            DW   QBRAN,SCOM3   
04D0   1C 04 8A 06            DW   LITER,EXIT   ;compile number as integer
04D4   B8 0A        SCOM3:    DW   THROW   ;error
04D6                             ;   OVERT       ( -- )
04D6                             ;               Link a new word into the current vocabulary.
04D6                          ;*Macro unroll: hCOLON  5,'OVERT',OVERT
04D6                          ;*Macro unroll:  hCODE 5, "OVERT", OVERT
04D6                          ALIGN   2   
04D6                OVERT:       
04D6   00                     NOP      
04D7   CD 3C 06               CALL   doLIST   
04DA   98 11 B8 0E 80 11 B8 0E AE 0E 8A 06 DW   LAST,AT,CRRNT,AT,STORE,EXIT   
04E6                             ;   ;           ( -- )
04E6                             ;               Terminate a colon definition.
04E6                          ;*Macro unroll: mCOLON  IMEDD+COMPO+1,';',SEMIS
04E6                          ;*Macro unroll:  mCODE IMEDD+COMPO+1, ";", SEMIS
04E6                          ALIGN   2   
04E6                SEMIS:       
04E6                VVCODE:   .SET   $   
04E6                VVLEN:    .SET   (IMEDD+COMPO+1 & 01FH) / CELLL   
1D3E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1D3E                VVNAME:   .SET   $   
1D3E   E6 04 A8 1D            DW   vvCODE,vvLINK   
1D42                VVLINK:   .SET   $   
1D42   61 3B                  DB   IMEDD+COMPO+1,";"   
04E6                          .ORG   vvCODE   
04E6   00                     NOP      
04E7   CD 3C 06               CALL   doLIST   
04EA   0A 04 8A 06 32 0B D6 04 8A 06 DW   COMPI,EXIT,LBRAC,OVERT,EXIT   
04F4                             ;   ]           ( -- )
04F4                             ;               Start compiling the words in the input stream.
04F4                          ;*Macro unroll: mCOLON  1,']',RBRAC
04F4                          ;*Macro unroll:  mCODE 1, "]", RBRAC
04F4                          ALIGN   2   
04F4                RBRAC:       
04F4                VVCODE:   .SET   $   
04F4                VVLEN:    .SET   (1 & 01FH) / CELLL   
1D38                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1D38                VVNAME:   .SET   $   
1D38   F4 04 42 1D            DW   vvCODE,vvLINK   
1D3C                VVLINK:   .SET   $   
1D3C   01 5D                  DB   1,"]"   
04F4                          .ORG   vvCODE   
04F4   00                     NOP      
04F5   CD 3C 06               CALL   doLIST   
04F8   4A 06 A8 04 58 11 AE 0E 8A 06 DW   DOLIT,SCOMP,TEVAL,STORE,EXIT   
0502                             ;   call,       ( ca -- )
0502                             ;               Assemble a call instruction to ca.
0502                          ;*Macro unroll: hCOLON  5,'call,',CALLC
0502                          ;*Macro unroll:  hCODE 5, "call,", CALLC
0502                          ALIGN   2   
0502                CALLC:       
0502   00                     NOP      
0503   CD 3C 06               CALL   doLIST   
0506   4A 06 00 CD EE 03      DW   DOLIT,CALLL,COMMA   ;Direct Threaded Code
050C   EE 03 8A 06            DW   COMMA,EXIT   ;DTC 8086 relative call
0510                             ;   :           ( -- ; <string> )
0510                             ;               Start a new colon definition using next word as its name.
0510                          ;*Macro unroll: mCOLON  1,':',COLON
0510                          ;*Macro unroll:  mCODE 1, ":", COLON
0510                          ALIGN   2   
0510                COLON:       
0510                VVCODE:   .SET   $   
0510                VVLEN:    .SET   (1 & 01FH) / CELLL   
1D32                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1D32                VVNAME:   .SET   $   
1D32   10 05 3C 1D            DW   vvCODE,vvLINK   
1D36                VVLINK:   .SET   $   
1D36   01 3A                  DB   1,":"   
0510                          .ORG   vvCODE   
0510   00                     NOP      
0511   CD 3C 06               CALL   doLIST   
0514   74 09 6C 04 4A 06 3C 06 DW   TOKEN,SNAME,DOLIT,DoLIST   
051C   02 05 F4 04 8A 06      DW   CALLC,RBRAC,EXIT   
0522                             ;   IMMEDIATE   ( -- )
0522                             ;               Make the last compiled word an immediate word.
0522                          ;*Macro unroll: mCOLON  9,'IMMEDIATE',IMMED
0522                          ;*Macro unroll:  mCODE 9, "IMMEDIATE", IMMED
0522                          ALIGN   2   
0522                IMMED:       
0522                VVCODE:   .SET   $   
0522                VVLEN:    .SET   (9 & 01FH) / CELLL   
1D24                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1D24                VVNAME:   .SET   $   
1D24   22 05 36 1D            DW   vvCODE,vvLINK   
1D28                VVLINK:   .SET   $   
1D28   09 49 4D 4D 45 44 49 41 54 45 DB   9,"IMMEDIATE"   
0522                          .ORG   vvCODE   
0522   00                     NOP      
0523   CD 3C 06               CALL   doLIST   
0526   4A 06 40 00 98 11 B8 0E B8 0E 66 01 DW   DOLIT,IMEDD,LAST,AT,AT,ORR   
0532   98 11 B8 0E AE 0E 8A 06 DW   LAST,AT,STORE,EXIT   
053A                             ;   USER        ( u -- ; <string> )
053A                             ;               Compile a new user variable.
053A                          ;*Macro unroll: mCOLON  4,'USER',USER
053A                          ;*Macro unroll:  mCODE 4, "USER", USER
053A                          ALIGN   2   
053A                USER:        
053A                VVCODE:   .SET   $   
053A                VVLEN:    .SET   (4 & 01FH) / CELLL   
1D1A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1D1A                VVNAME:   .SET   $   
1D1A   3A 05 28 1D            DW   vvCODE,vvLINK   
1D1E                VVLINK:   .SET   $   
1D1E   04 55 53 45 52         DB   4,"USER"   
053A                          .ORG   vvCODE   
053A   00                     NOP      
053B   CD 3C 06               CALL   doLIST   
053E   74 09 6C 04 D6 04      DW   TOKEN,SNAME,OVERT   
0544   4A 06 3C 06 02 05      DW   DOLIT,DoLIST,CALLC   
054A   0A 04 62 06 EE 03 8A 06 DW   COMPI,DOUSE,COMMA,EXIT   
0552                             ;   CREATE      ( -- ; <string> )
0552                             ;               Compile a new array entry without allocating code space.
0552                          ;*Macro unroll: mCOLON  6,'CREATE',CREAT
0552                          ;*Macro unroll:  mCODE 6, "CREATE", CREAT
0552                          ALIGN   2   
0552                CREAT:       
0552                VVCODE:   .SET   $   
0552                VVLEN:    .SET   (6 & 01FH) / CELLL   
1D0E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1D0E                VVNAME:   .SET   $   
1D0E   52 05 1E 1D            DW   vvCODE,vvLINK   
1D12                VVLINK:   .SET   $   
1D12   06 43 52 45 41 54 45   DB   6,"CREATE"   
0552                          .ORG   vvCODE   
0552   00                     NOP      
0553   CD 3C 06               CALL   doLIST   
0556   74 09 6C 04 D6 04      DW   TOKEN,SNAME,OVERT   
055C   4A 06 3C 06 02 05      DW   DOLIT,DoLIST,CALLC   
0562   0A 04 52 06 8A 06      DW   COMPI,DOVAR,EXIT   
0568                             ;   VARIABLE    ( -- ; <string> )
0568                             ;               Compile a new variable initialized to 0.
0568                          ;*Macro unroll: mCOLON  8,'VARIABLE',VARIA
0568                          ;*Macro unroll:  mCODE 8, "VARIABLE", VARIA
0568                          ALIGN   2   
0568                VARIA:       
0568                VVCODE:   .SET   $   
0568                VVLEN:    .SET   (8 & 01FH) / CELLL   
1D00                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1D00                VVNAME:   .SET   $   
1D00   68 05 12 1D            DW   vvCODE,vvLINK   
1D04                VVLINK:   .SET   $   
1D04   08 56 41 52 49 41 42 4C 45 DB   8,"VARIABLE"   
0568                          .ORG   vvCODE   
0568   00                     NOP      
0569   CD 3C 06               CALL   doLIST   
056C   52 05 4A 06 00 00 EE 03 8A 06 DW   CREAT,DOLIT,0,COMMA,EXIT   
0576                             ;   FOR         ( -- a )
0576                             ;               Start a FOR-NEXT loop structure in a colon definition.
0576                          ;*Macro unroll: mCOLON  IMEDD+3,'FOR',FOR
0576                          ;*Macro unroll:  mCODE IMEDD+3, "FOR", FOR
0576                          ALIGN   2   
0576                FOR:         
0576                VVCODE:   .SET   $   
0576                VVLEN:    .SET   (IMEDD+3 & 01FH) / CELLL   
1CB8                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1CB8                VVNAME:   .SET   $   
1CB8   76 05 04 1D            DW   vvCODE,vvLINK   
1CBC                VVLINK:   .SET   $   
1CBC   43 46 4F 52            DB   IMEDD+3,"FOR"   
0576                          .ORG   vvCODE   
0576   00                     NOP      
0577   CD 3C 06               CALL   doLIST   
057A   0A 04 4C 10 40 0F 8A 06 DW   COMPI,TOR,HERE,EXIT   
0582                             ;   BEGIN       ( -- a )
0582                             ;               Start an infinite or indefinite loop structure.
0582                          ;*Macro unroll: mCOLON  IMEDD+5,'BEGIN',BEGIN
0582                          ;*Macro unroll:  mCODE IMEDD+5, "BEGIN", BEGIN
0582                          ALIGN   2   
0582                BEGIN:       
0582                VVCODE:   .SET   $   
0582                VVLEN:    .SET   (IMEDD+5 & 01FH) / CELLL   
1C6E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1C6E                VVNAME:   .SET   $   
1C6E   82 05 BC 1C            DW   vvCODE,vvLINK   
1C72                VVLINK:   .SET   $   
1C72   45 42 45 47 49 4E      DB   IMEDD+5,"BEGIN"   
0582                          .ORG   vvCODE   
0582   00                     NOP      
0583   CD 3C 06               CALL   doLIST   
0586   40 0F 8A 06            DW   HERE,EXIT   
058A                             ;   NEXT        ( a -- )
058A                             ;               Terminate a FOR-NEXT loop structure.
058A                          ;*Macro unroll: mCOLON  IMEDD+4,'NEXT',NEXT
058A                          ;*Macro unroll:  mCODE IMEDD+4, "NEXT", NEXT
058A                          ALIGN   2   
058A                NEXT:        
058A                VVCODE:   .SET   $   
058A                VVLEN:    .SET   (IMEDD+4 & 01FH) / CELLL   
1C24                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1C24                VVNAME:   .SET   $   
1C24   8A 05 72 1C            DW   vvCODE,vvLINK   
1C28                VVLINK:   .SET   $   
1C28   44 4E 45 58 54         DB   IMEDD+4,"NEXT"   
058A                          .ORG   vvCODE   
058A   00                     NOP      
058B   CD 3C 06               CALL   doLIST   
058E   0A 04 96 06 EE 03 8A 06 DW   COMPI,DONXT,COMMA,EXIT   
0596                             ;   UNTIL       ( a -- )
0596                             ;               Terminate a BEGIN-UNTIL indefinite loop structure.
0596                          ;*Macro unroll: mCOLON  IMEDD+5,'UNTIL',UNTIL
0596                          ;*Macro unroll:  mCODE IMEDD+5, "UNTIL", UNTIL
0596                          ALIGN   2   
0596                UNTIL:       
0596                VVCODE:   .SET   $   
0596                VVLEN:    .SET   (IMEDD+5 & 01FH) / CELLL   
1BDA                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1BDA                VVNAME:   .SET   $   
1BDA   96 05 28 1C            DW   vvCODE,vvLINK   
1BDE                VVLINK:   .SET   $   
1BDE   45 55 4E 54 49 4C      DB   IMEDD+5,"UNTIL"   
0596                          .ORG   vvCODE   
0596   00                     NOP      
0597   CD 3C 06               CALL   doLIST   
059A   0A 04 92 0E EE 03 8A 06 DW   COMPI,QBRAN,COMMA,EXIT   
05A2                             ;   AGAIN       ( a -- )
05A2                             ;               Terminate a BEGIN-AGAIN infinite loop structure.
05A2                          ;*Macro unroll: mCOLON  IMEDD+5,'AGAIN',AGAIN
05A2                          ;*Macro unroll:  mCODE IMEDD+5, "AGAIN", AGAIN
05A2                          ALIGN   2   
05A2                AGAIN:       
05A2                VVCODE:   .SET   $   
05A2                VVLEN:    .SET   (IMEDD+5 & 01FH) / CELLL   
1B90                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1B90                VVNAME:   .SET   $   
1B90   A2 05 DE 1B            DW   vvCODE,vvLINK   
1B94                VVLINK:   .SET   $   
1B94   45 41 47 41 49 4E      DB   IMEDD+5,"AGAIN"   
05A2                          .ORG   vvCODE   
05A2   00                     NOP      
05A3   CD 3C 06               CALL   doLIST   
05A6   0A 04 9E 0E EE 03 8A 06 DW   COMPI,BRAN,COMMA,EXIT   
05AE                             ;   IF          ( -- A )
05AE                             ;               Begin a conditional branch structure.
05AE                          ;*Macro unroll: mCOLON  IMEDD+2,'IF',IFF
05AE                          ;*Macro unroll:  mCODE IMEDD+2, "IF", IFF
05AE                          ALIGN   2   
05AE                IFF:         
05AE                VVCODE:   .SET   $   
05AE                VVLEN:    .SET   (IMEDD+2 & 01FH) / CELLL   
1B48                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1B48                VVNAME:   .SET   $   
1B48   AE 05 94 1B            DW   vvCODE,vvLINK   
1B4C                VVLINK:   .SET   $   
1B4C   42 49 46               DB   IMEDD+2,"IF"   
05AE                          .ORG   vvCODE   
05AE   00                     NOP      
05AF   CD 3C 06               CALL   doLIST   
05B2   0A 04 92 0E 40 0F      DW   COMPI,QBRAN,HERE   
05B8   4A 06 00 00 EE 03 8A 06 DW   DOLIT,0,COMMA,EXIT   
05C0                             ;   AHEAD       ( -- A )
05C0                             ;               Compile a forward branch instruction.
05C0                          ;*Macro unroll: mCOLON  IMEDD+5,'AHEAD',AHEAD
05C0                          ;*Macro unroll:  mCODE IMEDD+5, "AHEAD", AHEAD
05C0                          ALIGN   2   
05C0                AHEAD:       
05C0                VVCODE:   .SET   $   
05C0                VVLEN:    .SET   (IMEDD+5 & 01FH) / CELLL   
1AFE                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1AFE                VVNAME:   .SET   $   
1AFE   C0 05 4C 1B            DW   vvCODE,vvLINK   
1B02                VVLINK:   .SET   $   
1B02   45 41 48 45 41 44      DB   IMEDD+5,"AHEAD"   
05C0                          .ORG   vvCODE   
05C0   00                     NOP      
05C1   CD 3C 06               CALL   doLIST   
05C4   0A 04 9E 0E 40 0F 4A 06 00 00 EE 03 8A 06 DW   COMPI,BRAN,HERE,DOLIT,0,COMMA,EXIT   
05D2                             ;   REPEAT      ( A a -- )
05D2                             ;               Terminate a BEGIN-WHILE-REPEAT indefinite loop.
05D2                          ;*Macro unroll: mCOLON  IMEDD+6,'REPEAT',REPEA
05D2                          ;*Macro unroll:  mCODE IMEDD+6, "REPEAT", REPEA
05D2                          ALIGN   2   
05D2                REPEA:       
05D2                VVCODE:   .SET   $   
05D2                VVLEN:    .SET   (IMEDD+6 & 01FH) / CELLL   
1AB2                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1AB2                VVNAME:   .SET   $   
1AB2   D2 05 02 1B            DW   vvCODE,vvLINK   
1AB6                VVLINK:   .SET   $   
1AB6   46 52 45 50 45 41 54   DB   IMEDD+6,"REPEAT"   
05D2                          .ORG   vvCODE   
05D2   00                     NOP      
05D3   CD 3C 06               CALL   doLIST   
05D6   A2 05 40 0F 70 10 AE 0E 8A 06 DW   AGAIN,HERE,SWAP,STORE,EXIT   
05E0                             ;   THEN        ( A -- )
05E0                             ;               Terminate a conditional branch structure.
05E0                          ;*Macro unroll: mCOLON  IMEDD+4,'THEN',THENN
05E0                          ;*Macro unroll:  mCODE IMEDD+4, "THEN", THENN
05E0                          ALIGN   2   
05E0                THENN:       
05E0                VVCODE:   .SET   $   
05E0                VVLEN:    .SET   (IMEDD+4 & 01FH) / CELLL   
1A68                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1A68                VVNAME:   .SET   $   
1A68   E0 05 B6 1A            DW   vvCODE,vvLINK   
1A6C                VVLINK:   .SET   $   
1A6C   44 54 48 45 4E         DB   IMEDD+4,"THEN"   
05E0                          .ORG   vvCODE   
05E0   00                     NOP      
05E1   CD 3C 06               CALL   doLIST   
05E4   40 0F 70 10 AE 0E 8A 06 DW   HERE,SWAP,STORE,EXIT   
05EC                             ;   AFT         ( a -- a A )
05EC                             ;               Jump to THEN in a FOR-AFT-THEN-NEXT loop the 1st time through.
05EC                          ;*Macro unroll: mCOLON  IMEDD+3,'AFT',AFT
05EC                          ;*Macro unroll:  mCODE IMEDD+3, "AFT", AFT
05EC                          ALIGN   2   
05EC                AFT:         
05EC                VVCODE:   .SET   $   
05EC                VVLEN:    .SET   (IMEDD+3 & 01FH) / CELLL   
1A20                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1A20                VVNAME:   .SET   $   
1A20   EC 05 6C 1A            DW   vvCODE,vvLINK   
1A24                VVLINK:   .SET   $   
1A24   43 41 46 54            DB   IMEDD+3,"AFT"   
05EC                          .ORG   vvCODE   
05EC   00                     NOP      
05ED   CD 3C 06               CALL   doLIST   
05F0   6C 10 C0 05 82 05 70 10 8A 06 DW   DROP,AHEAD,BEGIN,SWAP,EXIT   
05FA                             ;   ELSE        ( A -- A )
05FA                             ;               Start the false clause in an IF-ELSE-THEN structure.
05FA                          ;*Macro unroll: mCOLON  IMEDD+4,'ELSE',ELSEE
05FA                          ;*Macro unroll:  mCODE IMEDD+4, "ELSE", ELSEE
05FA                          ALIGN   2   
05FA                ELSEE:       
05FA                VVCODE:   .SET   $   
05FA                VVLEN:    .SET   (IMEDD+4 & 01FH) / CELLL   
19D6                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
19D6                VVNAME:   .SET   $   
19D6   FA 05 24 1A            DW   vvCODE,vvLINK   
19DA                VVLINK:   .SET   $   
19DA   44 45 4C 53 45         DB   IMEDD+4,"ELSE"   
05FA                          .ORG   vvCODE   
05FA   00                     NOP      
05FB   CD 3C 06               CALL   doLIST   
05FE   C0 05 70 10 E0 05 8A 06 DW   AHEAD,SWAP,THENN,EXIT   
0606                             ;   WHILE       ( a -- A a )
0606                             ;               Conditional branch out of a BEGIN-WHILE-REPEAT loop.
0606                          ;*Macro unroll: mCOLON  IMEDD+5,'WHILE',WHILE
0606                          ;*Macro unroll:  mCODE IMEDD+5, "WHILE", WHILE
0606                          ALIGN   2   
0606                WHILE:       
0606                VVCODE:   .SET   $   
0606                VVLEN:    .SET   (IMEDD+5 & 01FH) / CELLL   
198C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
198C                VVNAME:   .SET   $   
198C   06 06 DA 19            DW   vvCODE,vvLINK   
1990                VVLINK:   .SET   $   
1990   45 57 48 49 4C 45      DB   IMEDD+5,"WHILE"   
0606                          .ORG   vvCODE   
0606   00                     NOP      
0607   CD 3C 06               CALL   doLIST   
060A   AE 05 70 10 8A 06      DW   IFF,SWAP,EXIT   
0610                             ;   ABORT"      ( -- ; <string> )
0610                             ;               Conditional abort with an error message.
0610                          ;*Macro unroll: mCOLON  IMEDD+6,'ABORTQ',ABRTQ
0610                          ;*Macro unroll:  mCODE IMEDD+6, "ABORTQ", ABRTQ
0610                          ALIGN   2   
0610                ABRTQ:       
0610                VVCODE:   .SET   $   
0610                VVLEN:    .SET   (IMEDD+6 & 01FH) / CELLL   
1940                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1940                VVNAME:   .SET   $   
1940   10 06 90 19            DW   vvCODE,vvLINK   
1944                VVLINK:   .SET   $   
1944   46 41 42 4F 52 54 51   DB   IMEDD+6,"ABORTQ"   
0610                          .ORG   vvCODE   
0610   00                     NOP      
0611   CD 3C 06               CALL   doLIST   
0614   0A 04 EC 0A 28 04 8A 06 DW   COMPI,ABORQ,STRCQ,EXIT   
061C                             ;   $"          ( -- ; <string> )
061C                             ;               Compile an inline string literal.
061C                          ;*Macro unroll: hCOLON  IMEDD+2,'$|',STRQ
061C                          ;*Macro unroll:  hCODE IMEDD+2, "$|", STRQ
061C                          ALIGN   2   
061C                STRQ:        
061C   00                     NOP      
061D   CD 3C 06               CALL   doLIST   
0620   0A 04 8E 0C 28 04 8A 06 DW   COMPI,STRQP,STRCQ,EXIT   
0628                             ;   ."          ( -- ; <string> )
0628                             ;               Compile an inline string literal to be typed out at run time.
0628                          ;*Macro unroll: hCOLON  IMEDD+2,'.|',DOTQ
0628                          ;*Macro unroll:  hCODE IMEDD+2, ".|", DOTQ
0628                          ALIGN   2   
0628                DOTQ:        
0628   00                     NOP      
0629   CD 3C 06               CALL   doLIST   
062C   0A 04 96 0C 28 04 8A 06 DW   COMPI,DOTQP,STRCQ,EXIT   
0634                             ; ;   UNLOOP	( -- ) ( R: loop-sys -- )	\ CORE
0634                             ; ;		Discard loop-control parameters for the current nesting level.
0634                             ; ;		An UNLOOP is required for each nesting level before the
0634                             ; ;		definition may be EXITed.
0634                             ; mCOLON	COMPO+6,"UNLOOP",UNLOOP
0634                             ; 	DW	RFrom,RFrom,RFrom,DDROP,ToR,EXIT
0634                             ;   doCONST	( -- x )
0634                             ;	Run-time routine of CONSTANT and VARIABLE.
0634                          ;*Macro unroll: hCODE	COMPO+7, 'doCONST', DoCONST
0634                          ALIGN   2   
0634                DOCONST:      
0634   E1                     POP   HL   ;10t
0635   C5                     PUSH   BC   ;11t
0636   4E                     LD   C,(HL)   ; 7t
0637   23                     INC   HL   ; 6t
0638   46                     LD   B,(HL)   ; 7t
0639                          ;*Macro unroll:  mNEXT
0639   EB                     EX   DE,HL   
063A   FD E9                  JP   (IY)   
063C                             ;   doLIST	( -- ) ( R: -- nest-sys )
063C                             ;	Process colon list.
063C                          ;*Macro unroll: hCODE	COMPO+6, 'doLIST', DoLIST
063C                          ALIGN   2   
063C                DOLIST:      
063C   DD 2B                  DEC   IX   ;10t
063E   DD 72 00               LD   (IX+0),D   ;19t
0641   DD 2B                  DEC   IX   ;10t
0643   DD 73 00               LD   (IX+0),E   ;19t
0646   E1                     POP   HL   ;10t
0647                          ;*Macro unroll:  mNEXTHL							
0647   FD E9                  JP   (IY)   
0649                             ;   DOLIT	( -- x )
0649                             ;	Push an inline literal.
0649                          ;*Macro unroll: hCODE	COMPO+5, 'DOLIT', DOLIT
0649                          ALIGN   2   
064A                DOLIT:       
064A   C5                     PUSH   BC   ; 11t
064B   EB                     EX   DE,HL   ; 4t
064C   4E                     LD   C,(HL)   ; 7t
064D   23                     INC   HL   ; 6t
064E   46                     LD   B,(HL)   ; 7t
064F   23                     INC   HL   ; 6t
0650                          ;*Macro unroll:  mNEXTHL
0650   FD E9                  JP   (IY)   
0652                             ;   doVAR       ( -- a )
0652                             ;   Run time routine for VARIABLE and CREATE.
0652                          ;*Macro unroll: hCOLON  COMPO+5, 'doVAR', DoVAR
0652                          ;*Macro unroll:  hCODE COMPO+5, "doVAR", DoVAR
0652                          ALIGN   2   
0652                DOVAR:       
0652   00                     NOP      
0653   CD 3C 06               CALL   doLIST   
0656   5A 10 8A 06            DW   RFROM,EXIT   
065A                             ;   UP          ( -- a )
065A                             ;   Pointer to the user area.
065A                          ;*Macro unroll: hCOLON  2, 'UP', UP
065A                          ;*Macro unroll:  hCODE 2, "UP", UP
065A                          ALIGN   2   
065A                UP:          
065A   00                     NOP      
065B   CD 3C 06               CALL   doLIST   
065E   52 06                  DW   DoVAR   
0660   45 24                  DW   UPP   
0662                             ;   doUSER      ( -- a )
0662                             ;   Run time routine for user variables.
0662                          ;*Macro unroll: hCOLON  COMPO+6,'doUSER',DOUSE
0662                          ;*Macro unroll:  hCODE COMPO+6, "doUSER", DOUSE
0662                          ALIGN   2   
0662                DOUSE:       
0662   00                     NOP      
0663   CD 3C 06               CALL   doLIST   
0666   5A 10 B8 0E 5A 06 B8 0E 7A 01 8A 06 DW   RFROM,AT,UP,AT,PLUS,EXIT   
0672                             ;   do$         ( -- a )
0672                             ;               Return the address of a compiled string.
0672                          ;*Macro unroll: hCOLON  COMPO+3,'do$',DOSTR
0672                          ;*Macro unroll:  hCODE COMPO+3, "do$", DOSTR
0672                          ALIGN   2   
0672                DOSTR:       
0672   00                     NOP      
0673   CD 3C 06               CALL   doLIST   
0676   5A 10 D0 0E 5A 10 2E 0F 7A 01 DW   RFROM,RAT,RFROM,COUNT,PLUS   
0680   26 10 4C 10 70 10 4C 10 8A 06 DW   ALGND,TOR,SWAP,TOR,EXIT   
068A                             ;   EXIT	( -- ) ( R: nest-sys -- )	\ CORE
068A                             ;	Return control to the calling definition.
068A                          ;*Macro unroll: mCODE	COMPO+4, 'EXIT', EXIT
068A                          ALIGN   2   
068A                EXIT:        
068A                VVCODE:   .SET   $   
068A                VVLEN:    .SET   (COMPO+4 & 01FH) / CELLL   
1916                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1916                VVNAME:   .SET   $   
1916   8A 06 44 19            DW   vvCODE,vvLINK   
191A                VVLINK:   .SET   $   
191A   24 45 58 49 54         DB   COMPO+4,"EXIT"   
068A                          .ORG   vvCODE   
068A   DD 6E 00               LD   L,(IX+0)   
068D   DD 23                  INC   IX   
068F   DD 66 00               LD   H,(IX+0)   
0692   DD 23                  INC   IX   
0694                          ;*Macro unroll:  mNEXTHL
0694   FD E9                  JP   (IY)   
0696                             ;   next        ( -- )
0696                             ;               Run time code for the single index loop.
0696                             ;               : next ( -- ) \ hilevel model
0696                             ;                 r> r> dup if 1 - >r @ >r exit then drop cell+ >r ;
0696                          ;*Macro unroll: mCODE   COMPO+4,'next',DONXT
0696                          ALIGN   2   
0696                DONXT:       
0696                VVCODE:   .SET   $   
0696                VVLEN:    .SET   (COMPO+4 & 01FH) / CELLL   
18EC                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
18EC                VVNAME:   .SET   $   
18EC   96 06 1A 19            DW   vvCODE,vvLINK   
18F0                VVLINK:   .SET   $   
18F0   24 6E 65 78 74         DB   COMPO+4,"next"   
0696                          .ORG   vvCODE   
0696   DD E5                  PUSH   IX   
0698   E1                     POP   HL   ; load rp into HL
0699   7E                     LD   A,(HL)   ; a = low byte of r@
069A   B7                     OR   A   
069B   20 10                  JR   NZ,DECLOW   ; low > 0 goto dec low
069D   23                     INC   HL   
069E   7E                     LD   A,(HL)   ; a = high byte of r@
069F   B7                     OR   A   
06A0   20 09                  JR   NZ,DECHILO   ; high > 0 goto dec hi dec lo
06A2   23                     INC   HL   
06A3   E5                     PUSH   HL   
06A4   DD E1                  POP   IX   ; pop r@
06A6   13                     INC   DE   ; IP = skip following word
06A7   13                     INC   DE   
06A8                          ;*Macro unroll:  mNEXT                               ; continue
06A8   EB                     EX   DE,HL   ; continue
06A9   FD E9                  JP   (IY)   
06AB                DECHILO:      
06AB   35                     DEC   (HL)   ; dec high byte of r@
06AC   2B                     DEC   HL   
06AD                DECLOW:      
06AD   35                     DEC   (HL)   ; dec low byte of r@
06AE   6B                     LD   L,E   ; DE points to location of loop address
06AF   62                     LD   H,D   
06B0   5E                     LD   E,(HL)   ; DE points to loop address
06B1   23                     INC   HL   
06B2   56                     LD   D,(HL)   
06B3                          ;*Macro unroll:  mNEXT                               ; continue to loop address
06B3   EB                     EX   DE,HL   ; continue to loop address
06B4   FD E9                  JP   (IY)   
06B6                             ;   DIGIT       ( u -- c )
06B6                             ;               Convert digit u to a character.
06B6                          ;*Macro unroll: hCOLON  5,'DIGIT',DIGIT
06B6                          ;*Macro unroll:  hCODE 5, "DIGIT", DIGIT
06B6                          ALIGN   2   
06B6                DIGIT:       
06B6   00                     NOP      
06B7   CD 3C 06               CALL   doLIST   
06BA   4A 06 09 00 78 10 00 02 DW   DOLIT,9,OVER,LESS   
06C2   4A 06 07 00 5C 01 7A 01 DW   DOLIT,7,ANDD,PLUS   
06CA   4A 06 30 00 7A 01 8A 06 DW   DOLIT,$30,PLUS,EXIT   ; $30 = "0"
06D2                             ;   EXTRACT     ( n base -- n c )
06D2                             ;               Extract the least significant digit from n.
06D2                          ;*Macro unroll: hCOLON  7,'EXTRACT',EXTRC
06D2                          ;*Macro unroll:  hCODE 7, "EXTRACT", EXTRC
06D2                          ALIGN   2   
06D2                EXTRC:       
06D2   00                     NOP      
06D3   CD 3C 06               CALL   doLIST   
06D6   4A 06 00 00 70 10 5E 02 DW   DOLIT,0,SWAP,UMMOD   
06DE   70 10 B6 06 8A 06      DW   SWAP,DIGIT,EXIT   
06E4                             ;   <#          ( -- )
06E4                             ;               Initiate the numeric output process.
06E4                          ;*Macro unroll: mCOLON  2,'<#',BDIGS
06E4                          ;*Macro unroll:  mCODE 2, "<#", BDIGS
06E4                          ALIGN   2   
06E4                BDIGS:       
06E4                VVCODE:   .SET   $   
06E4                VVLEN:    .SET   (2 & 01FH) / CELLL   
18E4                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
18E4                VVNAME:   .SET   $   
18E4   E4 06 F0 18            DW   vvCODE,vvLINK   
18E8                VVLINK:   .SET   $   
18E8   02 3C 23               DB   2,"<#"   
06E4                          .ORG   vvCODE   
06E4   00                     NOP      
06E5   CD 3C 06               CALL   doLIST   
06E8   4A 0F 68 11 AE 0E 8A 06 DW   PAD,HLD,STORE,EXIT   
06F0                             ;   HOLD        ( c -- )
06F0                             ;               Insert a character into the numeric output string.
06F0                          ;*Macro unroll: mCOLON  4,'HOLD',HOLD
06F0                          ;*Macro unroll:  mCODE 4, "HOLD", HOLD
06F0                          ALIGN   2   
06F0                HOLD:        
06F0                VVCODE:   .SET   $   
06F0                VVLEN:    .SET   (4 & 01FH) / CELLL   
18DA                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
18DA                VVNAME:   .SET   $   
18DA   F0 06 E8 18            DW   vvCODE,vvLINK   
18DE                VVLINK:   .SET   $   
18DE   04 48 4F 4C 44         DB   4,"HOLD"   
06F0                          .ORG   vvCODE   
06F0   00                     NOP      
06F1   CD 3C 06               CALL   doLIST   
06F4   68 11 B8 0E 4A 06 01 00 B4 01 DW   HLD,AT,DOLIT,1,SUBB   
06FE   68 10 68 11 AE 0E C0 0E 8A 06 DW   DUPP,HLD,STORE,CSTOR,EXIT   
0708                             ;   #           ( u -- u )
0708                             ;               Extract one digit from u and append the digit to output string.
0708                          ;*Macro unroll: mCOLON  1,'#',DIG
0708                          ;*Macro unroll:  mCODE 1, "#", DIG
0708                          ALIGN   2   
0708                DIG:         
0708                VVCODE:   .SET   $   
0708                VVLEN:    .SET   (1 & 01FH) / CELLL   
18D4                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
18D4                VVNAME:   .SET   $   
18D4   08 07 DE 18            DW   vvCODE,vvLINK   
18D8                VVLINK:   .SET   $   
18D8   01 23                  DB   1,"#"   
0708                          .ORG   vvCODE   
0708   00                     NOP      
0709   CD 3C 06               CALL   doLIST   
070C   28 11 B8 0E D2 06 F0 06 8A 06 DW   BASE,AT,EXTRC,HOLD,EXIT   
0716                             ;   #S          ( u -- 0 )
0716                             ;               Convert u until all digits are added to the output string.
0716                          ;*Macro unroll: mCOLON  2,'#S',DIGS
0716                          ;*Macro unroll:  mCODE 2, "#S", DIGS
0716                          ALIGN   2   
0716                DIGS:        
0716                VVCODE:   .SET   $   
0716                VVLEN:    .SET   (2 & 01FH) / CELLL   
18CC                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
18CC                VVNAME:   .SET   $   
18CC   16 07 D8 18            DW   vvCODE,vvLINK   
18D0                VVLINK:   .SET   $   
18D0   02 23 53               DB   2,"#S"   
0716                          .ORG   vvCODE   
0716   00                     NOP      
0717   CD 3C 06               CALL   doLIST   
071A                DIGS1:       
071A   08 07 68 10            DW   DIG,DUPP   
071E   92 0E 26 07            DW   QBRAN,DIGS2   
0722   9E 0E 1A 07            DW   BRAN,DIGS1   
0726                DIGS2:       
0726   8A 06                  DW   EXIT   
0728                             ;   SIGN        ( n -- )
0728                             ;               Add a minus sign to the numeric output string.
0728                          ;*Macro unroll: mCOLON	4,'SIGN',SIGN
0728                          ;*Macro unroll:  mCODE 4, "SIGN", SIGN
0728                          ALIGN   2   
0728                SIGN:        
0728                VVCODE:   .SET   $   
0728                VVLEN:    .SET   (4 & 01FH) / CELLL   
18C2                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
18C2                VVNAME:   .SET   $   
18C2   28 07 D0 18            DW   vvCODE,vvLINK   
18C6                VVLINK:   .SET   $   
18C6   04 53 49 47 4E         DB   4,"SIGN"   
0728                          .ORG   vvCODE   
0728   00                     NOP      
0729   CD 3C 06               CALL   doLIST   
072C   54 01 92 0E 38 07      DW   ZLESS,QBRAN,SIGN1   
0732   4A 06 2D 00 F0 06      DW   DoLIT,MINUSS,HOLD   
0738                SIGN1:       
0738   8A 06                  DW   EXIT   
073A                             ;   #>          ( w -- b u )
073A                             ;               Prepare the output string to be TYPE'd.
073A                          ;*Macro unroll: mCOLON  2,'#>',EDIGS
073A                          ;*Macro unroll:  mCODE 2, "#>", EDIGS
073A                          ALIGN   2   
073A                EDIGS:       
073A                VVCODE:   .SET   $   
073A                VVLEN:    .SET   (2 & 01FH) / CELLL   
18BA                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
18BA                VVNAME:   .SET   $   
18BA   3A 07 C6 18            DW   vvCODE,vvLINK   
18BE                VVLINK:   .SET   $   
18BE   02 23 3E               DB   2,"#>"   
073A                          .ORG   vvCODE   
073A   00                     NOP      
073B   CD 3C 06               CALL   doLIST   
073E   6C 10 68 11 B8 0E      DW   DROP,HLD,AT   
0744   4A 0F 78 10 B4 01 8A 06 DW   PAD,OVER,SUBB,EXIT   
074C                             ;   str         ( n -- b u )
074C                             ;               Convert a signed integer to a numeric string.
074C                          ;*Macro unroll: hCOLON  3,'str',STR
074C                          ;*Macro unroll:  hCODE 3, "str", STR
074C                          ALIGN   2   
074C                STR:         
074C   00                     NOP      
074D   CD 3C 06               CALL   doLIST   
0750   68 10 4C 10 BE 01      DW   DUPP,TOR,ABSS   
0756   E4 06 16 07 5A 10      DW   BDIGS,DIGS,RFROM   
075C   28 07 3A 07 8A 06      DW   SIGN,EDIGS,EXIT   
0762                             ;   HEX         ( -- )
0762                             ;               Use radix 16 as base for numeric conversions.
0762                          ;*Macro unroll: mCOLON  3,'HEX',HEX
0762                          ;*Macro unroll:  mCODE 3, "HEX", HEX
0762                          ALIGN   2   
0762                HEX:         
0762                VVCODE:   .SET   $   
0762                VVLEN:    .SET   (3 & 01FH) / CELLL   
18B2                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
18B2                VVNAME:   .SET   $   
18B2   62 07 BE 18            DW   vvCODE,vvLINK   
18B6                VVLINK:   .SET   $   
18B6   03 48 45 58            DB   3,"HEX"   
0762                          .ORG   vvCODE   
0762   00                     NOP      
0763   CD 3C 06               CALL   doLIST   
0766   4A 06 10 00 28 11 AE 0E 8A 06 DW   DOLIT,16,BASE,STORE,EXIT   
0770                             ;   DECIMAL     ( -- )
0770                             ;               Use radix 10 as base for numeric conversions.
0770                          ;*Macro unroll: mCOLON  7,'DECIMAL',DECIMAL
0770                          ;*Macro unroll:  mCODE 7, "DECIMAL", DECIMAL
0770                          ALIGN   2   
0770                DECIMAL:      
0770                VVCODE:   .SET   $   
0770                VVLEN:    .SET   (7 & 01FH) / CELLL   
18A6                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
18A6                VVNAME:   .SET   $   
18A6   70 07 B6 18            DW   vvCODE,vvLINK   
18AA                VVLINK:   .SET   $   
18AA   07 44 45 43 49 4D 41 4C DB   7,"DECIMAL"   
0770                          .ORG   vvCODE   
0770   00                     NOP      
0771   CD 3C 06               CALL   doLIST   
0774   4A 06 10 00 28 11 AE 0E 8A 06 DW   DOLIT,16,BASE,STORE,EXIT   
077E                             ;   BL          ( -- 32 )
077E                             ;               Return 32, the blank character.
077E                          ;*Macro unroll: mCOLON	2,'BL',BLANK
077E                          ;*Macro unroll:  mCODE 2, "BL", BLANK
077E                          ALIGN   2   
077E                BLANK:       
077E                VVCODE:   .SET   $   
077E                VVLEN:    .SET   (2 & 01FH) / CELLL   
189E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
189E                VVNAME:   .SET   $   
189E   7E 07 AA 18            DW   vvCODE,vvLINK   
18A2                VVLINK:   .SET   $   
18A2   02 42 4C               DB   2,"BL"   
077E                          .ORG   vvCODE   
077E   00                     NOP      
077F   CD 3C 06               CALL   doLIST   
0782   4A 06 20 00 8A 06      DW   DoLIT,SPACEE,EXIT   
0788                             ;   >CHAR       ( c -- c )
0788                             ;               Filter non-printing characters.
0788                          ;*Macro unroll: hCOLON  5,'>CHAR',TCHAR
0788                          ;*Macro unroll:  hCODE 5, ">CHAR", TCHAR
0788                          ALIGN   2   
0788                TCHAR:       
0788   00                     NOP      
0789   CD 3C 06               CALL   doLIST   
078C   4A 06 7F 00 5C 01 68 10 DW   DoLIT,$7F,ANDD,DUPP   ;mask msb
0794   4A 06 7F 00            DW   DoLIT,127   
0798   4A 06 20 00 40 02      DW   DoLIT,SPACEE,WITHI   ;check for printable
079E   92 0E A8 07            DW   QBRAN,TCHA1   
07A2   6C 10 4A 06 5F 00      DW   DROP,DoLIT,UNDERSC   ;replace non-printables
07A8                TCHA1:       
07A8   8A 06                  DW   EXIT   
07AA                             ;   DIGIT?      ( c base -- u t )
07AA                             ;               Convert a character to its numeric value. A flag indicates success.
07AA                          ;*Macro unroll: hCOLON  6,'DIGIT?',DIGTQ
07AA                          ;*Macro unroll:  hCODE 6, "DIGIT?", DIGTQ
07AA                          ALIGN   2   
07AA                DIGTQ:       
07AA   00                     NOP      
07AB   CD 3C 06               CALL   doLIST   
07AE   4C 10 4A 06 30 00 B4 01 DW   TOR,DOLIT,$30,SUBB   ; $30 = "0"
07B6   4A 06 09 00 78 10 00 02 DW   DOLIT,9,OVER,LESS   
07BE   92 0E D2 07            DW   QBRAN,DGTQ1   
07C2   4A 06 07 00 B4 01      DW   DOLIT,7,SUBB   
07C8   68 10 4A 06 0A 00 00 02 66 01 DW   DUPP,DOLIT,10,LESS,ORR   
07D2                DGTQ1:       
07D2   68 10 5A 10 E4 01 8A 06 DW   DUPP,RFROM,ULESS,EXIT   
07DA                             ;   NUMBER?     ( a -- n T | a F )
07DA                             ;               Convert a number string to integer. Push a flag on tos.
07DA                          ;*Macro unroll: hCOLON  7,'NUMBER?',NUMBQ
07DA                          ;*Macro unroll:  hCODE 7, "NUMBER?", NUMBQ
07DA                          ALIGN   2   
07DA                NUMBQ:       
07DA   00                     NOP      
07DB   CD 3C 06               CALL   doLIST   
07DE   28 11 B8 0E 4C 10 4A 06 00 00 78 10 2E 0F DW   BASE,AT,TOR,DOLIT,0,OVER,COUNT   
07EC   78 10 C8 0E 4A 06 24 00 CE 01 DW   OVER,CAT,DOLIT,$24,EQUAL   ; $24 = '$"
07F6   92 0E 0C 08            DW   QBRAN,NUMQ1   
07FA   62 07 70 10 4A 06 01 00 7A 01 DW   HEX,SWAP,DOLIT,1,PLUS   
0804   70 10 4A 06 01 00 B4 01 DW   SWAP,DOLIT,1,SUBB   
080C                NUMQ1:       
080C   78 10 C8 0E 4A 06 2D 00 CE 01 4C 10 DW   OVER,CAT,DOLIT,$2D,EQUAL,TOR   ;$2D = "-"
0818   70 10 D0 0E B4 01 70 10 D0 0E 7A 01 80 10 DW   SWAP,RAT,SUBB,SWAP,RAT,PLUS,QDUP   
0826   92 0E 78 08            DW   QBRAN,NUMQ6   
082A   4A 06 01 00 B4 01 4C 10 DW   DOLIT,1,SUBB,TOR   
0832                NUMQ2:       
0832   68 10 4C 10 C8 0E 28 11 B8 0E AA 07 DW   DUPP,TOR,CAT,BASE,AT,DIGTQ   
083E   92 0E 6A 08            DW   QBRAN,NUMQ4   
0842   70 10 28 11 B8 0E 3A 03 7A 01 5A 10 DW   SWAP,BASE,AT,STAR,PLUS,RFROM   
084E   4A 06 01 00 7A 01      DW   DOLIT,1,PLUS   
0854   96 06 32 08            DW   DONXT,NUMQ2   
0858   D0 0E 70 10 6C 10      DW   RAT,SWAP,DROP   
085E   92 0E 64 08            DW   QBRAN,NUMQ3   
0862   90 01                  DW   NEGAT   
0864                NUMQ3:       
0864   70 10                  DW   SWAP   
0866   9E 0E 76 08            DW   BRAN,NUMQ5   
086A                NUMQ4:       
086A   5A 10 5A 10 9C 10 9C 10 4A 06 00 00 DW   RFROM,RFROM,DDROP,DDROP,DOLIT,0   
0876                NUMQ5:       
0876   68 10                  DW   DUPP   
0878                NUMQ6:       
0878   5A 10 9C 10            DW   RFROM,DDROP   
087C   5A 10 28 11 AE 0E 8A 06 DW   RFROM,BASE,STORE,EXIT   
0884                             ;   parse       ( b u c -- b u delta ; <string> )
0884                             ;               Scan string delimited by c. Return found string and its offset.
0884                          ;*Macro unroll: hCOLON  5,'parse',PARS
0884                          ;*Macro unroll:  hCODE 5, "parse", PARS
0884                          ALIGN   2   
0884                PARS:        
0884   00                     NOP      
0885   CD 3C 06               CALL   doLIST   
0888   30 11 AE 0E 78 10 4C 10 68 10 DW   TEMP,STORE,OVER,TOR,DUPP   
0892   92 0E 20 09            DW   QBRAN,PARS8   
0896   4A 06 01 00 B4 01 30 11 B8 0E 7E 07 CE 01 DW   DOLIT,1,SUBB,TEMP,AT,BLANK,EQUAL   
08A4   92 0E D2 08            DW   QBRAN,PARS3   
08A8   4C 10                  DW   TOR   
08AA                PARS1:       
08AA   7E 07 78 10 C8 0E      DW   BLANK,OVER,CAT   ;skip leading blanks ONLY
08B0   B4 01 54 01 84 01      DW   SUBB,ZLESS,INVER   
08B6   92 0E D0 08            DW   QBRAN,PARS2   
08BA   4A 06 01 00 7A 01      DW   DOLIT,1,PLUS   
08C0   96 06 AA 08            DW   DONXT,PARS1   
08C4   5A 10 6C 10 4A 06 00 00 68 10 8A 06 DW   RFROM,DROP,DOLIT,0,DUPP,EXIT   
08D0                PARS2:       
08D0   5A 10                  DW   RFROM   
08D2                PARS3:       
08D2   78 10 70 10            DW   OVER,SWAP   
08D6   4C 10                  DW   TOR   
08D8                PARS4:       
08D8   30 11 B8 0E 78 10 C8 0E B4 01 DW   TEMP,AT,OVER,CAT,SUBB   ;scan for delimiter
08E2   30 11 B8 0E 7E 07 CE 01 DW   TEMP,AT,BLANK,EQUAL   
08EA   92 0E F0 08            DW   QBRAN,PARS5   
08EE   54 01                  DW   ZLESS   
08F0                PARS5:       
08F0   92 0E 06 09            DW   QBRAN,PARS6   
08F4   4A 06 01 00 7A 01      DW   DOLIT,1,PLUS   
08FA   96 06 D8 08            DW   DONXT,PARS4   
08FE   68 10 4C 10            DW   DUPP,TOR   
0902   9E 0E 14 09            DW   BRAN,PARS7   
0906                PARS6:       
0906   5A 10 6C 10 68 10      DW   RFROM,DROP,DUPP   
090C   4A 06 01 00 7A 01 4C 10 DW   DOLIT,1,PLUS,TOR   
0914                PARS7:       
0914   78 10 B4 01            DW   OVER,SUBB   
0918   5A 10 5A 10 B4 01 8A 06 DW   RFROM,RFROM,SUBB,EXIT   
0920                PARS8:       
0920   78 10 5A 10 B4 01 8A 06 DW   OVER,RFROM,SUBB,EXIT   
0928                             ;   PARSE       ( c -- b u ; <string> )
0928                             ;               Scan input stream and return counted string delimited by c.
0928                          ;*Macro unroll: mCOLON  5,'PARSE',PARSE
0928                          ;*Macro unroll:  mCODE 5, "PARSE", PARSE
0928                          ALIGN   2   
0928                PARSE:       
0928                VVCODE:   .SET   $   
0928                VVLEN:    .SET   (5 & 01FH) / CELLL   
1894                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1894                VVNAME:   .SET   $   
1894   28 09 A2 18            DW   vvCODE,vvLINK   
1898                VVLINK:   .SET   $   
1898   05 50 41 52 53 45      DB   5,"PARSE"   
0928                          .ORG   vvCODE   
0928   00                     NOP      
0929   CD 3C 06               CALL   doLIST   
092C   4C 10 58 0F 40 11 B8 0E 7A 01 DW   TOR,TIB,INN,AT,PLUS   ;current input buffer pointer
0936   48 11 B8 0E 40 11 B8 0E B4 01 DW   NTIB,AT,INN,AT,SUBB   ;remaining count
0940   5A 10 84 08 40 11 FC 0E 8A 06 DW   RFROM,PARS,INN,PSTOR,EXIT   
094A                             ;   (           ( -- )
094A                             ;               Ignore following string up to next ) . A comment.
094A                          ;*Macro unroll: mCOLON  IMEDD+1,'(',PAREN
094A                          ;*Macro unroll:  mCODE IMEDD+1, "(", PAREN
094A                          ALIGN   2   
094A                PAREN:       
094A                VVCODE:   .SET   $   
094A                VVLEN:    .SET   (IMEDD+1 & 01FH) / CELLL   
184E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
184E                VVNAME:   .SET   $   
184E   4A 09 98 18            DW   vvCODE,vvLINK   
1852                VVLINK:   .SET   $   
1852   41 28                  DB   IMEDD+1,"("   
094A                          .ORG   vvCODE   
094A   00                     NOP      
094B   CD 3C 06               CALL   doLIST   
094E   4A 06 29 00 28 09 9C 10 8A 06 DW   DOLIT,$29,PARSE,DDROP,EXIT   ; $29 = ")"
0958                             ;   \           ( -- )
0958                             ;               Ignore following text till the end of line.
0958                          ;*Macro unroll: mCOLON  IMEDD+1, $5C, BKSLA
0958                          ;*Macro unroll:  mCODE IMEDD+1, $5C, BKSLA
0958                          ALIGN   2   
0958                BKSLA:       
0958                VVCODE:   .SET   $   
0958                VVLEN:    .SET   (IMEDD+1 & 01FH) / CELLL   
1808                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1808                VVNAME:   .SET   $   
1808   58 09 52 18            DW   vvCODE,vvLINK   
180C                VVLINK:   .SET   $   
180C   41 5C                  DB   IMEDD+1,$5C   
0958                          .ORG   vvCODE   
0958   00                     NOP      
0959   CD 3C 06               CALL   doLIST   
095C   48 11 B8 0E 40 11 AE 0E 8A 06 DW   NTIB,AT,INN,STORE,EXIT   
0966                             ;   CHAR        ( -- c )
0966                             ;               Parse next word and return its first character.
0966                          ;*Macro unroll: mCOLON  4,'CHAR',CHAR
0966                          ;*Macro unroll:  mCODE 4, "CHAR", CHAR
0966                          ALIGN   2   
0966                CHAR:        
0966                VVCODE:   .SET   $   
0966                VVLEN:    .SET   (4 & 01FH) / CELLL   
17FE                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
17FE                VVNAME:   .SET   $   
17FE   66 09 0C 18            DW   vvCODE,vvLINK   
1802                VVLINK:   .SET   $   
1802   04 43 48 41 52         DB   4,"CHAR"   
0966                          .ORG   vvCODE   
0966   00                     NOP      
0967   CD 3C 06               CALL   doLIST   
096A   7E 07 28 09 6C 10 C8 0E 8A 06 DW   BLANK,PARSE,DROP,CAT,EXIT   
0974                             ;   TOKEN       ( -- a ; <string> )
0974                             ;               Parse a word from input stream and copy it to name dictionary.
0974                          ;*Macro unroll: hCOLON  5,'TOKEN',TOKEN
0974                          ;*Macro unroll:  hCODE 5, "TOKEN", TOKEN
0974                          ALIGN   2   
0974                TOKEN:       
0974   00                     NOP      
0975   CD 3C 06               CALL   doLIST   
0978   7E 07 28 09 4A 06 1F 00 2C 02 DW   BLANK,PARSE,DOLIT,31,MIN   
0982   90 11 B8 0E 78 10 B4 01 88 03 DW   NP,AT,OVER,SUBB,CELLM   
098C   EC 0F 8A 06            DW   PACKS,EXIT   
0990                             ;   WORD        ( c -- a ; <string> )
0990                             ;               Parse a word from input stream and copy it to code dictionary.
0990                          ;*Macro unroll: mCOLON  4,'WORD',WORDD
0990                          ;*Macro unroll:  mCODE 4, "WORD", WORDD
0990                          ALIGN   2   
0990                WORDD:       
0990                VVCODE:   .SET   $   
0990                VVLEN:    .SET   (4 & 01FH) / CELLL   
17F4                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
17F4                VVNAME:   .SET   $   
17F4   90 09 02 18            DW   vvCODE,vvLINK   
17F8                VVLINK:   .SET   $   
17F8   04 57 4F 52 44         DB   4,"WORD"   
0990                          .ORG   vvCODE   
0990   00                     NOP      
0991   CD 3C 06               CALL   doLIST   
0994   28 09 40 0F EC 0F 8A 06 DW   PARSE,HERE,PACKS,EXIT   
099C                             ;   NAME>       ( na -- ca )
099C                             ;               Return a code address given a name address.
099C                          ;*Macro unroll: hCOLON  5,'NAME>',NAMET
099C                          ;*Macro unroll:  hCODE 5, "NAME>", NAMET
099C                          ALIGN   2   
099C                NAMET:       
099C   00                     NOP      
099D   CD 3C 06               CALL   doLIST   
09A0   88 03 88 03 B8 0E 8A 06 DW   CELLM,CELLM,AT,EXIT   
09A8                             ;   SAME?       ( a a u -- a a f \ -0+ )
09A8                             ;               Compare u cells in two strings. Return 0 if identical.
09A8                          ;*Macro unroll: hCOLON  5,'SAME?',SAMEQ
09A8                          ;*Macro unroll:  hCODE 5, "SAME?", SAMEQ
09A8                          ALIGN   2   
09A8                SAMEQ:       
09A8   00                     NOP      
09A9   CD 3C 06               CALL   doLIST   
09AC   4C 10                  DW   TOR   
09AE   9E 0E D4 09            DW   BRAN,SAME2   
09B2   78 10 D0 0E 94 03 7A 01 B8 0E SAME1:   DW   OVER,RAT,CELLS,PLUS,AT   
09BC   78 10 D0 0E 94 03 7A 01 B8 0E DW   OVER,RAT,CELLS,PLUS,AT   
09C6   B4 01 80 10            DW   SUBB,QDUP   
09CA   92 0E D4 09            DW   QBRAN,SAME2   
09CE   5A 10 6C 10 8A 06      DW   RFROM,DROP,EXIT   ;strings not equal
09D4   96 06 B2 09  SAME2:    DW   DONXT,SAME1   
09D8   4A 06 00 00 8A 06      DW   DOLIT,0,EXIT   ;strings equal
09DE                             ;   find        ( a va -- ca na | a F )
09DE                             ;               Search a vocabulary for a string. Return ca and na if succeeded.
09DE                          ;*Macro unroll: mCOLON  4,'find',FIND
09DE                          ;*Macro unroll:  mCODE 4, "find", FIND
09DE                          ALIGN   2   
09DE                FIND:        
09DE                VVCODE:   .SET   $   
09DE                VVLEN:    .SET   (4 & 01FH) / CELLL   
17EA                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
17EA                VVNAME:   .SET   $   
17EA   DE 09 F8 17            DW   vvCODE,vvLINK   
17EE                VVLINK:   .SET   $   
17EE   04 66 69 6E 64         DB   4,"find"   
09DE                          .ORG   vvCODE   
09DE   00                     NOP      
09DF   CD 3C 06               CALL   doLIST   
09E2   70 10 68 10 C8 0E      DW   SWAP,DUPP,CAT   
09E8   4A 06 02 00 12 03 30 11 AE 0E DW   DOLIT,CELLL,SLASH,TEMP,STORE   
09F2   68 10 B8 0E 4C 10 7C 03 70 10 DW   DUPP,AT,TOR,CELLP,SWAP   
09FC   B8 0E 68 10  FIND1:    DW   AT,DUPP   
0A00   92 0E 2C 0A            DW   QBRAN,FIND6   
0A04   68 10 B8 0E 4A 06 1F 00 5C 01 D0 0E 70 01 DW   DUPP,AT,DOLIT,MASKK,ANDD,RAT,XORR   
0A12   92 0E 20 0A            DW   QBRAN,FIND2   
0A16   7C 03 4A 06 FF FF      DW   CELLP,DOLIT,-1   ;true flag
0A1C   9E 0E 28 0A            DW   BRAN,FIND3   
0A20   7C 03 30 11 B8 0E A8 09 FIND2:   DW   CELLP,TEMP,AT,SAMEQ   
0A28   9E 0E 38 0A  FIND3:    DW   BRAN,FIND4   
0A2C   5A 10 6C 10  FIND6:    DW   RFROM,DROP   
0A30   70 10 88 03 70 10 8A 06 DW   SWAP,CELLM,SWAP,EXIT   
0A38   92 0E 44 0A  FIND4:    DW   QBRAN,FIND5   
0A3C   88 03 88 03            DW   CELLM,CELLM   
0A40   9E 0E FC 09            DW   BRAN,FIND1   
0A44   5A 10 6C 10 70 10 6C 10 FIND5:   DW   RFROM,DROP,SWAP,DROP   
0A4C   88 03                  DW   CELLM   
0A4E   68 10 9C 09 70 10 8A 06 DW   DUPP,NAMET,SWAP,EXIT   
0A56                             ;   NAME?       ( a -- ca na | a F )
0A56                             ;               Search all context vocabularies for a string.
0A56                          ;*Macro unroll: hCOLON  5,'NAME?',NAMEQ
0A56                          ;*Macro unroll:  hCODE 5, "NAME?", NAMEQ
0A56                          ALIGN   2   
0A56                NAMEQ:       
0A56   00                     NOP      
0A57   CD 3C 06               CALL   doLIST   
0A5A   78 11 68 10 1E 0F 70 01 DW   CNTXT,DUPP,DAT,XORR   ;?context=also
0A62   92 0E 68 0A            DW   QBRAN,NAMQ1   
0A66   88 03                  DW   CELLM   ;no, start with context
0A68   4C 10        NAMQ1:    DW   TOR   
0A6A   5A 10 7C 03 68 10 4C 10 NAMQ2:   DW   RFROM,CELLP,DUPP,TOR   ;next in search order
0A72   B8 0E 80 10            DW   AT,QDUP   
0A76   92 0E 88 0A            DW   QBRAN,NAMQ3   
0A7A   DE 09 80 10            DW   FIND,QDUP   ;search vocabulary
0A7E   92 0E 6A 0A            DW   QBRAN,NAMQ2   
0A82   5A 10 6C 10 8A 06      DW   RFROM,DROP,EXIT   ;found name
0A88   5A 10 6C 10  NAMQ3:    DW   RFROM,DROP   ;name not found
0A8C   4A 06 00 00 8A 06      DW   DOLIT,0,EXIT   ;false flag
0A92                             ;   CATCH       ( ca -- 0 | err# )
0A92                             ;               Execute word at ca and set up an error frame for it.
0A92                          ;*Macro unroll: mCOLON  5,'CATCH',CATCH
0A92                          ;*Macro unroll:  mCODE 5, "CATCH", CATCH
0A92                          ALIGN   2   
0A92                CATCH:       
0A92                VVCODE:   .SET   $   
0A92                VVLEN:    .SET   (5 & 01FH) / CELLL   
17E0                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
17E0                VVNAME:   .SET   $   
17E0   92 0A EE 17            DW   vvCODE,vvLINK   
17E4                VVLINK:   .SET   $   
17E4   05 43 41 54 43 48      DB   5,"CATCH"   
0A92                          .ORG   vvCODE   
0A92   00                     NOP      
0A93   CD 3C 06               CALL   doLIST   
0A96   EA 0E 4C 10 70 11 B8 0E 4C 10 DW   SPAT,TOR,HANDL,AT,TOR   ;save error frame
0AA0   DA 0E 70 11 AE 0E 8E 0E DW   RPAT,HANDL,STORE,EXECU   ;execute
0AA8   5A 10 70 11 AE 0E      DW   RFROM,HANDL,STORE   ;reSTORE error frame
0AAE   5A 10 6C 10 4A 06 00 00 8A 06 DW   RFROM,DROP,DOLIT,0,EXIT   ;no error
0AB8                             ;   THROW       ( err# -- err# )
0AB8                             ;               Reset system to current local error frame an update error flag.
0AB8                          ;*Macro unroll: mCOLON  5,'THROW',THROW
0AB8                          ;*Macro unroll:  mCODE 5, "THROW", THROW
0AB8                          ALIGN   2   
0AB8                THROW:       
0AB8                VVCODE:   .SET   $   
0AB8                VVLEN:    .SET   (5 & 01FH) / CELLL   
17D6                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
17D6                VVNAME:   .SET   $   
17D6   B8 0A E4 17            DW   vvCODE,vvLINK   
17DA                VVLINK:   .SET   $   
17DA   05 54 48 52 4F 57      DB   5,"THROW"   
0AB8                          .ORG   vvCODE   
0AB8   00                     NOP      
0AB9   CD 3C 06               CALL   doLIST   
0ABC   70 11 B8 0E E2 0E      DW   HANDL,AT,RPSTO   ;reSTORE return stack
0AC2   5A 10 70 11 AE 0E      DW   RFROM,HANDL,STORE   ;reSTORE handler frame
0AC8   5A 10 70 10 4C 10 F4 0E DW   RFROM,SWAP,TOR,SPSTO   ;reSTORE data stack
0AD0   6C 10 5A 10 8A 06      DW   DROP,RFROM,EXIT   
0AD6                             ;   NULL$       ( -- a )
0AD6                             ;               Return address of a null string with zero count.
0AD6                          ;*Macro unroll: hCOLON  5,'NULL$',NULLS
0AD6                          ;*Macro unroll:  hCODE 5, "NULL$", NULLS
0AD6                          ALIGN   2   
0AD6                NULLS:       
0AD6   00                     NOP      
0AD7   CD 3C 06               CALL   doLIST   
0ADA   52 06                  DW   DOVAR   ;emulate CREATE
0ADC   00 00                  DW   0   
0ADE   63 6F 79 6F 74 65      DB   99,111,121,111,116,101   
0AE4                          ALIGN   2   
0AE4                             ;   ABORT       ( -- )
0AE4                             ;               Reset data stack and jump to QUIT.
0AE4                          ;*Macro unroll: mCOLON  5,'ABORT',ABORT
0AE4                          ;*Macro unroll:  mCODE 5, "ABORT", ABORT
0AE4                          ALIGN   2   
0AE4                ABORT:       
0AE4                VVCODE:   .SET   $   
0AE4                VVLEN:    .SET   (5 & 01FH) / CELLL   
17CC                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
17CC                VVNAME:   .SET   $   
17CC   E4 0A DA 17            DW   vvCODE,vvLINK   
17D0                VVLINK:   .SET   $   
17D0   05 41 42 4F 52 54      DB   5,"ABORT"   
0AE4                          .ORG   vvCODE   
0AE4   00                     NOP      
0AE5   CD 3C 06               CALL   doLIST   
0AE8   D6 0A B8 0A            DW   NULLS,THROW   
0AEC                             ;   abort"      ( f -- )
0AEC                             ;               Run time routine of ABORT" . Abort with a message.
0AEC                          ;*Macro unroll: hCOLON  COMPO+6,'abort|',ABORQ
0AEC                          ;*Macro unroll:  hCODE COMPO+6, "abort|", ABORQ
0AEC                          ALIGN   2   
0AEC                ABORQ:       
0AEC   00                     NOP      
0AED   CD 3C 06               CALL   doLIST   
0AF0   92 0E F8 0A            DW   QBRAN,ABOR1   ;text flag
0AF4   72 06 B8 0A            DW   DOSTR,THROW   ;pass error string
0AF8                ABOR1:       
0AF8   72 06 6C 10 8A 06      DW   DOSTR,DROP,EXIT   ;drop error
0AFE                             ;   $INTERPRET  ( a -- )
0AFE                             ;               Interpret a word. If failed, try to convert it to an integer.
0AFE                          ;*Macro unroll: hCOLON  10,'$INTERPRET',INTER
0AFE                          ;*Macro unroll:  hCODE 10, "$INTERPRET", INTER
0AFE                          ALIGN   2   
0AFE                INTER:       
0AFE   00                     NOP      
0AFF   CD 3C 06               CALL   doLIST   
0B02   56 0A 80 10            DW   NAMEQ,QDUP   ;?defined
0B06   92 0E 26 0B            DW   QBRAN,INTE1   
0B0A   B8 0E 4A 06 20 00 5C 01 DW   AT,DOLIT,COMPO,ANDD   ;?compile only lexicon bits
0B12                          ;*Macro unroll:  mDSTR   ABORQ,' compile only'
0B12   EC 0A                  DW   ABORQ   
0B14                VVLEN:    .SET   $   
0B14   00 20 63 6F 6D 70 69 6C 65 20 6F 6E 6C 79 DB   0," compile only"   
0B22                VVCODE:   .SET   $   
0B14                          .ORG   vvLEN   
0B14   0D                     DB   vvCODE - vvLEN - 1   
0B22                          .ORG   vvCODE   
0B22   8E 0E 8A 06            DW   EXECU,EXIT   ;execute defined word
0B26                INTE1:       
0B26   60 11 64 0F            DW   TNUMB,ATEXE   ;convert a number
0B2A   92 0E 30 0B            DW   QBRAN,INTE2   
0B2E   8A 06                  DW   EXIT   
0B30                INTE2:       
0B30   B8 0A                  DW   THROW   ;error
0B32                             ;   [           ( -- )
0B32                             ;               Start the text interpreter.
0B32                          ;*Macro unroll: mCOLON  IMEDD+1,'[',LBRAC
0B32                          ;*Macro unroll:  mCODE IMEDD+1, "[", LBRAC
0B32                          ALIGN   2   
0B32                LBRAC:       
0B32                VVCODE:   .SET   $   
0B32                VVLEN:    .SET   (IMEDD+1 & 01FH) / CELLL   
1786                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1786                VVNAME:   .SET   $   
1786   32 0B D0 17            DW   vvCODE,vvLINK   
178A                VVLINK:   .SET   $   
178A   41 5B                  DB   IMEDD+1,"["   
0B32                          .ORG   vvCODE   
0B32   00                     NOP      
0B33   CD 3C 06               CALL   doLIST   
0B36   4A 06 FE 0A 58 11 AE 0E 8A 06 DW   DOLIT,INTER,TEVAL,STORE,EXIT   
0B40                             ;   .OK         ( -- )
0B40                             ;               Display "ok" only while interpreting.
0B40                          ;*Macro unroll: mCOLON  3,'.OK',DOTOK
0B40                          ;*Macro unroll:  mCODE 3, ".OK", DOTOK
0B40                          ALIGN   2   
0B40                DOTOK:       
0B40                VVCODE:   .SET   $   
0B40                VVLEN:    .SET   (3 & 01FH) / CELLL   
177E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
177E                VVNAME:   .SET   $   
177E   40 0B 8A 17            DW   vvCODE,vvLINK   
1782                VVLINK:   .SET   $   
1782   03 2E 4F 4B            DB   3,".OK"   
0B40                          .ORG   vvCODE   
0B40   00                     NOP      
0B41   CD 3C 06               CALL   doLIST   
0B44   4A 06 FE 0A 58 11 B8 0E CE 01 DW   DOLIT,INTER,TEVAL,AT,EQUAL   
0B4E   92 0E 58 0B            DW   QBRAN,DOTO1   
0B52                          ;*Macro unroll:  mDSTR      DOTQP,' ok'
0B52   96 0C                  DW   DOTQP   
0B54                VVLEN:    .SET   $   
0B54   00 20 6F 6B            DB   0," ok"   
0B58                VVCODE:   .SET   $   
0B54                          .ORG   vvLEN   
0B54   03                     DB   vvCODE - vvLEN - 1   
0B58                          .ORG   vvCODE   
0B58   7C 0C 8A 06  DOTO1:    DW   CR,EXIT   
0B5C                             ;   ?STACK      ( -- )
0B5C                             ;               Abort if the data stack underflows.
0B5C                          ;*Macro unroll: hCOLON  6,'?STACK',QSTAC
0B5C                          ;*Macro unroll:  hCODE 6, "?STACK", QSTAC
0B5C                          ALIGN   2   
0B5C                QSTAC:       
0B5C   00                     NOP      
0B5D   CD 3C 06               CALL   doLIST   
0B60   D2 10 54 01            DW   DEPTH,ZLESS   ;check only for underflow
0B64                          ;*Macro unroll:  mDSTR      ABORQ,' underflow'
0B64   EC 0A                  DW   ABORQ   
0B66                VVLEN:    .SET   $   
0B66   00 20 75 6E 64 65 72 66 6C 6F 77 DB   0," underflow"   
0B71                VVCODE:   .SET   $   
0B66                          .ORG   vvLEN   
0B66   0A                     DB   vvCODE - vvLEN - 1   
0B71                          .ORG   vvCODE   
0B71   8A 06                  DW   EXIT   
0B73                             ;   EVAL        ( -- )
0B73                             ;               Interpret the input stream.
0B73                          ;*Macro unroll: mCOLON  4,'EVAL',EVAL
0B73                          ;*Macro unroll:  mCODE 4, "EVAL", EVAL
0B73                          ALIGN   2   
0B74                EVAL:        
0B74                VVCODE:   .SET   $   
0B74                VVLEN:    .SET   (4 & 01FH) / CELLL   
1774                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1774                VVNAME:   .SET   $   
1774   74 0B 82 17            DW   vvCODE,vvLINK   
1778                VVLINK:   .SET   $   
1778   04 45 56 41 4C         DB   4,"EVAL"   
0B74                          .ORG   vvCODE   
0B74   00                     NOP      
0B75   CD 3C 06               CALL   doLIST   
0B78                EVAL1:       
0B78   74 09 68 10 C8 0E      DW   TOKEN,DUPP,CAT   ;?input stream empty
0B7E   92 0E 8C 0B            DW   QBRAN,EVAL2   
0B82   58 11 64 0F 5C 0B      DW   TEVAL,ATEXE,QSTAC   ;evaluate input, check stack
0B88   9E 0E 78 0B            DW   BRAN,EVAL1   
0B8C                EVAL2:       
0B8C   6C 10 20 11 64 0F 8A 06 DW   DROP,TPROM,ATEXE,EXIT   ;prompt
0B94                             ;   PC!         ( uc p --  )
0B94                             ;               output uc to IO port p
0B94                          ;*Macro unroll: mCODE   3,'PC!',PCSTO
0B94                          ALIGN   2   
0B94                PCSTO:       
0B94                VVCODE:   .SET   $   
0B94                VVLEN:    .SET   (3 & 01FH) / CELLL   
176C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
176C                VVNAME:   .SET   $   
176C   94 0B 78 17            DW   vvCODE,vvLINK   
1770                VVLINK:   .SET   $   
1770   03 50 43 21            DB   3,"PC!"   
0B94                          .ORG   vvCODE   
0B94   D9                     EXX      ; 4t
0B95   D1                     POP   DE   ;10t
0B96   7B                     LD   A,E   ; 4t
0B97   ED 79                  OUT   (C),A   ;12t
0B99   D9                     EXX      ; 4t
0B9A                          ;*Macro unroll:  mNEXT
0B9A   EB                     EX   DE,HL   
0B9B   FD E9                  JP   (IY)   
0B9D                             ;   PC@         ( p -- uc )
0B9D                             ;               output uc to IO port p
0B9D                          ;*Macro unroll: mCODE   3,'PC@',PCAT
0B9D                          ALIGN   2   
0B9E                PCAT:        
0B9E                VVCODE:   .SET   $   
0B9E                VVLEN:    .SET   (3 & 01FH) / CELLL   
1764                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1764                VVNAME:   .SET   $   
1764   9E 0B 70 17            DW   vvCODE,vvLINK   
1768                VVLINK:   .SET   $   
1768   03 50 43 40            DB   3,"PC@"   
0B9E                          .ORG   vvCODE   
0B9E   D9                     EXX      ; 4t
0B9F   ED 78                  IN   A,(C)   ;12t
0BA1   5F                     LD   E,A   ; 4t
0BA2   16 00                  LD   D,0   ; 7t
0BA4   D5                     PUSH   DE   ;11t
0BA5   D9                     EXX      ; 4t
0BA6                          ;*Macro unroll:  mNEXT
0BA6   EB                     EX   DE,HL   
0BA7   FD E9                  JP   (IY)   
0BA9                             ;   !IO         ( -- )
0BA9                             ;               Initialize the serial I/O devices.
0BA9                          ;*Macro unroll: mCODE   3,'!IO', STOIO ;
0BA9                          ALIGN   2   ; 
0BAA                STOIO:       
0BAA                VVCODE:   .SET   $   
0BAA                VVLEN:    .SET   (3 & 01FH) / CELLL   
175C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
175C                VVNAME:   .SET   $   
175C   AA 0B 68 17            DW   vvCODE,vvLINK   
1760                VVLINK:   .SET   $   
1760   03 21 49 4F            DB   3,"!IO"   
0BAA                          .ORG   vvCODE   
0BAA   CD D1 00               CALL   INIT_IO   
0BAD                          ;*Macro unroll:  mNEXT
0BAD   EB                     EX   DE,HL   
0BAE   FD E9                  JP   (IY)   
0BB0                             ;   ?RX         ( -- c T | F )
0BB0                             ;               Return input character and true, or a false if no input.
0BB0                          ;*Macro unroll: mCODE	3, '?RX', QRX
0BB0                          ALIGN   2   
0BB0                QRX:         
0BB0                VVCODE:   .SET   $   
0BB0                VVLEN:    .SET   (3 & 01FH) / CELLL   
1754                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1754                VVNAME:   .SET   $   
1754   B0 0B 60 17            DW   vvCODE,vvLINK   
1758                VVLINK:   .SET   $   
1758   03 3F 52 58            DB   3,"?RX"   
0BB0                          .ORG   vvCODE   
0BB0   C5                     PUSH   BC   
0BB1   CD 14 01               CALL   QRXA   
0BB4   20 05                  JR   nz,QRX1   
0BB6   01 00 00               LD   BC,FALSEE   
0BB9   18 0A                  JR   QRX2   
0BBB                QRX1:        
0BBB   CD E5 00               CALL   RXA   
0BBE   4F                     LD   C,A   
0BBF   06 00                  LD   B,0   
0BC1   C5                     PUSH   BC   
0BC2   01 FF FF               LD   BC,TRUEE   
0BC5                QRX2:        
0BC5                          ;*Macro unroll:  mNEXT
0BC5   EB                     EX   DE,HL   
0BC6   FD E9                  JP   (IY)   
0BC8                             ;   TX!         ( c -- )
0BC8                             ;               Send character c to the output device.
0BC8                          ;*Macro unroll: mCODE	3,'TX!',TXSTO
0BC8                          ALIGN   2   
0BC8                TXSTO:       
0BC8                VVCODE:   .SET   $   
0BC8                VVLEN:    .SET   (3 & 01FH) / CELLL   
174C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
174C                VVNAME:   .SET   $   
174C   C8 0B 58 17            DW   vvCODE,vvLINK   
1750                VVLINK:   .SET   $   
1750   03 54 58 21            DB   3,"TX!"   
0BC8                          .ORG   vvCODE   
0BC8   79                     LD   A,C   
0BC9   CD 09 01               CALL   TXA   
0BCC   C1                     POP   BC   
0BCD                          ;*Macro unroll:  mNEXT
0BCD   EB                     EX   DE,HL   
0BCE   FD E9                  JP   (IY)   
0BD0                             ;   ?KEY        ( -- c T | F )
0BD0                             ;               Return input character and true, or a false if no input.
0BD0                          ;*Macro unroll: mCOLON  4,'?KEY',QKEY
0BD0                          ;*Macro unroll:  mCODE 4, "?KEY", QKEY
0BD0                          ALIGN   2   
0BD0                QKEY:        
0BD0                VVCODE:   .SET   $   
0BD0                VVLEN:    .SET   (4 & 01FH) / CELLL   
1742                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1742                VVNAME:   .SET   $   
1742   D0 0B 50 17            DW   vvCODE,vvLINK   
1746                VVLINK:   .SET   $   
1746   04 3F 4B 45 59         DB   4,"?KEY"   
0BD0                          .ORG   vvCODE   
0BD0   00                     NOP      
0BD1   CD 3C 06               CALL   doLIST   
0BD4   F8 10 B8 0E 8E 0E 8A 06 DW   TQKEY,AT,EXECU,EXIT   
0BDC                             ;   KEY         ( -- c )
0BDC                             ;               Wait for and return an input character.
0BDC                          ;*Macro unroll: mCOLON  3,'KEY',KEY
0BDC                          ;*Macro unroll:  mCODE 3, "KEY", KEY
0BDC                          ALIGN   2   
0BDC                KEY:         
0BDC                VVCODE:   .SET   $   
0BDC                VVLEN:    .SET   (3 & 01FH) / CELLL   
173A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
173A                VVNAME:   .SET   $   
173A   DC 0B 46 17            DW   vvCODE,vvLINK   
173E                VVLINK:   .SET   $   
173E   03 4B 45 59            DB   3,"KEY"   
0BDC                          .ORG   vvCODE   
0BDC   00                     NOP      
0BDD   CD 3C 06               CALL   doLIST   
0BE0                KEY1:        
0BE0   D0 0B                  DW   QKEY   
0BE2   68 10 92 0E E8 0B      DW   DUPP,QBRAN,KEY2   
0BE8                             ; DW DOLIT, $22, EMIT
0BE8                KEY2:        
0BE8   92 0E E0 0B            DW   QBRAN,KEY1   
0BEC   8A 06                  DW   EXIT   
0BEE                             ;   EMIT        ( c -- )
0BEE                             ;               Send a character to the output device.
0BEE                          ;*Macro unroll: mCOLON  4, 'EMIT', EMIT
0BEE                          ;*Macro unroll:  mCODE 4, "EMIT", EMIT
0BEE                          ALIGN   2   
0BEE                EMIT:        
0BEE                VVCODE:   .SET   $   
0BEE                VVLEN:    .SET   (4 & 01FH) / CELLL   
1730                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1730                VVNAME:   .SET   $   
1730   EE 0B 3E 17            DW   vvCODE,vvLINK   
1734                VVLINK:   .SET   $   
1734   04 45 4D 49 54         DB   4,"EMIT"   
0BEE                          .ORG   vvCODE   
0BEE   00                     NOP      
0BEF   CD 3C 06               CALL   doLIST   
0BF2   00 11 B8 0E 8E 0E 8A 06 DW   TEMIT,AT,EXECU,EXIT   
0BFA                             ;   NUF?        ( -- t )
0BFA                             ;               Return false if no input, else pause and if CR return true.
0BFA                          ;*Macro unroll: mCOLON  4,'NUF?',NUFQ
0BFA                          ;*Macro unroll:  mCODE 4, "NUF?", NUFQ
0BFA                          ALIGN   2   
0BFA                NUFQ:        
0BFA                VVCODE:   .SET   $   
0BFA                VVLEN:    .SET   (4 & 01FH) / CELLL   
1726                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1726                VVNAME:   .SET   $   
1726   FA 0B 34 17            DW   vvCODE,vvLINK   
172A                VVLINK:   .SET   $   
172A   04 4E 55 46 3F         DB   4,"NUF?"   
0BFA                          .ORG   vvCODE   
0BFA   00                     NOP      
0BFB   CD 3C 06               CALL   doLIST   
0BFE   D0 0B 68 10            DW   QKEY,DUPP   
0C02   92 0E 10 0C            DW   QBRAN,NUFQ1   
0C06   9C 10 DC 0B 4A 06 0D 00 CE 01 DW   DDROP,KEY,DOLIT,CRR,EQUAL   
0C10                NUFQ1:       
0C10   8A 06                  DW   EXIT   
0C12                             ;   PACE        ( -- )
0C12                             ;               Send a pace character for the file downloading process.
0C12                          ;*Macro unroll: hCOLON  4,'PACE',PACE
0C12                          ;*Macro unroll:  hCODE 4, "PACE", PACE
0C12                          ALIGN   2   
0C12                PACE:        
0C12   00                     NOP      
0C13   CD 3C 06               CALL   doLIST   
0C16   4A 06 0B 00 EE 0B 8A 06 DW   DOLIT,11,EMIT,EXIT   
0C1E                             ;   SPACE       ( -- )
0C1E                             ;               Send the blank character to the output device.
0C1E                          ;*Macro unroll: mCOLON  5,'SPACE',SPACE
0C1E                          ;*Macro unroll:  mCODE 5, "SPACE", SPACE
0C1E                          ALIGN   2   
0C1E                SPACE:       
0C1E                VVCODE:   .SET   $   
0C1E                VVLEN:    .SET   (5 & 01FH) / CELLL   
171C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
171C                VVNAME:   .SET   $   
171C   1E 0C 2A 17            DW   vvCODE,vvLINK   
1720                VVLINK:   .SET   $   
1720   05 53 50 41 43 45      DB   5,"SPACE"   
0C1E                          .ORG   vvCODE   
0C1E   00                     NOP      
0C1F   CD 3C 06               CALL   doLIST   
0C22   7E 07 EE 0B 8A 06      DW   BLANK,EMIT,EXIT   
0C28                             ;   SPACES      ( +n -- )
0C28                             ;               Send n spaces to the output device.
0C28                          ;*Macro unroll: mCOLON  6,'SPACES',SPACS
0C28                          ;*Macro unroll:  mCODE 6, "SPACES", SPACS
0C28                          ALIGN   2   
0C28                SPACS:       
0C28                VVCODE:   .SET   $   
0C28                VVLEN:    .SET   (6 & 01FH) / CELLL   
1710                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1710                VVNAME:   .SET   $   
1710   28 0C 20 17            DW   vvCODE,vvLINK   
1714                VVLINK:   .SET   $   
1714   06 53 50 41 43 45 53   DB   6,"SPACES"   
0C28                          .ORG   vvCODE   
0C28   00                     NOP      
0C29   CD 3C 06               CALL   doLIST   
0C2C   4A 06 00 00 1A 02 4C 10 DW   DOLIT,0,MAX,TOR   
0C34   9E 0E 3A 0C            DW   BRAN,CHAR2   
0C38                CHAR1:       
0C38   1E 0C                  DW   SPACE   
0C3A                CHAR2:       
0C3A   96 06 38 0C            DW   DONXT,CHAR1   
0C3E   8A 06                  DW   EXIT   
0C40                             ;   TYPE        ( b u -- )
0C40                             ;               Output u characters from b.
0C40                          ;*Macro unroll: mCOLON	4,'TYPE',TYPEE
0C40                          ;*Macro unroll:  mCODE 4, "TYPE", TYPEE
0C40                          ALIGN   2   
0C40                TYPEE:       
0C40                VVCODE:   .SET   $   
0C40                VVLEN:    .SET   (4 & 01FH) / CELLL   
1706                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1706                VVNAME:   .SET   $   
1706   40 0C 14 17            DW   vvCODE,vvLINK   
170A                VVLINK:   .SET   $   
170A   04 54 59 50 45         DB   4,"TYPE"   
0C40                          .ORG   vvCODE   
0C40   00                     NOP      
0C41   CD 3C 06               CALL   doLIST   
0C44   4C 10                  DW   TOR   
0C46   9E 0E 56 0C            DW   BRAN,TYPE2   
0C4A                TYPE1:       
0C4A   68 10 C8 0E EE 0B      DW   DUPP,CAT,EMIT   
0C50   4A 06 01 00 7A 01      DW   DOLIT,1,PLUS   
0C56                TYPE2:       
0C56   96 06 4A 0C            DW   DONXT,TYPE1   
0C5A   6C 10 8A 06            DW   DROP,EXIT   
0C5E                             ;   TYPEZ    ( cstr -- )
0C5E                             ;   Similar to TYPE but prints C null terminated strings
0C5E                          ;*Macro unroll: mCOLON	4,'TYPEZ',TYPEZ
0C5E                          ;*Macro unroll:  mCODE 4, "TYPEZ", TYPEZ
0C5E                          ALIGN   2   
0C5E                TYPEZ:       
0C5E                VVCODE:   .SET   $   
0C5E                VVLEN:    .SET   (4 & 01FH) / CELLL   
16FC                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
16FC                VVNAME:   .SET   $   
16FC   5E 0C 0A 17            DW   vvCODE,vvLINK   
1700                VVLINK:   .SET   $   
1700   04 54 59 50 45 5A      DB   4,"TYPEZ"   
0C5E                          .ORG   vvCODE   
0C5E   00                     NOP      
0C5F   CD 3C 06               CALL   doLIST   
0C62                TYPEZ1:      
0C62   68 10 C8 0E            DW   DUPP,CAT   
0C66   68 10 92 0E 78 0C      DW   DUPP,QBRAN,TYPEZ2   
0C6C   EE 0B                  DW   EMIT   
0C6E   4A 06 01 00 7A 01      DW   DOLIT,1,PLUS   
0C74   9E 0E 62 0C            DW   BRAN,TYPEZ1   
0C78                TYPEZ2:      
0C78   6C 10 8A 06            DW   DROP,EXIT   
0C7C                             ;   CR          ( -- )
0C7C                             ;               Output a carriage return and a line feed.
0C7C                          ;*Macro unroll: mCOLON	2,'CR',CR
0C7C                          ;*Macro unroll:  mCODE 2, "CR", CR
0C7C                          ALIGN   2   
0C7C                CR:          
0C7C                VVCODE:   .SET   $   
0C7C                VVLEN:    .SET   (2 & 01FH) / CELLL   
16F4                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
16F4                VVNAME:   .SET   $   
16F4   7C 0C 00 17            DW   vvCODE,vvLINK   
16F8                VVLINK:   .SET   $   
16F8   02 43 52               DB   2,"CR"   
0C7C                          .ORG   vvCODE   
0C7C   00                     NOP      
0C7D   CD 3C 06               CALL   doLIST   
0C80   4A 06 0D 00 EE 0B 4A 06 0A 00 EE 0B 8A 06 DW   DOLIT,CRR,EMIT,DOLIT,LFF,EMIT,EXIT   
0C8E                             ;   $"|         ( -- a )
0C8E                             ;               Run time routine compiled by $". Return address of a compiled string.
0C8E                          ;*Macro unroll: hCOLON  COMPO+3,'$||',STRQP
0C8E                          ;*Macro unroll:  hCODE COMPO+3, "$||", STRQP
0C8E                          ALIGN   2   
0C8E                STRQP:       
0C8E   00                     NOP      
0C8F   CD 3C 06               CALL   doLIST   
0C92   72 06 8A 06            DW   DOSTR,EXIT   ;force a call to do$
0C96                             ;   ."|         ( -- )
0C96                             ;               Run time routine of ." . Output a compiled string.
0C96                          ;*Macro unroll: hCOLON  COMPO+3,'.||',DOTQP
0C96                          ;*Macro unroll:  hCODE COMPO+3, ".||", DOTQP
0C96                          ALIGN   2   
0C96                DOTQP:       
0C96   00                     NOP      
0C97   CD 3C 06               CALL   doLIST   
0C9A   72 06 2E 0F 40 0C 8A 06 DW   DOSTR,COUNT,TYPEE,EXIT   
0CA2                             ;   .R          ( n +n -- )
0CA2                             ;               Display an integer in a field of n columns, right justified.
0CA2                          ;*Macro unroll: mCOLON  2,'.R',DOTR
0CA2                          ;*Macro unroll:  mCODE 2, ".R", DOTR
0CA2                          ALIGN   2   
0CA2                DOTR:        
0CA2                VVCODE:   .SET   $   
0CA2                VVLEN:    .SET   (2 & 01FH) / CELLL   
16EC                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
16EC                VVNAME:   .SET   $   
16EC   A2 0C F8 16            DW   vvCODE,vvLINK   
16F0                VVLINK:   .SET   $   
16F0   02 2E 52               DB   2,".R"   
0CA2                          .ORG   vvCODE   
0CA2   00                     NOP      
0CA3   CD 3C 06               CALL   doLIST   
0CA6   4C 10 4C 07 5A 10 78 10 B4 01 DW   TOR,STR,RFROM,OVER,SUBB   
0CB0   28 0C 40 0C 8A 06      DW   SPACS,TYPEE,EXIT   
0CB6                             ;   U.R         ( u +n -- )
0CB6                             ;               Display an unsigned integer in n column, right justified.
0CB6                          ;*Macro unroll: mCOLON  3,'U.R',UDOTR
0CB6                          ;*Macro unroll:  mCODE 3, "U.R", UDOTR
0CB6                          ALIGN   2   
0CB6                UDOTR:       
0CB6                VVCODE:   .SET   $   
0CB6                VVLEN:    .SET   (3 & 01FH) / CELLL   
16E4                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
16E4                VVNAME:   .SET   $   
16E4   B6 0C F0 16            DW   vvCODE,vvLINK   
16E8                VVLINK:   .SET   $   
16E8   03 55 2E 52            DB   3,"U.R"   
0CB6                          .ORG   vvCODE   
0CB6   00                     NOP      
0CB7   CD 3C 06               CALL   doLIST   
0CBA   4C 10 E4 06 16 07 3A 07 DW   TOR,BDIGS,DIGS,EDIGS   
0CC2   5A 10 78 10 B4 01      DW   RFROM,OVER,SUBB   
0CC8   28 0C 40 0C 8A 06      DW   SPACS,TYPEE,EXIT   
0CCE                             ;   U.          ( u -- )
0CCE                             ;               Display an unsigned integer in free format.
0CCE                          ;*Macro unroll: mCOLON  2,'U.',UDOT
0CCE                          ;*Macro unroll:  mCODE 2, "U.", UDOT
0CCE                          ALIGN   2   
0CCE                UDOT:        
0CCE                VVCODE:   .SET   $   
0CCE                VVLEN:    .SET   (2 & 01FH) / CELLL   
16DC                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
16DC                VVNAME:   .SET   $   
16DC   CE 0C E8 16            DW   vvCODE,vvLINK   
16E0                VVLINK:   .SET   $   
16E0   02 55 2E               DB   2,"U."   
0CCE                          .ORG   vvCODE   
0CCE   00                     NOP      
0CCF   CD 3C 06               CALL   doLIST   
0CD2   E4 06 16 07 3A 07      DW   BDIGS,DIGS,EDIGS   
0CD8   1E 0C 40 0C 8A 06      DW   SPACE,TYPEE,EXIT   
0CDE                             ;   .           ( w -- )
0CDE                             ;               Display an integer in free format, preceeded by a space.
0CDE                          ;*Macro unroll: mCOLON  1,'.',DOT
0CDE                          ;*Macro unroll:  mCODE 1, ".", DOT
0CDE                          ALIGN   2   
0CDE                DOT:         
0CDE                VVCODE:   .SET   $   
0CDE                VVLEN:    .SET   (1 & 01FH) / CELLL   
16D6                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
16D6                VVNAME:   .SET   $   
16D6   DE 0C E0 16            DW   vvCODE,vvLINK   
16DA                VVLINK:   .SET   $   
16DA   01 2E                  DB   1,"."   
0CDE                          .ORG   vvCODE   
0CDE   00                     NOP      
0CDF   CD 3C 06               CALL   doLIST   
0CE2   28 11 B8 0E 4A 06 0A 00 70 01 DW   BASE,AT,DOLIT,10,XORR   ;?decimal
0CEC   92 0E F4 0C            DW   QBRAN,DOT1   
0CF0   CE 0C 8A 06            DW   UDOT,EXIT   ;no, display unsigned
0CF4                DOT1:        
0CF4   4C 07 1E 0C 40 0C 8A 06 DW   STR,SPACE,TYPEE,EXIT   ;yes, display signed
0CFC                             ;   .(          ( -- )
0CFC                             ;               Output following string up to next ) .
0CFC                          ;*Macro unroll: mCOLON  IMEDD+2,'.(',DOTPR
0CFC                          ;*Macro unroll:  mCODE IMEDD+2, ".(", DOTPR
0CFC                          ALIGN   2   
0CFC                DOTPR:       
0CFC                VVCODE:   .SET   $   
0CFC                VVLEN:    .SET   (IMEDD+2 & 01FH) / CELLL   
168E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
168E                VVNAME:   .SET   $   
168E   FC 0C DA 16            DW   vvCODE,vvLINK   
1692                VVLINK:   .SET   $   
1692   42 2E 28               DB   IMEDD+2,".("   
0CFC                          .ORG   vvCODE   
0CFC   00                     NOP      
0CFD   CD 3C 06               CALL   doLIST   
0D00   4A 06 29 00 28 09 40 0C 8A 06 DW   DOLIT,$29,PARSE,TYPEE,EXIT   ; $29 = ")"
0D0A                             ;   ?           ( a -- )
0D0A                             ;               Display the contents in a memory cell.
0D0A                          ;*Macro unroll: mCOLON  1,'?',QUEST
0D0A                          ;*Macro unroll:  mCODE 1, "?", QUEST
0D0A                          ALIGN   2   
0D0A                QUEST:       
0D0A                VVCODE:   .SET   $   
0D0A                VVLEN:    .SET   (1 & 01FH) / CELLL   
1688                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1688                VVNAME:   .SET   $   
1688   0A 0D 92 16            DW   vvCODE,vvLINK   
168C                VVLINK:   .SET   $   
168C   01 3F                  DB   1,"?"   
0D0A                          .ORG   vvCODE   
0D0A   00                     NOP      
0D0B   CD 3C 06               CALL   doLIST   
0D0E   B8 0E DE 0C 8A 06      DW   AT,DOT,EXIT   
0D14                             ;   ^H          ( bot eot cur -- bot eot cur )
0D14                             ;               Backup the cursor by one character.
0D14                          ;*Macro unroll: mCOLON  2,'^H',BKSP
0D14                          ;*Macro unroll:  mCODE 2, "^H", BKSP
0D14                          ALIGN   2   
0D14                BKSP:        
0D14                VVCODE:   .SET   $   
0D14                VVLEN:    .SET   (2 & 01FH) / CELLL   
1680                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1680                VVNAME:   .SET   $   
1680   14 0D 8C 16            DW   vvCODE,vvLINK   
1684                VVLINK:   .SET   $   
1684   02 5E 48               DB   2,"^H"   
0D14                          .ORG   vvCODE   
0D14   00                     NOP      
0D15   CD 3C 06               CALL   doLIST   
0D18   4C 10 78 10 5A 10 70 10 78 10 70 01 DW   TOR,OVER,RFROM,SWAP,OVER,XORR   
0D24   92 0E 44 0D            DW   QBRAN,BACK1   
0D28   4A 06 08 00 18 11 64 0F 4A 06 01 00 B4 01 DW   DOLIT,BKSPP,TECHO,ATEXE,DOLIT,1,SUBB   
0D36   7E 07 18 11 64 0F      DW   BLANK,TECHO,ATEXE   
0D3C   4A 06 08 00 18 11 64 0F DW   DOLIT,BKSPP,TECHO,ATEXE   
0D44                BACK1:       
0D44   8A 06                  DW   EXIT   
0D46                             ;   TAP         ( bot eot cur c -- bot eot cur )
0D46                             ;               Accept and echo the key stroke and bump the cursor.
0D46                          ;*Macro unroll: mCOLON  3,'TAP',TAP
0D46                          ;*Macro unroll:  mCODE 3, "TAP", TAP
0D46                          ALIGN   2   
0D46                TAP:         
0D46                VVCODE:   .SET   $   
0D46                VVLEN:    .SET   (3 & 01FH) / CELLL   
1678                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1678                VVNAME:   .SET   $   
1678   46 0D 84 16            DW   vvCODE,vvLINK   
167C                VVLINK:   .SET   $   
167C   03 54 41 50            DB   3,"TAP"   
0D46                          .ORG   vvCODE   
0D46   00                     NOP      
0D47   CD 3C 06               CALL   doLIST   
0D4A   68 10 18 11 64 0F      DW   DUPP,TECHO,ATEXE   
0D50   78 10 C0 0E 4A 06 01 00 7A 01 8A 06 DW   OVER,CSTOR,DOLIT,1,PLUS,EXIT   
0D5C                             ;   kTAP        ( bot eot cur c -- bot eot cur )
0D5C                             ;               Process a key stroke, CR or backspace.
0D5C                          ;*Macro unroll: mCOLON  4,'kTAP',KTAP
0D5C                          ;*Macro unroll:  mCODE 4, "kTAP", KTAP
0D5C                          ALIGN   2   
0D5C                KTAP:        
0D5C                VVCODE:   .SET   $   
0D5C                VVLEN:    .SET   (4 & 01FH) / CELLL   
166E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
166E                VVNAME:   .SET   $   
166E   5C 0D 7C 16            DW   vvCODE,vvLINK   
1672                VVLINK:   .SET   $   
1672   04 6B 54 41 50         DB   4,"kTAP"   
0D5C                          .ORG   vvCODE   
0D5C   00                     NOP      
0D5D   CD 3C 06               CALL   doLIST   
0D60   68 10 4A 06 0D 00 70 01 DW   DUPP,DOLIT,CRR,XORR   
0D68   92 0E 80 0D            DW   QBRAN,KTAP2   
0D6C   4A 06 08 00 70 01      DW   DOLIT,BKSPP,XORR   
0D72   92 0E 7C 0D            DW   QBRAN,KTAP1   
0D76   7E 07 46 0D 8A 06      DW   BLANK,TAP,EXIT   
0D7C                KTAP1:       
0D7C   14 0D 8A 06            DW   BKSP,EXIT   
0D80                KTAP2:       
0D80   6C 10 70 10 6C 10 68 10 8A 06 DW   DROP,SWAP,DROP,DUPP,EXIT   
0D8A                             ;   accept      ( b u -- b u )
0D8A                             ;               Accept characters to input buffer. Return with actual count.
0D8A                          ;*Macro unroll: mCOLON  6,'accept',ACCEP
0D8A                          ;*Macro unroll:  mCODE 6, "accept", ACCEP
0D8A                          ALIGN   2   
0D8A                ACCEP:       
0D8A                VVCODE:   .SET   $   
0D8A                VVLEN:    .SET   (6 & 01FH) / CELLL   
1662                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1662                VVNAME:   .SET   $   
1662   8A 0D 72 16            DW   vvCODE,vvLINK   
1666                VVLINK:   .SET   $   
1666   06 61 63 63 65 70 74   DB   6,"accept"   
0D8A                          .ORG   vvCODE   
0D8A   00                     NOP      
0D8B   CD 3C 06               CALL   doLIST   
0D8E   78 10 7A 01 78 10      DW   OVER,PLUS,OVER   
0D94                ACCP1:       
0D94   A6 10 70 01            DW   DDUP,XORR   
0D98   92 0E BA 0D            DW   QBRAN,ACCP4   
0D9C   DC 0B 68 10            DW   KEY,DUPP   
0DA0   7E 07 4A 06 7F 00 40 02 DW   BLANK,DOLIT,127,WITHI   
0DA8   92 0E B2 0D            DW   QBRAN,ACCP2   
0DAC   46 0D                  DW   TAP   
0DAE   9E 0E B6 0D            DW   BRAN,ACCP3   
0DB2                ACCP2:       
0DB2   10 11 64 0F            DW   TTAP,ATEXE   
0DB6                ACCP3:       
0DB6   9E 0E 94 0D            DW   BRAN,ACCP1   
0DBA                ACCP4:       
0DBA   6C 10 78 10 B4 01 8A 06 DW   DROP,OVER,SUBB,EXIT   
0DC2                             ;   EXPECT      ( b u -- )
0DC2                             ;               Accept input stream and STORE count in SPAN.
0DC2                          ;*Macro unroll: hCOLON  6,'EXPECT',EXPEC
0DC2                          ;*Macro unroll:  hCODE 6, "EXPECT", EXPEC
0DC2                          ALIGN   2   
0DC2                EXPEC:       
0DC2   00                     NOP      
0DC3   CD 3C 06               CALL   doLIST   
0DC6   08 11 64 0F 38 11 AE 0E 6C 10 8A 06 DW   TEXPE,ATEXE,SPAN,STORE,DROP,EXIT   
0DD2                             ;   QUERY       ( -- )
0DD2                             ;               Accept input stream to terminal input buffer.
0DD2                          ;*Macro unroll: hCOLON  5,'QUERY',QUERY
0DD2                          ;*Macro unroll:  hCODE 5, "QUERY", QUERY
0DD2                          ALIGN   2   
0DD2                QUERY:       
0DD2   00                     NOP      
0DD3   CD 3C 06               CALL   doLIST   
0DD6   58 0F 4A 06 50 00 08 11 64 0F 48 11 AE 0E DW   TIB,DOLIT,80,TEXPE,ATEXE,NTIB,STORE   
0DE4   6C 10 4A 06 00 00 40 11 AE 0E 8A 06 DW   DROP,DOLIT,0,INN,STORE,EXIT   
0DF0                             ; HL contains the xt of the word
0DF0                CALL_FORTH:      
0DF0   11 F5 0D               LD   DE,TRETURN_HERE   
0DF3   E9                     JP   (HL)   
0DF4                RETURN_HERE:      
0DF4   C9                     RET      
0DF5                TRETURN_HERE:      
0DF5   F4 0D                  DW   RETURN_HERE   
0DF7                NEXT_STEP:      
0DF7   5E                     LD   E,(HL)   ; 7t
0DF8   23                     INC   HL   ; 6t
0DF9   56                     LD   D,(HL)   ; 7t
0DFA   23                     INC   HL   ; 6t
0DFB   EB                     EX   DE,HL   ; 4t
0DFC   E9                     JP   (HL)   ; 4t
0DFD                          ;*Macro unroll: hCOLON	2,'HI',HI
0DFD                          ;*Macro unroll:  hCODE 2, "HI", HI
0DFD                          ALIGN   2   
0DFE                HI:          
0DFE   00                     NOP      
0DFF   CD 3C 06               CALL   doLIST   
0E02   AA 0B                  DW   STOIO   
0E04                             ; DW  DOLIT,1,DOLIT,0,TESDOT,TESDOT
0E04                             ; DW  DOLIT,6,DOLIT,2,SLASH,DIGIT,EMIT
0E04                             ; DW  DOLIT,$22,EMIT
0E04   4A 06 06 00 DE 0C      DW   DOLIT,6,DOT   
0E0A                             ; DW  DOLIT,$22,EMIT
0E0A   4A 06 1C 0E            DW   DOLIT,HELLO   
0E0E   5E 0C                  DW   TYPEZ   
0E10   DC 0B                  DW   KEY   
0E12   EE 0B                  DW   EMIT   
0E14   4A 06 1C 0E            DW   DOLIT,HELLO   
0E18   5E 0C                  DW   TYPEZ   
0E1A   8C 0E                  DW   QUIT   
0E1C   48 65 6C 6C 6F 20 46 6F 72 74 68 21 20 0D 0A 00 HELLO:   .CSTR   "Hello Forth! \r\n"   
0E2C                             ;   hi          ( -- )
0E2C                             ;               Display the sign-on message of eForth.
0E2C                          ;*Macro unroll: hCOLON  2,'hix',HIX
0E2C                          ;*Macro unroll:  hCODE 2, "hix", HIX
0E2C                          ALIGN   2   
0E2C                HIX:         
0E2C   00                     NOP      
0E2D   CD 3C 06               CALL   doLIST   
0E30   AA 0B 7C 0C            DW   STOIO,CR   ;initialize I/O
0E34                          ;*Macro unroll:  mDSTR   DOTQP,'eForth v'        ;model
0E34   96 0C                  DW   DOTQP   ;model
0E36                VVLEN:    .SET   $   
0E36   00 65 46 6F 72 74 68 20 76 DB   0,"eForth v"   
0E3F                VVCODE:   .SET   $   
0E36                          .ORG   vvLEN   
0E36   08                     DB   vvCODE - vvLEN - 1   
0E3F                          .ORG   vvCODE   
0E3F                             ; DW      BASE,AT,HEX             ;save radix
0E3F                             ; DW      VERSN,BDIGS,DIG,DIG
0E3F                             ; DW      DOLIT,$2E,HOLD          ; $2E = "."
0E3F                             ; DW      DIGS,EDIGS,TYPEE        ;format version number
0E3F                             ; DW      BASE,STORE              ;restore radix
0E3F   7C 0C                  DW   CR   
0E41                HI1:         
0E41   DC 0B                  DW   KEY   
0E43   68 10 EE 0B            DW   DUPP,EMIT   
0E47   4A 06 0D 00 CE 01      DW   DOLIT,$0D,EQUAL   
0E4D                             ; DW  DROP, DOLIT, 0
0E4D   92 0E 41 0E            DW   QBRAN,HI1   
0E51   4A 06 1C 0E            DW   DOLIT,HELLO   
0E55   5E 0C                  DW   TYPEZ   
0E57   7C 0C 8A 06            DW   CR,EXIT   
0E5B                          ;*Macro unroll: mCOLON	4,'COLD',COLD
0E5B                          ;*Macro unroll:  mCODE 4, "COLD", COLD
0E5B                          ALIGN   2   
0E5C                COLD:        
0E5C                VVCODE:   .SET   $   
0E5C                VVLEN:    .SET   (4 & 01FH) / CELLL   
1658                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1658                VVNAME:   .SET   $   
1658   5C 0E 66 16            DW   vvCODE,vvLINK   
165C                VVLINK:   .SET   $   
165C   04 43 4F 4C 44         DB   4,"COLD"   
0E5C                          .ORG   vvCODE   
0E5C   00                     NOP      
0E5D   CD 3C 06               CALL   doLIST   
0E60                COLD1:       
0E60   4A 06 1A 01 4A 06 45 24 DW   DOLIT,UZERO,DOLIT,UPP   
0E68   4A 06 3A 00 74 0F      DW   DOLIT,ULAST-UZERO,CMOVE   ;initialize user area
0E6E   76 0E                  DW   PRESE   ;initialize stack and TIB
0E70                             ; DW      TBOOT,ATEXE             ;application boot
0E70                             ; DW      FORTH,CNTXT,AT,DUPP     ;initialize search order
0E70                             ; DW      CRRNT,DSTOR,OVERT
0E70   8C 0E                  DW   QUIT   ;start interpretation
0E72   9E 0E 60 0E            DW   BRAN,COLD1   ;just in case
0E76                             ;   PRESET      ( -- )
0E76                             ;               Reset data stack pointer and the terminal input buffer.
0E76                          ;*Macro unroll: mCOLON  6,'PRESET',PRESE
0E76                          ;*Macro unroll:  mCODE 6, "PRESET", PRESE
0E76                          ALIGN   2   
0E76                PRESE:       
0E76                VVCODE:   .SET   $   
0E76                VVLEN:    .SET   (6 & 01FH) / CELLL   
164C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
164C                VVNAME:   .SET   $   
164C   76 0E 5C 16            DW   vvCODE,vvLINK   
1650                VVLINK:   .SET   $   
1650   06 50 52 45 53 45 54   DB   6,"PRESET"   
0E76                          .ORG   vvCODE   
0E76   00                     NOP      
0E77   CD 3C 06               CALL   doLIST   
0E7A   E8 10 B8 0E F4 0E      DW   SZERO,AT,SPSTO   
0E80   4A 06 00 22 48 11 7C 03 AE 0E 8A 06 DW   DOLIT,TIBB,NTIB,CELLP,STORE,EXIT   
0E8C                          ;*Macro unroll: mCODE  4, 'QUIT', QUIT
0E8C                          ALIGN   2   
0E8C                QUIT:        
0E8C                VVCODE:   .SET   $   
0E8C                VVLEN:    .SET   (4 & 01FH) / CELLL   
1642                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1642                VVNAME:   .SET   $   
1642   8C 0E 50 16            DW   vvCODE,vvLINK   
1646                VVLINK:   .SET   $   
1646   04 51 55 49 54         DB   4,"QUIT"   
0E8C                          .ORG   vvCODE   
0E8C   76                     HALT      
0E8D                             ;   EXECUTE	( i*x xt -- j*x )		\ CORE
0E8D                             ;		Perform the semantics indentified by execution token, xt.
0E8D                          ;*Macro unroll: mCODE	7,'EXECUTE', EXECU
0E8D                          ALIGN   2   
0E8E                EXECU:       
0E8E                VVCODE:   .SET   $   
0E8E                VVLEN:    .SET   (7 & 01FH) / CELLL   
1636                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1636                VVNAME:   .SET   $   
1636   8E 0E 46 16            DW   vvCODE,vvLINK   
163A                VVLINK:   .SET   $   
163A   07 45 58 45 43 55 54 45 DB   7,"EXECUTE"   
0E8E                          .ORG   vvCODE   
0E8E   60                     LD   H,B   
0E8F   69                     LD   L,C   
0E90   C1                     POP   BC   
0E91   E9                     JP   (HL)   
0E92                             ; 
0E92                             ;   0BRAN	( flag -- )
0E92                             ;		BRAN if flag is zero.
0E92                          ;*Macro unroll: hCODE	COMPO+7,'?branch', QBRAN
0E92                          ALIGN   2   
0E92                QBRAN:       
0E92   78                     LD   A,B   ; 4t
0E93   B1                     OR   C   ; 4t
0E94   C1                     POP   BC   ;10t
0E95   CA 9E 0E               JP   Z,BRAN   ;10/7t a fast dec is ok, only
0E98   13                     INC   DE   ; 6t yes,continue past the BRAN offset
0E99   13                     INC   DE   ; 6t
0E9A                          ;*Macro unroll: 	mNEXT
0E9A   EB                     EX   DE,HL   
0E9B   FD E9                  JP   (IY)   
0E9D                             ;   BRAN	( -- )
0E9D                             ;		BRAN to an inline address.
0E9D                          ;*Macro unroll: hCODE	COMPO+6,'branch', BRAN
0E9D                          ALIGN   2   
0E9E                BRAN:        
0E9E   1A                     LD   A,(DE)   ; 7t go back to the loop
0E9F   6F                     LD   L,A   ; 4t
0EA0   13                     INC   DE   ; 6t
0EA1   1A                     LD   A,(DE)   ; 7t
0EA2   67                     LD   H,A   ; 4t
0EA3                          ;*Macro unroll: 	mNEXTHL
0EA3   FD E9                  JP   (IY)   
0EA5                             ; 
0EA5                             ;   THROW    ( cstr -- )
0EA5                             ;   Prints string message and returns TODO: restart Forth interpreter QUIT
0EA5                          ;*Macro unroll: mCOLON	5,'THROWX',THROWX
0EA5                          ;*Macro unroll:  mCODE 5, "THROWX", THROWX
0EA5                          ALIGN   2   
0EA6                THROWX:      
0EA6                VVCODE:   .SET   $   
0EA6                VVLEN:    .SET   (5 & 01FH) / CELLL   
162C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
162C                VVNAME:   .SET   $   
162C   A6 0E 3A 16            DW   vvCODE,vvLINK   
1630                VVLINK:   .SET   $   
1630   05 54 48 52 4F 57 58   DB   5,"THROWX"   
0EA6                          .ORG   vvCODE   
0EA6   00                     NOP      
0EA7   CD 3C 06               CALL   doLIST   
0EAA   5E 0C 8A 06            DW   TYPEZ,EXIT   
0EAE                             ;   !           ( w a -- )
0EAE                             ;               Pop the data stack to memory.
0EAE                          ;*Macro unroll: mCODE	1,'!',STORE
0EAE                          ALIGN   2   
0EAE                STORE:       
0EAE                VVCODE:   .SET   $   
0EAE                VVLEN:    .SET   (1 & 01FH) / CELLL   
1626                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1626                VVNAME:   .SET   $   
1626   AE 0E 30 16            DW   vvCODE,vvLINK   
162A                VVLINK:   .SET   $   
162A   01 21                  DB   1,"!"   
0EAE                          .ORG   vvCODE   
0EAE   60                     LD   H,B   
0EAF   69                     LD   L,C   
0EB0   C1                     POP   BC   
0EB1   71                     LD   (HL),C   
0EB2   23                     INC   HL   
0EB3   70                     LD   (HL),B   
0EB4   C1                     POP   BC   
0EB5                          ;*Macro unroll: 	mNEXT
0EB5   EB                     EX   DE,HL   
0EB6   FD E9                  JP   (IY)   
0EB8                             ;   @           ( a -- w )
0EB8                             ;               Push memory location to the data stack.
0EB8                          ;*Macro unroll: mCODE	1,'@', AT
0EB8                          ALIGN   2   
0EB8                AT:          
0EB8                VVCODE:   .SET   $   
0EB8                VVLEN:    .SET   (1 & 01FH) / CELLL   
1620                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1620                VVNAME:   .SET   $   
1620   B8 0E 2A 16            DW   vvCODE,vvLINK   
1624                VVLINK:   .SET   $   
1624   01 40                  DB   1,"@"   
0EB8                          .ORG   vvCODE   
0EB8   60                     LD   H,B   
0EB9   69                     LD   L,C   
0EBA   4E                     LD   C,(HL)   
0EBB   23                     INC   HL   
0EBC   46                     LD   B,(HL)   
0EBD                          ;*Macro unroll: 	mNEXT
0EBD   EB                     EX   DE,HL   
0EBE   FD E9                  JP   (IY)   
0EC0                             ;   C!          ( c b -- )
0EC0                             ;               Pop the data stack to byte memory.
0EC0                          ;*Macro unroll: mCODE	2,'C!',CSTOR
0EC0                          ALIGN   2   
0EC0                CSTOR:       
0EC0                VVCODE:   .SET   $   
0EC0                VVLEN:    .SET   (2 & 01FH) / CELLL   
1618                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1618                VVNAME:   .SET   $   
1618   C0 0E 24 16            DW   vvCODE,vvLINK   
161C                VVLINK:   .SET   $   
161C   02 43 21               DB   2,"C!"   
0EC0                          .ORG   vvCODE   
0EC0   60                     LD   H,B   
0EC1   69                     LD   L,C   
0EC2   C1                     POP   BC   
0EC3   71                     LD   (HL),C   
0EC4   C1                     POP   BC   
0EC5                          ;*Macro unroll: 	mNEXT
0EC5   EB                     EX   DE,HL   
0EC6   FD E9                  JP   (IY)   
0EC8                             ;   C@          ( b -- c )
0EC8                             ;               Push byte memory location to the data stack.
0EC8                          ;*Macro unroll: mCODE	2,'C@',CAT
0EC8                          ALIGN   2   
0EC8                CAT:         
0EC8                VVCODE:   .SET   $   
0EC8                VVLEN:    .SET   (2 & 01FH) / CELLL   
1610                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1610                VVNAME:   .SET   $   
1610   C8 0E 1C 16            DW   vvCODE,vvLINK   
1614                VVLINK:   .SET   $   
1614   02 43 40               DB   2,"C@"   
0EC8                          .ORG   vvCODE   
0EC8   0A                     LD   A,(BC)   
0EC9   4F                     LD   C,A   
0ECA   06 00                  LD   B,0   
0ECC                          ;*Macro unroll: 	mNEXT
0ECC   EB                     EX   DE,HL   
0ECD   FD E9                  JP   (IY)   
0ECF                             ;   R@          ( -- w )
0ECF                             ;               Copy top of return stack to the data stack.
0ECF                          ;*Macro unroll: mCODE	COMPO+2,'R@',RAT
0ECF                          ALIGN   2   
0ED0                RAT:         
0ED0                VVCODE:   .SET   $   
0ED0                VVLEN:    .SET   (COMPO+2 & 01FH) / CELLL   
15E8                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
15E8                VVNAME:   .SET   $   
15E8   D0 0E 14 16            DW   vvCODE,vvLINK   
15EC                VVLINK:   .SET   $   
15EC   22 52 40               DB   COMPO+2,"R@"   
0ED0                          .ORG   vvCODE   
0ED0   C5                     PUSH   BC   
0ED1   DD 4E 00               LD   C,(IX+0)   
0ED4   DD 46 01               LD   B,(IX+1)   
0ED7                          ;*Macro unroll: 	mNEXT
0ED7   EB                     EX   DE,HL   
0ED8   FD E9                  JP   (IY)   
0EDA                             ;   RP@         ( -- a )
0EDA                             ;               Push the current RP to the data stack
0EDA                          ;*Macro unroll: mCODE	COMPO+3, 'rp@', RPAT
0EDA                          ALIGN   2   
0EDA                RPAT:        
0EDA                VVCODE:   .SET   $   
0EDA                VVLEN:    .SET   (COMPO+3 & 01FH) / CELLL   
15C0                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
15C0                VVNAME:   .SET   $   
15C0   DA 0E EC 15            DW   vvCODE,vvLINK   
15C4                VVLINK:   .SET   $   
15C4   23 72 70 40            DB   COMPO+3,"rp@"   
0EDA                          .ORG   vvCODE   
0EDA   C5                     DB   0C5h   ; PUSH	BC	;11t
0EDB   DD E5                  DB   0DDh,0E5h   ; PUSH IX	;15t
0EDD   C1                     DB   0C1h   ; POP	BC	;10t
0EDE                          ;*Macro unroll:  mNEXT
0EDE   EB                     EX   DE,HL   
0EDF   FD E9                  JP   (IY)   
0EE1                             ;   RP!         ( a -- )
0EE1                             ;               Set the return stack pointer.
0EE1                          ;*Macro unroll: mCODE	COMPO+3,'rp!',RPSTO
0EE1                          ALIGN   2   
0EE2                RPSTO:       
0EE2                VVCODE:   .SET   $   
0EE2                VVLEN:    .SET   (COMPO+3 & 01FH) / CELLL   
1598                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1598                VVNAME:   .SET   $   
1598   E2 0E C4 15            DW   vvCODE,vvLINK   
159C                VVLINK:   .SET   $   
159C   23 72 70 21            DB   COMPO+3,"rp!"   
0EE2                          .ORG   vvCODE   
0EE2   C5                     DB   0C5h   ; PUSH	BC	;11t
0EE3   DD E1                  DB   0DDh,0E1h   ; POP IX	;14t
0EE5   C1                     DB   0C1h   ; POP	BC	;10t
0EE6                          ;*Macro unroll: 	mNEXT
0EE6   EB                     EX   DE,HL   
0EE7   FD E9                  JP   (IY)   
0EE9                             ;   SP@         ( -- a )
0EE9                             ;               Push the current data stack pointer.
0EE9                          ;*Macro unroll: mCODE	3, 'sp@', SPAT
0EE9                          ALIGN   2   
0EEA                SPAT:        
0EEA                VVCODE:   .SET   $   
0EEA                VVLEN:    .SET   (3 & 01FH) / CELLL   
1590                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1590                VVNAME:   .SET   $   
1590   EA 0E 9C 15            DW   vvCODE,vvLINK   
1594                VVLINK:   .SET   $   
1594   03 73 70 40            DB   3,"sp@"   
0EEA                          .ORG   vvCODE   
0EEA   C5                     DB   0C5h   ; PUSH	BC	;11t
0EEB   21                     DB   021h   ; LD	HL,0	;10t
0EEC   00 00                  DW   0   
0EEE   39                     DB   039h   ; ADD	HL,SP	;11t
0EEF   44                     DB   044h   ; LD	B,H	; 4t
0EF0   4D                     DB   04Dh   ; LD	C,L	; 4t
0EF1                          ;*Macro unroll: 	mNEXT
0EF1   EB                     EX   DE,HL   
0EF2   FD E9                  JP   (IY)   
0EF4                             ;   SP!         ( a -- )
0EF4                             ;               Set the data stack pointer.
0EF4                          ;*Macro unroll: mCODE	3,'sp!',SPSTO
0EF4                          ALIGN   2   
0EF4                SPSTO:       
0EF4                VVCODE:   .SET   $   
0EF4                VVLEN:    .SET   (3 & 01FH) / CELLL   
1588                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1588                VVNAME:   .SET   $   
1588   F4 0E 94 15            DW   vvCODE,vvLINK   
158C                VVLINK:   .SET   $   
158C   03 73 70 21            DB   3,"sp!"   
0EF4                          .ORG   vvCODE   
0EF4   60                     DB   060h   ; LD	H,B	; 4t
0EF5   69                     DB   069h   ; LD	L,C	; 4t
0EF6   F9                     DB   0F9h   ; LD	SP,HL	; 6t
0EF7   C1                     DB   0C1h   ; POP	BC	;10t
0EF8                          ;*Macro unroll: 	mNEXT
0EF8   EB                     EX   DE,HL   
0EF9   FD E9                  JP   (IY)   
0EFB                             ;   +!          ( n a -- )
0EFB                             ;               Add n to the contents at address a.
0EFB                          ;*Macro unroll: mCOLON  2,'+!',PSTOR
0EFB                          ;*Macro unroll:  mCODE 2, "+!", PSTOR
0EFB                          ALIGN   2   
0EFC                PSTOR:       
0EFC                VVCODE:   .SET   $   
0EFC                VVLEN:    .SET   (2 & 01FH) / CELLL   
1580                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1580                VVNAME:   .SET   $   
1580   FC 0E 8C 15            DW   vvCODE,vvLINK   
1584                VVLINK:   .SET   $   
1584   02 2B 21               DB   2,"+!"   
0EFC                          .ORG   vvCODE   
0EFC   00                     NOP      
0EFD   CD 3C 06               CALL   doLIST   
0F00   70 10 78 10 B8 0E 7A 01 DW   SWAP,OVER,AT,PLUS   
0F08   70 10 AE 0E 8A 06      DW   SWAP,STORE,EXIT   
0F0E                             ;   2!          ( d a -- )
0F0E                             ;               STORE the double integer to address a.
0F0E                          ;*Macro unroll: mCOLON  2,'2!',DSTOR
0F0E                          ;*Macro unroll:  mCODE 2, "2!", DSTOR
0F0E                          ALIGN   2   
0F0E                DSTOR:       
0F0E                VVCODE:   .SET   $   
0F0E                VVLEN:    .SET   (2 & 01FH) / CELLL   
1578                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1578                VVNAME:   .SET   $   
1578   0E 0F 84 15            DW   vvCODE,vvLINK   
157C                VVLINK:   .SET   $   
157C   02 32 21               DB   2,"2!"   
0F0E                          .ORG   vvCODE   
0F0E   00                     NOP      
0F0F   CD 3C 06               CALL   doLIST   
0F12   70 10 78 10 AE 0E      DW   SWAP,OVER,STORE   
0F18   7C 03 AE 0E 8A 06      DW   CELLP,STORE,EXIT   
0F1E                             ;   2@          ( a -- d )
0F1E                             ;               Fetch double integer from address a.
0F1E                          ;*Macro unroll: mCOLON  2,'2@',DAT
0F1E                          ;*Macro unroll:  mCODE 2, "2@", DAT
0F1E                          ALIGN   2   
0F1E                DAT:         
0F1E                VVCODE:   .SET   $   
0F1E                VVLEN:    .SET   (2 & 01FH) / CELLL   
1570                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1570                VVNAME:   .SET   $   
1570   1E 0F 7C 15            DW   vvCODE,vvLINK   
1574                VVLINK:   .SET   $   
1574   02 32 40               DB   2,"2@"   
0F1E                          .ORG   vvCODE   
0F1E   00                     NOP      
0F1F   CD 3C 06               CALL   doLIST   
0F22   68 10 7C 03 B8 0E      DW   DUPP,CELLP,AT   
0F28   70 10 B8 0E 8A 06      DW   SWAP,AT,EXIT   
0F2E                             ;   COUNT       ( b -- b +n )
0F2E                             ;               Return count byte of a string and add 1 to byte address.
0F2E                          ;*Macro unroll: mCOLON  5,'COUNT',COUNT
0F2E                          ;*Macro unroll:  mCODE 5, "COUNT", COUNT
0F2E                          ALIGN   2   
0F2E                COUNT:       
0F2E                VVCODE:   .SET   $   
0F2E                VVLEN:    .SET   (5 & 01FH) / CELLL   
1566                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1566                VVNAME:   .SET   $   
1566   2E 0F 74 15            DW   vvCODE,vvLINK   
156A                VVLINK:   .SET   $   
156A   05 43 4F 55 4E 54      DB   5,"COUNT"   
0F2E                          .ORG   vvCODE   
0F2E   00                     NOP      
0F2F   CD 3C 06               CALL   doLIST   
0F32   68 10 4A 06 01 00 7A 01 DW   DUPP,DOLIT,1,PLUS   
0F3A   70 10 C8 0E 8A 06      DW   SWAP,CAT,EXIT   
0F40                             ;   HERE        ( -- a )
0F40                             ;               Return the top of the code dictionary.
0F40                          ;*Macro unroll: mCOLON  4,'HERE',HERE
0F40                          ;*Macro unroll:  mCODE 4, "HERE", HERE
0F40                          ALIGN   2   
0F40                HERE:        
0F40                VVCODE:   .SET   $   
0F40                VVLEN:    .SET   (4 & 01FH) / CELLL   
155C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
155C                VVNAME:   .SET   $   
155C   40 0F 6A 15            DW   vvCODE,vvLINK   
1560                VVLINK:   .SET   $   
1560   04 48 45 52 45         DB   4,"HERE"   
0F40                          .ORG   vvCODE   
0F40   00                     NOP      
0F41   CD 3C 06               CALL   doLIST   
0F44   88 11 B8 0E 8A 06      DW   CP,AT,EXIT   
0F4A                             ;   PAD         ( -- a )
0F4A                             ;               Return the address of a temporary buffer.
0F4A                          ;*Macro unroll: mCOLON  3,'PAD',PAD
0F4A                          ;*Macro unroll:  mCODE 3, "PAD", PAD
0F4A                          ALIGN   2   
0F4A                PAD:         
0F4A                VVCODE:   .SET   $   
0F4A                VVLEN:    .SET   (3 & 01FH) / CELLL   
1554                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1554                VVNAME:   .SET   $   
1554   4A 0F 60 15            DW   vvCODE,vvLINK   
1558                VVLINK:   .SET   $   
1558   03 50 41 44            DB   3,"PAD"   
0F4A                          .ORG   vvCODE   
0F4A   00                     NOP      
0F4B   CD 3C 06               CALL   doLIST   
0F4E   40 0F 4A 06 50 00 7A 01 8A 06 DW   HERE,DOLIT,80,PLUS,EXIT   
0F58                             ;   TIB         ( -- a )
0F58                             ;               Return the address of the terminal input buffer.
0F58                          ;*Macro unroll: mCOLON  3,'TIB',TIB
0F58                          ;*Macro unroll:  mCODE 3, "TIB", TIB
0F58                          ALIGN   2   
0F58                TIB:         
0F58                VVCODE:   .SET   $   
0F58                VVLEN:    .SET   (3 & 01FH) / CELLL   
154C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
154C                VVNAME:   .SET   $   
154C   58 0F 58 15            DW   vvCODE,vvLINK   
1550                VVLINK:   .SET   $   
1550   03 54 49 42            DB   3,"TIB"   
0F58                          .ORG   vvCODE   
0F58   00                     NOP      
0F59   CD 3C 06               CALL   doLIST   
0F5C   48 11 7C 03 B8 0E 8A 06 DW   NTIB,CELLP,AT,EXIT   
0F64                             ;   @EXECUTE    ( a -- )
0F64                             ;               Execute vector STOREd in address a.
0F64                          ;*Macro unroll: hCOLON  8,'@EXECUTE',ATEXE
0F64                          ;*Macro unroll:  hCODE 8, "@EXECUTE", ATEXE
0F64                          ALIGN   2   
0F64                ATEXE:       
0F64   00                     NOP      
0F65   CD 3C 06               CALL   doLIST   
0F68   B8 0E 80 10            DW   AT,QDUP   ;?address or zero
0F6C   92 0E 72 0F            DW   QBRAN,EXE1   
0F70   8E 0E                  DW   EXECU   ;execute if non-zero
0F72                EXE1:        
0F72   8A 06                  DW   EXIT   ;do nothing if zero
0F74                             ;   CMOVE       ( b1 b2 u -- )
0F74                             ;               Copy u bytes from b1 to b2.
0F74                          ;*Macro unroll: mCOLON  5,'CMOVE',CMOVE
0F74                          ;*Macro unroll:  mCODE 5, "CMOVE", CMOVE
0F74                          ALIGN   2   
0F74                CMOVE:       
0F74                VVCODE:   .SET   $   
0F74                VVLEN:    .SET   (5 & 01FH) / CELLL   
1542                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1542                VVNAME:   .SET   $   
1542   74 0F 50 15            DW   vvCODE,vvLINK   
1546                VVLINK:   .SET   $   
1546   05 43 4D 4F 56 45      DB   5,"CMOVE"   
0F74                          .ORG   vvCODE   
0F74   00                     NOP      
0F75   CD 3C 06               CALL   doLIST   
0F78   4C 10                  DW   TOR   
0F7A   9E 0E 96 0F            DW   BRAN,CMOV2   
0F7E                CMOV1:       
0F7E   4C 10 68 10 C8 0E      DW   TOR,DUPP,CAT   
0F84   D0 0E C0 0E            DW   RAT,CSTOR   
0F88   4A 06 01 00 7A 01      DW   DOLIT,1,PLUS   
0F8E   5A 10 4A 06 01 00 7A 01 DW   RFROM,DOLIT,1,PLUS   
0F96                CMOV2:       
0F96   96 06 7E 0F            DW   DONXT,CMOV1   
0F9A   9C 10 8A 06            DW   DDROP,EXIT   
0F9E                             ;   FILL        ( b u c -- )
0F9E                             ;               Fill u bytes of character c to area beginning at b.
0F9E                          ;*Macro unroll: mCOLON  4,'FILL',FILL
0F9E                          ;*Macro unroll:  mCODE 4, "FILL", FILL
0F9E                          ALIGN   2   
0F9E                FILL:        
0F9E                VVCODE:   .SET   $   
0F9E                VVLEN:    .SET   (4 & 01FH) / CELLL   
1538                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1538                VVNAME:   .SET   $   
1538   9E 0F 46 15            DW   vvCODE,vvLINK   
153C                VVLINK:   .SET   $   
153C   04 46 49 4C 4C         DB   4,"FILL"   
0F9E                          .ORG   vvCODE   
0F9E   00                     NOP      
0F9F   CD 3C 06               CALL   doLIST   
0FA2   70 10 4C 10 70 10      DW   SWAP,TOR,SWAP   
0FA8   9E 0E B6 0F            DW   BRAN,FILL2   
0FAC                FILL1:       
0FAC   A6 10 C0 0E 4A 06 01 00 7A 01 DW   DDUP,CSTOR,DOLIT,1,PLUS   
0FB6                FILL2:       
0FB6   96 06 AC 0F            DW   DONXT,FILL1   
0FBA   9C 10 8A 06            DW   DDROP,EXIT   
0FBE                             ;   -TRAILING   ( b u -- b u )
0FBE                             ;               Adjust the count to eliminate trailing white space.
0FBE                          ;*Macro unroll: mCOLON  9,'-TRAILING',DTRAI
0FBE                          ;*Macro unroll:  mCODE 9, "-TRAILING", DTRAI
0FBE                          ALIGN   2   
0FBE                DTRAI:       
0FBE                VVCODE:   .SET   $   
0FBE                VVLEN:    .SET   (9 & 01FH) / CELLL   
152A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
152A                VVNAME:   .SET   $   
152A   BE 0F 3C 15            DW   vvCODE,vvLINK   
152E                VVLINK:   .SET   $   
152E   09 2D 54 52 41 49 4C 49 4E 47 DB   9,"-TRAILING"   
0FBE                          .ORG   vvCODE   
0FBE   00                     NOP      
0FBF   CD 3C 06               CALL   doLIST   
0FC2   4C 10                  DW   TOR   
0FC4   9E 0E E2 0F            DW   BRAN,DTRA2   
0FC8                DTRA1:       
0FC8   7E 07 78 10 D0 0E 7A 01 C8 0E 00 02 DW   BLANK,OVER,RAT,PLUS,CAT,LESS   
0FD4   92 0E E2 0F            DW   QBRAN,DTRA2   
0FD8   5A 10 4A 06 01 00 7A 01 8A 06 DW   RFROM,DOLIT,1,PLUS,EXIT   ;adjusted count
0FE2                DTRA2:       
0FE2   96 06 C8 0F            DW   DONXT,DTRA1   
0FE6   4A 06 00 00 8A 06      DW   DOLIT,0,EXIT   ;count=0
0FEC                             ;   PACK$       ( b u a -- a )
0FEC                             ;               Build a counted string with u characters from b. Null fill.
0FEC                          ;*Macro unroll: mCOLON  5,'PACK$',PACKS
0FEC                          ;*Macro unroll:  mCODE 5, "PACK$", PACKS
0FEC                          ALIGN   2   
0FEC                PACKS:       
0FEC                VVCODE:   .SET   $   
0FEC                VVLEN:    .SET   (5 & 01FH) / CELLL   
1520                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1520                VVNAME:   .SET   $   
1520   EC 0F 2E 15            DW   vvCODE,vvLINK   
1524                VVLINK:   .SET   $   
1524   05 50 41 43 4B 24      DB   5,"PACK$"   
0FEC                          .ORG   vvCODE   
0FEC   00                     NOP      
0FED   CD 3C 06               CALL   doLIST   
0FF0   26 10 68 10 4C 10      DW   ALGND,DUPP,TOR   ;strings only on cell boundary
0FF6   78 10 68 10 4A 06 00 00 DW   OVER,DUPP,DOLIT,0   
0FFE   4A 06 02 00 5E 02 6C 10 DW   DOLIT,CELLL,UMMOD,DROP   ;count mod cell
1006   B4 01 78 10 7A 01      DW   SUBB,OVER,PLUS   
100C   4A 06 00 00 70 10 AE 0E DW   DOLIT,0,SWAP,STORE   ;null fill cell
1014   A6 10 C0 0E 4A 06 01 00 7A 01 DW   DDUP,CSTOR,DOLIT,1,PLUS   ;save count
101E   70 10 74 0F 5A 10 8A 06 DW   SWAP,CMOVE,RFROM,EXIT   ;move string
1026                             ;   ALIGNED     ( b -- a )
1026                             ;               Align address to the cell boundary.
1026                          ;*Macro unroll: mCOLON  7,'ALIGNED', ALGND
1026                          ;*Macro unroll:  mCODE 7, "ALIGNED", ALGND
1026                          ALIGN   2   
1026                ALGND:       
1026                VVCODE:   .SET   $   
1026                VVLEN:    .SET   (7 & 01FH) / CELLL   
1514                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1514                VVNAME:   .SET   $   
1514   26 10 24 15            DW   vvCODE,vvLINK   
1518                VVLINK:   .SET   $   
1518   07 41 4C 49 47 4E 45 44 DB   7,"ALIGNED"   
1026                          .ORG   vvCODE   
1026   00                     NOP      
1027   CD 3C 06               CALL   doLIST   
102A   AA 03 CC 03 C2 03      DW   ONEP,TWSLA,TWSTA   
1030   8A 06                  DW   EXIT   
1032                             ; GREETING:       .cstr   "Type something\r\n"
1032   44 49 56 20 42 59 20 5A 45 52 4F 00 ERR_DIVZERO:   .CSTR   "DIV BY ZERO"   ;-10
103E   4F 55 54 20 4F 46 20 52 41 4E 47 45 00 ERR_OUTOFRANGE:   .CSTR   "OUT OF RANGE"   ;-11
104B                             ;   >R          ( w -- )
104B                             ;               Push the data stack to the return stack.
104B                          ;*Macro unroll: mCODE	COMPO+2, '>R', ToR
104B                          ALIGN   2   
104C                TOR:         
104C                VVCODE:   .SET   $   
104C                VVLEN:    .SET   (COMPO+2 & 01FH) / CELLL   
14EC                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
14EC                VVNAME:   .SET   $   
14EC   4C 10 18 15            DW   vvCODE,vvLINK   
14F0                VVLINK:   .SET   $   
14F0   22 3E 52               DB   COMPO+2,">R"   
104C                          .ORG   vvCODE   
104C   DD 2B                  DEC   IX   
104E   DD 70 00               LD   (IX+0),B   
1051   DD 2B                  DEC   IX   
1053   DD 71 00               LD   (IX+0),C   
1056   C1                     POP   BC   
1057                          ;*Macro unroll: 	mNEXT
1057   EB                     EX   DE,HL   
1058   FD E9                  JP   (IY)   
105A                             ;   R>          ( -- w )
105A                             ;               Pop the return stack to the data stack.
105A                          ;*Macro unroll: mCODE	COMPO+2, 'R>', RFrom
105A                          ALIGN   2   
105A                RFROM:       
105A                VVCODE:   .SET   $   
105A                VVLEN:    .SET   (COMPO+2 & 01FH) / CELLL   
14C4                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
14C4                VVNAME:   .SET   $   
14C4   5A 10 F0 14            DW   vvCODE,vvLINK   
14C8                VVLINK:   .SET   $   
14C8   22 52 3E               DB   COMPO+2,"R>"   
105A                          .ORG   vvCODE   
105A   C5                     PUSH   BC   
105B   DD 4E 00               LD   C,(IX+0)   
105E   DD 23                  INC   IX   
1060   DD 46 00               LD   B,(IX+0)   
1063   DD 23                  INC   IX   
1065                          ;*Macro unroll: 	mNEXT
1065   EB                     EX   DE,HL   
1066   FD E9                  JP   (IY)   
1068                             ;   DUP         ( w -- w w )
1068                             ;               Duplicate the top stack item.
1068                          ;*Macro unroll: mCODE	3, 'DUP', DUPP
1068                          ALIGN   2   
1068                DUPP:        
1068                VVCODE:   .SET   $   
1068                VVLEN:    .SET   (3 & 01FH) / CELLL   
14BC                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
14BC                VVNAME:   .SET   $   
14BC   68 10 C8 14            DW   vvCODE,vvLINK   
14C0                VVLINK:   .SET   $   
14C0   03 44 55 50            DB   3,"DUP"   
1068                          .ORG   vvCODE   
1068   C5                     PUSH   BC   
1069                          ;*Macro unroll:  mNEXT
1069   EB                     EX   DE,HL   
106A   FD E9                  JP   (IY)   
106C                             ;   DROP	( x -- )			\ CORE
106C                             ;		Discard top stack item.
106C                          ;*Macro unroll: mCODE	4, 'DROP', DROP
106C                          ALIGN   2   
106C                DROP:        
106C                VVCODE:   .SET   $   
106C                VVLEN:    .SET   (4 & 01FH) / CELLL   
14B2                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
14B2                VVNAME:   .SET   $   
14B2   6C 10 C0 14            DW   vvCODE,vvLINK   
14B6                VVLINK:   .SET   $   
14B6   04 44 52 4F 50         DB   4,"DROP"   
106C                          .ORG   vvCODE   
106C   C1                     POP   BC   
106D                          ;*Macro unroll:  mNEXT
106D   EB                     EX   DE,HL   
106E   FD E9                  JP   (IY)   
1070                             ;   SWAP        ( w1 w2 -- w2 w1 )
1070                             ;               Exchange top two stack items.
1070                          ;*Macro unroll: mCODE	4, 'SWAP', SWAP
1070                          ALIGN   2   
1070                SWAP:        
1070                VVCODE:   .SET   $   
1070                VVLEN:    .SET   (4 & 01FH) / CELLL   
14A8                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
14A8                VVNAME:   .SET   $   
14A8   70 10 B6 14            DW   vvCODE,vvLINK   
14AC                VVLINK:   .SET   $   
14AC   04 53 57 41 50         DB   4,"SWAP"   
1070                          .ORG   vvCODE   
1070   E1                     POP   HL   
1071   C5                     PUSH   BC   
1072   44                     LD   B,H   
1073   4D                     LD   C,L   
1074                          ;*Macro unroll: 	mNEXT
1074   EB                     EX   DE,HL   
1075   FD E9                  JP   (IY)   
1077                             ;   OVER        ( w1 w2 -- w1 w2 w1 )
1077                             ;               Copy second stack item to top.
1077                          ;*Macro unroll: mCODE	4, 'OVER', OVER
1077                          ALIGN   2   
1078                OVER:        
1078                VVCODE:   .SET   $   
1078                VVLEN:    .SET   (4 & 01FH) / CELLL   
149E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
149E                VVNAME:   .SET   $   
149E   78 10 AC 14            DW   vvCODE,vvLINK   
14A2                VVLINK:   .SET   $   
14A2   04 4F 56 45 52         DB   4,"OVER"   
1078                          .ORG   vvCODE   
1078   E1                     POP   HL   
1079   E5                     PUSH   HL   
107A   C5                     PUSH   BC   
107B   44                     LD   B,H   
107C   4D                     LD   C,L   
107D                          ;*Macro unroll: 	mNEXT
107D   EB                     EX   DE,HL   
107E   FD E9                  JP   (IY)   
1080                             ;   ?DUP        ( w -- w w | 0 )
1080                             ;               Dup tos if its is not zero.
1080                          ;*Macro unroll: mCOLON	4,'?DUP', QDUP
1080                          ;*Macro unroll:  mCODE 4, "?DUP", QDUP
1080                          ALIGN   2   
1080                QDUP:        
1080                VVCODE:   .SET   $   
1080                VVLEN:    .SET   (4 & 01FH) / CELLL   
1494                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1494                VVNAME:   .SET   $   
1494   80 10 A2 14            DW   vvCODE,vvLINK   
1498                VVLINK:   .SET   $   
1498   04 3F 44 55 50         DB   4,"?DUP"   
1080                          .ORG   vvCODE   
1080   00                     NOP      
1081   CD 3C 06               CALL   doLIST   
1084   68 10 92 0E 8C 10      DW   DUPP,QBRAN,QDUP1   
108A   68 10                  DW   DUPP   
108C                QDUP1:       
108C   8A 06                  DW   EXIT   
108E                             ;   ROT         ( w1 w2 w3 -- w2 w3 w1 )
108E                             ;               Rot 3rd item to top.
108E                          ;*Macro unroll: mCOLON	3,'ROT', ROT
108E                          ;*Macro unroll:  mCODE 3, "ROT", ROT
108E                          ALIGN   2   
108E                ROT:         
108E                VVCODE:   .SET   $   
108E                VVLEN:    .SET   (3 & 01FH) / CELLL   
148C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
148C                VVNAME:   .SET   $   
148C   8E 10 98 14            DW   vvCODE,vvLINK   
1490                VVLINK:   .SET   $   
1490   03 52 4F 54            DB   3,"ROT"   
108E                          .ORG   vvCODE   
108E   00                     NOP      
108F   CD 3C 06               CALL   doLIST   
1092   4C 10 70 10 5A 10 70 10 8A 06 DW   ToR,SWAP,RFrom,SWAP,EXIT   
109C                             ;   2DROP       ( w w -- )
109C                             ;               Discard two items on stack.
109C                          ;*Macro unroll: mCOLON	5,'2DROP',DDROP
109C                          ;*Macro unroll:  mCODE 5, "2DROP", DDROP
109C                          ALIGN   2   
109C                DDROP:       
109C                VVCODE:   .SET   $   
109C                VVLEN:    .SET   (5 & 01FH) / CELLL   
1482                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1482                VVNAME:   .SET   $   
1482   9C 10 90 14            DW   vvCODE,vvLINK   
1486                VVLINK:   .SET   $   
1486   05 32 44 52 4F 50      DB   5,"2DROP"   
109C                          .ORG   vvCODE   
109C   00                     NOP      
109D   CD 3C 06               CALL   doLIST   
10A0   6C 10 6C 10 8A 06      DW   DROP,DROP,EXIT   
10A6                             ;   2DUP        ( w1 w2 -- w1 w2 w1 w2 )
10A6                             ;               Duplicate top two items.
10A6                          ;*Macro unroll: mCOLON	4,'2DUP',DDUP
10A6                          ;*Macro unroll:  mCODE 4, "2DUP", DDUP
10A6                          ALIGN   2   
10A6                DDUP:        
10A6                VVCODE:   .SET   $   
10A6                VVLEN:    .SET   (4 & 01FH) / CELLL   
1478                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1478                VVNAME:   .SET   $   
1478   A6 10 86 14            DW   vvCODE,vvLINK   
147C                VVLINK:   .SET   $   
147C   04 32 44 55 50         DB   4,"2DUP"   
10A6                          .ORG   vvCODE   
10A6   00                     NOP      
10A7   CD 3C 06               CALL   doLIST   
10AA   78 10 78 10 8A 06      DW   OVER,OVER,EXIT   
10B0                             ;   2SWAP        ( w1 w2 w3 w4 -- w3 w4 w1 w2 )
10B0                             ;               Exchange top two items.
10B0                          ;*Macro unroll: mCOLON	5,'2SWAP',TwoSWAP
10B0                          ;*Macro unroll:  mCODE 5, "2SWAP", TwoSWAP
10B0                          ALIGN   2   
10B0                TWOSWAP:      
10B0                VVCODE:   .SET   $   
10B0                VVLEN:    .SET   (5 & 01FH) / CELLL   
146E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
146E                VVNAME:   .SET   $   
146E   B0 10 7C 14            DW   vvCODE,vvLINK   
1472                VVLINK:   .SET   $   
1472   05 32 53 57 41 50      DB   5,"2SWAP"   
10B0                          .ORG   vvCODE   
10B0   00                     NOP      
10B1   CD 3C 06               CALL   doLIST   
10B4   8E 10 4C 10 8E 10 5A 10 8A 06 DW   ROT,ToR,ROT,RFrom,EXIT   
10BE                             ;   PICK        ( ... +n -- ... w )
10BE                             ;               Copy the nth stack item to tos.
10BE                          ;*Macro unroll: mCOLON  4,'PICK',PICK
10BE                          ;*Macro unroll:  mCODE 4, "PICK", PICK
10BE                          ALIGN   2   
10BE                PICK:        
10BE                VVCODE:   .SET   $   
10BE                VVLEN:    .SET   (4 & 01FH) / CELLL   
1464                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1464                VVNAME:   .SET   $   
1464   BE 10 72 14            DW   vvCODE,vvLINK   
1468                VVLINK:   .SET   $   
1468   04 50 49 43 4B         DB   4,"PICK"   
10BE                          .ORG   vvCODE   
10BE   00                     NOP      
10BF   CD 3C 06               CALL   doLIST   
10C2   4A 06 01 00 7A 01 94 03 DW   DOLIT,1,PLUS,CELLS   
10CA   EA 0E 7A 01 B8 0E 8A 06 DW   SPAT,PLUS,AT,EXIT   
10D2                             ;   DEPTH       ( -- n )
10D2                             ;               Return the depth of the data stack.
10D2                          ;*Macro unroll: mCOLON	5,'DEPTH',DEPTH
10D2                          ;*Macro unroll:  mCODE 5, "DEPTH", DEPTH
10D2                          ALIGN   2   
10D2                DEPTH:       
10D2                VVCODE:   .SET   $   
10D2                VVLEN:    .SET   (5 & 01FH) / CELLL   
145A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
145A                VVNAME:   .SET   $   
145A   D2 10 68 14            DW   vvCODE,vvLINK   
145E                VVLINK:   .SET   $   
145E   05 44 45 50 54 48      DB   5,"DEPTH"   
10D2                          .ORG   vvCODE   
10D2   00                     NOP      
10D3   CD 3C 06               CALL   doLIST   
10D6   EA 0E E8 10 B8 0E 70 10 B4 01 DW   SPAT,SZero,AT,SWAP,SUBB   
10E0   4A 06 02 00 12 03 8A 06 DW   DOLIT,CELLL,Slash,EXIT   
10E8                             ;   SP0         ( -- a )
10E8                             ;               Pointer to bottom of the data stack.
10E8                          ;*Macro unroll: mUSER   3,'SP0',SZERO
10E8                          ;*Macro unroll: 	mCODE 3, "SP0", SZERO
10E8                          ALIGN   2   
10E8                SZERO:       
10E8                VVCODE:   .SET   $   
10E8                VVLEN:    .SET   (3 & 01FH) / CELLL   
1452                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1452                VVNAME:   .SET   $   
1452   E8 10 5E 14            DW   vvCODE,vvLINK   
1456                VVLINK:   .SET   $   
1456   03 53 50 30            DB   3,"SP0"   
10E8                          .ORG   vvCODE   
10E8   00                     NOP      
10E9   CD 3C 06               CALL   doLIST   
10EC   62 06 00 00            DW   DoUSE,vvUSER   
10F0                VVUSER:   .SET   vvUSER + CELLL   
10F0                             ;   RP0         ( -- a )
10F0                             ;               Pointer to bottom of the return stack.
10F0                          ;*Macro unroll: mUSER   3,'RP0',RZERO
10F0                          ;*Macro unroll: 	mCODE 3, "RP0", RZERO
10F0                          ALIGN   2   
10F0                RZERO:       
10F0                VVCODE:   .SET   $   
10F0                VVLEN:    .SET   (3 & 01FH) / CELLL   
144A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
144A                VVNAME:   .SET   $   
144A   F0 10 56 14            DW   vvCODE,vvLINK   
144E                VVLINK:   .SET   $   
144E   03 52 50 30            DB   3,"RP0"   
10F0                          .ORG   vvCODE   
10F0   00                     NOP      
10F1   CD 3C 06               CALL   doLIST   
10F4   62 06 02 00            DW   DoUSE,vvUSER   
10F8                VVUSER:   .SET   vvUSER + CELLL   
10F8                             ;   '?KEY       ( -- a )
10F8                             ;               Execution vector of ?KEY.
10F8                          ;*Macro unroll: hUSER   5,"'?KEY",TQKEY
10F8                          ;*Macro unroll: 	hCODE 5, "'?KEY", TQKEY
10F8                          ALIGN   2   
10F8                TQKEY:       
10F8   00                     NOP      
10F9   CD 3C 06               CALL   doLIST   
10FC   62 06 04 00            DW   DoUSE,vvUSER   
1100                VVUSER:   .SET   vvUSER + CELLL   
1100                             ;   'EMIT       ( -- a )
1100                             ;               Execution vector of EMIT.
1100                          ;*Macro unroll: hUSER   5,"'EMIT",TEMIT
1100                          ;*Macro unroll: 	hCODE 5, "'EMIT", TEMIT
1100                          ALIGN   2   
1100                TEMIT:       
1100   00                     NOP      
1101   CD 3C 06               CALL   doLIST   
1104   62 06 06 00            DW   DoUSE,vvUSER   
1108                VVUSER:   .SET   vvUSER + CELLL   
1108                             ;   'EXPECT     ( -- a )
1108                             ;               Execution vector of EXPECT.
1108                          ;*Macro unroll: hUSER   7,"'EXPECT",TEXPE
1108                          ;*Macro unroll: 	hCODE 7, "'EXPECT", TEXPE
1108                          ALIGN   2   
1108                TEXPE:       
1108   00                     NOP      
1109   CD 3C 06               CALL   doLIST   
110C   62 06 08 00            DW   DoUSE,vvUSER   
1110                VVUSER:   .SET   vvUSER + CELLL   
1110                             ;   'TAP        ( -- a )
1110                             ;               Execution vector of TAP.
1110                          ;*Macro unroll: hUSER   4,"'TAP",TTAP
1110                          ;*Macro unroll: 	hCODE 4, "'TAP", TTAP
1110                          ALIGN   2   
1110                TTAP:        
1110   00                     NOP      
1111   CD 3C 06               CALL   doLIST   
1114   62 06 0A 00            DW   DoUSE,vvUSER   
1118                VVUSER:   .SET   vvUSER + CELLL   
1118                             ;   'ECHO       ( -- a )
1118                             ;               Execution vector of ECHO.
1118                          ;*Macro unroll: hUSER   5,"'ECHO",TECHO
1118                          ;*Macro unroll: 	hCODE 5, "'ECHO", TECHO
1118                          ALIGN   2   
1118                TECHO:       
1118   00                     NOP      
1119   CD 3C 06               CALL   doLIST   
111C   62 06 0C 00            DW   DoUSE,vvUSER   
1120                VVUSER:   .SET   vvUSER + CELLL   
1120                             ;   'PROMPT     ( -- a )
1120                             ;               Execution vector of PROMPT.
1120                          ;*Macro unroll: hUSER   7,"'PROMPT",TPROM
1120                          ;*Macro unroll: 	hCODE 7, "'PROMPT", TPROM
1120                          ALIGN   2   
1120                TPROM:       
1120   00                     NOP      
1121   CD 3C 06               CALL   doLIST   
1124   62 06 0E 00            DW   DoUSE,vvUSER   
1128                VVUSER:   .SET   vvUSER + CELLL   
1128                             ;   BASE        ( -- a )
1128                             ;               Storage of the radix base for numeric I/O.
1128                          ;*Macro unroll: mUSER   4,'BASE',BASE
1128                          ;*Macro unroll: 	mCODE 4, "BASE", BASE
1128                          ALIGN   2   
1128                BASE:        
1128                VVCODE:   .SET   $   
1128                VVLEN:    .SET   (4 & 01FH) / CELLL   
1440                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1440                VVNAME:   .SET   $   
1440   28 11 4E 14            DW   vvCODE,vvLINK   
1444                VVLINK:   .SET   $   
1444   04 42 41 53 45         DB   4,"BASE"   
1128                          .ORG   vvCODE   
1128   00                     NOP      
1129   CD 3C 06               CALL   doLIST   
112C   62 06 10 00            DW   DoUSE,vvUSER   
1130                VVUSER:   .SET   vvUSER + CELLL   
1130                             ;   tmp         ( -- a )
1130                             ;               A temporary storage location used in parse and find.
1130                          ;*Macro unroll: hUSER   COMPO+3,'tmp',TEMP
1130                          ;*Macro unroll: 	hCODE COMPO+3, "tmp", TEMP
1130                          ALIGN   2   
1130                TEMP:        
1130   00                     NOP      
1131   CD 3C 06               CALL   doLIST   
1134   62 06 12 00            DW   DoUSE,vvUSER   
1138                VVUSER:   .SET   vvUSER + CELLL   
1138                             ;   SPAN        ( -- a )
1138                             ;               Hold character count received by EXPECT.
1138                          ;*Macro unroll: hUSER   4,'SPAN',SPAN
1138                          ;*Macro unroll: 	hCODE 4, "SPAN", SPAN
1138                          ALIGN   2   
1138                SPAN:        
1138   00                     NOP      
1139   CD 3C 06               CALL   doLIST   
113C   62 06 14 00            DW   DoUSE,vvUSER   
1140                VVUSER:   .SET   vvUSER + CELLL   
1140                             ;   >IN         ( -- a )
1140                             ;               Hold the character pointer while parsing input stream.
1140                          ;*Macro unroll: mUSER   3,'>IN',INN
1140                          ;*Macro unroll: 	mCODE 3, ">IN", INN
1140                          ALIGN   2   
1140                INN:         
1140                VVCODE:   .SET   $   
1140                VVLEN:    .SET   (3 & 01FH) / CELLL   
1438                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1438                VVNAME:   .SET   $   
1438   40 11 44 14            DW   vvCODE,vvLINK   
143C                VVLINK:   .SET   $   
143C   03 3E 49 4E            DB   3,">IN"   
1140                          .ORG   vvCODE   
1140   00                     NOP      
1141   CD 3C 06               CALL   doLIST   
1144   62 06 16 00            DW   DoUSE,vvUSER   
1148                VVUSER:   .SET   vvUSER + CELLL   
1148                             ;   #TIB        ( -- a )
1148                             ;               Hold the current count and address of the terminal input buffer.
1148                          ;*Macro unroll: hUSER   4,'#TIB',NTIB
1148                          ;*Macro unroll: 	hCODE 4, "#TIB", NTIB
1148                          ALIGN   2   
1148                NTIB:        
1148   00                     NOP      
1149   CD 3C 06               CALL   doLIST   
114C   62 06 18 00            DW   DoUSE,vvUSER   
1150                VVUSER:   .SET   vvUSER + CELLL   
1150                VVUSER:   .SET   vvUSER + CELLL   
1150                             ;   CSP         ( -- a )
1150                             ;               Hold the stack pointer for error checking.
1150                          ;*Macro unroll: hUSER   3,'CSP',CSP
1150                          ;*Macro unroll: 	hCODE 3, "CSP", CSP
1150                          ALIGN   2   
1150                CSP:         
1150   00                     NOP      
1151   CD 3C 06               CALL   doLIST   
1154   62 06 1C 00            DW   DoUSE,vvUSER   
1158                VVUSER:   .SET   vvUSER + CELLL   
1158                             ;   'EVAL       ( -- a )
1158                             ;               Execution vector of EVAL.
1158                          ;*Macro unroll: hUSER   5,"'EVAL",TEVAL
1158                          ;*Macro unroll: 	hCODE 5, "'EVAL", TEVAL
1158                          ALIGN   2   
1158                TEVAL:       
1158   00                     NOP      
1159   CD 3C 06               CALL   doLIST   
115C   62 06 1E 00            DW   DoUSE,vvUSER   
1160                VVUSER:   .SET   vvUSER + CELLL   
1160                             ;   'NUMBER     ( -- a )
1160                             ;               Execution vector of NUMBER?.
1160                          ;*Macro unroll: hUSER   7,"'NUMBER",TNUMB
1160                          ;*Macro unroll: 	hCODE 7, "'NUMBER", TNUMB
1160                          ALIGN   2   
1160                TNUMB:       
1160   00                     NOP      
1161   CD 3C 06               CALL   doLIST   
1164   62 06 20 00            DW   DoUSE,vvUSER   
1168                VVUSER:   .SET   vvUSER + CELLL   
1168                             ;   HLD         ( -- a )
1168                             ;               Hold a pointer in building a numeric output string.
1168                          ;*Macro unroll: hUSER   3,'HLD',HLD
1168                          ;*Macro unroll: 	hCODE 3, "HLD", HLD
1168                          ALIGN   2   
1168                HLD:         
1168   00                     NOP      
1169   CD 3C 06               CALL   doLIST   
116C   62 06 22 00            DW   DoUSE,vvUSER   
1170                VVUSER:   .SET   vvUSER + CELLL   
1170                             ;   HANDLER     ( -- a )
1170                             ;               Hold the return stack pointer for error handling.
1170                          ;*Macro unroll: hUSER   7,'HANDLER',HANDL
1170                          ;*Macro unroll: 	hCODE 7, "HANDLER", HANDL
1170                          ALIGN   2   
1170                HANDL:       
1170   00                     NOP      
1171   CD 3C 06               CALL   doLIST   
1174   62 06 24 00            DW   DoUSE,vvUSER   
1178                VVUSER:   .SET   vvUSER + CELLL   
1178                             ;   CONTEXT     ( -- a )
1178                             ;               A area to specify vocabulary search order.
1178                          ;*Macro unroll: hUSER   7,'CONTEXT',CNTXT
1178                          ;*Macro unroll: 	hCODE 7, "CONTEXT", CNTXT
1178                          ALIGN   2   
1178                CNTXT:       
1178   00                     NOP      
1179   CD 3C 06               CALL   doLIST   
117C   62 06 26 00            DW   DoUSE,vvUSER   
1180                VVUSER:   .SET   vvUSER + CELLL   
1180                VVUSER:   .SET   vvUSER + VOCSS * CELLL   ;vocabulary stack
1180                             ;   CURRENT     ( -- a )
1180                             ;               Point to the vocabulary to be extended.
1180                          ;*Macro unroll: hUSER   7,'CURRENT',CRRNT
1180                          ;*Macro unroll: 	hCODE 7, "CURRENT", CRRNT
1180                          ALIGN   2   
1180                CRRNT:       
1180   00                     NOP      
1181   CD 3C 06               CALL   doLIST   
1184   62 06 38 00            DW   DoUSE,vvUSER   
1188                VVUSER:   .SET   vvUSER + CELLL   
1188                VVUSER:   .SET   vvUSER + CELLL   ;vocabulary link pointer
1188                             ;   CP          ( -- a )
1188                             ;               Point to the top of the code dictionary.
1188                          ;*Macro unroll: hUSER   2,'CP',CP
1188                          ;*Macro unroll: 	hCODE 2, "CP", CP
1188                          ALIGN   2   
1188                CP:          
1188   00                     NOP      
1189   CD 3C 06               CALL   doLIST   
118C   62 06 3C 00            DW   DoUSE,vvUSER   
1190                VVUSER:   .SET   vvUSER + CELLL   
1190                             ;   NP          ( -- a )
1190                             ;               Point to the bottom of the name dictionary.
1190                          ;*Macro unroll: hUSER   2,'NP',NP
1190                          ;*Macro unroll: 	hCODE 2, "NP", NP
1190                          ALIGN   2   
1190                NP:          
1190   00                     NOP      
1191   CD 3C 06               CALL   doLIST   
1194   62 06 3E 00            DW   DoUSE,vvUSER   
1198                VVUSER:   .SET   vvUSER + CELLL   
1198                             ;   LAST        ( -- a )
1198                             ;               Point to the last name in the name dictionary.
1198                          ;*Macro unroll: mUSER   4,'LAST',LAST
1198                          ;*Macro unroll: 	mCODE 4, "LAST", LAST
1198                          ALIGN   2   
1198                LAST:        
1198                VVCODE:   .SET   $   
1198                VVLEN:    .SET   (4 & 01FH) / CELLL   
142E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
142E                VVNAME:   .SET   $   
142E   98 11 3C 14            DW   vvCODE,vvLINK   
1432                VVLINK:   .SET   $   
1432   04 4C 41 53 54         DB   4,"LAST"   
1198                          .ORG   vvCODE   
1198   00                     NOP      
1199   CD 3C 06               CALL   doLIST   
119C   62 06 40 00            DW   DoUSE,vvUSER   
11A0                VVUSER:   .SET   vvUSER + CELLL   
11A0                             ;   forth       ( -- a )
11A0                             ;               Point to the last name in the name dictionary.
11A0                          ;*Macro unroll: hUSER   5,'forth',VFRTH
11A0                          ;*Macro unroll: 	hCODE 5, "forth", VFRTH
11A0                          ALIGN   2   
11A0                VFRTH:       
11A0   00                     NOP      
11A1   CD 3C 06               CALL   doLIST   
11A4   62 06 42 00            DW   DoUSE,vvUSER   
11A8                VVUSER:   .SET   vvUSER + CELLL   
11A8                             ;   _TYPE       ( b u -- )
11A8                             ;               Display a string. Filter non-printing characters.
11A8                          ;*Macro unroll: mCOLON  5,'_TYPE',UTYPE
11A8                          ;*Macro unroll:  mCODE 5, "_TYPE", UTYPE
11A8                          ALIGN   2   
11A8                UTYPE:       
11A8                VVCODE:   .SET   $   
11A8                VVLEN:    .SET   (5 & 01FH) / CELLL   
1424                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1424                VVNAME:   .SET   $   
1424   A8 11 32 14            DW   vvCODE,vvLINK   
1428                VVLINK:   .SET   $   
1428   05 5F 54 59 50 45      DB   5,"_TYPE"   
11A8                          .ORG   vvCODE   
11A8   00                     NOP      
11A9   CD 3C 06               CALL   doLIST   
11AC   4C 10                  DW   TOR   ;start count down loop
11AE   9E 0E C0 11            DW   BRAN,UTYP2   ;skip first pass
11B2                UTYP1:       
11B2   68 10 C8 0E 88 07 EE 0B DW   DUPP,CAT,TCHAR,EMIT   ;display only printable
11BA   4A 06 01 00 7A 01      DW   DOLIT,1,PLUS   ;increment address
11C0                UTYP2:       
11C0   96 06 B2 11            DW   DONXT,UTYP1   ;loop till done
11C4   6C 10 8A 06            DW   DROP,EXIT   
11C8                             ;   dm+         ( a u -- a )
11C8                             ;               Dump u bytes from , leaving a+u on the stack.
11C8                          ;*Macro unroll: hCOLON  3,'dm+',DMP
11C8                          ;*Macro unroll:  hCODE 3, "dm+", DMP
11C8                          ALIGN   2   
11C8                DMP:         
11C8   00                     NOP      
11C9   CD 3C 06               CALL   doLIST   
11CC   78 10 4A 06 04 00 B6 0C DW   OVER,DOLIT,4,UDOTR   ;display address
11D4   1E 0C 4C 10            DW   SPACE,TOR   ;start count down loop
11D8   9E 0E EC 11            DW   BRAN,PDUM2   ;skip first pass
11DC                PDUM1:       
11DC   68 10 C8 0E 4A 06 03 00 B6 0C DW   DUPP,CAT,DOLIT,3,UDOTR   ;display numeric data
11E6   4A 06 01 00 7A 01      DW   DOLIT,1,PLUS   ;increment address
11EC                PDUM2:       
11EC   96 06 DC 11            DW   DONXT,PDUM1   ;loop till done
11F0   8A 06                  DW   EXIT   
11F2                             ;   DUMP        ( a u -- )
11F2                             ;               Dump u bytes from a, in a formatted manner.
11F2                          ;*Macro unroll: mCOLON  4,'DUMP',DUMP
11F2                          ;*Macro unroll:  mCODE 4, "DUMP", DUMP
11F2                          ALIGN   2   
11F2                DUMP:        
11F2                VVCODE:   .SET   $   
11F2                VVLEN:    .SET   (4 & 01FH) / CELLL   
141A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
141A                VVNAME:   .SET   $   
141A   F2 11 28 14            DW   vvCODE,vvLINK   
141E                VVLINK:   .SET   $   
141E   04 44 55 4D 50         DB   4,"DUMP"   
11F2                          .ORG   vvCODE   
11F2   00                     NOP      
11F3   CD 3C 06               CALL   doLIST   
11F6   28 11 B8 0E 4C 10 62 07 DW   BASE,AT,TOR,HEX   ;save radix, set hex
11FE   4A 06 10 00 12 03      DW   DOLIT,16,SLASH   ;change count to lines
1204   4C 10                  DW   TOR   ;start count down loop
1206                DUMP1:       
1206   7C 0C 4A 06 10 00 A6 10 C8 11 DW   CR,DOLIT,16,DDUP,DMP   ;display numeric
1210   8E 10 8E 10            DW   ROT,ROT   
1214   1E 0C 1E 0C A8 11      DW   SPACE,SPACE,UTYPE   ;display printable characters
121A   FA 0B 84 01            DW   NUFQ,INVER   ;user control
121E   92 0E 2A 12            DW   QBRAN,DUMP2   
1222   96 06 06 12            DW   DONXT,DUMP1   ;loop till done
1226   9E 0E 2E 12            DW   BRAN,DUMP3   
122A                DUMP2:       
122A   5A 10 6C 10            DW   RFROM,DROP   ;cleanup loop stack, early exit
122E                DUMP3:       
122E   6C 10 5A 10 28 11 AE 0E DW   DROP,RFROM,BASE,STORE   ;reSTORE radix
1236   8A 06                  DW   EXIT   
1238                             ;   .S          ( ... -- ... )
1238                             ;               Display the contents of the data stack.
1238                          ;*Macro unroll: mCOLON  2,'.S',DOTS
1238                          ;*Macro unroll:  mCODE 2, ".S", DOTS
1238                          ALIGN   2   
1238                DOTS:        
1238                VVCODE:   .SET   $   
1238                VVLEN:    .SET   (2 & 01FH) / CELLL   
1412                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1412                VVNAME:   .SET   $   
1412   38 12 1E 14            DW   vvCODE,vvLINK   
1416                VVLINK:   .SET   $   
1416   02 2E 53               DB   2,".S"   
1238                          .ORG   vvCODE   
1238   00                     NOP      
1239   CD 3C 06               CALL   doLIST   
123C   7C 0C D2 10            DW   CR,DEPTH   ;stack depth
1240   4C 10                  DW   TOR   ;start count down loop
1242   9E 0E 4C 12            DW   BRAN,DOTS2   ;skip first pass
1246                DOTS1:       
1246   D0 0E BE 10 DE 0C      DW   RAT,PICK,DOT   ;index stack, display contents
124C                DOTS2:       
124C   96 06 46 12            DW   DONXT,DOTS1   ;loop till done
1250                          ;*Macro unroll:  mDSTR DOTQP,' <sp'
1250   96 0C                  DW   DOTQP   
1252                VVLEN:    .SET   $   
1252   00 20 3C 73 70         DB   0," <sp"   
1257                VVCODE:   .SET   $   
1252                          .ORG   vvLEN   
1252   04                     DB   vvCODE - vvLEN - 1   
1257                          .ORG   vvCODE   
1257   8A 06                  DW   EXIT   
1259                             ;   !CSP        ( -- )
1259                             ;               Save stack pointer in CSP for error checking.
1259                             ;   ?CSP        ( -- )
1259                             ;               Abort if stack pointer differs from that saved in CSP.
1259                             ;   >NAME       ( ca -- na | F )
1259                             ;               Convert code address to a name address.
1259                          ;*Macro unroll:  mCOLON  5,'>NAME',TNAME
1259                          ;*Macro unroll:  mCODE 5, ">NAME", TNAME
1259                          ALIGN   2   
125A                TNAME:       
125A                VVCODE:   .SET   $   
125A                VVLEN:    .SET   (5 & 01FH) / CELLL   
1408                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1408                VVNAME:   .SET   $   
1408   5A 12 16 14            DW   vvCODE,vvLINK   
140C                VVLINK:   .SET   $   
140C   05 3E 4E 41 4D 45      DB   5,">NAME"   
125A                          .ORG   vvCODE   
125A   00                     NOP      
125B   CD 3C 06               CALL   doLIST   
125E   80 11                  DW   CRRNT   ;vocabulary link
1260                TNAM1:       
1260   7C 03 B8 0E 80 10      DW   CELLP,AT,QDUP   ;check all vocabularies
1266   92 0E 98 12            DW   QBRAN,TNAM4   
126A   A6 10                  DW   DDUP   
126C                TNAM2:       
126C   B8 0E 68 10            DW   AT,DUPP   ;?last word in a vocabulary
1270   92 0E 84 12            DW   QBRAN,TNAM3   
1274   A6 10 9C 09 70 01      DW   DDUP,NAMET,XORR   ;compare
127A   92 0E 84 12            DW   QBRAN,TNAM3   
127E   88 03                  DW   CELLM   ;continue with next word
1280   9E 0E 6C 12            DW   BRAN,TNAM2   
1284                TNAM3:       
1284   70 10 6C 10 80 10      DW   SWAP,DROP,QDUP   
128A   92 0E 60 12            DW   QBRAN,TNAM1   
128E   70 10 6C 10 70 10 6C 10 8A 06 DW   SWAP,DROP,SWAP,DROP,EXIT   
1298                TNAM4:       
1298   6C 10 4A 06 00 00 8A 06 DW   DROP,DOLIT,0,EXIT   ;false flag
12A0                             ;   .ID         ( na -- )
12A0                             ;               Display the name at address.
12A0                          ;*Macro unroll: mCOLON  3,'.ID',DOTID
12A0                          ;*Macro unroll:  mCODE 3, ".ID", DOTID
12A0                          ALIGN   2   
12A0                DOTID:       
12A0                VVCODE:   .SET   $   
12A0                VVLEN:    .SET   (3 & 01FH) / CELLL   
1400                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1400                VVNAME:   .SET   $   
1400   A0 12 0C 14            DW   vvCODE,vvLINK   
1404                VVLINK:   .SET   $   
1404   03 2E 49 44            DB   3,".ID"   
12A0                          .ORG   vvCODE   
12A0   00                     NOP      
12A1   CD 3C 06               CALL   doLIST   
12A4   80 10                  DW   QDUP   ;if zero no name
12A6   92 0E B6 12            DW   QBRAN,DOTI1   
12AA   2E 0F 4A 06 1F 00 5C 01 DW   COUNT,DOLIT,MASKK,ANDD   ;mask lexicon bits
12B2   A8 11 8A 06            DW   UTYPE,EXIT   ;display name string
12B6                DOTI1:       
12B6                          ;*Macro unroll:  mDSTR   DOTQP,' {noName}'
12B6   96 0C                  DW   DOTQP   
12B8                VVLEN:    .SET   $   
12B8   00 20 7B 6E 6F 4E 61 6D 65 7D DB   0," {noName}"   
12C2                VVCODE:   .SET   $   
12B8                          .ORG   vvLEN   
12B8   09                     DB   vvCODE - vvLEN - 1   
12C2                          .ORG   vvCODE   
12C2   8A 06                  DW   EXIT   
12C4                             ;   SEE         ( -- ; <string> )
12C4                             ;               A simple decompiler.
12C4                          ;*Macro unroll: mCOLON  3,'SEE',SEE
12C4                          ;*Macro unroll:  mCODE 3, "SEE", SEE
12C4                          ALIGN   2   
12C4                SEE:         
12C4                VVCODE:   .SET   $   
12C4                VVLEN:    .SET   (3 & 01FH) / CELLL   
13F8                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
13F8                VVNAME:   .SET   $   
13F8   C4 12 04 14            DW   vvCODE,vvLINK   
13FC                VVLINK:   .SET   $   
13FC   03 53 45 45            DB   3,"SEE"   
12C4                          .ORG   vvCODE   
12C4   00                     NOP      
12C5   CD 3C 06               CALL   doLIST   
12C8   D4 03                  DW   TICK   ;starting address
12CA   7C 0C 7C 03            DW   CR,CELLP   
12CE                SEE1:        
12CE   7C 03 68 10 B8 0E 68 10 DW   CELLP,DUPP,AT,DUPP   ;?does it contain a zero
12D6   92 0E DC 12            DW   QBRAN,SEE2   
12DA   5A 12                  DW   TNAME   ;?is it a name
12DC                SEE2:        
12DC   80 10                  DW   QDUP   ;name address or zero
12DE   92 0E EA 12            DW   QBRAN,SEE3   
12E2   1E 0C A0 12            DW   SPACE,DOTID   ;display name
12E6   9E 0E F0 12            DW   BRAN,SEE4   
12EA                SEE3:        
12EA   68 10 B8 0E CE 0C      DW   DUPP,AT,UDOT   ;display number
12F0                SEE4:        
12F0   FA 0B                  DW   NUFQ   ;user control
12F2   92 0E CE 12            DW   QBRAN,SEE1   
12F6   6C 10 8A 06            DW   DROP,EXIT   
12FA                             ;   WORDS       ( -- )
12FA                             ;               Display the names in the context vocabulary.
12FA                             ;   COLD        ( -- )
12FA                             ;               The hilevel cold start sequence.
12FA                LASTN:    EQU   vvNAME+4   ;last name address
2000                          .ORG   END_ROM   
2000                          .ORG   START_RAM   
2000                          DS   DTS   ; data stack size
2200                SPP:         ; SP0 grows down
2200                TIBB:        
2200                          DS   RTS   ; return stack size
2400                RPP:         ; RP0 grows down (into TIBB)
2400                          ALIGN   $100   
2400                SERBUF:   DS   SER_BUFSIZE   
243F   00 00        SERINPTR:   DW   0   
2441   00 00        SERRDPTR:   DW   0   
2443   00 00        SERBUFUSED:   DW   0   
2445                UPP:         
2445   00 00        VARSZERO:   DW   0   ; SP0
2447   00 00        VARRZERO:   DW   0   ; RP0
2449   00 00        VARTQKEY:   DW   0   ; '?KEY
244B   00 00        VARTEMIT:   DW   0   ; 'EMIT
244D   00 00        VARTEXPE:   DW   0   ; 'EXPECT
244F   00 00        VARTTAP:   DW   0   ; 'TAP
2451   00 00        VARTECHO:   DW   0   ; 'ECHO
2453   00 00        VARTPROM:   DW   0   ; 'PROMPT
2455   00 00        VARBASE:   DW   0   ; BASE
2457   00 00        VARTEMP:   DW   0   ; tmp
2459   00 00        VARSPAN:   DW   0   ; SPAN
245B   00 00        VARINN:   DW   0   ; >IN
245D   00 00        VARNTIB:   DW   0   ; #TIB
245F   00 00        VARTIB:   DW   0   ; TIB
2461   00 00        VARCSP:   DW   0   ; CSP
2463   00 00        VARTEVAL:   DW   0   ; 'EVAL
2465   00 00        VARTNUMB:   DW   0   ; 'NUMBER
2467   00 00        VARHLD:   DW   0   ; HLD
2469   00 00        VARHANDL:   DW   0   ; HANDLER
246B   00 00        VARCNTXT:   DW   0   ; CONTEXT pointer
246D   00 00        VARVOCABS:   DW   0   ; vocabulary stack    ???
246F   00 00        VARCRRNT:   DW   0   ; CURRENT pointer
2471   00 00        VARVOCABLP:   DW   0   ; vocabulary link pointer ???
2473   00 00        VARCP:    DW   0   ; CP  for runing phase on RAM
2475   00 00        VARNP:    DW   0   ; NP  for runing phase on RAM
2477   00 00        VARLAST:   DW   0   ; LAST
2479   00 00        VARVFRTH:   DW   0   ; FORTH   \ mullti-user ???
247B   00 00        VARVOCABL:   DW   0   ; vocabulary link       ???
247D                VECTAB:      
247D   00 00        VRST08:   DW   0   
247F   00 00        VRST10:   DW   0   
2481   00 00        VRST18:   DW   0   
2483   00 00        VRST20:   DW   0   
2485   00 00        VRST28:   DW   0   
2487   00 00        VRST30:   DW   0   
2489   00 00        VINT:     DW   0   
248B   00 00        VNMI:     DW   0   
248D   00 00        TESCNT:   DW   0   ; the current test number
248F   00 00        TESDPTH:   DW   0   ; saved stack depth
2491                CPP:         ; grows up
FFFE                          .ORG   END_RAM - 2   
FFFE                NPP:         ; grows down
FFFE                VVCODE:   .SET   CPP   
FFFE                VVNAME:   .SET   NPP   
FFFE                             ; IF TESTMODE
2491                          .ORG   CPP   
2491                             ; utility words
2491                             ; report the test number to a numeric output device
2491                          ;*Macro unroll: hCOLON 2,"T.",TESDOT
2491                          ;*Macro unroll:  hCODE 2, "T.", TESDOT
2491                          ALIGN   2   
2492                TESDOT:      
2492   00                     NOP      
2493   CD 3C 06               CALL   doLIST   
2496                             ; DW  DOT
2496                             ; DW  EXIT
2496   92 0E A2 24            DW   QBRAN,TESDOT1   
249A   4A 06 58 00 EE 0B 8A 06 DW   DOLIT,$58,EMIT,EXIT   
24A2                TESDOT1:      
24A2   4A 06 4F 00 EE 0B 8A 06 DW   DOLIT,$4F,EMIT,EXIT   
24AA                             ; halt the system
24AA                          ;*Macro unroll: hCOLON 4,"halt",TESHALT
24AA                          ;*Macro unroll:  hCODE 4, "halt", TESHALT
24AA                          ALIGN   2   
24AA                TESHALT:      
24AA   00                     NOP      
24AB   CD 3C 06               CALL   doLIST   
24AE   8C 0E                  DW   QUIT   
24B0                             ; compute h1 by hashing x1 and h0
24B0                             ; ( x1 h0 -- h1 )
24B0                             ; : hash ( x1 h0 -- h1 )
24B0                             ;  swap 1+ xor
24B0                             ; ;
24B0                          ;*Macro unroll: hCOLON 4,"hash",TESHASH
24B0                          ;*Macro unroll:  hCODE 4, "hash", TESHASH
24B0                          ALIGN   2   
24B0                TESHASH:      
24B0   00                     NOP      
24B1   CD 3C 06               CALL   doLIST   
24B4   70 10 AA 03 70 01      DW   SWAP,ONEP,XORR   
24BA   8A 06                  DW   EXIT   
24BC                             ; hash n items from the stack and return the hash code
24BC                             ; ( x1 x2 ... xn n -- h )
24BC                             ; : hash-n ( x1 x2 ... xn n -- h )
24BC                             ;  0 >R
24BC                             ;  BEGIN
24BC                             ;   dup 0 >
24BC                             ;  WHILE
24BC                             ;   swap R> hash >R
24BC                             ;   1-
24BC                             ;  REPEAT
24BC                             ;  drop R>
24BC                             ; ;
24BC                          ;*Macro unroll: hCOLON 6,"hash-n",TESHASHN
24BC                          ;*Macro unroll:  hCODE 6, "hash-n", TESHASHN
24BC                          ALIGN   2   
24BC                TESHASHN:      
24BC   00                     NOP      
24BD   CD 3C 06               CALL   doLIST   
24C0   4A 06 00 00 4C 10      DW   DOLIT,0,TOR   
24C6                TESHASHN1:      
24C6   68 10 4A 06 00 00 A0 03 92 0E E0 24 DW   DUPP,DOLIT,0,GREAT,QBRAN,TESHASHN2   
24D2   70 10 5A 10 B0 24 4C 10 DW   SWAP,RFROM,TESHASH,TOR   
24DA   B6 03 9E 0E C6 24      DW   ONEM,BRAN,TESHASHN1   
24E0                TESHASHN2:      
24E0   6C 10 5A 10            DW   DROP,RFROM   
24E4   8A 06                  DW   EXIT   
24E6                             ; start testing
24E6                             ; : Tstart
24E6                             ;  0 Tcount !
24E6                          ;*Macro unroll: mCOLON 6,"Tstart",TESSTRT
24E6                          ;*Macro unroll:  mCODE 6, "Tstart", TESSTRT
24E6                          ALIGN   2   
24E6                TESSTRT:      
24E6                VVCODE:   .SET   $   
24E6                VVLEN:    .SET   (6 & 01FH) / CELLL   
FFF2                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
FFF2                VVNAME:   .SET   $   
FFF2   E6 24 FC 13            DW   vvCODE,vvLINK   
FFF6                VVLINK:   .SET   $   
FFF6   06 54 73 74 61 72 74   DB   6,"Tstart"   
24E6                          .ORG   vvCODE   
24E6   00                     NOP      
24E7   CD 3C 06               CALL   doLIST   
24EA   4A 06 00 00 8D 24 AE 0E DW   DOLIT,0,TESCNT,STORE   
24F2   8A 06                  DW   EXIT   
24F4                             ; start a unit test
24F4                             ; : T{ ( -- )
24F4                             ;  Tcount @ 1+ dup T. Tcount !
24F4                             ;  depth Tdepth !
24F4                          ;*Macro unroll: mCOLON 2,"T{",TESLBR
24F4                          ;*Macro unroll:  mCODE 2, "T{", TESLBR
24F4                          ALIGN   2   
24F4                TESLBR:      
24F4                VVCODE:   .SET   $   
24F4                VVLEN:    .SET   (2 & 01FH) / CELLL   
FFEA                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
FFEA                VVNAME:   .SET   $   
FFEA   F4 24 F6 FF            DW   vvCODE,vvLINK   
FFEE                VVLINK:   .SET   $   
FFEE   02 54 7B               DB   2,"T{"   
24F4                          .ORG   vvCODE   
24F4   00                     NOP      
24F5   CD 3C 06               CALL   doLIST   
24F8   8D 24 B8 0E AA 03 68 10 92 24 8D 24 AE 0E DW   TESCNT,AT,ONEP,DUPP,TESDOT,TESCNT,STORE   
2506   D2 10 8F 24 AE 0E      DW   DEPTH,TESDPTH,STORE   
250C   8A 06                  DW   EXIT   
250E                             ; finish a unit test,
250E                             ; : }T ( y1 y2 ... yn -- hy )
250E                             ;  depth Tdepth @ - ( y1 y2 ... yn Ny )
250E                             ;  hash-n ( hy )
250E                             ;  depth Tdepth ! ( hy )
250E                          ;*Macro unroll: mCOLON 2,"}T",TESRBR
250E                          ;*Macro unroll:  mCODE 2, "}T", TESRBR
250E                          ALIGN   2   
250E                TESRBR:      
250E                VVCODE:   .SET   $   
250E                VVLEN:    .SET   (2 & 01FH) / CELLL   
FFE2                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
FFE2                VVNAME:   .SET   $   
FFE2   0E 25 EE FF            DW   vvCODE,vvLINK   
FFE6                VVLINK:   .SET   $   
FFE6   02 7D 54               DB   2,"}T"   
250E                          .ORG   vvCODE   
250E   00                     NOP      
250F   CD 3C 06               CALL   doLIST   
2512   D2 10 8F 24 B8 0E B4 01 DW   DEPTH,TESDPTH,AT,SUBB   
251A   BC 24                  DW   TESHASHN   
251C   D2 10 8F 24 AE 0E      DW   DEPTH,TESDPTH,STORE   
2522   8A 06                  DW   EXIT   
2524                             ; compare actual output with expected output
2524                             ; : == ( hy x1 x2 ... xn -- )
2524                             ;  depth Tdepth @ - ( hy x1 x2 .. xn Nx )
2524                             ;  hash-n ( hy hx )
2524                             ;  = 0= IF halt THEN
2524                          ;*Macro unroll: mCOLON 2,"==",TESEQ
2524                          ;*Macro unroll:  mCODE 2, "==", TESEQ
2524                          ALIGN   2   
2524                TESEQ:       
2524                VVCODE:   .SET   $   
2524                VVLEN:    .SET   (2 & 01FH) / CELLL   
FFDA                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
FFDA                VVNAME:   .SET   $   
FFDA   24 25 E6 FF            DW   vvCODE,vvLINK   
FFDE                VVLINK:   .SET   $   
FFDE   02 3D 3D               DB   2,"=="   
2524                          .ORG   vvCODE   
2524   00                     NOP      
2525   CD 3C 06               CALL   doLIST   
2528   D2 10 8F 24 B8 0E B4 01 DW   DEPTH,TESDPTH,AT,SUBB   
2530   BC 24                  DW   TESHASHN   
2532   CE 01 92 0E 3A 25      DW   EQUAL,QBRAN,TESEQ1   
2538   AA 24                  DW   TESHALT   
253A                TESEQ1:      
253A   8A 06                  DW   EXIT   
253C                             ; signal end of testing
253C                             ; : Tend ( -- )
253C                             ;  65535 ( 0xFFFF) T.
253C                             ; ;
253C                          ;*Macro unroll: mCOLON 4,"Tend",TESEND
253C                          ;*Macro unroll:  mCODE 4, "Tend", TESEND
253C                          ALIGN   2   
253C                TESEND:      
253C                VVCODE:   .SET   $   
253C                VVLEN:    .SET   (4 & 01FH) / CELLL   
FFD0                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
FFD0                VVNAME:   .SET   $   
FFD0   3C 25 DE FF            DW   vvCODE,vvLINK   
FFD4                VVLINK:   .SET   $   
FFD4   04 54 65 6E 64         DB   4,"Tend"   
253C                          .ORG   vvCODE   
253C   00                     NOP      
253D   CD 3C 06               CALL   doLIST   
2540   4A 06 FF FF 92 24      DW   DOLIT,-1,TESDOT   
2546   8A 06                  DW   EXIT   
2548                TESTS_START:      
2548                             ;             LD HL,DONE
2548                             ;             CALL PRINTSZ
2548                             ;             HALT
2548                             ; DONE:       .CSTR "Done!\r\n"
2548                             ; ENDIF
2548                          .END      


TESTMODE:           0000 DEFINED AT LINE 3
MEM_SIZE:           10000 DEFINED AT LINE 1 IN constants.z80
                    > USED AT LINE 3 IN constants.z80
                    > USED AT LINE 12 IN constants.z80
ROM_SIZE:           2000 DEFINED AT LINE 2 IN constants.z80
                    > USED AT LINE 3 IN constants.z80
                    > USED AT LINE 6 IN constants.z80
                    > USED AT LINE 8 IN constants.z80
RAM_SIZE:           E000 DEFINED AT LINE 3 IN constants.z80
                    > USED AT LINE 9 IN constants.z80
START_ROM:          0000 DEFINED AT LINE 5 IN constants.z80
                    > USED AT LINE 8
END_ROM:            2000 DEFINED AT LINE 6 IN constants.z80
                    > USED AT LINE 4 IN word.macro.z80
                    > USED AT LINE 89
START_RAM:          2000 DEFINED AT LINE 8 IN constants.z80
                    > USED AT LINE 9 IN constants.z80
                    > USED AT LINE 90
END_RAM:            10000 DEFINED AT LINE 9 IN constants.z80
                    > USED AT LINE 59 IN variables.z80
BM:                 0000 DEFINED AT LINE 11 IN constants.z80
                    > USED AT LINE 5 IN constants.z80
                    > USED AT LINE 6 IN constants.z80
                    > USED AT LINE 8 IN constants.z80
                    > USED AT LINE 12 IN constants.z80
EM:                 10000 DEFINED AT LINE 12 IN constants.z80
COMPO:              0020 DEFINED AT LINE 14 IN constants.z80
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
IMEDD:              0040 DEFINED AT LINE 15 IN constants.z80
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 133 IN core-compiler.z80
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
MASKK:              001F DEFINED AT LINE 16 IN constants.z80
CHARR:              0001 DEFINED AT LINE 18 IN constants.z80
CELLL:              0002 DEFINED AT LINE 19 IN constants.z80
                    > USED AT LINE 39 IN constants.z80
                    > USED AT LINE 40 IN constants.z80
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 345 IN core-alu.z80
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 350 IN core-alu.z80
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 355 IN core-alu.z80
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 145 IN core-interpret.z80
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 184 IN core-memory.z80
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 90 IN core-stacks.z80
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 33
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 33
                    > USED AT LINE 63
                    > USED AT LINE 63
                    > USED AT LINE 63
                    > USED AT LINE 63
                    > USED AT LINE 63
                    > USED AT LINE 63
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 33
                    > USED AT LINE 63
                    > USED AT LINE 63
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 33
                    > USED AT LINE 63
                    > USED AT LINE 65 IN core-user.z80
                    > USED AT LINE 63
                    > USED AT LINE 63
                    > USED AT LINE 63
                    > USED AT LINE 63
                    > USED AT LINE 63
                    > USED AT LINE 63
                    > USED AT LINE 96 IN core-user.z80
                    > USED AT LINE 63
                    > USED AT LINE 102 IN core-user.z80
                    > USED AT LINE 63
                    > USED AT LINE 63
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 33
                    > USED AT LINE 63
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
BASEE:              000A DEFINED AT LINE 20 IN constants.z80
                    > USED AT LINE 13 IN defaults.z80
VOCSS:              0008 DEFINED AT LINE 21 IN constants.z80
                    > USED AT LINE 96 IN core-user.z80
MAXCHAR:            00FF DEFINED AT LINE 23 IN constants.z80
MAXSIGNED:          7FFF DEFINED AT LINE 24 IN constants.z80
MAXUNSIGNED:        FFFF DEFINED AT LINE 25 IN constants.z80
MAXNEGATIVE:        8000 DEFINED AT LINE 26 IN constants.z80
BKSPP:              0008 DEFINED AT LINE 28 IN constants.z80
                    > USED AT LINE 187 IN core-io.z80
                    > USED AT LINE 189 IN core-io.z80
                    > USED AT LINE 204 IN core-io.z80
LFF:                000A DEFINED AT LINE 29 IN constants.z80
CRR:                000D DEFINED AT LINE 30 IN constants.z80
                    > USED AT LINE 132 IN core-io.z80
SPACEE:             0020 DEFINED AT LINE 31 IN constants.z80
                    > USED AT LINE 74 IN core-format.z80
                    > USED AT LINE 81 IN core-format.z80
TIC:                0027 DEFINED AT LINE 32 IN constants.z80
MINUSS:             002D DEFINED AT LINE 33 IN constants.z80
                    > USED AT LINE 44 IN core-format.z80
UNDERSC:            005F DEFINED AT LINE 34 IN constants.z80
CALLL:              CD00 DEFINED AT LINE 36 IN constants.z80
                    > USED AT LINE 119 IN core-compiler.z80
US:                 003A DEFINED AT LINE 38 IN constants.z80
                    > USED AT LINE 50
RTS:                0200 DEFINED AT LINE 39 IN constants.z80
                    > USED AT LINE 5 IN variables.z80
DTS:                0200 DEFINED AT LINE 40 IN constants.z80
                    > USED AT LINE 2 IN variables.z80
RET_STACK_SIZE:     0100 DEFINED AT LINE 42 IN constants.z80
DATA_STACK_SIZE:    0100 DEFINED AT LINE 43 IN constants.z80
INT_ADDR:           0038 DEFINED AT LINE 45 IN constants.z80
SER_BUFSIZE:        003F DEFINED AT LINE 46 IN constants.z80
                    > USED AT LINE 11 IN interrupt.z80
                    > USED AT LINE 19 IN interrupt.z80
                    > USED AT LINE 21 IN serial.z80
                    > USED AT LINE 9 IN variables.z80
SER_FULLSIZE:       0030 DEFINED AT LINE 47 IN constants.z80
                    > USED AT LINE 28 IN interrupt.z80
SER_EMPTYSIZE:      0005 DEFINED AT LINE 48 IN constants.z80
                    > USED AT LINE 30 IN serial.z80
RTS_HIGH:           00D6 DEFINED AT LINE 50 IN constants.z80
                    > USED AT LINE 30 IN interrupt.z80
RTS_LOW:            0096 DEFINED AT LINE 51 IN constants.z80
                    > USED AT LINE 11 IN serial.z80
                    > USED AT LINE 32 IN serial.z80
TRUEE:              00-1 DEFINED AT LINE 53 IN constants.z80
                    > USED AT LINE 41 IN core-io.z80
FALSEE:             0000 DEFINED AT LINE 54 IN constants.z80
                    > USED AT LINE 34 IN core-io.z80
VVCODE:             253C DEFINED AT LINE 12
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 42
                    > USED AT LINE 43
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 42
                    > USED AT LINE 43
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 42
                    > USED AT LINE 43
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 42
                    > USED AT LINE 43
                    > USED AT LINE 42
                    > USED AT LINE 43
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 42
                    > USED AT LINE 43
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 42
                    > USED AT LINE 43
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 42
                    > USED AT LINE 43
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
VVNAME:             FFD0 DEFINED AT LINE 15
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 87
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
VVLINK:             FFD4 DEFINED AT LINE 17
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
VVUSER:             11AA DEFINED AT LINE 63
                    > USED AT LINE 32
                    > USED AT LINE 33
                    > USED AT LINE 32
                    > USED AT LINE 33
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 32
                    > USED AT LINE 33
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 32
                    > USED AT LINE 33
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 65 IN core-user.z80
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 96 IN core-user.z80
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 102 IN core-user.z80
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 32
                    > USED AT LINE 33
                    > USED AT LINE 62
                    > USED AT LINE 63
RESET:              0000 DEFINED AT LINE 9
RST08:              0008 DEFINED AT LINE 12
RST10:              0010 DEFINED AT LINE 16
RST18:              0018 DEFINED AT LINE 20
RST20:              0020 DEFINED AT LINE 24
RST28:              0028 DEFINED AT LINE 28
RST30:              0030 DEFINED AT LINE 32
RST38:              0038 DEFINED AT LINE 36
RST66:              0066 DEFINED AT LINE 40
INIT:               006C DEFINED AT LINE 42
                    > USED AT LINE 9
SER_INTR:           0093 DEFINED AT LINE 1 IN interrupt.z80
                    > USED AT LINE 43
NOTFULL:            00A8 DEFINED AT LINE 16 IN interrupt.z80
                    > USED AT LINE 12 IN interrupt.z80
NOTWRAP:            00B4 DEFINED AT LINE 22 IN interrupt.z80
                    > USED AT LINE 20 IN interrupt.z80
RTS0:               00C8 DEFINED AT LINE 32 IN interrupt.z80
                    > USED AT LINE 6 IN interrupt.z80
                    > USED AT LINE 14 IN interrupt.z80
                    > USED AT LINE 29 IN interrupt.z80
INIT_IO:            00D1 DEFINED AT LINE 4 IN serial.z80
                    > USED AT LINE 25 IN core-io.z80
RXA:                00E5 DEFINED AT LINE 16 IN serial.z80
                    > USED AT LINE 37 IN core-io.z80
RXA1:               00F2 DEFINED AT LINE 24 IN serial.z80
                    > USED AT LINE 22 IN serial.z80
RXA2:               0105 DEFINED AT LINE 34 IN serial.z80
                    > USED AT LINE 31 IN serial.z80
TXA:                0109 DEFINED AT LINE 40 IN serial.z80
                    > USED AT LINE 49 IN core-io.z80
TXA1:               010A DEFINED AT LINE 42 IN serial.z80
                    > USED AT LINE 45 IN serial.z80
QRXA:               0114 DEFINED AT LINE 50 IN serial.z80
                    > USED AT LINE 32 IN core-io.z80
DEFAULTS:           011A DEFINED AT LINE 3 IN defaults.z80
                    > USED AT LINE 38 IN constants.z80
                    > USED AT LINE 48
UZERO:              011A DEFINED AT LINE 4 IN defaults.z80
                    > USED AT LINE 58 IN core-kernel.z80
                    > USED AT LINE 59 IN core-kernel.z80
DEFSZERO:           011A DEFINED AT LINE 5 IN defaults.z80
DEFRZERO:           011C DEFINED AT LINE 6 IN defaults.z80
DEFTQKEY:           011E DEFINED AT LINE 7 IN defaults.z80
DEFTEMIT:           0120 DEFINED AT LINE 8 IN defaults.z80
DEFTEXPE:           0122 DEFINED AT LINE 9 IN defaults.z80
DEFTTAP:            0124 DEFINED AT LINE 10 IN defaults.z80
DEFTECHO:           0126 DEFINED AT LINE 11 IN defaults.z80
DEFTPROM:           0128 DEFINED AT LINE 12 IN defaults.z80
DEFBASE:            012A DEFINED AT LINE 13 IN defaults.z80
DEFTEMP:            012C DEFINED AT LINE 14 IN defaults.z80
DEFSPAN:            012E DEFINED AT LINE 15 IN defaults.z80
DEFINN:             0130 DEFINED AT LINE 16 IN defaults.z80
DEFNTIB:            0132 DEFINED AT LINE 17 IN defaults.z80
DEFTIB:             0134 DEFINED AT LINE 18 IN defaults.z80
DEFCSP:             0136 DEFINED AT LINE 19 IN defaults.z80
DEFTEVAL:           0138 DEFINED AT LINE 20 IN defaults.z80
DEFTNUMB:           013A DEFINED AT LINE 21 IN defaults.z80
DEFHLD:             013C DEFINED AT LINE 22 IN defaults.z80
DEFHANDL:           013E DEFINED AT LINE 23 IN defaults.z80
DEFCNTXT:           0140 DEFINED AT LINE 24 IN defaults.z80
DEFVOCABS:          0142 DEFINED AT LINE 25 IN defaults.z80
DEFCRRENT:          0144 DEFINED AT LINE 26 IN defaults.z80
DEFVOCABLP:         0146 DEFINED AT LINE 27 IN defaults.z80
DEFCP:              0148 DEFINED AT LINE 28 IN defaults.z80
DEFNP:              014A DEFINED AT LINE 29 IN defaults.z80
DEFLAST:            014C DEFINED AT LINE 30 IN defaults.z80
DEFVFRTH:           014E DEFINED AT LINE 31 IN defaults.z80
DEFVOCABL:          0150 DEFINED AT LINE 32 IN defaults.z80
DEFCOLD:            0152 DEFINED AT LINE 33 IN defaults.z80
ULAST:              0154 DEFINED AT LINE 34 IN defaults.z80
                    > USED AT LINE 59 IN core-kernel.z80
END_DEFAULTS:       0154 DEFINED AT LINE 35 IN defaults.z80
                    > USED AT LINE 38 IN constants.z80
ZLESS:              0154 DEFINED AT LINE 11
                    > USED AT LINE 77 IN core-alu.z80
                    > USED AT LINE 98 IN core-alu.z80
                    > USED AT LINE 104 IN core-alu.z80
                    > USED AT LINE 106 IN core-alu.z80
                    > USED AT LINE 259 IN core-alu.z80
                    > USED AT LINE 276 IN core-alu.z80
                    > USED AT LINE 43 IN core-format.z80
                    > USED AT LINE 57 IN core-interpret.z80
                    > USED AT LINE 71 IN core-interpret.z80
                    > USED AT LINE 256 IN core-interpret.z80
VVLEN:              0002 DEFINED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 41
                    > USED AT LINE 42
                    > USED AT LINE 14
                    > USED AT LINE 41
                    > USED AT LINE 42
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 41
                    > USED AT LINE 42
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 41
                    > USED AT LINE 42
                    > USED AT LINE 41
                    > USED AT LINE 42
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 41
                    > USED AT LINE 42
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 41
                    > USED AT LINE 42
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 41
                    > USED AT LINE 42
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
ANDD:               015C DEFINED AT LINE 11
ORR:                0166 DEFINED AT LINE 11
XORR:               0170 DEFINED AT LINE 11
                    > USED AT LINE 85 IN core-alu.z80
                    > USED AT LINE 94 IN core-alu.z80
                    > USED AT LINE 103 IN core-alu.z80
                    > USED AT LINE 326 IN core-alu.z80
                    > USED AT LINE 217 IN core-io.z80
PLUS:               017A DEFINED AT LINE 11
                    > USED AT LINE 67 IN core-alu.z80
                    > USED AT LINE 72 IN core-alu.z80
                    > USED AT LINE 154 IN core-alu.z80
                    > USED AT LINE 265 IN core-alu.z80
                    > USED AT LINE 370 IN core-alu.z80
                    > USED AT LINE 44 IN core-compiler.z80
                    > USED AT LINE 215 IN core-io.z80
                    > USED AT LINE 84 IN core-stacks.z80
INVER:              0184 DEFINED AT LINE 11
                    > USED AT LINE 60 IN core-alu.z80
                    > USED AT LINE 65 IN core-alu.z80
                    > USED AT LINE 37 IN core-utils.z80
NEGAT:              0190 DEFINED AT LINE 11
                    > USED AT LINE 72 IN core-alu.z80
                    > USED AT LINE 78 IN core-alu.z80
                    > USED AT LINE 150 IN core-alu.z80
                    > USED AT LINE 261 IN core-alu.z80
                    > USED AT LINE 269 IN core-alu.z80
                    > USED AT LINE 34 IN core-interpret.z80
DNEGA:              019E DEFINED AT LINE 11
                    > USED AT LINE 328 IN core-alu.z80
SUBB:               01B4 DEFINED AT LINE 11
                    > USED AT LINE 98 IN core-alu.z80
                    > USED AT LINE 106 IN core-alu.z80
                    > USED AT LINE 128 IN core-alu.z80
                    > USED AT LINE 129 IN core-alu.z80
                    > USED AT LINE 57 IN core-interpret.z80
                    > USED AT LINE 82 IN core-interpret.z80
                    > USED AT LINE 135 IN core-interpret.z80
                    > USED AT LINE 185 IN core-memory.z80
ABSS:               01BE DEFINED AT LINE 11
ABS1:               01CC DEFINED AT LINE 79 IN core-alu.z80
EQUAL:              01CE DEFINED AT LINE 11
                    > USED AT LINE 81 IN tester.z80
EQU1:               01DE DEFINED AT LINE 88 IN core-alu.z80
                    > USED AT LINE 86 IN core-alu.z80
ULESS:              01E4 DEFINED AT LINE 11
                    > USED AT LINE 148 IN core-alu.z80
ULES1:              01FA DEFINED AT LINE 97 IN core-alu.z80
                    > USED AT LINE 95 IN core-alu.z80
LESS:               0200 DEFINED AT LINE 11
                    > USED AT LINE 111 IN core-alu.z80
                    > USED AT LINE 361 IN core-alu.z80
LESS1:              0214 DEFINED AT LINE 105 IN core-alu.z80
MAX:                021A DEFINED AT LINE 11
MAX1:               0228 DEFINED AT LINE 113 IN core-alu.z80
MIN:                022C DEFINED AT LINE 11
MIN1:               023C DEFINED AT LINE 122 IN core-alu.z80
                    > USED AT LINE 120 IN core-alu.z80
WITHI:              0240 DEFINED AT LINE 11
UPLUS:              0252 DEFINED AT LINE 49
                    > USED AT LINE 50 IN core-alu.z80
                    > USED AT LINE 156 IN core-alu.z80
UMP2:               025A DEFINED AT LINE 139 IN core-alu.z80
UMP1:               025B DEFINED AT LINE 141 IN core-alu.z80
                    > USED AT LINE 138 IN core-alu.z80
UMMOD:              025E DEFINED AT LINE 11
                    > USED AT LINE 267 IN core-alu.z80
UMM1:               0272 DEFINED AT LINE 151 IN core-alu.z80
                    > USED AT LINE 164 IN core-alu.z80
UMM2:               02A8 DEFINED AT LINE 160 IN core-alu.z80
                    > USED AT LINE 157 IN core-alu.z80
UMM3:               02AA DEFINED AT LINE 162 IN core-alu.z80
                    > USED AT LINE 159 IN core-alu.z80
UMM4:               02B6 DEFINED AT LINE 166 IN core-alu.z80
                    > USED AT LINE 149 IN core-alu.z80
MSMOD:              02C2 DEFINED AT LINE 11
MMOD1:              02DA DEFINED AT LINE 262 IN core-alu.z80
                    > USED AT LINE 260 IN core-alu.z80
MMOD2:              02E8 DEFINED AT LINE 266 IN core-alu.z80
                    > USED AT LINE 264 IN core-alu.z80
MMOD3:              02F8 DEFINED AT LINE 270 IN core-alu.z80
                    > USED AT LINE 268 IN core-alu.z80
SLMOD:              02FA DEFINED AT LINE 11
                    > USED AT LINE 281 IN core-alu.z80
                    > USED AT LINE 286 IN core-alu.z80
MODD:               0308 DEFINED AT LINE 11
SLASH:              0312 DEFINED AT LINE 11
UMSTA:              031E DEFINED AT LINE 11
                    > USED AT LINE 321 IN core-alu.z80
                    > USED AT LINE 327 IN core-alu.z80
UMSTA1:             0326 DEFINED AT LINE 298 IN core-alu.z80
                    > USED AT LINE 311 IN core-alu.z80
UMSTA2:             032D DEFINED AT LINE 304 IN core-alu.z80
UMSTA5:             0330 DEFINED AT LINE 307 IN core-alu.z80
UMSTA3:             0331 DEFINED AT LINE 309 IN core-alu.z80
                    > USED AT LINE 303 IN core-alu.z80
                    > USED AT LINE 306 IN core-alu.z80
UMSTA4:             0334 DEFINED AT LINE 312 IN core-alu.z80
STAR:               033A DEFINED AT LINE 11
MSTAR:              0344 DEFINED AT LINE 11
                    > USED AT LINE 335 IN core-alu.z80
MSTAR1:             0360 DEFINED AT LINE 329 IN core-alu.z80
SSMOD:              0362 DEFINED AT LINE 11
                    > USED AT LINE 340 IN core-alu.z80
STASL:              0370 DEFINED AT LINE 11
CELLP:              037C DEFINED AT LINE 11
                    > USED AT LINE 32 IN core-compiler.z80
                    > USED AT LINE 151 IN core-interpret.z80
                    > USED AT LINE 153 IN core-interpret.z80
                    > USED AT LINE 171 IN core-interpret.z80
                    > USED AT LINE 97 IN core-memory.z80
                    > USED AT LINE 102 IN core-memory.z80
                    > USED AT LINE 125 IN core-memory.z80
                    > USED AT LINE 74 IN core-utils.z80
                    > USED AT LINE 107 IN core-utils.z80
                    > USED AT LINE 109 IN core-utils.z80
CELLM:              0388 DEFINED AT LINE 11
                    > USED AT LINE 72 IN core-compiler.z80
                    > USED AT LINE 74 IN core-compiler.z80
                    > USED AT LINE 126 IN core-interpret.z80
                    > USED AT LINE 126 IN core-interpret.z80
                    > USED AT LINE 156 IN core-interpret.z80
                    > USED AT LINE 158 IN core-interpret.z80
                    > USED AT LINE 158 IN core-interpret.z80
                    > USED AT LINE 161 IN core-interpret.z80
                    > USED AT LINE 169 IN core-interpret.z80
                    > USED AT LINE 82 IN core-utils.z80
CELLS:              0394 DEFINED AT LINE 11
GREAT:              03A0 DEFINED AT LINE 11
ONEP:               03AA DEFINED AT LINE 11
                    > USED AT LINE 193 IN core-memory.z80
                    > USED AT LINE 21 IN tester.z80
ONEM:               03B6 DEFINED AT LINE 11
                    > USED AT LINE 41 IN tester.z80
TWSTA:              03C2 DEFINED AT LINE 11
TWSLA:              03CC DEFINED AT LINE 11
                    > USED AT LINE 193 IN core-memory.z80
TICK:               03D4 DEFINED AT LINE 11
                    > USED AT LINE 25 IN core-compiler.z80
                    > USED AT LINE 106 IN core-utils.z80
TICK1:              03E2 DEFINED AT LINE 7 IN core-compiler.z80
                    > USED AT LINE 5 IN core-compiler.z80
ALLOT:              03E4 DEFINED AT LINE 11
COMMA:              03EE DEFINED AT LINE 11
                    > USED AT LINE 25 IN core-compiler.z80
                    > USED AT LINE 90 IN core-compiler.z80
                    > USED AT LINE 120 IN core-compiler.z80
BCOMP:              0400 DEFINED AT LINE 11
COMPI:              040A DEFINED AT LINE 11
                    > USED AT LINE 38 IN core-compiler.z80
                    > USED AT LINE 107 IN core-compiler.z80
                    > USED AT LINE 142 IN core-compiler.z80
                    > USED AT LINE 150 IN core-compiler.z80
                    > USED AT LINE 4 IN core-control.z80
                    > USED AT LINE 14 IN core-control.z80
                    > USED AT LINE 19 IN core-control.z80
                    > USED AT LINE 24 IN core-control.z80
                    > USED AT LINE 30 IN core-control.z80
                    > USED AT LINE 37 IN core-control.z80
                    > USED AT LINE 69 IN core-control.z80
                    > USED AT LINE 74 IN core-control.z80
                    > USED AT LINE 79 IN core-control.z80
LITER:              041C DEFINED AT LINE 11
                    > USED AT LINE 94 IN core-compiler.z80
STRCQ:              0428 DEFINED AT LINE 49
RECUR:              043E DEFINED AT LINE 11
UNIQU:              044C DEFINED AT LINE 11
                    > USED AT LINE 69 IN core-compiler.z80
UNIQ1:              0468 DEFINED AT LINE 60 IN core-compiler.z80
                    > USED AT LINE 57 IN core-compiler.z80
SNAME:              046C DEFINED AT LINE 11
                    > USED AT LINE 126 IN core-compiler.z80
                    > USED AT LINE 140 IN core-compiler.z80
                    > USED AT LINE 148 IN core-compiler.z80
PNAM1:              049E DEFINED AT LINE 76 IN core-compiler.z80
                    > USED AT LINE 68 IN core-compiler.z80
SCOMP:              04A8 DEFINED AT LINE 49
                    > USED AT LINE 113 IN core-compiler.z80
SCOM1:              04C4 DEFINED AT LINE 89 IN core-compiler.z80
                    > USED AT LINE 87 IN core-compiler.z80
SCOM2:              04C8 DEFINED AT LINE 91 IN core-compiler.z80
                    > USED AT LINE 85 IN core-compiler.z80
SCOM3:              04D4 DEFINED AT LINE 95 IN core-compiler.z80
                    > USED AT LINE 93 IN core-compiler.z80
OVERT:              04D6 DEFINED AT LINE 49
SEMIS:              04E6 DEFINED AT LINE 11
RBRAC:              04F4 DEFINED AT LINE 11
                    > USED AT LINE 127 IN core-compiler.z80
CALLC:              0502 DEFINED AT LINE 49
                    > USED AT LINE 127 IN core-compiler.z80
COLON:              0510 DEFINED AT LINE 11
IMMED:              0522 DEFINED AT LINE 11
USER:               053A DEFINED AT LINE 11
CREAT:              0552 DEFINED AT LINE 11
                    > USED AT LINE 156 IN core-compiler.z80
VARIA:              0568 DEFINED AT LINE 11
FOR:                0576 DEFINED AT LINE 11
BEGIN:              0582 DEFINED AT LINE 11
NEXT:               058A DEFINED AT LINE 11
UNTIL:              0596 DEFINED AT LINE 11
AGAIN:              05A2 DEFINED AT LINE 11
                    > USED AT LINE 43 IN core-control.z80
IFF:                05AE DEFINED AT LINE 11
                    > USED AT LINE 64 IN core-control.z80
AHEAD:              05C0 DEFINED AT LINE 11
                    > USED AT LINE 54 IN core-control.z80
                    > USED AT LINE 59 IN core-control.z80
REPEA:              05D2 DEFINED AT LINE 11
THENN:              05E0 DEFINED AT LINE 11
AFT:                05EC DEFINED AT LINE 11
ELSEE:              05FA DEFINED AT LINE 11
WHILE:              0606 DEFINED AT LINE 11
ABRTQ:              0610 DEFINED AT LINE 11
STRQ:               061C DEFINED AT LINE 49
DOTQ:               0628 DEFINED AT LINE 49
DOCONST:            0634 DEFINED AT LINE 49
DOLIST:             063C DEFINED AT LINE 49
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 141 IN core-compiler.z80
                    > USED AT LINE 25
                    > USED AT LINE 149 IN core-compiler.z80
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 31
                    > USED AT LINE 31
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 31
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 31
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 31
                    > USED AT LINE 61
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
DOLIT:              064A DEFINED AT LINE 49
                    > USED AT LINE 55 IN core-alu.z80
                    > USED AT LINE 60 IN core-alu.z80
                    > USED AT LINE 66 IN core-alu.z80
                    > USED AT LINE 87 IN core-alu.z80
                    > USED AT LINE 89 IN core-alu.z80
                    > USED AT LINE 150 IN core-alu.z80
                    > USED AT LINE 168 IN core-alu.z80
                    > USED AT LINE 345 IN core-alu.z80
                    > USED AT LINE 350 IN core-alu.z80
                    > USED AT LINE 355 IN core-alu.z80
                    > USED AT LINE 364 IN core-alu.z80
                    > USED AT LINE 367 IN core-alu.z80
                    > USED AT LINE 38 IN core-compiler.z80
                    > USED AT LINE 43 IN core-compiler.z80
                    > USED AT LINE 86 IN core-compiler.z80
                    > USED AT LINE 113 IN core-compiler.z80
                    > USED AT LINE 119 IN core-compiler.z80
                    > USED AT LINE 133 IN core-compiler.z80
                    > USED AT LINE 141 IN core-compiler.z80
                    > USED AT LINE 149 IN core-compiler.z80
                    > USED AT LINE 156 IN core-compiler.z80
                    > USED AT LINE 31 IN core-control.z80
                    > USED AT LINE 4 IN core-format.z80
                    > USED AT LINE 5 IN core-format.z80
                    > USED AT LINE 6 IN core-format.z80
                    > USED AT LINE 11 IN core-format.z80
                    > USED AT LINE 44 IN core-format.z80
                    > USED AT LINE 64 IN core-format.z80
                    > USED AT LINE 69 IN core-format.z80
                    > USED AT LINE 74 IN core-format.z80
                    > USED AT LINE 79 IN core-format.z80
                    > USED AT LINE 80 IN core-format.z80
                    > USED AT LINE 81 IN core-format.z80
                    > USED AT LINE 83 IN core-format.z80
                    > USED AT LINE 5 IN core-interpret.z80
                    > USED AT LINE 6 IN core-interpret.z80
                    > USED AT LINE 8 IN core-interpret.z80
                    > USED AT LINE 9 IN core-interpret.z80
                    > USED AT LINE 20 IN core-interpret.z80
                    > USED AT LINE 25 IN core-interpret.z80
                    > USED AT LINE 30 IN core-interpret.z80
                    > USED AT LINE 52 IN core-interpret.z80
                    > USED AT LINE 59 IN core-interpret.z80
                    > USED AT LINE 74 IN core-interpret.z80
                    > USED AT LINE 80 IN core-interpret.z80
                    > USED AT LINE 99 IN core-interpret.z80
                    > USED AT LINE 139 IN core-interpret.z80
                    > USED AT LINE 145 IN core-interpret.z80
                    > USED AT LINE 151 IN core-interpret.z80
                    > USED AT LINE 178 IN core-interpret.z80
                    > USED AT LINE 227 IN core-interpret.z80
                    > USED AT LINE 241 IN core-interpret.z80
                    > USED AT LINE 247 IN core-interpret.z80
                    > USED AT LINE 87 IN core-io.z80
                    > USED AT LINE 97 IN core-io.z80
                    > USED AT LINE 112 IN core-io.z80
                    > USED AT LINE 124 IN core-io.z80
                    > USED AT LINE 132 IN core-io.z80
                    > USED AT LINE 175 IN core-io.z80
                    > USED AT LINE 187 IN core-io.z80
                    > USED AT LINE 189 IN core-io.z80
                    > USED AT LINE 202 IN core-io.z80
                    > USED AT LINE 204 IN core-io.z80
                    > USED AT LINE 220 IN core-io.z80
                    > USED AT LINE 239 IN core-io.z80
                    > USED AT LINE 240 IN core-io.z80
                    > USED AT LINE 23 IN core-kernel.z80
                    > USED AT LINE 25 IN core-kernel.z80
                    > USED AT LINE 29 IN core-kernel.z80
                    > USED AT LINE 48 IN core-kernel.z80
                    > USED AT LINE 51 IN core-kernel.z80
                    > USED AT LINE 58 IN core-kernel.z80
                    > USED AT LINE 59 IN core-kernel.z80
                    > USED AT LINE 71 IN core-kernel.z80
                    > USED AT LINE 108 IN core-memory.z80
                    > USED AT LINE 119 IN core-memory.z80
                    > USED AT LINE 146 IN core-memory.z80
                    > USED AT LINE 147 IN core-memory.z80
                    > USED AT LINE 173 IN core-memory.z80
                    > USED AT LINE 176 IN core-memory.z80
                    > USED AT LINE 184 IN core-memory.z80
                    > USED AT LINE 186 IN core-memory.z80
                    > USED AT LINE 83 IN core-stacks.z80
                    > USED AT LINE 90 IN core-stacks.z80
                    > USED AT LINE 8 IN core-utils.z80
                    > USED AT LINE 16 IN core-utils.z80
                    > USED AT LINE 21 IN core-utils.z80
                    > USED AT LINE 31 IN core-utils.z80
                    > USED AT LINE 34 IN core-utils.z80
                    > USED AT LINE 89 IN core-utils.z80
                    > USED AT LINE 96 IN core-utils.z80
                    > USED AT LINE 7 IN tester.z80
                    > USED AT LINE 9 IN tester.z80
                    > USED AT LINE 37 IN tester.z80
                    > USED AT LINE 39 IN tester.z80
                    > USED AT LINE 50 IN tester.z80
                    > USED AT LINE 91 IN tester.z80
DOVAR:              0652 DEFINED AT LINE 49
                    > USED AT LINE 150 IN core-compiler.z80
                    > USED AT LINE 41 IN core-does.z80
                    > USED AT LINE 201 IN core-interpret.z80
UP:                 065A DEFINED AT LINE 49
DOUSE:              0662 DEFINED AT LINE 49
                    > USED AT LINE 142 IN core-compiler.z80
                    > USED AT LINE 32
                    > USED AT LINE 32
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 32
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 32
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 32
                    > USED AT LINE 62
DOSTR:              0672 DEFINED AT LINE 49
                    > USED AT LINE 217 IN core-interpret.z80
                    > USED AT LINE 219 IN core-interpret.z80
                    > USED AT LINE 137 IN core-io.z80
                    > USED AT LINE 142 IN core-io.z80
EXIT:               068A DEFINED AT LINE 11
                    > USED AT LINE 80 IN core-alu.z80
                    > USED AT LINE 114 IN core-alu.z80
                    > USED AT LINE 123 IN core-alu.z80
                    > USED AT LINE 271 IN core-alu.z80
                    > USED AT LINE 330 IN core-alu.z80
                    > USED AT LINE 6 IN core-compiler.z80
                    > USED AT LINE 61 IN core-compiler.z80
                    > USED AT LINE 75 IN core-compiler.z80
                    > USED AT LINE 88 IN core-compiler.z80
                    > USED AT LINE 90 IN core-compiler.z80
                    > USED AT LINE 94 IN core-compiler.z80
                    > USED AT LINE 107 IN core-compiler.z80
                    > USED AT LINE 120 IN core-compiler.z80
                    > USED AT LINE 9 IN core-control.z80
                    > USED AT LINE 36 IN core-does.z80
                    > USED AT LINE 38 IN core-format.z80
                    > USED AT LINE 46 IN core-format.z80
                    > USED AT LINE 85 IN core-format.z80
                    > USED AT LINE 116 IN core-interpret.z80
                    > USED AT LINE 229 IN core-interpret.z80
                    > USED AT LINE 233 IN core-interpret.z80
                    > USED AT LINE 250 IN core-interpret.z80
                    > USED AT LINE 258 IN core-interpret.z80
                    > USED AT LINE 67 IN core-io.z80
                    > USED AT LINE 82 IN core-io.z80
                    > USED AT LINE 103 IN core-io.z80
                    > USED AT LINE 115 IN core-io.z80
                    > USED AT LINE 127 IN core-io.z80
                    > USED AT LINE 137 IN core-io.z80
                    > USED AT LINE 168 IN core-io.z80
                    > USED AT LINE 191 IN core-io.z80
                    > USED AT LINE 208 IN core-io.z80
                    > USED AT LINE 53 IN core-kernel.z80
                    > USED AT LINE 108 IN core-kernel.z80
                    > USED AT LINE 135 IN core-memory.z80
                    > USED AT LINE 150 IN core-memory.z80
                    > USED AT LINE 162 IN core-memory.z80
                    > USED AT LINE 194 IN core-memory.z80
                    > USED AT LINE 58 IN core-stacks.z80
                    > USED AT LINE 11 IN core-utils.z80
                    > USED AT LINE 24 IN core-utils.z80
                    > USED AT LINE 45 IN core-utils.z80
                    > USED AT LINE 58 IN core-utils.z80
                    > USED AT LINE 97 IN core-utils.z80
                    > USED AT LINE 100 IN core-utils.z80
                    > USED AT LINE 122 IN core-utils.z80
                    > USED AT LINE 22 IN tester.z80
                    > USED AT LINE 44 IN tester.z80
                    > USED AT LINE 51 IN tester.z80
                    > USED AT LINE 60 IN tester.z80
                    > USED AT LINE 71 IN tester.z80
                    > USED AT LINE 84 IN tester.z80
                    > USED AT LINE 92 IN tester.z80
DONXT:              0696 DEFINED AT LINE 11
                    > USED AT LINE 164 IN core-alu.z80
                    > USED AT LINE 14 IN core-control.z80
                    > USED AT LINE 31 IN core-interpret.z80
                    > USED AT LINE 60 IN core-interpret.z80
                    > USED AT LINE 75 IN core-interpret.z80
                    > USED AT LINE 138 IN core-interpret.z80
                    > USED AT LINE 102 IN core-io.z80
                    > USED AT LINE 114 IN core-io.z80
                    > USED AT LINE 149 IN core-memory.z80
                    > USED AT LINE 161 IN core-memory.z80
                    > USED AT LINE 175 IN core-memory.z80
                    > USED AT LINE 10 IN core-utils.z80
                    > USED AT LINE 23 IN core-utils.z80
                    > USED AT LINE 39 IN core-utils.z80
                    > USED AT LINE 56 IN core-utils.z80
DECHILO:            06AB DEFINED AT LINE 84 IN core-does.z80
                    > USED AT LINE 77 IN core-does.z80
DECLOW:             06AD DEFINED AT LINE 87 IN core-does.z80
                    > USED AT LINE 73 IN core-does.z80
DIGIT:              06B6 DEFINED AT LINE 49
                    > USED AT LINE 12 IN core-format.z80
EXTRC:              06D2 DEFINED AT LINE 49
BDIGS:              06E4 DEFINED AT LINE 11
                    > USED AT LINE 58 IN core-format.z80
                    > USED AT LINE 153 IN core-io.z80
                    > USED AT LINE 160 IN core-io.z80
HOLD:               06F0 DEFINED AT LINE 11
DIG:                0708 DEFINED AT LINE 11
                    > USED AT LINE 34 IN core-format.z80
DIGS:               0716 DEFINED AT LINE 11
                    > USED AT LINE 58 IN core-format.z80
                    > USED AT LINE 160 IN core-io.z80
DIGS1:              071A DEFINED AT LINE 33 IN core-format.z80
                    > USED AT LINE 36 IN core-format.z80
DIGS2:              0726 DEFINED AT LINE 37 IN core-format.z80
                    > USED AT LINE 35 IN core-format.z80
SIGN:               0728 DEFINED AT LINE 11
                    > USED AT LINE 59 IN core-format.z80
SIGN1:              0738 DEFINED AT LINE 45 IN core-format.z80
EDIGS:              073A DEFINED AT LINE 11
                    > USED AT LINE 59 IN core-format.z80
STR:                074C DEFINED AT LINE 49
                    > USED AT LINE 147 IN core-io.z80
                    > USED AT LINE 170 IN core-io.z80
HEX:                0762 DEFINED AT LINE 11
                    > USED AT LINE 19 IN core-interpret.z80
DECIMAL:            0770 DEFINED AT LINE 11
BLANK:              077E DEFINED AT LINE 11
                    > USED AT LINE 56 IN core-interpret.z80
                    > USED AT LINE 109 IN core-interpret.z80
                    > USED AT LINE 114 IN core-interpret.z80
                    > USED AT LINE 92 IN core-io.z80
                    > USED AT LINE 188 IN core-io.z80
                    > USED AT LINE 206 IN core-io.z80
                    > USED AT LINE 220 IN core-io.z80
                    > USED AT LINE 171 IN core-memory.z80
TCHAR:              0788 DEFINED AT LINE 49
TCHA1:              07A8 DEFINED AT LINE 84 IN core-format.z80
                    > USED AT LINE 82 IN core-format.z80
DIGTQ:              07AA DEFINED AT LINE 49
DGTQ1:              07D2 DEFINED AT LINE 10 IN core-interpret.z80
                    > USED AT LINE 7 IN core-interpret.z80
NUMBQ:              07DA DEFINED AT LINE 49
                    > USED AT LINE 21 IN defaults.z80
NUMQ1:              080C DEFINED AT LINE 21 IN core-interpret.z80
                    > USED AT LINE 18 IN core-interpret.z80
NUMQ2:              0832 DEFINED AT LINE 26 IN core-interpret.z80
                    > USED AT LINE 31 IN core-interpret.z80
NUMQ3:              0864 DEFINED AT LINE 35 IN core-interpret.z80
                    > USED AT LINE 33 IN core-interpret.z80
NUMQ4:              086A DEFINED AT LINE 38 IN core-interpret.z80
                    > USED AT LINE 28 IN core-interpret.z80
NUMQ5:              0876 DEFINED AT LINE 40 IN core-interpret.z80
                    > USED AT LINE 37 IN core-interpret.z80
NUMQ6:              0878 DEFINED AT LINE 42 IN core-interpret.z80
                    > USED AT LINE 24 IN core-interpret.z80
PARS:               0884 DEFINED AT LINE 49
                    > USED AT LINE 93 IN core-interpret.z80
PARS1:              08AA DEFINED AT LINE 55 IN core-interpret.z80
                    > USED AT LINE 60 IN core-interpret.z80
PARS2:              08D0 DEFINED AT LINE 62 IN core-interpret.z80
                    > USED AT LINE 58 IN core-interpret.z80
PARS3:              08D2 DEFINED AT LINE 64 IN core-interpret.z80
                    > USED AT LINE 53 IN core-interpret.z80
PARS4:              08D8 DEFINED AT LINE 67 IN core-interpret.z80
                    > USED AT LINE 75 IN core-interpret.z80
PARS5:              08F0 DEFINED AT LINE 72 IN core-interpret.z80
                    > USED AT LINE 70 IN core-interpret.z80
PARS6:              0906 DEFINED AT LINE 78 IN core-interpret.z80
                    > USED AT LINE 73 IN core-interpret.z80
PARS7:              0914 DEFINED AT LINE 81 IN core-interpret.z80
                    > USED AT LINE 77 IN core-interpret.z80
PARS8:              0920 DEFINED AT LINE 84 IN core-interpret.z80
                    > USED AT LINE 51 IN core-interpret.z80
PARSE:              0928 DEFINED AT LINE 11
                    > USED AT LINE 109 IN core-interpret.z80
                    > USED AT LINE 114 IN core-interpret.z80
                    > USED AT LINE 121 IN core-interpret.z80
PAREN:              094A DEFINED AT LINE 11
BKSLA:              0958 DEFINED AT LINE 11
CHAR:               0966 DEFINED AT LINE 11
TOKEN:              0974 DEFINED AT LINE 49
                    > USED AT LINE 4 IN core-compiler.z80
                    > USED AT LINE 126 IN core-compiler.z80
                    > USED AT LINE 140 IN core-compiler.z80
                    > USED AT LINE 148 IN core-compiler.z80
                    > USED AT LINE 265 IN core-interpret.z80
WORDD:              0990 DEFINED AT LINE 11
NAMET:              099C DEFINED AT LINE 49
                    > USED AT LINE 162 IN core-interpret.z80
                    > USED AT LINE 80 IN core-utils.z80
SAMEQ:              09A8 DEFINED AT LINE 49
SAME1:              09B2 DEFINED AT LINE 133 IN core-interpret.z80
                    > USED AT LINE 138 IN core-interpret.z80
SAME2:              09D4 DEFINED AT LINE 138 IN core-interpret.z80
                    > USED AT LINE 132 IN core-interpret.z80
                    > USED AT LINE 136 IN core-interpret.z80
FIND:               09DE DEFINED AT LINE 11
                    > USED AT LINE 174 IN core-interpret.z80
FIND1:              09FC DEFINED AT LINE 147 IN core-interpret.z80
                    > USED AT LINE 159 IN core-interpret.z80
FIND2:              0A20 DEFINED AT LINE 153 IN core-interpret.z80
                    > USED AT LINE 150 IN core-interpret.z80
FIND3:              0A28 DEFINED AT LINE 154 IN core-interpret.z80
                    > USED AT LINE 152 IN core-interpret.z80
FIND6:              0A2C DEFINED AT LINE 155 IN core-interpret.z80
                    > USED AT LINE 148 IN core-interpret.z80
FIND4:              0A38 DEFINED AT LINE 157 IN core-interpret.z80
                    > USED AT LINE 154 IN core-interpret.z80
FIND5:              0A44 DEFINED AT LINE 160 IN core-interpret.z80
                    > USED AT LINE 157 IN core-interpret.z80
NAMEQ:              0A56 DEFINED AT LINE 49
                    > USED AT LINE 4 IN core-compiler.z80
                    > USED AT LINE 56 IN core-compiler.z80
                    > USED AT LINE 84 IN core-compiler.z80
                    > USED AT LINE 225 IN core-interpret.z80
NAMQ1:              0A68 DEFINED AT LINE 170 IN core-interpret.z80
                    > USED AT LINE 168 IN core-interpret.z80
NAMQ2:              0A6A DEFINED AT LINE 171 IN core-interpret.z80
                    > USED AT LINE 175 IN core-interpret.z80
NAMQ3:              0A88 DEFINED AT LINE 177 IN core-interpret.z80
                    > USED AT LINE 173 IN core-interpret.z80
CATCH:              0A92 DEFINED AT LINE 11
THROW:              0AB8 DEFINED AT LINE 11
                    > USED AT LINE 8 IN core-compiler.z80
                    > USED AT LINE 78 IN core-compiler.z80
                    > USED AT LINE 95 IN core-compiler.z80
                    > USED AT LINE 210 IN core-interpret.z80
                    > USED AT LINE 217 IN core-interpret.z80
                    > USED AT LINE 235 IN core-interpret.z80
NULLS:              0AD6 DEFINED AT LINE 49
                    > USED AT LINE 210 IN core-interpret.z80
ABORT:              0AE4 DEFINED AT LINE 11
ABORQ:              0AEC DEFINED AT LINE 49
                    > USED AT LINE 69 IN core-control.z80
                    > USED AT LINE 37
                    > USED AT LINE 37
ABOR1:              0AF8 DEFINED AT LINE 218 IN core-interpret.z80
                    > USED AT LINE 216 IN core-interpret.z80
INTER:              0AFE DEFINED AT LINE 49
                    > USED AT LINE 20 IN defaults.z80
                    > USED AT LINE 241 IN core-interpret.z80
                    > USED AT LINE 247 IN core-interpret.z80
INTE1:              0B26 DEFINED AT LINE 230 IN core-interpret.z80
                    > USED AT LINE 226 IN core-interpret.z80
INTE2:              0B30 DEFINED AT LINE 234 IN core-interpret.z80
                    > USED AT LINE 232 IN core-interpret.z80
LBRAC:              0B32 DEFINED AT LINE 11
DOTOK:              0B40 DEFINED AT LINE 11
                    > USED AT LINE 12 IN defaults.z80
DOTO1:              0B58 DEFINED AT LINE 250 IN core-interpret.z80
                    > USED AT LINE 248 IN core-interpret.z80
QSTAC:              0B5C DEFINED AT LINE 49
EVAL:               0B74 DEFINED AT LINE 11
EVAL1:              0B78 DEFINED AT LINE 264 IN core-interpret.z80
                    > USED AT LINE 268 IN core-interpret.z80
EVAL2:              0B8C DEFINED AT LINE 269 IN core-interpret.z80
                    > USED AT LINE 266 IN core-interpret.z80
PCSTO:              0B94 DEFINED AT LINE 11
PCAT:               0B9E DEFINED AT LINE 11
STOIO:              0BAA DEFINED AT LINE 11
                    > USED AT LINE 19 IN core-kernel.z80
                    > USED AT LINE 37 IN core-kernel.z80
QRX:                0BB0 DEFINED AT LINE 11
                    > USED AT LINE 7 IN defaults.z80
QRX1:               0BBB DEFINED AT LINE 36 IN core-io.z80
                    > USED AT LINE 33 IN core-io.z80
QRX2:               0BC5 DEFINED AT LINE 42 IN core-io.z80
                    > USED AT LINE 35 IN core-io.z80
TXSTO:              0BC8 DEFINED AT LINE 11
                    > USED AT LINE 8 IN defaults.z80
                    > USED AT LINE 11 IN defaults.z80
QKEY:               0BD0 DEFINED AT LINE 11
                    > USED AT LINE 62 IN core-io.z80
                    > USED AT LINE 78 IN core-io.z80
KEY:                0BDC DEFINED AT LINE 11
                    > USED AT LINE 80 IN core-io.z80
                    > USED AT LINE 219 IN core-io.z80
                    > USED AT LINE 27 IN core-kernel.z80
                    > USED AT LINE 46 IN core-kernel.z80
KEY1:               0BE0 DEFINED AT LINE 61 IN core-io.z80
                    > USED AT LINE 66 IN core-io.z80
KEY2:               0BE8 DEFINED AT LINE 65 IN core-io.z80
EMIT:               0BEE DEFINED AT LINE 11
                    > USED AT LINE 92 IN core-io.z80
                    > USED AT LINE 123 IN core-io.z80
                    > USED AT LINE 28 IN core-kernel.z80
                    > USED AT LINE 47 IN core-kernel.z80
NUFQ:               0BFA DEFINED AT LINE 11
                    > USED AT LINE 37 IN core-utils.z80
                    > USED AT LINE 120 IN core-utils.z80
NUFQ1:              0C10 DEFINED AT LINE 81 IN core-io.z80
                    > USED AT LINE 79 IN core-io.z80
PACE:               0C12 DEFINED AT LINE 49
SPACE:              0C1E DEFINED AT LINE 11
                    > USED AT LINE 100 IN core-io.z80
                    > USED AT LINE 161 IN core-io.z80
                    > USED AT LINE 170 IN core-io.z80
                    > USED AT LINE 17 IN core-utils.z80
                    > USED AT LINE 36 IN core-utils.z80
                    > USED AT LINE 36 IN core-utils.z80
                    > USED AT LINE 115 IN core-utils.z80
SPACS:              0C28 DEFINED AT LINE 11
                    > USED AT LINE 148 IN core-io.z80
                    > USED AT LINE 155 IN core-io.z80
CHAR1:              0C38 DEFINED AT LINE 99 IN core-io.z80
                    > USED AT LINE 102 IN core-io.z80
CHAR2:              0C3A DEFINED AT LINE 101 IN core-io.z80
                    > USED AT LINE 98 IN core-io.z80
TYPEE:              0C40 DEFINED AT LINE 11
                    > USED AT LINE 148 IN core-io.z80
                    > USED AT LINE 155 IN core-io.z80
                    > USED AT LINE 161 IN core-io.z80
TYPE1:              0C4A DEFINED AT LINE 110 IN core-io.z80
                    > USED AT LINE 114 IN core-io.z80
TYPE2:              0C56 DEFINED AT LINE 113 IN core-io.z80
                    > USED AT LINE 109 IN core-io.z80
TYPEZ:              0C5E DEFINED AT LINE 11
                    > USED AT LINE 26 IN core-kernel.z80
                    > USED AT LINE 30 IN core-kernel.z80
                    > USED AT LINE 52 IN core-kernel.z80
                    > USED AT LINE 108 IN core-kernel.z80
TYPEZ1:             0C62 DEFINED AT LINE 120 IN core-io.z80
                    > USED AT LINE 125 IN core-io.z80
TYPEZ2:             0C78 DEFINED AT LINE 126 IN core-io.z80
CR:                 0C7C DEFINED AT LINE 11
                    > USED AT LINE 250 IN core-interpret.z80
                    > USED AT LINE 37 IN core-kernel.z80
                    > USED AT LINE 44 IN core-kernel.z80
                    > USED AT LINE 53 IN core-kernel.z80
                    > USED AT LINE 34 IN core-utils.z80
                    > USED AT LINE 50 IN core-utils.z80
                    > USED AT LINE 107 IN core-utils.z80
STRQP:              0C8E DEFINED AT LINE 49
                    > USED AT LINE 37
                    > USED AT LINE 74 IN core-control.z80
DOTQP:              0C96 DEFINED AT LINE 49
                    > USED AT LINE 37
                    > USED AT LINE 79 IN core-control.z80
                    > USED AT LINE 37
                    > USED AT LINE 37
                    > USED AT LINE 37
                    > USED AT LINE 37
DOTR:               0CA2 DEFINED AT LINE 11
UDOTR:              0CB6 DEFINED AT LINE 11
UDOT:               0CCE DEFINED AT LINE 11
                    > USED AT LINE 168 IN core-io.z80
DOT:                0CDE DEFINED AT LINE 11
                    > USED AT LINE 180 IN core-io.z80
DOT1:               0CF4 DEFINED AT LINE 169 IN core-io.z80
                    > USED AT LINE 167 IN core-io.z80
DOTPR:              0CFC DEFINED AT LINE 11
QUEST:              0D0A DEFINED AT LINE 11
BKSP:               0D14 DEFINED AT LINE 11
                    > USED AT LINE 208 IN core-io.z80
BACK1:              0D44 DEFINED AT LINE 190 IN core-io.z80
                    > USED AT LINE 186 IN core-io.z80
TAP:                0D46 DEFINED AT LINE 11
                    > USED AT LINE 206 IN core-io.z80
                    > USED AT LINE 222 IN core-io.z80
KTAP:               0D5C DEFINED AT LINE 11
                    > USED AT LINE 10 IN defaults.z80
KTAP1:              0D7C DEFINED AT LINE 207 IN core-io.z80
                    > USED AT LINE 205 IN core-io.z80
KTAP2:              0D80 DEFINED AT LINE 209 IN core-io.z80
                    > USED AT LINE 203 IN core-io.z80
ACCEP:              0D8A DEFINED AT LINE 11
                    > USED AT LINE 9 IN defaults.z80
ACCP1:              0D94 DEFINED AT LINE 216 IN core-io.z80
                    > USED AT LINE 227 IN core-io.z80
ACCP2:              0DB2 DEFINED AT LINE 224 IN core-io.z80
                    > USED AT LINE 221 IN core-io.z80
ACCP3:              0DB6 DEFINED AT LINE 226 IN core-io.z80
                    > USED AT LINE 223 IN core-io.z80
ACCP4:              0DBA DEFINED AT LINE 228 IN core-io.z80
                    > USED AT LINE 218 IN core-io.z80
EXPEC:              0DC2 DEFINED AT LINE 49
QUERY:              0DD2 DEFINED AT LINE 49
CALL_FORTH:         0DF0 DEFINED AT LINE 2 IN core-kernel.z80
                    > USED AT LINE 58
RETURN_HERE:        0DF4 DEFINED AT LINE 5 IN core-kernel.z80
                    > USED AT LINE 8 IN core-kernel.z80
TRETURN_HERE:       0DF5 DEFINED AT LINE 7 IN core-kernel.z80
                    > USED AT LINE 3 IN core-kernel.z80
NEXT_STEP:          0DF7 DEFINED AT LINE 10 IN core-kernel.z80
                    > USED AT LINE 54
                    > USED AT LINE 34 IN interrupt.z80
HI:                 0DFE DEFINED AT LINE 49
                    > USED AT LINE 57
HELLO:              0E1C DEFINED AT LINE 32 IN core-kernel.z80
                    > USED AT LINE 25 IN core-kernel.z80
                    > USED AT LINE 29 IN core-kernel.z80
                    > USED AT LINE 51 IN core-kernel.z80
HIX:                0E2C DEFINED AT LINE 49
HI1:                0E41 DEFINED AT LINE 45 IN core-kernel.z80
                    > USED AT LINE 50 IN core-kernel.z80
COLD:               0E5C DEFINED AT LINE 11
COLD1:              0E60 DEFINED AT LINE 57 IN core-kernel.z80
                    > USED AT LINE 65 IN core-kernel.z80
PRESE:              0E76 DEFINED AT LINE 11
                    > USED AT LINE 60 IN core-kernel.z80
QUIT:               0E8C DEFINED AT LINE 11
                    > USED AT LINE 31 IN core-kernel.z80
                    > USED AT LINE 64 IN core-kernel.z80
                    > USED AT LINE 13 IN tester.z80
EXECU:              0E8E DEFINED AT LINE 11
                    > USED AT LINE 88 IN core-compiler.z80
                    > USED AT LINE 229 IN core-interpret.z80
                    > USED AT LINE 133 IN core-memory.z80
QBRAN:              0E92 DEFINED AT LINE 49
                    > USED AT LINE 86 IN core-alu.z80
                    > USED AT LINE 95 IN core-alu.z80
                    > USED AT LINE 120 IN core-alu.z80
                    > USED AT LINE 149 IN core-alu.z80
                    > USED AT LINE 157 IN core-alu.z80
                    > USED AT LINE 260 IN core-alu.z80
                    > USED AT LINE 264 IN core-alu.z80
                    > USED AT LINE 268 IN core-alu.z80
                    > USED AT LINE 5 IN core-compiler.z80
                    > USED AT LINE 57 IN core-compiler.z80
                    > USED AT LINE 68 IN core-compiler.z80
                    > USED AT LINE 85 IN core-compiler.z80
                    > USED AT LINE 87 IN core-compiler.z80
                    > USED AT LINE 93 IN core-compiler.z80
                    > USED AT LINE 19 IN core-control.z80
                    > USED AT LINE 30 IN core-control.z80
                    > USED AT LINE 35 IN core-format.z80
                    > USED AT LINE 43 IN core-format.z80
                    > USED AT LINE 82 IN core-format.z80
                    > USED AT LINE 7 IN core-interpret.z80
                    > USED AT LINE 18 IN core-interpret.z80
                    > USED AT LINE 24 IN core-interpret.z80
                    > USED AT LINE 28 IN core-interpret.z80
                    > USED AT LINE 33 IN core-interpret.z80
                    > USED AT LINE 51 IN core-interpret.z80
                    > USED AT LINE 53 IN core-interpret.z80
                    > USED AT LINE 58 IN core-interpret.z80
                    > USED AT LINE 70 IN core-interpret.z80
                    > USED AT LINE 73 IN core-interpret.z80
                    > USED AT LINE 136 IN core-interpret.z80
                    > USED AT LINE 148 IN core-interpret.z80
                    > USED AT LINE 150 IN core-interpret.z80
                    > USED AT LINE 157 IN core-interpret.z80
                    > USED AT LINE 168 IN core-interpret.z80
                    > USED AT LINE 173 IN core-interpret.z80
                    > USED AT LINE 175 IN core-interpret.z80
                    > USED AT LINE 216 IN core-interpret.z80
                    > USED AT LINE 226 IN core-interpret.z80
                    > USED AT LINE 232 IN core-interpret.z80
                    > USED AT LINE 248 IN core-interpret.z80
                    > USED AT LINE 266 IN core-interpret.z80
                    > USED AT LINE 63 IN core-io.z80
                    > USED AT LINE 66 IN core-io.z80
                    > USED AT LINE 79 IN core-io.z80
                    > USED AT LINE 122 IN core-io.z80
                    > USED AT LINE 167 IN core-io.z80
                    > USED AT LINE 186 IN core-io.z80
                    > USED AT LINE 203 IN core-io.z80
                    > USED AT LINE 205 IN core-io.z80
                    > USED AT LINE 218 IN core-io.z80
                    > USED AT LINE 221 IN core-io.z80
                    > USED AT LINE 50 IN core-kernel.z80
                    > USED AT LINE 132 IN core-memory.z80
                    > USED AT LINE 172 IN core-memory.z80
                    > USED AT LINE 55 IN core-stacks.z80
                    > USED AT LINE 38 IN core-utils.z80
                    > USED AT LINE 75 IN core-utils.z80
                    > USED AT LINE 79 IN core-utils.z80
                    > USED AT LINE 81 IN core-utils.z80
                    > USED AT LINE 86 IN core-utils.z80
                    > USED AT LINE 95 IN core-utils.z80
                    > USED AT LINE 110 IN core-utils.z80
                    > USED AT LINE 114 IN core-utils.z80
                    > USED AT LINE 121 IN core-utils.z80
                    > USED AT LINE 6 IN tester.z80
                    > USED AT LINE 81 IN tester.z80
BRAN:               0E9E DEFINED AT LINE 49
                    > USED AT LINE 159 IN core-alu.z80
                    > USED AT LINE 24 IN core-control.z80
                    > USED AT LINE 37 IN core-control.z80
                    > USED AT LINE 36 IN core-format.z80
                    > USED AT LINE 37 IN core-interpret.z80
                    > USED AT LINE 77 IN core-interpret.z80
                    > USED AT LINE 132 IN core-interpret.z80
                    > USED AT LINE 152 IN core-interpret.z80
                    > USED AT LINE 154 IN core-interpret.z80
                    > USED AT LINE 159 IN core-interpret.z80
                    > USED AT LINE 268 IN core-interpret.z80
                    > USED AT LINE 98 IN core-io.z80
                    > USED AT LINE 109 IN core-io.z80
                    > USED AT LINE 125 IN core-io.z80
                    > USED AT LINE 223 IN core-io.z80
                    > USED AT LINE 227 IN core-io.z80
                    > USED AT LINE 65 IN core-kernel.z80
                    > USED AT LINE 90 IN core-kernel.z80
                    > USED AT LINE 142 IN core-memory.z80
                    > USED AT LINE 157 IN core-memory.z80
                    > USED AT LINE 169 IN core-memory.z80
                    > USED AT LINE 5 IN core-utils.z80
                    > USED AT LINE 18 IN core-utils.z80
                    > USED AT LINE 40 IN core-utils.z80
                    > USED AT LINE 52 IN core-utils.z80
                    > USED AT LINE 83 IN core-utils.z80
                    > USED AT LINE 116 IN core-utils.z80
                    > USED AT LINE 41 IN tester.z80
THROWX:             0EA6 DEFINED AT LINE 11
STORE:              0EAE DEFINED AT LINE 11
                    > USED AT LINE 19 IN core-compiler.z80
                    > USED AT LINE 45 IN core-compiler.z80
                    > USED AT LINE 75 IN core-compiler.z80
                    > USED AT LINE 50 IN core-interpret.z80
                    > USED AT LINE 91 IN core-memory.z80
                    > USED AT LINE 97 IN core-memory.z80
AT:                 0EB8 DEFINED AT LINE 11
                    > USED AT LINE 50 IN core-compiler.z80
                    > USED AT LINE 73 IN core-compiler.z80
                    > USED AT LINE 86 IN core-compiler.z80
                    > USED AT LINE 101 IN core-compiler.z80
                    > USED AT LINE 134 IN core-compiler.z80
                    > USED AT LINE 47 IN core-does.z80
                    > USED AT LINE 22 IN core-format.z80
                    > USED AT LINE 28 IN core-format.z80
                    > USED AT LINE 16 IN core-interpret.z80
                    > USED AT LINE 68 IN core-interpret.z80
                    > USED AT LINE 69 IN core-interpret.z80
                    > USED AT LINE 92 IN core-interpret.z80
                    > USED AT LINE 104 IN core-interpret.z80
                    > USED AT LINE 115 IN core-interpret.z80
                    > USED AT LINE 146 IN core-interpret.z80
                    > USED AT LINE 147 IN core-interpret.z80
                    > USED AT LINE 149 IN core-interpret.z80
                    > USED AT LINE 172 IN core-interpret.z80
                    > USED AT LINE 192 IN core-interpret.z80
                    > USED AT LINE 227 IN core-interpret.z80
                    > USED AT LINE 56 IN core-io.z80
                    > USED AT LINE 72 IN core-io.z80
                    > USED AT LINE 166 IN core-io.z80
                    > USED AT LINE 180 IN core-io.z80
                    > USED AT LINE 70 IN core-kernel.z80
                    > USED AT LINE 103 IN core-memory.z80
                    > USED AT LINE 114 IN core-memory.z80
                    > USED AT LINE 131 IN core-memory.z80
                    > USED AT LINE 30 IN core-utils.z80
                    > USED AT LINE 74 IN core-utils.z80
                    > USED AT LINE 78 IN core-utils.z80
                    > USED AT LINE 118 IN core-utils.z80
                    > USED AT LINE 58 IN tester.z80
CSTOR:              0EC0 DEFINED AT LINE 11
                    > USED AT LINE 197 IN core-io.z80
                    > USED AT LINE 145 IN core-memory.z80
                    > USED AT LINE 159 IN core-memory.z80
                    > USED AT LINE 187 IN core-memory.z80
CAT:                0EC8 DEFINED AT LINE 11
                    > USED AT LINE 67 IN core-compiler.z80
                    > USED AT LINE 17 IN core-interpret.z80
                    > USED AT LINE 22 IN core-interpret.z80
                    > USED AT LINE 111 IN core-io.z80
                    > USED AT LINE 121 IN core-io.z80
                    > USED AT LINE 109 IN core-memory.z80
                    > USED AT LINE 7 IN core-utils.z80
                    > USED AT LINE 20 IN core-utils.z80
RAT:                0ED0 DEFINED AT LINE 11
                    > USED AT LINE 155 IN core-alu.z80
                    > USED AT LINE 265 IN core-alu.z80
                    > USED AT LINE 52 IN core-does.z80
                    > USED AT LINE 23 IN core-interpret.z80
                    > USED AT LINE 32 IN core-interpret.z80
                    > USED AT LINE 133 IN core-interpret.z80
                    > USED AT LINE 134 IN core-interpret.z80
                    > USED AT LINE 145 IN core-memory.z80
                    > USED AT LINE 54 IN core-utils.z80
RPAT:               0EDA DEFINED AT LINE 11
                    > USED AT LINE 185 IN core-interpret.z80
RPSTO:              0EE2 DEFINED AT LINE 11
SPAT:               0EEA DEFINED AT LINE 11
                    > USED AT LINE 184 IN core-interpret.z80
                    > USED AT LINE 84 IN core-stacks.z80
                    > USED AT LINE 89 IN core-stacks.z80
SPSTO:              0EF4 DEFINED AT LINE 11
PSTOR:              0EFC DEFINED AT LINE 11
                    > USED AT LINE 13 IN core-compiler.z80
DSTOR:              0F0E DEFINED AT LINE 11
DAT:                0F1E DEFINED AT LINE 11
COUNT:              0F2E DEFINED AT LINE 11
                    > USED AT LINE 44 IN core-compiler.z80
                    > USED AT LINE 59 IN core-compiler.z80
                    > USED AT LINE 142 IN core-io.z80
                    > USED AT LINE 96 IN core-utils.z80
HERE:               0F40 DEFINED AT LINE 11
                    > USED AT LINE 18 IN core-compiler.z80
                    > USED AT LINE 71 IN core-compiler.z80
                    > USED AT LINE 9 IN core-control.z80
                    > USED AT LINE 43 IN core-control.z80
                    > USED AT LINE 48 IN core-control.z80
                    > USED AT LINE 121 IN core-interpret.z80
                    > USED AT LINE 119 IN core-memory.z80
PAD:                0F4A DEFINED AT LINE 11
                    > USED AT LINE 17 IN core-format.z80
                    > USED AT LINE 52 IN core-format.z80
TIB:                0F58 DEFINED AT LINE 11
                    > USED AT LINE 91 IN core-interpret.z80
                    > USED AT LINE 239 IN core-io.z80
ATEXE:              0F64 DEFINED AT LINE 49
                    > USED AT LINE 92 IN core-compiler.z80
                    > USED AT LINE 231 IN core-interpret.z80
                    > USED AT LINE 267 IN core-interpret.z80
                    > USED AT LINE 225 IN core-io.z80
                    > USED AT LINE 234 IN core-io.z80
EXE1:               0F72 DEFINED AT LINE 134 IN core-memory.z80
                    > USED AT LINE 132 IN core-memory.z80
CMOVE:              0F74 DEFINED AT LINE 11
                    > USED AT LINE 188 IN core-memory.z80
CMOV1:              0F7E DEFINED AT LINE 143 IN core-memory.z80
                    > USED AT LINE 149 IN core-memory.z80
CMOV2:              0F96 DEFINED AT LINE 148 IN core-memory.z80
                    > USED AT LINE 142 IN core-memory.z80
FILL:               0F9E DEFINED AT LINE 11
FILL1:              0FAC DEFINED AT LINE 158 IN core-memory.z80
                    > USED AT LINE 161 IN core-memory.z80
FILL2:              0FB6 DEFINED AT LINE 160 IN core-memory.z80
                    > USED AT LINE 157 IN core-memory.z80
DTRAI:              0FBE DEFINED AT LINE 11
DTRA1:              0FC8 DEFINED AT LINE 170 IN core-memory.z80
                    > USED AT LINE 175 IN core-memory.z80
DTRA2:              0FE2 DEFINED AT LINE 174 IN core-memory.z80
                    > USED AT LINE 169 IN core-memory.z80
                    > USED AT LINE 172 IN core-memory.z80
PACKS:              0FEC DEFINED AT LINE 11
                    > USED AT LINE 116 IN core-interpret.z80
ALGND:              1026 DEFINED AT LINE 11
                    > USED AT LINE 71 IN core-compiler.z80
                    > USED AT LINE 53 IN core-does.z80
                    > USED AT LINE 182 IN core-memory.z80
ERR_DIVZERO:        1032 DEFINED AT LINE 3 IN core-messages.z80
ERR_OUTOFRANGE:     103E DEFINED AT LINE 4 IN core-messages.z80
TOR:                104C DEFINED AT LINE 11
                    > USED AT LINE 65 IN core-alu.z80
                    > USED AT LINE 152 IN core-alu.z80
                    > USED AT LINE 153 IN core-alu.z80
                    > USED AT LINE 153 IN core-alu.z80
                    > USED AT LINE 158 IN core-alu.z80
                    > USED AT LINE 261 IN core-alu.z80
                    > USED AT LINE 263 IN core-alu.z80
                    > USED AT LINE 335 IN core-alu.z80
                    > USED AT LINE 32 IN core-compiler.z80
                    > USED AT LINE 4 IN core-control.z80
                    > USED AT LINE 53 IN core-does.z80
                    > USED AT LINE 57 IN core-format.z80
                    > USED AT LINE 5 IN core-interpret.z80
                    > USED AT LINE 27 IN core-interpret.z80
                    > USED AT LINE 54 IN core-interpret.z80
                    > USED AT LINE 66 IN core-interpret.z80
                    > USED AT LINE 76 IN core-interpret.z80
                    > USED AT LINE 91 IN core-interpret.z80
                    > USED AT LINE 131 IN core-interpret.z80
                    > USED AT LINE 170 IN core-interpret.z80
                    > USED AT LINE 184 IN core-interpret.z80
                    > USED AT LINE 108 IN core-io.z80
                    > USED AT LINE 147 IN core-io.z80
                    > USED AT LINE 153 IN core-io.z80
                    > USED AT LINE 185 IN core-io.z80
                    > USED AT LINE 141 IN core-memory.z80
                    > USED AT LINE 144 IN core-memory.z80
                    > USED AT LINE 156 IN core-memory.z80
                    > USED AT LINE 168 IN core-memory.z80
                    > USED AT LINE 63 IN core-stacks.z80
                    > USED AT LINE 78 IN core-stacks.z80
                    > USED AT LINE 4 IN core-utils.z80
                    > USED AT LINE 17 IN core-utils.z80
                    > USED AT LINE 32 IN core-utils.z80
                    > USED AT LINE 51 IN core-utils.z80
RFROM:              105A DEFINED AT LINE 11
                    > USED AT LINE 67 IN core-alu.z80
                    > USED AT LINE 129 IN core-alu.z80
                    > USED AT LINE 154 IN core-alu.z80
                    > USED AT LINE 155 IN core-alu.z80
                    > USED AT LINE 156 IN core-alu.z80
                    > USED AT LINE 163 IN core-alu.z80
                    > USED AT LINE 267 IN core-alu.z80
                    > USED AT LINE 327 IN core-alu.z80
                    > USED AT LINE 31 IN core-compiler.z80
                    > USED AT LINE 36 IN core-does.z80
                    > USED AT LINE 47 IN core-does.z80
                    > USED AT LINE 52 IN core-does.z80
                    > USED AT LINE 11 IN core-interpret.z80
                    > USED AT LINE 39 IN core-interpret.z80
                    > USED AT LINE 39 IN core-interpret.z80
                    > USED AT LINE 43 IN core-interpret.z80
                    > USED AT LINE 44 IN core-interpret.z80
                    > USED AT LINE 61 IN core-interpret.z80
                    > USED AT LINE 63 IN core-interpret.z80
                    > USED AT LINE 79 IN core-interpret.z80
                    > USED AT LINE 83 IN core-interpret.z80
                    > USED AT LINE 83 IN core-interpret.z80
                    > USED AT LINE 85 IN core-interpret.z80
                    > USED AT LINE 93 IN core-interpret.z80
                    > USED AT LINE 137 IN core-interpret.z80
                    > USED AT LINE 155 IN core-interpret.z80
                    > USED AT LINE 160 IN core-interpret.z80
                    > USED AT LINE 171 IN core-interpret.z80
                    > USED AT LINE 176 IN core-interpret.z80
                    > USED AT LINE 177 IN core-interpret.z80
                    > USED AT LINE 186 IN core-interpret.z80
                    > USED AT LINE 187 IN core-interpret.z80
                    > USED AT LINE 193 IN core-interpret.z80
                    > USED AT LINE 194 IN core-interpret.z80
                    > USED AT LINE 195 IN core-interpret.z80
                    > USED AT LINE 154 IN core-io.z80
                    > USED AT LINE 147 IN core-memory.z80
                    > USED AT LINE 173 IN core-memory.z80
                    > USED AT LINE 42 IN core-utils.z80
                    > USED AT LINE 44 IN core-utils.z80
                    > USED AT LINE 40 IN tester.z80
                    > USED AT LINE 43 IN tester.z80
DUPP:               1068 DEFINED AT LINE 11
                    > USED AT LINE 77 IN core-alu.z80
                    > USED AT LINE 152 IN core-alu.z80
                    > USED AT LINE 259 IN core-alu.z80
                    > USED AT LINE 263 IN core-alu.z80
                    > USED AT LINE 370 IN core-alu.z80
                    > USED AT LINE 18 IN core-compiler.z80
                    > USED AT LINE 31 IN core-compiler.z80
                    > USED AT LINE 56 IN core-compiler.z80
                    > USED AT LINE 67 IN core-compiler.z80
                    > USED AT LINE 70 IN core-compiler.z80
                    > USED AT LINE 74 IN core-compiler.z80
                    > USED AT LINE 23 IN core-format.z80
                    > USED AT LINE 34 IN core-format.z80
                    > USED AT LINE 57 IN core-format.z80
                    > USED AT LINE 9 IN core-interpret.z80
                    > USED AT LINE 11 IN core-interpret.z80
                    > USED AT LINE 27 IN core-interpret.z80
                    > USED AT LINE 41 IN core-interpret.z80
                    > USED AT LINE 76 IN core-interpret.z80
                    > USED AT LINE 144 IN core-interpret.z80
                    > USED AT LINE 146 IN core-interpret.z80
                    > USED AT LINE 147 IN core-interpret.z80
                    > USED AT LINE 149 IN core-interpret.z80
                    > USED AT LINE 162 IN core-interpret.z80
                    > USED AT LINE 167 IN core-interpret.z80
                    > USED AT LINE 265 IN core-interpret.z80
                    > USED AT LINE 63 IN core-io.z80
                    > USED AT LINE 78 IN core-io.z80
                    > USED AT LINE 111 IN core-io.z80
                    > USED AT LINE 121 IN core-io.z80
                    > USED AT LINE 122 IN core-io.z80
                    > USED AT LINE 196 IN core-io.z80
                    > USED AT LINE 202 IN core-io.z80
                    > USED AT LINE 219 IN core-io.z80
                    > USED AT LINE 47 IN core-kernel.z80
                    > USED AT LINE 102 IN core-memory.z80
                    > USED AT LINE 108 IN core-memory.z80
                    > USED AT LINE 144 IN core-memory.z80
                    > USED AT LINE 182 IN core-memory.z80
                    > USED AT LINE 183 IN core-memory.z80
                    > USED AT LINE 55 IN core-stacks.z80
                    > USED AT LINE 56 IN core-stacks.z80
                    > USED AT LINE 7 IN core-utils.z80
                    > USED AT LINE 20 IN core-utils.z80
                    > USED AT LINE 78 IN core-utils.z80
                    > USED AT LINE 109 IN core-utils.z80
                    > USED AT LINE 118 IN core-utils.z80
                    > USED AT LINE 39 IN tester.z80
DROP:               106C DEFINED AT LINE 11
                    > USED AT LINE 50 IN core-alu.z80
                    > USED AT LINE 96 IN core-alu.z80
                    > USED AT LINE 104 IN core-alu.z80
                    > USED AT LINE 114 IN core-alu.z80
                    > USED AT LINE 123 IN core-alu.z80
                    > USED AT LINE 158 IN core-alu.z80
                    > USED AT LINE 161 IN core-alu.z80
                    > USED AT LINE 165 IN core-alu.z80
                    > USED AT LINE 167 IN core-alu.z80
                    > USED AT LINE 281 IN core-alu.z80
                    > USED AT LINE 321 IN core-alu.z80
                    > USED AT LINE 61 IN core-compiler.z80
                    > USED AT LINE 54 IN core-control.z80
                    > USED AT LINE 51 IN core-format.z80
                    > USED AT LINE 83 IN core-format.z80
                    > USED AT LINE 61 IN core-interpret.z80
                    > USED AT LINE 79 IN core-interpret.z80
                    > USED AT LINE 137 IN core-interpret.z80
                    > USED AT LINE 155 IN core-interpret.z80
                    > USED AT LINE 160 IN core-interpret.z80
                    > USED AT LINE 176 IN core-interpret.z80
                    > USED AT LINE 177 IN core-interpret.z80
                    > USED AT LINE 187 IN core-interpret.z80
                    > USED AT LINE 195 IN core-interpret.z80
                    > USED AT LINE 219 IN core-interpret.z80
                    > USED AT LINE 270 IN core-interpret.z80
                    > USED AT LINE 115 IN core-io.z80
                    > USED AT LINE 127 IN core-io.z80
                    > USED AT LINE 210 IN core-io.z80
                    > USED AT LINE 229 IN core-io.z80
                    > USED AT LINE 240 IN core-io.z80
                    > USED AT LINE 68 IN core-stacks.z80
                    > USED AT LINE 68 IN core-stacks.z80
                    > USED AT LINE 11 IN core-utils.z80
                    > USED AT LINE 42 IN core-utils.z80
                    > USED AT LINE 44 IN core-utils.z80
                    > USED AT LINE 85 IN core-utils.z80
                    > USED AT LINE 87 IN core-utils.z80
                    > USED AT LINE 89 IN core-utils.z80
                    > USED AT LINE 122 IN core-utils.z80
                    > USED AT LINE 43 IN tester.z80
SWAP:               1070 DEFINED AT LINE 11
                    > USED AT LINE 96 IN core-alu.z80
                    > USED AT LINE 112 IN core-alu.z80
                    > USED AT LINE 119 IN core-alu.z80
                    > USED AT LINE 121 IN core-alu.z80
                    > USED AT LINE 165 IN core-alu.z80
                    > USED AT LINE 269 IN core-alu.z80
                    > USED AT LINE 286 IN core-alu.z80
                    > USED AT LINE 340 IN core-alu.z80
                    > USED AT LINE 361 IN core-alu.z80
                    > USED AT LINE 48 IN core-control.z80
                    > USED AT LINE 59 IN core-control.z80
                    > USED AT LINE 64 IN core-control.z80
                    > USED AT LINE 12 IN core-format.z80
                    > USED AT LINE 19 IN core-interpret.z80
                    > USED AT LINE 20 IN core-interpret.z80
                    > USED AT LINE 23 IN core-interpret.z80
                    > USED AT LINE 29 IN core-interpret.z80
                    > USED AT LINE 32 IN core-interpret.z80
                    > USED AT LINE 36 IN core-interpret.z80
                    > USED AT LINE 65 IN core-interpret.z80
                    > USED AT LINE 144 IN core-interpret.z80
                    > USED AT LINE 156 IN core-interpret.z80
                    > USED AT LINE 194 IN core-interpret.z80
                    > USED AT LINE 210 IN core-io.z80
                    > USED AT LINE 90 IN core-memory.z80
                    > USED AT LINE 91 IN core-memory.z80
                    > USED AT LINE 96 IN core-memory.z80
                    > USED AT LINE 103 IN core-memory.z80
                    > USED AT LINE 109 IN core-memory.z80
                    > USED AT LINE 156 IN core-memory.z80
                    > USED AT LINE 188 IN core-memory.z80
                    > USED AT LINE 63 IN core-stacks.z80
                    > USED AT LINE 85 IN core-utils.z80
                    > USED AT LINE 87 IN core-utils.z80
                    > USED AT LINE 21 IN tester.z80
                    > USED AT LINE 40 IN tester.z80
OVER:               1078 DEFINED AT LINE 11
                    > USED AT LINE 128 IN core-alu.z80
                    > USED AT LINE 276 IN core-alu.z80
                    > USED AT LINE 59 IN core-compiler.z80
                    > USED AT LINE 52 IN core-format.z80
                    > USED AT LINE 17 IN core-interpret.z80
                    > USED AT LINE 22 IN core-interpret.z80
                    > USED AT LINE 56 IN core-interpret.z80
                    > USED AT LINE 65 IN core-interpret.z80
                    > USED AT LINE 82 IN core-interpret.z80
                    > USED AT LINE 85 IN core-interpret.z80
                    > USED AT LINE 133 IN core-interpret.z80
                    > USED AT LINE 134 IN core-interpret.z80
                    > USED AT LINE 154 IN core-io.z80
                    > USED AT LINE 185 IN core-io.z80
                    > USED AT LINE 197 IN core-io.z80
                    > USED AT LINE 215 IN core-io.z80
                    > USED AT LINE 229 IN core-io.z80
                    > USED AT LINE 90 IN core-memory.z80
                    > USED AT LINE 96 IN core-memory.z80
                    > USED AT LINE 171 IN core-memory.z80
                    > USED AT LINE 183 IN core-memory.z80
                    > USED AT LINE 185 IN core-memory.z80
                    > USED AT LINE 73 IN core-stacks.z80
                    > USED AT LINE 73 IN core-stacks.z80
                    > USED AT LINE 16 IN core-utils.z80
QDUP:               1080 DEFINED AT LINE 11
                    > USED AT LINE 84 IN core-compiler.z80
                    > USED AT LINE 135 IN core-interpret.z80
                    > USED AT LINE 172 IN core-interpret.z80
                    > USED AT LINE 174 IN core-interpret.z80
                    > USED AT LINE 225 IN core-interpret.z80
                    > USED AT LINE 131 IN core-memory.z80
                    > USED AT LINE 94 IN core-utils.z80
                    > USED AT LINE 113 IN core-utils.z80
QDUP1:              108C DEFINED AT LINE 57 IN core-stacks.z80
ROT:                108E DEFINED AT LINE 11
                    > USED AT LINE 78 IN core-stacks.z80
                    > USED AT LINE 35 IN core-utils.z80
                    > USED AT LINE 35 IN core-utils.z80
DDROP:              109C DEFINED AT LINE 11
                    > USED AT LINE 167 IN core-alu.z80
                    > USED AT LINE 43 IN core-interpret.z80
                    > USED AT LINE 80 IN core-io.z80
                    > USED AT LINE 150 IN core-memory.z80
                    > USED AT LINE 162 IN core-memory.z80
DDUP:               10A6 DEFINED AT LINE 11
                    > USED AT LINE 94 IN core-alu.z80
                    > USED AT LINE 103 IN core-alu.z80
                    > USED AT LINE 111 IN core-alu.z80
                    > USED AT LINE 119 IN core-alu.z80
                    > USED AT LINE 148 IN core-alu.z80
                    > USED AT LINE 326 IN core-alu.z80
                    > USED AT LINE 217 IN core-io.z80
                    > USED AT LINE 159 IN core-memory.z80
                    > USED AT LINE 187 IN core-memory.z80
                    > USED AT LINE 76 IN core-utils.z80
                    > USED AT LINE 80 IN core-utils.z80
TWOSWAP:            10B0 DEFINED AT LINE 11
PICK:               10BE DEFINED AT LINE 11
                    > USED AT LINE 54 IN core-utils.z80
DEPTH:              10D2 DEFINED AT LINE 11
                    > USED AT LINE 256 IN core-interpret.z80
                    > USED AT LINE 50 IN core-utils.z80
                    > USED AT LINE 59 IN tester.z80
                    > USED AT LINE 68 IN tester.z80
                    > USED AT LINE 70 IN tester.z80
                    > USED AT LINE 79 IN tester.z80
SZERO:              10E8 DEFINED AT LINE 11
                    > USED AT LINE 70 IN core-kernel.z80
                    > USED AT LINE 89 IN core-stacks.z80
RZERO:              10F0 DEFINED AT LINE 11
TQKEY:              10F8 DEFINED AT LINE 49
                    > USED AT LINE 56 IN core-io.z80
TEMIT:              1100 DEFINED AT LINE 49
                    > USED AT LINE 72 IN core-io.z80
TEXPE:              1108 DEFINED AT LINE 49
                    > USED AT LINE 234 IN core-io.z80
TTAP:               1110 DEFINED AT LINE 49
                    > USED AT LINE 225 IN core-io.z80
TECHO:              1118 DEFINED AT LINE 49
                    > USED AT LINE 188 IN core-io.z80
                    > USED AT LINE 196 IN core-io.z80
TPROM:              1120 DEFINED AT LINE 49
                    > USED AT LINE 270 IN core-interpret.z80
BASE:               1128 DEFINED AT LINE 11
                    > USED AT LINE 28 IN core-format.z80
                    > USED AT LINE 16 IN core-interpret.z80
                    > USED AT LINE 29 IN core-interpret.z80
                    > USED AT LINE 44 IN core-interpret.z80
                    > USED AT LINE 166 IN core-io.z80
                    > USED AT LINE 30 IN core-utils.z80
TEMP:               1130 DEFINED AT LINE 49
                    > USED AT LINE 50 IN core-interpret.z80
                    > USED AT LINE 68 IN core-interpret.z80
                    > USED AT LINE 69 IN core-interpret.z80
                    > USED AT LINE 153 IN core-interpret.z80
SPAN:               1138 DEFINED AT LINE 49
INN:                1140 DEFINED AT LINE 11
NTIB:               1148 DEFINED AT LINE 49
                    > USED AT LINE 92 IN core-interpret.z80
                    > USED AT LINE 104 IN core-interpret.z80
                    > USED AT LINE 125 IN core-memory.z80
CSP:                1150 DEFINED AT LINE 49
TEVAL:              1158 DEFINED AT LINE 49
                    > USED AT LINE 267 IN core-interpret.z80
TNUMB:              1160 DEFINED AT LINE 49
                    > USED AT LINE 92 IN core-compiler.z80
                    > USED AT LINE 231 IN core-interpret.z80
HLD:                1168 DEFINED AT LINE 49
                    > USED AT LINE 17 IN core-format.z80
                    > USED AT LINE 22 IN core-format.z80
                    > USED AT LINE 23 IN core-format.z80
                    > USED AT LINE 51 IN core-format.z80
HANDL:              1170 DEFINED AT LINE 49
                    > USED AT LINE 185 IN core-interpret.z80
                    > USED AT LINE 186 IN core-interpret.z80
                    > USED AT LINE 192 IN core-interpret.z80
                    > USED AT LINE 193 IN core-interpret.z80
CNTXT:              1178 DEFINED AT LINE 49
                    > USED AT LINE 167 IN core-interpret.z80
CRRNT:              1180 DEFINED AT LINE 49
                    > USED AT LINE 73 IN core-compiler.z80
                    > USED AT LINE 72 IN core-utils.z80
CP:                 1188 DEFINED AT LINE 49
                    > USED AT LINE 13 IN core-compiler.z80
                    > USED AT LINE 19 IN core-compiler.z80
                    > USED AT LINE 45 IN core-compiler.z80
                    > USED AT LINE 114 IN core-memory.z80
NP:                 1190 DEFINED AT LINE 49
                    > USED AT LINE 115 IN core-interpret.z80
LAST:               1198 DEFINED AT LINE 11
                    > USED AT LINE 50 IN core-compiler.z80
                    > USED AT LINE 70 IN core-compiler.z80
                    > USED AT LINE 101 IN core-compiler.z80
                    > USED AT LINE 134 IN core-compiler.z80
VFRTH:              11A0 DEFINED AT LINE 49
UTYPE:              11A8 DEFINED AT LINE 11
                    > USED AT LINE 97 IN core-utils.z80
UTYP1:              11B2 DEFINED AT LINE 6 IN core-utils.z80
                    > USED AT LINE 10 IN core-utils.z80
UTYP2:              11C0 DEFINED AT LINE 9 IN core-utils.z80
                    > USED AT LINE 5 IN core-utils.z80
DMP:                11C8 DEFINED AT LINE 49
PDUM1:              11DC DEFINED AT LINE 19 IN core-utils.z80
                    > USED AT LINE 23 IN core-utils.z80
PDUM2:              11EC DEFINED AT LINE 22 IN core-utils.z80
                    > USED AT LINE 18 IN core-utils.z80
DUMP:               11F2 DEFINED AT LINE 11
DUMP1:              1206 DEFINED AT LINE 33 IN core-utils.z80
                    > USED AT LINE 39 IN core-utils.z80
DUMP2:              122A DEFINED AT LINE 41 IN core-utils.z80
                    > USED AT LINE 38 IN core-utils.z80
DUMP3:              122E DEFINED AT LINE 43 IN core-utils.z80
                    > USED AT LINE 40 IN core-utils.z80
DOTS:               1238 DEFINED AT LINE 11
DOTS1:              1246 DEFINED AT LINE 53 IN core-utils.z80
                    > USED AT LINE 56 IN core-utils.z80
DOTS2:              124C DEFINED AT LINE 55 IN core-utils.z80
                    > USED AT LINE 52 IN core-utils.z80
TNAME:              125A DEFINED AT LINE 11
                    > USED AT LINE 111 IN core-utils.z80
TNAM1:              1260 DEFINED AT LINE 73 IN core-utils.z80
                    > USED AT LINE 86 IN core-utils.z80
TNAM2:              126C DEFINED AT LINE 77 IN core-utils.z80
                    > USED AT LINE 83 IN core-utils.z80
TNAM3:              1284 DEFINED AT LINE 84 IN core-utils.z80
                    > USED AT LINE 79 IN core-utils.z80
                    > USED AT LINE 81 IN core-utils.z80
TNAM4:              1298 DEFINED AT LINE 88 IN core-utils.z80
                    > USED AT LINE 75 IN core-utils.z80
DOTID:              12A0 DEFINED AT LINE 11
                    > USED AT LINE 115 IN core-utils.z80
DOTI1:              12B6 DEFINED AT LINE 98 IN core-utils.z80
                    > USED AT LINE 95 IN core-utils.z80
SEE:                12C4 DEFINED AT LINE 11
SEE1:               12CE DEFINED AT LINE 108 IN core-utils.z80
                    > USED AT LINE 121 IN core-utils.z80
SEE2:               12DC DEFINED AT LINE 112 IN core-utils.z80
                    > USED AT LINE 110 IN core-utils.z80
SEE3:               12EA DEFINED AT LINE 117 IN core-utils.z80
                    > USED AT LINE 114 IN core-utils.z80
SEE4:               12F0 DEFINED AT LINE 119 IN core-utils.z80
                    > USED AT LINE 116 IN core-utils.z80
LASTN:              13FC DEFINED AT LINE 87
                    > USED AT LINE 30 IN defaults.z80
                    > USED AT LINE 31 IN defaults.z80
SPP:                2200 DEFINED AT LINE 3 IN variables.z80
                    > USED AT LINE 45
                    > USED AT LINE 5 IN defaults.z80
TIBB:               2200 DEFINED AT LINE 4 IN variables.z80
                    > USED AT LINE 18 IN defaults.z80
                    > USED AT LINE 71 IN core-kernel.z80
RPP:                2400 DEFINED AT LINE 6 IN variables.z80
                    > USED AT LINE 53
                    > USED AT LINE 6 IN defaults.z80
SERBUF:             2400 DEFINED AT LINE 9 IN variables.z80
                    > USED AT LINE 19 IN interrupt.z80
                    > USED AT LINE 21 IN interrupt.z80
                    > USED AT LINE 6 IN serial.z80
                    > USED AT LINE 21 IN serial.z80
                    > USED AT LINE 23 IN serial.z80
SERINPTR:           243F DEFINED AT LINE 10 IN variables.z80
                    > USED AT LINE 16 IN interrupt.z80
                    > USED AT LINE 22 IN interrupt.z80
                    > USED AT LINE 7 IN serial.z80
SERRDPTR:           2441 DEFINED AT LINE 11 IN variables.z80
                    > USED AT LINE 8 IN serial.z80
                    > USED AT LINE 18 IN serial.z80
                    > USED AT LINE 26 IN serial.z80
SERBUFUSED:         2443 DEFINED AT LINE 12 IN variables.z80
                    > USED AT LINE 10 IN interrupt.z80
                    > USED AT LINE 25 IN interrupt.z80
                    > USED AT LINE 27 IN interrupt.z80
                    > USED AT LINE 10 IN serial.z80
                    > USED AT LINE 27 IN serial.z80
                    > USED AT LINE 29 IN serial.z80
                    > USED AT LINE 51 IN serial.z80
UPP:                2445 DEFINED AT LINE 14 IN variables.z80
                    > USED AT LINE 49
                    > USED AT LINE 42 IN core-does.z80
VARSZERO:           2445 DEFINED AT LINE 16 IN variables.z80
VARRZERO:           2447 DEFINED AT LINE 17 IN variables.z80
VARTQKEY:           2449 DEFINED AT LINE 18 IN variables.z80
VARTEMIT:           244B DEFINED AT LINE 19 IN variables.z80
VARTEXPE:           244D DEFINED AT LINE 20 IN variables.z80
VARTTAP:            244F DEFINED AT LINE 21 IN variables.z80
VARTECHO:           2451 DEFINED AT LINE 22 IN variables.z80
VARTPROM:           2453 DEFINED AT LINE 23 IN variables.z80
VARBASE:            2455 DEFINED AT LINE 24 IN variables.z80
VARTEMP:            2457 DEFINED AT LINE 25 IN variables.z80
VARSPAN:            2459 DEFINED AT LINE 26 IN variables.z80
VARINN:             245B DEFINED AT LINE 27 IN variables.z80
VARNTIB:            245D DEFINED AT LINE 28 IN variables.z80
VARTIB:             245F DEFINED AT LINE 29 IN variables.z80
VARCSP:             2461 DEFINED AT LINE 30 IN variables.z80
VARTEVAL:           2463 DEFINED AT LINE 31 IN variables.z80
VARTNUMB:           2465 DEFINED AT LINE 32 IN variables.z80
VARHLD:             2467 DEFINED AT LINE 33 IN variables.z80
VARHANDL:           2469 DEFINED AT LINE 34 IN variables.z80
VARCNTXT:           246B DEFINED AT LINE 35 IN variables.z80
VARVOCABS:          246D DEFINED AT LINE 36 IN variables.z80
VARCRRNT:           246F DEFINED AT LINE 37 IN variables.z80
VARVOCABLP:         2471 DEFINED AT LINE 38 IN variables.z80
VARCP:              2473 DEFINED AT LINE 39 IN variables.z80
VARNP:              2475 DEFINED AT LINE 40 IN variables.z80
VARLAST:            2477 DEFINED AT LINE 41 IN variables.z80
VARVFRTH:           2479 DEFINED AT LINE 42 IN variables.z80
VARVOCABL:          247B DEFINED AT LINE 43 IN variables.z80
VECTAB:             247D DEFINED AT LINE 45 IN variables.z80
VRST08:             247D DEFINED AT LINE 46 IN variables.z80
                    > USED AT LINE 12
VRST10:             247F DEFINED AT LINE 47 IN variables.z80
                    > USED AT LINE 16
VRST18:             2481 DEFINED AT LINE 48 IN variables.z80
                    > USED AT LINE 20
VRST20:             2483 DEFINED AT LINE 49 IN variables.z80
                    > USED AT LINE 24
VRST28:             2485 DEFINED AT LINE 50 IN variables.z80
                    > USED AT LINE 28
VRST30:             2487 DEFINED AT LINE 51 IN variables.z80
                    > USED AT LINE 32
VINT:               2489 DEFINED AT LINE 52 IN variables.z80
                    > USED AT LINE 36
                    > USED AT LINE 44
VNMI:               248B DEFINED AT LINE 53 IN variables.z80
                    > USED AT LINE 40
TESCNT:             248D DEFINED AT LINE 55 IN variables.z80
                    > USED AT LINE 58 IN tester.z80
TESDPTH:            248F DEFINED AT LINE 56 IN variables.z80
                    > USED AT LINE 59 IN tester.z80
                    > USED AT LINE 68 IN tester.z80
                    > USED AT LINE 70 IN tester.z80
                    > USED AT LINE 79 IN tester.z80
CPP:                2491 DEFINED AT LINE 58 IN variables.z80
                    > USED AT LINE 28 IN defaults.z80
                    > USED AT LINE 93
                    > USED AT LINE 98
NPP:                FFFE DEFINED AT LINE 60 IN variables.z80
                    > USED AT LINE 29 IN defaults.z80
                    > USED AT LINE 94
TESDOT:             2492 DEFINED AT LINE 49
TESDOT1:            24A2 DEFINED AT LINE 8 IN tester.z80
                    > USED AT LINE 6 IN tester.z80
TESHALT:            24AA DEFINED AT LINE 49
                    > USED AT LINE 82 IN tester.z80
TESHASH:            24B0 DEFINED AT LINE 49
TESHASHN:           24BC DEFINED AT LINE 49
                    > USED AT LINE 69 IN tester.z80
                    > USED AT LINE 80 IN tester.z80
TESHASHN1:          24C6 DEFINED AT LINE 38 IN tester.z80
TESHASHN2:          24E0 DEFINED AT LINE 42 IN tester.z80
TESSTRT:            24E6 DEFINED AT LINE 11
TESLBR:             24F4 DEFINED AT LINE 11
TESRBR:             250E DEFINED AT LINE 11
TESEQ:              2524 DEFINED AT LINE 11
TESEQ1:             253A DEFINED AT LINE 83 IN tester.z80
TESEND:             253C DEFINED AT LINE 11
TESTS_START:        2548 DEFINED AT LINE 100

0000                          .ENGINE   mycomputer   
0000                TESTMODE:   EQU   0   
0000                COMPO:    EQU   $20   ;lexicon compile only bit
0000                IMEDD:    EQU   $40   ;lexicon immediate bit
0000                MASKK:    EQU   $1F   ;lexicon bit mask
0000                CHARR:    EQU   1   ;byte size of a character
0000                CELLL:    EQU   2   
0000                BASEE:    EQU   10   ;BASE
0000                VOCSS:    EQU   8   ;depth of vocabulary stack
0000                MAXCHAR:   EQU   0FFh   ;Extended character set					                    ;  Use 07Fh for ASCII only
0000                MAXSIGNED:   EQU   07FFFh   ;max value of signed integer
0000                MAXUNSIGNED:   EQU   0FFFFh   ;max value of unsigned integer
0000                MAXNEGATIVE:   EQU   8000h   ;max value of negative integer
0000                BKSPP:    EQU   8   ;backspace
0000                LFF:      EQU   $0A   ;line feed
0000                CRR:      EQU   $0D   ;carriage return
0000                SPACEE:   EQU   $20   
0000                TIC:      EQU   $27   ;tick
0000                MINUSS:   EQU   $2D   
0000                UNDERSC:   EQU   $5F   
0000                CALLL:    EQU   $CD00   ; NOP followed by CALL opcodes
0000                MEM_SIZE:   EQU   $10000   ; MEM is 64K
0000                ROM_SIZE:   EQU   $2000   ; ROM is 8K
0000                RAM_SIZE:   EQU   MEM_SIZE - ROM_SIZE   ; RAM is 64K - 8K
0000                START_ROM:   EQU   BM   ; inclusive
0000                END_ROM:   EQU   BM + ROM_SIZE   ; exclusive
0000                START_RAM:   EQU   BM + ROM_SIZE   ; inclusive
0000                END_RAM:   EQU   START_RAM + RAM_SIZE   ; exclusive
0000                BM:       EQU   0   ; bottom of ROM memory
0000                EM:       EQU   BM + MEM_SIZE   
0000                UAB:      EQU   $C000   ; user area base address
0000                UAEM:     EQU   $E200   ; user area end of memory adr
0000                US:       EQU   END_DEFAULTS - DEFAULTS   ;user area size
0000                RTS:      EQU   $100 * CELLL   ;return stack/TIB size
0000                DTS:      EQU   $100 * CELLL   ;data stack size
0000                RET_STACK_SIZE:   EQU   $100   
0000                DATA_STACK_SIZE:   EQU   $100   
0000                INT_ADDR:   EQU   $0038   
0000                SER_BUFSIZE:   EQU   $3F   
0000                SER_FULLSIZE:   EQU   $30   
0000                SER_EMPTYSIZE:   EQU   5   
0000                RTS_HIGH:   EQU   $D6   
0000                RTS_LOW:   EQU   $96   
0000                TRUEE:    EQU   -1   
0000                FALSEE:   EQU   0   
0000                             ; Initialize assembly variables
0000                VVCODE:   .SET   0   
0000                VVNAME:   .SET   END_ROM   
0000                VVLINK:   .SET   0   ;force a null link
0000                VVUSER:   .SET   0   ;first user variable offset
0000                .macro MCODE,aaLEX,aaNAME,aaLABEL
0000                             ; 
0000                 .align 2                                         ;;force to cell boundary
0000                aaLABEL:                                              ;;assembly label
0000                 vvCODE .set $
0000                 vvLEN  .set (aaLEX & 01FH) / CELLL              ;;string cell count, round down
0000                 ORG vvNAME - ((vvLEN + 3) * CELLL)                                     ; ? needed
0000                 vvNAME .set $
0000                 DW vvCODE, vvLINK                               ;;token pointer and link
0000                 vvLINK .set $                                   ;;link points to a name string
0000                 DB aaLEX, aaNAME                                    ;;name string
0000                 ORG vvCODE                                      ;;restore code pointer
0000                .endm
0000                 
0000                .macro MCOLON,aaLEX,aaNAME,aaLABEL
0000                             ; 
0000                 mCODE aaLEX, aaNAME, aaLABEL
0000                 nop
0000                 CALL doLIST
0000                .endm
0000                 
0000                .macro MCONST,aaLEX,aaNAME,aaLABEL,aaVALUE
0000                             ; 
0000                	mCODE aaLEX, aaNAME, aaLABEL
0000                	nop
0000                	call DoCONST
0000                	DW	aaVALUE
0000                .endm
0000                 
0000                .macro MUSER,aaLEX,aaNAME,aaLABEL
0000                             ; 
0000                	mCODE aaLEX, aaNAME, aaLABEL
0000                 nop
0000                 CALL doLIST
0000                 DW DoUSE,vvUSER
0000                 vvUSER .set vvUSER + CELLL
0000                .endm
0000                 
0000                .macro MDSTRING,aaFUNC,aaSTR
0000                             ; 
0000                 DW aaFUNC                       ;;function
0000                 vvLEN .set $                    ;;save address of count byte
0000                 DB 0,aaSTR                      ;;count byte and string
0000                 vvCODE .set $                   ;;save code pointer
0000                ORG vvLEN                           ;;point to count byte
0000                 DB vvCODE - vvLEN - 1           ;;set count
0000                ORG vvCODE                          ;;restore code pointer
0000                 .align 2
0000                .endm
0000                 
0000                .macro MNEXTHL,
0000                             ; 
0000                	LD	E,(HL)	                    ; 7t
0000                	INC	HL	                        ; 6t
0000                	LD	D,(HL)	                    ; 7t
0000                	INC	HL	                        ; 6t
0000                	EX	DE,HL	                    ; 4t
0000                	JP	(HL)	                    ; 4t
0000                .endm
0000                 
0000                .macro MNEXT,
0000                             ; 
0000                	EX	DE,HL	                    ; 4t
0000                 mNEXTHL                         ; 34t
0000                .endm
0000                 
0000                          .ORG   START_ROM   
0000                RESET:       
0000   C3 72 00               JP   INIT   ; C3 veclo vechi
0038                          .ORG   INT_ADDR   ; RST 38 - INTERRUPT VECTOR [ for IM 1 ]
0038   F5           SERIALINT:   PUSH   AF   
0039   E5                     PUSH   HL   
003A   DB 80                  IN   A,($80)   
003C   E6 01                  AND   $01   ; Check if interupt due to read buffer full
003E   28 2D                  JR   Z,rts0   ; if not, ignore
0040   DB 81                  IN   A,($81)   
0042   F5                     PUSH   AF   
0043   3A 3C 24               LD   A,(serBufUsed)   
0046   FE 3F                  CP   SER_BUFSIZE   ; If full then ignore
0048   20 03                  JR   NZ,notFull   
004A   F1                     POP   AF   
004B   18 20                  JR   rts0   
004D   2A 38 24     NOTFULL:   LD   HL,(serInPtr)   
0050   23                     INC   HL   
0051   7D                     LD   A,L   ; Only need to check low byte becasuse buffer<256 bytes
0052   FE 7D                  CP   (serBuf+SER_BUFSIZE) & $FF   
0054   20 03                  JR   NZ,notWrap   
0056   21 3E 24               LD   HL,serBuf   
0059   22 38 24     NOTWRAP:   LD   (serInPtr),HL   
005C   F1                     POP   AF   
005D   77                     LD   (HL),A   
005E   3A 3C 24               LD   A,(serBufUsed)   
0061   3C                     INC   A   
0062   32 3C 24               LD   (serBufUsed),A   
0065   FE 30                  CP   SER_FULLSIZE   
0067   38 04                  JR   C,rts0   
0069   3E D6                  LD   A,RTS_HIGH   
006B   D3 80                  OUT   ($80),A   
006D   E1           RTS0:     POP   HL   
006E   F1                     POP   AF   
006F   FB                     EI      
0070   ED 4D                  RETI      
0072                INIT:        
0072   21 00 22               LD   HL,SPP   ; Setup Forth data stack
0075   F9                     LD   SP,HL   ; also used as return stack by interrupts etc
0076   21 FA 00               LD   HL,DEFAULTS   ; initialize user variables with defaults
0079   11 00 24               LD   DE,UPP   
007C   01 3A 00               LD   BC,US   
007F   ED B0                  LDIR      
0081   21 00 24               LD   HL,RPP   ; set up Forth return stack
0084   E5                     PUSH   HL   
0085   DD E1                  POP   IX   
0087   01 FF FF               LD   BC,-1   ; empty stack marker
008A   11 01 00               LD   DE,RESET + 1   ; contains reset vector
008D   C3 B8 07               JP   COLD   
0090                          IF   TESTMODE   
                              JP   TESTS_START   
0090                          ELSE      
0090   21 D0 08               LD   HL,GREETING   
0093   CD EF 00               CALL   PRINTSZ   
0096                LOOP:        
0096   CD B3 00               CALL   RXA   
0099   CD DE 00               CALL   TXA   
009C   C3 96 00               JP   LOOP   
009F                          ENDIF      
009F                             ; Modified from code by Grant Searle
009F                             ; Minimum 6850 ACIA interrupt driven serial I/O
009F                INIT_IO:      
009F   F3                     DI      ; Disable interrupts
00A0   21 3E 24               LD   HL,serBuf   
00A3   22 38 24               LD   (serInPtr),HL   
00A6   22 3A 24               LD   (serRdPtr),HL   
00A9   AF                     XOR   A   
00AA   32 3C 24               LD   (serBufUsed),A   
00AD   3E 96                  LD   A,RTS_LOW   
00AF   D3 80                  OUT   ($80),A   ; Initialise ACIA
00B1   FB                     EI      
00B2   C9                     RET      
00B3                RXA:         
00B3                WAITFORCHAR:      
00B3   3A 3C 24               LD   A,(serBufUsed)   
00B6   FE 00                  CP   $00   
00B8   28 F9                  JR   Z,waitForChar   
00BA   E5                     PUSH   HL   
00BB   2A 3A 24               LD   HL,(serRdPtr)   
00BE   23                     INC   HL   
00BF   7D                     LD   A,L   ; Only need to check low byte becasuse buffer<256 bytes
00C0   FE 7D                  CP   (serBuf+SER_BUFSIZE) & $FF   
00C2   20 03                  JR   NZ,notRdWrap   
00C4   21 3E 24               LD   HL,serBuf   
00C7                NOTRDWRAP:      
00C7   F3                     DI      
00C8   22 3A 24               LD   (serRdPtr),HL   
00CB   3A 3C 24               LD   A,(serBufUsed)   
00CE   3D                     DEC   A   
00CF   32 3C 24               LD   (serBufUsed),A   
00D2   FE 05                  CP   SER_EMPTYSIZE   
00D4   30 04                  JR   NC,rts1   
00D6   3E 96                  LD   A,RTS_LOW   
00D8   D3 80                  OUT   ($80),A   
00DA                RTS1:        
00DA   7E                     LD   A,(HL)   
00DB   FB                     EI      
00DC   E1                     POP   HL   
00DD   C9                     RET      ; Char ready in A
00DE                TXA:         
00DE   F5                     PUSH   AF   ; Store character
00DF                CONOUT1:      
00DF   DB 80                  IN   A,($80)   ; Status byte
00E1   CB 4F                  BIT   1,A   ; Set Zero flag if still transmitting character
00E3   28 FA                  JR   Z,conout1   ; Loop until flag signals ready
00E5   F1                     POP   AF   ; Retrieve character
00E6   D3 81                  OUT   ($81),A   ; Output the character
00E8   C9                     RET      
00E9                CKINCHAR:      
00E9   3A 3C 24               LD   A,(serBufUsed)   
00EC   FE 00                  CP   $0   
00EE   C9                     RET      
00EF                PRINTSZ:      
00EF   7E                     LD   A,(HL)   ; Get character
00F0   B7                     OR   A   ; Is it $00 ?
00F1   C8                     RET   Z   ; Then RETurn on terminator
00F2   CD DE 00               CALL   TXA   ; Print it
00F5   23                     INC   HL   ; Next Character
00F6   18 F7                  JR   PRINTSZ   ; Continue until $00
00F8   C9                     RET      
00F9                          ALIGN   2   
00FA                DEFAULTS:      
00FA   00 22        DEFSP0:   DW   SPP   ; SP0
00FC   00 24        DEFRP0:   DW   RPP   ; RP0
00FE   8C 06        DEFQKEY:   DW   QRX   ; '?KEY
0100   A8 06        DEFTEMIT:   DW   TXSTO   ; 'EMIT
0102   00 00        DEFTEXPECT:   DW   0   ; 'EXPECT
0104   00 00        DEFTTAP:   DW   0   ; 'TAP
0106   A8 06        DEFTECHO:   DW   TXSTO   ; 'ECHO
0108   00 00        DEFTPROMPT:   DW   0   ; 'PROMPT
010A   00 00        DEFBASE:   DW   0   ; BASE
010C   00 00        DEFTMP:   DW   0   ; tmp
010E   00 00        DEFSPAN:   DW   0   ; SPAN
0110   00 00        DEFPIN:   DW   0   ; >IN
0112   00 00        DEFNTIB:   DW   0   ; #TIB
0114   00 22        DEFTIB:   DW   TIBB   ; TIB
0116   00 00        DEFCSP:   DW   0   ; CSP
0118   00 00        DEFTEVAL:   DW   0   ; 'EVAL
011A   00 00        DEFTNUM:   DW   0   ; 'NUMBER
011C   00 00        DEFHLD:   DW   0   ; HLD
011E   00 00        DEFHANDLER:   DW   0   ; HANDLER
0120   00 00        DEFCONTEXT:   DW   0   ; CONTEXT pointer
0122   00 00        DEFVOCABS:   DW   0   ; vocabulary stack    ???
0124   00 00        DEFCURRENT:   DW   0   ; CURRENT pointer
0126   00 00        DEFVOCABLP:   DW   0   ; vocabulary link pointer ???
0128   7D 24        DEFCP:    DW   CPP   ; CP  for runing phase on RAM
012A   FE FF        DEFNP:    DW   NPP   ; NP  for runing phase on RAM
012C   00 00        DEFLAST:   DW   0   ; LAST
012E   00 00        DEFFORTH:   DW   0   ; FORTH   \ mullti-user ???
0130   00 00        DEFVOCABL:   DW   0   ; vocabulary link       ???
0132   00 00        DEFCOLD:   DW   0   ; "COLD"
0134                END_DEFAULTS:      
0134                VVCODE:   .SET   $   
0134                             ;   2*		( x1 -- x2 )			
0134                             ;		Bit-shift left, filling the least significant bit with 0.
0134                          ;*Macro unroll: mCODE	2,'2*',TwoStar
0134                          ALIGN   2   
0134                TWOSTAR:      
0134                VVCODE:   .SET   $   
0134                VVLEN:    .SET   (2 & 01FH) / CELLL   
1FF8                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FF8                VVNAME:   .SET   $   
1FF8   34 01 00 00            DW   vvCODE,vvLINK   
1FFC                VVLINK:   .SET   $   
1FFC   02 32 2A               DB   2,"2*"   
0134                          .ORG   vvCODE   
0134   CB 21                  SLA   C   
0136   CB 10                  RL   B   
0138                          ;*Macro unroll: 	mNEXT
0138   EB                     EX   DE,HL   
0139                          ;*Macro unroll:  mNEXTHL                         ; 34t
0139   5E                     LD   E,(HL)   ; 34t
013A   23                     INC   HL   
013B   56                     LD   D,(HL)   
013C   23                     INC   HL   
013D   EB                     EX   DE,HL   
013E   E9                     JP   (HL)   
013F                             ;   0<          ( n -- t )
013F                             ;               Return true if n is negative.
013F                          ;*Macro unroll: mCODE	2,'0<', ZLESS
013F                          ALIGN   2   
0140                ZLESS:       
0140                VVCODE:   .SET   $   
0140                VVLEN:    .SET   (2 & 01FH) / CELLL   
1FF0                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FF0                VVNAME:   .SET   $   
1FF0   40 01 FC 1F            DW   vvCODE,vvLINK   
1FF4                VVLINK:   .SET   $   
1FF4   02 30 3C               DB   2,"0<"   
0140                          .ORG   vvCODE   
0140   CB 20                  SLA   B   ; sign bit -> cy flag
0142   9F                     SBC   A,A   ; propagate cy through A
0143   47                     LD   B,A   ; put 0000 or FFFF in TOS
0144   4F                     LD   C,A   
0145                          ;*Macro unroll: 	mNEXT
0145   EB                     EX   DE,HL   
0146                          ;*Macro unroll:  mNEXTHL                         ; 34t
0146   5E                     LD   E,(HL)   ; 34t
0147   23                     INC   HL   
0148   56                     LD   D,(HL)   
0149   23                     INC   HL   
014A   EB                     EX   DE,HL   
014B   E9                     JP   (HL)   
014C                             ;   AND         ( w w -- w )
014C                             ;               Bitwise AND.
014C                          ;*Macro unroll: mCODE	3, 'AND', ANDD
014C                          ALIGN   2   
014C                ANDD:        
014C                VVCODE:   .SET   $   
014C                VVLEN:    .SET   (3 & 01FH) / CELLL   
1FE8                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FE8                VVNAME:   .SET   $   
1FE8   4C 01 F4 1F            DW   vvCODE,vvLINK   
1FEC                VVLINK:   .SET   $   
1FEC   03 41 4E 44            DB   3,"AND"   
014C                          .ORG   vvCODE   
014C   E1                     POP   HL   
014D   78                     LD   A,B   
014E   A4                     AND   H   
014F   47                     LD   B,A   
0150   79                     LD   A,C   
0151   A5                     AND   L   
0152   4F                     LD   C,A   
0153                          ;*Macro unroll: 	mNEXT
0153   EB                     EX   DE,HL   
0154                          ;*Macro unroll:  mNEXTHL                         ; 34t
0154   5E                     LD   E,(HL)   ; 34t
0155   23                     INC   HL   
0156   56                     LD   D,(HL)   
0157   23                     INC   HL   
0158   EB                     EX   DE,HL   
0159   E9                     JP   (HL)   
015A                             ;   OR          ( w w -- w )
015A                             ;               Bitwise inclusive OR.
015A                          ;*Macro unroll: mCODE	2,'OR', ORR
015A                          ALIGN   2   
015A                ORR:         
015A                VVCODE:   .SET   $   
015A                VVLEN:    .SET   (2 & 01FH) / CELLL   
1FE0                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FE0                VVNAME:   .SET   $   
1FE0   5A 01 EC 1F            DW   vvCODE,vvLINK   
1FE4                VVLINK:   .SET   $   
1FE4   02 4F 52               DB   2,"OR"   
015A                          .ORG   vvCODE   
015A   E1                     POP   HL   
015B   78                     LD   A,B   
015C   B4                     OR   H   
015D   47                     LD   B,A   
015E   79                     LD   A,C   
015F   B5                     OR   L   
0160   4F                     LD   C,A   
0161                          ;*Macro unroll: 	mNEXT
0161   EB                     EX   DE,HL   
0162                          ;*Macro unroll:  mNEXTHL                         ; 34t
0162   5E                     LD   E,(HL)   ; 34t
0163   23                     INC   HL   
0164   56                     LD   D,(HL)   
0165   23                     INC   HL   
0166   EB                     EX   DE,HL   
0167   E9                     JP   (HL)   
0168                             ;   XOR         ( w w -- w )
0168                             ;               Bitwise exclusive
0168                          ;*Macro unroll: mCODE	3, 'XOR', XORR
0168                          ALIGN   2   
0168                XORR:        
0168                VVCODE:   .SET   $   
0168                VVLEN:    .SET   (3 & 01FH) / CELLL   
1FD8                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FD8                VVNAME:   .SET   $   
1FD8   68 01 E4 1F            DW   vvCODE,vvLINK   
1FDC                VVLINK:   .SET   $   
1FDC   03 58 4F 52            DB   3,"XOR"   
0168                          .ORG   vvCODE   
0168   E1                     POP   HL   
0169   78                     LD   A,B   
016A   AC                     XOR   H   
016B   47                     LD   B,A   
016C   79                     LD   A,C   
016D   AD                     XOR   L   
016E   4F                     LD   C,A   
016F                          ;*Macro unroll: 	mNEXT
016F   EB                     EX   DE,HL   
0170                          ;*Macro unroll:  mNEXTHL                         ; 34t
0170   5E                     LD   E,(HL)   ; 34t
0171   23                     INC   HL   
0172   56                     LD   D,(HL)   
0173   23                     INC   HL   
0174   EB                     EX   DE,HL   
0175   E9                     JP   (HL)   
0176                             ;   +           ( w w -- sum )
0176                             ;               Add top two items.
0176                          ;*Macro unroll: mCOLON	1,'+', PLUS
0176                          ;*Macro unroll:  mCODE 1, "+", PLUS
0176                          ALIGN   2   
0176                PLUS:        
0176                VVCODE:   .SET   $   
0176                VVLEN:    .SET   (1 & 01FH) / CELLL   
1FD2                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FD2                VVNAME:   .SET   $   
1FD2   76 01 DC 1F            DW   vvCODE,vvLINK   
1FD6                VVLINK:   .SET   $   
1FD6   01 2B                  DB   1,"+"   
0176                          .ORG   vvCODE   
0176   00                     NOP      
0177   CD A0 04               CALL   doLIST   
017A   7E 02 32 09 DE 04      DW   UMPlus,DROP,EXIT   
0180                             ;   D+          ( d d -- d )
0180                             ;               Double addition, as an example using UM+.
0180                          ;*Macro unroll: mCOLON	2,'D+',DPlus
0180                          ;*Macro unroll:  mCODE 2, "D+", DPlus
0180                          ALIGN   2   
0180                DPLUS:       
0180                VVCODE:   .SET   $   
0180                VVLEN:    .SET   (2 & 01FH) / CELLL   
1FCA                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FCA                VVNAME:   .SET   $   
1FCA   80 01 D6 1F            DW   vvCODE,vvLINK   
1FCE                VVLINK:   .SET   $   
1FCE   02 44 2B               DB   2,"D+"   
0180                          .ORG   vvCODE   
0180   00                     NOP      
0181   CD A0 04               CALL   doLIST   
0184   06 09 3A 09 06 09 7E 02 DW   ToR,SWAP,ToR,UMPlus   
018C   18 09 18 09 76 01 76 01 DE 04 DW   RFrom,RFrom,Plus,Plus,EXIT   
0196                             ;   NOT         ( w -- w )
0196                             ;               One's complement of tos.
0196                          ;*Macro unroll: mCOLON  3, 'NOT', INVER
0196                          ;*Macro unroll:  mCODE 3, "NOT", INVER
0196                          ALIGN   2   
0196                INVER:       
0196                VVCODE:   .SET   $   
0196                VVLEN:    .SET   (3 & 01FH) / CELLL   
1FC2                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FC2                VVNAME:   .SET   $   
1FC2   96 01 CE 1F            DW   vvCODE,vvLINK   
1FC6                VVLINK:   .SET   $   
1FC6   03 4E 4F 54            DB   3,"NOT"   
0196                          .ORG   vvCODE   
0196   00                     NOP      
0197   CD A0 04               CALL   doLIST   
019A   B2 04 FF FF 68 01 DE 04 DW   DoLIT,-1,XORR,EXIT   
01A2                             ;   NEGAT      ( n -- -n )
01A2                             ;               Two's complement of tos.
01A2                          ;*Macro unroll: mCOLON	6,'NEGAT',NEGAT
01A2                          ;*Macro unroll:  mCODE 6, "NEGAT", NEGAT
01A2                          ALIGN   2   
01A2                NEGAT:       
01A2                VVCODE:   .SET   $   
01A2                VVLEN:    .SET   (6 & 01FH) / CELLL   
1FB6                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FB6                VVNAME:   .SET   $   
1FB6   A2 01 C6 1F            DW   vvCODE,vvLINK   
1FBA                VVLINK:   .SET   $   
1FBA   06 4E 45 47 41 54      DB   6,"NEGAT"   
01A2                          .ORG   vvCODE   
01A2   00                     NOP      
01A3   CD A0 04               CALL   doLIST   
01A6   96 01 AC 01 DE 04      DW   INVER,OnePlus,EXIT   
01AC                             ;   1+		( n1|u1 -- n2|u2 )		
01AC                             ;		Increase top of the stack item by 1.
01AC                          ;*Macro unroll: mCOLON	2,'1+',OnePlus
01AC                          ;*Macro unroll:  mCODE 2, "1+", OnePlus
01AC                          ALIGN   2   
01AC                ONEPLUS:      
01AC                VVCODE:   .SET   $   
01AC                VVLEN:    .SET   (2 & 01FH) / CELLL   
1FAE                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FAE                VVNAME:   .SET   $   
1FAE   AC 01 BA 1F            DW   vvCODE,vvLINK   
1FB2                VVLINK:   .SET   $   
1FB2   02 31 2B               DB   2,"1+"   
01AC                          .ORG   vvCODE   
01AC   00                     NOP      
01AD   CD A0 04               CALL   doLIST   
01B0   B2 04 01 00 76 01 DE 04 DW   DoLIT,1,Plus,EXIT   
01B8                             ;   DNEGATE     ( d -- -d )
01B8                             ;               Two's complement of top double.
01B8                          ;*Macro unroll: mCOLON	7,'DNEGATE',DNEGATE
01B8                          ;*Macro unroll:  mCODE 7, "DNEGATE", DNEGATE
01B8                          ALIGN   2   
01B8                DNEGATE:      
01B8                VVCODE:   .SET   $   
01B8                VVLEN:    .SET   (7 & 01FH) / CELLL   
1FA2                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FA2                VVNAME:   .SET   $   
1FA2   B8 01 B2 1F            DW   vvCODE,vvLINK   
1FA6                VVLINK:   .SET   $   
1FA6   07 44 4E 45 47 41 54 45 DB   7,"DNEGATE"   
01B8                          .ORG   vvCODE   
01B8   00                     NOP      
01B9   CD A0 04               CALL   doLIST   
01BC   96 01 06 09 96 01      DW   INVER,ToR,INVER   
01C2   B2 04 01 00 7E 02      DW   DoLIT,1,UMPlus   
01C8   18 09 76 01 DE 04      DW   RFrom,Plus,EXIT   
01CE                             ;   -           ( n1 n2 -- n1-n2 )
01CE                             ;               Subtraction.
01CE                          ;*Macro unroll: mCOLON	1, '-', SUBB
01CE                          ;*Macro unroll:  mCODE 1, "-", SUBB
01CE                          ALIGN   2   
01CE                SUBB:        
01CE                VVCODE:   .SET   $   
01CE                VVLEN:    .SET   (1 & 01FH) / CELLL   
1F9C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F9C                VVNAME:   .SET   $   
1F9C   CE 01 A6 1F            DW   vvCODE,vvLINK   
1FA0                VVLINK:   .SET   $   
1FA0   01 2D                  DB   1,"-"   
01CE                          .ORG   vvCODE   
01CE   00                     NOP      
01CF   CD A0 04               CALL   doLIST   
01D2   A2 01 76 01 DE 04      DW   NEGAT,Plus,EXIT   
01D8                             ;   ABS         ( n -- n )
01D8                             ;               Return the absolute value of n.
01D8                          ;*Macro unroll: mCOLON	3,'ABS',ABSS
01D8                          ;*Macro unroll:  mCODE 3, "ABS", ABSS
01D8                          ALIGN   2   
01D8                ABSS:        
01D8                VVCODE:   .SET   $   
01D8                VVLEN:    .SET   (3 & 01FH) / CELLL   
1F94                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F94                VVNAME:   .SET   $   
1F94   D8 01 A0 1F            DW   vvCODE,vvLINK   
1F98                VVLINK:   .SET   $   
1F98   03 41 42 53            DB   3,"ABS"   
01D8                          .ORG   vvCODE   
01D8   00                     NOP      
01D9   CD A0 04               CALL   doLIST   
01DC   2A 09 40 01 DE 07 E6 01 DW   DUPP,ZLESS,QBRAN,ABS1   
01E4   A2 01                  DW   NEGAT   
01E6                ABS1:        
01E6   DE 04                  DW   EXIT   
01E8                             ;   =           ( w w -- t )
01E8                             ;               Return true if top two are equal.
01E8                          ;*Macro unroll: mCOLON	1, '=', EQUAL
01E8                          ;*Macro unroll:  mCODE 1, "=", EQUAL
01E8                          ALIGN   2   
01E8                EQUAL:       
01E8                VVCODE:   .SET   $   
01E8                VVLEN:    .SET   (1 & 01FH) / CELLL   
1F8E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F8E                VVNAME:   .SET   $   
1F8E   E8 01 98 1F            DW   vvCODE,vvLINK   
1F92                VVLINK:   .SET   $   
1F92   01 3D                  DB   1,"="   
01E8                          .ORG   vvCODE   
01E8   00                     NOP      
01E9   CD A0 04               CALL   doLIST   
01EC   68 01 F2 01 DE 04      DW   XORR,ZeroEquals,EXIT   
01F2                             ;   0=		( x -- flag )			\ CORE
01F2                             ;		Return true if x is zero.
01F2                          ;*Macro unroll: mCODE	2,'0=',ZeroEquals,_FLINK
01F2                          ALIGN   2   
01F2                ZEROEQUALS:      
01F2                VVCODE:   .SET   $   
01F2                VVLEN:    .SET   (2 & 01FH) / CELLL   
1F86                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F86                VVNAME:   .SET   $   
1F86   F2 01 92 1F            DW   vvCODE,vvLINK   
1F8A                VVLINK:   .SET   $   
1F8A   02 30 3D               DB   2,"0="   
01F2                          .ORG   vvCODE   
01F2   78                     LD   A,B   
01F3   B1                     OR   C   ; result=0 if bc was 0
01F4   D6 01                  SUB   1   ; cy set   if bc was 0 ;;; ???? TODO: replace with DEC A
01F6   9F                     SBC   A,A   ; propagate cy through A
01F7   47                     LD   B,A   ; put 0000 or FFFF in TOS
01F8   4F                     LD   C,A   
01F9                          ;*Macro unroll: 	mNEXT
01F9   EB                     EX   DE,HL   
01FA                          ;*Macro unroll:  mNEXTHL                         ; 34t
01FA   5E                     LD   E,(HL)   ; 34t
01FB   23                     INC   HL   
01FC   56                     LD   D,(HL)   
01FD   23                     INC   HL   
01FE   EB                     EX   DE,HL   
01FF   E9                     JP   (HL)   
0200                             ;   U<          ( u u -- t )
0200                             ;               Unsigned compare of top two items.
0200                          ;*Macro unroll: mCOLON	2,'U<',ULess
0200                          ;*Macro unroll:  mCODE 2, "U<", ULess
0200                          ALIGN   2   
0200                ULESS:       
0200                VVCODE:   .SET   $   
0200                VVLEN:    .SET   (2 & 01FH) / CELLL   
1F7E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F7E                VVNAME:   .SET   $   
1F7E   00 02 8A 1F            DW   vvCODE,vvLINK   
1F82                VVLINK:   .SET   $   
1F82   02 55 3C               DB   2,"U<"   
0200                          .ORG   vvCODE   
0200   00                     NOP      
0201   CD A0 04               CALL   doLIST   
0204   78 09 68 01 40 01      DW   DDUP,XORR,ZLESS   
020A   DE 07 14 02            DW   QBRAN,ULES1   
020E   1A 02 40 01 DE 04      DW   NIP,ZLESS,EXIT   
0214                ULES1:       
0214   CE 01 40 01 DE 04      DW   SUBB,ZLESS,EXIT   
021A                             ;   NIP 	( n1 n2 -- n2 ) 		\ CORE EXT
021A                             ;		Discard the second stack item.
021A                          ;*Macro unroll: mCOLON	3,'NIP',NIP
021A                          ;*Macro unroll:  mCODE 3, "NIP", NIP
021A                          ALIGN   2   
021A                NIP:         
021A                VVCODE:   .SET   $   
021A                VVLEN:    .SET   (3 & 01FH) / CELLL   
1F76                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F76                VVNAME:   .SET   $   
1F76   1A 02 82 1F            DW   vvCODE,vvLINK   
1F7A                VVLINK:   .SET   $   
1F7A   03 4E 49 50            DB   3,"NIP"   
021A                          .ORG   vvCODE   
021A   00                     NOP      
021B   CD A0 04               CALL   doLIST   
021E   3A 09 32 09 DE 04      DW   SWAP,DROP,EXIT   
0224                             ;   <           ( n1 n2 -- t )
0224                             ;               is less than
0224                          ;*Macro unroll: mCOLON	1,'<',LESS
0224                          ;*Macro unroll:  mCODE 1, "<", LESS
0224                          ALIGN   2   
0224                LESS:        
0224                VVCODE:   .SET   $   
0224                VVLEN:    .SET   (1 & 01FH) / CELLL   
1F70                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F70                VVNAME:   .SET   $   
1F70   24 02 7A 1F            DW   vvCODE,vvLINK   
1F74                VVLINK:   .SET   $   
1F74   01 3C                  DB   1,"<"   
0224                          .ORG   vvCODE   
0224   00                     NOP      
0225   CD A0 04               CALL   doLIST   
0228   78 09 68 01 40 01 DE 07 38 02 DW   DDUP,XORR,ZLESS,QBRAN,LESS1   
0232   32 09 40 01 DE 04      DW   DROP,ZLESS,EXIT   
0238                LESS1:       
0238   CE 01 40 01 DE 04      DW   SUBB,ZLESS,EXIT   
023E                             ;   >           ( n1 n2 -- t )
023E                             ;               is greater than
023E                          ;*Macro unroll: mCOLON	1,'>',GreaterThan
023E                          ;*Macro unroll:  mCODE 1, ">", GreaterThan
023E                          ALIGN   2   
023E                GREATERTHAN:      
023E                VVCODE:   .SET   $   
023E                VVLEN:    .SET   (1 & 01FH) / CELLL   
1F6A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F6A                VVNAME:   .SET   $   
1F6A   3E 02 74 1F            DW   vvCODE,vvLINK   
1F6E                VVLINK:   .SET   $   
1F6E   01 3E                  DB   1,">"   
023E                          .ORG   vvCODE   
023E   00                     NOP      
023F   CD A0 04               CALL   doLIST   
0242   3A 09 24 02 DE 04      DW   SWAP,LESS,EXIT   
0248                             ;   MAX         ( n n -- n )
0248                             ;               Return the greater of two top stack items.
0248                          ;*Macro unroll: mCOLON	3,'MAX',MAX
0248                          ;*Macro unroll:  mCODE 3, "MAX", MAX
0248                          ALIGN   2   
0248                MAX:         
0248                VVCODE:   .SET   $   
0248                VVLEN:    .SET   (3 & 01FH) / CELLL   
1F62                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F62                VVNAME:   .SET   $   
1F62   48 02 6E 1F            DW   vvCODE,vvLINK   
1F66                VVLINK:   .SET   $   
1F66   03 4D 41 58            DB   3,"MAX"   
0248                          .ORG   vvCODE   
0248   00                     NOP      
0249   CD A0 04               CALL   doLIST   
024C   78 09 24 02 DE 07 56 02 DW   DDUP,LESS,QBRAN,MAX1   
0254   3A 09                  DW   SWAP   
0256                MAX1:        
0256   32 09 DE 04            DW   DROP,EXIT   
025A                             ;   MIN         ( n n -- n )
025A                             ;               Return the smaller of top two stack items.
025A                          ;*Macro unroll: mCOLON	3,'MIN',MIN
025A                          ;*Macro unroll:  mCODE 3, "MIN", MIN
025A                          ALIGN   2   
025A                MIN:         
025A                VVCODE:   .SET   $   
025A                VVLEN:    .SET   (3 & 01FH) / CELLL   
1F5A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F5A                VVNAME:   .SET   $   
1F5A   5A 02 66 1F            DW   vvCODE,vvLINK   
1F5E                VVLINK:   .SET   $   
1F5E   03 4D 49 4E            DB   3,"MIN"   
025A                          .ORG   vvCODE   
025A   00                     NOP      
025B   CD A0 04               CALL   doLIST   
025E   78 09 3E 02 DE 07 68 02 DW   DDUP,GreaterThan,QBRAN,MIN1   
0266   3A 09                  DW   SWAP   
0268                MIN1:        
0268   32 09 DE 04            DW   DROP,EXIT   
026C                             ;   WITHIN      ( u ul uh -- t )
026C                             ;               Return true if u is within the range of ul and uh.
026C                          ;*Macro unroll: mCOLON	6,'WITHIN',WITHI
026C                          ;*Macro unroll:  mCODE 6, "WITHIN", WITHI
026C                          ALIGN   2   
026C                WITHI:       
026C                VVCODE:   .SET   $   
026C                VVLEN:    .SET   (6 & 01FH) / CELLL   
1F4E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F4E                VVNAME:   .SET   $   
1F4E   6C 02 5E 1F            DW   vvCODE,vvLINK   
1F52                VVLINK:   .SET   $   
1F52   06 57 49 54 48 49 4E   DB   6,"WITHIN"   
026C                          .ORG   vvCODE   
026C   00                     NOP      
026D   CD A0 04               CALL   doLIST   
0270   46 09 CE 01 06 09      DW   OVER,SUBB,ToR   ;ul <= u < uh
0276   CE 01 18 09 00 02 DE 04 DW   SUBB,RFrom,ULess,EXIT   
027E                             ;   UM+         ( w w -- w cy )
027E                             ;               Add two numbers, return the sum and carry flag.
027E                          ;*Macro unroll: mCODE	3,'um+',UMPlus
027E                          ALIGN   2   
027E                UMPLUS:      
027E                VVCODE:   .SET   $   
027E                VVLEN:    .SET   (3 & 01FH) / CELLL   
1F46                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F46                VVNAME:   .SET   $   
1F46   7E 02 52 1F            DW   vvCODE,vvLINK   
1F4A                VVLINK:   .SET   $   
1F4A   03 75 6D 2B            DB   3,"um+"   
027E                          .ORG   vvCODE   
027E   E1                     POP   HL   ;10t
027F   09                     ADD   HL,BC   ;11t
0280   E5                     PUSH   HL   ;11t
0281   01 00 00               LD   BC,0   ;10t
0284   30 01                  JR   NC,UMP1   ;12/7t
0286                UMP2:        
0286   03                     INC   BC   ; 6t
0287                UMP1:        
0287                          ;*Macro unroll:  mNEXT
0287   EB                     EX   DE,HL   
0288                          ;*Macro unroll:  mNEXTHL                         ; 34t
0288   5E                     LD   E,(HL)   ; 34t
0289   23                     INC   HL   
028A   56                     LD   D,(HL)   
028B   23                     INC   HL   
028C   EB                     EX   DE,HL   
028D   E9                     JP   (HL)   
028E                             ; UM/MOD      ( udl udh u -- ur uq )
028E                             ; Unsigned divide of a double by a single. Return mod and quotient.
028E                             ; Note: Less range than eForth because most significant word discarded TODO: fix
028E                          ;*Macro unroll: mCOLON  6,'UM/MOD',UMMOD
028E                          ;*Macro unroll:  mCODE 6, "UM/MOD", UMMOD
028E                          ALIGN   2   
028E                UMMOD:       
028E                VVCODE:   .SET   $   
028E                VVLEN:    .SET   (6 & 01FH) / CELLL   
1F3A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F3A                VVNAME:   .SET   $   
1F3A   8E 02 4A 1F            DW   vvCODE,vvLINK   
1F3E                VVLINK:   .SET   $   
1F3E   06 55 4D 2F 4D 4F 44   DB   6,"UM/MOD"   
028E                          .ORG   vvCODE   
028E   00                     NOP      
028F   CD A0 04               CALL   doLIST   
0292   1A 02 98 02 DE 04      DW   NIP,UMSlashMOD2,EXIT   
0298                             ; UM/MOD2	( ud u1 -- u2 u3 )		
0298                             ; Unsigned division of a double-cell number ud by a single-cell
0298                             ; number u1. Return remainder u2 and quotient u3.
0298                             ; Note: Less range than eForth TODO: fix
0298                          ;*Macro unroll: mCODE	6,'UM/MOD2',UMSlashMOD2
0298                          ALIGN   2   
0298                UMSLASHMOD2:      
0298                VVCODE:   .SET   $   
0298                VVLEN:    .SET   (6 & 01FH) / CELLL   
1F2E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F2E                VVNAME:   .SET   $   
1F2E   98 02 3E 1F            DW   vvCODE,vvLINK   
1F32                VVLINK:   .SET   $   
1F32   06 55 4D 2F 4D 4F 44 32 DB   6,"UM/MOD2"   
0298                          .ORG   vvCODE   
0298   78                     LD   A,B   
0299   B1                     OR   C   
029A   28 29                  JR   Z,UMMOD2   ;?zero divisor
029C                UMMOD11:      
029C   C5                     PUSH   BC   
029D   D9                     EXX      
029E   C1                     POP   BC   
029F   E1                     POP   HL   
02A0   D1                     POP   DE   
02A1   7D                     LD   A,L   
02A2   91                     SUB   C   
02A3   7C                     LD   A,H   
02A4   98                     SBC   A,B   
02A5   30 24                  JR   NC,UMMOD1   ;?too big
02A7                UMMOD12:      
02A7   7C                     LD   A,H   
02A8   65                     LD   H,L   
02A9   6A                     LD   L,D   
02AA   16 08                  LD   D,8   
02AC   D5                     PUSH   DE   
02AD   CD DF 02               CALL   UMMOD3   
02B0   D1                     POP   DE   
02B1   E5                     PUSH   HL   
02B2   6B                     LD   L,E   
02B3   CD DF 02               CALL   UMMOD3   
02B6   57                     LD   D,A   
02B7   5C                     LD   E,H   
02B8   C1                     POP   BC   
02B9   61                     LD   H,C   
02BA   D5                     PUSH   DE   
02BB   E5                     PUSH   HL   
02BC   D9                     EXX      
02BD   C1                     POP   BC   
02BE                          ;*Macro unroll: 	mNEXT
02BE   EB                     EX   DE,HL   
02BF                          ;*Macro unroll:  mNEXTHL                         ; 34t
02BF   5E                     LD   E,(HL)   ; 34t
02C0   23                     INC   HL   
02C1   56                     LD   D,(HL)   
02C2   23                     INC   HL   
02C3   EB                     EX   DE,HL   
02C4   E9                     JP   (HL)   
02C5                UMMOD2:      
02C5   01 E1 08               LD   BC,ERR_DIVZERO   ; divide by 0
02C8   C3 08 08               JP   THROWX   
02CB                UMMOD1:      
02CB   01 F2 08               LD   BC,ERR_OUTOFRANGE   ; result out of range
02CE   C3 08 08               JP   THROWX   
02D1                UMMOD4:      
02D1   5F                     LD   E,A   
02D2   7C                     LD   A,H   
02D3   91                     SUB   C   
02D4   67                     LD   H,A   
02D5   7B                     LD   A,E   
02D6   98                     SBC   A,B   
02D7   30 10                  JR   NC,UMMOD5   
02D9                UMMOD13:      
02D9   7C                     LD   A,H   
02DA   81                     ADD   A,C   
02DB   67                     LD   H,A   
02DC   7B                     LD   A,E   
02DD   15                     DEC   D   
02DE   C8                     RET   Z   
02DF                UMMOD3:      
02DF   29                     ADD   HL,HL   
02E0   17                     RLA      
02E1   30 EE                  JR   NC,UMMOD4   
02E3                UMMOD14:      
02E3   5F                     LD   E,A   
02E4   7C                     LD   A,H   
02E5   91                     SUB   C   
02E6   67                     LD   H,A   
02E7   7B                     LD   A,E   
02E8   98                     SBC   A,B   
02E9                UMMOD5:      
02E9   2C                     INC   L   
02EA   15                     DEC   D   
02EB   20 F2                  JR   NZ,UMMOD3   
02ED                UMMOD15:      
02ED   C9                     RET      
02EE                             ;   FM/MOD	( d n1 -- n2 n3 )		\ CORE
02EE                             ;		Signed floored divide of double by single. Return mod n2
02EE                             ;		and quotient n3.
02EE                             ; TODO: this is usually called M/MOD in eForth
02EE                          ;*Macro unroll: mCOLON	6,'FM/MOD',FMSlashMOD
02EE                          ;*Macro unroll:  mCODE 6, "FM/MOD", FMSlashMOD
02EE                          ALIGN   2   
02EE                FMSLASHMOD:      
02EE                VVCODE:   .SET   $   
02EE                VVLEN:    .SET   (6 & 01FH) / CELLL   
1F22                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F22                VVNAME:   .SET   $   
1F22   EE 02 32 1F            DW   vvCODE,vvLINK   
1F26                VVLINK:   .SET   $   
1F26   06 46 4D 2F 4D 4F 44   DB   6,"FM/MOD"   
02EE                          .ORG   vvCODE   
02EE   00                     NOP      
02EF   CD A0 04               CALL   doLIST   
02F2   2A 09 06 09 78 09 68 01 06 09 06 09 2A 09 40 01 DW   DUPP,ToR,DDUP,XORR,ToR,ToR,DUPP,ZLESS   
0302   DE 07 08 03            DW   QBRAN,FMMOD1   
0306   B8 01                  DW   DNEGATE   
0308                FMMOD1:      
0308   42 08 D8 01 98 02      DW   rat,ABSS,UMSlashMOD2   
030E   18 09 40 01 DE 07 1C 03 DW   RFrom,ZLESS,QBRAN,FMMOD2   
0316   3A 09 A2 01 3A 09      DW   SWAP,NEGAT,SWAP   
031C                FMMOD2:      
031C   18 09 40 01 DE 07 4E 03 DW   RFrom,ZLESS,QBRAN,FMMOD3   
0324   A2 01 46 09 DE 07 36 03 DW   NEGAT,OVER,QBRAN,FMMOD4   
032C   42 08 60 09 CE 01 3A 09 60 03 DW   rat,ROT,SUBB,SWAP,OneSUBB   
0336                FMMOD4:      
0336   18 09 32 09            DW   RFrom,DROP   
033A   B2 04 00 00 46 09 24 02 DE 07 4C 03 DW   DoLIT,0,OVER,LESS,QBRAN,FMMOD6   
0346   B2 04 F2 08 08 08      DW   DoLIT,ERR_OUTOFRANGE,THROWX   
034C                FMMOD6:      
034C   DE 04                  DW   EXIT   
034E                FMMOD3:      
034E   18 09 32 09 2A 09 40 01 DE 07 4C 03 DW   RFrom,DROP,DUPP,ZLESS,QBRAN,FMMOD6   
035A   B2 04 F2 08 08 08      DW   DoLIT,ERR_OUTOFRANGE,THROWX   
0360                             ;   1-		( n1|u1 -- n2|u2 )		\ COR
0360                             ;		Decrease top of the stack item by 1.
0360                          ;*Macro unroll: mCOLON	2,'1-',OneSUBB,_FLINK
0360                          ;*Macro unroll:  mCODE 2, "1-", OneSUBB
0360                          ALIGN   2   
0360                ONESUBB:      
0360                VVCODE:   .SET   $   
0360                VVLEN:    .SET   (2 & 01FH) / CELLL   
1F1A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F1A                VVNAME:   .SET   $   
1F1A   60 03 26 1F            DW   vvCODE,vvLINK   
1F1E                VVLINK:   .SET   $   
1F1E   02 31 2D               DB   2,"1-"   
0360                          .ORG   vvCODE   
0360   00                     NOP      
0361   CD A0 04               CALL   doLIST   
0364   B2 04 FF FF 76 01 DE 04 DW   DoLIT,-1,Plus,EXIT   
036C                             ;   S>D 	( n -- d )			\ CORE
036C                             ;		Convert a single-cell number n to double-cell number.
036C                          ;*Macro unroll: mCOLON	3,'S>D',SToD,_FLINK
036C                          ;*Macro unroll:  mCODE 3, "S>D", SToD
036C                          ALIGN   2   
036C                STOD:        
036C                VVCODE:   .SET   $   
036C                VVLEN:    .SET   (3 & 01FH) / CELLL   
1F12                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F12                VVNAME:   .SET   $   
1F12   6C 03 1E 1F            DW   vvCODE,vvLINK   
1F16                VVLINK:   .SET   $   
1F16   03 53 3E 44            DB   3,"S>D"   
036C                          .ORG   vvCODE   
036C   00                     NOP      
036D   CD A0 04               CALL   doLIST   
0370   2A 09 40 01 DE 04      DW   DUPP,ZLESS,EXIT   
0376                             ;   /MOD        ( n n -- r q )
0376                             ;               Signed divide. Return mod and quotient.
0376                          ;*Macro unroll: mCOLON	4,'/MOD',SlashMOD
0376                          ;*Macro unroll:  mCODE 4, "/MOD", SlashMOD
0376                          ALIGN   2   
0376                SLASHMOD:      
0376                VVCODE:   .SET   $   
0376                VVLEN:    .SET   (4 & 01FH) / CELLL   
1F08                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F08                VVNAME:   .SET   $   
1F08   76 03 16 1F            DW   vvCODE,vvLINK   
1F0C                VVLINK:   .SET   $   
1F0C   04 2F 4D 4F 44         DB   4,"/MOD"   
0376                          .ORG   vvCODE   
0376   00                     NOP      
0377   CD A0 04               CALL   doLIST   
037A   06 09 6C 03 18 09 EE 02 DE 04 DW   ToR,SToD,RFrom,FMSlashMOD,EXIT   
0384                             ;   MOD         ( n n -- r )
0384                             ;               Signed divide. Return mod only.
0384                          ;*Macro unroll: mCOLON	3,'MOD',MODD
0384                          ;*Macro unroll:  mCODE 3, "MOD", MODD
0384                          ALIGN   2   
0384                MODD:        
0384                VVCODE:   .SET   $   
0384                VVLEN:    .SET   (3 & 01FH) / CELLL   
1F00                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F00                VVNAME:   .SET   $   
1F00   84 03 0C 1F            DW   vvCODE,vvLINK   
1F04                VVLINK:   .SET   $   
1F04   03 4D 4F 44            DB   3,"MOD"   
0384                          .ORG   vvCODE   
0384   00                     NOP      
0385   CD A0 04               CALL   doLIST   
0388   76 03 32 09 DE 04      DW   SlashMOD,DROP,EXIT   
038E                             ; 
038E                             ;   /           ( n n -- q )
038E                             ;               Signed divide. Return quotient only.
038E                          ;*Macro unroll: mCOLON	1,'/',Slash
038E                          ;*Macro unroll:  mCODE 1, "/", Slash
038E                          ALIGN   2   
038E                SLASH:       
038E                VVCODE:   .SET   $   
038E                VVLEN:    .SET   (1 & 01FH) / CELLL   
1EFA                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1EFA                VVNAME:   .SET   $   
1EFA   8E 03 04 1F            DW   vvCODE,vvLINK   
1EFE                VVLINK:   .SET   $   
1EFE   01 2F                  DB   1,"/"   
038E                          .ORG   vvCODE   
038E   00                     NOP      
038F   CD A0 04               CALL   doLIST   
0392   76 03 1A 02 DE 04      DW   SlashMOD,NIP,EXIT   
0398                             ; Multiply
0398                             ;   UM*         ( u u -- ud )
0398                             ;               Unsigned multiply. Return double product.
0398                          ;*Macro unroll: mCODE	3,'UM*',UMStar,_FLINK
0398                          ALIGN   2   
0398                UMSTAR:      
0398                VVCODE:   .SET   $   
0398                VVLEN:    .SET   (3 & 01FH) / CELLL   
1EF2                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1EF2                VVNAME:   .SET   $   
1EF2   98 03 FE 1E            DW   vvCODE,vvLINK   
1EF6                VVLINK:   .SET   $   
1EF6   03 55 4D 2A            DB   3,"UM*"   
0398                          .ORG   vvCODE   
0398   EB                     EX   DE,HL   
0399   E3                     EX   (SP),HL   
039A   EB                     EX   DE,HL   
039B   21 00 00               LD   HL,0   
039E   3E 10                  LD   A,010h   
03A0                UMSTAR1:      
03A0   29                     ADD   HL,HL   
03A1   EB                     EX   DE,HL   
03A2   ED 6A                  ADC   HL,HL   
03A4   EB                     EX   DE,HL   
03A5   30 04                  JR   NC,UMSTAR3   
03A7                UMSTAR2:      
03A7   09                     ADD   HL,BC   
03A8   30 01                  JR   NC,UMSTAR3   
03AA                UMSTAR5:      
03AA   13                     INC   DE   
03AB                UMSTAR3:      
03AB   3D                     DEC   A   
03AC   20 F2                  JR   NZ,UMSTAR1   
03AE                UMSTAR4:      
03AE   42                     LD   B,D   
03AF   4B                     LD   C,E   
03B0   E3                     EX   (SP),HL   
03B1                          ;*Macro unroll: 	mNEXTHL
03B1   5E                     LD   E,(HL)   
03B2   23                     INC   HL   
03B3   56                     LD   D,(HL)   
03B4   23                     INC   HL   
03B5   EB                     EX   DE,HL   
03B6   E9                     JP   (HL)   
03B7                             ;   *           ( n n -- n )
03B7                             ;               Signed multiply. Return single product.
03B7                          ;*Macro unroll: mCOLON	1,'*',Star
03B7                          ;*Macro unroll:  mCODE 1, "*", Star
03B7                          ALIGN   2   
03B8                STAR:        
03B8                VVCODE:   .SET   $   
03B8                VVLEN:    .SET   (1 & 01FH) / CELLL   
1EEC                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1EEC                VVNAME:   .SET   $   
1EEC   B8 03 F6 1E            DW   vvCODE,vvLINK   
1EF0                VVLINK:   .SET   $   
1EF0   01 2A                  DB   1,"*"   
03B8                          .ORG   vvCODE   
03B8   00                     NOP      
03B9   CD A0 04               CALL   doLIST   
03BC   98 03 32 09 DE 04      DW   UMStar,DROP,EXIT   
03C2                             ;   M*          ( n n -- d )
03C2                             ;               Signed multiply. Return double product.
03C2                          ;*Macro unroll: mCOLON	2,'M*',MStar,
03C2                          ;*Macro unroll:  mCODE 2, "M*", MStar
03C2                          ALIGN   2   
03C2                MSTAR:       
03C2                VVCODE:   .SET   $   
03C2                VVLEN:    .SET   (2 & 01FH) / CELLL   
1EE4                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1EE4                VVNAME:   .SET   $   
1EE4   C2 03 F0 1E            DW   vvCODE,vvLINK   
1EE8                VVLINK:   .SET   $   
1EE8   02 4D 2A               DB   2,"M*"   
03C2                          .ORG   vvCODE   
03C2   00                     NOP      
03C3   CD A0 04               CALL   doLIST   
03C6   78 09 68 01 40 01 06 09 D8 01 3A 09 D8 01 DW   DDUP,XORR,ZLESS,ToR,ABSS,SWAP,ABSS   
03D4   98 03 18 09 DE 07 DE 03 DW   UMStar,RFrom,QBRAN,MSTAR1   
03DC   B8 01                  DW   DNEGATE   
03DE                MSTAR1:      
03DE   DE 04                  DW   EXIT   
03E0                             ;   */MOD       ( n1 n2 n3 -- r q )
03E0                             ;               Multiply n1 and n2, then divide by n3. Return mod and quotient.
03E0                          ;*Macro unroll: mCOLON	5,'*/MOD',StarSlashMOD
03E0                          ;*Macro unroll:  mCODE 5, "*/MOD", StarSlashMOD
03E0                          ALIGN   2   
03E0                STARSLASHMOD:      
03E0                VVCODE:   .SET   $   
03E0                VVLEN:    .SET   (5 & 01FH) / CELLL   
1EDA                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1EDA                VVNAME:   .SET   $   
1EDA   E0 03 E8 1E            DW   vvCODE,vvLINK   
1EDE                VVLINK:   .SET   $   
1EDE   05 2A 2F 4D 4F 44      DB   5,"*/MOD"   
03E0                          .ORG   vvCODE   
03E0   00                     NOP      
03E1   CD A0 04               CALL   doLIST   
03E4   06 09 C2 03 18 09 EE 02 DE 04 DW   ToR,MStar,RFrom,FMSlashMOD,EXIT   
03EE                             ;   */          ( n1 n2 n3 -- q )
03EE                             ;               Multiply n1 by n2, then divide by n3. Return quotient only.
03EE                          ;*Macro unroll: mCOLON	2,'*/',StarSlash
03EE                          ;*Macro unroll:  mCODE 2, "*/", StarSlash
03EE                          ALIGN   2   
03EE                STARSLASH:      
03EE                VVCODE:   .SET   $   
03EE                VVLEN:    .SET   (2 & 01FH) / CELLL   
1ED2                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1ED2                VVNAME:   .SET   $   
1ED2   EE 03 DE 1E            DW   vvCODE,vvLINK   
1ED6                VVLINK:   .SET   $   
1ED6   02 2A 2F               DB   2,"*/"   
03EE                          .ORG   vvCODE   
03EE   00                     NOP      
03EF   CD A0 04               CALL   doLIST   
03F2   E0 03 1A 02 DE 04      DW   StarSlashMOD,NIP,EXIT   
03F8                             ;   CELL+       ( a -- a )
03F8                             ;               Add cell size in byte to address.
03F8                          ;*Macro unroll: mCOLON	5,'CELL+',CELLP
03F8                          ;*Macro unroll:  mCODE 5, "CELL+", CELLP
03F8                          ALIGN   2   
03F8                CELLP:       
03F8                VVCODE:   .SET   $   
03F8                VVLEN:    .SET   (5 & 01FH) / CELLL   
1EC8                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1EC8                VVNAME:   .SET   $   
1EC8   F8 03 D6 1E            DW   vvCODE,vvLINK   
1ECC                VVLINK:   .SET   $   
1ECC   05 43 45 4C 4C 2B      DB   5,"CELL+"   
03F8                          .ORG   vvCODE   
03F8   00                     NOP      
03F9   CD A0 04               CALL   doLIST   
03FC   B2 04 02 00 76 01 DE 04 DW   DOLIT,CELLL,PLUS,EXIT   
0404                             ;   CELL-       ( a -- a )
0404                             ;               Subtract cell size in byte from address.
0404                          ;*Macro unroll: mCOLON	5,'CELL-',CELLM
0404                          ;*Macro unroll:  mCODE 5, "CELL-", CELLM
0404                          ALIGN   2   
0404                CELLM:       
0404                VVCODE:   .SET   $   
0404                VVLEN:    .SET   (5 & 01FH) / CELLL   
1EBE                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1EBE                VVNAME:   .SET   $   
1EBE   04 04 CC 1E            DW   vvCODE,vvLINK   
1EC2                VVLINK:   .SET   $   
1EC2   05 43 45 4C 4C 2D      DB   5,"CELL-"   
0404                          .ORG   vvCODE   
0404   00                     NOP      
0405   CD A0 04               CALL   doLIST   
0408   B2 04 FE FF 76 01 DE 04 DW   DOLIT,-CELLL,PLUS,EXIT   
0410                             ;   CELLS       ( n -- n )
0410                             ;               Multiply tos by cell size in bytes.
0410                          ;*Macro unroll: mCOLON	5,'CELLS',CELLS
0410                          ;*Macro unroll:  mCODE 5, "CELLS", CELLS
0410                          ALIGN   2   
0410                CELLS:       
0410                VVCODE:   .SET   $   
0410                VVLEN:    .SET   (5 & 01FH) / CELLL   
1EB4                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1EB4                VVNAME:   .SET   $   
1EB4   10 04 C2 1E            DW   vvCODE,vvLINK   
1EB8                VVLINK:   .SET   $   
1EB8   05 43 45 4C 4C 53      DB   5,"CELLS"   
0410                          .ORG   vvCODE   
0410   00                     NOP      
0411   CD A0 04               CALL   doLIST   
0414   34 01 DE 04            DW   TwoStar,EXIT   
0418                             ;   CHAR+	( c-addr1 -- c-addr2 )		\ CORE
0418                             ;		Returns next character-aligned address.
0418                             ; 
0418                          ;*Macro unroll: mCOLON	5,'CHAR+',CHARPlus
0418                          ;*Macro unroll:  mCODE 5, "CHAR+", CHARPlus
0418                          ALIGN   2   
0418                CHARPLUS:      
0418                VVCODE:   .SET   $   
0418                VVLEN:    .SET   (5 & 01FH) / CELLL   
1EAA                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1EAA                VVNAME:   .SET   $   
1EAA   18 04 B8 1E            DW   vvCODE,vvLINK   
1EAE                VVLINK:   .SET   $   
1EAE   05 43 48 41 52 2B      DB   5,"CHAR+"   
0418                          .ORG   vvCODE   
0418   00                     NOP      
0419   CD A0 04               CALL   doLIST   
041C   B2 04 01 00 76 01 DE 04 DW   DoLIT,CHARR,Plus,EXIT   
0424                             ;   '           ( -- ca )
0424                             ;               Search context vocabularies for the next word in input stream.
0424                             ;   ALLOT       ( n -- )
0424                             ;               Allocate n bytes to the code dictionary.
0424                             ;   ,           ( w -- )
0424                             ;               Compile an integer into the code dictionary.
0424                          ;*Macro unroll: mCOLON  1,',',COMMA
0424                          ;*Macro unroll:  mCODE 1, ",", COMMA
0424                          ALIGN   2   
0424                COMMA:       
0424                VVCODE:   .SET   $   
0424                VVLEN:    .SET   (1 & 01FH) / CELLL   
1EA4                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1EA4                VVNAME:   .SET   $   
1EA4   24 04 AE 1E            DW   vvCODE,vvLINK   
1EA8                VVLINK:   .SET   $   
1EA8   01 2C                  DB   1,","   
0424                          .ORG   vvCODE   
0424   00                     NOP      
0425   CD A0 04               CALL   doLIST   
0428   94 08 2A 09 F8 03      DW   HERE,DUPP,CELLP   ;cell boundary
042E   5A 0A 10 08 10 08 DE 04 DW   CP,STORE,STORE,EXIT   ;adjust code pointer, compile
0436                             ;   [COMPILE]   ( -- ; <string> )
0436                             ;               Compile the next immediate word into code dictionary.
0436                          ;*Macro unroll: mCOLON  IMEDD+9,'[COMPILE]',BCOMP
0436                          ;*Macro unroll:  mCODE IMEDD+9, "[COMPILE]", BCOMP
0436                          ALIGN   2   
0436                BCOMP:       
0436                VVCODE:   .SET   $   
0436                VVLEN:    .SET   (IMEDD+9 & 01FH) / CELLL   
1E56                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1E56                VVNAME:   .SET   $   
1E56   36 04 A8 1E            DW   vvCODE,vvLINK   
1E5A                VVLINK:   .SET   $   
1E5A   49 5B 43 4F 4D 50 49 4C 45 5D DB   IMEDD+9,"[COMPILE]"   
0436                          .ORG   vvCODE   
0436   00                     NOP      
0437   CD A0 04               CALL   doLIST   
043A                             ; DW      TICK,COMMA,EXIT
043A                             ;   COMPILE     ( -- )
043A                             ;               Compile the next address in colon list to code dictionary.
043A                          ;*Macro unroll: mCOLON  COMPO+7,'COMPILE',COMPI
043A                          ;*Macro unroll:  mCODE COMPO+7, "COMPILE", COMPI
043A                          ALIGN   2   
043A                COMPI:       
043A                VVCODE:   .SET   $   
043A                VVLEN:    .SET   (COMPO+7 & 01FH) / CELLL   
1E2A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1E2A                VVNAME:   .SET   $   
1E2A   3A 04 5A 1E            DW   vvCODE,vvLINK   
1E2E                VVLINK:   .SET   $   
1E2E   27 43 4F 4D 50 49 4C 45 DB   COMPO+7,"COMPILE"   
043A                          .ORG   vvCODE   
043A   00                     NOP      
043B   CD A0 04               CALL   doLIST   
043E   18 09 2A 09 1E 08 24 04 DW   RFROM,DUPP,AT,COMMA   ;compile address
0446   F8 03 06 09 DE 04      DW   CELLP,TOR,EXIT   ;adjust return address
044C                             ;   LITERAL     ( w -- )
044C                             ;               Compile tos to code dictionary as an integer literal.
044C                             ;   $,"         ( -- )
044C                             ;               Compile a literal string up to next " .
044C                             ;   RECURSE     ( -- )
044C                             ;               Make the current word available for compilation.
044C                             ; Name compiler
044C                             ;   ?UNIQUE     ( a -- a )
044C                             ;               Display a warning message if the word already exists.
044C                             ;   $,n         ( na -- )
044C                             ;               Build a new dictionary name using the string at na.
044C                             ; FORTH compiler
044C                             ;   $ COMPILE    ( a -- )
044C                             ;               Compile next word to code dictionary as a token or literal.
044C                             ;   OVERT       ( -- )
044C                             ;               Link a new word into the current vocabulary.
044C                             ;   ;           ( -- )
044C                             ;               Terminate a colon definition.
044C                             ;   ]           ( -- )
044C                             ;               Start compiling the words in the input stream.
044C                             ;   call,       ( ca -- )
044C                             ;               Assemble a call instruction to ca.
044C                             ;   :           ( -- ; <string> )
044C                             ;               Start a new colon definition using next word as its name.
044C                             ;   IMMEDIATE   ( -- )
044C                             ;               Make the last compiled word an immediate word.
044C                             ; Defining words
044C                             ;   USER        ( u -- ; <string> )
044C                             ;               Compile a new user variable.
044C                             ;   CREATE      ( -- ; <string> )
044C                             ;               Compile a new array entry without allocating code space.
044C                             ;   VARIABLE    ( -- ; <string> )
044C                             ;               Compile a new variable initialized to 0.
044C                             ;   FOR         ( -- a )
044C                             ;               Start a FOR-NEXT loop structure in a colon definition.
044C                          ;*Macro unroll: mCOLON  IMEDD+3,'FOR',FOR
044C                          ;*Macro unroll:  mCODE IMEDD+3, "FOR", FOR
044C                          ALIGN   2   
044C                FOR:         
044C                VVCODE:   .SET   $   
044C                VVLEN:    .SET   (IMEDD+3 & 01FH) / CELLL   
1DE2                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1DE2                VVNAME:   .SET   $   
1DE2   4C 04 2E 1E            DW   vvCODE,vvLINK   
1DE6                VVLINK:   .SET   $   
1DE6   43 46 4F 52            DB   IMEDD+3,"FOR"   
044C                          .ORG   vvCODE   
044C   00                     NOP      
044D   CD A0 04               CALL   doLIST   
0450   3A 04 06 09 94 08 DE 04 DW   COMPI,TOR,HERE,EXIT   
0458                             ;   BEGIN       ( -- a )
0458                             ;               Start an infinite or indefinite loop structure.
0458                          ;*Macro unroll: mCOLON  IMEDD+5,'BEGIN',BEGIN
0458                          ;*Macro unroll:  mCODE IMEDD+5, "BEGIN", BEGIN
0458                          ALIGN   2   
0458                BEGIN:       
0458                VVCODE:   .SET   $   
0458                VVLEN:    .SET   (IMEDD+5 & 01FH) / CELLL   
1D98                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1D98                VVNAME:   .SET   $   
1D98   58 04 E6 1D            DW   vvCODE,vvLINK   
1D9C                VVLINK:   .SET   $   
1D9C   45 42 45 47 49 4E      DB   IMEDD+5,"BEGIN"   
0458                          .ORG   vvCODE   
0458   00                     NOP      
0459   CD A0 04               CALL   doLIST   
045C   94 08 DE 04            DW   HERE,EXIT   
0460                             ;   NEXT        ( a -- )
0460                             ;               Terminate a FOR-NEXT loop structure.
0460                          ;*Macro unroll: mCOLON  IMEDD+4,'NEXT',NEXT
0460                          ;*Macro unroll:  mCODE IMEDD+4, "NEXT", NEXT
0460                          ALIGN   2   
0460                NEXT:        
0460                VVCODE:   .SET   $   
0460                VVLEN:    .SET   (IMEDD+4 & 01FH) / CELLL   
1D4E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1D4E                VVNAME:   .SET   $   
1D4E   60 04 9C 1D            DW   vvCODE,vvLINK   
1D52                VVLINK:   .SET   $   
1D52   44 4E 45 58 54         DB   IMEDD+4,"NEXT"   
0460                          .ORG   vvCODE   
0460   00                     NOP      
0461   CD A0 04               CALL   doLIST   
0464   3A 04 68 05 24 04 DE 04 DW   COMPI,DONXT,COMMA,EXIT   
046C                             ;   UNTIL       ( a -- )
046C                             ;               Terminate a BEGIN-UNTIL indefinite loop structure.
046C                          ;*Macro unroll: mCOLON  IMEDD+5,'UNTIL',UNTIL
046C                          ;*Macro unroll:  mCODE IMEDD+5, "UNTIL", UNTIL
046C                          ALIGN   2   
046C                UNTIL:       
046C                VVCODE:   .SET   $   
046C                VVLEN:    .SET   (IMEDD+5 & 01FH) / CELLL   
1D04                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1D04                VVNAME:   .SET   $   
1D04   6C 04 52 1D            DW   vvCODE,vvLINK   
1D08                VVLINK:   .SET   $   
1D08   45 55 4E 54 49 4C      DB   IMEDD+5,"UNTIL"   
046C                          .ORG   vvCODE   
046C   00                     NOP      
046D   CD A0 04               CALL   doLIST   
0470   3A 04 DE 07 24 04 DE 04 DW   COMPI,QBRAN,COMMA,EXIT   
0478                             ;   AGAIN       ( a -- )
0478                             ;               Terminate a BEGIN-AGAIN infinite loop structure.
0478                          ;*Macro unroll: mCOLON  IMEDD+5,'AGAIN',AGAIN
0478                          ;*Macro unroll:  mCODE IMEDD+5, "AGAIN", AGAIN
0478                          ALIGN   2   
0478                AGAIN:       
0478                VVCODE:   .SET   $   
0478                VVLEN:    .SET   (IMEDD+5 & 01FH) / CELLL   
1CBA                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1CBA                VVNAME:   .SET   $   
1CBA   78 04 08 1D            DW   vvCODE,vvLINK   
1CBE                VVLINK:   .SET   $   
1CBE   45 41 47 41 49 4E      DB   IMEDD+5,"AGAIN"   
0478                          .ORG   vvCODE   
0478   00                     NOP      
0479   CD A0 04               CALL   doLIST   
047C   3A 04 EE 07 24 04 DE 04 DW   COMPI,BRAN,COMMA,EXIT   
0484                             ;   IF          ( -- A )
0484                             ;               Begin a conditional branch structure.
0484                             ;   AHEAD       ( -- A )
0484                             ;               Compile a forward branch instruction.
0484                             ;   REPEAT      ( A a -- )
0484                             ;               Terminate a BEGIN-WHILE-REPEAT indefinite loop.
0484                             ;   THEN        ( A -- )
0484                             ;               Terminate a conditional branch structure.
0484                             ;   ELSE        ( A -- A )
0484                             ;               Start the false clause in an IF-ELSE-THEN structure.
0484                             ;   WHILE       ( a -- A a )
0484                             ;               Conditional branch out of a BEGIN-WHILE-REPEAT loop.
0484                             ;   ABORT"      ( -- ; <string> )
0484                             ;               Conditional abort with an error message.
0484                             ;   $"          ( -- ; <string> )
0484                             ;               Compile an inline string literal.
0484                             ;   ."          ( -- ; <string> )
0484                             ;               Compile an inline string literal to be typed out at run time.
0484                             ;   UNLOOP	( -- ) ( R: loop-sys -- )	\ CORE
0484                             ;		Discard loop-control parameters for the current nesting level.
0484                             ;		An UNLOOP is required for each nesting level before the
0484                             ;		definition may be EXITed.
0484                          ;*Macro unroll: mCOLON	COMPO+6,'UNLOOP',UNLOOP
0484                          ;*Macro unroll:  mCODE COMPO+6, "UNLOOP", UNLOOP
0484                          ALIGN   2   
0484                UNLOOP:      
0484                VVCODE:   .SET   $   
0484                VVLEN:    .SET   (COMPO+6 & 01FH) / CELLL   
1C8E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1C8E                VVNAME:   .SET   $   
1C8E   84 04 BE 1C            DW   vvCODE,vvLINK   
1C92                VVLINK:   .SET   $   
1C92   26 55 4E 4C 4F 4F 50   DB   COMPO+6,"UNLOOP"   
0484                          .ORG   vvCODE   
0484   00                     NOP      
0485   CD A0 04               CALL   doLIST   
0488   18 09 18 09 18 09 6E 09 06 09 DE 04 DW   RFrom,RFrom,RFrom,DDROP,ToR,EXIT   
0494                             ;   doCONST	( -- x )
0494                             ;	Run-time routine of CONSTANT and VARIABLE.
0494                          ;*Macro unroll: mCODE	COMPO+7, 'doCONST', DoCONST
0494                          ALIGN   2   
0494                DOCONST:      
0494                VVCODE:   .SET   $   
0494                VVLEN:    .SET   (COMPO+7 & 01FH) / CELLL   
1C62                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1C62                VVNAME:   .SET   $   
1C62   94 04 92 1C            DW   vvCODE,vvLINK   
1C66                VVLINK:   .SET   $   
1C66   27 64 6F 43 4F 4E 53 54 DB   COMPO+7,"doCONST"   
0494                          .ORG   vvCODE   
0494   E1                     POP   HL   ;10t
0495   C5                     PUSH   BC   ;11t
0496   4E                     LD   C,(HL)   ; 7t
0497   23                     INC   HL   ; 6t
0498   46                     LD   B,(HL)   ; 7t
0499                          ;*Macro unroll:  mNEXT
0499   EB                     EX   DE,HL   
049A                          ;*Macro unroll:  mNEXTHL                         ; 34t
049A   5E                     LD   E,(HL)   ; 34t
049B   23                     INC   HL   
049C   56                     LD   D,(HL)   
049D   23                     INC   HL   
049E   EB                     EX   DE,HL   
049F   E9                     JP   (HL)   
04A0                             ;   doLIST	( -- ) ( R: -- nest-sys )
04A0                             ;	Process colon list.
04A0                          ;*Macro unroll: mCODE	COMPO+6, 'doLIST', DoLIST
04A0                          ALIGN   2   
04A0                DOLIST:      
04A0                VVCODE:   .SET   $   
04A0                VVLEN:    .SET   (COMPO+6 & 01FH) / CELLL   
1C36                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1C36                VVNAME:   .SET   $   
1C36   A0 04 66 1C            DW   vvCODE,vvLINK   
1C3A                VVLINK:   .SET   $   
1C3A   26 64 6F 4C 49 53 54   DB   COMPO+6,"doLIST"   
04A0                          .ORG   vvCODE   
04A0   DD 2B                  DEC   IX   ;10t
04A2   DD 72 00               LD   (IX+0),D   ;19t
04A5   DD 2B                  DEC   IX   ;10t
04A7   DD 73 00               LD   (IX+0),E   ;19t
04AA   E1                     POP   HL   ;10t
04AB                          ;*Macro unroll:  mNEXTHL							
04AB   5E                     LD   E,(HL)   
04AC   23                     INC   HL   
04AD   56                     LD   D,(HL)   
04AE   23                     INC   HL   
04AF   EB                     EX   DE,HL   
04B0   E9                     JP   (HL)   
04B1                             ;   doLIT	( -- x )
04B1                             ;	Push an inline literal.
04B1                          ;*Macro unroll: mCODE	COMPO+5, 'doLIT', DoLIT
04B1                          ALIGN   2   
04B2                DOLIT:       
04B2                VVCODE:   .SET   $   
04B2                VVLEN:    .SET   (COMPO+5 & 01FH) / CELLL   
1C0C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1C0C                VVNAME:   .SET   $   
1C0C   B2 04 3A 1C            DW   vvCODE,vvLINK   
1C10                VVLINK:   .SET   $   
1C10   25 64 6F 4C 49 54      DB   COMPO+5,"doLIT"   
04B2                          .ORG   vvCODE   
04B2   C5                     PUSH   BC   ; 11t
04B3   EB                     EX   DE,HL   ; 4t
04B4   4E                     LD   C,(HL)   ; 7t
04B5   23                     INC   HL   ; 6t
04B6   46                     LD   B,(HL)   ; 7t
04B7   23                     INC   HL   ; 6t
04B8                          ;*Macro unroll:  mNEXTHL
04B8   5E                     LD   E,(HL)   
04B9   23                     INC   HL   
04BA   56                     LD   D,(HL)   
04BB   23                     INC   HL   
04BC   EB                     EX   DE,HL   
04BD   E9                     JP   (HL)   
04BE                             ;   doVAR       ( -- a )
04BE                             ;   Run time routine for VARIABLE and CREATE.
04BE                          ;*Macro unroll: mCOLON  COMPO+5, 'doVAR', DoVAR
04BE                          ;*Macro unroll:  mCODE COMPO+5, "doVAR", DoVAR
04BE                          ALIGN   2   
04BE                DOVAR:       
04BE                VVCODE:   .SET   $   
04BE                VVLEN:    .SET   (COMPO+5 & 01FH) / CELLL   
1BE2                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1BE2                VVNAME:   .SET   $   
1BE2   BE 04 10 1C            DW   vvCODE,vvLINK   
1BE6                VVLINK:   .SET   $   
1BE6   25 64 6F 56 41 52      DB   COMPO+5,"doVAR"   
04BE                          .ORG   vvCODE   
04BE   00                     NOP      
04BF   CD A0 04               CALL   doLIST   
04C2   18 09 DE 04            DW   RFROM,EXIT   
04C6                             ;   UP          ( -- a )
04C6                             ;   Pointer to the user area.
04C6                          ;*Macro unroll: mCOLON  2, 'UP', UP
04C6                          ;*Macro unroll:  mCODE 2, "UP", UP
04C6                          ALIGN   2   
04C6                UP:          
04C6                VVCODE:   .SET   $   
04C6                VVLEN:    .SET   (2 & 01FH) / CELLL   
1BDA                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1BDA                VVNAME:   .SET   $   
1BDA   C6 04 E6 1B            DW   vvCODE,vvLINK   
1BDE                VVLINK:   .SET   $   
1BDE   02 55 50               DB   2,"UP"   
04C6                          .ORG   vvCODE   
04C6   00                     NOP      
04C7   CD A0 04               CALL   doLIST   
04CA   BE 04                  DW   DoVAR   
04CC   00 24                  DW   UPP   
04CE                             ;   doUSER      ( -- a )
04CE                             ;   Run time routine for user variables.
04CE                          ;*Macro unroll: mCOLON  COMPO+6,'doUSER',DOUSE
04CE                          ;*Macro unroll:  mCODE COMPO+6, "doUSER", DOUSE
04CE                          ALIGN   2   
04CE                DOUSE:       
04CE                VVCODE:   .SET   $   
04CE                VVLEN:    .SET   (COMPO+6 & 01FH) / CELLL   
1BAE                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1BAE                VVNAME:   .SET   $   
1BAE   CE 04 DE 1B            DW   vvCODE,vvLINK   
1BB2                VVLINK:   .SET   $   
1BB2   26 64 6F 55 53 45 52   DB   COMPO+6,"doUSER"   
04CE                          .ORG   vvCODE   
04CE   00                     NOP      
04CF   CD A0 04               CALL   doLIST   
04D2   18 09 1E 08 C6 04 1E 08 76 01 DE 04 DW   RFROM,AT,UP,AT,PLUS,EXIT   
04DE                             ;   EXIT	( -- ) ( R: nest-sys -- )	\ CORE
04DE                             ;	Return control to the calling definition.
04DE                          ;*Macro unroll: mCODE	COMPO+4, 'EXIT', EXIT
04DE                          ALIGN   2   
04DE                EXIT:        
04DE                VVCODE:   .SET   $   
04DE                VVLEN:    .SET   (COMPO+4 & 01FH) / CELLL   
1B84                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1B84                VVNAME:   .SET   $   
1B84   DE 04 B2 1B            DW   vvCODE,vvLINK   
1B88                VVLINK:   .SET   $   
1B88   24 45 58 49 54         DB   COMPO+4,"EXIT"   
04DE                          .ORG   vvCODE   
04DE   DD 6E 00               LD   L,(IX+0)   
04E1   DD 23                  INC   IX   
04E3   DD 66 00               LD   H,(IX+0)   
04E6   DD 23                  INC   IX   
04E8                          ;*Macro unroll:  mNEXTHL
04E8   5E                     LD   E,(HL)   
04E9   23                     INC   HL   
04EA   56                     LD   D,(HL)   
04EB   23                     INC   HL   
04EC   EB                     EX   DE,HL   
04ED   E9                     JP   (HL)   
04EE                             ;   doDO	( n1|u1 n2|u2 -- ) ( R: -- n1 n2-n1-max_negative )
04EE                             ;		Run-time funtion of DO.
04EE                             ; 
04EE                             ;   : doDO	>R max-negative + R> OVER - SWAP R> SWAP >R SWAP >R >R ;
04EE                          ;*Macro unroll: mCOLON	COMPO+4,'doDO',DoDO
04EE                          ;*Macro unroll:  mCODE COMPO+4, "doDO", DoDO
04EE                          ALIGN   2   
04EE                DODO:        
04EE                VVCODE:   .SET   $   
04EE                VVLEN:    .SET   (COMPO+4 & 01FH) / CELLL   
1B5A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1B5A                VVNAME:   .SET   $   
1B5A   EE 04 88 1B            DW   vvCODE,vvLINK   
1B5E                VVLINK:   .SET   $   
1B5E   24 64 6F 44 4F         DB   COMPO+4,"doDO"   
04EE                          .ORG   vvCODE   
04EE   00                     NOP      
04EF   CD A0 04               CALL   doLIST   
04F2   06 09 B2 04 00 80 76 01 18 09 DW   ToR,DoLIT,MaxNegative,Plus,RFrom   
04FC   46 09 CE 01 3A 09 18 09 3A 09 06 09 3A 09 06 09 06 09 DE 04 DW   OVER,SUBB,SWAP,RFrom,SWAP,ToR,SWAP,ToR,ToR,EXIT   
0510                             ;   doLOOP	( -- ) ( R: loop-sys1 -- | loop-sys2 )
0510                             ;		Run time routine for LOOP.
0510                          ;*Macro unroll: mCODE	COMPO+6,'doLOOP',DoLOOP
0510                          ALIGN   2   
0510                DOLOOP:      
0510                VVCODE:   .SET   $   
0510                VVLEN:    .SET   (COMPO+6 & 01FH) / CELLL   
1B2E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1B2E                VVNAME:   .SET   $   
1B2E   10 05 5E 1B            DW   vvCODE,vvLINK   
1B32                VVLINK:   .SET   $   
1B32   26 64 6F 4C 4F 4F 50   DB   COMPO+6,"doLOOP"   
0510                          .ORG   vvCODE   
0510   DD E5                  PUSH   IX   ; 15t
0512   E1                     POP   HL   ; 10t
0513   34                     INC   (HL)   ; 11t
0514   28 0B                  JR   Z,DOLOOP2   ; 12/7t a fast dec is ok, only
0516                DOLOOP1:      
0516   1A                     LD   A,(DE)   ; 7t go back to the loop
0517   6F                     LD   L,A   ; 4t
0518   13                     INC   DE   ; 6t
0519   1A                     LD   A,(DE)   ; 7t
051A   67                     LD   H,A   ; 4t
051B                          ;*Macro unroll: 	mNEXTHL
051B   5E                     LD   E,(HL)   
051C   23                     INC   HL   
051D   56                     LD   D,(HL)   
051E   23                     INC   HL   
051F   EB                     EX   DE,HL   
0520   E9                     JP   (HL)   
0521                DOLOOP2:      
0521   23                     INC   HL   ; 6t
0522   34                     INC   (HL)   ;11t
0523   E2 16 05               JP   PO,DOLOOP1   ;10/7t ?loop end
0526   EB                     EX   DE,HL   ; 4t yes,continue past the BRAN offset
0527   11 04 00               LD   DE,4   ;10t clear return stack
052A   DD 19                  ADD   IX,DE   ;15h
052C   23                     INC   HL   ; 6t
052D   23                     INC   HL   ; 6t
052E                          ;*Macro unroll: 	mNEXTHL
052E   5E                     LD   E,(HL)   
052F   23                     INC   HL   
0530   56                     LD   D,(HL)   
0531   23                     INC   HL   
0532   EB                     EX   DE,HL   
0533   E9                     JP   (HL)   
0534                             ;   do+LOOP	( n -- ) ( R: loop-sys1 -- | loop-sys2 )
0534                             ;		Run time routine for +LOOP.
0534                          ;*Macro unroll: mCODE	COMPO+7,'do+LOOP',DoPLOOP
0534                          ALIGN   2   
0534                DOPLOOP:      
0534                VVCODE:   .SET   $   
0534                VVLEN:    .SET   (COMPO+7 & 01FH) / CELLL   
1B02                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1B02                VVNAME:   .SET   $   
1B02   34 05 32 1B            DW   vvCODE,vvLINK   
1B06                VVLINK:   .SET   $   
1B06   27 64 6F 2B 4C 4F 4F 50 DB   COMPO+7,"do+LOOP"   
0534                          .ORG   vvCODE   
0534   E1                     POP   HL   ;10t this will be the new TOS
0535   C5                     PUSH   BC   ;11t
0536   44                     LD   B,H   ; 4t
0537   4D                     LD   C,L   ; 4t
0538   D9                     EXX      ; 4t
0539   C1                     POP   BC   ;10t old TOS = loop increment
053A   DD 6E 00               LD   L,(IX+0)   ;19t
053D   DD 66 01               LD   H,(IX+1)   ;19t
0540   B7                     OR   A   ; 4t clear carry
0541   ED 4A                  ADC   HL,BC   ;15t
0543   EA 58 05               JP   PE,DOPLP1   ;10/7t ?loop end
0546   DD 75 00               LD   (IX+0),L   ;19t   no, go back
0549   DD 74 01               LD   (IX+1),H   ;19t
054C   D9                     EXX      ; 4t
054D   1A                     LD   A,(DE)   ; 7t go back to the loop
054E   6F                     LD   L,A   ; 4t
054F   13                     INC   DE   ; 6t
0550   1A                     LD   A,(DE)   ; 7t
0551   67                     LD   H,A   ; 4t
0552                          ;*Macro unroll: 	mNEXTHL
0552   5E                     LD   E,(HL)   
0553   23                     INC   HL   
0554   56                     LD   D,(HL)   
0555   23                     INC   HL   
0556   EB                     EX   DE,HL   
0557   E9                     JP   (HL)   
0558                DOPLP1:      
0558   01 04 00               LD   BC,4   ;10t clear return stack
055B   DD 09                  ADD   IX,BC   ;15h
055D   D9                     EXX      ; 4t
055E   13                     INC   DE   ; 6t yes,continue past the BRAN offset
055F   13                     INC   DE   ; 6t
0560                          ;*Macro unroll: 	mNEXT
0560   EB                     EX   DE,HL   
0561                          ;*Macro unroll:  mNEXTHL                         ; 34t
0561   5E                     LD   E,(HL)   ; 34t
0562   23                     INC   HL   
0563   56                     LD   D,(HL)   
0564   23                     INC   HL   
0565   EB                     EX   DE,HL   
0566   E9                     JP   (HL)   
0567                             ;   next        ( -- )
0567                             ;               Run time code for the single index loop.
0567                             ;               : next ( -- ) \ hilevel model
0567                             ;                 r> r> dup if 1 - >r @ >r exit then drop cell+ >r ;
0567                          ;*Macro unroll: mCODE   COMPO+4,'next',DONXT
0567                          ALIGN   2   
0568                DONXT:       
0568                VVCODE:   .SET   $   
0568                VVLEN:    .SET   (COMPO+4 & 01FH) / CELLL   
1AD8                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1AD8                VVNAME:   .SET   $   
1AD8   68 05 06 1B            DW   vvCODE,vvLINK   
1ADC                VVLINK:   .SET   $   
1ADC   24 6E 65 78 74         DB   COMPO+4,"next"   
0568                          .ORG   vvCODE   
0568   DD E5                  PUSH   IX   
056A   E1                     POP   HL   ; load rp into HL
056B   7E                     LD   A,(HL)   ; a = low byte of r@
056C   B7                     OR   A   
056D   20 14                  JR   NZ,DECLOW   ; low > 0 goto dec low
056F   23                     INC   HL   
0570   7E                     LD   A,(HL)   ; a = high byte of r@
0571   B7                     OR   A   
0572   20 0D                  JR   NZ,DECHILO   ; high > 0 goto dec hi dec lo
0574   23                     INC   HL   
0575   E5                     PUSH   HL   
0576   DD E1                  POP   IX   ; pop r@
0578   13                     INC   DE   ; IP = skip following word
0579   13                     INC   DE   
057A                          ;*Macro unroll:  mNEXT                               ; continue
057A   EB                     EX   DE,HL   ; continue
057B                          ;*Macro unroll:  mNEXTHL                         ; 34t
057B   5E                     LD   E,(HL)   ; 34t
057C   23                     INC   HL   
057D   56                     LD   D,(HL)   
057E   23                     INC   HL   
057F   EB                     EX   DE,HL   
0580   E9                     JP   (HL)   
0581                DECHILO:      
0581   35                     DEC   (HL)   ; dec high byte of r@
0582   2B                     DEC   HL   
0583                DECLOW:      
0583   35                     DEC   (HL)   ; dec low byte of r@
0584   6B                     LD   L,E   ; DE points to location of loop address
0585   62                     LD   H,D   
0586   5E                     LD   E,(HL)   ; DE points to loop address
0587   23                     INC   HL   
0588   56                     LD   D,(HL)   
0589                          ;*Macro unroll:  mNEXT                               ; continue to loop address
0589   EB                     EX   DE,HL   ; continue to loop address
058A                          ;*Macro unroll:  mNEXTHL                         ; 34t
058A   5E                     LD   E,(HL)   ; 34t
058B   23                     INC   HL   
058C   56                     LD   D,(HL)   
058D   23                     INC   HL   
058E   EB                     EX   DE,HL   
058F   E9                     JP   (HL)   
0590                             ;   DIGIT       ( u -- c )
0590                             ;               Convert digit u to a character.
0590                          ;*Macro unroll: mCOLON  5,'DIGIT',DIGIT
0590                          ;*Macro unroll:  mCODE 5, "DIGIT", DIGIT
0590                          ALIGN   2   
0590                DIGIT:       
0590                VVCODE:   .SET   $   
0590                VVLEN:    .SET   (5 & 01FH) / CELLL   
1ACE                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1ACE                VVNAME:   .SET   $   
1ACE   90 05 DC 1A            DW   vvCODE,vvLINK   
1AD2                VVLINK:   .SET   $   
1AD2   05 44 49 47 49 54      DB   5,"DIGIT"   
0590                          .ORG   vvCODE   
0590   00                     NOP      
0591   CD A0 04               CALL   doLIST   
0594   B2 04 09 00 46 09 24 02 DW   DOLIT,9,OVER,LESS   
059C   B2 04 07 00 4C 01 76 01 DW   DOLIT,7,ANDD,PLUS   
05A4   B2 04 76 01 DE 04      DW   DOLIT,"0",PLUS,EXIT   
05AA                             ;   EXTRACT     ( n base -- n c )
05AA                             ;               Extract the least significant digit from n.
05AA                          ;*Macro unroll: mCOLON  7,'EXTRACT',EXTRC
05AA                          ;*Macro unroll:  mCODE 7, "EXTRACT", EXTRC
05AA                          ALIGN   2   
05AA                EXTRC:       
05AA                VVCODE:   .SET   $   
05AA                VVLEN:    .SET   (7 & 01FH) / CELLL   
1AC2                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1AC2                VVNAME:   .SET   $   
1AC2   AA 05 D2 1A            DW   vvCODE,vvLINK   
1AC6                VVLINK:   .SET   $   
1AC6   07 45 58 54 52 41 43 54 DB   7,"EXTRACT"   
05AA                          .ORG   vvCODE   
05AA   00                     NOP      
05AB   CD A0 04               CALL   doLIST   
05AE   B2 04 00 00 3A 09 8E 02 DW   DOLIT,0,SWAP,UMMOD   
05B6   3A 09 90 05 DE 04      DW   SWAP,DIGIT,EXIT   
05BC                             ;   <#          ( -- )
05BC                             ;               Initiate the numeric output process.
05BC                          ;*Macro unroll: mCOLON  2,'<#',BDIGS
05BC                          ;*Macro unroll:  mCODE 2, "<#", BDIGS
05BC                          ALIGN   2   
05BC                BDIGS:       
05BC                VVCODE:   .SET   $   
05BC                VVLEN:    .SET   (2 & 01FH) / CELLL   
1ABA                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1ABA                VVNAME:   .SET   $   
1ABA   BC 05 C6 1A            DW   vvCODE,vvLINK   
1ABE                VVLINK:   .SET   $   
1ABE   02 3C 23               DB   2,"<#"   
05BC                          .ORG   vvCODE   
05BC   00                     NOP      
05BD   CD A0 04               CALL   doLIST   
05C0   9E 08 3A 0A 10 08 DE 04 DW   PAD,HLD,STORE,EXIT   
05C8                             ;   HOLD        ( c -- )
05C8                             ;               Insert a character into the numeric output string.
05C8                          ;*Macro unroll: mCOLON  4,'HOLD',HOLD
05C8                          ;*Macro unroll:  mCODE 4, "HOLD", HOLD
05C8                          ALIGN   2   
05C8                HOLD:        
05C8                VVCODE:   .SET   $   
05C8                VVLEN:    .SET   (4 & 01FH) / CELLL   
1AB0                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1AB0                VVNAME:   .SET   $   
1AB0   C8 05 BE 1A            DW   vvCODE,vvLINK   
1AB4                VVLINK:   .SET   $   
1AB4   04 48 4F 4C 44         DB   4,"HOLD"   
05C8                          .ORG   vvCODE   
05C8   00                     NOP      
05C9   CD A0 04               CALL   doLIST   
05CC   3A 0A 1E 08 B2 04 01 00 CE 01 DW   HLD,AT,DOLIT,1,SUBB   
05D6   2A 09 3A 0A 10 08 2A 08 DE 04 DW   DUPP,HLD,STORE,CStore,EXIT   
05E0                             ;   #           ( u -- u )
05E0                             ;               Extract one digit from u and append the digit to output string.
05E0                          ;*Macro unroll: mCOLON  1,'#',DIG
05E0                          ;*Macro unroll:  mCODE 1, "#", DIG
05E0                          ALIGN   2   
05E0                DIG:         
05E0                VVCODE:   .SET   $   
05E0                VVLEN:    .SET   (1 & 01FH) / CELLL   
1AAA                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1AAA                VVNAME:   .SET   $   
1AAA   E0 05 B4 1A            DW   vvCODE,vvLINK   
1AAE                VVLINK:   .SET   $   
1AAE   01 23                  DB   1,"#"   
05E0                          .ORG   vvCODE   
05E0   00                     NOP      
05E1   CD A0 04               CALL   doLIST   
05E4   FA 09 1E 08 AA 05 C8 05 DE 04 DW   BASE,AT,EXTRC,HOLD,EXIT   
05EE                             ;   #S          ( u -- 0 )
05EE                             ;               Convert u until all digits are added to the output string.
05EE                          ;*Macro unroll: mCOLON  2,'#S',DIGS
05EE                          ;*Macro unroll:  mCODE 2, "#S", DIGS
05EE                          ALIGN   2   
05EE                DIGS:        
05EE                VVCODE:   .SET   $   
05EE                VVLEN:    .SET   (2 & 01FH) / CELLL   
1AA2                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1AA2                VVNAME:   .SET   $   
1AA2   EE 05 AE 1A            DW   vvCODE,vvLINK   
1AA6                VVLINK:   .SET   $   
1AA6   02 23 53               DB   2,"#S"   
05EE                          .ORG   vvCODE   
05EE   00                     NOP      
05EF   CD A0 04               CALL   doLIST   
05F2                DIGS1:       
05F2   E0 05 2A 09            DW   DIG,DUPP   
05F6   DE 07 FE 05            DW   QBRAN,DIGS2   
05FA   EE 07 F2 05            DW   BRAN,DIGS1   
05FE                DIGS2:       
05FE   DE 04                  DW   EXIT   
0600                             ;   SIGN        ( n -- )
0600                             ;               Add a minus sign to the numeric output string.
0600                          ;*Macro unroll: mCOLON	4,'SIGN',SIGN
0600                          ;*Macro unroll:  mCODE 4, "SIGN", SIGN
0600                          ALIGN   2   
0600                SIGN:        
0600                VVCODE:   .SET   $   
0600                VVLEN:    .SET   (4 & 01FH) / CELLL   
1A98                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1A98                VVNAME:   .SET   $   
1A98   00 06 A6 1A            DW   vvCODE,vvLINK   
1A9C                VVLINK:   .SET   $   
1A9C   04 53 49 47 4E         DB   4,"SIGN"   
0600                          .ORG   vvCODE   
0600   00                     NOP      
0601   CD A0 04               CALL   doLIST   
0604   40 01 DE 07 10 06      DW   ZLESS,QBRAN,SIGN1   
060A   B2 04 2D 00 C8 05      DW   DoLIT,MINUSS,HOLD   
0610                SIGN1:       
0610   DE 04                  DW   EXIT   
0612                             ;   #>          ( w -- b u )
0612                             ;               Prepare the output string to be TYPE'd.
0612                          ;*Macro unroll: mCOLON  2,'#>',EDIGS
0612                          ;*Macro unroll:  mCODE 2, "#>", EDIGS
0612                          ALIGN   2   
0612                EDIGS:       
0612                VVCODE:   .SET   $   
0612                VVLEN:    .SET   (2 & 01FH) / CELLL   
1A90                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1A90                VVNAME:   .SET   $   
1A90   12 06 9C 1A            DW   vvCODE,vvLINK   
1A94                VVLINK:   .SET   $   
1A94   02 23 3E               DB   2,"#>"   
0612                          .ORG   vvCODE   
0612   00                     NOP      
0613   CD A0 04               CALL   doLIST   
0616   32 09 3A 0A 1E 08      DW   DROP,HLD,AT   
061C   9E 08 46 09 CE 01 DE 04 DW   PAD,OVER,SUBB,EXIT   
0624                             ;   str         ( n -- b u )
0624                             ;               Convert a signed integer to a numeric string.
0624                          ;*Macro unroll: mCOLON  3,'str',STR
0624                          ;*Macro unroll:  mCODE 3, "str", STR
0624                          ALIGN   2   
0624                STR:         
0624                VVCODE:   .SET   $   
0624                VVLEN:    .SET   (3 & 01FH) / CELLL   
1A88                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1A88                VVNAME:   .SET   $   
1A88   24 06 94 1A            DW   vvCODE,vvLINK   
1A8C                VVLINK:   .SET   $   
1A8C   03 73 74 72            DB   3,"str"   
0624                          .ORG   vvCODE   
0624   00                     NOP      
0625   CD A0 04               CALL   doLIST   
0628   2A 09 06 09 D8 01      DW   DUPP,TOR,ABSS   
062E   BC 05 EE 05 18 09      DW   BDIGS,DIGS,RFROM   
0634   00 06 12 06 DE 04      DW   SIGN,EDIGS,EXIT   
063A                             ;   HEX         ( -- )
063A                             ;               Use radix 16 as base for numeric conversions.
063A                          ;*Macro unroll: mCOLON  3,'HEX',HEX
063A                          ;*Macro unroll:  mCODE 3, "HEX", HEX
063A                          ALIGN   2   
063A                HEX:         
063A                VVCODE:   .SET   $   
063A                VVLEN:    .SET   (3 & 01FH) / CELLL   
1A80                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1A80                VVNAME:   .SET   $   
1A80   3A 06 8C 1A            DW   vvCODE,vvLINK   
1A84                VVLINK:   .SET   $   
1A84   03 48 45 58            DB   3,"HEX"   
063A                          .ORG   vvCODE   
063A   00                     NOP      
063B   CD A0 04               CALL   doLIST   
063E   B2 04 10 00 FA 09 10 08 DE 04 DW   DOLIT,16,BASE,STORE,EXIT   
0648                             ;   DECIMAL     ( -- )
0648                             ;               Use radix 10 as base for numeric conversions.
0648                          ;*Macro unroll: mCOLON  7,'DECIMAL',DECIMAL
0648                          ;*Macro unroll:  mCODE 7, "DECIMAL", DECIMAL
0648                          ALIGN   2   
0648                DECIMAL:      
0648                VVCODE:   .SET   $   
0648                VVLEN:    .SET   (7 & 01FH) / CELLL   
1A74                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1A74                VVNAME:   .SET   $   
1A74   48 06 84 1A            DW   vvCODE,vvLINK   
1A78                VVLINK:   .SET   $   
1A78   07 44 45 43 49 4D 41 4C DB   7,"DECIMAL"   
0648                          .ORG   vvCODE   
0648   00                     NOP      
0649   CD A0 04               CALL   doLIST   
064C   B2 04 10 00 FA 09 10 08 DE 04 DW   DOLIT,16,BASE,STORE,EXIT   
0656                             ;   BL          ( -- 32 )
0656                             ;               Return 32, the blank character.
0656                          ;*Macro unroll: mCOLON	2,'BL',BLANK
0656                          ;*Macro unroll:  mCODE 2, "BL", BLANK
0656                          ALIGN   2   
0656                BLANK:       
0656                VVCODE:   .SET   $   
0656                VVLEN:    .SET   (2 & 01FH) / CELLL   
1A6C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1A6C                VVNAME:   .SET   $   
1A6C   56 06 78 1A            DW   vvCODE,vvLINK   
1A70                VVLINK:   .SET   $   
1A70   02 42 4C               DB   2,"BL"   
0656                          .ORG   vvCODE   
0656   00                     NOP      
0657   CD A0 04               CALL   doLIST   
065A   B2 04 20 00 DE 04      DW   DoLIT,SPACEE,EXIT   
0660                             ;   >CHAR       ( c -- c )
0660                             ;               Filter non-printing characters.
0660                          ;*Macro unroll: mCOLON  5,'>CHAR',TCHAR
0660                          ;*Macro unroll:  mCODE 5, ">CHAR", TCHAR
0660                          ALIGN   2   
0660                TCHAR:       
0660                VVCODE:   .SET   $   
0660                VVLEN:    .SET   (5 & 01FH) / CELLL   
1A62                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1A62                VVNAME:   .SET   $   
1A62   60 06 70 1A            DW   vvCODE,vvLINK   
1A66                VVLINK:   .SET   $   
1A66   05 3E 43 48 41 52      DB   5,">CHAR"   
0660                          .ORG   vvCODE   
0660   00                     NOP      
0661   CD A0 04               CALL   doLIST   
0664   B2 04 7F 00 4C 01 2A 09 DW   DoLIT,$7F,ANDD,DUPP   ;mask msb
066C   B2 04 7F 00            DW   DoLIT,127   
0670   B2 04 20 00 6C 02      DW   DoLIT,SPACEE,WITHI   ;check for printable
0676   DE 07 80 06            DW   QBRAN,TCHA1   
067A   32 09 B2 04 5F 00      DW   DROP,DoLIT,UNDERSC   ;replace non-printables
0680                TCHA1:       
0680   DE 04                  DW   EXIT   
0682                             ; Numeric input, single precision
0682                             ;   DIGIT?      ( c base -- u t )
0682                             ;               Convert a character to its numeric value. A flag indicates success.
0682                             ;   NUMBER?     ( a -- n T | a F )
0682                             ;               Convert a number string to integer. Push a flag on tos.
0682                             ; Parsing
0682                             ;   parse       ( b u c -- b u delta ; <string> )
0682                             ;               Scan string delimited by c. Return found string and its offset.
0682                             ;   PARSE       ( c -- b u ; <string> )
0682                             ;               Scan input stream and return counted string delimited by c.
0682                             ;   (           ( -- )
0682                             ;               Ignore following string up to next ) . A comment.
0682                             ;   \           ( -- )
0682                             ;               Ignore following text till the end of line.
0682                             ;   CHAR        ( -- c )
0682                             ;               Parse next word and return its first character.
0682                             ;   TOKEN       ( -- a ; <string> )
0682                             ;               Parse a word from input stream and copy it to name dictionary.
0682                             ;   WORD        ( c -- a ; <string> )
0682                             ;               Parse a word from input stream and copy it to code dictionary.
0682                             ; Dictionary search
0682                             ;   NAME>       ( na -- ca )
0682                             ;               Return a code address given a name address.
0682                             ;   SAME?       ( a a u -- a a f \ -0+ )
0682                             ;               Compare u cells in two strings. Return 0 if identical.
0682                             ;   find        ( a va -- ca na | a F )
0682                             ;               Search a vocabulary for a string. Return ca and na if succeeded.
0682                             ;   NAME?       ( a -- ca na | a F )
0682                             ;               Search all context vocabularies for a string.
0682                             ; Error handling
0682                             ;   CATCH       ( ca -- 0 | err# )
0682                             ;               Execute word at ca and set up an error frame for it.
0682                             ;   THROW       ( err# -- err# )
0682                             ;               Reset system to current local error frame an update error flag.
0682                             ;   NULL$       ( -- a )
0682                             ;               Return address of a null string with zero count.
0682                             ;   ABORT       ( -- )
0682                             ;               Reset data stack and jump to QUIT.
0682                             ;   abort"      ( f -- )
0682                             ;               Run time routine of ABORT" . Abort with a message.
0682                             ; The text interpreter
0682                             ;   $INTERPRET  ( a -- )
0682                             ;               Interpret a word. If failed, try to convert it to an integer.
0682                             ;   [           ( -- )
0682                             ;               Start the text interpreter.
0682                             ;   .OK         ( -- )
0682                             ;               Display "ok" only while interpreting.
0682                             ;   ?STACK      ( -- )
0682                             ;               Abort if the data stack underflows.
0682                             ;   EVAL        ( -- )
0682                             ;               Interpret the input stream.
0682                             ;   PC!         ( uc p --  )
0682                             ;               output uc to IO port p
0682                             ;   PC@         ( p -- uc )
0682                             ;               output uc to IO port p
0682                             ;   !IO         ( -- )
0682                             ;               Initialize the serial I/O devices.
0682                          ;*Macro unroll: mCODE   3,'!IO', STOIO ;
0682                          ALIGN   2   ; 
0682                STOIO:       
0682                VVCODE:   .SET   $   
0682                VVLEN:    .SET   (3 & 01FH) / CELLL   
1A5A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1A5A                VVNAME:   .SET   $   
1A5A   82 06 66 1A            DW   vvCODE,vvLINK   
1A5E                VVLINK:   .SET   $   
1A5E   03 21 49 4F            DB   3,"!IO"   
0682                          .ORG   vvCODE   
0682   CD 9F 00               CALL   INIT_IO   
0685                          ;*Macro unroll:  mNEXT
0685   EB                     EX   DE,HL   
0686                          ;*Macro unroll:  mNEXTHL                         ; 34t
0686   5E                     LD   E,(HL)   ; 34t
0687   23                     INC   HL   
0688   56                     LD   D,(HL)   
0689   23                     INC   HL   
068A   EB                     EX   DE,HL   
068B   E9                     JP   (HL)   
068C                             ;   ?RX         ( -- c T | F )
068C                             ;               Return input character and true, or a false if no input.
068C                          ;*Macro unroll: mCODE	3, '?RX', QRX
068C                          ALIGN   2   
068C                QRX:         
068C                VVCODE:   .SET   $   
068C                VVLEN:    .SET   (3 & 01FH) / CELLL   
1A52                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1A52                VVNAME:   .SET   $   
1A52   8C 06 5E 1A            DW   vvCODE,vvLINK   
1A56                VVLINK:   .SET   $   
1A56   03 3F 52 58            DB   3,"?RX"   
068C                          .ORG   vvCODE   
068C   C5                     PUSH   BC   
068D   CD E9 00               CALL   CKINCHAR   
0690   20 05                  JR   nz,QRX1   
0692   01 00 00               LD   BC,FALSEE   
0695   18 0A                  JR   QRX2   
0697                QRX1:        
0697   CD B3 00               CALL   RXA   
069A   4F                     LD   C,A   
069B   06 00                  LD   B,0   
069D   C5                     PUSH   BC   
069E   01 FF FF               LD   BC,TRUEE   
06A1                QRX2:        
06A1                          ;*Macro unroll:  mNEXT
06A1   EB                     EX   DE,HL   
06A2                          ;*Macro unroll:  mNEXTHL                         ; 34t
06A2   5E                     LD   E,(HL)   ; 34t
06A3   23                     INC   HL   
06A4   56                     LD   D,(HL)   
06A5   23                     INC   HL   
06A6   EB                     EX   DE,HL   
06A7   E9                     JP   (HL)   
06A8                             ;   TX!         ( c -- )
06A8                             ;               Send character c to the output device.
06A8                          ;*Macro unroll: mCODE	3,'TX!',TXSTO
06A8                          ALIGN   2   
06A8                TXSTO:       
06A8                VVCODE:   .SET   $   
06A8                VVLEN:    .SET   (3 & 01FH) / CELLL   
1A4A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1A4A                VVNAME:   .SET   $   
1A4A   A8 06 56 1A            DW   vvCODE,vvLINK   
1A4E                VVLINK:   .SET   $   
1A4E   03 54 58 21            DB   3,"TX!"   
06A8                          .ORG   vvCODE   
06A8   79                     LD   A,C   
06A9   CD DE 00               CALL   TXA   
06AC   C1                     POP   BC   
06AD                          ;*Macro unroll:  mNEXT
06AD   EB                     EX   DE,HL   
06AE                          ;*Macro unroll:  mNEXTHL                         ; 34t
06AE   5E                     LD   E,(HL)   ; 34t
06AF   23                     INC   HL   
06B0   56                     LD   D,(HL)   
06B1   23                     INC   HL   
06B2   EB                     EX   DE,HL   
06B3   E9                     JP   (HL)   
06B4                             ;   ?KEY        ( -- c T | F )
06B4                             ;               Return input character and true, or a false if no input.
06B4                          ;*Macro unroll: mCOLON  4,'?KEY',QKEY
06B4                          ;*Macro unroll:  mCODE 4, "?KEY", QKEY
06B4                          ALIGN   2   
06B4                QKEY:        
06B4                VVCODE:   .SET   $   
06B4                VVLEN:    .SET   (4 & 01FH) / CELLL   
1A40                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1A40                VVNAME:   .SET   $   
1A40   B4 06 4E 1A            DW   vvCODE,vvLINK   
1A44                VVLINK:   .SET   $   
1A44   04 3F 4B 45 59         DB   4,"?KEY"   
06B4                          .ORG   vvCODE   
06B4   00                     NOP      
06B5   CD A0 04               CALL   doLIST   
06B8   CA 09 1E 08 DA 07 DE 04 DW   TQKEY,AT,EXECUTE,EXIT   
06C0                             ;   KEY         ( -- c )
06C0                             ;               Wait for and return an input character.
06C0                          ;*Macro unroll: mCOLON  3,'KEY',KEY
06C0                          ;*Macro unroll:  mCODE 3, "KEY", KEY
06C0                          ALIGN   2   
06C0                KEY:         
06C0                VVCODE:   .SET   $   
06C0                VVLEN:    .SET   (3 & 01FH) / CELLL   
1A38                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1A38                VVNAME:   .SET   $   
1A38   C0 06 44 1A            DW   vvCODE,vvLINK   
1A3C                VVLINK:   .SET   $   
1A3C   03 4B 45 59            DB   3,"KEY"   
06C0                          .ORG   vvCODE   
06C0   00                     NOP      
06C1   CD A0 04               CALL   doLIST   
06C4                KEY1:        
06C4   B4 06                  DW   QKEY   
06C6   DE 07 C4 06            DW   QBRAN,KEY1   
06CA   DE 04                  DW   EXIT   
06CC                             ;   EMIT        ( c -- )
06CC                             ;               Send a character to the output device.
06CC                          ;*Macro unroll: mCOLON  4, 'EMIT', EMIT
06CC                          ;*Macro unroll:  mCODE 4, "EMIT", EMIT
06CC                          ALIGN   2   
06CC                EMIT:        
06CC                VVCODE:   .SET   $   
06CC                VVLEN:    .SET   (4 & 01FH) / CELLL   
1A2E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1A2E                VVNAME:   .SET   $   
1A2E   CC 06 3C 1A            DW   vvCODE,vvLINK   
1A32                VVLINK:   .SET   $   
1A32   04 45 4D 49 54         DB   4,"EMIT"   
06CC                          .ORG   vvCODE   
06CC   00                     NOP      
06CD   CD A0 04               CALL   doLIST   
06D0   D2 09 1E 08 DA 07 DE 04 DW   TEMIT,AT,EXECUTE,EXIT   
06D8                             ;   NUF?        ( -- t )
06D8                             ;               Return false if no input, else pause and if CR return true.
06D8                          ;*Macro unroll: mCOLON  4,'NUF?',NUFQ
06D8                          ;*Macro unroll:  mCODE 4, "NUF?", NUFQ
06D8                          ALIGN   2   
06D8                NUFQ:        
06D8                VVCODE:   .SET   $   
06D8                VVLEN:    .SET   (4 & 01FH) / CELLL   
1A24                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1A24                VVNAME:   .SET   $   
1A24   D8 06 32 1A            DW   vvCODE,vvLINK   
1A28                VVLINK:   .SET   $   
1A28   04 4E 55 46 3F         DB   4,"NUF?"   
06D8                          .ORG   vvCODE   
06D8   00                     NOP      
06D9   CD A0 04               CALL   doLIST   
06DC   B4 06 2A 09            DW   QKEY,DUPP   
06E0   DE 07 EE 06            DW   QBRAN,NUFQ1   
06E4   6E 09 C0 06 B2 04 0D 00 E8 01 DW   DDROP,KEY,DoLIT,CRR,EQUAL   
06EE                NUFQ1:       
06EE   DE 04                  DW   EXIT   
06F0                             ;   PACE        ( -- )
06F0                             ;               Send a pace character for the file downloading process.
06F0                          ;*Macro unroll: mCOLON  4,'PACE',PACE
06F0                          ;*Macro unroll:  mCODE 4, "PACE", PACE
06F0                          ALIGN   2   
06F0                PACE:        
06F0                VVCODE:   .SET   $   
06F0                VVLEN:    .SET   (4 & 01FH) / CELLL   
1A1A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1A1A                VVNAME:   .SET   $   
1A1A   F0 06 28 1A            DW   vvCODE,vvLINK   
1A1E                VVLINK:   .SET   $   
1A1E   04 50 41 43 45         DB   4,"PACE"   
06F0                          .ORG   vvCODE   
06F0   00                     NOP      
06F1   CD A0 04               CALL   doLIST   
06F4   B2 04 0B 00 CC 06 DE 04 DW   DOLIT,11,EMIT,EXIT   
06FC                             ;   SPACE       ( -- )
06FC                             ;               Send the blank character to the output device.
06FC                          ;*Macro unroll: mCOLON  5,'SPACE',SPACE
06FC                          ;*Macro unroll:  mCODE 5, "SPACE", SPACE
06FC                          ALIGN   2   
06FC                SPACE:       
06FC                VVCODE:   .SET   $   
06FC                VVLEN:    .SET   (5 & 01FH) / CELLL   
1A10                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1A10                VVNAME:   .SET   $   
1A10   FC 06 1E 1A            DW   vvCODE,vvLINK   
1A14                VVLINK:   .SET   $   
1A14   05 53 50 41 43 45      DB   5,"SPACE"   
06FC                          .ORG   vvCODE   
06FC   00                     NOP      
06FD   CD A0 04               CALL   doLIST   
0700   56 06 CC 06 DE 04      DW   BLANK,EMIT,EXIT   
0706                             ;   SPACES      ( +n -- )
0706                             ;               Send n spaces to the output device.
0706                          ;*Macro unroll: mCOLON  6,'SPACES',SPACES
0706                          ;*Macro unroll:  mCODE 6, "SPACES", SPACES
0706                          ALIGN   2   
0706                SPACES:      
0706                VVCODE:   .SET   $   
0706                VVLEN:    .SET   (6 & 01FH) / CELLL   
1A04                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1A04                VVNAME:   .SET   $   
1A04   06 07 14 1A            DW   vvCODE,vvLINK   
1A08                VVLINK:   .SET   $   
1A08   06 53 50 41 43 45 53   DB   6,"SPACES"   
0706                          .ORG   vvCODE   
0706   00                     NOP      
0707   CD A0 04               CALL   doLIST   
070A   52 09 DE 07 1C 07      DW   QDUP,QBRAN,SPACES2   
0710   B2 04 00 00 EE 04      DW   DoLIT,0,DoDO   
0716                SPACES1:      
0716   FC 06 10 05 16 07      DW   SPACE,DoLOOP,SPACES1   
071C                SPACES2:      
071C   DE 04                  DW   EXIT   
071E                             ;   TYPE        ( b u -- )
071E                             ;               Output u characters from b.
071E                             ;   TYPE        ( b u -- )
071E                             ;               Output u characters from b.
071E                          ;*Macro unroll: mCOLON	4,'TYPE',TYPEE
071E                          ;*Macro unroll:  mCODE 4, "TYPE", TYPEE
071E                          ALIGN   2   
071E                TYPEE:       
071E                VVCODE:   .SET   $   
071E                VVLEN:    .SET   (4 & 01FH) / CELLL   
19FA                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
19FA                VVNAME:   .SET   $   
19FA   1E 07 08 1A            DW   vvCODE,vvLINK   
19FE                VVLINK:   .SET   $   
19FE   04 54 59 50 45         DB   4,"TYPE"   
071E                          .ORG   vvCODE   
071E   00                     NOP      
071F   CD A0 04               CALL   doLIST   
0722   06 09                  DW   TOR   
0724   EE 07 34 07            DW   BRAN,TYPE2   
0728                TYPE1:       
0728   2A 09 36 08 CC 06      DW   DUPP,CAT,EMIT   
072E   B2 04 01 00 76 01      DW   DOLIT,1,PLUS   
0734                TYPE2:       
0734   68 05 28 07            DW   DONXT,TYPE1   
0738   32 09 DE 04            DW   DROP,EXIT   
073C                             ;   CR          ( -- )
073C                             ;               Output a carriage return and a line feed.
073C                          ;*Macro unroll: mCOLON	2,'CR',CR
073C                          ;*Macro unroll:  mCODE 2, "CR", CR
073C                          ALIGN   2   
073C                CR:          
073C                VVCODE:   .SET   $   
073C                VVLEN:    .SET   (2 & 01FH) / CELLL   
19F2                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
19F2                VVNAME:   .SET   $   
19F2   3C 07 FE 19            DW   vvCODE,vvLINK   
19F6                VVLINK:   .SET   $   
19F6   02 43 52               DB   2,"CR"   
073C                          .ORG   vvCODE   
073C   00                     NOP      
073D   CD A0 04               CALL   doLIST   
0740   B2 04 0D 00 CC 06 B2 04 0A 00 CC 06 DE 04 DW   DoLIT,CRR,EMIT,DoLIT,LFF,EMIT,EXIT   
074E                             ;   do$         ( -- a )
074E                             ;               Return the address of a compiled string.
074E                          ;*Macro unroll: mCOLON  COMPO+3,'do$',DOSTR
074E                          ;*Macro unroll:  mCODE COMPO+3, "do$", DOSTR
074E                          ALIGN   2   
074E                DOSTR:       
074E                VVCODE:   .SET   $   
074E                VVLEN:    .SET   (COMPO+3 & 01FH) / CELLL   
19CA                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
19CA                VVNAME:   .SET   $   
19CA   4E 07 F6 19            DW   vvCODE,vvLINK   
19CE                VVLINK:   .SET   $   
19CE   23 64 6F 24            DB   COMPO+3,"do$"   
074E                          .ORG   vvCODE   
074E   00                     NOP      
074F   CD A0 04               CALL   doLIST   
0752   18 09 42 08 18 09 82 08 76 01 DW   RFROM,RAT,RFROM,COUNT,PLUS   
075C   AC 08 06 09 3A 09 06 09 DE 04 DW   ALGND,TOR,SWAP,TOR,EXIT   
0766                             ;   $"|         ( -- a )
0766                             ;               Run time routine compiled by $". Return address of a compiled string.
0766                             ;   ."|         ( -- )
0766                             ;               Run time routine of ." . Output a compiled string.
0766                          ;*Macro unroll: mCOLON  COMPO+3,'.||',DOTQP
0766                          ;*Macro unroll:  mCODE COMPO+3, ".||", DOTQP
0766                          ALIGN   2   
0766                DOTQP:       
0766                VVCODE:   .SET   $   
0766                VVLEN:    .SET   (COMPO+3 & 01FH) / CELLL   
19A2                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
19A2                VVNAME:   .SET   $   
19A2   66 07 CE 19            DW   vvCODE,vvLINK   
19A6                VVLINK:   .SET   $   
19A6   23 2E 7C 7C            DB   COMPO+3,".||"   
0766                          .ORG   vvCODE   
0766   00                     NOP      
0767   CD A0 04               CALL   doLIST   
076A   4E 07 82 08 1E 07 DE 04 DW   DOSTR,COUNT,TYPEE,EXIT   
0772                             ;   .R          ( n +n -- )
0772                             ;               Display an integer in a field of n columns, right justified.
0772                             ;   U.R         ( u +n -- )
0772                             ;               Display an unsigned integer in n column, right justified.
0772                          ;*Macro unroll: mCOLON  3,'U.R',UDOTR
0772                          ;*Macro unroll:  mCODE 3, "U.R", UDOTR
0772                          ALIGN   2   
0772                UDOTR:       
0772                VVCODE:   .SET   $   
0772                VVLEN:    .SET   (3 & 01FH) / CELLL   
199A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
199A                VVNAME:   .SET   $   
199A   72 07 A6 19            DW   vvCODE,vvLINK   
199E                VVLINK:   .SET   $   
199E   03 55 2E 52            DB   3,"U.R"   
0772                          .ORG   vvCODE   
0772   00                     NOP      
0773   CD A0 04               CALL   doLIST   
0776   06 09 BC 05 EE 05 12 06 DW   TOR,BDIGS,DIGS,EDIGS   
077E   18 09 46 09 CE 01      DW   RFROM,OVER,SUBB   
0784   06 07 1E 07 DE 04      DW   SPACES,TYPEE,EXIT   
078A                             ;   U.          ( u -- )
078A                             ;               Display an unsigned integer in free format.
078A                          ;*Macro unroll: mCOLON  2,'U.',UDOT
078A                          ;*Macro unroll:  mCODE 2, "U.", UDOT
078A                          ALIGN   2   
078A                UDOT:        
078A                VVCODE:   .SET   $   
078A                VVLEN:    .SET   (2 & 01FH) / CELLL   
1992                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1992                VVNAME:   .SET   $   
1992   8A 07 9E 19            DW   vvCODE,vvLINK   
1996                VVLINK:   .SET   $   
1996   02 55 2E               DB   2,"U."   
078A                          .ORG   vvCODE   
078A   00                     NOP      
078B   CD A0 04               CALL   doLIST   
078E   BC 05 EE 05 12 06      DW   BDIGS,DIGS,EDIGS   
0794   FC 06 1E 07 DE 04      DW   SPACE,TYPEE,EXIT   
079A                             ;   .           ( w -- )
079A                             ;               Display an integer in free format, preceeded by a space.
079A                          ;*Macro unroll: mCOLON  1,'.',DOT
079A                          ;*Macro unroll:  mCODE 1, ".", DOT
079A                          ALIGN   2   
079A                DOT:         
079A                VVCODE:   .SET   $   
079A                VVLEN:    .SET   (1 & 01FH) / CELLL   
198C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
198C                VVNAME:   .SET   $   
198C   9A 07 96 19            DW   vvCODE,vvLINK   
1990                VVLINK:   .SET   $   
1990   01 2E                  DB   1,"."   
079A                          .ORG   vvCODE   
079A   00                     NOP      
079B   CD A0 04               CALL   doLIST   
079E   FA 09 1E 08 B2 04 0A 00 68 01 DW   BASE,AT,DOLIT,10,XORR   ;?decimal
07A8   DE 07 B0 07            DW   QBRAN,DOT1   
07AC   8A 07 DE 04            DW   UDOT,EXIT   ;no, display unsigned
07B0                DOT1:        
07B0   24 06 FC 06 1E 07 DE 04 DW   STR,SPACE,TYPEE,EXIT   ;yes, display signed
07B8                             ;   .(          ( -- )
07B8                             ;               Output following string up to next ) .
07B8                             ;   ?           ( a -- )
07B8                             ;               Display the contents in a memory cell.
07B8                             ; Terminal response
07B8                             ;   ^H          ( bot eot cur -- bot eot cur )
07B8                             ;               Backup the cursor by one character.
07B8                             ;   TAP         ( bot eot cur c -- bot eot cur )
07B8                             ;               Accept and echo the key stroke and bump the cursor.
07B8                             ;   kTAP        ( bot eot cur c -- bot eot cur )
07B8                             ;               Process a key stroke, CR or backspace.
07B8                             ;   accept      ( b u -- b u )
07B8                             ;               Accept characters to input buffer. Return with actual count.
07B8                             ;   EXPECT      ( b u -- )
07B8                             ;               Accept input stream and store count in SPAN.
07B8                             ;   QUERY       ( -- )
07B8                             ;               Accept input stream to terminal input buffer.
07B8                          ;*Macro unroll: mCOLON	4,'COLD',COLD
07B8                          ;*Macro unroll:  mCODE 4, "COLD", COLD
07B8                          ALIGN   2   
07B8                COLD:        
07B8                VVCODE:   .SET   $   
07B8                VVLEN:    .SET   (4 & 01FH) / CELLL   
1982                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1982                VVNAME:   .SET   $   
1982   B8 07 90 19            DW   vvCODE,vvLINK   
1986                VVLINK:   .SET   $   
1986   04 43 4F 4C 44         DB   4,"COLD"   
07B8                          .ORG   vvCODE   
07B8   00                     NOP      
07B9   CD A0 04               CALL   doLIST   
07BC                             ; DW	SPZero,SPStore,RPZero,RPStore
07BC                             ; DW	TickINIT_IO,EXECUTE,TickBoot,EXECUTE
07BC   82 06                  DW   STOIO   
07BE                             ; DW	DOLIT, 65, EMIT
07BE   B2 04 C8 07 82 08 1E 07 DW   DOLIT,HELLO,COUNT,TYPEE   
07C6   D8 07                  DW   QUIT   
07C8   0F 48 65 6C 6C 6F 20 46 6F 72 74 68 21 20 0D 0A HELLO:   .PSTR   "Hello Forth! \r\n"   
07D8                          ;*Macro unroll: mCODE  4, 'QUIT', QUIT
07D8                          ALIGN   2   
07D8                QUIT:        
07D8                VVCODE:   .SET   $   
07D8                VVLEN:    .SET   (4 & 01FH) / CELLL   
1978                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1978                VVNAME:   .SET   $   
1978   D8 07 86 19            DW   vvCODE,vvLINK   
197C                VVLINK:   .SET   $   
197C   04 51 55 49 54         DB   4,"QUIT"   
07D8                          .ORG   vvCODE   
07D8   76                     HALT      
07D9                             ;   EXECUTE	( i*x xt -- j*x )		\ CORE
07D9                             ;		Perform the semantics indentified by execution token, xt.
07D9                          ;*Macro unroll: mCODE	7,'EXECUTE', EXECUTE
07D9                          ALIGN   2   
07DA                EXECUTE:      
07DA                VVCODE:   .SET   $   
07DA                VVLEN:    .SET   (7 & 01FH) / CELLL   
196C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
196C                VVNAME:   .SET   $   
196C   DA 07 7C 19            DW   vvCODE,vvLINK   
1970                VVLINK:   .SET   $   
1970   07 45 58 45 43 55 54 45 DB   7,"EXECUTE"   
07DA                          .ORG   vvCODE   
07DA   60                     LD   H,B   
07DB   69                     LD   L,C   
07DC   C1                     POP   BC   
07DD   E9                     JP   (HL)   
07DE                             ; 
07DE                             ;   0BRAN	( flag -- )
07DE                             ;		BRAN if flag is zero.
07DE                          ;*Macro unroll: mCODE	COMPO+7,'?branch', QBRAN
07DE                          ALIGN   2   
07DE                QBRAN:       
07DE                VVCODE:   .SET   $   
07DE                VVLEN:    .SET   (COMPO+7 & 01FH) / CELLL   
1940                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1940                VVNAME:   .SET   $   
1940   DE 07 70 19            DW   vvCODE,vvLINK   
1944                VVLINK:   .SET   $   
1944   27 3F 62 72 61 6E 63 68 DB   COMPO+7,"?branch"   
07DE                          .ORG   vvCODE   
07DE   78                     LD   A,B   ; 4t
07DF   B1                     OR   C   ; 4t
07E0   C1                     POP   BC   ;10t
07E1   CA EE 07               JP   Z,BRAN   ;10/7t a fast dec is ok, only
07E4   13                     INC   DE   ; 6t yes,continue past the BRAN offset
07E5   13                     INC   DE   ; 6t
07E6                          ;*Macro unroll: 	mNEXT
07E6   EB                     EX   DE,HL   
07E7                          ;*Macro unroll:  mNEXTHL                         ; 34t
07E7   5E                     LD   E,(HL)   ; 34t
07E8   23                     INC   HL   
07E9   56                     LD   D,(HL)   
07EA   23                     INC   HL   
07EB   EB                     EX   DE,HL   
07EC   E9                     JP   (HL)   
07ED                             ;   BRAN	( -- )
07ED                             ;		BRAN to an inline address.
07ED                          ;*Macro unroll: mCODE	COMPO+6,'branch', BRAN
07ED                          ALIGN   2   
07EE                BRAN:        
07EE                VVCODE:   .SET   $   
07EE                VVLEN:    .SET   (COMPO+6 & 01FH) / CELLL   
1914                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1914                VVNAME:   .SET   $   
1914   EE 07 44 19            DW   vvCODE,vvLINK   
1918                VVLINK:   .SET   $   
1918   26 62 72 61 6E 63 68   DB   COMPO+6,"branch"   
07EE                          .ORG   vvCODE   
07EE   1A                     LD   A,(DE)   ; 7t go back to the loop
07EF   6F                     LD   L,A   ; 4t
07F0   13                     INC   DE   ; 6t
07F1   1A                     LD   A,(DE)   ; 7t
07F2   67                     LD   H,A   ; 4t
07F3                          ;*Macro unroll: 	mNEXTHL
07F3   5E                     LD   E,(HL)   
07F4   23                     INC   HL   
07F5   56                     LD   D,(HL)   
07F6   23                     INC   HL   
07F7   EB                     EX   DE,HL   
07F8   E9                     JP   (HL)   
07F9                             ; 
07F9                             ;   TYPECSTR    ( cstr -- )
07F9                             ;   Similar to TYPE but prints C null terminated strings
07F9                          ;*Macro unroll: mCODE	3,'TYPESZ',TypeCStr
07F9                          ALIGN   2   
07FA                TYPECSTR:      
07FA                VVCODE:   .SET   $   
07FA                VVLEN:    .SET   (3 & 01FH) / CELLL   
190C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
190C                VVNAME:   .SET   $   
190C   FA 07 18 19            DW   vvCODE,vvLINK   
1910                VVLINK:   .SET   $   
1910   03 54 59 50 45 53 5A   DB   3,"TYPESZ"   
07FA                          .ORG   vvCODE   
07FA   60                     LD   H,B   
07FB   69                     LD   L,C   
07FC   CD EF 00               CALL   PRINTSZ   
07FF   C1                     POP   BC   
0800                          ;*Macro unroll:  mNEXT
0800   EB                     EX   DE,HL   
0801                          ;*Macro unroll:  mNEXTHL                         ; 34t
0801   5E                     LD   E,(HL)   ; 34t
0802   23                     INC   HL   
0803   56                     LD   D,(HL)   
0804   23                     INC   HL   
0805   EB                     EX   DE,HL   
0806   E9                     JP   (HL)   
0807                             ;   THROWX    ( cstr -- )
0807                             ;   Prints string message and returns TODO: restart Forth interpreter QUIT
0807                          ;*Macro unroll: mCOLON	5,'THROWX',THROWX
0807                          ;*Macro unroll:  mCODE 5, "THROWX", THROWX
0807                          ALIGN   2   
0808                THROWX:      
0808                VVCODE:   .SET   $   
0808                VVLEN:    .SET   (5 & 01FH) / CELLL   
1902                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1902                VVNAME:   .SET   $   
1902   08 08 10 19            DW   vvCODE,vvLINK   
1906                VVLINK:   .SET   $   
1906   05 54 48 52 4F 57 58   DB   5,"THROWX"   
0808                          .ORG   vvCODE   
0808   00                     NOP      
0809   CD A0 04               CALL   doLIST   
080C   FA 07 DE 04            DW   TypeCStr,EXIT   
0810                             ;   !           ( w a -- )
0810                             ;               Pop the data stack to memory.
0810                          ;*Macro unroll: mCODE	1,'!',Store
0810                          ALIGN   2   
0810                STORE:       
0810                VVCODE:   .SET   $   
0810                VVLEN:    .SET   (1 & 01FH) / CELLL   
18FC                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
18FC                VVNAME:   .SET   $   
18FC   10 08 06 19            DW   vvCODE,vvLINK   
1900                VVLINK:   .SET   $   
1900   01 21                  DB   1,"!"   
0810                          .ORG   vvCODE   
0810   60                     LD   H,B   
0811   69                     LD   L,C   
0812   C1                     POP   BC   
0813   71                     LD   (HL),C   
0814   23                     INC   HL   
0815   70                     LD   (HL),B   
0816   C1                     POP   BC   
0817                          ;*Macro unroll: 	mNEXT
0817   EB                     EX   DE,HL   
0818                          ;*Macro unroll:  mNEXTHL                         ; 34t
0818   5E                     LD   E,(HL)   ; 34t
0819   23                     INC   HL   
081A   56                     LD   D,(HL)   
081B   23                     INC   HL   
081C   EB                     EX   DE,HL   
081D   E9                     JP   (HL)   
081E                             ;   @           ( a -- w )
081E                             ;               Push memory location to the data stack.
081E                          ;*Macro unroll: mCODE	1,'@', AT
081E                          ALIGN   2   
081E                AT:          
081E                VVCODE:   .SET   $   
081E                VVLEN:    .SET   (1 & 01FH) / CELLL   
18F6                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
18F6                VVNAME:   .SET   $   
18F6   1E 08 00 19            DW   vvCODE,vvLINK   
18FA                VVLINK:   .SET   $   
18FA   01 40                  DB   1,"@"   
081E                          .ORG   vvCODE   
081E   60                     LD   H,B   
081F   69                     LD   L,C   
0820   4E                     LD   C,(HL)   
0821   23                     INC   HL   
0822   46                     LD   B,(HL)   
0823                          ;*Macro unroll: 	mNEXT
0823   EB                     EX   DE,HL   
0824                          ;*Macro unroll:  mNEXTHL                         ; 34t
0824   5E                     LD   E,(HL)   ; 34t
0825   23                     INC   HL   
0826   56                     LD   D,(HL)   
0827   23                     INC   HL   
0828   EB                     EX   DE,HL   
0829   E9                     JP   (HL)   
082A                             ;   C!          ( c b -- )
082A                             ;               Pop the data stack to byte memory.
082A                          ;*Macro unroll: mCODE	2,'C!',CStore
082A                          ALIGN   2   
082A                CSTORE:      
082A                VVCODE:   .SET   $   
082A                VVLEN:    .SET   (2 & 01FH) / CELLL   
18EE                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
18EE                VVNAME:   .SET   $   
18EE   2A 08 FA 18            DW   vvCODE,vvLINK   
18F2                VVLINK:   .SET   $   
18F2   02 43 21               DB   2,"C!"   
082A                          .ORG   vvCODE   
082A   60                     LD   H,B   
082B   69                     LD   L,C   
082C   C1                     POP   BC   
082D   71                     LD   (HL),C   
082E   C1                     POP   BC   
082F                          ;*Macro unroll: 	mNEXT
082F   EB                     EX   DE,HL   
0830                          ;*Macro unroll:  mNEXTHL                         ; 34t
0830   5E                     LD   E,(HL)   ; 34t
0831   23                     INC   HL   
0832   56                     LD   D,(HL)   
0833   23                     INC   HL   
0834   EB                     EX   DE,HL   
0835   E9                     JP   (HL)   
0836                             ;   C@          ( b -- c )
0836                             ;               Push byte memory location to the data stack.
0836                          ;*Macro unroll: mCODE	2,'C@',CAT
0836                          ALIGN   2   
0836                CAT:         
0836                VVCODE:   .SET   $   
0836                VVLEN:    .SET   (2 & 01FH) / CELLL   
18E6                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
18E6                VVNAME:   .SET   $   
18E6   36 08 F2 18            DW   vvCODE,vvLINK   
18EA                VVLINK:   .SET   $   
18EA   02 43 40               DB   2,"C@"   
0836                          .ORG   vvCODE   
0836   0A                     LD   A,(BC)   
0837   4F                     LD   C,A   
0838   06 00                  LD   B,0   
083A                          ;*Macro unroll: 	mNEXT
083A   EB                     EX   DE,HL   
083B                          ;*Macro unroll:  mNEXTHL                         ; 34t
083B   5E                     LD   E,(HL)   ; 34t
083C   23                     INC   HL   
083D   56                     LD   D,(HL)   
083E   23                     INC   HL   
083F   EB                     EX   DE,HL   
0840   E9                     JP   (HL)   
0841                             ;   R@          ( -- w )
0841                             ;               Copy top of return stack to the data stack.
0841                          ;*Macro unroll: mCODE	COMPO+2,'R@',RAT
0841                          ALIGN   2   
0842                RAT:         
0842                VVCODE:   .SET   $   
0842                VVLEN:    .SET   (COMPO+2 & 01FH) / CELLL   
18BE                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
18BE                VVNAME:   .SET   $   
18BE   42 08 EA 18            DW   vvCODE,vvLINK   
18C2                VVLINK:   .SET   $   
18C2   22 52 40               DB   COMPO+2,"R@"   
0842                          .ORG   vvCODE   
0842   C5                     PUSH   BC   
0843   DD 4E 00               LD   C,(IX+0)   
0846   DD 46 01               LD   B,(IX+1)   
0849                          ;*Macro unroll: 	mNEXT
0849   EB                     EX   DE,HL   
084A                          ;*Macro unroll:  mNEXTHL                         ; 34t
084A   5E                     LD   E,(HL)   ; 34t
084B   23                     INC   HL   
084C   56                     LD   D,(HL)   
084D   23                     INC   HL   
084E   EB                     EX   DE,HL   
084F   E9                     JP   (HL)   
0850                             ;   RP@         ( -- a )
0850                             ;               Push the current RP to the data stack
0850                          ;*Macro unroll: mCODE	COMPO+3, 'rp@', RPAT
0850                          ALIGN   2   
0850                RPAT:        
0850                VVCODE:   .SET   $   
0850                VVLEN:    .SET   (COMPO+3 & 01FH) / CELLL   
1896                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1896                VVNAME:   .SET   $   
1896   50 08 C2 18            DW   vvCODE,vvLINK   
189A                VVLINK:   .SET   $   
189A   23 72 70 40            DB   COMPO+3,"rp@"   
0850                          .ORG   vvCODE   
0850   C5                     DB   0C5h   ; PUSH	BC	;11t
0851   DD E5                  DB   0DDh,0E5h   ; PUSH IX	;15t
0853   C1                     DB   0C1h   ; POP	BC	;10t
0854                          ;*Macro unroll:  mNEXT
0854   EB                     EX   DE,HL   
0855                          ;*Macro unroll:  mNEXTHL                         ; 34t
0855   5E                     LD   E,(HL)   ; 34t
0856   23                     INC   HL   
0857   56                     LD   D,(HL)   
0858   23                     INC   HL   
0859   EB                     EX   DE,HL   
085A   E9                     JP   (HL)   
085B                             ;   RP!         ( a -- )
085B                             ;               Set the return stack pointer.
085B                          ;*Macro unroll: mCODE	COMPO+3,'rp!',RPSTO
085B                          ALIGN   2   
085C                RPSTO:       
085C                VVCODE:   .SET   $   
085C                VVLEN:    .SET   (COMPO+3 & 01FH) / CELLL   
186E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
186E                VVNAME:   .SET   $   
186E   5C 08 9A 18            DW   vvCODE,vvLINK   
1872                VVLINK:   .SET   $   
1872   23 72 70 21            DB   COMPO+3,"rp!"   
085C                          .ORG   vvCODE   
085C   C5                     DB   0C5h   ; PUSH	BC	;11t
085D   DD E1                  DB   0DDh,0E1h   ; POP IX	;14t
085F   C1                     DB   0C1h   ; POP	BC	;10t
0860                          ;*Macro unroll: 	mNEXT
0860   EB                     EX   DE,HL   
0861                          ;*Macro unroll:  mNEXTHL                         ; 34t
0861   5E                     LD   E,(HL)   ; 34t
0862   23                     INC   HL   
0863   56                     LD   D,(HL)   
0864   23                     INC   HL   
0865   EB                     EX   DE,HL   
0866   E9                     JP   (HL)   
0867                             ;   SP@         ( -- a )
0867                             ;               Push the current data stack pointer.
0867                          ;*Macro unroll: mCODE	3, 'sp@', SPAT
0867                          ALIGN   2   
0868                SPAT:        
0868                VVCODE:   .SET   $   
0868                VVLEN:    .SET   (3 & 01FH) / CELLL   
1866                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1866                VVNAME:   .SET   $   
1866   68 08 72 18            DW   vvCODE,vvLINK   
186A                VVLINK:   .SET   $   
186A   03 73 70 40            DB   3,"sp@"   
0868                          .ORG   vvCODE   
0868   C5                     DB   0C5h   ; PUSH	BC	;11t
0869   21                     DB   021h   ; LD	HL,0	;10t
086A   00 00                  DW   0   
086C   39                     DB   039h   ; ADD	HL,SP	;11t
086D   44                     DB   044h   ; LD	B,H	; 4t
086E   4D                     DB   04Dh   ; LD	C,L	; 4t
086F                          ;*Macro unroll: 	mNEXT
086F   EB                     EX   DE,HL   
0870                          ;*Macro unroll:  mNEXTHL                         ; 34t
0870   5E                     LD   E,(HL)   ; 34t
0871   23                     INC   HL   
0872   56                     LD   D,(HL)   
0873   23                     INC   HL   
0874   EB                     EX   DE,HL   
0875   E9                     JP   (HL)   
0876                             ;   SP!         ( a -- )
0876                             ;               Set the data stack pointer.
0876                          ;*Macro unroll: mCODE	3,'sp!',SPSTO
0876                          ALIGN   2   
0876                SPSTO:       
0876                VVCODE:   .SET   $   
0876                VVLEN:    .SET   (3 & 01FH) / CELLL   
185E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
185E                VVNAME:   .SET   $   
185E   76 08 6A 18            DW   vvCODE,vvLINK   
1862                VVLINK:   .SET   $   
1862   03 73 70 21            DB   3,"sp!"   
0876                          .ORG   vvCODE   
0876   60                     DB   060h   ; LD	H,B	; 4t
0877   69                     DB   069h   ; LD	L,C	; 4t
0878   F9                     DB   0F9h   ; LD	SP,HL	; 6t
0879   C1                     DB   0C1h   ; POP	BC	;10t
087A                          ;*Macro unroll: 	mNEXT
087A   EB                     EX   DE,HL   
087B                          ;*Macro unroll:  mNEXTHL                         ; 34t
087B   5E                     LD   E,(HL)   ; 34t
087C   23                     INC   HL   
087D   56                     LD   D,(HL)   
087E   23                     INC   HL   
087F   EB                     EX   DE,HL   
0880   E9                     JP   (HL)   
0881                             ;   +!          ( n a -- )
0881                             ;               Add n to the contents at address a.
0881                             ;   2!          ( d a -- )
0881                             ;               Store the double integer to address a.
0881                             ;   2@          ( a -- d )
0881                             ;               AT double integer from address a.
0881                             ;   COUNT       ( b -- b +n )
0881                             ;               Return count byte of a string and add 1 to byte address.
0881                          ;*Macro unroll: mCOLON  5,'COUNT',COUNT
0881                          ;*Macro unroll:  mCODE 5, "COUNT", COUNT
0881                          ALIGN   2   
0882                COUNT:       
0882                VVCODE:   .SET   $   
0882                VVLEN:    .SET   (5 & 01FH) / CELLL   
1854                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1854                VVNAME:   .SET   $   
1854   82 08 62 18            DW   vvCODE,vvLINK   
1858                VVLINK:   .SET   $   
1858   05 43 4F 55 4E 54      DB   5,"COUNT"   
0882                          .ORG   vvCODE   
0882   00                     NOP      
0883   CD A0 04               CALL   doLIST   
0886   2A 09 B2 04 01 00 76 01 DW   DUPP,DOLIT,1,PLUS   
088E   3A 09 36 08 DE 04      DW   SWAP,CAT,EXIT   
0894                             ;   HERE        ( -- a )
0894                             ;               Return the top of the code dictionary.
0894                          ;*Macro unroll: mCOLON  4,'HERE',HERE
0894                          ;*Macro unroll:  mCODE 4, "HERE", HERE
0894                          ALIGN   2   
0894                HERE:        
0894                VVCODE:   .SET   $   
0894                VVLEN:    .SET   (4 & 01FH) / CELLL   
184A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
184A                VVNAME:   .SET   $   
184A   94 08 58 18            DW   vvCODE,vvLINK   
184E                VVLINK:   .SET   $   
184E   04 48 45 52 45         DB   4,"HERE"   
0894                          .ORG   vvCODE   
0894   00                     NOP      
0895   CD A0 04               CALL   doLIST   
0898   5A 0A 1E 08 DE 04      DW   CP,AT,EXIT   
089E                             ;   PAD         ( -- a )
089E                             ;               Return the address of a temporary buffer.
089E                          ;*Macro unroll: mCOLON  3,'PAD',PAD
089E                          ;*Macro unroll:  mCODE 3, "PAD", PAD
089E                          ALIGN   2   
089E                PAD:         
089E                VVCODE:   .SET   $   
089E                VVLEN:    .SET   (3 & 01FH) / CELLL   
1842                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1842                VVNAME:   .SET   $   
1842   9E 08 4E 18            DW   vvCODE,vvLINK   
1846                VVLINK:   .SET   $   
1846   03 50 41 44            DB   3,"PAD"   
089E                          .ORG   vvCODE   
089E   00                     NOP      
089F   CD A0 04               CALL   doLIST   
08A2   94 08 B2 04 50 00 76 01 DE 04 DW   HERE,DOLIT,80,PLUS,EXIT   
08AC                             ;   TIB         ( -- a )
08AC                             ;               Return the address of the terminal input buffer.
08AC                             ;   @EXECUTE    ( a -- )
08AC                             ;               Execute vector stored in address a.
08AC                             ;   CMOVE       ( b1 b2 u -- )
08AC                             ;               Copy u bytes from b1 to b2.
08AC                             ;   FILL        ( b u c -- )
08AC                             ;               Fill u bytes of character c to area beginning at b.
08AC                             ;   -TRAILING   ( b u -- b u )
08AC                             ;               Adjust the count to eliminate trailing white space.
08AC                             ;   PACK$       ( b u a -- a )
08AC                             ;               Build a counted string with u characters from b. Null fill.
08AC                             ;   ALIGNED     ( b -- a )
08AC                             ;               Align address to the cell boundary.
08AC                          ;*Macro unroll: mCOLON  7,'ALIGNED', ALGND
08AC                          ;*Macro unroll:  mCODE 7, "ALIGNED", ALGND
08AC                          ALIGN   2   
08AC                ALGND:       
08AC                VVCODE:   .SET   $   
08AC                VVLEN:    .SET   (7 & 01FH) / CELLL   
1836                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1836                VVNAME:   .SET   $   
1836   AC 08 46 18            DW   vvCODE,vvLINK   
183A                VVLINK:   .SET   $   
183A   07 41 4C 49 47 4E 45 44 DB   7,"ALIGNED"   
08AC                          .ORG   vvCODE   
08AC   00                     NOP      
08AD   CD A0 04               CALL   doLIST   
08B0   2A 09 B2 04 00 00 B2 04 02 00 DW   DUPP,DOLIT,0,DOLIT,CELLL   
08BA   8E 02 32 09 2A 09      DW   UMMOD,DROP,DUPP   
08C0   DE 07 CC 08            DW   QBRAN,ALGN1   
08C4   B2 04 02 00 3A 09 CE 01 DW   DoLIT,CELLL,SWAP,SUBB   
08CC                ALGN1:       
08CC   76 01 DE 04            DW   PLUS,EXIT   
08D0   54 79 70 65 20 73 6F 6D 65 74 68 69 6E 67 0D 0A 00 GREETING:   .CSTR   "Type something\r\n"   
08E1                             ; ERR_ABORT:	    .cstr	"ABORT" ;-01
08E1                             ; ERR_ABORTDQ:    .cstr	"ABORT"";-02
08E1                             ; ERR_STACKOF:    .cstr	"stack overflow";-03
08E1                             ; ERR_STACKUF:	.cstr	"stack underflow"       ;-04
08E1                             ; ERR_RETOF:    	.cstr	"return stack overflow" ;-05
08E1                             ; ERR_RETUF:     	.cstr	"return stack underflow";-06
08E1                             ; ERR_DONEST:   	.cstr	"do-loops nested too deeply during execution"   ;-07
08E1                             ; ERR_DICTOF     	.cstr	"dictionary overflow"   ;-08
08E1                             ; ERR_MEMADDR   	.cstr	"invalid memory address";-09
08E1   64 69 76 69 73 69 6F 6E 20 62 79 20 7A 65 72 6F 00 ERR_DIVZERO:   .CSTR   "division by zero"   ;-10
08F2   72 65 73 75 6C 74 20 6F 75 74 20 6F 66 20 72 61 6E 67 65 00 ERR_OUTOFRANGE:   .CSTR   "result out of range"   ;-11
0906                             ; ERR_MISMATCH    .cstr	"argument type mismatch";-12
0906                             ; ERR_UNDEFINED 	.cstr	"undefined word";-13
0906                             ; ERR_COMPONLY	.cstr	"interpreting a compile-only word"      ;-14
0906                             ; ERR_FORGET  	.cstr	"invalid FORGET";-15
0906                             ; ERR_ZEROSTR   	.cstr	"attempt to use zero-length string as a name"   ;-16
0906                             ; ERR_FORMAT  	.cstr	"pictured numeric output string overflow"       ;-17
0906                             ; ERR_PARSE     	.cstr	"parsed string overflow";-18
0906                             ; ERR_TOOLONG    	.cstr	"definition name too long"      ;-19
0906                             ; ERR_READONLY	.cstr	"write to a read-only location" ;-20
0906                             ; ERR_UNSUPPORTED .cstr	"unsupported operation" ;-21
0906                             ; ERR_UNSTRUCT	.cstr	"control structure mismatch"    ;-22
0906                             ; ERR_ADDRALIGN 	.cstr	"address alignment exception"   ;-23
0906                             ; ERR_NUMERIC     .cstr	"invalid numeric argument"      ;-24
0906                             ; ERR_IMBALANCE   .cstr	"return stack imbalance";-25
0906                             ; ERR_LOOPPARAM   .cstr	"loop parameters unavailable"   ;-26
0906                             ; ERR_RECURSION   .cstr	"invalid recursion"     ;-27
0906                             ; ERR_INTERRUPT   .cstr	"user interrupt";-28
0906                             ; ERR_NESTING    	.cstr	"compiler nesting"      ;-29
0906                             ; ERR_OBSOLETE    .cstr	"obsolescent feature"   ;-30
0906                             ; ERR_NONCREATE   .cstr	">BODY used on non-CREATEd definition"  ;-31
0906                             ; ERR_NAME    	.cstr	"invalid name argument (e.g., TO xxx)"  ;-32
0906                             ; ERR_BLOCKREAD   .cstr	"block read exception"  ;-33
0906                             ; ERR_BLOCKWRITE  .cstr	"block write exception" ;-34
0906                             ; ERR_BLOCKNUM    .cstr	"invalid block number"  ;-35
0906                             ; ERR_FILEPOS    	.cstr	"invalid file position" ;-36
0906                             ; ERR_FILEIO    	.cstr	"file I/O exception"    ;-37
0906                             ; ERR_FILEEXIST   .cstr	"non-existent file"     ;-38
0906                             ; ERR_FILEEOF    	.cstr	"unexpected end of file";-39
0906                             ; ERR_BASE    	.cstr	"invalid BASE for floating point conversion"    ;-40
0906                             ; ERR_PRECISION   .cstr	"loss of precision"     ;-41
0906                             ; ERR_FDIVZERO    .cstr	"floating-point divide by zero" ;-42
0906                             ; ERR_FRANGE    	.cstr	"floating-point result out of range"    ;-43
0906                             ; ERR_FSOF    	.cstr	"floating-point stack overflow" ;-44
0906                             ; ERR_FSUF    	.cstr	"floating-point stack underflow";-45
0906                             ; ERR_FINVALID    .cstr	"floating-point invalid argument"       ;-46
0906                             ; ERR_WORDLIST    .cstr	"compilation word list deleted" ;-47
0906                             ; ERR_POSTPONE    .cstr	"invalid POSTPONE"      ;-48
0906                             ; ERR_SEARCHOF    .cstr	"search-order overflow" ;-49
0906                             ; ERR_SEARCHUF    .cstr	"search-order underflow";-50
0906                             ; ERR_WORDLISTCHG .cstr	"compilation word list changed" ;-51
0906                             ; ERR_CONTROLOF   .cstr	"control-flow stack overflow"   ;-52
0906                             ; ERR_CONTROLUF   .cstr	"exception stack overflow"      ;-53
0906                             ; ERR_FPUF    	.cstr	"floating-point underflow"      ;-54
0906                             ; ERR_FPFAULT    	.cstr	"floating-point unidentified fault"     ;-55
0906                             ; ERR_QUIT    	.cstr	"QUIT"  ;-56
0906                             ; ERR_IO    	    .cstr	"exception in sending or receiving a character" ;-57
0906                             ; ERR_IF    	    .cstr	"[IF], [ELSE], or [THEN] exception"     ;-58
0906                             ;   >R          ( w -- )
0906                             ;               Push the data stack to the return stack.
0906                          ;*Macro unroll: mCODE	COMPO+2, '>R', ToR
0906                          ALIGN   2   
0906                TOR:         
0906                VVCODE:   .SET   $   
0906                VVLEN:    .SET   (COMPO+2 & 01FH) / CELLL   
180E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
180E                VVNAME:   .SET   $   
180E   06 09 3A 18            DW   vvCODE,vvLINK   
1812                VVLINK:   .SET   $   
1812   22 3E 52               DB   COMPO+2,">R"   
0906                          .ORG   vvCODE   
0906   DD 2B                  DEC   IX   
0908   DD 70 00               LD   (IX+0),B   
090B   DD 2B                  DEC   IX   
090D   DD 71 00               LD   (IX+0),C   
0910   C1                     POP   BC   
0911                          ;*Macro unroll: 	mNEXT
0911   EB                     EX   DE,HL   
0912                          ;*Macro unroll:  mNEXTHL                         ; 34t
0912   5E                     LD   E,(HL)   ; 34t
0913   23                     INC   HL   
0914   56                     LD   D,(HL)   
0915   23                     INC   HL   
0916   EB                     EX   DE,HL   
0917   E9                     JP   (HL)   
0918                             ;   R>          ( -- w )
0918                             ;               Pop the return stack to the data stack.
0918                          ;*Macro unroll: mCODE	COMPO+2, 'R>', RFrom
0918                          ALIGN   2   
0918                RFROM:       
0918                VVCODE:   .SET   $   
0918                VVLEN:    .SET   (COMPO+2 & 01FH) / CELLL   
17E6                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
17E6                VVNAME:   .SET   $   
17E6   18 09 12 18            DW   vvCODE,vvLINK   
17EA                VVLINK:   .SET   $   
17EA   22 52 3E               DB   COMPO+2,"R>"   
0918                          .ORG   vvCODE   
0918   C5                     PUSH   BC   
0919   DD 4E 00               LD   C,(IX+0)   
091C   DD 23                  INC   IX   
091E   DD 46 00               LD   B,(IX+0)   
0921   DD 23                  INC   IX   
0923                          ;*Macro unroll: 	mNEXT
0923   EB                     EX   DE,HL   
0924                          ;*Macro unroll:  mNEXTHL                         ; 34t
0924   5E                     LD   E,(HL)   ; 34t
0925   23                     INC   HL   
0926   56                     LD   D,(HL)   
0927   23                     INC   HL   
0928   EB                     EX   DE,HL   
0929   E9                     JP   (HL)   
092A                             ;   DUP         ( w -- w w )
092A                             ;               Duplicate the top stack item.
092A                          ;*Macro unroll: mCODE	3, 'DUP', DUPP
092A                          ALIGN   2   
092A                DUPP:        
092A                VVCODE:   .SET   $   
092A                VVLEN:    .SET   (3 & 01FH) / CELLL   
17DE                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
17DE                VVNAME:   .SET   $   
17DE   2A 09 EA 17            DW   vvCODE,vvLINK   
17E2                VVLINK:   .SET   $   
17E2   03 44 55 50            DB   3,"DUP"   
092A                          .ORG   vvCODE   
092A   C5                     PUSH   BC   
092B                          ;*Macro unroll:  mNEXT
092B   EB                     EX   DE,HL   
092C                          ;*Macro unroll:  mNEXTHL                         ; 34t
092C   5E                     LD   E,(HL)   ; 34t
092D   23                     INC   HL   
092E   56                     LD   D,(HL)   
092F   23                     INC   HL   
0930   EB                     EX   DE,HL   
0931   E9                     JP   (HL)   
0932                             ;   DROP	( x -- )			\ CORE
0932                             ;		Discard top stack item.
0932                          ;*Macro unroll: mCODE	4, 'DROP', DROP
0932                          ALIGN   2   
0932                DROP:        
0932                VVCODE:   .SET   $   
0932                VVLEN:    .SET   (4 & 01FH) / CELLL   
17D4                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
17D4                VVNAME:   .SET   $   
17D4   32 09 E2 17            DW   vvCODE,vvLINK   
17D8                VVLINK:   .SET   $   
17D8   04 44 52 4F 50         DB   4,"DROP"   
0932                          .ORG   vvCODE   
0932   C1                     POP   BC   
0933                          ;*Macro unroll:  mNEXT
0933   EB                     EX   DE,HL   
0934                          ;*Macro unroll:  mNEXTHL                         ; 34t
0934   5E                     LD   E,(HL)   ; 34t
0935   23                     INC   HL   
0936   56                     LD   D,(HL)   
0937   23                     INC   HL   
0938   EB                     EX   DE,HL   
0939   E9                     JP   (HL)   
093A                             ;   SWAP        ( w1 w2 -- w2 w1 )
093A                             ;               Exchange top two stack items.
093A                          ;*Macro unroll: mCODE	4, 'SWAP', SWAP
093A                          ALIGN   2   
093A                SWAP:        
093A                VVCODE:   .SET   $   
093A                VVLEN:    .SET   (4 & 01FH) / CELLL   
17CA                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
17CA                VVNAME:   .SET   $   
17CA   3A 09 D8 17            DW   vvCODE,vvLINK   
17CE                VVLINK:   .SET   $   
17CE   04 53 57 41 50         DB   4,"SWAP"   
093A                          .ORG   vvCODE   
093A   E1                     POP   HL   
093B   C5                     PUSH   BC   
093C   44                     LD   B,H   
093D   4D                     LD   C,L   
093E                          ;*Macro unroll: 	mNEXT
093E   EB                     EX   DE,HL   
093F                          ;*Macro unroll:  mNEXTHL                         ; 34t
093F   5E                     LD   E,(HL)   ; 34t
0940   23                     INC   HL   
0941   56                     LD   D,(HL)   
0942   23                     INC   HL   
0943   EB                     EX   DE,HL   
0944   E9                     JP   (HL)   
0945                             ;   OVER        ( w1 w2 -- w1 w2 w1 )
0945                             ;               Copy second stack item to top.
0945                          ;*Macro unroll: mCODE	4, 'OVER', OVER
0945                          ALIGN   2   
0946                OVER:        
0946                VVCODE:   .SET   $   
0946                VVLEN:    .SET   (4 & 01FH) / CELLL   
17C0                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
17C0                VVNAME:   .SET   $   
17C0   46 09 CE 17            DW   vvCODE,vvLINK   
17C4                VVLINK:   .SET   $   
17C4   04 4F 56 45 52         DB   4,"OVER"   
0946                          .ORG   vvCODE   
0946   E1                     POP   HL   
0947   E5                     PUSH   HL   
0948   C5                     PUSH   BC   
0949   44                     LD   B,H   
094A   4D                     LD   C,L   
094B                          ;*Macro unroll: 	mNEXT
094B   EB                     EX   DE,HL   
094C                          ;*Macro unroll:  mNEXTHL                         ; 34t
094C   5E                     LD   E,(HL)   ; 34t
094D   23                     INC   HL   
094E   56                     LD   D,(HL)   
094F   23                     INC   HL   
0950   EB                     EX   DE,HL   
0951   E9                     JP   (HL)   
0952                             ;   ?DUP        ( w -- w w | 0 )
0952                             ;               Dup tos if its is not zero.
0952                          ;*Macro unroll: mCOLON	4,'?DUP', QDUP
0952                          ;*Macro unroll:  mCODE 4, "?DUP", QDUP
0952                          ALIGN   2   
0952                QDUP:        
0952                VVCODE:   .SET   $   
0952                VVLEN:    .SET   (4 & 01FH) / CELLL   
17B6                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
17B6                VVNAME:   .SET   $   
17B6   52 09 C4 17            DW   vvCODE,vvLINK   
17BA                VVLINK:   .SET   $   
17BA   04 3F 44 55 50         DB   4,"?DUP"   
0952                          .ORG   vvCODE   
0952   00                     NOP      
0953   CD A0 04               CALL   doLIST   
0956   2A 09 DE 07 5E 09      DW   DUPP,QBRAN,QDUP1   
095C   2A 09                  DW   DUPP   
095E                QDUP1:       
095E   DE 04                  DW   EXIT   
0960                             ;   ROT         ( w1 w2 w3 -- w2 w3 w1 )
0960                             ;               Rot 3rd item to top.
0960                          ;*Macro unroll: mCOLON	3,'ROT', ROT
0960                          ;*Macro unroll:  mCODE 3, "ROT", ROT
0960                          ALIGN   2   
0960                ROT:         
0960                VVCODE:   .SET   $   
0960                VVLEN:    .SET   (3 & 01FH) / CELLL   
17AE                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
17AE                VVNAME:   .SET   $   
17AE   60 09 BA 17            DW   vvCODE,vvLINK   
17B2                VVLINK:   .SET   $   
17B2   03 52 4F 54            DB   3,"ROT"   
0960                          .ORG   vvCODE   
0960   00                     NOP      
0961   CD A0 04               CALL   doLIST   
0964   06 09 3A 09 18 09 3A 09 DE 04 DW   ToR,SWAP,RFrom,SWAP,EXIT   
096E                             ;   2DROP       ( w w -- )
096E                             ;               Discard two items on stack.
096E                          ;*Macro unroll: mCOLON	5,'2DROP',DDROP
096E                          ;*Macro unroll:  mCODE 5, "2DROP", DDROP
096E                          ALIGN   2   
096E                DDROP:       
096E                VVCODE:   .SET   $   
096E                VVLEN:    .SET   (5 & 01FH) / CELLL   
17A4                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
17A4                VVNAME:   .SET   $   
17A4   6E 09 B2 17            DW   vvCODE,vvLINK   
17A8                VVLINK:   .SET   $   
17A8   05 32 44 52 4F 50      DB   5,"2DROP"   
096E                          .ORG   vvCODE   
096E   00                     NOP      
096F   CD A0 04               CALL   doLIST   
0972   32 09 32 09 DE 04      DW   DROP,DROP,EXIT   
0978                             ;   2DUP        ( w1 w2 -- w1 w2 w1 w2 )
0978                             ;               Duplicate top two items.
0978                          ;*Macro unroll: mCOLON	4,'2DUP',DDUP
0978                          ;*Macro unroll:  mCODE 4, "2DUP", DDUP
0978                          ALIGN   2   
0978                DDUP:        
0978                VVCODE:   .SET   $   
0978                VVLEN:    .SET   (4 & 01FH) / CELLL   
179A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
179A                VVNAME:   .SET   $   
179A   78 09 A8 17            DW   vvCODE,vvLINK   
179E                VVLINK:   .SET   $   
179E   04 32 44 55 50         DB   4,"2DUP"   
0978                          .ORG   vvCODE   
0978   00                     NOP      
0979   CD A0 04               CALL   doLIST   
097C   46 09 46 09 DE 04      DW   OVER,OVER,EXIT   
0982                             ;   2SWAP        ( w1 w2 w3 w4 -- w3 w4 w1 w2 )
0982                             ;               Exchange top two items.
0982                          ;*Macro unroll: mCOLON	5,'2SWAP',TwoSWAP
0982                          ;*Macro unroll:  mCODE 5, "2SWAP", TwoSWAP
0982                          ALIGN   2   
0982                TWOSWAP:      
0982                VVCODE:   .SET   $   
0982                VVLEN:    .SET   (5 & 01FH) / CELLL   
1790                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1790                VVNAME:   .SET   $   
1790   82 09 9E 17            DW   vvCODE,vvLINK   
1794                VVLINK:   .SET   $   
1794   05 32 53 57 41 50      DB   5,"2SWAP"   
0982                          .ORG   vvCODE   
0982   00                     NOP      
0983   CD A0 04               CALL   doLIST   
0986   60 09 06 09 60 09 18 09 DE 04 DW   ROT,ToR,ROT,RFrom,EXIT   
0990                             ;   PICK        ( ... +n -- ... w )
0990                             ;               Copy the nth stack item to tos.
0990                          ;*Macro unroll: mCOLON  4,'PICK',PICK
0990                          ;*Macro unroll:  mCODE 4, "PICK", PICK
0990                          ALIGN   2   
0990                PICK:        
0990                VVCODE:   .SET   $   
0990                VVLEN:    .SET   (4 & 01FH) / CELLL   
1786                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1786                VVNAME:   .SET   $   
1786   90 09 94 17            DW   vvCODE,vvLINK   
178A                VVLINK:   .SET   $   
178A   04 50 49 43 4B         DB   4,"PICK"   
0990                          .ORG   vvCODE   
0990   00                     NOP      
0991   CD A0 04               CALL   doLIST   
0994   B2 04 01 00 76 01 10 04 DW   DOLIT,1,PLUS,CELLS   
099C   68 08 76 01 1E 08 DE 04 DW   SPAT,PLUS,AT,EXIT   
09A4                             ;   DEPTH       ( -- n )
09A4                             ;               Return the depth of the data stack.
09A4                          ;*Macro unroll: mCOLON	5,'DEPTH',DEPTH
09A4                          ;*Macro unroll:  mCODE 5, "DEPTH", DEPTH
09A4                          ALIGN   2   
09A4                DEPTH:       
09A4                VVCODE:   .SET   $   
09A4                VVLEN:    .SET   (5 & 01FH) / CELLL   
177C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
177C                VVNAME:   .SET   $   
177C   A4 09 8A 17            DW   vvCODE,vvLINK   
1780                VVLINK:   .SET   $   
1780   05 44 45 50 54 48      DB   5,"DEPTH"   
09A4                          .ORG   vvCODE   
09A4   00                     NOP      
09A5   CD A0 04               CALL   doLIST   
09A8   68 08 BA 09 1E 08 3A 09 CE 01 DW   SPAT,SZero,AT,SWAP,SUBB   
09B2   B2 04 02 00 8E 03 DE 04 DW   DoLIT,CELLL,Slash,EXIT   
09BA                             ;   SP0         ( -- a )
09BA                             ;               Pointer to bottom of the data stack.
09BA                          ;*Macro unroll: mUSER   3,'SP0',SZERO
09BA                          ;*Macro unroll: 	mCODE 3, "SP0", SZERO
09BA                          ALIGN   2   
09BA                SZERO:       
09BA                VVCODE:   .SET   $   
09BA                VVLEN:    .SET   (3 & 01FH) / CELLL   
1774                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1774                VVNAME:   .SET   $   
1774   BA 09 80 17            DW   vvCODE,vvLINK   
1778                VVLINK:   .SET   $   
1778   03 53 50 30            DB   3,"SP0"   
09BA                          .ORG   vvCODE   
09BA   00                     NOP      
09BB   CD A0 04               CALL   doLIST   
09BE   CE 04 00 00            DW   DoUSE,vvUSER   
09C2                VVUSER:   .SET   vvUSER + CELLL   
09C2                             ;   RP0         ( -- a )
09C2                             ;               Pointer to bottom of the return stack.
09C2                          ;*Macro unroll: mUSER   3,'RP0',RZERO
09C2                          ;*Macro unroll: 	mCODE 3, "RP0", RZERO
09C2                          ALIGN   2   
09C2                RZERO:       
09C2                VVCODE:   .SET   $   
09C2                VVLEN:    .SET   (3 & 01FH) / CELLL   
176C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
176C                VVNAME:   .SET   $   
176C   C2 09 78 17            DW   vvCODE,vvLINK   
1770                VVLINK:   .SET   $   
1770   03 52 50 30            DB   3,"RP0"   
09C2                          .ORG   vvCODE   
09C2   00                     NOP      
09C3   CD A0 04               CALL   doLIST   
09C6   CE 04 02 00            DW   DoUSE,vvUSER   
09CA                VVUSER:   .SET   vvUSER + CELLL   
09CA                             ;   '?KEY       ( -- a )
09CA                             ;               Execution vector of ?KEY.
09CA                          ;*Macro unroll: mUSER   5,"'?KEY",TQKEY
09CA                          ;*Macro unroll: 	mCODE 5, "'?KEY", TQKEY
09CA                          ALIGN   2   
09CA                TQKEY:       
09CA                VVCODE:   .SET   $   
09CA                VVLEN:    .SET   (5 & 01FH) / CELLL   
1762                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1762                VVNAME:   .SET   $   
1762   CA 09 70 17            DW   vvCODE,vvLINK   
1766                VVLINK:   .SET   $   
1766   05 27 3F 4B 45 59      DB   5,"'?KEY"   
09CA                          .ORG   vvCODE   
09CA   00                     NOP      
09CB   CD A0 04               CALL   doLIST   
09CE   CE 04 04 00            DW   DoUSE,vvUSER   
09D2                VVUSER:   .SET   vvUSER + CELLL   
09D2                             ;   'EMIT       ( -- a )
09D2                             ;               Execution vector of EMIT.
09D2                          ;*Macro unroll: mUSER   5,"'EMIT",TEMIT
09D2                          ;*Macro unroll: 	mCODE 5, "'EMIT", TEMIT
09D2                          ALIGN   2   
09D2                TEMIT:       
09D2                VVCODE:   .SET   $   
09D2                VVLEN:    .SET   (5 & 01FH) / CELLL   
1758                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1758                VVNAME:   .SET   $   
1758   D2 09 66 17            DW   vvCODE,vvLINK   
175C                VVLINK:   .SET   $   
175C   05 27 45 4D 49 54      DB   5,"'EMIT"   
09D2                          .ORG   vvCODE   
09D2   00                     NOP      
09D3   CD A0 04               CALL   doLIST   
09D6   CE 04 06 00            DW   DoUSE,vvUSER   
09DA                VVUSER:   .SET   vvUSER + CELLL   
09DA                             ;   'EXPECT     ( -- a )
09DA                             ;               Execution vector of EXPECT.
09DA                          ;*Macro unroll: mUSER   7,"'EXPECT",TEXPE
09DA                          ;*Macro unroll: 	mCODE 7, "'EXPECT", TEXPE
09DA                          ALIGN   2   
09DA                TEXPE:       
09DA                VVCODE:   .SET   $   
09DA                VVLEN:    .SET   (7 & 01FH) / CELLL   
174C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
174C                VVNAME:   .SET   $   
174C   DA 09 5C 17            DW   vvCODE,vvLINK   
1750                VVLINK:   .SET   $   
1750   07 27 45 58 50 45 43 54 DB   7,"'EXPECT"   
09DA                          .ORG   vvCODE   
09DA   00                     NOP      
09DB   CD A0 04               CALL   doLIST   
09DE   CE 04 08 00            DW   DoUSE,vvUSER   
09E2                VVUSER:   .SET   vvUSER + CELLL   
09E2                             ;   'TAP        ( -- a )
09E2                             ;               Execution vector of TAP.
09E2                          ;*Macro unroll: mUSER   4,"'TAP",TTAP
09E2                          ;*Macro unroll: 	mCODE 4, "'TAP", TTAP
09E2                          ALIGN   2   
09E2                TTAP:        
09E2                VVCODE:   .SET   $   
09E2                VVLEN:    .SET   (4 & 01FH) / CELLL   
1742                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1742                VVNAME:   .SET   $   
1742   E2 09 50 17            DW   vvCODE,vvLINK   
1746                VVLINK:   .SET   $   
1746   04 27 54 41 50         DB   4,"'TAP"   
09E2                          .ORG   vvCODE   
09E2   00                     NOP      
09E3   CD A0 04               CALL   doLIST   
09E6   CE 04 0A 00            DW   DoUSE,vvUSER   
09EA                VVUSER:   .SET   vvUSER + CELLL   
09EA                             ;   'ECHO       ( -- a )
09EA                             ;               Execution vector of ECHO.
09EA                          ;*Macro unroll: mUSER   5,"'ECHO",TECHO
09EA                          ;*Macro unroll: 	mCODE 5, "'ECHO", TECHO
09EA                          ALIGN   2   
09EA                TECHO:       
09EA                VVCODE:   .SET   $   
09EA                VVLEN:    .SET   (5 & 01FH) / CELLL   
1738                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1738                VVNAME:   .SET   $   
1738   EA 09 46 17            DW   vvCODE,vvLINK   
173C                VVLINK:   .SET   $   
173C   05 27 45 43 48 4F      DB   5,"'ECHO"   
09EA                          .ORG   vvCODE   
09EA   00                     NOP      
09EB   CD A0 04               CALL   doLIST   
09EE   CE 04 0C 00            DW   DoUSE,vvUSER   
09F2                VVUSER:   .SET   vvUSER + CELLL   
09F2                             ;   'PROMPT     ( -- a )
09F2                             ;               Execution vector of PROMPT.
09F2                          ;*Macro unroll: mUSER   7,"'PROMPT",TPROM
09F2                          ;*Macro unroll: 	mCODE 7, "'PROMPT", TPROM
09F2                          ALIGN   2   
09F2                TPROM:       
09F2                VVCODE:   .SET   $   
09F2                VVLEN:    .SET   (7 & 01FH) / CELLL   
172C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
172C                VVNAME:   .SET   $   
172C   F2 09 3C 17            DW   vvCODE,vvLINK   
1730                VVLINK:   .SET   $   
1730   07 27 50 52 4F 4D 50 54 DB   7,"'PROMPT"   
09F2                          .ORG   vvCODE   
09F2   00                     NOP      
09F3   CD A0 04               CALL   doLIST   
09F6   CE 04 0E 00            DW   DoUSE,vvUSER   
09FA                VVUSER:   .SET   vvUSER + CELLL   
09FA                             ;   BASE        ( -- a )
09FA                             ;               Storage of the radix base for numeric I/O.
09FA                          ;*Macro unroll: mUSER   4,'BASE',BASE
09FA                          ;*Macro unroll: 	mCODE 4, "BASE", BASE
09FA                          ALIGN   2   
09FA                BASE:        
09FA                VVCODE:   .SET   $   
09FA                VVLEN:    .SET   (4 & 01FH) / CELLL   
1722                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1722                VVNAME:   .SET   $   
1722   FA 09 30 17            DW   vvCODE,vvLINK   
1726                VVLINK:   .SET   $   
1726   04 42 41 53 45         DB   4,"BASE"   
09FA                          .ORG   vvCODE   
09FA   00                     NOP      
09FB   CD A0 04               CALL   doLIST   
09FE   CE 04 10 00            DW   DoUSE,vvUSER   
0A02                VVUSER:   .SET   vvUSER + CELLL   
0A02                             ;   tmp         ( -- a )
0A02                             ;               A temporary storage location used in parse and find.
0A02                          ;*Macro unroll: mUSER   COMPO+3,'tmp',TEMP
0A02                          ;*Macro unroll: 	mCODE COMPO+3, "tmp", TEMP
0A02                          ALIGN   2   
0A02                TEMP:        
0A02                VVCODE:   .SET   $   
0A02                VVLEN:    .SET   (COMPO+3 & 01FH) / CELLL   
16FA                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
16FA                VVNAME:   .SET   $   
16FA   02 0A 26 17            DW   vvCODE,vvLINK   
16FE                VVLINK:   .SET   $   
16FE   23 74 6D 70            DB   COMPO+3,"tmp"   
0A02                          .ORG   vvCODE   
0A02   00                     NOP      
0A03   CD A0 04               CALL   doLIST   
0A06   CE 04 12 00            DW   DoUSE,vvUSER   
0A0A                VVUSER:   .SET   vvUSER + CELLL   
0A0A                             ;   SPAN        ( -- a )
0A0A                             ;               Hold character count received by EXPECT.
0A0A                          ;*Macro unroll: mUSER   4,'SPAN',SPAN
0A0A                          ;*Macro unroll: 	mCODE 4, "SPAN", SPAN
0A0A                          ALIGN   2   
0A0A                SPAN:        
0A0A                VVCODE:   .SET   $   
0A0A                VVLEN:    .SET   (4 & 01FH) / CELLL   
16F0                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
16F0                VVNAME:   .SET   $   
16F0   0A 0A FE 16            DW   vvCODE,vvLINK   
16F4                VVLINK:   .SET   $   
16F4   04 53 50 41 4E         DB   4,"SPAN"   
0A0A                          .ORG   vvCODE   
0A0A   00                     NOP      
0A0B   CD A0 04               CALL   doLIST   
0A0E   CE 04 14 00            DW   DoUSE,vvUSER   
0A12                VVUSER:   .SET   vvUSER + CELLL   
0A12                             ;   >IN         ( -- a )
0A12                             ;               Hold the character pointer while parsing input stream.
0A12                          ;*Macro unroll: mUSER   3,'>IN',INN
0A12                          ;*Macro unroll: 	mCODE 3, ">IN", INN
0A12                          ALIGN   2   
0A12                INN:         
0A12                VVCODE:   .SET   $   
0A12                VVLEN:    .SET   (3 & 01FH) / CELLL   
16E8                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
16E8                VVNAME:   .SET   $   
16E8   12 0A F4 16            DW   vvCODE,vvLINK   
16EC                VVLINK:   .SET   $   
16EC   03 3E 49 4E            DB   3,">IN"   
0A12                          .ORG   vvCODE   
0A12   00                     NOP      
0A13   CD A0 04               CALL   doLIST   
0A16   CE 04 16 00            DW   DoUSE,vvUSER   
0A1A                VVUSER:   .SET   vvUSER + CELLL   
0A1A                             ;   #TIB        ( -- a )
0A1A                             ;               Hold the current count and address of the terminal input buffer.
0A1A                          ;*Macro unroll: mUSER   4,'#TIB',NTIB
0A1A                          ;*Macro unroll: 	mCODE 4, "#TIB", NTIB
0A1A                          ALIGN   2   
0A1A                NTIB:        
0A1A                VVCODE:   .SET   $   
0A1A                VVLEN:    .SET   (4 & 01FH) / CELLL   
16DE                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
16DE                VVNAME:   .SET   $   
16DE   1A 0A EC 16            DW   vvCODE,vvLINK   
16E2                VVLINK:   .SET   $   
16E2   04 23 54 49 42         DB   4,"#TIB"   
0A1A                          .ORG   vvCODE   
0A1A   00                     NOP      
0A1B   CD A0 04               CALL   doLIST   
0A1E   CE 04 18 00            DW   DoUSE,vvUSER   
0A22                VVUSER:   .SET   vvUSER + CELLL   
0A22                VVUSER:   .SET   vvUSER + CELLL   
0A22                             ;   CSP         ( -- a )
0A22                             ;               Hold the stack pointer for error checking.
0A22                          ;*Macro unroll: mUSER   3,'CSP',CSP
0A22                          ;*Macro unroll: 	mCODE 3, "CSP", CSP
0A22                          ALIGN   2   
0A22                CSP:         
0A22                VVCODE:   .SET   $   
0A22                VVLEN:    .SET   (3 & 01FH) / CELLL   
16D6                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
16D6                VVNAME:   .SET   $   
16D6   22 0A E2 16            DW   vvCODE,vvLINK   
16DA                VVLINK:   .SET   $   
16DA   03 43 53 50            DB   3,"CSP"   
0A22                          .ORG   vvCODE   
0A22   00                     NOP      
0A23   CD A0 04               CALL   doLIST   
0A26   CE 04 1C 00            DW   DoUSE,vvUSER   
0A2A                VVUSER:   .SET   vvUSER + CELLL   
0A2A                             ;   'EVAL       ( -- a )
0A2A                             ;               Execution vector of EVAL.
0A2A                          ;*Macro unroll: mUSER   5,"'EVAL",TEVAL
0A2A                          ;*Macro unroll: 	mCODE 5, "'EVAL", TEVAL
0A2A                          ALIGN   2   
0A2A                TEVAL:       
0A2A                VVCODE:   .SET   $   
0A2A                VVLEN:    .SET   (5 & 01FH) / CELLL   
16CC                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
16CC                VVNAME:   .SET   $   
16CC   2A 0A DA 16            DW   vvCODE,vvLINK   
16D0                VVLINK:   .SET   $   
16D0   05 27 45 56 41 4C      DB   5,"'EVAL"   
0A2A                          .ORG   vvCODE   
0A2A   00                     NOP      
0A2B   CD A0 04               CALL   doLIST   
0A2E   CE 04 1E 00            DW   DoUSE,vvUSER   
0A32                VVUSER:   .SET   vvUSER + CELLL   
0A32                             ;   'NUMBER     ( -- a )
0A32                             ;               Execution vector of NUMBER?.
0A32                          ;*Macro unroll: mUSER   7,"'NUMBER",TNUMB
0A32                          ;*Macro unroll: 	mCODE 7, "'NUMBER", TNUMB
0A32                          ALIGN   2   
0A32                TNUMB:       
0A32                VVCODE:   .SET   $   
0A32                VVLEN:    .SET   (7 & 01FH) / CELLL   
16C0                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
16C0                VVNAME:   .SET   $   
16C0   32 0A D0 16            DW   vvCODE,vvLINK   
16C4                VVLINK:   .SET   $   
16C4   07 27 4E 55 4D 42 45 52 DB   7,"'NUMBER"   
0A32                          .ORG   vvCODE   
0A32   00                     NOP      
0A33   CD A0 04               CALL   doLIST   
0A36   CE 04 20 00            DW   DoUSE,vvUSER   
0A3A                VVUSER:   .SET   vvUSER + CELLL   
0A3A                             ;   HLD         ( -- a )
0A3A                             ;               Hold a pointer in building a numeric output string.
0A3A                          ;*Macro unroll: mUSER   3,'HLD',HLD
0A3A                          ;*Macro unroll: 	mCODE 3, "HLD", HLD
0A3A                          ALIGN   2   
0A3A                HLD:         
0A3A                VVCODE:   .SET   $   
0A3A                VVLEN:    .SET   (3 & 01FH) / CELLL   
16B8                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
16B8                VVNAME:   .SET   $   
16B8   3A 0A C4 16            DW   vvCODE,vvLINK   
16BC                VVLINK:   .SET   $   
16BC   03 48 4C 44            DB   3,"HLD"   
0A3A                          .ORG   vvCODE   
0A3A   00                     NOP      
0A3B   CD A0 04               CALL   doLIST   
0A3E   CE 04 22 00            DW   DoUSE,vvUSER   
0A42                VVUSER:   .SET   vvUSER + CELLL   
0A42                             ;   HANDLER     ( -- a )
0A42                             ;               Hold the return stack pointer for error handling.
0A42                          ;*Macro unroll: mUSER   7,'HANDLER',HANDL
0A42                          ;*Macro unroll: 	mCODE 7, "HANDLER", HANDL
0A42                          ALIGN   2   
0A42                HANDL:       
0A42                VVCODE:   .SET   $   
0A42                VVLEN:    .SET   (7 & 01FH) / CELLL   
16AC                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
16AC                VVNAME:   .SET   $   
16AC   42 0A BC 16            DW   vvCODE,vvLINK   
16B0                VVLINK:   .SET   $   
16B0   07 48 41 4E 44 4C 45 52 DB   7,"HANDLER"   
0A42                          .ORG   vvCODE   
0A42   00                     NOP      
0A43   CD A0 04               CALL   doLIST   
0A46   CE 04 24 00            DW   DoUSE,vvUSER   
0A4A                VVUSER:   .SET   vvUSER + CELLL   
0A4A                             ;   CONTEXT     ( -- a )
0A4A                             ;               A area to specify vocabulary search order.
0A4A                          ;*Macro unroll: mUSER   7,'CONTEXT',CNTXT
0A4A                          ;*Macro unroll: 	mCODE 7, "CONTEXT", CNTXT
0A4A                          ALIGN   2   
0A4A                CNTXT:       
0A4A                VVCODE:   .SET   $   
0A4A                VVLEN:    .SET   (7 & 01FH) / CELLL   
16A0                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
16A0                VVNAME:   .SET   $   
16A0   4A 0A B0 16            DW   vvCODE,vvLINK   
16A4                VVLINK:   .SET   $   
16A4   07 43 4F 4E 54 45 58 54 DB   7,"CONTEXT"   
0A4A                          .ORG   vvCODE   
0A4A   00                     NOP      
0A4B   CD A0 04               CALL   doLIST   
0A4E   CE 04 26 00            DW   DoUSE,vvUSER   
0A52                VVUSER:   .SET   vvUSER + CELLL   
0A52                VVUSER:   .SET   vvUSER + VOCSS * CELLL   ;vocabulary stack
0A52                             ;   CURRENT     ( -- a )
0A52                             ;               Point to the vocabulary to be extended.
0A52                          ;*Macro unroll: mUSER   7,'CURRENT',CRRNT
0A52                          ;*Macro unroll: 	mCODE 7, "CURRENT", CRRNT
0A52                          ALIGN   2   
0A52                CRRNT:       
0A52                VVCODE:   .SET   $   
0A52                VVLEN:    .SET   (7 & 01FH) / CELLL   
1694                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1694                VVNAME:   .SET   $   
1694   52 0A A4 16            DW   vvCODE,vvLINK   
1698                VVLINK:   .SET   $   
1698   07 43 55 52 52 45 4E 54 DB   7,"CURRENT"   
0A52                          .ORG   vvCODE   
0A52   00                     NOP      
0A53   CD A0 04               CALL   doLIST   
0A56   CE 04 38 00            DW   DoUSE,vvUSER   
0A5A                VVUSER:   .SET   vvUSER + CELLL   
0A5A                VVUSER:   .SET   vvUSER + CELLL   ;vocabulary link pointer
0A5A                             ;   CP          ( -- a )
0A5A                             ;               Point to the top of the code dictionary.
0A5A                          ;*Macro unroll: mUSER   2,'CP',CP
0A5A                          ;*Macro unroll: 	mCODE 2, "CP", CP
0A5A                          ALIGN   2   
0A5A                CP:          
0A5A                VVCODE:   .SET   $   
0A5A                VVLEN:    .SET   (2 & 01FH) / CELLL   
168C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
168C                VVNAME:   .SET   $   
168C   5A 0A 98 16            DW   vvCODE,vvLINK   
1690                VVLINK:   .SET   $   
1690   02 43 50               DB   2,"CP"   
0A5A                          .ORG   vvCODE   
0A5A   00                     NOP      
0A5B   CD A0 04               CALL   doLIST   
0A5E   CE 04 3C 00            DW   DoUSE,vvUSER   
0A62                VVUSER:   .SET   vvUSER + CELLL   
0A62                             ;   NP          ( -- a )
0A62                             ;               Point to the bottom of the name dictionary.
0A62                          ;*Macro unroll: mUSER   2,'NP',NP
0A62                          ;*Macro unroll: 	mCODE 2, "NP", NP
0A62                          ALIGN   2   
0A62                NP:          
0A62                VVCODE:   .SET   $   
0A62                VVLEN:    .SET   (2 & 01FH) / CELLL   
1684                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1684                VVNAME:   .SET   $   
1684   62 0A 90 16            DW   vvCODE,vvLINK   
1688                VVLINK:   .SET   $   
1688   02 4E 50               DB   2,"NP"   
0A62                          .ORG   vvCODE   
0A62   00                     NOP      
0A63   CD A0 04               CALL   doLIST   
0A66   CE 04 3E 00            DW   DoUSE,vvUSER   
0A6A                VVUSER:   .SET   vvUSER + CELLL   
0A6A                             ;   LAST        ( -- a )
0A6A                             ;               Point to the last name in the name dictionary.
0A6A                          ;*Macro unroll: mUSER   4,'LAST',LAST
0A6A                          ;*Macro unroll: 	mCODE 4, "LAST", LAST
0A6A                          ALIGN   2   
0A6A                LAST:        
0A6A                VVCODE:   .SET   $   
0A6A                VVLEN:    .SET   (4 & 01FH) / CELLL   
167A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
167A                VVNAME:   .SET   $   
167A   6A 0A 88 16            DW   vvCODE,vvLINK   
167E                VVLINK:   .SET   $   
167E   04 4C 41 53 54         DB   4,"LAST"   
0A6A                          .ORG   vvCODE   
0A6A   00                     NOP      
0A6B   CD A0 04               CALL   doLIST   
0A6E   CE 04 40 00            DW   DoUSE,vvUSER   
0A72                VVUSER:   .SET   vvUSER + CELLL   
0A72                             ;   forth       ( -- a )
0A72                             ;               Point to the last name in the name dictionary.
0A72                          ;*Macro unroll: mUSER   5,'forth',VFRTH
0A72                          ;*Macro unroll: 	mCODE 5, "forth", VFRTH
0A72                          ALIGN   2   
0A72                VFRTH:       
0A72                VVCODE:   .SET   $   
0A72                VVLEN:    .SET   (5 & 01FH) / CELLL   
1670                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1670                VVNAME:   .SET   $   
1670   72 0A 7E 16            DW   vvCODE,vvLINK   
1674                VVLINK:   .SET   $   
1674   05 66 6F 72 74 68      DB   5,"forth"   
0A72                          .ORG   vvCODE   
0A72   00                     NOP      
0A73   CD A0 04               CALL   doLIST   
0A76   CE 04 42 00            DW   DoUSE,vvUSER   
0A7A                VVUSER:   .SET   vvUSER + CELLL   
0A7A                             ;   _TYPE       ( b u -- )
0A7A                             ;               Display a string. Filter non-printing characters.
0A7A                          ;*Macro unroll: mCOLON  5,'_TYPE',UTYPE
0A7A                          ;*Macro unroll:  mCODE 5, "_TYPE", UTYPE
0A7A                          ALIGN   2   
0A7A                UTYPE:       
0A7A                VVCODE:   .SET   $   
0A7A                VVLEN:    .SET   (5 & 01FH) / CELLL   
1666                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1666                VVNAME:   .SET   $   
1666   7A 0A 74 16            DW   vvCODE,vvLINK   
166A                VVLINK:   .SET   $   
166A   05 5F 54 59 50 45      DB   5,"_TYPE"   
0A7A                          .ORG   vvCODE   
0A7A   00                     NOP      
0A7B   CD A0 04               CALL   doLIST   
0A7E   06 09                  DW   TOR   ;start count down loop
0A80   EE 07 92 0A            DW   BRAN,UTYP2   ;skip first pass
0A84                UTYP1:       
0A84   2A 09 36 08 60 06 CC 06 DW   DUPP,CAT,TCHAR,EMIT   ;display only printable
0A8C   B2 04 01 00 76 01      DW   DOLIT,1,PLUS   ;increment address
0A92                UTYP2:       
0A92   68 05 84 0A            DW   DONXT,UTYP1   ;loop till done
0A96   32 09 DE 04            DW   DROP,EXIT   
0A9A                             ;   dm+         ( a u -- a )
0A9A                             ;               Dump u bytes from , leaving a+u on the stack.
0A9A                          ;*Macro unroll: mCOLON  3,'dm+',DMP
0A9A                          ;*Macro unroll:  mCODE 3, "dm+", DMP
0A9A                          ALIGN   2   
0A9A                DMP:         
0A9A                VVCODE:   .SET   $   
0A9A                VVLEN:    .SET   (3 & 01FH) / CELLL   
165E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
165E                VVNAME:   .SET   $   
165E   9A 0A 6A 16            DW   vvCODE,vvLINK   
1662                VVLINK:   .SET   $   
1662   03 64 6D 2B            DB   3,"dm+"   
0A9A                          .ORG   vvCODE   
0A9A   00                     NOP      
0A9B   CD A0 04               CALL   doLIST   
0A9E   46 09 B2 04 04 00 72 07 DW   OVER,DOLIT,4,UDOTR   ;display address
0AA6   FC 06 06 09            DW   SPACE,TOR   ;start count down loop
0AAA   EE 07 BE 0A            DW   BRAN,PDUM2   ;skip first pass
0AAE                PDUM1:       
0AAE   2A 09 36 08 B2 04 03 00 72 07 DW   DUPP,CAT,DOLIT,3,UDOTR   ;display numeric data
0AB8   B2 04 01 00 76 01      DW   DOLIT,1,PLUS   ;increment address
0ABE                PDUM2:       
0ABE   68 05 AE 0A            DW   DONXT,PDUM1   ;loop till done
0AC2   DE 04                  DW   EXIT   
0AC4                             ;   DUMP        ( a u -- )
0AC4                             ;               Dump u bytes from a, in a formatted manner.
0AC4                          ;*Macro unroll: mCOLON  4,'DUMP',DUMP
0AC4                          ;*Macro unroll:  mCODE 4, "DUMP", DUMP
0AC4                          ALIGN   2   
0AC4                DUMP:        
0AC4                VVCODE:   .SET   $   
0AC4                VVLEN:    .SET   (4 & 01FH) / CELLL   
1654                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1654                VVNAME:   .SET   $   
1654   C4 0A 62 16            DW   vvCODE,vvLINK   
1658                VVLINK:   .SET   $   
1658   04 44 55 4D 50         DB   4,"DUMP"   
0AC4                          .ORG   vvCODE   
0AC4   00                     NOP      
0AC5   CD A0 04               CALL   doLIST   
0AC8   FA 09 1E 08 06 09 3A 06 DW   BASE,AT,TOR,HEX   ;save radix, set hex
0AD0   B2 04 10 00 8E 03      DW   DOLIT,16,SLASH   ;change count to lines
0AD6   06 09                  DW   TOR   ;start count down loop
0AD8                DUMP1:       
0AD8   3C 07 B2 04 10 00 78 09 9A 0A DW   CR,DOLIT,16,DDUP,DMP   ;display numeric
0AE2   60 09 60 09            DW   ROT,ROT   
0AE6   FC 06 FC 06 7A 0A      DW   SPACE,SPACE,UTYPE   ;display printable characters
0AEC   D8 06 96 01            DW   NUFQ,INVER   ;user control
0AF0   DE 07 FC 0A            DW   QBRAN,DUMP2   
0AF4   68 05 D8 0A            DW   DONXT,DUMP1   ;loop till done
0AF8   EE 07 00 0B            DW   BRAN,DUMP3   
0AFC                DUMP2:       
0AFC   18 09 32 09            DW   RFROM,DROP   ;cleanup loop stack, early exit
0B00                DUMP3:       
0B00   32 09 18 09 FA 09 10 08 DW   DROP,RFROM,BASE,STORE   ;restore radix
0B08   DE 04                  DW   EXIT   
0B0A                             ;   .S          ( ... -- ... )
0B0A                             ;               Display the contents of the data stack.
0B0A                          ;*Macro unroll: mCOLON  2,'.S',DOTS
0B0A                          ;*Macro unroll:  mCODE 2, ".S", DOTS
0B0A                          ALIGN   2   
0B0A                DOTS:        
0B0A                VVCODE:   .SET   $   
0B0A                VVLEN:    .SET   (2 & 01FH) / CELLL   
164C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
164C                VVNAME:   .SET   $   
164C   0A 0B 58 16            DW   vvCODE,vvLINK   
1650                VVLINK:   .SET   $   
1650   02 2E 53               DB   2,".S"   
0B0A                          .ORG   vvCODE   
0B0A   00                     NOP      
0B0B   CD A0 04               CALL   doLIST   
0B0E   3C 07 A4 09            DW   CR,DEPTH   ;stack depth
0B12   06 09                  DW   TOR   ;start count down loop
0B14   EE 07 1E 0B            DW   BRAN,DOTS2   ;skip first pass
0B18                DOTS1:       
0B18   42 08 90 09 9A 07      DW   RAT,PICK,DOT   ;index stack, display contents
0B1E                DOTS2:       
0B1E   68 05 18 0B            DW   DONXT,DOTS1   ;loop till done
0B22                          ;*Macro unroll:  mDSTRING DOTQP,' <sp'
0B22   66 07                  DW   DOTQP   
0B24                VVLEN:    .SET   $   
0B24   00 20 3C 73 70         DB   0," <sp"   
0B29                VVCODE:   .SET   $   
0B24                          .ORG   vvLEN   
0B24   04                     DB   vvCODE - vvLEN - 1   
0B29                          .ORG   vvCODE   
0B29                          ALIGN   2   
0B2A   DE 04                  DW   EXIT   
0B2C                             ;   !CSP        ( -- )
0B2C                             ;               Save stack pointer in CSP for error checking.
0B2C                             ;   ?CSP        ( -- )
0B2C                             ;               Abort if stack pointer differs from that saved in CSP.
0B2C                             ;   >NAME       ( ca -- na | F )
0B2C                             ;               Convert code address to a name address.
0B2C                             ;   .ID         ( na -- )
0B2C                             ;               Display the name at address.
0B2C                             ;   SEE         ( -- ; <string> )
0B2C                             ;               A simple decompiler.
0B2C                             ;   WORDS       ( -- )
0B2C                             ;               Display the names in the context vocabulary.
0B2C                             ;   COLD        ( -- )
0B2C                             ;               The hilevel cold start sequence.
2000                          .ORG   END_ROM   
2000                          .ORG   START_RAM   
2000                          IF   TESTMODE   
                    TESTS_START:      
                              LD   HL,DONE   
                              CALL   PRINTSZ   
                              HALT      
                    DONE:     .CSTR   "Done!\r\n"   
2000                          ENDIF      
2000                          DS   DTS   ; data stack size
2200                SPP:         ; SP0 grows down
2200                TIBB:        
2200                          DS   RTS   ; return stack size
2400                RPP:         ; RP0 grows down (into TIBB)
2400                UPP:         
2400   00 00        VARSPP:   DW   0   ; SP0
2402   00 00        VARRPP:   DW   0   ; RP0
2404   00 00        VARQKEY:   DW   0   ; '?KEY
2406   00 00        VARTEMIT:   DW   0   ; 'EMIT
2408   00 00        VARTEXPECT:   DW   0   ; 'EXPECT
240A   00 00        VARTTAP:   DW   0   ; 'TAP
240C   00 00        VARTECHO:   DW   0   ; 'ECHO
240E   00 00        VARTPROMPT:   DW   0   ; 'PROMPT
2410   00 00        VARBASE:   DW   0   ; BASE
2412   00 00        VARTMP:   DW   0   ; tmp
2414   00 00        VARSPAN:   DW   0   ; SPAN
2416   00 00        VARPIN:   DW   0   ; >IN
2418   00 00        VARNTIB:   DW   0   ; #TIB
241A   00 00        VARTIB:   DW   0   ; TIB
241C   00 00        VARCSP:   DW   0   ; CSP
241E   00 00        VARTEVAL:   DW   0   ; 'EVAL
2420   00 00        VARTNUM:   DW   0   ; 'NUMBER
2422   00 00        VARHLD:   DW   0   ; HLD
2424   00 00        VARHANDLER:   DW   0   ; HANDLER
2426   00 00        VARCONTEXT:   DW   0   ; CONTEXT pointer
2428   00 00        VARVOCABS:   DW   0   ; vocabulary stack    ???
242A   00 00        VARCURRENT:   DW   0   ; CURRENT pointer
242C   00 00        VARVOCABLP:   DW   0   ; vocabulary link pointer ???
242E   00 00        VARCP:    DW   0   ; CP  for runing phase on RAM
2430   00 00        VARNP:    DW   0   ; NP  for runing phase on RAM
2432   00 00        VARLAST:   DW   0   ; LAST
2434   00 00        VARFORTH:   DW   0   ; FORTH   \ mullti-user ???
2436   00 00        VARVOCABL:   DW   0   ; vocabulary link       ???
2438   00 00        SERINPTR:   DW   0   
243A   00 00        SERRDPTR:   DW   0   
243C   00 00        SERBUFUSED:   DW   0   
243E                SERBUF:   DS   SER_BUFSIZE   
247D                CPP:         ; grows up
FFFE                          .ORG   END_RAM - 2   
FFFE                NPP:         ; grows down
FFFE                          .END      


TESTMODE:           0000 DEFINED AT LINE 3
COMPO:              0020 DEFINED AT LINE 1 IN constants.z80
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
IMEDD:              0040 DEFINED AT LINE 2 IN constants.z80
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
MASKK:              001F DEFINED AT LINE 3 IN constants.z80
CHARR:              0001 DEFINED AT LINE 5 IN constants.z80
                    > USED AT LINE 386 IN core-alu.z80
CELLL:              0002 DEFINED AT LINE 6 IN constants.z80
                    > USED AT LINE 42 IN constants.z80
                    > USED AT LINE 43 IN constants.z80
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 370 IN core-alu.z80
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 375 IN core-alu.z80
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 144 IN core-memory.z80
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 90 IN core-stacks.z80
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 40
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 40
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 40
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 40
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 40
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 40
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 40
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 40
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 40
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 40
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 40
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 40
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 40
                    > USED AT LINE 65 IN core-user.z80
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 40
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 40
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 40
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 40
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 40
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 40
                    > USED AT LINE 96 IN core-user.z80
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 40
                    > USED AT LINE 102 IN core-user.z80
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 40
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 40
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 40
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 40
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
BASEE:              000A DEFINED AT LINE 7 IN constants.z80
VOCSS:              0008 DEFINED AT LINE 8 IN constants.z80
                    > USED AT LINE 96 IN core-user.z80
MAXCHAR:            00FF DEFINED AT LINE 10 IN constants.z80
MAXSIGNED:          7FFF DEFINED AT LINE 11 IN constants.z80
MAXUNSIGNED:        FFFF DEFINED AT LINE 12 IN constants.z80
MAXNEGATIVE:        8000 DEFINED AT LINE 13 IN constants.z80
BKSPP:              0008 DEFINED AT LINE 15 IN constants.z80
LFF:                000A DEFINED AT LINE 16 IN constants.z80
CRR:                000D DEFINED AT LINE 17 IN constants.z80
                    > USED AT LINE 104 IN core-io.z80
SPACEE:             0020 DEFINED AT LINE 18 IN constants.z80
                    > USED AT LINE 79 IN core-format.z80
                    > USED AT LINE 86 IN core-format.z80
TIC:                0027 DEFINED AT LINE 19 IN constants.z80
MINUSS:             002D DEFINED AT LINE 20 IN constants.z80
                    > USED AT LINE 46 IN core-format.z80
UNDERSC:            005F DEFINED AT LINE 21 IN constants.z80
CALLL:              CD00 DEFINED AT LINE 23 IN constants.z80
MEM_SIZE:           10000 DEFINED AT LINE 25 IN constants.z80
                    > USED AT LINE 27 IN constants.z80
                    > USED AT LINE 36 IN constants.z80
ROM_SIZE:           2000 DEFINED AT LINE 26 IN constants.z80
                    > USED AT LINE 27 IN constants.z80
                    > USED AT LINE 30 IN constants.z80
                    > USED AT LINE 32 IN constants.z80
RAM_SIZE:           E000 DEFINED AT LINE 27 IN constants.z80
                    > USED AT LINE 33 IN constants.z80
START_ROM:          0000 DEFINED AT LINE 29 IN constants.z80
                    > USED AT LINE 8
END_ROM:            2000 DEFINED AT LINE 30 IN constants.z80
                    > USED AT LINE 4 IN word.macro.z80
                    > USED AT LINE 63
START_RAM:          2000 DEFINED AT LINE 32 IN constants.z80
                    > USED AT LINE 33 IN constants.z80
                    > USED AT LINE 64
END_RAM:            10000 DEFINED AT LINE 33 IN constants.z80
                    > USED AT LINE 44 IN variables.z80
BM:                 0000 DEFINED AT LINE 35 IN constants.z80
                    > USED AT LINE 29 IN constants.z80
                    > USED AT LINE 30 IN constants.z80
                    > USED AT LINE 32 IN constants.z80
                    > USED AT LINE 36 IN constants.z80
EM:                 10000 DEFINED AT LINE 36 IN constants.z80
UAB:                C000 DEFINED AT LINE 38 IN constants.z80
UAEM:               E200 DEFINED AT LINE 39 IN constants.z80
US:                 003A DEFINED AT LINE 41 IN constants.z80
                    > USED AT LINE 21
RTS:                0200 DEFINED AT LINE 42 IN constants.z80
                    > USED AT LINE 5 IN variables.z80
DTS:                0200 DEFINED AT LINE 43 IN constants.z80
                    > USED AT LINE 2 IN variables.z80
RET_STACK_SIZE:     0100 DEFINED AT LINE 45 IN constants.z80
DATA_STACK_SIZE:    0100 DEFINED AT LINE 46 IN constants.z80
INT_ADDR:           0038 DEFINED AT LINE 48 IN constants.z80
                    > USED AT LINE 1 IN interrupt.z80
SER_BUFSIZE:        003F DEFINED AT LINE 49 IN constants.z80
                    > USED AT LINE 12 IN interrupt.z80
                    > USED AT LINE 20 IN interrupt.z80
                    > USED AT LINE 25 IN serial.z80
                    > USED AT LINE 41 IN variables.z80
SER_FULLSIZE:       0030 DEFINED AT LINE 50 IN constants.z80
                    > USED AT LINE 29 IN interrupt.z80
SER_EMPTYSIZE:      0005 DEFINED AT LINE 51 IN constants.z80
                    > USED AT LINE 34 IN serial.z80
RTS_HIGH:           00D6 DEFINED AT LINE 53 IN constants.z80
                    > USED AT LINE 31 IN interrupt.z80
RTS_LOW:            0096 DEFINED AT LINE 54 IN constants.z80
                    > USED AT LINE 11 IN serial.z80
                    > USED AT LINE 36 IN serial.z80
TRUEE:              00-1 DEFINED AT LINE 56 IN constants.z80
                    > USED AT LINE 26 IN core-io.z80
FALSEE:             0000 DEFINED AT LINE 57 IN constants.z80
                    > USED AT LINE 19 IN core-io.z80
VVCODE:             0B29 DEFINED AT LINE 47
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 49
                    > USED AT LINE 50
VVNAME:             164C DEFINED AT LINE 15
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
VVLINK:             1650 DEFINED AT LINE 17
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
VVUSER:             0A7C DEFINED AT LINE 40
                    > USED AT LINE 39
                    > USED AT LINE 40
                    > USED AT LINE 39
                    > USED AT LINE 40
                    > USED AT LINE 39
                    > USED AT LINE 40
                    > USED AT LINE 39
                    > USED AT LINE 40
                    > USED AT LINE 39
                    > USED AT LINE 40
                    > USED AT LINE 39
                    > USED AT LINE 40
                    > USED AT LINE 39
                    > USED AT LINE 40
                    > USED AT LINE 39
                    > USED AT LINE 40
                    > USED AT LINE 39
                    > USED AT LINE 40
                    > USED AT LINE 39
                    > USED AT LINE 40
                    > USED AT LINE 39
                    > USED AT LINE 40
                    > USED AT LINE 39
                    > USED AT LINE 40
                    > USED AT LINE 39
                    > USED AT LINE 40
                    > USED AT LINE 65 IN core-user.z80
                    > USED AT LINE 39
                    > USED AT LINE 40
                    > USED AT LINE 39
                    > USED AT LINE 40
                    > USED AT LINE 39
                    > USED AT LINE 40
                    > USED AT LINE 39
                    > USED AT LINE 40
                    > USED AT LINE 39
                    > USED AT LINE 40
                    > USED AT LINE 39
                    > USED AT LINE 40
                    > USED AT LINE 96 IN core-user.z80
                    > USED AT LINE 39
                    > USED AT LINE 40
                    > USED AT LINE 102 IN core-user.z80
                    > USED AT LINE 39
                    > USED AT LINE 40
                    > USED AT LINE 39
                    > USED AT LINE 40
                    > USED AT LINE 39
                    > USED AT LINE 40
                    > USED AT LINE 39
                    > USED AT LINE 40
RESET:              0000 DEFINED AT LINE 10
                    > USED AT LINE 29
SERIALINT:          0038 DEFINED AT LINE 2 IN interrupt.z80
NOTFULL:            004D DEFINED AT LINE 17 IN interrupt.z80
                    > USED AT LINE 13 IN interrupt.z80
NOTWRAP:            0059 DEFINED AT LINE 23 IN interrupt.z80
                    > USED AT LINE 21 IN interrupt.z80
RTS0:               006D DEFINED AT LINE 33 IN interrupt.z80
                    > USED AT LINE 7 IN interrupt.z80
                    > USED AT LINE 15 IN interrupt.z80
                    > USED AT LINE 30 IN interrupt.z80
INIT:               0072 DEFINED AT LINE 15
                    > USED AT LINE 11
LOOP:               0096 DEFINED AT LINE 38
                    > USED AT LINE 41
INIT_IO:            009F DEFINED AT LINE 4 IN serial.z80
                    > USED AT LINE 10 IN core-io.z80
RXA:                00B3 DEFINED AT LINE 16 IN serial.z80
                    > USED AT LINE 39
                    > USED AT LINE 22 IN core-io.z80
WAITFORCHAR:        00B3 DEFINED AT LINE 17 IN serial.z80
                    > USED AT LINE 20 IN serial.z80
NOTRDWRAP:          00C7 DEFINED AT LINE 28 IN serial.z80
                    > USED AT LINE 26 IN serial.z80
RTS1:               00DA DEFINED AT LINE 38 IN serial.z80
                    > USED AT LINE 35 IN serial.z80
TXA:                00DE DEFINED AT LINE 44 IN serial.z80
                    > USED AT LINE 40
                    > USED AT LINE 63 IN serial.z80
                    > USED AT LINE 34 IN core-io.z80
CONOUT1:            00DF DEFINED AT LINE 46 IN serial.z80
                    > USED AT LINE 49 IN serial.z80
CKINCHAR:           00E9 DEFINED AT LINE 54 IN serial.z80
                    > USED AT LINE 17 IN core-io.z80
PRINTSZ:            00EF DEFINED AT LINE 59 IN serial.z80
                    > USED AT LINE 37
                    > USED AT LINE 65 IN serial.z80
                    > USED AT LINE 49 IN core-kernel.z80
DEFAULTS:           00FA DEFINED AT LINE 3 IN defaults.z80
                    > USED AT LINE 41 IN constants.z80
                    > USED AT LINE 19
DEFSP0:             00FA DEFINED AT LINE 5 IN defaults.z80
DEFRP0:             00FC DEFINED AT LINE 6 IN defaults.z80
DEFQKEY:            00FE DEFINED AT LINE 7 IN defaults.z80
DEFTEMIT:           0100 DEFINED AT LINE 8 IN defaults.z80
DEFTEXPECT:         0102 DEFINED AT LINE 9 IN defaults.z80
DEFTTAP:            0104 DEFINED AT LINE 10 IN defaults.z80
DEFTECHO:           0106 DEFINED AT LINE 11 IN defaults.z80
DEFTPROMPT:         0108 DEFINED AT LINE 12 IN defaults.z80
DEFBASE:            010A DEFINED AT LINE 13 IN defaults.z80
DEFTMP:             010C DEFINED AT LINE 14 IN defaults.z80
DEFSPAN:            010E DEFINED AT LINE 15 IN defaults.z80
DEFPIN:             0110 DEFINED AT LINE 16 IN defaults.z80
DEFNTIB:            0112 DEFINED AT LINE 17 IN defaults.z80
DEFTIB:             0114 DEFINED AT LINE 18 IN defaults.z80
DEFCSP:             0116 DEFINED AT LINE 19 IN defaults.z80
DEFTEVAL:           0118 DEFINED AT LINE 20 IN defaults.z80
DEFTNUM:            011A DEFINED AT LINE 21 IN defaults.z80
DEFHLD:             011C DEFINED AT LINE 22 IN defaults.z80
DEFHANDLER:         011E DEFINED AT LINE 23 IN defaults.z80
DEFCONTEXT:         0120 DEFINED AT LINE 24 IN defaults.z80
DEFVOCABS:          0122 DEFINED AT LINE 25 IN defaults.z80
DEFCURRENT:         0124 DEFINED AT LINE 26 IN defaults.z80
DEFVOCABLP:         0126 DEFINED AT LINE 27 IN defaults.z80
DEFCP:              0128 DEFINED AT LINE 28 IN defaults.z80
DEFNP:              012A DEFINED AT LINE 29 IN defaults.z80
DEFLAST:            012C DEFINED AT LINE 30 IN defaults.z80
DEFFORTH:           012E DEFINED AT LINE 31 IN defaults.z80
DEFVOCABL:          0130 DEFINED AT LINE 32 IN defaults.z80
DEFCOLD:            0132 DEFINED AT LINE 33 IN defaults.z80
END_DEFAULTS:       0134 DEFINED AT LINE 34 IN defaults.z80
                    > USED AT LINE 41 IN constants.z80
TWOSTAR:            0134 DEFINED AT LINE 11
                    > USED AT LINE 380 IN core-alu.z80
VVLEN:              0B24 DEFINED AT LINE 45
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 48
                    > USED AT LINE 49
ZLESS:              0140 DEFINED AT LINE 11
                    > USED AT LINE 94 IN core-alu.z80
                    > USED AT LINE 121 IN core-alu.z80
                    > USED AT LINE 123 IN core-alu.z80
                    > USED AT LINE 134 IN core-alu.z80
                    > USED AT LINE 136 IN core-alu.z80
                    > USED AT LINE 272 IN core-alu.z80
                    > USED AT LINE 275 IN core-alu.z80
                    > USED AT LINE 296 IN core-alu.z80
                    > USED AT LINE 45 IN core-format.z80
ANDD:               014C DEFINED AT LINE 11
ORR:                015A DEFINED AT LINE 11
XORR:               0168 DEFINED AT LINE 11
                    > USED AT LINE 102 IN core-alu.z80
                    > USED AT LINE 119 IN core-alu.z80
                    > USED AT LINE 133 IN core-alu.z80
                    > USED AT LINE 351 IN core-alu.z80
PLUS:               0176 DEFINED AT LINE 11
                    > USED AT LINE 84 IN core-alu.z80
                    > USED AT LINE 89 IN core-alu.z80
                    > USED AT LINE 146 IN core-memory.z80
                    > USED AT LINE 84 IN core-stacks.z80
DPLUS:              0180 DEFINED AT LINE 11
INVER:              0196 DEFINED AT LINE 11
                    > USED AT LINE 72 IN core-alu.z80
                    > USED AT LINE 82 IN core-alu.z80
                    > USED AT LINE 37 IN core-utils.z80
NEGAT:              01A2 DEFINED AT LINE 11
                    > USED AT LINE 89 IN core-alu.z80
                    > USED AT LINE 95 IN core-alu.z80
                    > USED AT LINE 273 IN core-alu.z80
                    > USED AT LINE 276 IN core-alu.z80
ONEPLUS:            01AC DEFINED AT LINE 11
                    > USED AT LINE 72 IN core-alu.z80
DNEGATE:            01B8 DEFINED AT LINE 11
                    > USED AT LINE 269 IN core-alu.z80
                    > USED AT LINE 353 IN core-alu.z80
SUBB:               01CE DEFINED AT LINE 11
                    > USED AT LINE 123 IN core-alu.z80
                    > USED AT LINE 136 IN core-alu.z80
                    > USED AT LINE 162 IN core-alu.z80
                    > USED AT LINE 163 IN core-alu.z80
                    > USED AT LINE 65 IN core-does.z80
ABSS:               01D8 DEFINED AT LINE 11
                    > USED AT LINE 271 IN core-alu.z80
ABS1:               01E6 DEFINED AT LINE 96 IN core-alu.z80
EQUAL:              01E8 DEFINED AT LINE 11
ZEROEQUALS:         01F2 DEFINED AT LINE 11
                    > USED AT LINE 102 IN core-alu.z80
ULESS:              0200 DEFINED AT LINE 11
ULES1:              0214 DEFINED AT LINE 122 IN core-alu.z80
                    > USED AT LINE 120 IN core-alu.z80
NIP:                021A DEFINED AT LINE 11
                    > USED AT LINE 121 IN core-alu.z80
                    > USED AT LINE 182 IN core-alu.z80
                    > USED AT LINE 311 IN core-alu.z80
                    > USED AT LINE 365 IN core-alu.z80
LESS:               0224 DEFINED AT LINE 11
                    > USED AT LINE 141 IN core-alu.z80
                    > USED AT LINE 146 IN core-alu.z80
LESS1:              0238 DEFINED AT LINE 135 IN core-alu.z80
GREATERTHAN:        023E DEFINED AT LINE 11
                    > USED AT LINE 154 IN core-alu.z80
MAX:                0248 DEFINED AT LINE 11
MAX1:               0256 DEFINED AT LINE 148 IN core-alu.z80
MIN:                025A DEFINED AT LINE 11
MIN1:               0268 DEFINED AT LINE 156 IN core-alu.z80
WITHI:              026C DEFINED AT LINE 11
UMPLUS:             027E DEFINED AT LINE 11
                    > USED AT LINE 56 IN core-alu.z80
UMP2:               0286 DEFINED AT LINE 173 IN core-alu.z80
UMP1:               0287 DEFINED AT LINE 175 IN core-alu.z80
                    > USED AT LINE 172 IN core-alu.z80
UMMOD:              028E DEFINED AT LINE 11
                    > USED AT LINE 142 IN core-memory.z80
UMSLASHMOD2:        0298 DEFINED AT LINE 11
                    > USED AT LINE 182 IN core-alu.z80
UMMOD11:            029C DEFINED AT LINE 192 IN core-alu.z80
UMMOD12:            02A7 DEFINED AT LINE 203 IN core-alu.z80
UMMOD2:             02C5 DEFINED AT LINE 223 IN core-alu.z80
                    > USED AT LINE 191 IN core-alu.z80
UMMOD1:             02CB DEFINED AT LINE 226 IN core-alu.z80
                    > USED AT LINE 202 IN core-alu.z80
UMMOD4:             02D1 DEFINED AT LINE 229 IN core-alu.z80
                    > USED AT LINE 247 IN core-alu.z80
UMMOD13:            02D9 DEFINED AT LINE 237 IN core-alu.z80
UMMOD3:             02DF DEFINED AT LINE 244 IN core-alu.z80
                    > USED AT LINE 209 IN core-alu.z80
                    > USED AT LINE 213 IN core-alu.z80
                    > USED AT LINE 258 IN core-alu.z80
UMMOD14:            02E3 DEFINED AT LINE 248 IN core-alu.z80
UMMOD5:             02E9 DEFINED AT LINE 255 IN core-alu.z80
                    > USED AT LINE 236 IN core-alu.z80
UMMOD15:            02ED DEFINED AT LINE 259 IN core-alu.z80
FMSLASHMOD:         02EE DEFINED AT LINE 11
FMMOD1:             0308 DEFINED AT LINE 270 IN core-alu.z80
                    > USED AT LINE 268 IN core-alu.z80
FMMOD2:             031C DEFINED AT LINE 274 IN core-alu.z80
FMMOD4:             0336 DEFINED AT LINE 278 IN core-alu.z80
FMMOD6:             034C DEFINED AT LINE 282 IN core-alu.z80
FMMOD3:             034E DEFINED AT LINE 284 IN core-alu.z80
ONESUBB:            0360 DEFINED AT LINE 11
STOD:               036C DEFINED AT LINE 11
                    > USED AT LINE 301 IN core-alu.z80
SLASHMOD:           0376 DEFINED AT LINE 11
                    > USED AT LINE 306 IN core-alu.z80
                    > USED AT LINE 311 IN core-alu.z80
MODD:               0384 DEFINED AT LINE 11
SLASH:              038E DEFINED AT LINE 11
UMSTAR:             0398 DEFINED AT LINE 11
                    > USED AT LINE 346 IN core-alu.z80
                    > USED AT LINE 352 IN core-alu.z80
UMSTAR1:            03A0 DEFINED AT LINE 323 IN core-alu.z80
                    > USED AT LINE 336 IN core-alu.z80
UMSTAR2:            03A7 DEFINED AT LINE 329 IN core-alu.z80
UMSTAR5:            03AA DEFINED AT LINE 332 IN core-alu.z80
UMSTAR3:            03AB DEFINED AT LINE 334 IN core-alu.z80
                    > USED AT LINE 328 IN core-alu.z80
                    > USED AT LINE 331 IN core-alu.z80
UMSTAR4:            03AE DEFINED AT LINE 337 IN core-alu.z80
STAR:               03B8 DEFINED AT LINE 11
MSTAR:              03C2 DEFINED AT LINE 11
                    > USED AT LINE 360 IN core-alu.z80
MSTAR1:             03DE DEFINED AT LINE 354 IN core-alu.z80
STARSLASHMOD:       03E0 DEFINED AT LINE 11
                    > USED AT LINE 365 IN core-alu.z80
STARSLASH:          03EE DEFINED AT LINE 11
CELLP:              03F8 DEFINED AT LINE 11
                    > USED AT LINE 26 IN core-compiler.z80
CELLM:              0404 DEFINED AT LINE 11
CELLS:              0410 DEFINED AT LINE 11
CHARPLUS:           0418 DEFINED AT LINE 11
COMMA:              0424 DEFINED AT LINE 11
BCOMP:              0436 DEFINED AT LINE 11
COMPI:              043A DEFINED AT LINE 11
                    > USED AT LINE 4 IN core-control.z80
                    > USED AT LINE 14 IN core-control.z80
                    > USED AT LINE 19 IN core-control.z80
                    > USED AT LINE 24 IN core-control.z80
FOR:                044C DEFINED AT LINE 11
BEGIN:              0458 DEFINED AT LINE 11
NEXT:               0460 DEFINED AT LINE 11
UNTIL:              046C DEFINED AT LINE 11
AGAIN:              0478 DEFINED AT LINE 11
UNLOOP:             0484 DEFINED AT LINE 11
DOCONST:            0494 DEFINED AT LINE 11
DOLIST:             04A0 DEFINED AT LINE 11
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 38
                    > USED AT LINE 38
                    > USED AT LINE 38
                    > USED AT LINE 38
                    > USED AT LINE 38
                    > USED AT LINE 38
                    > USED AT LINE 38
                    > USED AT LINE 38
                    > USED AT LINE 38
                    > USED AT LINE 38
                    > USED AT LINE 38
                    > USED AT LINE 38
                    > USED AT LINE 38
                    > USED AT LINE 38
                    > USED AT LINE 38
                    > USED AT LINE 38
                    > USED AT LINE 38
                    > USED AT LINE 38
                    > USED AT LINE 38
                    > USED AT LINE 38
                    > USED AT LINE 38
                    > USED AT LINE 38
                    > USED AT LINE 38
                    > USED AT LINE 38
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
DOLIT:              04B2 DEFINED AT LINE 11
                    > USED AT LINE 67 IN core-alu.z80
                    > USED AT LINE 77 IN core-alu.z80
                    > USED AT LINE 83 IN core-alu.z80
                    > USED AT LINE 280 IN core-alu.z80
                    > USED AT LINE 281 IN core-alu.z80
                    > USED AT LINE 286 IN core-alu.z80
                    > USED AT LINE 291 IN core-alu.z80
                    > USED AT LINE 370 IN core-alu.z80
                    > USED AT LINE 375 IN core-alu.z80
                    > USED AT LINE 386 IN core-alu.z80
                    > USED AT LINE 64 IN core-does.z80
                    > USED AT LINE 4 IN core-format.z80
                    > USED AT LINE 5 IN core-format.z80
                    > USED AT LINE 6 IN core-format.z80
                    > USED AT LINE 11 IN core-format.z80
                    > USED AT LINE 46 IN core-format.z80
                    > USED AT LINE 69 IN core-format.z80
                    > USED AT LINE 74 IN core-format.z80
                    > USED AT LINE 79 IN core-format.z80
                    > USED AT LINE 84 IN core-format.z80
                    > USED AT LINE 85 IN core-format.z80
                    > USED AT LINE 86 IN core-format.z80
                    > USED AT LINE 88 IN core-format.z80
                    > USED AT LINE 69 IN core-io.z80
                    > USED AT LINE 80 IN core-io.z80
                    > USED AT LINE 95 IN core-io.z80
                    > USED AT LINE 104 IN core-io.z80
                    > USED AT LINE 8 IN core-kernel.z80
                    > USED AT LINE 102 IN core-memory.z80
                    > USED AT LINE 113 IN core-memory.z80
                    > USED AT LINE 141 IN core-memory.z80
                    > USED AT LINE 144 IN core-memory.z80
                    > USED AT LINE 83 IN core-stacks.z80
                    > USED AT LINE 90 IN core-stacks.z80
                    > USED AT LINE 8 IN core-utils.z80
                    > USED AT LINE 16 IN core-utils.z80
                    > USED AT LINE 21 IN core-utils.z80
                    > USED AT LINE 31 IN core-utils.z80
                    > USED AT LINE 34 IN core-utils.z80
DOVAR:              04BE DEFINED AT LINE 11
                    > USED AT LINE 41 IN core-does.z80
UP:                 04C6 DEFINED AT LINE 11
DOUSE:              04CE DEFINED AT LINE 11
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
EXIT:               04DE DEFINED AT LINE 11
                    > USED AT LINE 97 IN core-alu.z80
                    > USED AT LINE 149 IN core-alu.z80
                    > USED AT LINE 157 IN core-alu.z80
                    > USED AT LINE 283 IN core-alu.z80
                    > USED AT LINE 355 IN core-alu.z80
                    > USED AT LINE 380 IN core-alu.z80
                    > USED AT LINE 9 IN core-control.z80
                    > USED AT LINE 36 IN core-does.z80
                    > USED AT LINE 40 IN core-format.z80
                    > USED AT LINE 48 IN core-format.z80
                    > USED AT LINE 90 IN core-format.z80
                    > USED AT LINE 49 IN core-io.z80
                    > USED AT LINE 64 IN core-io.z80
                    > USED AT LINE 84 IN core-io.z80
                    > USED AT LINE 98 IN core-io.z80
                    > USED AT LINE 144 IN core-io.z80
                    > USED AT LINE 56 IN core-kernel.z80
                    > USED AT LINE 146 IN core-memory.z80
                    > USED AT LINE 58 IN core-stacks.z80
                    > USED AT LINE 11 IN core-utils.z80
                    > USED AT LINE 24 IN core-utils.z80
                    > USED AT LINE 45 IN core-utils.z80
                    > USED AT LINE 58 IN core-utils.z80
DODO:               04EE DEFINED AT LINE 11
DOLOOP:             0510 DEFINED AT LINE 11
                    > USED AT LINE 82 IN core-io.z80
DOLOOP1:            0516 DEFINED AT LINE 75 IN core-does.z80
                    > USED AT LINE 85 IN core-does.z80
DOLOOP2:            0521 DEFINED AT LINE 82 IN core-does.z80
                    > USED AT LINE 74 IN core-does.z80
DOPLOOP:            0534 DEFINED AT LINE 11
DOPLP1:             0558 DEFINED AT LINE 117 IN core-does.z80
                    > USED AT LINE 107 IN core-does.z80
DONXT:              0568 DEFINED AT LINE 11
                    > USED AT LINE 14 IN core-control.z80
                    > USED AT LINE 97 IN core-io.z80
                    > USED AT LINE 10 IN core-utils.z80
                    > USED AT LINE 23 IN core-utils.z80
                    > USED AT LINE 39 IN core-utils.z80
                    > USED AT LINE 56 IN core-utils.z80
DECHILO:            0581 DEFINED AT LINE 146 IN core-does.z80
                    > USED AT LINE 139 IN core-does.z80
DECLOW:             0583 DEFINED AT LINE 149 IN core-does.z80
                    > USED AT LINE 135 IN core-does.z80
DIGIT:              0590 DEFINED AT LINE 11
                    > USED AT LINE 12 IN core-format.z80
EXTRC:              05AA DEFINED AT LINE 11
BDIGS:              05BC DEFINED AT LINE 11
                    > USED AT LINE 62 IN core-format.z80
                    > USED AT LINE 128 IN core-io.z80
                    > USED AT LINE 135 IN core-io.z80
HOLD:               05C8 DEFINED AT LINE 11
DIG:                05E0 DEFINED AT LINE 11
                    > USED AT LINE 36 IN core-format.z80
DIGS:               05EE DEFINED AT LINE 11
                    > USED AT LINE 62 IN core-format.z80
                    > USED AT LINE 135 IN core-io.z80
DIGS1:              05F2 DEFINED AT LINE 35 IN core-format.z80
                    > USED AT LINE 38 IN core-format.z80
DIGS2:              05FE DEFINED AT LINE 39 IN core-format.z80
                    > USED AT LINE 37 IN core-format.z80
SIGN:               0600 DEFINED AT LINE 11
                    > USED AT LINE 63 IN core-format.z80
SIGN1:              0610 DEFINED AT LINE 47 IN core-format.z80
EDIGS:              0612 DEFINED AT LINE 11
                    > USED AT LINE 63 IN core-format.z80
STR:                0624 DEFINED AT LINE 11
                    > USED AT LINE 146 IN core-io.z80
HEX:                063A DEFINED AT LINE 11
DECIMAL:            0648 DEFINED AT LINE 11
BLANK:              0656 DEFINED AT LINE 11
                    > USED AT LINE 74 IN core-io.z80
TCHAR:              0660 DEFINED AT LINE 11
TCHA1:              0680 DEFINED AT LINE 89 IN core-format.z80
                    > USED AT LINE 87 IN core-format.z80
STOIO:              0682 DEFINED AT LINE 11
                    > USED AT LINE 6 IN core-kernel.z80
QRX:                068C DEFINED AT LINE 11
                    > USED AT LINE 7 IN defaults.z80
QRX1:               0697 DEFINED AT LINE 21 IN core-io.z80
                    > USED AT LINE 18 IN core-io.z80
QRX2:               06A1 DEFINED AT LINE 27 IN core-io.z80
                    > USED AT LINE 20 IN core-io.z80
TXSTO:              06A8 DEFINED AT LINE 11
                    > USED AT LINE 8 IN defaults.z80
                    > USED AT LINE 11 IN defaults.z80
QKEY:               06B4 DEFINED AT LINE 11
                    > USED AT LINE 47 IN core-io.z80
                    > USED AT LINE 60 IN core-io.z80
KEY:                06C0 DEFINED AT LINE 11
                    > USED AT LINE 62 IN core-io.z80
KEY1:               06C4 DEFINED AT LINE 46 IN core-io.z80
                    > USED AT LINE 48 IN core-io.z80
EMIT:               06CC DEFINED AT LINE 11
                    > USED AT LINE 74 IN core-io.z80
NUFQ:               06D8 DEFINED AT LINE 11
                    > USED AT LINE 37 IN core-utils.z80
NUFQ1:              06EE DEFINED AT LINE 63 IN core-io.z80
                    > USED AT LINE 61 IN core-io.z80
PACE:               06F0 DEFINED AT LINE 11
SPACE:              06FC DEFINED AT LINE 11
                    > USED AT LINE 82 IN core-io.z80
                    > USED AT LINE 136 IN core-io.z80
                    > USED AT LINE 146 IN core-io.z80
                    > USED AT LINE 17 IN core-utils.z80
                    > USED AT LINE 36 IN core-utils.z80
                    > USED AT LINE 36 IN core-utils.z80
SPACES:             0706 DEFINED AT LINE 11
                    > USED AT LINE 130 IN core-io.z80
SPACES1:            0716 DEFINED AT LINE 81 IN core-io.z80
SPACES2:            071C DEFINED AT LINE 83 IN core-io.z80
TYPEE:              071E DEFINED AT LINE 11
                    > USED AT LINE 130 IN core-io.z80
                    > USED AT LINE 136 IN core-io.z80
TYPE1:              0728 DEFINED AT LINE 93 IN core-io.z80
                    > USED AT LINE 97 IN core-io.z80
TYPE2:              0734 DEFINED AT LINE 96 IN core-io.z80
                    > USED AT LINE 92 IN core-io.z80
CR:                 073C DEFINED AT LINE 11
                    > USED AT LINE 34 IN core-utils.z80
                    > USED AT LINE 50 IN core-utils.z80
DOSTR:              074E DEFINED AT LINE 11
                    > USED AT LINE 120 IN core-io.z80
DOTQP:              0766 DEFINED AT LINE 11
                    > USED AT LINE 44
UDOTR:              0772 DEFINED AT LINE 11
UDOT:               078A DEFINED AT LINE 11
                    > USED AT LINE 144 IN core-io.z80
DOT:                079A DEFINED AT LINE 11
DOT1:               07B0 DEFINED AT LINE 145 IN core-io.z80
                    > USED AT LINE 143 IN core-io.z80
COLD:               07B8 DEFINED AT LINE 11
                    > USED AT LINE 30
HELLO:              07C8 DEFINED AT LINE 10 IN core-kernel.z80
                    > USED AT LINE 8 IN core-kernel.z80
QUIT:               07D8 DEFINED AT LINE 11
                    > USED AT LINE 9 IN core-kernel.z80
EXECUTE:            07DA DEFINED AT LINE 11
QBRAN:              07DE DEFINED AT LINE 11
                    > USED AT LINE 120 IN core-alu.z80
                    > USED AT LINE 268 IN core-alu.z80
                    > USED AT LINE 19 IN core-control.z80
                    > USED AT LINE 37 IN core-format.z80
                    > USED AT LINE 45 IN core-format.z80
                    > USED AT LINE 87 IN core-format.z80
                    > USED AT LINE 48 IN core-io.z80
                    > USED AT LINE 61 IN core-io.z80
                    > USED AT LINE 79 IN core-io.z80
                    > USED AT LINE 143 IN core-io.z80
                    > USED AT LINE 143 IN core-memory.z80
                    > USED AT LINE 55 IN core-stacks.z80
                    > USED AT LINE 38 IN core-utils.z80
BRAN:               07EE DEFINED AT LINE 11
                    > USED AT LINE 24 IN core-control.z80
                    > USED AT LINE 38 IN core-format.z80
                    > USED AT LINE 92 IN core-io.z80
                    > USED AT LINE 29 IN core-kernel.z80
                    > USED AT LINE 5 IN core-utils.z80
                    > USED AT LINE 18 IN core-utils.z80
                    > USED AT LINE 40 IN core-utils.z80
                    > USED AT LINE 52 IN core-utils.z80
TYPECSTR:           07FA DEFINED AT LINE 11
                    > USED AT LINE 56 IN core-kernel.z80
THROWX:             0808 DEFINED AT LINE 11
                    > USED AT LINE 225 IN core-alu.z80
                    > USED AT LINE 228 IN core-alu.z80
STORE:              0810 DEFINED AT LINE 11
                    > USED AT LINE 13 IN core-compiler.z80
AT:                 081E DEFINED AT LINE 11
                    > USED AT LINE 47 IN core-does.z80
                    > USED AT LINE 24 IN core-format.z80
                    > USED AT LINE 30 IN core-format.z80
                    > USED AT LINE 41 IN core-io.z80
                    > USED AT LINE 54 IN core-io.z80
                    > USED AT LINE 142 IN core-io.z80
                    > USED AT LINE 108 IN core-memory.z80
                    > USED AT LINE 30 IN core-utils.z80
CSTORE:             082A DEFINED AT LINE 11
CAT:                0836 DEFINED AT LINE 11
                    > USED AT LINE 94 IN core-io.z80
                    > USED AT LINE 103 IN core-memory.z80
                    > USED AT LINE 7 IN core-utils.z80
                    > USED AT LINE 20 IN core-utils.z80
RAT:                0842 DEFINED AT LINE 11
                    > USED AT LINE 271 IN core-alu.z80
                    > USED AT LINE 277 IN core-alu.z80
                    > USED AT LINE 109 IN core-io.z80
                    > USED AT LINE 54 IN core-utils.z80
RPAT:               0850 DEFINED AT LINE 11
RPSTO:              085C DEFINED AT LINE 11
SPAT:               0868 DEFINED AT LINE 11
                    > USED AT LINE 84 IN core-stacks.z80
                    > USED AT LINE 89 IN core-stacks.z80
SPSTO:              0876 DEFINED AT LINE 11
COUNT:              0882 DEFINED AT LINE 11
                    > USED AT LINE 120 IN core-io.z80
HERE:               0894 DEFINED AT LINE 11
                    > USED AT LINE 12 IN core-compiler.z80
                    > USED AT LINE 9 IN core-control.z80
                    > USED AT LINE 113 IN core-memory.z80
PAD:                089E DEFINED AT LINE 11
                    > USED AT LINE 19 IN core-format.z80
                    > USED AT LINE 55 IN core-format.z80
ALGND:              08AC DEFINED AT LINE 11
                    > USED AT LINE 110 IN core-io.z80
ALGN1:              08CC DEFINED AT LINE 145 IN core-memory.z80
                    > USED AT LINE 143 IN core-memory.z80
GREETING:           08D0 DEFINED AT LINE 1 IN core-messages.z80
                    > USED AT LINE 36
ERR_DIVZERO:        08E1 DEFINED AT LINE 12 IN core-messages.z80
                    > USED AT LINE 224 IN core-alu.z80
ERR_OUTOFRANGE:     08F2 DEFINED AT LINE 13 IN core-messages.z80
                    > USED AT LINE 227 IN core-alu.z80
                    > USED AT LINE 281 IN core-alu.z80
                    > USED AT LINE 286 IN core-alu.z80
TOR:                0906 DEFINED AT LINE 11
                    > USED AT LINE 61 IN core-alu.z80
                    > USED AT LINE 82 IN core-alu.z80
                    > USED AT LINE 267 IN core-alu.z80
                    > USED AT LINE 301 IN core-alu.z80
                    > USED AT LINE 360 IN core-alu.z80
                    > USED AT LINE 26 IN core-compiler.z80
                    > USED AT LINE 4 IN core-control.z80
                    > USED AT LINE 64 IN core-does.z80
                    > USED AT LINE 61 IN core-format.z80
                    > USED AT LINE 91 IN core-io.z80
                    > USED AT LINE 110 IN core-io.z80
                    > USED AT LINE 128 IN core-io.z80
                    > USED AT LINE 63 IN core-stacks.z80
                    > USED AT LINE 78 IN core-stacks.z80
                    > USED AT LINE 4 IN core-utils.z80
                    > USED AT LINE 17 IN core-utils.z80
                    > USED AT LINE 32 IN core-utils.z80
                    > USED AT LINE 51 IN core-utils.z80
RFROM:              0918 DEFINED AT LINE 11
                    > USED AT LINE 62 IN core-alu.z80
                    > USED AT LINE 62 IN core-alu.z80
                    > USED AT LINE 84 IN core-alu.z80
                    > USED AT LINE 163 IN core-alu.z80
                    > USED AT LINE 272 IN core-alu.z80
                    > USED AT LINE 275 IN core-alu.z80
                    > USED AT LINE 279 IN core-alu.z80
                    > USED AT LINE 285 IN core-alu.z80
                    > USED AT LINE 352 IN core-alu.z80
                    > USED AT LINE 25 IN core-compiler.z80
                    > USED AT LINE 66 IN core-control.z80
                    > USED AT LINE 66 IN core-control.z80
                    > USED AT LINE 36 IN core-does.z80
                    > USED AT LINE 47 IN core-does.z80
                    > USED AT LINE 109 IN core-io.z80
                    > USED AT LINE 129 IN core-io.z80
                    > USED AT LINE 42 IN core-utils.z80
                    > USED AT LINE 44 IN core-utils.z80
DUPP:               092A DEFINED AT LINE 11
                    > USED AT LINE 94 IN core-alu.z80
                    > USED AT LINE 267 IN core-alu.z80
                    > USED AT LINE 296 IN core-alu.z80
                    > USED AT LINE 12 IN core-compiler.z80
                    > USED AT LINE 25 IN core-compiler.z80
                    > USED AT LINE 25 IN core-format.z80
                    > USED AT LINE 36 IN core-format.z80
                    > USED AT LINE 61 IN core-format.z80
                    > USED AT LINE 60 IN core-io.z80
                    > USED AT LINE 94 IN core-io.z80
                    > USED AT LINE 102 IN core-memory.z80
                    > USED AT LINE 141 IN core-memory.z80
                    > USED AT LINE 55 IN core-stacks.z80
                    > USED AT LINE 56 IN core-stacks.z80
                    > USED AT LINE 7 IN core-utils.z80
                    > USED AT LINE 20 IN core-utils.z80
DROP:               0932 DEFINED AT LINE 11
                    > USED AT LINE 56 IN core-alu.z80
                    > USED AT LINE 128 IN core-alu.z80
                    > USED AT LINE 134 IN core-alu.z80
                    > USED AT LINE 149 IN core-alu.z80
                    > USED AT LINE 157 IN core-alu.z80
                    > USED AT LINE 279 IN core-alu.z80
                    > USED AT LINE 285 IN core-alu.z80
                    > USED AT LINE 306 IN core-alu.z80
                    > USED AT LINE 346 IN core-alu.z80
                    > USED AT LINE 54 IN core-format.z80
                    > USED AT LINE 88 IN core-format.z80
                    > USED AT LINE 98 IN core-io.z80
                    > USED AT LINE 142 IN core-memory.z80
                    > USED AT LINE 68 IN core-stacks.z80
                    > USED AT LINE 68 IN core-stacks.z80
                    > USED AT LINE 11 IN core-utils.z80
                    > USED AT LINE 42 IN core-utils.z80
                    > USED AT LINE 44 IN core-utils.z80
SWAP:               093A DEFINED AT LINE 11
                    > USED AT LINE 61 IN core-alu.z80
                    > USED AT LINE 128 IN core-alu.z80
                    > USED AT LINE 141 IN core-alu.z80
                    > USED AT LINE 147 IN core-alu.z80
                    > USED AT LINE 155 IN core-alu.z80
                    > USED AT LINE 273 IN core-alu.z80
                    > USED AT LINE 12 IN core-format.z80
                    > USED AT LINE 103 IN core-memory.z80
                    > USED AT LINE 63 IN core-stacks.z80
OVER:               0946 DEFINED AT LINE 11
                    > USED AT LINE 162 IN core-alu.z80
                    > USED AT LINE 276 IN core-alu.z80
                    > USED AT LINE 65 IN core-does.z80
                    > USED AT LINE 55 IN core-format.z80
                    > USED AT LINE 129 IN core-io.z80
                    > USED AT LINE 73 IN core-stacks.z80
                    > USED AT LINE 73 IN core-stacks.z80
                    > USED AT LINE 16 IN core-utils.z80
QDUP:               0952 DEFINED AT LINE 11
                    > USED AT LINE 79 IN core-io.z80
QDUP1:              095E DEFINED AT LINE 57 IN core-stacks.z80
ROT:                0960 DEFINED AT LINE 11
                    > USED AT LINE 277 IN core-alu.z80
                    > USED AT LINE 78 IN core-stacks.z80
                    > USED AT LINE 35 IN core-utils.z80
                    > USED AT LINE 35 IN core-utils.z80
DDROP:              096E DEFINED AT LINE 11
                    > USED AT LINE 62 IN core-io.z80
DDUP:               0978 DEFINED AT LINE 11
                    > USED AT LINE 119 IN core-alu.z80
                    > USED AT LINE 133 IN core-alu.z80
                    > USED AT LINE 146 IN core-alu.z80
                    > USED AT LINE 154 IN core-alu.z80
                    > USED AT LINE 351 IN core-alu.z80
TWOSWAP:            0982 DEFINED AT LINE 11
PICK:               0990 DEFINED AT LINE 11
                    > USED AT LINE 54 IN core-utils.z80
DEPTH:              09A4 DEFINED AT LINE 11
                    > USED AT LINE 50 IN core-utils.z80
SZERO:              09BA DEFINED AT LINE 11
                    > USED AT LINE 89 IN core-stacks.z80
RZERO:              09C2 DEFINED AT LINE 11
TQKEY:              09CA DEFINED AT LINE 11
                    > USED AT LINE 41 IN core-io.z80
TEMIT:              09D2 DEFINED AT LINE 11
                    > USED AT LINE 54 IN core-io.z80
TEXPE:              09DA DEFINED AT LINE 11
TTAP:               09E2 DEFINED AT LINE 11
TECHO:              09EA DEFINED AT LINE 11
TPROM:              09F2 DEFINED AT LINE 11
BASE:               09FA DEFINED AT LINE 11
                    > USED AT LINE 30 IN core-format.z80
                    > USED AT LINE 142 IN core-io.z80
                    > USED AT LINE 30 IN core-utils.z80
TEMP:               0A02 DEFINED AT LINE 11
SPAN:               0A0A DEFINED AT LINE 11
INN:                0A12 DEFINED AT LINE 11
NTIB:               0A1A DEFINED AT LINE 11
CSP:                0A22 DEFINED AT LINE 11
TEVAL:              0A2A DEFINED AT LINE 11
TNUMB:              0A32 DEFINED AT LINE 11
HLD:                0A3A DEFINED AT LINE 11
                    > USED AT LINE 19 IN core-format.z80
                    > USED AT LINE 24 IN core-format.z80
                    > USED AT LINE 25 IN core-format.z80
                    > USED AT LINE 54 IN core-format.z80
HANDL:              0A42 DEFINED AT LINE 11
CNTXT:              0A4A DEFINED AT LINE 11
CRRNT:              0A52 DEFINED AT LINE 11
CP:                 0A5A DEFINED AT LINE 11
                    > USED AT LINE 13 IN core-compiler.z80
                    > USED AT LINE 108 IN core-memory.z80
NP:                 0A62 DEFINED AT LINE 11
LAST:               0A6A DEFINED AT LINE 11
VFRTH:              0A72 DEFINED AT LINE 11
UTYPE:              0A7A DEFINED AT LINE 11
UTYP1:              0A84 DEFINED AT LINE 6 IN core-utils.z80
                    > USED AT LINE 10 IN core-utils.z80
UTYP2:              0A92 DEFINED AT LINE 9 IN core-utils.z80
                    > USED AT LINE 5 IN core-utils.z80
DMP:                0A9A DEFINED AT LINE 11
PDUM1:              0AAE DEFINED AT LINE 19 IN core-utils.z80
                    > USED AT LINE 23 IN core-utils.z80
PDUM2:              0ABE DEFINED AT LINE 22 IN core-utils.z80
                    > USED AT LINE 18 IN core-utils.z80
DUMP:               0AC4 DEFINED AT LINE 11
DUMP1:              0AD8 DEFINED AT LINE 33 IN core-utils.z80
                    > USED AT LINE 39 IN core-utils.z80
DUMP2:              0AFC DEFINED AT LINE 41 IN core-utils.z80
                    > USED AT LINE 38 IN core-utils.z80
DUMP3:              0B00 DEFINED AT LINE 43 IN core-utils.z80
                    > USED AT LINE 40 IN core-utils.z80
DOTS:               0B0A DEFINED AT LINE 11
DOTS1:              0B18 DEFINED AT LINE 53 IN core-utils.z80
                    > USED AT LINE 56 IN core-utils.z80
DOTS2:              0B1E DEFINED AT LINE 55 IN core-utils.z80
                    > USED AT LINE 52 IN core-utils.z80
SPP:                2200 DEFINED AT LINE 3 IN variables.z80
                    > USED AT LINE 16
                    > USED AT LINE 5 IN defaults.z80
TIBB:               2200 DEFINED AT LINE 4 IN variables.z80
                    > USED AT LINE 18 IN defaults.z80
RPP:                2400 DEFINED AT LINE 6 IN variables.z80
                    > USED AT LINE 24
                    > USED AT LINE 6 IN defaults.z80
UPP:                2400 DEFINED AT LINE 7 IN variables.z80
                    > USED AT LINE 20
                    > USED AT LINE 42 IN core-does.z80
VARSPP:             2400 DEFINED AT LINE 9 IN variables.z80
VARRPP:             2402 DEFINED AT LINE 10 IN variables.z80
VARQKEY:            2404 DEFINED AT LINE 11 IN variables.z80
VARTEMIT:           2406 DEFINED AT LINE 12 IN variables.z80
VARTEXPECT:         2408 DEFINED AT LINE 13 IN variables.z80
VARTTAP:            240A DEFINED AT LINE 14 IN variables.z80
VARTECHO:           240C DEFINED AT LINE 15 IN variables.z80
VARTPROMPT:         240E DEFINED AT LINE 16 IN variables.z80
VARBASE:            2410 DEFINED AT LINE 17 IN variables.z80
VARTMP:             2412 DEFINED AT LINE 18 IN variables.z80
VARSPAN:            2414 DEFINED AT LINE 19 IN variables.z80
VARPIN:             2416 DEFINED AT LINE 20 IN variables.z80
VARNTIB:            2418 DEFINED AT LINE 21 IN variables.z80
VARTIB:             241A DEFINED AT LINE 22 IN variables.z80
VARCSP:             241C DEFINED AT LINE 23 IN variables.z80
VARTEVAL:           241E DEFINED AT LINE 24 IN variables.z80
VARTNUM:            2420 DEFINED AT LINE 25 IN variables.z80
VARHLD:             2422 DEFINED AT LINE 26 IN variables.z80
VARHANDLER:         2424 DEFINED AT LINE 27 IN variables.z80
VARCONTEXT:         2426 DEFINED AT LINE 28 IN variables.z80
VARVOCABS:          2428 DEFINED AT LINE 29 IN variables.z80
VARCURRENT:         242A DEFINED AT LINE 30 IN variables.z80
VARVOCABLP:         242C DEFINED AT LINE 31 IN variables.z80
VARCP:              242E DEFINED AT LINE 32 IN variables.z80
VARNP:              2430 DEFINED AT LINE 33 IN variables.z80
VARLAST:            2432 DEFINED AT LINE 34 IN variables.z80
VARFORTH:           2434 DEFINED AT LINE 35 IN variables.z80
VARVOCABL:          2436 DEFINED AT LINE 36 IN variables.z80
SERINPTR:           2438 DEFINED AT LINE 38 IN variables.z80
                    > USED AT LINE 17 IN interrupt.z80
                    > USED AT LINE 23 IN interrupt.z80
                    > USED AT LINE 7 IN serial.z80
SERRDPTR:           243A DEFINED AT LINE 39 IN variables.z80
                    > USED AT LINE 8 IN serial.z80
                    > USED AT LINE 22 IN serial.z80
                    > USED AT LINE 30 IN serial.z80
SERBUFUSED:         243C DEFINED AT LINE 40 IN variables.z80
                    > USED AT LINE 11 IN interrupt.z80
                    > USED AT LINE 26 IN interrupt.z80
                    > USED AT LINE 28 IN interrupt.z80
                    > USED AT LINE 10 IN serial.z80
                    > USED AT LINE 18 IN serial.z80
                    > USED AT LINE 31 IN serial.z80
                    > USED AT LINE 33 IN serial.z80
                    > USED AT LINE 55 IN serial.z80
SERBUF:             243E DEFINED AT LINE 41 IN variables.z80
                    > USED AT LINE 20 IN interrupt.z80
                    > USED AT LINE 22 IN interrupt.z80
                    > USED AT LINE 6 IN serial.z80
                    > USED AT LINE 25 IN serial.z80
                    > USED AT LINE 27 IN serial.z80
CPP:                247D DEFINED AT LINE 43 IN variables.z80
                    > USED AT LINE 28 IN defaults.z80
NPP:                FFFE DEFINED AT LINE 45 IN variables.z80
                    > USED AT LINE 29 IN defaults.z80

0000                          .ENGINE   mycomputer   
0000                TESTMODE:   EQU   0   
0000                MEM_SIZE:   EQU   $10000   ; MEM is 64K
0000                ROM_SIZE:   EQU   $2000   ; ROM is 8K
0000                RAM_SIZE:   EQU   MEM_SIZE - ROM_SIZE   ; RAM is 64K - 8K
0000                START_ROM:   EQU   BM   ; inclusive
0000                END_ROM:   EQU   BM + ROM_SIZE   ; exclusive
0000                START_RAM:   EQU   BM + ROM_SIZE   ; inclusive
0000                END_RAM:   EQU   START_RAM + RAM_SIZE   ; exclusive
0000                BM:       EQU   0   ; bottom of ROM memory
0000                EM:       EQU   BM + MEM_SIZE   
0000                COMPO:    EQU   $20   ;lexicon compile only bit
0000                IMEDD:    EQU   $40   ;lexicon immediate bit
0000                MASKK:    EQU   $1F   ;lexicon bit mask
0000                CHARR:    EQU   1   ;byte size of a character
0000                CELLL:    EQU   2   
0000                BASEE:    EQU   10   ;BASE
0000                VOCSS:    EQU   8   ;depth of vocabulary stack
0000                MAXCHAR:   EQU   0FFh   ;Extended character set					                    ;  Use 07Fh for ASCII only
0000                MAXSIGNED:   EQU   07FFFh   ;max value of signed integer
0000                MAXUNSIGNED:   EQU   0FFFFh   ;max value of unsigned integer
0000                MAXNEGATIVE:   EQU   8000h   ;max value of negative integer
0000                BKSPP:    EQU   8   ;backspace
0000                LFF:      EQU   $0A   ;line feed
0000                CRR:      EQU   $0D   ;carriage return
0000                SPACEE:   EQU   $20   
0000                TIC:      EQU   $27   ;tick
0000                MINUSS:   EQU   $2D   
0000                UNDERSC:   EQU   $5F   
0000                CALLL:    EQU   $CD00   ; NOP followed by CALL opcodes
0000                US:       EQU   END_DEFAULTS - DEFAULTS   ;user area size
0000                RTS:      EQU   $100 * CELLL   ;return stack/TIB size
0000                DTS:      EQU   $100 * CELLL   ;data stack size
0000                RET_STACK_SIZE:   EQU   $100   
0000                DATA_STACK_SIZE:   EQU   $100   
0000                INT_ADDR:   EQU   $0038   
0000                SER_BUFSIZE:   EQU   $3F   
0000                SER_FULLSIZE:   EQU   $30   
0000                SER_EMPTYSIZE:   EQU   5   
0000                RTS_HIGH:   EQU   $D6   
0000                RTS_LOW:   EQU   $96   
0000                TRUEE:    EQU   -1   
0000                FALSEE:   EQU   0   
0000                             ; Initialize assembly variables
0000                VVCODE:   .SET   0   
0000                VVNAME:   .SET   END_ROM   
0000                VVLINK:   .SET   0   ;force a null link
0000                VVUSER:   .SET   0   ;first user variable offset
0000                .macro MCODE,aaLEX,aaNAME,aaLABEL
0000                             ; 
0000                 .align 2                                         ; force to cell boundary
0000                aaLABEL:                                              ; assembly label
0000                 vvCODE .set $
0000                 vvLEN  .set (aaLEX & 01FH) / CELLL              ; string cell count, round down
0000                 ORG vvNAME - ((vvLEN + 3) * CELLL)                                     ; ? needed
0000                 vvNAME .set $
0000                 DW vvCODE, vvLINK                               ; token pointer and link
0000                 vvLINK .set $                                   ; link points to a name string
0000                 DB aaLEX, aaNAME                                    ; name string
0000                 ORG vvCODE                                      ; restore code pointer
0000                .endm
0000                 
0000                .macro MCOLON,aaLEX,aaNAME,aaLABEL
0000                             ; 
0000                 mCODE aaLEX, aaNAME, aaLABEL
0000                 nop
0000                 CALL doLIST
0000                .endm
0000                 
0000                .macro MUSER,aaLEX,aaNAME,aaLABEL
0000                             ; 
0000                	mCODE aaLEX, aaNAME, aaLABEL
0000                 nop
0000                 CALL doLIST
0000                 DW DoUSE,vvUSER
0000                 vvUSER .set vvUSER + CELLL
0000                .endm
0000                 
0000                             ; .align 2
0000                .macro MDSTR,aaFUNC,aaSTR
0000                             ; 
0000                 DW aaFUNC                       ; function
0000                 vvLEN .set $                    ; save address of count byte
0000                 DB 0,aaSTR                      ; count byte and string
0000                 vvCODE .set $                   ; save code pointer
0000                ORG vvLEN                           ; point to count byte
0000                 DB vvCODE - vvLEN - 1           ; set count
0000                ORG vvCODE                          ; restore code pointer
0000                .endm
0000                 
0000                .macro HCODE,aaLEX,aaNAME,aaLABEL
0000                             ; 
0000                 .align 2                                         ; force to cell boundary
0000                aaLABEL:                                              ; assembly label
0000                .endm
0000                 
0000                .macro HCOLON,aaLEX,aaNAME,aaLABEL
0000                             ; 
0000                 hCODE aaLEX, aaNAME, aaLABEL
0000                 nop
0000                 CALL doLIST
0000                .endm
0000                 
0000                .macro HUSER,aaLEX,aaNAME,aaLABEL
0000                             ; 
0000                	hCODE aaLEX, aaNAME, aaLABEL
0000                 nop
0000                 CALL doLIST
0000                 DW DoUSE,vvUSER
0000                 vvUSER .set vvUSER + CELLL
0000                .endm
0000                 
0000                             ; 	LD	E,(HL)	                    ; 7t
0000                             ; 	INC	HL	                        ; 6t
0000                             ; 	LD	D,(HL)	                    ; 7t
0000                             ; 	INC	HL	                        ; 6t
0000                             ; 	EX	DE,HL	                    ; 4t
0000                             ; 	JP	(HL)	                    ; 4t
0000                .macro MNEXTHL,
0000                             ; 
0000                 JP (IY)
0000                .endm
0000                 
0000                .macro MNEXT,
0000                             ; 
0000                	EX	DE,HL	                    ; 4t
0000                 mNEXTHL                         ; 34t
0000                .endm
0000                 
0000                          .ORG   START_ROM   
0000   C3 6C 00     RESET:    JP   INIT   
0008                          .ORG   $08   
0008   FD 2A 7D 24  RST08:    LD   IY,(vRST08)   
000C   FD E9                  JP   (IY)   
0010                          .ORG   $10   
0010   FD 2A 7F 24  RST10:    LD   IY,(vRST10)   
0014   FD E9                  JP   (IY)   
0018                          .ORG   $18   
0018   FD 2A 81 24  RST18:    LD   IY,(vRST18)   
001C   FD E9                  JP   (IY)   
0020                          .ORG   $20   
0020   FD 2A 83 24  RST20:    LD   IY,(vRST20)   
0024   FD E9                  JP   (IY)   
0028                          .ORG   $28   
0028   FD 2A 85 24  RST28:    LD   IY,(vRST28)   
002C   FD E9                  JP   (IY)   
0030                          .ORG   $30   
0030   FD 2A 87 24  RST30:    LD   IY,(vRST30)   
0034   FD E9                  JP   (IY)   
0038                          .ORG   $38   
0038   FD 2A 89 24  RST38:    LD   IY,(vINT)   
003C   FD E9                  JP   (IY)   
0066                          .ORG   $66   
0066   FD 2A 8B 24  RST66:    LD   IY,(vNMI)   
006A   FD E9                  JP   (IY)   
006C                INIT:        
006C   21 93 00               LD   HL,SER_INTR   
006F   22 89 24               LD   (vINT),HL   
0072   21 00 22               LD   HL,SPP   ; Setup Forth data stack
0075   F9                     LD   SP,HL   ; also used as return stack by interrupts etc
0076   21 1A 01               LD   HL,DEFAULTS   ; initialize user variables with defaults
0079   11 45 24               LD   DE,UPP   
007C   01 3A 00               LD   BC,US   
007F   ED B0                  LDIR      
0081   DD 21 00 24            LD   IX,RPP   ; set up Forth return stack
0085   FD 21 D3 0D            LD   IY,NEXT_STEP   
0089   01 FF FF               LD   BC,-1   ; empty stack marker
008C   21 02 0E               LD   HL,HI   
008F   CD CC 0D               CALL   CALL_FORTH   
0092   76                     HALT      
0093                          IF   TESTMODE   
                              JP   TESTS_START   
0093                          ELSE      
0093                          ENDIF      
0093   F5           SER_INTR:   PUSH   AF   
0094   E5                     PUSH   HL   
0095   DB 80                  IN   A,($80)   
0097   E6 01                  AND   $01   ; Check if interupt due to read buffer full
0099   28 2D                  JR   Z,rts0   ; if not, ignore
009B   DB 81                  IN   A,($81)   
009D   F5                     PUSH   AF   
009E   3A 43 24               LD   A,(serBufUsed)   
00A1   FE 3F                  CP   SER_BUFSIZE   ; If full then ignore
00A3   20 03                  JR   NZ,notFull   
00A5   F1                     POP   AF   
00A6   18 20                  JR   rts0   
00A8   2A 3F 24     NOTFULL:   LD   HL,(serInPtr)   
00AB   23                     INC   HL   
00AC   7D                     LD   A,L   ; Only need to check low byte becasuse buffer<256 bytes
00AD   FE 3F                  CP   (SERBUF+SER_BUFSIZE) & $FF   
00AF   20 03                  JR   NZ,notWrap   
00B1   21 00 24               LD   HL,SERBUF   
00B4   22 3F 24     NOTWRAP:   LD   (serInPtr),HL   
00B7   F1                     POP   AF   
00B8   77                     LD   (HL),A   
00B9   3A 43 24               LD   A,(serBufUsed)   
00BC   3C                     INC   A   
00BD   32 43 24               LD   (serBufUsed),A   
00C0   FE 30                  CP   SER_FULLSIZE   
00C2   38 04                  JR   C,rts0   
00C4   3E D6                  LD   A,RTS_HIGH   
00C6   D3 80                  OUT   ($80),A   
00C8   E1           RTS0:     POP   HL   
00C9   F1                     POP   AF   
00CA   FD 21 D3 0D            LD   IY,NEXT_STEP   
00CE   FB                     EI      
00CF   ED 4D                  RETI      
00D1                             ; Modified from code by Grant Searle
00D1                             ; Minimum 6850 ACIA interrupt driven serial I/O
00D1                INIT_IO:      
00D1   F3                     DI      ; Disable interrupts
00D2   21 00 24               LD   HL,SERBUF   
00D5   22 3F 24               LD   (serInPtr),HL   
00D8   22 41 24               LD   (serRdPtr),HL   
00DB   AF                     XOR   A   
00DC   32 43 24               LD   (serBufUsed),A   
00DF   3E 96                  LD   A,RTS_LOW   
00E1   D3 80                  OUT   ($80),A   ; Initialise ACIA
00E3   FB                     EI      
00E4   C9                     RET      
00E5                RXA:         
00E5   E5                     PUSH   HL   
00E6   2A 41 24               LD   HL,(serRdPtr)   
00E9   23                     INC   HL   
00EA   7D                     LD   A,L   ; Only need to check low byte becasuse buffer<256 bytes
00EB   FE 3F                  CP   (SERBUF+SER_BUFSIZE) & $FF   
00ED   20 03                  JR   NZ,RXA1   
00EF   21 00 24               LD   HL,SERBUF   
00F2                RXA1:        
00F2   F3                     DI      
00F3   22 41 24               LD   (serRdPtr),HL   
00F6   3A 43 24               LD   A,(serBufUsed)   
00F9   3D                     DEC   A   
00FA   32 43 24               LD   (serBufUsed),A   
00FD   FE 05                  CP   SER_EMPTYSIZE   
00FF   30 04                  JR   NC,RXA2   
0101   3E 96                  LD   A,RTS_LOW   
0103   D3 80                  OUT   ($80),A   
0105                RXA2:        
0105   7E                     LD   A,(HL)   
0106   FB                     EI      
0107   E1                     POP   HL   
0108   C9                     RET      ; Char ready in A
0109                TXA:         
0109   F5                     PUSH   AF   ; Store character
010A                TXA1:        
010A   DB 80                  IN   A,($80)   ; Status byte
010C   CB 4F                  BIT   1,A   ; Set Zero flag if still transmitting character
010E   28 FA                  JR   Z,TXA1   ; Loop until flag signals ready
0110   F1                     POP   AF   ; Retrieve character
0111   D3 81                  OUT   ($81),A   ; Output the character
0113   C9                     RET      
0114                QRXA:        
0114   3A 43 24               LD   A,(serBufUsed)   
0117   FE 00                  CP   $0   
0119   C9                     RET      
011A                             ; .align 2
011A                DEFAULTS:      
011A                UZERO:       
011A   00 22        DEFSZERO:   DW   SPP   ; SP0
011C   00 24        DEFRZERO:   DW   RPP   ; RP0
011E   8E 0B        DEFTQKEY:   DW   QRX   ; '?KEY
0120   A6 0B        DEFTEMIT:   DW   TXSTO   ; 'EMIT
0122   66 0D        DEFTEXPE:   DW   ACCEP   ; 'EXPECT
0124   38 0D        DEFTTAP:   DW   KTAP   ; 'TAP
0126   A6 0B        DEFTECHO:   DW   TXSTO   ; 'ECHO
0128   1E 0B        DEFTPROM:   DW   DOTOK   ; 'PROMPT
012A   0A 00        DEFBASE:   DW   BASEE   ; BASE
012C   00 00        DEFTEMP:   DW   0   ; tmp
012E   00 00        DEFSPAN:   DW   0   ; SPAN
0130   00 00        DEFINN:   DW   0   ; >IN
0132   00 00        DEFNTIB:   DW   0   ; #TIB
0134   00 22        DEFTIB:   DW   TIBB   ; TIB
0136   00 00        DEFCSP:   DW   0   ; CSP
0138   DC 0A        DEFTEVAL:   DW   INTER   ; 'EVAL
013A   BE 07        DEFTNUMB:   DW   NUMBQ   ; 'NUMBER
013C   00 00        DEFHLD:   DW   0   ; HLD
013E   00 00        DEFHANDL:   DW   0   ; HANDLER
0140   00 00        DEFCNTXT:   DW   0   ; CONTEXT pointer
0142   00 00        DEFVOCABS:   DW   0   ; vocabulary stack    ???
0144   00 00        DEFCRRENT:   DW   0   ; CURRENT pointer
0146   00 00        DEFVOCABLP:   DW   0   ; vocabulary link pointer ???
0148   91 24        DEFCP:    DW   CPP   ; CP  for runing phase on RAM
014A   FE FF        DEFNP:    DW   NPP   ; NP  for runing phase on RAM
014C   CA 13        DEFLAST:   DW   LASTN   ; LAST
014E   CA 13        DEFVFRTH:   DW   LASTN   ; FORTH   \ mullti-user ???
0150   00 00        DEFVOCABL:   DW   0   ; vocabulary link       ???
0152   00 00        DEFCOLD:   DW   0   ; "COLD"
0154                ULAST:       
0154                END_DEFAULTS:      
0154                VVCODE:   .SET   $   
0154                             ;   0<          ( n -- t )
0154                             ;               Return true if n is negative.
0154                          ;*Macro unroll: mCODE	2,'0<', ZLESS
0154                          ALIGN   2   
0154                ZLESS:       
0154                VVCODE:   .SET   $   
0154                VVLEN:    .SET   (2 & 01FH) / CELLL   
1FF8                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FF8                VVNAME:   .SET   $   
1FF8   54 01 00 00            DW   vvCODE,vvLINK   
1FFC                VVLINK:   .SET   $   
1FFC   02 30 3C               DB   2,"0<"   
0154                          .ORG   vvCODE   
0154   CB 20                  SLA   B   ; sign bit -> cy flag
0156   9F                     SBC   A,A   ; propagate cy through A
0157   47                     LD   B,A   ; put 0000 or FFFF in TOS
0158   4F                     LD   C,A   
0159                          ;*Macro unroll: 	mNEXT
0159   EB                     EX   DE,HL   
015A                          ;*Macro unroll:  mNEXTHL                         ; 34t
015A   FD E9                  JP   (IY)   ; 34t
015C                             ;   AND         ( w w -- w )
015C                             ;               Bitwise AND.
015C                          ;*Macro unroll: mCODE	3, 'AND', ANDD
015C                          ALIGN   2   
015C                ANDD:        
015C                VVCODE:   .SET   $   
015C                VVLEN:    .SET   (3 & 01FH) / CELLL   
1FF0                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FF0                VVNAME:   .SET   $   
1FF0   5C 01 FC 1F            DW   vvCODE,vvLINK   
1FF4                VVLINK:   .SET   $   
1FF4   03 41 4E 44            DB   3,"AND"   
015C                          .ORG   vvCODE   
015C   E1                     POP   HL   
015D   78                     LD   A,B   
015E   A4                     AND   H   
015F   47                     LD   B,A   
0160   79                     LD   A,C   
0161   A5                     AND   L   
0162   4F                     LD   C,A   
0163                          ;*Macro unroll: 	mNEXT
0163   EB                     EX   DE,HL   
0164                          ;*Macro unroll:  mNEXTHL                         ; 34t
0164   FD E9                  JP   (IY)   ; 34t
0166                             ;   OR          ( w w -- w )
0166                             ;               Bitwise inclusive OR.
0166                          ;*Macro unroll: mCODE	2,'OR', ORR
0166                          ALIGN   2   
0166                ORR:         
0166                VVCODE:   .SET   $   
0166                VVLEN:    .SET   (2 & 01FH) / CELLL   
1FE8                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FE8                VVNAME:   .SET   $   
1FE8   66 01 F4 1F            DW   vvCODE,vvLINK   
1FEC                VVLINK:   .SET   $   
1FEC   02 4F 52               DB   2,"OR"   
0166                          .ORG   vvCODE   
0166   E1                     POP   HL   
0167   78                     LD   A,B   
0168   B4                     OR   H   
0169   47                     LD   B,A   
016A   79                     LD   A,C   
016B   B5                     OR   L   
016C   4F                     LD   C,A   
016D                          ;*Macro unroll: 	mNEXT
016D   EB                     EX   DE,HL   
016E                          ;*Macro unroll:  mNEXTHL                         ; 34t
016E   FD E9                  JP   (IY)   ; 34t
0170                             ;   XOR         ( w w -- w )
0170                             ;               Bitwise exclusive
0170                          ;*Macro unroll: mCODE	3, 'XOR', XORR
0170                          ALIGN   2   
0170                XORR:        
0170                VVCODE:   .SET   $   
0170                VVLEN:    .SET   (3 & 01FH) / CELLL   
1FE0                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FE0                VVNAME:   .SET   $   
1FE0   70 01 EC 1F            DW   vvCODE,vvLINK   
1FE4                VVLINK:   .SET   $   
1FE4   03 58 4F 52            DB   3,"XOR"   
0170                          .ORG   vvCODE   
0170   E1                     POP   HL   
0171   78                     LD   A,B   
0172   AC                     XOR   H   
0173   47                     LD   B,A   
0174   79                     LD   A,C   
0175   AD                     XOR   L   
0176   4F                     LD   C,A   
0177                          ;*Macro unroll: 	mNEXT
0177   EB                     EX   DE,HL   
0178                          ;*Macro unroll:  mNEXTHL                         ; 34t
0178   FD E9                  JP   (IY)   ; 34t
017A                             ;   +           ( w w -- sum )
017A                             ;               Add top two items.
017A                          ;*Macro unroll: mCOLON	1,'+', PLUS
017A                          ;*Macro unroll:  mCODE 1, "+", PLUS
017A                          ALIGN   2   
017A                PLUS:        
017A                VVCODE:   .SET   $   
017A                VVLEN:    .SET   (1 & 01FH) / CELLL   
1FDA                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FDA                VVNAME:   .SET   $   
1FDA   7A 01 E4 1F            DW   vvCODE,vvLINK   
1FDE                VVLINK:   .SET   $   
1FDE   01 2B                  DB   1,"+"   
017A                          .ORG   vvCODE   
017A   00                     NOP      
017B   CD 24 06               CALL   doLIST   
017E   52 02 3C 10 72 06      DW   UMPlus,DROP,EXIT   
0184                             ;   NOT         ( w -- w )
0184                             ;               One's complement of tos.
0184                          ;*Macro unroll: mCOLON  3, 'NOT', INVER
0184                          ;*Macro unroll:  mCODE 3, "NOT", INVER
0184                          ALIGN   2   
0184                INVER:       
0184                VVCODE:   .SET   $   
0184                VVLEN:    .SET   (3 & 01FH) / CELLL   
1FD2                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FD2                VVNAME:   .SET   $   
1FD2   84 01 DE 1F            DW   vvCODE,vvLINK   
1FD6                VVLINK:   .SET   $   
1FD6   03 4E 4F 54            DB   3,"NOT"   
0184                          .ORG   vvCODE   
0184   00                     NOP      
0185   CD 24 06               CALL   doLIST   
0188   32 06 FF FF 70 01 72 06 DW   DOLIT,-1,XORR,EXIT   
0190                             ;   NEGAT      ( n -- -n )
0190                             ;               Two's complement of tos.
0190                          ;*Macro unroll: mCOLON	6,'NEGATE',NEGAT
0190                          ;*Macro unroll:  mCODE 6, "NEGATE", NEGAT
0190                          ALIGN   2   
0190                NEGAT:       
0190                VVCODE:   .SET   $   
0190                VVLEN:    .SET   (6 & 01FH) / CELLL   
1FC6                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FC6                VVNAME:   .SET   $   
1FC6   90 01 D6 1F            DW   vvCODE,vvLINK   
1FCA                VVLINK:   .SET   $   
1FCA   06 4E 45 47 41 54 45   DB   6,"NEGATE"   
0190                          .ORG   vvCODE   
0190   00                     NOP      
0191   CD 24 06               CALL   doLIST   
0194   84 01 32 06 01 00 7A 01 72 06 DW   INVER,DOLIT,1,Plus,EXIT   
019E                             ;   DNEGATE     ( d -- -d )
019E                             ;               Two's complement of top double.
019E                          ;*Macro unroll: mCOLON	7,'DNEGATE',DNEGA
019E                          ;*Macro unroll:  mCODE 7, "DNEGATE", DNEGA
019E                          ALIGN   2   
019E                DNEGA:       
019E                VVCODE:   .SET   $   
019E                VVLEN:    .SET   (7 & 01FH) / CELLL   
1FBA                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FBA                VVNAME:   .SET   $   
1FBA   9E 01 CA 1F            DW   vvCODE,vvLINK   
1FBE                VVLINK:   .SET   $   
1FBE   07 44 4E 45 47 41 54 45 DB   7,"DNEGATE"   
019E                          .ORG   vvCODE   
019E   00                     NOP      
019F   CD 24 06               CALL   doLIST   
01A2   84 01 1C 10 84 01      DW   INVER,ToR,INVER   
01A8   32 06 01 00 52 02      DW   DOLIT,1,UMPlus   
01AE   2A 10 7A 01 72 06      DW   RFrom,Plus,EXIT   
01B4                             ;   -           ( n1 n2 -- n1-n2 )
01B4                             ;               Subtraction.
01B4                          ;*Macro unroll: mCOLON	1, '-', SUBB
01B4                          ;*Macro unroll:  mCODE 1, "-", SUBB
01B4                          ALIGN   2   
01B4                SUBB:        
01B4                VVCODE:   .SET   $   
01B4                VVLEN:    .SET   (1 & 01FH) / CELLL   
1FB4                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FB4                VVNAME:   .SET   $   
1FB4   B4 01 BE 1F            DW   vvCODE,vvLINK   
1FB8                VVLINK:   .SET   $   
1FB8   01 2D                  DB   1,"-"   
01B4                          .ORG   vvCODE   
01B4   00                     NOP      
01B5   CD 24 06               CALL   doLIST   
01B8   90 01 7A 01 72 06      DW   NEGAT,Plus,EXIT   
01BE                             ;   ABS         ( n -- n )
01BE                             ;               Return the absolute value of n.
01BE                          ;*Macro unroll: mCOLON	3,'ABS',ABSS
01BE                          ;*Macro unroll:  mCODE 3, "ABS", ABSS
01BE                          ALIGN   2   
01BE                ABSS:        
01BE                VVCODE:   .SET   $   
01BE                VVLEN:    .SET   (3 & 01FH) / CELLL   
1FAC                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FAC                VVNAME:   .SET   $   
1FAC   BE 01 B8 1F            DW   vvCODE,vvLINK   
1FB0                VVLINK:   .SET   $   
1FB0   03 41 42 53            DB   3,"ABS"   
01BE                          .ORG   vvCODE   
01BE   00                     NOP      
01BF   CD 24 06               CALL   doLIST   
01C2   38 10 54 01 68 0E CC 01 DW   DUPP,ZLESS,QBRAN,ABS1   
01CA   90 01                  DW   NEGAT   
01CC                ABS1:        
01CC   72 06                  DW   EXIT   
01CE                             ;   =           ( w w -- t )
01CE                             ;               Return true if top two are equal.
01CE                          ;*Macro unroll: mCOLON	1, '=', EQUAL
01CE                          ;*Macro unroll:  mCODE 1, "=", EQUAL
01CE                          ALIGN   2   
01CE                EQUAL:       
01CE                VVCODE:   .SET   $   
01CE                VVLEN:    .SET   (1 & 01FH) / CELLL   
1FA6                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FA6                VVNAME:   .SET   $   
1FA6   CE 01 B0 1F            DW   vvCODE,vvLINK   
1FAA                VVLINK:   .SET   $   
1FAA   01 3D                  DB   1,"="   
01CE                          .ORG   vvCODE   
01CE   00                     NOP      
01CF   CD 24 06               CALL   doLIST   
01D2   70 01                  DW   XORR   
01D4   68 0E DE 01            DW   QBRAN,EQU1   
01D8   32 06 00 00 72 06      DW   DOLIT,0,EXIT   ;false flag
01DE                EQU1:        
01DE   32 06 FF FF 72 06      DW   DOLIT,-1,EXIT   ;true flag
01E4                             ;   U<          ( u u -- t )
01E4                             ;               Unsigned compare of top two items.
01E4                          ;*Macro unroll: mCOLON	2,'U<',ULESS
01E4                          ;*Macro unroll:  mCODE 2, "U<", ULESS
01E4                          ALIGN   2   
01E4                ULESS:       
01E4                VVCODE:   .SET   $   
01E4                VVLEN:    .SET   (2 & 01FH) / CELLL   
1F9E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F9E                VVNAME:   .SET   $   
1F9E   E4 01 AA 1F            DW   vvCODE,vvLINK   
1FA2                VVLINK:   .SET   $   
1FA2   02 55 3C               DB   2,"U<"   
01E4                          .ORG   vvCODE   
01E4   00                     NOP      
01E5   CD 24 06               CALL   doLIST   
01E8   76 10 70 01 54 01      DW   DDUP,XORR,ZLESS   
01EE   68 0E FA 01            DW   QBRAN,ULES1   
01F2   40 10 3C 10 54 01 72 06 DW   SWAP,DROP,ZLESS,EXIT   
01FA                ULES1:       
01FA   B4 01 54 01 72 06      DW   SUBB,ZLESS,EXIT   
0200                             ;   <           ( n1 n2 -- t )
0200                             ;               is less than
0200                          ;*Macro unroll: mCOLON	1,'<',LESS
0200                          ;*Macro unroll:  mCODE 1, "<", LESS
0200                          ALIGN   2   
0200                LESS:        
0200                VVCODE:   .SET   $   
0200                VVLEN:    .SET   (1 & 01FH) / CELLL   
1F98                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F98                VVNAME:   .SET   $   
1F98   00 02 A2 1F            DW   vvCODE,vvLINK   
1F9C                VVLINK:   .SET   $   
1F9C   01 3C                  DB   1,"<"   
0200                          .ORG   vvCODE   
0200   00                     NOP      
0201   CD 24 06               CALL   doLIST   
0204   76 10 70 01 54 01 68 0E 14 02 DW   DDUP,XORR,ZLESS,QBRAN,LESS1   
020E   3C 10 54 01 72 06      DW   DROP,ZLESS,EXIT   
0214                LESS1:       
0214   B4 01 54 01 72 06      DW   SUBB,ZLESS,EXIT   
021A                             ;   MAX         ( n n -- n )
021A                             ;               Return the greater of two top stack items.
021A                          ;*Macro unroll: mCOLON	3,'MAX',MAX
021A                          ;*Macro unroll:  mCODE 3, "MAX", MAX
021A                          ALIGN   2   
021A                MAX:         
021A                VVCODE:   .SET   $   
021A                VVLEN:    .SET   (3 & 01FH) / CELLL   
1F90                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F90                VVNAME:   .SET   $   
1F90   1A 02 9C 1F            DW   vvCODE,vvLINK   
1F94                VVLINK:   .SET   $   
1F94   03 4D 41 58            DB   3,"MAX"   
021A                          .ORG   vvCODE   
021A   00                     NOP      
021B   CD 24 06               CALL   doLIST   
021E   76 10 00 02 68 0E 28 02 DW   DDUP,LESS,QBRAN,MAX1   
0226   40 10                  DW   SWAP   
0228                MAX1:        
0228   3C 10 72 06            DW   DROP,EXIT   
022C                             ;   MIN         ( n n -- n )
022C                             ;               Return the smaller of top two stack items.
022C                          ;*Macro unroll: mCOLON	3,'MIN',MIN
022C                          ;*Macro unroll:  mCODE 3, "MIN", MIN
022C                          ALIGN   2   
022C                MIN:         
022C                VVCODE:   .SET   $   
022C                VVLEN:    .SET   (3 & 01FH) / CELLL   
1F88                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F88                VVNAME:   .SET   $   
1F88   2C 02 94 1F            DW   vvCODE,vvLINK   
1F8C                VVLINK:   .SET   $   
1F8C   03 4D 49 4E            DB   3,"MIN"   
022C                          .ORG   vvCODE   
022C   00                     NOP      
022D   CD 24 06               CALL   doLIST   
0230   76 10 40 10 00 02      DW   DDUP,SWAP,LESS   
0236   68 0E 3C 02            DW   QBRAN,MIN1   
023A   40 10                  DW   SWAP   
023C                MIN1:        
023C   3C 10 72 06            DW   DROP,EXIT   
0240                             ;   WITHIN      ( u ul uh -- t )
0240                             ;               Return true if u is within the range of ul and uh.
0240                          ;*Macro unroll: mCOLON	6,'WITHIN',WITHI
0240                          ;*Macro unroll:  mCODE 6, "WITHIN", WITHI
0240                          ALIGN   2   
0240                WITHI:       
0240                VVCODE:   .SET   $   
0240                VVLEN:    .SET   (6 & 01FH) / CELLL   
1F7C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F7C                VVNAME:   .SET   $   
1F7C   40 02 8C 1F            DW   vvCODE,vvLINK   
1F80                VVLINK:   .SET   $   
1F80   06 57 49 54 48 49 4E   DB   6,"WITHIN"   
0240                          .ORG   vvCODE   
0240   00                     NOP      
0241   CD 24 06               CALL   doLIST   
0244   48 10 B4 01 1C 10      DW   OVER,SUBB,ToR   ;ul <= u < uh
024A   B4 01 2A 10 E4 01 72 06 DW   SUBB,RFrom,ULess,EXIT   
0252                             ;   UM+         ( w w -- w cy )
0252                             ;               Add two numbers, return the sum and carry flag.
0252                          ;*Macro unroll: hCODE	3,'um+',UMPlus
0252                          ALIGN   2   
0252                UMPLUS:      
0252   E1                     POP   HL   ;10t
0253   09                     ADD   HL,BC   ;11t
0254   E5                     PUSH   HL   ;11t
0255   01 00 00               LD   BC,0   ;10t
0258   30 01                  JR   NC,UMP1   ;12/7t
025A                UMP2:        
025A   03                     INC   BC   ; 6t
025B                UMP1:        
025B                          ;*Macro unroll:  mNEXT
025B   EB                     EX   DE,HL   
025C                          ;*Macro unroll:  mNEXTHL                         ; 34t
025C   FD E9                  JP   (IY)   ; 34t
025E                             ; UM/MOD      ( udl udh u -- ur uq )
025E                             ; Unsigned divide of a double by a single. Return mod and quotient.
025E                             ; Note: Less range than eForth because most significant word discarded TODO: fix
025E                          ;*Macro unroll: mCOLON  6,'UM/MOD',UMMOD
025E                          ;*Macro unroll:  mCODE 6, "UM/MOD", UMMOD
025E                          ALIGN   2   
025E                UMMOD:       
025E                VVCODE:   .SET   $   
025E                VVLEN:    .SET   (6 & 01FH) / CELLL   
1F70                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F70                VVNAME:   .SET   $   
1F70   5E 02 80 1F            DW   vvCODE,vvLINK   
1F74                VVLINK:   .SET   $   
1F74   06 55 4D 2F 4D 4F 44   DB   6,"UM/MOD"   
025E                          .ORG   vvCODE   
025E   00                     NOP      
025F   CD 24 06               CALL   doLIST   
0262   40 10 3C 10 6A 02 72 06 DW   SWAP,DROP,UMSLMOD2,EXIT   
026A                             ; UM/MOD2	( ud u1 -- u2 u3 )		
026A                             ; Unsigned division of a double-cell number ud by a single-cell
026A                             ; number u1. Return remainder u2 and quotient u3.
026A                             ; Note: Less range than eForth TODO: fix
026A                          ;*Macro unroll: mCODE	6,'UM/MOD2',UMSLMOD2
026A                          ALIGN   2   
026A                UMSLMOD2:      
026A                VVCODE:   .SET   $   
026A                VVLEN:    .SET   (6 & 01FH) / CELLL   
1F64                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F64                VVNAME:   .SET   $   
1F64   6A 02 74 1F            DW   vvCODE,vvLINK   
1F68                VVLINK:   .SET   $   
1F68   06 55 4D 2F 4D 4F 44 32 DB   6,"UM/MOD2"   
026A                          .ORG   vvCODE   
026A   78                     LD   A,B   
026B   B1                     OR   C   
026C   28 25                  JR   Z,UMMOD2   ;?zero divisor
026E                UMMOD11:      
026E   C5                     PUSH   BC   
026F   D9                     EXX      
0270   C1                     POP   BC   
0271   E1                     POP   HL   
0272   D1                     POP   DE   
0273   7D                     LD   A,L   
0274   91                     SUB   C   
0275   7C                     LD   A,H   
0276   98                     SBC   A,B   
0277   30 20                  JR   NC,UMMOD1   ;?too big
0279                UMMOD12:      
0279   7C                     LD   A,H   
027A   65                     LD   H,L   
027B   6A                     LD   L,D   
027C   16 08                  LD   D,8   
027E   D5                     PUSH   DE   
027F   CD AD 02               CALL   UMMOD3   
0282   D1                     POP   DE   
0283   E5                     PUSH   HL   
0284   6B                     LD   L,E   
0285   CD AD 02               CALL   UMMOD3   
0288   57                     LD   D,A   
0289   5C                     LD   E,H   
028A   C1                     POP   BC   
028B   61                     LD   H,C   
028C   D5                     PUSH   DE   
028D   E5                     PUSH   HL   
028E   D9                     EXX      
028F   C1                     POP   BC   
0290                          ;*Macro unroll: 	mNEXT
0290   EB                     EX   DE,HL   
0291                          ;*Macro unroll:  mNEXTHL                         ; 34t
0291   FD E9                  JP   (IY)   ; 34t
0293                UMMOD2:      
0293   01 02 10               LD   BC,ERR_DIVZERO   ; divide by 0
0296   C3 7C 0E               JP   THROWX   
0299                UMMOD1:      
0299   01 0E 10               LD   BC,ERR_OUTOFRANGE   ; result out of range
029C   C3 7C 0E               JP   THROWX   
029F                UMMOD4:      
029F   5F                     LD   E,A   
02A0   7C                     LD   A,H   
02A1   91                     SUB   C   
02A2   67                     LD   H,A   
02A3   7B                     LD   A,E   
02A4   98                     SBC   A,B   
02A5   30 10                  JR   NC,UMMOD5   
02A7                UMMOD13:      
02A7   7C                     LD   A,H   
02A8   81                     ADD   A,C   
02A9   67                     LD   H,A   
02AA   7B                     LD   A,E   
02AB   15                     DEC   D   
02AC   C8                     RET   Z   
02AD                UMMOD3:      
02AD   29                     ADD   HL,HL   
02AE   17                     RLA      
02AF   30 EE                  JR   NC,UMMOD4   
02B1                UMMOD14:      
02B1   5F                     LD   E,A   
02B2   7C                     LD   A,H   
02B3   91                     SUB   C   
02B4   67                     LD   H,A   
02B5   7B                     LD   A,E   
02B6   98                     SBC   A,B   
02B7                UMMOD5:      
02B7   2C                     INC   L   
02B8   15                     DEC   D   
02B9   20 F2                  JR   NZ,UMMOD3   
02BB                UMMOD15:      
02BB   C9                     RET      
02BC                             ;   FM/MOD	( d n1 -- n2 n3 )		\ CORE
02BC                             ;		Signed floored divide of double by single. Return mod n2
02BC                             ;		and quotient n3.
02BC                             ; TODO: this is usually called M/MOD in eForth
02BC                          ;*Macro unroll: mCOLON	6,'M/MOD',MSMOD
02BC                          ;*Macro unroll:  mCODE 6, "M/MOD", MSMOD
02BC                          ALIGN   2   
02BC                MSMOD:       
02BC                VVCODE:   .SET   $   
02BC                VVLEN:    .SET   (6 & 01FH) / CELLL   
1F58                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F58                VVNAME:   .SET   $   
1F58   BC 02 68 1F            DW   vvCODE,vvLINK   
1F5C                VVLINK:   .SET   $   
1F5C   06 4D 2F 4D 4F 44      DB   6,"M/MOD"   
02BC                          .ORG   vvCODE   
02BC   00                     NOP      
02BD   CD 24 06               CALL   doLIST   
02C0   38 10 54 01 38 10 1C 10 DW   DUPP,ZLESS,DUPP,TOR   
02C8   68 0E D4 02            DW   QBRAN,MMOD1   
02CC   90 01 1C 10 9E 01 2A 10 DW   NEGAT,TOR,DNEGA,RFROM   
02D4                MMOD1:       
02D4   1C 10 38 10 54 01      DW   TOR,DUPP,ZLESS   
02DA   68 0E E2 02            DW   QBRAN,MMOD2   
02DE   A6 0E 7A 01            DW   RAT,PLUS   
02E2                MMOD2:       
02E2   2A 10 5E 02 2A 10      DW   RFROM,UMMOD,RFROM   
02E8   68 0E F2 02            DW   QBRAN,MMOD3   
02EC   40 10 90 01 40 10      DW   SWAP,NEGAT,SWAP   
02F2                MMOD3:       
02F2   72 06                  DW   EXIT   
02F4                             ;   /MOD        ( n n -- r q )
02F4                             ;               Signed divide. Return mod and quotient.
02F4                          ;*Macro unroll: mCOLON	4,'/MOD',SLMOD
02F4                          ;*Macro unroll:  mCODE 4, "/MOD", SLMOD
02F4                          ALIGN   2   
02F4                SLMOD:       
02F4                VVCODE:   .SET   $   
02F4                VVLEN:    .SET   (4 & 01FH) / CELLL   
1F4E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F4E                VVNAME:   .SET   $   
1F4E   F4 02 5C 1F            DW   vvCODE,vvLINK   
1F52                VVLINK:   .SET   $   
1F52   04 2F 4D 4F 44         DB   4,"/MOD"   
02F4                          .ORG   vvCODE   
02F4   00                     NOP      
02F5   CD 24 06               CALL   doLIST   
02F8   48 10 54 01 40 10 BC 02 72 06 DW   OVER,ZLESS,SWAP,MSMOD,EXIT   
0302                             ;   MOD         ( n n -- r )
0302                             ;               Signed divide. Return mod only.
0302                          ;*Macro unroll: mCOLON	3,'MOD',MODD
0302                          ;*Macro unroll:  mCODE 3, "MOD", MODD
0302                          ALIGN   2   
0302                MODD:        
0302                VVCODE:   .SET   $   
0302                VVLEN:    .SET   (3 & 01FH) / CELLL   
1F46                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F46                VVNAME:   .SET   $   
1F46   02 03 52 1F            DW   vvCODE,vvLINK   
1F4A                VVLINK:   .SET   $   
1F4A   03 4D 4F 44            DB   3,"MOD"   
0302                          .ORG   vvCODE   
0302   00                     NOP      
0303   CD 24 06               CALL   doLIST   
0306   F4 02 3C 10 72 06      DW   SLMOD,DROP,EXIT   
030C                             ; 
030C                             ;   /           ( n n -- q )
030C                             ;               Signed divide. Return quotient only.
030C                          ;*Macro unroll: mCOLON	1,'/',SLASH
030C                          ;*Macro unroll:  mCODE 1, "/", SLASH
030C                          ALIGN   2   
030C                SLASH:       
030C                VVCODE:   .SET   $   
030C                VVLEN:    .SET   (1 & 01FH) / CELLL   
1F40                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F40                VVNAME:   .SET   $   
1F40   0C 03 4A 1F            DW   vvCODE,vvLINK   
1F44                VVLINK:   .SET   $   
1F44   01 2F                  DB   1,"/"   
030C                          .ORG   vvCODE   
030C   00                     NOP      
030D   CD 24 06               CALL   doLIST   
0310   F4 02 40 10 3C 10 72 06 DW   SLMOD,SWAP,DROP,EXIT   
0318                             ; Multiply
0318                             ;   UM*         ( u u -- ud )
0318                             ;               Unsigned multiply. Return double product.
0318                          ;*Macro unroll: mCODE	3,'UM*',UMSTA
0318                          ALIGN   2   
0318                UMSTA:       
0318                VVCODE:   .SET   $   
0318                VVLEN:    .SET   (3 & 01FH) / CELLL   
1F38                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F38                VVNAME:   .SET   $   
1F38   18 03 44 1F            DW   vvCODE,vvLINK   
1F3C                VVLINK:   .SET   $   
1F3C   03 55 4D 2A            DB   3,"UM*"   
0318                          .ORG   vvCODE   
0318   EB                     EX   DE,HL   
0319   E3                     EX   (SP),HL   
031A   EB                     EX   DE,HL   
031B   21 00 00               LD   HL,0   
031E   3E 10                  LD   A,010h   
0320                UMSTA1:      
0320   29                     ADD   HL,HL   
0321   EB                     EX   DE,HL   
0322   ED 6A                  ADC   HL,HL   
0324   EB                     EX   DE,HL   
0325   30 04                  JR   NC,UMSTA3   
0327                UMSTA2:      
0327   09                     ADD   HL,BC   
0328   30 01                  JR   NC,UMSTA3   
032A                UMSTA5:      
032A   13                     INC   DE   
032B                UMSTA3:      
032B   3D                     DEC   A   
032C   20 F2                  JR   NZ,UMSTA1   
032E                UMSTA4:      
032E   42                     LD   B,D   
032F   4B                     LD   C,E   
0330   E3                     EX   (SP),HL   
0331                          ;*Macro unroll: 	mNEXTHL
0331   FD E9                  JP   (IY)   
0333                             ;   *           ( n n -- n )
0333                             ;               Signed multiply. Return single product.
0333                          ;*Macro unroll: mCOLON	1,'*',STAR
0333                          ;*Macro unroll:  mCODE 1, "*", STAR
0333                          ALIGN   2   
0334                STAR:        
0334                VVCODE:   .SET   $   
0334                VVLEN:    .SET   (1 & 01FH) / CELLL   
1F32                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F32                VVNAME:   .SET   $   
1F32   34 03 3C 1F            DW   vvCODE,vvLINK   
1F36                VVLINK:   .SET   $   
1F36   01 2A                  DB   1,"*"   
0334                          .ORG   vvCODE   
0334   00                     NOP      
0335   CD 24 06               CALL   doLIST   
0338   18 03 3C 10 72 06      DW   UMSTA,DROP,EXIT   
033E                             ;   M*          ( n n -- d )
033E                             ;               Signed multiply. Return double product.
033E                          ;*Macro unroll: mCOLON	2,'M*',MSTAR,
033E                          ;*Macro unroll:  mCODE 2, "M*", MSTAR
033E                          ALIGN   2   
033E                MSTAR:       
033E                VVCODE:   .SET   $   
033E                VVLEN:    .SET   (2 & 01FH) / CELLL   
1F2A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F2A                VVNAME:   .SET   $   
1F2A   3E 03 36 1F            DW   vvCODE,vvLINK   
1F2E                VVLINK:   .SET   $   
1F2E   02 4D 2A               DB   2,"M*"   
033E                          .ORG   vvCODE   
033E   00                     NOP      
033F   CD 24 06               CALL   doLIST   
0342   76 10 70 01 54 01 1C 10 BE 01 40 10 BE 01 DW   DDUP,XORR,ZLESS,ToR,ABSS,SWAP,ABSS   
0350   18 03 2A 10 68 0E 5A 03 DW   UMSTA,RFrom,QBRAN,MSTAR1   
0358   9E 01                  DW   DNEGA   
035A                MSTAR1:      
035A   72 06                  DW   EXIT   
035C                             ;   */MOD       ( n1 n2 n3 -- r q )
035C                             ;               Multiply n1 and n2, then divide by n3. Return mod and quotient.
035C                          ;*Macro unroll: mCOLON	5,'*/MOD',SSMOD
035C                          ;*Macro unroll:  mCODE 5, "*/MOD", SSMOD
035C                          ALIGN   2   
035C                SSMOD:       
035C                VVCODE:   .SET   $   
035C                VVLEN:    .SET   (5 & 01FH) / CELLL   
1F20                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F20                VVNAME:   .SET   $   
1F20   5C 03 2E 1F            DW   vvCODE,vvLINK   
1F24                VVLINK:   .SET   $   
1F24   05 2A 2F 4D 4F 44      DB   5,"*/MOD"   
035C                          .ORG   vvCODE   
035C   00                     NOP      
035D   CD 24 06               CALL   doLIST   
0360   1C 10 3E 03 2A 10 BC 02 72 06 DW   ToR,MStar,RFrom,MSMOD,EXIT   
036A                             ;   */          ( n1 n2 n3 -- q )
036A                             ;               Multiply n1 by n2, then divide by n3. Return quotient only.
036A                          ;*Macro unroll: mCOLON	2,'*/',STASL
036A                          ;*Macro unroll:  mCODE 2, "*/", STASL
036A                          ALIGN   2   
036A                STASL:       
036A                VVCODE:   .SET   $   
036A                VVLEN:    .SET   (2 & 01FH) / CELLL   
1F18                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F18                VVNAME:   .SET   $   
1F18   6A 03 24 1F            DW   vvCODE,vvLINK   
1F1C                VVLINK:   .SET   $   
1F1C   02 2A 2F               DB   2,"*/"   
036A                          .ORG   vvCODE   
036A   00                     NOP      
036B   CD 24 06               CALL   doLIST   
036E   5C 03 40 10 3C 10 72 06 DW   SSMOD,SWAP,DROP,EXIT   
0376                             ;   CELL+       ( a -- a )
0376                             ;               Add cell size in byte to address.
0376                          ;*Macro unroll: mCOLON	5,'CELL+',CELLP
0376                          ;*Macro unroll:  mCODE 5, "CELL+", CELLP
0376                          ALIGN   2   
0376                CELLP:       
0376                VVCODE:   .SET   $   
0376                VVLEN:    .SET   (5 & 01FH) / CELLL   
1F0E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F0E                VVNAME:   .SET   $   
1F0E   76 03 1C 1F            DW   vvCODE,vvLINK   
1F12                VVLINK:   .SET   $   
1F12   05 43 45 4C 4C 2B      DB   5,"CELL+"   
0376                          .ORG   vvCODE   
0376   00                     NOP      
0377   CD 24 06               CALL   doLIST   
037A   32 06 02 00 7A 01 72 06 DW   DOLIT,CELLL,PLUS,EXIT   
0382                             ;   CELL-       ( a -- a )
0382                             ;               Subtract cell size in byte from address.
0382                          ;*Macro unroll: mCOLON	5,'CELL-',CELLM
0382                          ;*Macro unroll:  mCODE 5, "CELL-", CELLM
0382                          ALIGN   2   
0382                CELLM:       
0382                VVCODE:   .SET   $   
0382                VVLEN:    .SET   (5 & 01FH) / CELLL   
1F04                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F04                VVNAME:   .SET   $   
1F04   82 03 12 1F            DW   vvCODE,vvLINK   
1F08                VVLINK:   .SET   $   
1F08   05 43 45 4C 4C 2D      DB   5,"CELL-"   
0382                          .ORG   vvCODE   
0382   00                     NOP      
0383   CD 24 06               CALL   doLIST   
0386   32 06 FE FF 7A 01 72 06 DW   DOLIT,-CELLL,PLUS,EXIT   
038E                             ;   CELLS       ( n -- n )
038E                             ;               Multiply tos by cell size in bytes.
038E                          ;*Macro unroll: mCOLON	5,'CELLS',CELLS
038E                          ;*Macro unroll:  mCODE 5, "CELLS", CELLS
038E                          ALIGN   2   
038E                CELLS:       
038E                VVCODE:   .SET   $   
038E                VVLEN:    .SET   (5 & 01FH) / CELLL   
1EFA                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1EFA                VVNAME:   .SET   $   
1EFA   8E 03 08 1F            DW   vvCODE,vvLINK   
1EFE                VVLINK:   .SET   $   
1EFE   05 43 45 4C 4C 53      DB   5,"CELLS"   
038E                          .ORG   vvCODE   
038E   00                     NOP      
038F   CD 24 06               CALL   doLIST   
0392   32 06 02 00 34 03 72 06 DW   DOLIT,CELLL,STAR,EXIT   
039A                             ;  EXTRAS ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
039A                          ;*Macro unroll: mCOLON  1,'>',GREAT
039A                          ;*Macro unroll:  mCODE 1, ">", GREAT
039A                          ALIGN   2   
039A                GREAT:       
039A                VVCODE:   .SET   $   
039A                VVLEN:    .SET   (1 & 01FH) / CELLL   
1EF4                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1EF4                VVNAME:   .SET   $   
1EF4   9A 03 FE 1E            DW   vvCODE,vvLINK   
1EF8                VVLINK:   .SET   $   
1EF8   01 3E                  DB   1,">"   
039A                          .ORG   vvCODE   
039A   00                     NOP      
039B   CD 24 06               CALL   doLIST   
039E   40 10 00 02 72 06      DW   SWAP,LESS,EXIT   
03A4                          ;*Macro unroll: mCOLON  2,'1+',INCR
03A4                          ;*Macro unroll:  mCODE 2, "1+", INCR
03A4                          ALIGN   2   
03A4                INCR:        
03A4                VVCODE:   .SET   $   
03A4                VVLEN:    .SET   (2 & 01FH) / CELLL   
1EEC                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1EEC                VVNAME:   .SET   $   
1EEC   A4 03 F8 1E            DW   vvCODE,vvLINK   
1EF0                VVLINK:   .SET   $   
1EF0   02 31 2B               DB   2,"1+"   
03A4                          .ORG   vvCODE   
03A4   00                     NOP      
03A5   CD 24 06               CALL   doLIST   
03A8   32 06 01 00 7A 01 72 06 DW   DOLIT,1,PLUS,EXIT   
03B0                          ;*Macro unroll: mCOLON  2,'1-',DECR
03B0                          ;*Macro unroll:  mCODE 2, "1-", DECR
03B0                          ALIGN   2   
03B0                DECR:        
03B0                VVCODE:   .SET   $   
03B0                VVLEN:    .SET   (2 & 01FH) / CELLL   
1EE4                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1EE4                VVNAME:   .SET   $   
1EE4   B0 03 F0 1E            DW   vvCODE,vvLINK   
1EE8                VVLINK:   .SET   $   
1EE8   02 31 2D               DB   2,"1-"   
03B0                          .ORG   vvCODE   
03B0   00                     NOP      
03B1   CD 24 06               CALL   doLIST   
03B4   32 06 01 00 B4 01 72 06 DW   DOLIT,1,SUBB,EXIT   
03BC                             ;   '           ( -- ca )
03BC                             ;               Search context vocabularies for the next word in input stream.
03BC                          ;*Macro unroll: mCOLON  1,"'",TICK
03BC                          ;*Macro unroll:  mCODE 1, "'", TICK
03BC                          ALIGN   2   
03BC                TICK:        
03BC                VVCODE:   .SET   $   
03BC                VVLEN:    .SET   (1 & 01FH) / CELLL   
1EDE                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1EDE                VVNAME:   .SET   $   
1EDE   BC 03 E8 1E            DW   vvCODE,vvLINK   
1EE2                VVLINK:   .SET   $   
1EE2   01 27                  DB   1,"'"   
03BC                          .ORG   vvCODE   
03BC   00                     NOP      
03BD   CD 24 06               CALL   doLIST   
03C0   52 09 34 0A            DW   TOKEN,NAMEQ   ;?defined
03C4   68 0E CA 03            DW   QBRAN,TICK1   
03C8   72 06                  DW   EXIT   ;yes, push code address
03CA                TICK1:       
03CA   96 0A                  DW   THROW   ;no, error
03CC                             ;   ALLOT       ( n -- )
03CC                             ;               Allocate n bytes to the code dictionary.
03CC                          ;*Macro unroll: mCOLON  5,'ALLOT',ALLOT
03CC                          ;*Macro unroll:  mCODE 5, "ALLOT", ALLOT
03CC                          ALIGN   2   
03CC                ALLOT:       
03CC                VVCODE:   .SET   $   
03CC                VVLEN:    .SET   (5 & 01FH) / CELLL   
1ED4                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1ED4                VVNAME:   .SET   $   
1ED4   CC 03 E2 1E            DW   vvCODE,vvLINK   
1ED8                VVLINK:   .SET   $   
1ED8   05 41 4C 4C 4F 54      DB   5,"ALLOT"   
03CC                          .ORG   vvCODE   
03CC   00                     NOP      
03CD   CD 24 06               CALL   doLIST   
03D0   58 11 D2 0E 72 06      DW   CP,PSTOR,EXIT   ;adjust code pointer
03D6                             ;   ,           ( w -- )
03D6                             ;               Compile an integer into the code dictionary.
03D6                          ;*Macro unroll: mCOLON  1,',',COMMA
03D6                          ;*Macro unroll:  mCODE 1, ",", COMMA
03D6                          ALIGN   2   
03D6                COMMA:       
03D6                VVCODE:   .SET   $   
03D6                VVLEN:    .SET   (1 & 01FH) / CELLL   
1ECE                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1ECE                VVNAME:   .SET   $   
1ECE   D6 03 D8 1E            DW   vvCODE,vvLINK   
1ED2                VVLINK:   .SET   $   
1ED2   01 2C                  DB   1,","   
03D6                          .ORG   vvCODE   
03D6   00                     NOP      
03D7   CD 24 06               CALL   doLIST   
03DA   16 0F 38 10 76 03      DW   HERE,DUPP,CELLP   ;cell boundary
03E0   58 11 84 0E 84 0E 72 06 DW   CP,STORE,STORE,EXIT   ;adjust code pointer, compile
03E8                             ;   [COMPILE]   ( -- ; <string> )
03E8                             ;               Compile the next immediate word into code dictionary.
03E8                          ;*Macro unroll: mCOLON  IMEDD+9,'[COMPILE]',BCOMP
03E8                          ;*Macro unroll:  mCODE IMEDD+9, "[COMPILE]", BCOMP
03E8                          ALIGN   2   
03E8                BCOMP:       
03E8                VVCODE:   .SET   $   
03E8                VVLEN:    .SET   (IMEDD+9 & 01FH) / CELLL   
1E80                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1E80                VVNAME:   .SET   $   
1E80   E8 03 D2 1E            DW   vvCODE,vvLINK   
1E84                VVLINK:   .SET   $   
1E84   49 5B 43 4F 4D 50 49 4C 45 5D DB   IMEDD+9,"[COMPILE]"   
03E8                          .ORG   vvCODE   
03E8   00                     NOP      
03E9   CD 24 06               CALL   doLIST   
03EC   BC 03 D6 03 72 06      DW   TICK,COMMA,EXIT   
03F2                             ;   COMPILE     ( -- )
03F2                             ;               Compile the next address in colon list to code dictionary.
03F2                          ;*Macro unroll: mCOLON  COMPO+7,'COMPILE',COMPI
03F2                          ;*Macro unroll:  mCODE COMPO+7, "COMPILE", COMPI
03F2                          ALIGN   2   
03F2                COMPI:       
03F2                VVCODE:   .SET   $   
03F2                VVLEN:    .SET   (COMPO+7 & 01FH) / CELLL   
1E54                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1E54                VVNAME:   .SET   $   
1E54   F2 03 84 1E            DW   vvCODE,vvLINK   
1E58                VVLINK:   .SET   $   
1E58   27 43 4F 4D 50 49 4C 45 DB   COMPO+7,"COMPILE"   
03F2                          .ORG   vvCODE   
03F2   00                     NOP      
03F3   CD 24 06               CALL   doLIST   
03F6   2A 10 38 10 8E 0E D6 03 DW   RFROM,DUPP,AT,COMMA   ;compile address
03FE   76 03 1C 10 72 06      DW   CELLP,TOR,EXIT   ;adjust return address
0404                             ;   LITERAL     ( w -- )
0404                             ;               Compile tos to code dictionary as an integer literal.
0404                          ;*Macro unroll: mCOLON  IMEDD+7,'LITERAL',LITER
0404                          ;*Macro unroll:  mCODE IMEDD+7, "LITERAL", LITER
0404                          ALIGN   2   
0404                LITER:       
0404                VVCODE:   .SET   $   
0404                VVLEN:    .SET   (IMEDD+7 & 01FH) / CELLL   
1E08                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1E08                VVNAME:   .SET   $   
1E08   04 04 58 1E            DW   vvCODE,vvLINK   
1E0C                VVLINK:   .SET   $   
1E0C   47 4C 49 54 45 52 41 4C DB   IMEDD+7,"LITERAL"   
0404                          .ORG   vvCODE   
0404   00                     NOP      
0405   CD 24 06               CALL   doLIST   
0408   F2 03 32 06 D6 03 72 06 DW   COMPI,DOLIT,COMMA,EXIT   
0410                             ;   $,"         ( -- )
0410                             ;               Compile a literal string up to next " .
0410                          ;*Macro unroll: hCOLON  3,'$,|',STRCQ
0410                          ;*Macro unroll:  hCODE 3, "$,|", STRCQ
0410                          ALIGN   2   
0410                STRCQ:       
0410   00                     NOP      
0411   CD 24 06               CALL   doLIST   
0414   32 06 22 00 6E 09      DW   DOLIT,$22,WORDD   ;move string to code dictionary
041A   04 0F 7A 01 FC 0F      DW   COUNT,PLUS,ALGND   ;calculate aligned end of string
0420   58 11 84 0E 72 06      DW   CP,STORE,EXIT   ;adjust the code pointer
0426                             ;   RECURSE     ( -- )
0426                             ;               Make the current word available for compilation.
0426                          ;*Macro unroll: mCOLON  IMEDD+7,'RECURSE',RECUR
0426                          ;*Macro unroll:  mCODE IMEDD+7, "RECURSE", RECUR
0426                          ALIGN   2   
0426                RECUR:       
0426                VVCODE:   .SET   $   
0426                VVLEN:    .SET   (IMEDD+7 & 01FH) / CELLL   
1DBC                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1DBC                VVNAME:   .SET   $   
1DBC   26 04 0C 1E            DW   vvCODE,vvLINK   
1DC0                VVLINK:   .SET   $   
1DC0   47 52 45 43 55 52 53 45 DB   IMEDD+7,"RECURSE"   
0426                          .ORG   vvCODE   
0426   00                     NOP      
0427   CD 24 06               CALL   doLIST   
042A   68 11 8E 0E 7A 09 D6 03 72 06 DW   LAST,AT,NAMET,COMMA,EXIT   
0434                             ;   ?UNIQUE     ( a -- a )
0434                             ;               Display a warning message if the word already exists.
0434                          ;*Macro unroll: mCOLON  7,'?UNIQUE',UNIQU
0434                          ;*Macro unroll:  mCODE 7, "?UNIQUE", UNIQU
0434                          ALIGN   2   
0434                UNIQU:       
0434                VVCODE:   .SET   $   
0434                VVLEN:    .SET   (7 & 01FH) / CELLL   
1DB0                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1DB0                VVNAME:   .SET   $   
1DB0   34 04 C0 1D            DW   vvCODE,vvLINK   
1DB4                VVLINK:   .SET   $   
1DB4   07 3F 55 4E 49 51 55 45 DB   7,"?UNIQUE"   
0434                          .ORG   vvCODE   
0434   00                     NOP      
0435   CD 24 06               CALL   doLIST   
0438   38 10 34 0A            DW   DUPP,NAMEQ   ;?name exists
043C   68 0E 50 04            DW   QBRAN,UNIQ1   ;redefinitions are OK
0440                          ;*Macro unroll:  mDSTR   DOTQP,' reDef '         ;but warn the user
0440   74 0C                  DW   DOTQP   ;but warn the user
0442                VVLEN:    .SET   $   
0442   00 20 72 65 44 65 66 20 DB   0," reDef "   
044A                VVCODE:   .SET   $   
0442                          .ORG   vvLEN   
0442   07                     DB   vvCODE - vvLEN - 1   
044A                          .ORG   vvCODE   
044A   48 10 04 0F 1E 0C      DW   OVER,COUNT,TYPEE   ;just in case its not planned
0450                UNIQ1:       
0450   3C 10 72 06            DW   DROP,EXIT   
0454                             ;   $,n         ( na -- )
0454                             ;               Build a new dictionary name using the string at na.
0454                          ;*Macro unroll: mCOLON  3,'$,n',SNAME
0454                          ;*Macro unroll:  mCODE 3, "$,n", SNAME
0454                          ALIGN   2   
0454                SNAME:       
0454                VVCODE:   .SET   $   
0454                VVLEN:    .SET   (3 & 01FH) / CELLL   
1DA8                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1DA8                VVNAME:   .SET   $   
1DA8   54 04 B4 1D            DW   vvCODE,vvLINK   
1DAC                VVLINK:   .SET   $   
1DAC   03 24 2C 6E            DB   3,"$,n"   
0454                          .ORG   vvCODE   
0454   00                     NOP      
0455   CD 24 06               CALL   doLIST   
0458   38 10 9E 0E            DW   DUPP,CAT   ;?null input
045C   68 0E 86 04            DW   QBRAN,PNAM1   
0460   34 04                  DW   UNIQU   ;?redefinition
0462   38 10 68 11 84 0E      DW   DUPP,LAST,STORE   ;save na for vocabulary link
0468   16 0F FC 0F 40 10      DW   HERE,ALGND,SWAP   ;align code address
046E   82 03                  DW   CELLM   ;link address
0470   50 11 8E 0E 8E 0E 48 10 84 0E DW   CRRNT,AT,AT,OVER,STORE   
047A   82 03 38 10 60 11 84 0E DW   CELLM,DUPP,NP,STORE   ;adjust name pointer
0482   84 0E 72 06            DW   STORE,EXIT   ;save code pointer
0486                PNAM1:       
0486                          ;*Macro unroll:  mDSTR   STRQP,' name'           ;null input
0486   6C 0C                  DW   STRQP   ;null input
0488                VVLEN:    .SET   $   
0488   00 20 6E 61 6D 65      DB   0," name"   
048E                VVCODE:   .SET   $   
0488                          .ORG   vvLEN   
0488   05                     DB   vvCODE - vvLEN - 1   
048E                          .ORG   vvCODE   
048E   96 0A                  DW   THROW   
0490                             ;   $COMPILE    ( a -- )
0490                             ;               Compile next word to code dictionary as a token or literal.
0490                          ;*Macro unroll: hCOLON  8,'$COMPILE',SCOMP
0490                          ;*Macro unroll:  hCODE 8, "$COMPILE", SCOMP
0490                          ALIGN   2   
0490                SCOMP:       
0490   00                     NOP      
0491   CD 24 06               CALL   doLIST   
0494   34 0A 50 10            DW   NAMEQ,QDUP   ;?defined
0498   68 0E B0 04            DW   QBRAN,SCOM2   
049C   8E 0E 32 06 40 00 5C 01 DW   AT,DOLIT,IMEDD,ANDD   ;?immediate
04A4   68 0E AC 04            DW   QBRAN,SCOM1   
04A8   64 0E 72 06            DW   EXECU,EXIT   ;its immediate, execute
04AC                SCOM1:       
04AC   D6 03 72 06            DW   COMMA,EXIT   ;its not immediate, compile
04B0                SCOM2:       
04B0   30 11 3A 0F            DW   TNUMB,ATEXE   ;try to convert to number
04B4   68 0E BC 04            DW   QBRAN,SCOM3   
04B8   04 04 72 06            DW   LITER,EXIT   ;compile number as integer
04BC   96 0A        SCOM3:    DW   THROW   ;error
04BE                             ;   OVERT       ( -- )
04BE                             ;               Link a new word into the current vocabulary.
04BE                          ;*Macro unroll: hCOLON  5,'OVERT',OVERT
04BE                          ;*Macro unroll:  hCODE 5, "OVERT", OVERT
04BE                          ALIGN   2   
04BE                OVERT:       
04BE   00                     NOP      
04BF   CD 24 06               CALL   doLIST   
04C2   68 11 8E 0E 50 11 8E 0E 84 0E 72 06 DW   LAST,AT,CRRNT,AT,STORE,EXIT   
04CE                             ;   ;           ( -- )
04CE                             ;               Terminate a colon definition.
04CE                          ;*Macro unroll: mCOLON  IMEDD+COMPO+1,';',SEMIS
04CE                          ;*Macro unroll:  mCODE IMEDD+COMPO+1, ";", SEMIS
04CE                          ALIGN   2   
04CE                SEMIS:       
04CE                VVCODE:   .SET   $   
04CE                VVLEN:    .SET   (IMEDD+COMPO+1 & 01FH) / CELLL   
1D42                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1D42                VVNAME:   .SET   $   
1D42   CE 04 AC 1D            DW   vvCODE,vvLINK   
1D46                VVLINK:   .SET   $   
1D46   61 3B                  DB   IMEDD+COMPO+1,";"   
04CE                          .ORG   vvCODE   
04CE   00                     NOP      
04CF   CD 24 06               CALL   doLIST   
04D2   F2 03 72 06 10 0B BE 04 72 06 DW   COMPI,EXIT,LBRAC,OVERT,EXIT   
04DC                             ;   ]           ( -- )
04DC                             ;               Start compiling the words in the input stream.
04DC                          ;*Macro unroll: mCOLON  1,']',RBRAC
04DC                          ;*Macro unroll:  mCODE 1, "]", RBRAC
04DC                          ALIGN   2   
04DC                RBRAC:       
04DC                VVCODE:   .SET   $   
04DC                VVLEN:    .SET   (1 & 01FH) / CELLL   
1D3C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1D3C                VVNAME:   .SET   $   
1D3C   DC 04 46 1D            DW   vvCODE,vvLINK   
1D40                VVLINK:   .SET   $   
1D40   01 5D                  DB   1,"]"   
04DC                          .ORG   vvCODE   
04DC   00                     NOP      
04DD   CD 24 06               CALL   doLIST   
04E0   32 06 90 04 28 11 84 0E 72 06 DW   DOLIT,SCOMP,TEVAL,STORE,EXIT   
04EA                             ;   call,       ( ca -- )
04EA                             ;               Assemble a call instruction to ca.
04EA                          ;*Macro unroll: hCOLON  5,'call,',CALLC
04EA                          ;*Macro unroll:  hCODE 5, "call,", CALLC
04EA                          ALIGN   2   
04EA                CALLC:       
04EA   00                     NOP      
04EB   CD 24 06               CALL   doLIST   
04EE   32 06 00 CD D6 03      DW   DOLIT,CALLL,COMMA   ;Direct Threaded Code
04F4   D6 03 72 06            DW   COMMA,EXIT   ;DTC 8086 relative call
04F8                             ;   :           ( -- ; <string> )
04F8                             ;               Start a new colon definition using next word as its name.
04F8                          ;*Macro unroll: mCOLON  1,':',COLON
04F8                          ;*Macro unroll:  mCODE 1, ":", COLON
04F8                          ALIGN   2   
04F8                COLON:       
04F8                VVCODE:   .SET   $   
04F8                VVLEN:    .SET   (1 & 01FH) / CELLL   
1D36                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1D36                VVNAME:   .SET   $   
1D36   F8 04 40 1D            DW   vvCODE,vvLINK   
1D3A                VVLINK:   .SET   $   
1D3A   01 3A                  DB   1,":"   
04F8                          .ORG   vvCODE   
04F8   00                     NOP      
04F9   CD 24 06               CALL   doLIST   
04FC   52 09 54 04 32 06 24 06 DW   TOKEN,SNAME,DOLIT,DoLIST   
0504   EA 04 DC 04 72 06      DW   CALLC,RBRAC,EXIT   
050A                             ;   IMMEDIATE   ( -- )
050A                             ;               Make the last compiled word an immediate word.
050A                          ;*Macro unroll: mCOLON  9,'IMMEDIATE',IMMED
050A                          ;*Macro unroll:  mCODE 9, "IMMEDIATE", IMMED
050A                          ALIGN   2   
050A                IMMED:       
050A                VVCODE:   .SET   $   
050A                VVLEN:    .SET   (9 & 01FH) / CELLL   
1D28                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1D28                VVNAME:   .SET   $   
1D28   0A 05 3A 1D            DW   vvCODE,vvLINK   
1D2C                VVLINK:   .SET   $   
1D2C   09 49 4D 4D 45 44 49 41 54 45 DB   9,"IMMEDIATE"   
050A                          .ORG   vvCODE   
050A   00                     NOP      
050B   CD 24 06               CALL   doLIST   
050E   32 06 40 00 68 11 8E 0E 8E 0E 66 01 DW   DOLIT,IMEDD,LAST,AT,AT,ORR   
051A   68 11 8E 0E 84 0E 72 06 DW   LAST,AT,STORE,EXIT   
0522                             ;   USER        ( u -- ; <string> )
0522                             ;               Compile a new user variable.
0522                          ;*Macro unroll: mCOLON  4,'USER',USER
0522                          ;*Macro unroll:  mCODE 4, "USER", USER
0522                          ALIGN   2   
0522                USER:        
0522                VVCODE:   .SET   $   
0522                VVLEN:    .SET   (4 & 01FH) / CELLL   
1D1E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1D1E                VVNAME:   .SET   $   
1D1E   22 05 2C 1D            DW   vvCODE,vvLINK   
1D22                VVLINK:   .SET   $   
1D22   04 55 53 45 52         DB   4,"USER"   
0522                          .ORG   vvCODE   
0522   00                     NOP      
0523   CD 24 06               CALL   doLIST   
0526   52 09 54 04 BE 04      DW   TOKEN,SNAME,OVERT   
052C   32 06 24 06 EA 04      DW   DOLIT,DoLIST,CALLC   
0532   F2 03 4A 06 D6 03 72 06 DW   COMPI,DOUSE,COMMA,EXIT   
053A                             ;   CREATE      ( -- ; <string> )
053A                             ;               Compile a new array entry without allocating code space.
053A                          ;*Macro unroll: mCOLON  6,'CREATE',CREAT
053A                          ;*Macro unroll:  mCODE 6, "CREATE", CREAT
053A                          ALIGN   2   
053A                CREAT:       
053A                VVCODE:   .SET   $   
053A                VVLEN:    .SET   (6 & 01FH) / CELLL   
1D12                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1D12                VVNAME:   .SET   $   
1D12   3A 05 22 1D            DW   vvCODE,vvLINK   
1D16                VVLINK:   .SET   $   
1D16   06 43 52 45 41 54 45   DB   6,"CREATE"   
053A                          .ORG   vvCODE   
053A   00                     NOP      
053B   CD 24 06               CALL   doLIST   
053E   52 09 54 04 BE 04      DW   TOKEN,SNAME,OVERT   
0544   32 06 24 06 EA 04      DW   DOLIT,DoLIST,CALLC   
054A   F2 03 3A 06 72 06      DW   COMPI,DOVAR,EXIT   
0550                             ;   VARIABLE    ( -- ; <string> )
0550                             ;               Compile a new variable initialized to 0.
0550                          ;*Macro unroll: mCOLON  8,'VARIABLE',VARIA
0550                          ;*Macro unroll:  mCODE 8, "VARIABLE", VARIA
0550                          ALIGN   2   
0550                VARIA:       
0550                VVCODE:   .SET   $   
0550                VVLEN:    .SET   (8 & 01FH) / CELLL   
1D04                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1D04                VVNAME:   .SET   $   
1D04   50 05 16 1D            DW   vvCODE,vvLINK   
1D08                VVLINK:   .SET   $   
1D08   08 56 41 52 49 41 42 4C 45 DB   8,"VARIABLE"   
0550                          .ORG   vvCODE   
0550   00                     NOP      
0551   CD 24 06               CALL   doLIST   
0554   3A 05 32 06 00 00 D6 03 72 06 DW   CREAT,DOLIT,0,COMMA,EXIT   
055E                             ;   FOR         ( -- a )
055E                             ;               Start a FOR-NEXT loop structure in a colon definition.
055E                          ;*Macro unroll: mCOLON  IMEDD+3,'FOR',FOR
055E                          ;*Macro unroll:  mCODE IMEDD+3, "FOR", FOR
055E                          ALIGN   2   
055E                FOR:         
055E                VVCODE:   .SET   $   
055E                VVLEN:    .SET   (IMEDD+3 & 01FH) / CELLL   
1CBC                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1CBC                VVNAME:   .SET   $   
1CBC   5E 05 08 1D            DW   vvCODE,vvLINK   
1CC0                VVLINK:   .SET   $   
1CC0   43 46 4F 52            DB   IMEDD+3,"FOR"   
055E                          .ORG   vvCODE   
055E   00                     NOP      
055F   CD 24 06               CALL   doLIST   
0562   F2 03 1C 10 16 0F 72 06 DW   COMPI,TOR,HERE,EXIT   
056A                             ;   BEGIN       ( -- a )
056A                             ;               Start an infinite or indefinite loop structure.
056A                          ;*Macro unroll: mCOLON  IMEDD+5,'BEGIN',BEGIN
056A                          ;*Macro unroll:  mCODE IMEDD+5, "BEGIN", BEGIN
056A                          ALIGN   2   
056A                BEGIN:       
056A                VVCODE:   .SET   $   
056A                VVLEN:    .SET   (IMEDD+5 & 01FH) / CELLL   
1C72                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1C72                VVNAME:   .SET   $   
1C72   6A 05 C0 1C            DW   vvCODE,vvLINK   
1C76                VVLINK:   .SET   $   
1C76   45 42 45 47 49 4E      DB   IMEDD+5,"BEGIN"   
056A                          .ORG   vvCODE   
056A   00                     NOP      
056B   CD 24 06               CALL   doLIST   
056E   16 0F 72 06            DW   HERE,EXIT   
0572                             ;   NEXT        ( a -- )
0572                             ;               Terminate a FOR-NEXT loop structure.
0572                          ;*Macro unroll: mCOLON  IMEDD+4,'NEXT',NEXT
0572                          ;*Macro unroll:  mCODE IMEDD+4, "NEXT", NEXT
0572                          ALIGN   2   
0572                NEXT:        
0572                VVCODE:   .SET   $   
0572                VVLEN:    .SET   (IMEDD+4 & 01FH) / CELLL   
1C28                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1C28                VVNAME:   .SET   $   
1C28   72 05 76 1C            DW   vvCODE,vvLINK   
1C2C                VVLINK:   .SET   $   
1C2C   44 4E 45 58 54         DB   IMEDD+4,"NEXT"   
0572                          .ORG   vvCODE   
0572   00                     NOP      
0573   CD 24 06               CALL   doLIST   
0576   F2 03 7E 06 D6 03 72 06 DW   COMPI,DONXT,COMMA,EXIT   
057E                             ;   UNTIL       ( a -- )
057E                             ;               Terminate a BEGIN-UNTIL indefinite loop structure.
057E                          ;*Macro unroll: mCOLON  IMEDD+5,'UNTIL',UNTIL
057E                          ;*Macro unroll:  mCODE IMEDD+5, "UNTIL", UNTIL
057E                          ALIGN   2   
057E                UNTIL:       
057E                VVCODE:   .SET   $   
057E                VVLEN:    .SET   (IMEDD+5 & 01FH) / CELLL   
1BDE                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1BDE                VVNAME:   .SET   $   
1BDE   7E 05 2C 1C            DW   vvCODE,vvLINK   
1BE2                VVLINK:   .SET   $   
1BE2   45 55 4E 54 49 4C      DB   IMEDD+5,"UNTIL"   
057E                          .ORG   vvCODE   
057E   00                     NOP      
057F   CD 24 06               CALL   doLIST   
0582   F2 03 68 0E D6 03 72 06 DW   COMPI,QBRAN,COMMA,EXIT   
058A                             ;   AGAIN       ( a -- )
058A                             ;               Terminate a BEGIN-AGAIN infinite loop structure.
058A                          ;*Macro unroll: mCOLON  IMEDD+5,'AGAIN',AGAIN
058A                          ;*Macro unroll:  mCODE IMEDD+5, "AGAIN", AGAIN
058A                          ALIGN   2   
058A                AGAIN:       
058A                VVCODE:   .SET   $   
058A                VVLEN:    .SET   (IMEDD+5 & 01FH) / CELLL   
1B94                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1B94                VVNAME:   .SET   $   
1B94   8A 05 E2 1B            DW   vvCODE,vvLINK   
1B98                VVLINK:   .SET   $   
1B98   45 41 47 41 49 4E      DB   IMEDD+5,"AGAIN"   
058A                          .ORG   vvCODE   
058A   00                     NOP      
058B   CD 24 06               CALL   doLIST   
058E   F2 03 74 0E D6 03 72 06 DW   COMPI,BRAN,COMMA,EXIT   
0596                             ;   IF          ( -- A )
0596                             ;               Begin a conditional branch structure.
0596                          ;*Macro unroll: mCOLON  IMEDD+2,'IF',IFF
0596                          ;*Macro unroll:  mCODE IMEDD+2, "IF", IFF
0596                          ALIGN   2   
0596                IFF:         
0596                VVCODE:   .SET   $   
0596                VVLEN:    .SET   (IMEDD+2 & 01FH) / CELLL   
1B4C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1B4C                VVNAME:   .SET   $   
1B4C   96 05 98 1B            DW   vvCODE,vvLINK   
1B50                VVLINK:   .SET   $   
1B50   42 49 46               DB   IMEDD+2,"IF"   
0596                          .ORG   vvCODE   
0596   00                     NOP      
0597   CD 24 06               CALL   doLIST   
059A   F2 03 68 0E 16 0F      DW   COMPI,QBRAN,HERE   
05A0   32 06 00 00 D6 03 72 06 DW   DOLIT,0,COMMA,EXIT   
05A8                             ;   AHEAD       ( -- A )
05A8                             ;               Compile a forward branch instruction.
05A8                          ;*Macro unroll: mCOLON  IMEDD+5,'AHEAD',AHEAD
05A8                          ;*Macro unroll:  mCODE IMEDD+5, "AHEAD", AHEAD
05A8                          ALIGN   2   
05A8                AHEAD:       
05A8                VVCODE:   .SET   $   
05A8                VVLEN:    .SET   (IMEDD+5 & 01FH) / CELLL   
1B02                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1B02                VVNAME:   .SET   $   
1B02   A8 05 50 1B            DW   vvCODE,vvLINK   
1B06                VVLINK:   .SET   $   
1B06   45 41 48 45 41 44      DB   IMEDD+5,"AHEAD"   
05A8                          .ORG   vvCODE   
05A8   00                     NOP      
05A9   CD 24 06               CALL   doLIST   
05AC   F2 03 74 0E 16 0F 32 06 00 00 D6 03 72 06 DW   COMPI,BRAN,HERE,DOLIT,0,COMMA,EXIT   
05BA                             ;   REPEAT      ( A a -- )
05BA                             ;               Terminate a BEGIN-WHILE-REPEAT indefinite loop.
05BA                          ;*Macro unroll: mCOLON  IMEDD+6,'REPEAT',REPEA
05BA                          ;*Macro unroll:  mCODE IMEDD+6, "REPEAT", REPEA
05BA                          ALIGN   2   
05BA                REPEA:       
05BA                VVCODE:   .SET   $   
05BA                VVLEN:    .SET   (IMEDD+6 & 01FH) / CELLL   
1AB6                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1AB6                VVNAME:   .SET   $   
1AB6   BA 05 06 1B            DW   vvCODE,vvLINK   
1ABA                VVLINK:   .SET   $   
1ABA   46 52 45 50 45 41 54   DB   IMEDD+6,"REPEAT"   
05BA                          .ORG   vvCODE   
05BA   00                     NOP      
05BB   CD 24 06               CALL   doLIST   
05BE   8A 05 16 0F 40 10 84 0E 72 06 DW   AGAIN,HERE,SWAP,STORE,EXIT   
05C8                             ;   THEN        ( A -- )
05C8                             ;               Terminate a conditional branch structure.
05C8                          ;*Macro unroll: mCOLON  IMEDD+4,'THEN',THENN
05C8                          ;*Macro unroll:  mCODE IMEDD+4, "THEN", THENN
05C8                          ALIGN   2   
05C8                THENN:       
05C8                VVCODE:   .SET   $   
05C8                VVLEN:    .SET   (IMEDD+4 & 01FH) / CELLL   
1A6C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1A6C                VVNAME:   .SET   $   
1A6C   C8 05 BA 1A            DW   vvCODE,vvLINK   
1A70                VVLINK:   .SET   $   
1A70   44 54 48 45 4E         DB   IMEDD+4,"THEN"   
05C8                          .ORG   vvCODE   
05C8   00                     NOP      
05C9   CD 24 06               CALL   doLIST   
05CC   16 0F 40 10 84 0E 72 06 DW   HERE,SWAP,STORE,EXIT   
05D4                             ;   AFT         ( a -- a A )
05D4                             ;               Jump to THEN in a FOR-AFT-THEN-NEXT loop the 1st time through.
05D4                          ;*Macro unroll: mCOLON  IMEDD+3,'AFT',AFT
05D4                          ;*Macro unroll:  mCODE IMEDD+3, "AFT", AFT
05D4                          ALIGN   2   
05D4                AFT:         
05D4                VVCODE:   .SET   $   
05D4                VVLEN:    .SET   (IMEDD+3 & 01FH) / CELLL   
1A24                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1A24                VVNAME:   .SET   $   
1A24   D4 05 70 1A            DW   vvCODE,vvLINK   
1A28                VVLINK:   .SET   $   
1A28   43 41 46 54            DB   IMEDD+3,"AFT"   
05D4                          .ORG   vvCODE   
05D4   00                     NOP      
05D5   CD 24 06               CALL   doLIST   
05D8   3C 10 A8 05 6A 05 40 10 72 06 DW   DROP,AHEAD,BEGIN,SWAP,EXIT   
05E2                             ;   ELSE        ( A -- A )
05E2                             ;               Start the false clause in an IF-ELSE-THEN structure.
05E2                          ;*Macro unroll: mCOLON  IMEDD+4,'ELSE',ELSEE
05E2                          ;*Macro unroll:  mCODE IMEDD+4, "ELSE", ELSEE
05E2                          ALIGN   2   
05E2                ELSEE:       
05E2                VVCODE:   .SET   $   
05E2                VVLEN:    .SET   (IMEDD+4 & 01FH) / CELLL   
19DA                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
19DA                VVNAME:   .SET   $   
19DA   E2 05 28 1A            DW   vvCODE,vvLINK   
19DE                VVLINK:   .SET   $   
19DE   44 45 4C 53 45         DB   IMEDD+4,"ELSE"   
05E2                          .ORG   vvCODE   
05E2   00                     NOP      
05E3   CD 24 06               CALL   doLIST   
05E6   A8 05 40 10 C8 05 72 06 DW   AHEAD,SWAP,THENN,EXIT   
05EE                             ;   WHILE       ( a -- A a )
05EE                             ;               Conditional branch out of a BEGIN-WHILE-REPEAT loop.
05EE                          ;*Macro unroll: mCOLON  IMEDD+5,'WHILE',WHILE
05EE                          ;*Macro unroll:  mCODE IMEDD+5, "WHILE", WHILE
05EE                          ALIGN   2   
05EE                WHILE:       
05EE                VVCODE:   .SET   $   
05EE                VVLEN:    .SET   (IMEDD+5 & 01FH) / CELLL   
1990                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1990                VVNAME:   .SET   $   
1990   EE 05 DE 19            DW   vvCODE,vvLINK   
1994                VVLINK:   .SET   $   
1994   45 57 48 49 4C 45      DB   IMEDD+5,"WHILE"   
05EE                          .ORG   vvCODE   
05EE   00                     NOP      
05EF   CD 24 06               CALL   doLIST   
05F2   96 05 40 10 72 06      DW   IFF,SWAP,EXIT   
05F8                             ;   ABORT"      ( -- ; <string> )
05F8                             ;               Conditional abort with an error message.
05F8                          ;*Macro unroll: mCOLON  IMEDD+6,'ABORTQ',ABRTQ
05F8                          ;*Macro unroll:  mCODE IMEDD+6, "ABORTQ", ABRTQ
05F8                          ALIGN   2   
05F8                ABRTQ:       
05F8                VVCODE:   .SET   $   
05F8                VVLEN:    .SET   (IMEDD+6 & 01FH) / CELLL   
1944                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1944                VVNAME:   .SET   $   
1944   F8 05 94 19            DW   vvCODE,vvLINK   
1948                VVLINK:   .SET   $   
1948   46 41 42 4F 52 54 51   DB   IMEDD+6,"ABORTQ"   
05F8                          .ORG   vvCODE   
05F8   00                     NOP      
05F9   CD 24 06               CALL   doLIST   
05FC   F2 03 CA 0A 10 04 72 06 DW   COMPI,ABORQ,STRCQ,EXIT   
0604                             ;   $"          ( -- ; <string> )
0604                             ;               Compile an inline string literal.
0604                          ;*Macro unroll: hCOLON  IMEDD+2,'$|',STRQ
0604                          ;*Macro unroll:  hCODE IMEDD+2, "$|", STRQ
0604                          ALIGN   2   
0604                STRQ:        
0604   00                     NOP      
0605   CD 24 06               CALL   doLIST   
0608   F2 03 6C 0C 10 04 72 06 DW   COMPI,STRQP,STRCQ,EXIT   
0610                             ;   ."          ( -- ; <string> )
0610                             ;               Compile an inline string literal to be typed out at run time.
0610                          ;*Macro unroll: hCOLON  IMEDD+2,'.|',DOTQ
0610                          ;*Macro unroll:  hCODE IMEDD+2, ".|", DOTQ
0610                          ALIGN   2   
0610                DOTQ:        
0610   00                     NOP      
0611   CD 24 06               CALL   doLIST   
0614   F2 03 74 0C 10 04 72 06 DW   COMPI,DOTQP,STRCQ,EXIT   
061C                             ; ;   UNLOOP	( -- ) ( R: loop-sys -- )	\ CORE
061C                             ; ;		Discard loop-control parameters for the current nesting level.
061C                             ; ;		An UNLOOP is required for each nesting level before the
061C                             ; ;		definition may be EXITed.
061C                             ; mCOLON	COMPO+6,"UNLOOP",UNLOOP
061C                             ; 	DW	RFrom,RFrom,RFrom,DDROP,ToR,EXIT
061C                             ;   doCONST	( -- x )
061C                             ;	Run-time routine of CONSTANT and VARIABLE.
061C                          ;*Macro unroll: hCODE	COMPO+7, 'doCONST', DoCONST
061C                          ALIGN   2   
061C                DOCONST:      
061C   E1                     POP   HL   ;10t
061D   C5                     PUSH   BC   ;11t
061E   4E                     LD   C,(HL)   ; 7t
061F   23                     INC   HL   ; 6t
0620   46                     LD   B,(HL)   ; 7t
0621                          ;*Macro unroll:  mNEXT
0621   EB                     EX   DE,HL   
0622                          ;*Macro unroll:  mNEXTHL                         ; 34t
0622   FD E9                  JP   (IY)   ; 34t
0624                             ;   doLIST	( -- ) ( R: -- nest-sys )
0624                             ;	Process colon list.
0624                          ;*Macro unroll: hCODE	COMPO+6, 'doLIST', DoLIST
0624                          ALIGN   2   
0624                DOLIST:      
0624   DD 2B                  DEC   IX   ;10t
0626   DD 72 00               LD   (IX+0),D   ;19t
0629   DD 2B                  DEC   IX   ;10t
062B   DD 73 00               LD   (IX+0),E   ;19t
062E   E1                     POP   HL   ;10t
062F                          ;*Macro unroll:  mNEXTHL							
062F   FD E9                  JP   (IY)   
0631                             ;   DOLIT	( -- x )
0631                             ;	Push an inline literal.
0631                          ;*Macro unroll: hCODE	COMPO+5, 'DOLIT', DOLIT
0631                          ALIGN   2   
0632                DOLIT:       
0632   C5                     PUSH   BC   ; 11t
0633   EB                     EX   DE,HL   ; 4t
0634   4E                     LD   C,(HL)   ; 7t
0635   23                     INC   HL   ; 6t
0636   46                     LD   B,(HL)   ; 7t
0637   23                     INC   HL   ; 6t
0638                          ;*Macro unroll:  mNEXTHL
0638   FD E9                  JP   (IY)   
063A                             ;   doVAR       ( -- a )
063A                             ;   Run time routine for VARIABLE and CREATE.
063A                          ;*Macro unroll: hCOLON  COMPO+5, 'doVAR', DoVAR
063A                          ;*Macro unroll:  hCODE COMPO+5, "doVAR", DoVAR
063A                          ALIGN   2   
063A                DOVAR:       
063A   00                     NOP      
063B   CD 24 06               CALL   doLIST   
063E   2A 10 72 06            DW   RFROM,EXIT   
0642                             ;   UP          ( -- a )
0642                             ;   Pointer to the user area.
0642                          ;*Macro unroll: hCOLON  2, 'UP', UP
0642                          ;*Macro unroll:  hCODE 2, "UP", UP
0642                          ALIGN   2   
0642                UP:          
0642   00                     NOP      
0643   CD 24 06               CALL   doLIST   
0646   3A 06                  DW   DoVAR   
0648   45 24                  DW   UPP   
064A                             ;   doUSER      ( -- a )
064A                             ;   Run time routine for user variables.
064A                          ;*Macro unroll: hCOLON  COMPO+6,'doUSER',DOUSE
064A                          ;*Macro unroll:  hCODE COMPO+6, "doUSER", DOUSE
064A                          ALIGN   2   
064A                DOUSE:       
064A   00                     NOP      
064B   CD 24 06               CALL   doLIST   
064E   2A 10 8E 0E 42 06 8E 0E 7A 01 72 06 DW   RFROM,AT,UP,AT,PLUS,EXIT   
065A                             ;   do$         ( -- a )
065A                             ;               Return the address of a compiled string.
065A                          ;*Macro unroll: hCOLON  COMPO+3,'do$',DOSTR
065A                          ;*Macro unroll:  hCODE COMPO+3, "do$", DOSTR
065A                          ALIGN   2   
065A                DOSTR:       
065A   00                     NOP      
065B   CD 24 06               CALL   doLIST   
065E   2A 10 A6 0E 2A 10 04 0F 7A 01 DW   RFROM,RAT,RFROM,COUNT,PLUS   
0668   FC 0F 1C 10 40 10 1C 10 72 06 DW   ALGND,TOR,SWAP,TOR,EXIT   
0672                             ;   EXIT	( -- ) ( R: nest-sys -- )	\ CORE
0672                             ;	Return control to the calling definition.
0672                          ;*Macro unroll: mCODE	COMPO+4, 'EXIT', EXIT
0672                          ALIGN   2   
0672                EXIT:        
0672                VVCODE:   .SET   $   
0672                VVLEN:    .SET   (COMPO+4 & 01FH) / CELLL   
191A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
191A                VVNAME:   .SET   $   
191A   72 06 48 19            DW   vvCODE,vvLINK   
191E                VVLINK:   .SET   $   
191E   24 45 58 49 54         DB   COMPO+4,"EXIT"   
0672                          .ORG   vvCODE   
0672   DD 6E 00               LD   L,(IX+0)   
0675   DD 23                  INC   IX   
0677   DD 66 00               LD   H,(IX+0)   
067A   DD 23                  INC   IX   
067C                          ;*Macro unroll:  mNEXTHL
067C   FD E9                  JP   (IY)   
067E                             ;   next        ( -- )
067E                             ;               Run time code for the single index loop.
067E                             ;               : next ( -- ) \ hilevel model
067E                             ;                 r> r> dup if 1 - >r @ >r exit then drop cell+ >r ;
067E                          ;*Macro unroll: mCODE   COMPO+4,'next',DONXT
067E                          ALIGN   2   
067E                DONXT:       
067E                VVCODE:   .SET   $   
067E                VVLEN:    .SET   (COMPO+4 & 01FH) / CELLL   
18F0                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
18F0                VVNAME:   .SET   $   
18F0   7E 06 1E 19            DW   vvCODE,vvLINK   
18F4                VVLINK:   .SET   $   
18F4   24 6E 65 78 74         DB   COMPO+4,"next"   
067E                          .ORG   vvCODE   
067E   DD E5                  PUSH   IX   
0680   E1                     POP   HL   ; load rp into HL
0681   7E                     LD   A,(HL)   ; a = low byte of r@
0682   B7                     OR   A   
0683   20 10                  JR   NZ,DECLOW   ; low > 0 goto dec low
0685   23                     INC   HL   
0686   7E                     LD   A,(HL)   ; a = high byte of r@
0687   B7                     OR   A   
0688   20 09                  JR   NZ,DECHILO   ; high > 0 goto dec hi dec lo
068A   23                     INC   HL   
068B   E5                     PUSH   HL   
068C   DD E1                  POP   IX   ; pop r@
068E   13                     INC   DE   ; IP = skip following word
068F   13                     INC   DE   
0690                          ;*Macro unroll:  mNEXT                               ; continue
0690   EB                     EX   DE,HL   ; continue
0691                          ;*Macro unroll:  mNEXTHL                         ; 34t
0691   FD E9                  JP   (IY)   ; 34t
0693                DECHILO:      
0693   35                     DEC   (HL)   ; dec high byte of r@
0694   2B                     DEC   HL   
0695                DECLOW:      
0695   35                     DEC   (HL)   ; dec low byte of r@
0696   6B                     LD   L,E   ; DE points to location of loop address
0697   62                     LD   H,D   
0698   5E                     LD   E,(HL)   ; DE points to loop address
0699   23                     INC   HL   
069A   56                     LD   D,(HL)   
069B                          ;*Macro unroll:  mNEXT                               ; continue to loop address
069B   EB                     EX   DE,HL   ; continue to loop address
069C                          ;*Macro unroll:  mNEXTHL                         ; 34t
069C   FD E9                  JP   (IY)   ; 34t
069E                             ;   DIGIT       ( u -- c )
069E                             ;               Convert digit u to a character.
069E                          ;*Macro unroll: hCOLON  5,'DIGIT',DIGIT
069E                          ;*Macro unroll:  hCODE 5, "DIGIT", DIGIT
069E                          ALIGN   2   
069E                DIGIT:       
069E   00                     NOP      
069F   CD 24 06               CALL   doLIST   
06A2   32 06 09 00 48 10 00 02 DW   DOLIT,9,OVER,LESS   
06AA   32 06 07 00 5C 01 7A 01 DW   DOLIT,7,ANDD,PLUS   
06B2   32 06 7A 01 72 06      DW   DOLIT,"0",PLUS,EXIT   
06B8                             ;   EXTRACT     ( n base -- n c )
06B8                             ;               Extract the least significant digit from n.
06B8                          ;*Macro unroll: hCOLON  7,'EXTRACT',EXTRC
06B8                          ;*Macro unroll:  hCODE 7, "EXTRACT", EXTRC
06B8                          ALIGN   2   
06B8                EXTRC:       
06B8   00                     NOP      
06B9   CD 24 06               CALL   doLIST   
06BC   32 06 00 00 40 10 5E 02 DW   DOLIT,0,SWAP,UMMOD   
06C4   40 10 9E 06 72 06      DW   SWAP,DIGIT,EXIT   
06CA                             ;   <#          ( -- )
06CA                             ;               Initiate the numeric output process.
06CA                          ;*Macro unroll: mCOLON  2,'<#',BDIGS
06CA                          ;*Macro unroll:  mCODE 2, "<#", BDIGS
06CA                          ALIGN   2   
06CA                BDIGS:       
06CA                VVCODE:   .SET   $   
06CA                VVLEN:    .SET   (2 & 01FH) / CELLL   
18E8                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
18E8                VVNAME:   .SET   $   
18E8   CA 06 F4 18            DW   vvCODE,vvLINK   
18EC                VVLINK:   .SET   $   
18EC   02 3C 23               DB   2,"<#"   
06CA                          .ORG   vvCODE   
06CA   00                     NOP      
06CB   CD 24 06               CALL   doLIST   
06CE   20 0F 38 11 84 0E 72 06 DW   PAD,HLD,STORE,EXIT   
06D6                             ;   HOLD        ( c -- )
06D6                             ;               Insert a character into the numeric output string.
06D6                          ;*Macro unroll: mCOLON  4,'HOLD',HOLD
06D6                          ;*Macro unroll:  mCODE 4, "HOLD", HOLD
06D6                          ALIGN   2   
06D6                HOLD:        
06D6                VVCODE:   .SET   $   
06D6                VVLEN:    .SET   (4 & 01FH) / CELLL   
18DE                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
18DE                VVNAME:   .SET   $   
18DE   D6 06 EC 18            DW   vvCODE,vvLINK   
18E2                VVLINK:   .SET   $   
18E2   04 48 4F 4C 44         DB   4,"HOLD"   
06D6                          .ORG   vvCODE   
06D6   00                     NOP      
06D7   CD 24 06               CALL   doLIST   
06DA   38 11 8E 0E 32 06 01 00 B4 01 DW   HLD,AT,DOLIT,1,SUBB   
06E4   38 10 38 11 84 0E 96 0E 72 06 DW   DUPP,HLD,STORE,CSTOR,EXIT   
06EE                             ;   #           ( u -- u )
06EE                             ;               Extract one digit from u and append the digit to output string.
06EE                          ;*Macro unroll: mCOLON  1,'#',DIG
06EE                          ;*Macro unroll:  mCODE 1, "#", DIG
06EE                          ALIGN   2   
06EE                DIG:         
06EE                VVCODE:   .SET   $   
06EE                VVLEN:    .SET   (1 & 01FH) / CELLL   
18D8                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
18D8                VVNAME:   .SET   $   
18D8   EE 06 E2 18            DW   vvCODE,vvLINK   
18DC                VVLINK:   .SET   $   
18DC   01 23                  DB   1,"#"   
06EE                          .ORG   vvCODE   
06EE   00                     NOP      
06EF   CD 24 06               CALL   doLIST   
06F2   F8 10 8E 0E B8 06 D6 06 72 06 DW   BASE,AT,EXTRC,HOLD,EXIT   
06FC                             ;   #S          ( u -- 0 )
06FC                             ;               Convert u until all digits are added to the output string.
06FC                          ;*Macro unroll: mCOLON  2,'#S',DIGS
06FC                          ;*Macro unroll:  mCODE 2, "#S", DIGS
06FC                          ALIGN   2   
06FC                DIGS:        
06FC                VVCODE:   .SET   $   
06FC                VVLEN:    .SET   (2 & 01FH) / CELLL   
18D0                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
18D0                VVNAME:   .SET   $   
18D0   FC 06 DC 18            DW   vvCODE,vvLINK   
18D4                VVLINK:   .SET   $   
18D4   02 23 53               DB   2,"#S"   
06FC                          .ORG   vvCODE   
06FC   00                     NOP      
06FD   CD 24 06               CALL   doLIST   
0700                DIGS1:       
0700   EE 06 38 10            DW   DIG,DUPP   
0704   68 0E 0C 07            DW   QBRAN,DIGS2   
0708   74 0E 00 07            DW   BRAN,DIGS1   
070C                DIGS2:       
070C   72 06                  DW   EXIT   
070E                             ;   SIGN        ( n -- )
070E                             ;               Add a minus sign to the numeric output string.
070E                          ;*Macro unroll: mCOLON	4,'SIGN',SIGN
070E                          ;*Macro unroll:  mCODE 4, "SIGN", SIGN
070E                          ALIGN   2   
070E                SIGN:        
070E                VVCODE:   .SET   $   
070E                VVLEN:    .SET   (4 & 01FH) / CELLL   
18C6                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
18C6                VVNAME:   .SET   $   
18C6   0E 07 D4 18            DW   vvCODE,vvLINK   
18CA                VVLINK:   .SET   $   
18CA   04 53 49 47 4E         DB   4,"SIGN"   
070E                          .ORG   vvCODE   
070E   00                     NOP      
070F   CD 24 06               CALL   doLIST   
0712   54 01 68 0E 1E 07      DW   ZLESS,QBRAN,SIGN1   
0718   32 06 2D 00 D6 06      DW   DoLIT,MINUSS,HOLD   
071E                SIGN1:       
071E   72 06                  DW   EXIT   
0720                             ;   #>          ( w -- b u )
0720                             ;               Prepare the output string to be TYPE'd.
0720                          ;*Macro unroll: mCOLON  2,'#>',EDIGS
0720                          ;*Macro unroll:  mCODE 2, "#>", EDIGS
0720                          ALIGN   2   
0720                EDIGS:       
0720                VVCODE:   .SET   $   
0720                VVLEN:    .SET   (2 & 01FH) / CELLL   
18BE                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
18BE                VVNAME:   .SET   $   
18BE   20 07 CA 18            DW   vvCODE,vvLINK   
18C2                VVLINK:   .SET   $   
18C2   02 23 3E               DB   2,"#>"   
0720                          .ORG   vvCODE   
0720   00                     NOP      
0721   CD 24 06               CALL   doLIST   
0724   3C 10 38 11 8E 0E      DW   DROP,HLD,AT   
072A   20 0F 48 10 B4 01 72 06 DW   PAD,OVER,SUBB,EXIT   
0732                             ;   str         ( n -- b u )
0732                             ;               Convert a signed integer to a numeric string.
0732                          ;*Macro unroll: hCOLON  3,'str',STR
0732                          ;*Macro unroll:  hCODE 3, "str", STR
0732                          ALIGN   2   
0732                STR:         
0732   00                     NOP      
0733   CD 24 06               CALL   doLIST   
0736   38 10 1C 10 BE 01      DW   DUPP,TOR,ABSS   
073C   CA 06 FC 06 2A 10      DW   BDIGS,DIGS,RFROM   
0742   0E 07 20 07 72 06      DW   SIGN,EDIGS,EXIT   
0748                             ;   HEX         ( -- )
0748                             ;               Use radix 16 as base for numeric conversions.
0748                          ;*Macro unroll: mCOLON  3,'HEX',HEX
0748                          ;*Macro unroll:  mCODE 3, "HEX", HEX
0748                          ALIGN   2   
0748                HEX:         
0748                VVCODE:   .SET   $   
0748                VVLEN:    .SET   (3 & 01FH) / CELLL   
18B6                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
18B6                VVNAME:   .SET   $   
18B6   48 07 C2 18            DW   vvCODE,vvLINK   
18BA                VVLINK:   .SET   $   
18BA   03 48 45 58            DB   3,"HEX"   
0748                          .ORG   vvCODE   
0748   00                     NOP      
0749   CD 24 06               CALL   doLIST   
074C   32 06 10 00 F8 10 84 0E 72 06 DW   DOLIT,16,BASE,STORE,EXIT   
0756                             ;   DECIMAL     ( -- )
0756                             ;               Use radix 10 as base for numeric conversions.
0756                          ;*Macro unroll: mCOLON  7,'DECIMAL',DECIMAL
0756                          ;*Macro unroll:  mCODE 7, "DECIMAL", DECIMAL
0756                          ALIGN   2   
0756                DECIMAL:      
0756                VVCODE:   .SET   $   
0756                VVLEN:    .SET   (7 & 01FH) / CELLL   
18AA                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
18AA                VVNAME:   .SET   $   
18AA   56 07 BA 18            DW   vvCODE,vvLINK   
18AE                VVLINK:   .SET   $   
18AE   07 44 45 43 49 4D 41 4C DB   7,"DECIMAL"   
0756                          .ORG   vvCODE   
0756   00                     NOP      
0757   CD 24 06               CALL   doLIST   
075A   32 06 10 00 F8 10 84 0E 72 06 DW   DOLIT,16,BASE,STORE,EXIT   
0764                             ;   BL          ( -- 32 )
0764                             ;               Return 32, the blank character.
0764                          ;*Macro unroll: mCOLON	2,'BL',BLANK
0764                          ;*Macro unroll:  mCODE 2, "BL", BLANK
0764                          ALIGN   2   
0764                BLANK:       
0764                VVCODE:   .SET   $   
0764                VVLEN:    .SET   (2 & 01FH) / CELLL   
18A2                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
18A2                VVNAME:   .SET   $   
18A2   64 07 AE 18            DW   vvCODE,vvLINK   
18A6                VVLINK:   .SET   $   
18A6   02 42 4C               DB   2,"BL"   
0764                          .ORG   vvCODE   
0764   00                     NOP      
0765   CD 24 06               CALL   doLIST   
0768   32 06 20 00 72 06      DW   DoLIT,SPACEE,EXIT   
076E                             ;   >CHAR       ( c -- c )
076E                             ;               Filter non-printing characters.
076E                          ;*Macro unroll: hCOLON  5,'>CHAR',TCHAR
076E                          ;*Macro unroll:  hCODE 5, ">CHAR", TCHAR
076E                          ALIGN   2   
076E                TCHAR:       
076E   00                     NOP      
076F   CD 24 06               CALL   doLIST   
0772   32 06 7F 00 5C 01 38 10 DW   DoLIT,$7F,ANDD,DUPP   ;mask msb
077A   32 06 7F 00            DW   DoLIT,127   
077E   32 06 20 00 40 02      DW   DoLIT,SPACEE,WITHI   ;check for printable
0784   68 0E 8E 07            DW   QBRAN,TCHA1   
0788   3C 10 32 06 5F 00      DW   DROP,DoLIT,UNDERSC   ;replace non-printables
078E                TCHA1:       
078E   72 06                  DW   EXIT   
0790                             ;   DIGIT?      ( c base -- u t )
0790                             ;               Convert a character to its numeric value. A flag indicates success.
0790                          ;*Macro unroll: hCOLON  6,'DIGIT?',DIGTQ
0790                          ;*Macro unroll:  hCODE 6, "DIGIT?", DIGTQ
0790                          ALIGN   2   
0790                DIGTQ:       
0790   00                     NOP      
0791   CD 24 06               CALL   doLIST   
0794   1C 10 32 06 B4 01      DW   TOR,DOLIT,"0",SUBB   
079A   32 06 09 00 48 10 00 02 DW   DOLIT,9,OVER,LESS   
07A2   68 0E B6 07            DW   QBRAN,DGTQ1   
07A6   32 06 07 00 B4 01      DW   DOLIT,7,SUBB   
07AC   38 10 32 06 0A 00 00 02 66 01 DW   DUPP,DOLIT,10,LESS,ORR   
07B6                DGTQ1:       
07B6   38 10 2A 10 E4 01 72 06 DW   DUPP,RFROM,ULESS,EXIT   
07BE                             ;   NUMBER?     ( a -- n T | a F )
07BE                             ;               Convert a number string to integer. Push a flag on tos.
07BE                          ;*Macro unroll: hCOLON  7,'NUMBER?',NUMBQ
07BE                          ;*Macro unroll:  hCODE 7, "NUMBER?", NUMBQ
07BE                          ALIGN   2   
07BE                NUMBQ:       
07BE   00                     NOP      
07BF   CD 24 06               CALL   doLIST   
07C2   F8 10 8E 0E 1C 10 32 06 00 00 48 10 04 0F DW   BASE,AT,TOR,DOLIT,0,OVER,COUNT   
07D0   48 10 9E 0E 32 06 CE 01 DW   OVER,CAT,DOLIT,"$",EQUAL   
07D8   68 0E EE 07            DW   QBRAN,NUMQ1   
07DC   48 07 40 10 32 06 01 00 7A 01 DW   HEX,SWAP,DOLIT,1,PLUS   
07E6   40 10 32 06 01 00 B4 01 DW   SWAP,DOLIT,1,SUBB   
07EE                NUMQ1:       
07EE   48 10 9E 0E 32 06 CE 01 1C 10 DW   OVER,CAT,DOLIT,"-",EQUAL,TOR   
07F8   40 10 A6 0E B4 01 40 10 A6 0E 7A 01 50 10 DW   SWAP,RAT,SUBB,SWAP,RAT,PLUS,QDUP   
0806   68 0E 58 08            DW   QBRAN,NUMQ6   
080A   32 06 01 00 B4 01 1C 10 DW   DOLIT,1,SUBB,TOR   
0812                NUMQ2:       
0812   38 10 1C 10 9E 0E F8 10 8E 0E 90 07 DW   DUPP,TOR,CAT,BASE,AT,DIGTQ   
081E   68 0E 4A 08            DW   QBRAN,NUMQ4   
0822   40 10 F8 10 8E 0E 34 03 7A 01 2A 10 DW   SWAP,BASE,AT,STAR,PLUS,RFROM   
082E   32 06 01 00 7A 01      DW   DOLIT,1,PLUS   
0834   7E 06 12 08            DW   DONXT,NUMQ2   
0838   A6 0E 40 10 3C 10      DW   RAT,SWAP,DROP   
083E   68 0E 44 08            DW   QBRAN,NUMQ3   
0842   90 01                  DW   NEGAT   
0844                NUMQ3:       
0844   40 10                  DW   SWAP   
0846   74 0E 56 08            DW   BRAN,NUMQ5   
084A                NUMQ4:       
084A   2A 10 2A 10 6C 10 6C 10 32 06 00 00 DW   RFROM,RFROM,DDROP,DDROP,DOLIT,0   
0856                NUMQ5:       
0856   38 10                  DW   DUPP   
0858                NUMQ6:       
0858   2A 10 6C 10            DW   RFROM,DDROP   
085C   2A 10 F8 10 84 0E 72 06 DW   RFROM,BASE,STORE,EXIT   
0864                             ;   parse       ( b u c -- b u delta ; <string> )
0864                             ;               Scan string delimited by c. Return found string and its offset.
0864                          ;*Macro unroll: hCOLON  5,'parse',PARS
0864                          ;*Macro unroll:  hCODE 5, "parse", PARS
0864                          ALIGN   2   
0864                PARS:        
0864   00                     NOP      
0865   CD 24 06               CALL   doLIST   
0868   00 11 84 0E 48 10 1C 10 38 10 DW   TEMP,STORE,OVER,TOR,DUPP   
0872   68 0E 00 09            DW   QBRAN,PARS8   
0876   32 06 01 00 B4 01 00 11 8E 0E 64 07 CE 01 DW   DOLIT,1,SUBB,TEMP,AT,BLANK,EQUAL   
0884   68 0E B2 08            DW   QBRAN,PARS3   
0888   1C 10                  DW   TOR   
088A                PARS1:       
088A   64 07 48 10 9E 0E      DW   BLANK,OVER,CAT   ;skip leading blanks ONLY
0890   B4 01 54 01 84 01      DW   SUBB,ZLESS,INVER   
0896   68 0E B0 08            DW   QBRAN,PARS2   
089A   32 06 01 00 7A 01      DW   DOLIT,1,PLUS   
08A0   7E 06 8A 08            DW   DONXT,PARS1   
08A4   2A 10 3C 10 32 06 00 00 38 10 72 06 DW   RFROM,DROP,DOLIT,0,DUPP,EXIT   
08B0                PARS2:       
08B0   2A 10                  DW   RFROM   
08B2                PARS3:       
08B2   48 10 40 10            DW   OVER,SWAP   
08B6   1C 10                  DW   TOR   
08B8                PARS4:       
08B8   00 11 8E 0E 48 10 9E 0E B4 01 DW   TEMP,AT,OVER,CAT,SUBB   ;scan for delimiter
08C2   00 11 8E 0E 64 07 CE 01 DW   TEMP,AT,BLANK,EQUAL   
08CA   68 0E D0 08            DW   QBRAN,PARS5   
08CE   54 01                  DW   ZLESS   
08D0                PARS5:       
08D0   68 0E E6 08            DW   QBRAN,PARS6   
08D4   32 06 01 00 7A 01      DW   DOLIT,1,PLUS   
08DA   7E 06 B8 08            DW   DONXT,PARS4   
08DE   38 10 1C 10            DW   DUPP,TOR   
08E2   74 0E F4 08            DW   BRAN,PARS7   
08E6                PARS6:       
08E6   2A 10 3C 10 38 10      DW   RFROM,DROP,DUPP   
08EC   32 06 01 00 7A 01 1C 10 DW   DOLIT,1,PLUS,TOR   
08F4                PARS7:       
08F4   48 10 B4 01            DW   OVER,SUBB   
08F8   2A 10 2A 10 B4 01 72 06 DW   RFROM,RFROM,SUBB,EXIT   
0900                PARS8:       
0900   48 10 2A 10 B4 01 72 06 DW   OVER,RFROM,SUBB,EXIT   
0908                             ;   PARSE       ( c -- b u ; <string> )
0908                             ;               Scan input stream and return counted string delimited by c.
0908                          ;*Macro unroll: mCOLON  5,'PARSE',PARSE
0908                          ;*Macro unroll:  mCODE 5, "PARSE", PARSE
0908                          ALIGN   2   
0908                PARSE:       
0908                VVCODE:   .SET   $   
0908                VVLEN:    .SET   (5 & 01FH) / CELLL   
1898                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1898                VVNAME:   .SET   $   
1898   08 09 A6 18            DW   vvCODE,vvLINK   
189C                VVLINK:   .SET   $   
189C   05 50 41 52 53 45      DB   5,"PARSE"   
0908                          .ORG   vvCODE   
0908   00                     NOP      
0909   CD 24 06               CALL   doLIST   
090C   1C 10 2E 0F 10 11 8E 0E 7A 01 DW   TOR,TIB,INN,AT,PLUS   ;current input buffer pointer
0916   18 11 8E 0E 10 11 8E 0E B4 01 DW   NTIB,AT,INN,AT,SUBB   ;remaining count
0920   2A 10 64 08 10 11 D2 0E 72 06 DW   RFROM,PARS,INN,PSTOR,EXIT   
092A                             ;   (           ( -- )
092A                             ;               Ignore following string up to next ) . A comment.
092A                          ;*Macro unroll: mCOLON  IMEDD+1,'(',PAREN
092A                          ;*Macro unroll:  mCODE IMEDD+1, "(", PAREN
092A                          ALIGN   2   
092A                PAREN:       
092A                VVCODE:   .SET   $   
092A                VVLEN:    .SET   (IMEDD+1 & 01FH) / CELLL   
1852                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1852                VVNAME:   .SET   $   
1852   2A 09 9C 18            DW   vvCODE,vvLINK   
1856                VVLINK:   .SET   $   
1856   41 28                  DB   IMEDD+1,"("   
092A                          .ORG   vvCODE   
092A   00                     NOP      
092B   CD 24 06               CALL   doLIST   
092E   32 06 08 09 6C 10 72 06 DW   DOLIT,")",PARSE,DDROP,EXIT   
0936                             ;   \           ( -- )
0936                             ;               Ignore following text till the end of line.
0936                          ;*Macro unroll: mCOLON  IMEDD+1, $5C, BKSLA
0936                          ;*Macro unroll:  mCODE IMEDD+1, $5C, BKSLA
0936                          ALIGN   2   
0936                BKSLA:       
0936                VVCODE:   .SET   $   
0936                VVLEN:    .SET   (IMEDD+1 & 01FH) / CELLL   
180C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
180C                VVNAME:   .SET   $   
180C   36 09 56 18            DW   vvCODE,vvLINK   
1810                VVLINK:   .SET   $   
1810   41 5C                  DB   IMEDD+1,$5C   
0936                          .ORG   vvCODE   
0936   00                     NOP      
0937   CD 24 06               CALL   doLIST   
093A   18 11 8E 0E 10 11 84 0E 72 06 DW   NTIB,AT,INN,STORE,EXIT   
0944                             ;   CHAR        ( -- c )
0944                             ;               Parse next word and return its first character.
0944                          ;*Macro unroll: mCOLON  4,'CHAR',CHAR
0944                          ;*Macro unroll:  mCODE 4, "CHAR", CHAR
0944                          ALIGN   2   
0944                CHAR:        
0944                VVCODE:   .SET   $   
0944                VVLEN:    .SET   (4 & 01FH) / CELLL   
1802                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1802                VVNAME:   .SET   $   
1802   44 09 10 18            DW   vvCODE,vvLINK   
1806                VVLINK:   .SET   $   
1806   04 43 48 41 52         DB   4,"CHAR"   
0944                          .ORG   vvCODE   
0944   00                     NOP      
0945   CD 24 06               CALL   doLIST   
0948   64 07 08 09 3C 10 9E 0E 72 06 DW   BLANK,PARSE,DROP,CAT,EXIT   
0952                             ;   TOKEN       ( -- a ; <string> )
0952                             ;               Parse a word from input stream and copy it to name dictionary.
0952                          ;*Macro unroll: hCOLON  5,'TOKEN',TOKEN
0952                          ;*Macro unroll:  hCODE 5, "TOKEN", TOKEN
0952                          ALIGN   2   
0952                TOKEN:       
0952   00                     NOP      
0953   CD 24 06               CALL   doLIST   
0956   64 07 08 09 32 06 1F 00 2C 02 DW   BLANK,PARSE,DOLIT,31,MIN   
0960   60 11 8E 0E 48 10 B4 01 82 03 DW   NP,AT,OVER,SUBB,CELLM   
096A   C2 0F 72 06            DW   PACKS,EXIT   
096E                             ;   WORD        ( c -- a ; <string> )
096E                             ;               Parse a word from input stream and copy it to code dictionary.
096E                          ;*Macro unroll: mCOLON  4,'WORD',WORDD
096E                          ;*Macro unroll:  mCODE 4, "WORD", WORDD
096E                          ALIGN   2   
096E                WORDD:       
096E                VVCODE:   .SET   $   
096E                VVLEN:    .SET   (4 & 01FH) / CELLL   
17F8                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
17F8                VVNAME:   .SET   $   
17F8   6E 09 06 18            DW   vvCODE,vvLINK   
17FC                VVLINK:   .SET   $   
17FC   04 57 4F 52 44         DB   4,"WORD"   
096E                          .ORG   vvCODE   
096E   00                     NOP      
096F   CD 24 06               CALL   doLIST   
0972   08 09 16 0F C2 0F 72 06 DW   PARSE,HERE,PACKS,EXIT   
097A                             ;   NAME>       ( na -- ca )
097A                             ;               Return a code address given a name address.
097A                          ;*Macro unroll: hCOLON  5,'NAME>',NAMET
097A                          ;*Macro unroll:  hCODE 5, "NAME>", NAMET
097A                          ALIGN   2   
097A                NAMET:       
097A   00                     NOP      
097B   CD 24 06               CALL   doLIST   
097E   82 03 82 03 8E 0E 72 06 DW   CELLM,CELLM,AT,EXIT   
0986                             ;   SAME?       ( a a u -- a a f \ -0+ )
0986                             ;               Compare u cells in two strings. Return 0 if identical.
0986                          ;*Macro unroll: hCOLON  5,'SAME?',SAMEQ
0986                          ;*Macro unroll:  hCODE 5, "SAME?", SAMEQ
0986                          ALIGN   2   
0986                SAMEQ:       
0986   00                     NOP      
0987   CD 24 06               CALL   doLIST   
098A   1C 10                  DW   TOR   
098C   74 0E B2 09            DW   BRAN,SAME2   
0990   48 10 A6 0E 8E 03 7A 01 8E 0E SAME1:   DW   OVER,RAT,CELLS,PLUS,AT   
099A   48 10 A6 0E 8E 03 7A 01 8E 0E DW   OVER,RAT,CELLS,PLUS,AT   
09A4   B4 01 50 10            DW   SUBB,QDUP   
09A8   68 0E B2 09            DW   QBRAN,SAME2   
09AC   2A 10 3C 10 72 06      DW   RFROM,DROP,EXIT   ;strings not equal
09B2   7E 06 90 09  SAME2:    DW   DONXT,SAME1   
09B6   32 06 00 00 72 06      DW   DOLIT,0,EXIT   ;strings equal
09BC                             ;   find        ( a va -- ca na | a F )
09BC                             ;               Search a vocabulary for a string. Return ca and na if succeeded.
09BC                          ;*Macro unroll: mCOLON  4,'find',FIND
09BC                          ;*Macro unroll:  mCODE 4, "find", FIND
09BC                          ALIGN   2   
09BC                FIND:        
09BC                VVCODE:   .SET   $   
09BC                VVLEN:    .SET   (4 & 01FH) / CELLL   
17EE                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
17EE                VVNAME:   .SET   $   
17EE   BC 09 FC 17            DW   vvCODE,vvLINK   
17F2                VVLINK:   .SET   $   
17F2   04 66 69 6E 64         DB   4,"find"   
09BC                          .ORG   vvCODE   
09BC   00                     NOP      
09BD   CD 24 06               CALL   doLIST   
09C0   40 10 38 10 9E 0E      DW   SWAP,DUPP,CAT   
09C6   32 06 02 00 0C 03 00 11 84 0E DW   DOLIT,CELLL,SLASH,TEMP,STORE   
09D0   38 10 8E 0E 1C 10 76 03 40 10 DW   DUPP,AT,TOR,CELLP,SWAP   
09DA   8E 0E 38 10  FIND1:    DW   AT,DUPP   
09DE   68 0E 0A 0A            DW   QBRAN,FIND6   
09E2   38 10 8E 0E 32 06 1F 00 5C 01 A6 0E 70 01 DW   DUPP,AT,DOLIT,MASKK,ANDD,RAT,XORR   
09F0   68 0E FE 09            DW   QBRAN,FIND2   
09F4   76 03 32 06 FF FF      DW   CELLP,DOLIT,-1   ;true flag
09FA   74 0E 06 0A            DW   BRAN,FIND3   
09FE   76 03 00 11 8E 0E 86 09 FIND2:   DW   CELLP,TEMP,AT,SAMEQ   
0A06   74 0E 16 0A  FIND3:    DW   BRAN,FIND4   
0A0A   2A 10 3C 10  FIND6:    DW   RFROM,DROP   
0A0E   40 10 82 03 40 10 72 06 DW   SWAP,CELLM,SWAP,EXIT   
0A16   68 0E 22 0A  FIND4:    DW   QBRAN,FIND5   
0A1A   82 03 82 03            DW   CELLM,CELLM   
0A1E   74 0E DA 09            DW   BRAN,FIND1   
0A22   2A 10 3C 10 40 10 3C 10 FIND5:   DW   RFROM,DROP,SWAP,DROP   
0A2A   82 03                  DW   CELLM   
0A2C   38 10 7A 09 40 10 72 06 DW   DUPP,NAMET,SWAP,EXIT   
0A34                             ;   NAME?       ( a -- ca na | a F )
0A34                             ;               Search all context vocabularies for a string.
0A34                          ;*Macro unroll: hCOLON  5,'NAME?',NAMEQ
0A34                          ;*Macro unroll:  hCODE 5, "NAME?", NAMEQ
0A34                          ALIGN   2   
0A34                NAMEQ:       
0A34   00                     NOP      
0A35   CD 24 06               CALL   doLIST   
0A38   48 11 38 10 F4 0E 70 01 DW   CNTXT,DUPP,DAT,XORR   ;?context=also
0A40   68 0E 46 0A            DW   QBRAN,NAMQ1   
0A44   82 03                  DW   CELLM   ;no, start with context
0A46   1C 10        NAMQ1:    DW   TOR   
0A48   2A 10 76 03 38 10 1C 10 NAMQ2:   DW   RFROM,CELLP,DUPP,TOR   ;next in search order
0A50   8E 0E 50 10            DW   AT,QDUP   
0A54   68 0E 66 0A            DW   QBRAN,NAMQ3   
0A58   BC 09 50 10            DW   FIND,QDUP   ;search vocabulary
0A5C   68 0E 48 0A            DW   QBRAN,NAMQ2   
0A60   2A 10 3C 10 72 06      DW   RFROM,DROP,EXIT   ;found name
0A66   2A 10 3C 10  NAMQ3:    DW   RFROM,DROP   ;name not found
0A6A   32 06 00 00 72 06      DW   DOLIT,0,EXIT   ;false flag
0A70                             ;   CATCH       ( ca -- 0 | err# )
0A70                             ;               Execute word at ca and set up an error frame for it.
0A70                          ;*Macro unroll: mCOLON  5,'CATCH',CATCH
0A70                          ;*Macro unroll:  mCODE 5, "CATCH", CATCH
0A70                          ALIGN   2   
0A70                CATCH:       
0A70                VVCODE:   .SET   $   
0A70                VVLEN:    .SET   (5 & 01FH) / CELLL   
17E4                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
17E4                VVNAME:   .SET   $   
17E4   70 0A F2 17            DW   vvCODE,vvLINK   
17E8                VVLINK:   .SET   $   
17E8   05 43 41 54 43 48      DB   5,"CATCH"   
0A70                          .ORG   vvCODE   
0A70   00                     NOP      
0A71   CD 24 06               CALL   doLIST   
0A74   C0 0E 1C 10 40 11 8E 0E 1C 10 DW   SPAT,TOR,HANDL,AT,TOR   ;save error frame
0A7E   B0 0E 40 11 84 0E 64 0E DW   RPAT,HANDL,STORE,EXECU   ;execute
0A86   2A 10 40 11 84 0E      DW   RFROM,HANDL,STORE   ;reSTORE error frame
0A8C   2A 10 3C 10 32 06 00 00 72 06 DW   RFROM,DROP,DOLIT,0,EXIT   ;no error
0A96                             ;   THROW       ( err# -- err# )
0A96                             ;               Reset system to current local error frame an update error flag.
0A96                          ;*Macro unroll: mCOLON  5,'THROW',THROW
0A96                          ;*Macro unroll:  mCODE 5, "THROW", THROW
0A96                          ALIGN   2   
0A96                THROW:       
0A96                VVCODE:   .SET   $   
0A96                VVLEN:    .SET   (5 & 01FH) / CELLL   
17DA                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
17DA                VVNAME:   .SET   $   
17DA   96 0A E8 17            DW   vvCODE,vvLINK   
17DE                VVLINK:   .SET   $   
17DE   05 54 48 52 4F 57      DB   5,"THROW"   
0A96                          .ORG   vvCODE   
0A96   00                     NOP      
0A97   CD 24 06               CALL   doLIST   
0A9A   40 11 8E 0E B8 0E      DW   HANDL,AT,RPSTO   ;reSTORE return stack
0AA0   2A 10 40 11 84 0E      DW   RFROM,HANDL,STORE   ;reSTORE handler frame
0AA6   2A 10 40 10 1C 10 CA 0E DW   RFROM,SWAP,TOR,SPSTO   ;reSTORE data stack
0AAE   3C 10 2A 10 72 06      DW   DROP,RFROM,EXIT   
0AB4                             ;   NULL$       ( -- a )
0AB4                             ;               Return address of a null string with zero count.
0AB4                          ;*Macro unroll: hCOLON  5,'NULL$',NULLS
0AB4                          ;*Macro unroll:  hCODE 5, "NULL$", NULLS
0AB4                          ALIGN   2   
0AB4                NULLS:       
0AB4   00                     NOP      
0AB5   CD 24 06               CALL   doLIST   
0AB8   3A 06                  DW   DOVAR   ;emulate CREATE
0ABA   00 00                  DW   0   
0ABC   63 6F 79 6F 74 65      DB   99,111,121,111,116,101   
0AC2                          ALIGN   2   
0AC2                             ;   ABORT       ( -- )
0AC2                             ;               Reset data stack and jump to QUIT.
0AC2                          ;*Macro unroll: mCOLON  5,'ABORT',ABORT
0AC2                          ;*Macro unroll:  mCODE 5, "ABORT", ABORT
0AC2                          ALIGN   2   
0AC2                ABORT:       
0AC2                VVCODE:   .SET   $   
0AC2                VVLEN:    .SET   (5 & 01FH) / CELLL   
17D0                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
17D0                VVNAME:   .SET   $   
17D0   C2 0A DE 17            DW   vvCODE,vvLINK   
17D4                VVLINK:   .SET   $   
17D4   05 41 42 4F 52 54      DB   5,"ABORT"   
0AC2                          .ORG   vvCODE   
0AC2   00                     NOP      
0AC3   CD 24 06               CALL   doLIST   
0AC6   B4 0A 96 0A            DW   NULLS,THROW   
0ACA                             ;   abort"      ( f -- )
0ACA                             ;               Run time routine of ABORT" . Abort with a message.
0ACA                          ;*Macro unroll: hCOLON  COMPO+6,'abort|',ABORQ
0ACA                          ;*Macro unroll:  hCODE COMPO+6, "abort|", ABORQ
0ACA                          ALIGN   2   
0ACA                ABORQ:       
0ACA   00                     NOP      
0ACB   CD 24 06               CALL   doLIST   
0ACE   68 0E D6 0A            DW   QBRAN,ABOR1   ;text flag
0AD2   5A 06 96 0A            DW   DOSTR,THROW   ;pass error string
0AD6                ABOR1:       
0AD6   5A 06 3C 10 72 06      DW   DOSTR,DROP,EXIT   ;drop error
0ADC                             ;   $INTERPRET  ( a -- )
0ADC                             ;               Interpret a word. If failed, try to convert it to an integer.
0ADC                          ;*Macro unroll: hCOLON  10,'$INTERPRET',INTER
0ADC                          ;*Macro unroll:  hCODE 10, "$INTERPRET", INTER
0ADC                          ALIGN   2   
0ADC                INTER:       
0ADC   00                     NOP      
0ADD   CD 24 06               CALL   doLIST   
0AE0   34 0A 50 10            DW   NAMEQ,QDUP   ;?defined
0AE4   68 0E 04 0B            DW   QBRAN,INTE1   
0AE8   8E 0E 32 06 20 00 5C 01 DW   AT,DOLIT,COMPO,ANDD   ;?compile only lexicon bits
0AF0                          ;*Macro unroll:  mDSTR   ABORQ,' compile only'
0AF0   CA 0A                  DW   ABORQ   
0AF2                VVLEN:    .SET   $   
0AF2   00 20 63 6F 6D 70 69 6C 65 20 6F 6E 6C 79 DB   0," compile only"   
0B00                VVCODE:   .SET   $   
0AF2                          .ORG   vvLEN   
0AF2   0D                     DB   vvCODE - vvLEN - 1   
0B00                          .ORG   vvCODE   
0B00   64 0E 72 06            DW   EXECU,EXIT   ;execute defined word
0B04                INTE1:       
0B04   30 11 3A 0F            DW   TNUMB,ATEXE   ;convert a number
0B08   68 0E 0E 0B            DW   QBRAN,INTE2   
0B0C   72 06                  DW   EXIT   
0B0E                INTE2:       
0B0E   96 0A                  DW   THROW   ;error
0B10                             ;   [           ( -- )
0B10                             ;               Start the text interpreter.
0B10                          ;*Macro unroll: mCOLON  IMEDD+1,'[',LBRAC
0B10                          ;*Macro unroll:  mCODE IMEDD+1, "[", LBRAC
0B10                          ALIGN   2   
0B10                LBRAC:       
0B10                VVCODE:   .SET   $   
0B10                VVLEN:    .SET   (IMEDD+1 & 01FH) / CELLL   
178A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
178A                VVNAME:   .SET   $   
178A   10 0B D4 17            DW   vvCODE,vvLINK   
178E                VVLINK:   .SET   $   
178E   41 5B                  DB   IMEDD+1,"["   
0B10                          .ORG   vvCODE   
0B10   00                     NOP      
0B11   CD 24 06               CALL   doLIST   
0B14   32 06 DC 0A 28 11 84 0E 72 06 DW   DOLIT,INTER,TEVAL,STORE,EXIT   
0B1E                             ;   .OK         ( -- )
0B1E                             ;               Display "ok" only while interpreting.
0B1E                          ;*Macro unroll: mCOLON  3,'.OK',DOTOK
0B1E                          ;*Macro unroll:  mCODE 3, ".OK", DOTOK
0B1E                          ALIGN   2   
0B1E                DOTOK:       
0B1E                VVCODE:   .SET   $   
0B1E                VVLEN:    .SET   (3 & 01FH) / CELLL   
1782                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1782                VVNAME:   .SET   $   
1782   1E 0B 8E 17            DW   vvCODE,vvLINK   
1786                VVLINK:   .SET   $   
1786   03 2E 4F 4B            DB   3,".OK"   
0B1E                          .ORG   vvCODE   
0B1E   00                     NOP      
0B1F   CD 24 06               CALL   doLIST   
0B22   32 06 DC 0A 28 11 8E 0E CE 01 DW   DOLIT,INTER,TEVAL,AT,EQUAL   
0B2C   68 0E 36 0B            DW   QBRAN,DOTO1   
0B30                          ;*Macro unroll:  mDSTR      DOTQP,' ok'
0B30   74 0C                  DW   DOTQP   
0B32                VVLEN:    .SET   $   
0B32   00 20 6F 6B            DB   0," ok"   
0B36                VVCODE:   .SET   $   
0B32                          .ORG   vvLEN   
0B32   03                     DB   vvCODE - vvLEN - 1   
0B36                          .ORG   vvCODE   
0B36   5A 0C 72 06  DOTO1:    DW   CR,EXIT   
0B3A                             ;   ?STACK      ( -- )
0B3A                             ;               Abort if the data stack underflows.
0B3A                          ;*Macro unroll: hCOLON  6,'?STACK',QSTAC
0B3A                          ;*Macro unroll:  hCODE 6, "?STACK", QSTAC
0B3A                          ALIGN   2   
0B3A                QSTAC:       
0B3A   00                     NOP      
0B3B   CD 24 06               CALL   doLIST   
0B3E   A2 10 54 01            DW   DEPTH,ZLESS   ;check only for underflow
0B42                          ;*Macro unroll:  mDSTR      ABORQ,' underflow'
0B42   CA 0A                  DW   ABORQ   
0B44                VVLEN:    .SET   $   
0B44   00 20 75 6E 64 65 72 66 6C 6F 77 DB   0," underflow"   
0B4F                VVCODE:   .SET   $   
0B44                          .ORG   vvLEN   
0B44   0A                     DB   vvCODE - vvLEN - 1   
0B4F                          .ORG   vvCODE   
0B4F   72 06                  DW   EXIT   
0B51                             ;   EVAL        ( -- )
0B51                             ;               Interpret the input stream.
0B51                          ;*Macro unroll: mCOLON  4,'EVAL',EVAL
0B51                          ;*Macro unroll:  mCODE 4, "EVAL", EVAL
0B51                          ALIGN   2   
0B52                EVAL:        
0B52                VVCODE:   .SET   $   
0B52                VVLEN:    .SET   (4 & 01FH) / CELLL   
1778                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1778                VVNAME:   .SET   $   
1778   52 0B 86 17            DW   vvCODE,vvLINK   
177C                VVLINK:   .SET   $   
177C   04 45 56 41 4C         DB   4,"EVAL"   
0B52                          .ORG   vvCODE   
0B52   00                     NOP      
0B53   CD 24 06               CALL   doLIST   
0B56                EVAL1:       
0B56   52 09 38 10 9E 0E      DW   TOKEN,DUPP,CAT   ;?input stream empty
0B5C   68 0E 6A 0B            DW   QBRAN,EVAL2   
0B60   28 11 3A 0F 3A 0B      DW   TEVAL,ATEXE,QSTAC   ;evaluate input, check stack
0B66   74 0E 56 0B            DW   BRAN,EVAL1   
0B6A                EVAL2:       
0B6A   3C 10 F0 10 3A 0F 72 06 DW   DROP,TPROM,ATEXE,EXIT   ;prompt
0B72                             ;   PC!         ( uc p --  )
0B72                             ;               output uc to IO port p
0B72                          ;*Macro unroll: mCODE   3,'PC!',PCSTO
0B72                          ALIGN   2   
0B72                PCSTO:       
0B72                VVCODE:   .SET   $   
0B72                VVLEN:    .SET   (3 & 01FH) / CELLL   
1770                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1770                VVNAME:   .SET   $   
1770   72 0B 7C 17            DW   vvCODE,vvLINK   
1774                VVLINK:   .SET   $   
1774   03 50 43 21            DB   3,"PC!"   
0B72                          .ORG   vvCODE   
0B72   D9                     EXX      ; 4t
0B73   D1                     POP   DE   ;10t
0B74   7B                     LD   A,E   ; 4t
0B75   ED 79                  OUT   (C),A   ;12t
0B77   D9                     EXX      ; 4t
0B78                          ;*Macro unroll:  mNEXT
0B78   EB                     EX   DE,HL   
0B79                          ;*Macro unroll:  mNEXTHL                         ; 34t
0B79   FD E9                  JP   (IY)   ; 34t
0B7B                             ;   PC@         ( p -- uc )
0B7B                             ;               output uc to IO port p
0B7B                          ;*Macro unroll: mCODE   3,'PC@',PCAT
0B7B                          ALIGN   2   
0B7C                PCAT:        
0B7C                VVCODE:   .SET   $   
0B7C                VVLEN:    .SET   (3 & 01FH) / CELLL   
1768                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1768                VVNAME:   .SET   $   
1768   7C 0B 74 17            DW   vvCODE,vvLINK   
176C                VVLINK:   .SET   $   
176C   03 50 43 40            DB   3,"PC@"   
0B7C                          .ORG   vvCODE   
0B7C   D9                     EXX      ; 4t
0B7D   ED 78                  IN   A,(C)   ;12t
0B7F   5F                     LD   E,A   ; 4t
0B80   16 00                  LD   D,0   ; 7t
0B82   D5                     PUSH   DE   ;11t
0B83   D9                     EXX      ; 4t
0B84                          ;*Macro unroll:  mNEXT
0B84   EB                     EX   DE,HL   
0B85                          ;*Macro unroll:  mNEXTHL                         ; 34t
0B85   FD E9                  JP   (IY)   ; 34t
0B87                             ;   !IO         ( -- )
0B87                             ;               Initialize the serial I/O devices.
0B87                          ;*Macro unroll: mCODE   3,'!IO', STOIO ;
0B87                          ALIGN   2   ; 
0B88                STOIO:       
0B88                VVCODE:   .SET   $   
0B88                VVLEN:    .SET   (3 & 01FH) / CELLL   
1760                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1760                VVNAME:   .SET   $   
1760   88 0B 6C 17            DW   vvCODE,vvLINK   
1764                VVLINK:   .SET   $   
1764   03 21 49 4F            DB   3,"!IO"   
0B88                          .ORG   vvCODE   
0B88   CD D1 00               CALL   INIT_IO   
0B8B                          ;*Macro unroll:  mNEXT
0B8B   EB                     EX   DE,HL   
0B8C                          ;*Macro unroll:  mNEXTHL                         ; 34t
0B8C   FD E9                  JP   (IY)   ; 34t
0B8E                             ;   ?RX         ( -- c T | F )
0B8E                             ;               Return input character and true, or a false if no input.
0B8E                          ;*Macro unroll: mCODE	3, '?RX', QRX
0B8E                          ALIGN   2   
0B8E                QRX:         
0B8E                VVCODE:   .SET   $   
0B8E                VVLEN:    .SET   (3 & 01FH) / CELLL   
1758                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1758                VVNAME:   .SET   $   
1758   8E 0B 64 17            DW   vvCODE,vvLINK   
175C                VVLINK:   .SET   $   
175C   03 3F 52 58            DB   3,"?RX"   
0B8E                          .ORG   vvCODE   
0B8E   C5                     PUSH   BC   
0B8F   CD 14 01               CALL   QRXA   
0B92   20 05                  JR   nz,QRX1   
0B94   01 00 00               LD   BC,FALSEE   
0B97   18 0A                  JR   QRX2   
0B99                QRX1:        
0B99   CD E5 00               CALL   RXA   
0B9C   4F                     LD   C,A   
0B9D   06 00                  LD   B,0   
0B9F   C5                     PUSH   BC   
0BA0   01 FF FF               LD   BC,TRUEE   
0BA3                QRX2:        
0BA3                          ;*Macro unroll:  mNEXT
0BA3   EB                     EX   DE,HL   
0BA4                          ;*Macro unroll:  mNEXTHL                         ; 34t
0BA4   FD E9                  JP   (IY)   ; 34t
0BA6                             ;   TX!         ( c -- )
0BA6                             ;               Send character c to the output device.
0BA6                          ;*Macro unroll: mCODE	3,'TX!',TXSTO
0BA6                          ALIGN   2   
0BA6                TXSTO:       
0BA6                VVCODE:   .SET   $   
0BA6                VVLEN:    .SET   (3 & 01FH) / CELLL   
1750                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1750                VVNAME:   .SET   $   
1750   A6 0B 5C 17            DW   vvCODE,vvLINK   
1754                VVLINK:   .SET   $   
1754   03 54 58 21            DB   3,"TX!"   
0BA6                          .ORG   vvCODE   
0BA6   79                     LD   A,C   
0BA7   CD 09 01               CALL   TXA   
0BAA   C1                     POP   BC   
0BAB                          ;*Macro unroll:  mNEXT
0BAB   EB                     EX   DE,HL   
0BAC                          ;*Macro unroll:  mNEXTHL                         ; 34t
0BAC   FD E9                  JP   (IY)   ; 34t
0BAE                             ;   ?KEY        ( -- c T | F )
0BAE                             ;               Return input character and true, or a false if no input.
0BAE                          ;*Macro unroll: mCOLON  4,'?KEY',QKEY
0BAE                          ;*Macro unroll:  mCODE 4, "?KEY", QKEY
0BAE                          ALIGN   2   
0BAE                QKEY:        
0BAE                VVCODE:   .SET   $   
0BAE                VVLEN:    .SET   (4 & 01FH) / CELLL   
1746                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1746                VVNAME:   .SET   $   
1746   AE 0B 54 17            DW   vvCODE,vvLINK   
174A                VVLINK:   .SET   $   
174A   04 3F 4B 45 59         DB   4,"?KEY"   
0BAE                          .ORG   vvCODE   
0BAE   00                     NOP      
0BAF   CD 24 06               CALL   doLIST   
0BB2   C8 10 8E 0E 64 0E 72 06 DW   TQKEY,AT,EXECU,EXIT   
0BBA                             ;   KEY         ( -- c )
0BBA                             ;               Wait for and return an input character.
0BBA                          ;*Macro unroll: mCOLON  3,'KEY',KEY
0BBA                          ;*Macro unroll:  mCODE 3, "KEY", KEY
0BBA                          ALIGN   2   
0BBA                KEY:         
0BBA                VVCODE:   .SET   $   
0BBA                VVLEN:    .SET   (3 & 01FH) / CELLL   
173E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
173E                VVNAME:   .SET   $   
173E   BA 0B 4A 17            DW   vvCODE,vvLINK   
1742                VVLINK:   .SET   $   
1742   03 4B 45 59            DB   3,"KEY"   
0BBA                          .ORG   vvCODE   
0BBA   00                     NOP      
0BBB   CD 24 06               CALL   doLIST   
0BBE                KEY1:        
0BBE   AE 0B                  DW   QKEY   
0BC0   38 10 68 0E C6 0B      DW   DUPP,QBRAN,KEY2   
0BC6                             ; DW DOLIT, $22, EMIT
0BC6                KEY2:        
0BC6   68 0E BE 0B            DW   QBRAN,KEY1   
0BCA   72 06                  DW   EXIT   
0BCC                             ;   EMIT        ( c -- )
0BCC                             ;               Send a character to the output device.
0BCC                          ;*Macro unroll: mCOLON  4, 'EMIT', EMIT
0BCC                          ;*Macro unroll:  mCODE 4, "EMIT", EMIT
0BCC                          ALIGN   2   
0BCC                EMIT:        
0BCC                VVCODE:   .SET   $   
0BCC                VVLEN:    .SET   (4 & 01FH) / CELLL   
1734                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1734                VVNAME:   .SET   $   
1734   CC 0B 42 17            DW   vvCODE,vvLINK   
1738                VVLINK:   .SET   $   
1738   04 45 4D 49 54         DB   4,"EMIT"   
0BCC                          .ORG   vvCODE   
0BCC   00                     NOP      
0BCD   CD 24 06               CALL   doLIST   
0BD0   D0 10 8E 0E 64 0E 72 06 DW   TEMIT,AT,EXECU,EXIT   
0BD8                             ;   NUF?        ( -- t )
0BD8                             ;               Return false if no input, else pause and if CR return true.
0BD8                          ;*Macro unroll: mCOLON  4,'NUF?',NUFQ
0BD8                          ;*Macro unroll:  mCODE 4, "NUF?", NUFQ
0BD8                          ALIGN   2   
0BD8                NUFQ:        
0BD8                VVCODE:   .SET   $   
0BD8                VVLEN:    .SET   (4 & 01FH) / CELLL   
172A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
172A                VVNAME:   .SET   $   
172A   D8 0B 38 17            DW   vvCODE,vvLINK   
172E                VVLINK:   .SET   $   
172E   04 4E 55 46 3F         DB   4,"NUF?"   
0BD8                          .ORG   vvCODE   
0BD8   00                     NOP      
0BD9   CD 24 06               CALL   doLIST   
0BDC   AE 0B 38 10            DW   QKEY,DUPP   
0BE0   68 0E EE 0B            DW   QBRAN,NUFQ1   
0BE4   6C 10 BA 0B 32 06 0D 00 CE 01 DW   DDROP,KEY,DOLIT,CRR,EQUAL   
0BEE                NUFQ1:       
0BEE   72 06                  DW   EXIT   
0BF0                             ;   PACE        ( -- )
0BF0                             ;               Send a pace character for the file downloading process.
0BF0                          ;*Macro unroll: hCOLON  4,'PACE',PACE
0BF0                          ;*Macro unroll:  hCODE 4, "PACE", PACE
0BF0                          ALIGN   2   
0BF0                PACE:        
0BF0   00                     NOP      
0BF1   CD 24 06               CALL   doLIST   
0BF4   32 06 0B 00 CC 0B 72 06 DW   DOLIT,11,EMIT,EXIT   
0BFC                             ;   SPACE       ( -- )
0BFC                             ;               Send the blank character to the output device.
0BFC                          ;*Macro unroll: mCOLON  5,'SPACE',SPACE
0BFC                          ;*Macro unroll:  mCODE 5, "SPACE", SPACE
0BFC                          ALIGN   2   
0BFC                SPACE:       
0BFC                VVCODE:   .SET   $   
0BFC                VVLEN:    .SET   (5 & 01FH) / CELLL   
1720                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1720                VVNAME:   .SET   $   
1720   FC 0B 2E 17            DW   vvCODE,vvLINK   
1724                VVLINK:   .SET   $   
1724   05 53 50 41 43 45      DB   5,"SPACE"   
0BFC                          .ORG   vvCODE   
0BFC   00                     NOP      
0BFD   CD 24 06               CALL   doLIST   
0C00   64 07 CC 0B 72 06      DW   BLANK,EMIT,EXIT   
0C06                             ;   SPACES      ( +n -- )
0C06                             ;               Send n spaces to the output device.
0C06                          ;*Macro unroll: mCOLON  6,'SPACES',SPACS
0C06                          ;*Macro unroll:  mCODE 6, "SPACES", SPACS
0C06                          ALIGN   2   
0C06                SPACS:       
0C06                VVCODE:   .SET   $   
0C06                VVLEN:    .SET   (6 & 01FH) / CELLL   
1714                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1714                VVNAME:   .SET   $   
1714   06 0C 24 17            DW   vvCODE,vvLINK   
1718                VVLINK:   .SET   $   
1718   06 53 50 41 43 45 53   DB   6,"SPACES"   
0C06                          .ORG   vvCODE   
0C06   00                     NOP      
0C07   CD 24 06               CALL   doLIST   
0C0A   32 06 00 00 1A 02 1C 10 DW   DOLIT,0,MAX,TOR   
0C12   74 0E 18 0C            DW   BRAN,CHAR2   
0C16                CHAR1:       
0C16   FC 0B                  DW   SPACE   
0C18                CHAR2:       
0C18   7E 06 16 0C            DW   DONXT,CHAR1   
0C1C   72 06                  DW   EXIT   
0C1E                             ;   TYPE        ( b u -- )
0C1E                             ;               Output u characters from b.
0C1E                          ;*Macro unroll: mCOLON	4,'TYPE',TYPEE
0C1E                          ;*Macro unroll:  mCODE 4, "TYPE", TYPEE
0C1E                          ALIGN   2   
0C1E                TYPEE:       
0C1E                VVCODE:   .SET   $   
0C1E                VVLEN:    .SET   (4 & 01FH) / CELLL   
170A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
170A                VVNAME:   .SET   $   
170A   1E 0C 18 17            DW   vvCODE,vvLINK   
170E                VVLINK:   .SET   $   
170E   04 54 59 50 45         DB   4,"TYPE"   
0C1E                          .ORG   vvCODE   
0C1E   00                     NOP      
0C1F   CD 24 06               CALL   doLIST   
0C22   1C 10                  DW   TOR   
0C24   74 0E 34 0C            DW   BRAN,TYPE2   
0C28                TYPE1:       
0C28   38 10 9E 0E CC 0B      DW   DUPP,CAT,EMIT   
0C2E   32 06 01 00 7A 01      DW   DOLIT,1,PLUS   
0C34                TYPE2:       
0C34   7E 06 28 0C            DW   DONXT,TYPE1   
0C38   3C 10 72 06            DW   DROP,EXIT   
0C3C                             ;   TYPEZ    ( cstr -- )
0C3C                             ;   Similar to TYPE but prints C null terminated strings
0C3C                          ;*Macro unroll: mCOLON	4,'TYPEZ',TYPEZ
0C3C                          ;*Macro unroll:  mCODE 4, "TYPEZ", TYPEZ
0C3C                          ALIGN   2   
0C3C                TYPEZ:       
0C3C                VVCODE:   .SET   $   
0C3C                VVLEN:    .SET   (4 & 01FH) / CELLL   
1700                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1700                VVNAME:   .SET   $   
1700   3C 0C 0E 17            DW   vvCODE,vvLINK   
1704                VVLINK:   .SET   $   
1704   04 54 59 50 45 5A      DB   4,"TYPEZ"   
0C3C                          .ORG   vvCODE   
0C3C   00                     NOP      
0C3D   CD 24 06               CALL   doLIST   
0C40                TYPEZ1:      
0C40   38 10 9E 0E            DW   DUPP,CAT   
0C44   38 10 68 0E 56 0C      DW   DUPP,QBRAN,TYPEZ2   
0C4A   CC 0B                  DW   EMIT   
0C4C   32 06 01 00 7A 01      DW   DOLIT,1,PLUS   
0C52   74 0E 40 0C            DW   BRAN,TYPEZ1   
0C56                TYPEZ2:      
0C56   3C 10 72 06            DW   DROP,EXIT   
0C5A                             ;   CR          ( -- )
0C5A                             ;               Output a carriage return and a line feed.
0C5A                          ;*Macro unroll: mCOLON	2,'CR',CR
0C5A                          ;*Macro unroll:  mCODE 2, "CR", CR
0C5A                          ALIGN   2   
0C5A                CR:          
0C5A                VVCODE:   .SET   $   
0C5A                VVLEN:    .SET   (2 & 01FH) / CELLL   
16F8                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
16F8                VVNAME:   .SET   $   
16F8   5A 0C 04 17            DW   vvCODE,vvLINK   
16FC                VVLINK:   .SET   $   
16FC   02 43 52               DB   2,"CR"   
0C5A                          .ORG   vvCODE   
0C5A   00                     NOP      
0C5B   CD 24 06               CALL   doLIST   
0C5E   32 06 0D 00 CC 0B 32 06 0A 00 CC 0B 72 06 DW   DOLIT,CRR,EMIT,DOLIT,LFF,EMIT,EXIT   
0C6C                             ;   $"|         ( -- a )
0C6C                             ;               Run time routine compiled by $". Return address of a compiled string.
0C6C                          ;*Macro unroll: hCOLON  COMPO+3,'$||',STRQP
0C6C                          ;*Macro unroll:  hCODE COMPO+3, "$||", STRQP
0C6C                          ALIGN   2   
0C6C                STRQP:       
0C6C   00                     NOP      
0C6D   CD 24 06               CALL   doLIST   
0C70   5A 06 72 06            DW   DOSTR,EXIT   ;force a call to do$
0C74                             ;   ."|         ( -- )
0C74                             ;               Run time routine of ." . Output a compiled string.
0C74                          ;*Macro unroll: hCOLON  COMPO+3,'.||',DOTQP
0C74                          ;*Macro unroll:  hCODE COMPO+3, ".||", DOTQP
0C74                          ALIGN   2   
0C74                DOTQP:       
0C74   00                     NOP      
0C75   CD 24 06               CALL   doLIST   
0C78   5A 06 04 0F 1E 0C 72 06 DW   DOSTR,COUNT,TYPEE,EXIT   
0C80                             ;   .R          ( n +n -- )
0C80                             ;               Display an integer in a field of n columns, right justified.
0C80                          ;*Macro unroll: mCOLON  2,'.R',DOTR
0C80                          ;*Macro unroll:  mCODE 2, ".R", DOTR
0C80                          ALIGN   2   
0C80                DOTR:        
0C80                VVCODE:   .SET   $   
0C80                VVLEN:    .SET   (2 & 01FH) / CELLL   
16F0                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
16F0                VVNAME:   .SET   $   
16F0   80 0C FC 16            DW   vvCODE,vvLINK   
16F4                VVLINK:   .SET   $   
16F4   02 2E 52               DB   2,".R"   
0C80                          .ORG   vvCODE   
0C80   00                     NOP      
0C81   CD 24 06               CALL   doLIST   
0C84   1C 10 32 07 2A 10 48 10 B4 01 DW   TOR,STR,RFROM,OVER,SUBB   
0C8E   06 0C 1E 0C 72 06      DW   SPACS,TYPEE,EXIT   
0C94                             ;   U.R         ( u +n -- )
0C94                             ;               Display an unsigned integer in n column, right justified.
0C94                          ;*Macro unroll: mCOLON  3,'U.R',UDOTR
0C94                          ;*Macro unroll:  mCODE 3, "U.R", UDOTR
0C94                          ALIGN   2   
0C94                UDOTR:       
0C94                VVCODE:   .SET   $   
0C94                VVLEN:    .SET   (3 & 01FH) / CELLL   
16E8                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
16E8                VVNAME:   .SET   $   
16E8   94 0C F4 16            DW   vvCODE,vvLINK   
16EC                VVLINK:   .SET   $   
16EC   03 55 2E 52            DB   3,"U.R"   
0C94                          .ORG   vvCODE   
0C94   00                     NOP      
0C95   CD 24 06               CALL   doLIST   
0C98   1C 10 CA 06 FC 06 20 07 DW   TOR,BDIGS,DIGS,EDIGS   
0CA0   2A 10 48 10 B4 01      DW   RFROM,OVER,SUBB   
0CA6   06 0C 1E 0C 72 06      DW   SPACS,TYPEE,EXIT   
0CAC                             ;   U.          ( u -- )
0CAC                             ;               Display an unsigned integer in free format.
0CAC                          ;*Macro unroll: mCOLON  2,'U.',UDOT
0CAC                          ;*Macro unroll:  mCODE 2, "U.", UDOT
0CAC                          ALIGN   2   
0CAC                UDOT:        
0CAC                VVCODE:   .SET   $   
0CAC                VVLEN:    .SET   (2 & 01FH) / CELLL   
16E0                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
16E0                VVNAME:   .SET   $   
16E0   AC 0C EC 16            DW   vvCODE,vvLINK   
16E4                VVLINK:   .SET   $   
16E4   02 55 2E               DB   2,"U."   
0CAC                          .ORG   vvCODE   
0CAC   00                     NOP      
0CAD   CD 24 06               CALL   doLIST   
0CB0   CA 06 FC 06 20 07      DW   BDIGS,DIGS,EDIGS   
0CB6   FC 0B 1E 0C 72 06      DW   SPACE,TYPEE,EXIT   
0CBC                             ;   .           ( w -- )
0CBC                             ;               Display an integer in free format, preceeded by a space.
0CBC                          ;*Macro unroll: mCOLON  1,'.',DOT
0CBC                          ;*Macro unroll:  mCODE 1, ".", DOT
0CBC                          ALIGN   2   
0CBC                DOT:         
0CBC                VVCODE:   .SET   $   
0CBC                VVLEN:    .SET   (1 & 01FH) / CELLL   
16DA                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
16DA                VVNAME:   .SET   $   
16DA   BC 0C E4 16            DW   vvCODE,vvLINK   
16DE                VVLINK:   .SET   $   
16DE   01 2E                  DB   1,"."   
0CBC                          .ORG   vvCODE   
0CBC   00                     NOP      
0CBD   CD 24 06               CALL   doLIST   
0CC0   F8 10 8E 0E 32 06 0A 00 70 01 DW   BASE,AT,DOLIT,10,XORR   ;?decimal
0CCA   68 0E D2 0C            DW   QBRAN,DOT1   
0CCE   AC 0C 72 06            DW   UDOT,EXIT   ;no, display unsigned
0CD2                DOT1:        
0CD2   32 07 FC 0B 1E 0C 72 06 DW   STR,SPACE,TYPEE,EXIT   ;yes, display signed
0CDA                             ;   .(          ( -- )
0CDA                             ;               Output following string up to next ) .
0CDA                          ;*Macro unroll: mCOLON  IMEDD+2,'.(',DOTPR
0CDA                          ;*Macro unroll:  mCODE IMEDD+2, ".(", DOTPR
0CDA                          ALIGN   2   
0CDA                DOTPR:       
0CDA                VVCODE:   .SET   $   
0CDA                VVLEN:    .SET   (IMEDD+2 & 01FH) / CELLL   
1692                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1692                VVNAME:   .SET   $   
1692   DA 0C DE 16            DW   vvCODE,vvLINK   
1696                VVLINK:   .SET   $   
1696   42 2E 28               DB   IMEDD+2,".("   
0CDA                          .ORG   vvCODE   
0CDA   00                     NOP      
0CDB   CD 24 06               CALL   doLIST   
0CDE   32 06 08 09 1E 0C 72 06 DW   DOLIT,")",PARSE,TYPEE,EXIT   
0CE6                             ;   ?           ( a -- )
0CE6                             ;               Display the contents in a memory cell.
0CE6                          ;*Macro unroll: mCOLON  1,'?',QUEST
0CE6                          ;*Macro unroll:  mCODE 1, "?", QUEST
0CE6                          ALIGN   2   
0CE6                QUEST:       
0CE6                VVCODE:   .SET   $   
0CE6                VVLEN:    .SET   (1 & 01FH) / CELLL   
168C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
168C                VVNAME:   .SET   $   
168C   E6 0C 96 16            DW   vvCODE,vvLINK   
1690                VVLINK:   .SET   $   
1690   01 3F                  DB   1,"?"   
0CE6                          .ORG   vvCODE   
0CE6   00                     NOP      
0CE7   CD 24 06               CALL   doLIST   
0CEA   8E 0E BC 0C 72 06      DW   AT,DOT,EXIT   
0CF0                             ;   ^H          ( bot eot cur -- bot eot cur )
0CF0                             ;               Backup the cursor by one character.
0CF0                          ;*Macro unroll: mCOLON  2,'^H',BKSP
0CF0                          ;*Macro unroll:  mCODE 2, "^H", BKSP
0CF0                          ALIGN   2   
0CF0                BKSP:        
0CF0                VVCODE:   .SET   $   
0CF0                VVLEN:    .SET   (2 & 01FH) / CELLL   
1684                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1684                VVNAME:   .SET   $   
1684   F0 0C 90 16            DW   vvCODE,vvLINK   
1688                VVLINK:   .SET   $   
1688   02 5E 48               DB   2,"^H"   
0CF0                          .ORG   vvCODE   
0CF0   00                     NOP      
0CF1   CD 24 06               CALL   doLIST   
0CF4   1C 10 48 10 2A 10 40 10 48 10 70 01 DW   TOR,OVER,RFROM,SWAP,OVER,XORR   
0D00   68 0E 20 0D            DW   QBRAN,BACK1   
0D04   32 06 08 00 E8 10 3A 0F 32 06 01 00 B4 01 DW   DOLIT,BKSPP,TECHO,ATEXE,DOLIT,1,SUBB   
0D12   64 07 E8 10 3A 0F      DW   BLANK,TECHO,ATEXE   
0D18   32 06 08 00 E8 10 3A 0F DW   DOLIT,BKSPP,TECHO,ATEXE   
0D20                BACK1:       
0D20   72 06                  DW   EXIT   
0D22                             ;   TAP         ( bot eot cur c -- bot eot cur )
0D22                             ;               Accept and echo the key stroke and bump the cursor.
0D22                          ;*Macro unroll: mCOLON  3,'TAP',TAP
0D22                          ;*Macro unroll:  mCODE 3, "TAP", TAP
0D22                          ALIGN   2   
0D22                TAP:         
0D22                VVCODE:   .SET   $   
0D22                VVLEN:    .SET   (3 & 01FH) / CELLL   
167C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
167C                VVNAME:   .SET   $   
167C   22 0D 88 16            DW   vvCODE,vvLINK   
1680                VVLINK:   .SET   $   
1680   03 54 41 50            DB   3,"TAP"   
0D22                          .ORG   vvCODE   
0D22   00                     NOP      
0D23   CD 24 06               CALL   doLIST   
0D26   38 10 E8 10 3A 0F      DW   DUPP,TECHO,ATEXE   
0D2C   48 10 96 0E 32 06 01 00 7A 01 72 06 DW   OVER,CSTOR,DOLIT,1,PLUS,EXIT   
0D38                             ;   kTAP        ( bot eot cur c -- bot eot cur )
0D38                             ;               Process a key stroke, CR or backspace.
0D38                          ;*Macro unroll: mCOLON  4,'kTAP',KTAP
0D38                          ;*Macro unroll:  mCODE 4, "kTAP", KTAP
0D38                          ALIGN   2   
0D38                KTAP:        
0D38                VVCODE:   .SET   $   
0D38                VVLEN:    .SET   (4 & 01FH) / CELLL   
1672                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1672                VVNAME:   .SET   $   
1672   38 0D 80 16            DW   vvCODE,vvLINK   
1676                VVLINK:   .SET   $   
1676   04 6B 54 41 50         DB   4,"kTAP"   
0D38                          .ORG   vvCODE   
0D38   00                     NOP      
0D39   CD 24 06               CALL   doLIST   
0D3C   38 10 32 06 0D 00 70 01 DW   DUPP,DOLIT,CRR,XORR   
0D44   68 0E 5C 0D            DW   QBRAN,KTAP2   
0D48   32 06 08 00 70 01      DW   DOLIT,BKSPP,XORR   
0D4E   68 0E 58 0D            DW   QBRAN,KTAP1   
0D52   64 07 22 0D 72 06      DW   BLANK,TAP,EXIT   
0D58                KTAP1:       
0D58   F0 0C 72 06            DW   BKSP,EXIT   
0D5C                KTAP2:       
0D5C   3C 10 40 10 3C 10 38 10 72 06 DW   DROP,SWAP,DROP,DUPP,EXIT   
0D66                             ;   accept      ( b u -- b u )
0D66                             ;               Accept characters to input buffer. Return with actual count.
0D66                          ;*Macro unroll: mCOLON  6,'accept',ACCEP
0D66                          ;*Macro unroll:  mCODE 6, "accept", ACCEP
0D66                          ALIGN   2   
0D66                ACCEP:       
0D66                VVCODE:   .SET   $   
0D66                VVLEN:    .SET   (6 & 01FH) / CELLL   
1666                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1666                VVNAME:   .SET   $   
1666   66 0D 76 16            DW   vvCODE,vvLINK   
166A                VVLINK:   .SET   $   
166A   06 61 63 63 65 70 74   DB   6,"accept"   
0D66                          .ORG   vvCODE   
0D66   00                     NOP      
0D67   CD 24 06               CALL   doLIST   
0D6A   48 10 7A 01 48 10      DW   OVER,PLUS,OVER   
0D70                ACCP1:       
0D70   76 10 70 01            DW   DDUP,XORR   
0D74   68 0E 96 0D            DW   QBRAN,ACCP4   
0D78   BA 0B 38 10            DW   KEY,DUPP   
0D7C   64 07 32 06 7F 00 40 02 DW   BLANK,DOLIT,127,WITHI   
0D84   68 0E 8E 0D            DW   QBRAN,ACCP2   
0D88   22 0D                  DW   TAP   
0D8A   74 0E 92 0D            DW   BRAN,ACCP3   
0D8E                ACCP2:       
0D8E   E0 10 3A 0F            DW   TTAP,ATEXE   
0D92                ACCP3:       
0D92   74 0E 70 0D            DW   BRAN,ACCP1   
0D96                ACCP4:       
0D96   3C 10 48 10 B4 01 72 06 DW   DROP,OVER,SUBB,EXIT   
0D9E                             ;   EXPECT      ( b u -- )
0D9E                             ;               Accept input stream and STORE count in SPAN.
0D9E                          ;*Macro unroll: hCOLON  6,'EXPECT',EXPEC
0D9E                          ;*Macro unroll:  hCODE 6, "EXPECT", EXPEC
0D9E                          ALIGN   2   
0D9E                EXPEC:       
0D9E   00                     NOP      
0D9F   CD 24 06               CALL   doLIST   
0DA2   D8 10 3A 0F 08 11 84 0E 3C 10 72 06 DW   TEXPE,ATEXE,SPAN,STORE,DROP,EXIT   
0DAE                             ;   QUERY       ( -- )
0DAE                             ;               Accept input stream to terminal input buffer.
0DAE                          ;*Macro unroll: hCOLON  5,'QUERY',QUERY
0DAE                          ;*Macro unroll:  hCODE 5, "QUERY", QUERY
0DAE                          ALIGN   2   
0DAE                QUERY:       
0DAE   00                     NOP      
0DAF   CD 24 06               CALL   doLIST   
0DB2   2E 0F 32 06 50 00 D8 10 3A 0F 18 11 84 0E DW   TIB,DOLIT,80,TEXPE,ATEXE,NTIB,STORE   
0DC0   3C 10 32 06 00 00 10 11 84 0E 72 06 DW   DROP,DOLIT,0,INN,STORE,EXIT   
0DCC                             ; HL contains the xt of the word
0DCC                CALL_FORTH:      
0DCC   11 D1 0D               LD   DE,TRETURN_HERE   
0DCF   E9                     JP   (HL)   
0DD0                RETURN_HERE:      
0DD0   C9                     RET      
0DD1                TRETURN_HERE:      
0DD1   D0 0D                  DW   RETURN_HERE   
0DD3                NEXT_STEP:      
0DD3   5E                     LD   E,(HL)   ; 7t
0DD4   23                     INC   HL   ; 6t
0DD5   56                     LD   D,(HL)   ; 7t
0DD6   23                     INC   HL   ; 6t
0DD7   EB                     EX   DE,HL   ; 4t
0DD8   E9                     JP   (HL)   ; 4t
0DD9                          ;*Macro unroll: hCOLON	2,'HI2x',HI2x
0DD9                          ;*Macro unroll:  hCODE 2, "HI2x", HI2x
0DD9                          ALIGN   2   
0DDA                HI2X:        
0DDA   00                     NOP      
0DDB   CD 24 06               CALL   doLIST   
0DDE   88 0B                  DW   STOIO   
0DE0   32 06 F2 0D            DW   DOLIT,HELLO   
0DE4   3C 0C                  DW   TYPEZ   
0DE6   BA 0B                  DW   KEY   
0DE8   CC 0B                  DW   EMIT   
0DEA   32 06 F2 0D            DW   DOLIT,HELLO   
0DEE   3C 0C                  DW   TYPEZ   
0DF0   62 0E                  DW   QUIT   
0DF2   48 65 6C 6C 6F 20 46 6F 72 74 68 21 20 0D 0A 00 HELLO:   .CSTR   "Hello Forth! \r\n"   
0E02                             ;   hi          ( -- )
0E02                             ;               Display the sign-on message of eForth.
0E02                          ;*Macro unroll: hCOLON  2,'hi',HI
0E02                          ;*Macro unroll:  hCODE 2, "hi", HI
0E02                          ALIGN   2   
0E02                HI:          
0E02   00                     NOP      
0E03   CD 24 06               CALL   doLIST   
0E06   88 0B 5A 0C            DW   STOIO,CR   ;initialize I/O
0E0A                          ;*Macro unroll:  mDSTR   DOTQP,'eForth v'        ;model
0E0A   74 0C                  DW   DOTQP   ;model
0E0C                VVLEN:    .SET   $   
0E0C   00 65 46 6F 72 74 68 20 76 DB   0,"eForth v"   
0E15                VVCODE:   .SET   $   
0E0C                          .ORG   vvLEN   
0E0C   08                     DB   vvCODE - vvLEN - 1   
0E15                          .ORG   vvCODE   
0E15                             ; DW      BASE,AT,HEX             ;save radix
0E15                             ; DW      VERSN,BDIGS,DIG,DIG
0E15                             ; DW      DOLIT,".",HOLD
0E15                             ; DW      DIGS,EDIGS,TYPEE        ;format version number
0E15                             ; DW      BASE,STORE              ;restore radix
0E15   5A 0C                  DW   CR   
0E17                HI1:         
0E17   BA 0B                  DW   KEY   
0E19   38 10 CC 0B            DW   DUPP,EMIT   
0E1D   32 06 0D 00 CE 01      DW   DOLIT,$0D,EQUAL   
0E23                             ; DW  DROP, DOLIT, 0
0E23   68 0E 17 0E            DW   QBRAN,HI1   
0E27   32 06 F2 0D            DW   DOLIT,HELLO   
0E2B   3C 0C                  DW   TYPEZ   
0E2D   5A 0C 72 06            DW   CR,EXIT   
0E31                          ;*Macro unroll: mCOLON	4,'COLD',COLD
0E31                          ;*Macro unroll:  mCODE 4, "COLD", COLD
0E31                          ALIGN   2   
0E32                COLD:        
0E32                VVCODE:   .SET   $   
0E32                VVLEN:    .SET   (4 & 01FH) / CELLL   
165C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
165C                VVNAME:   .SET   $   
165C   32 0E 6A 16            DW   vvCODE,vvLINK   
1660                VVLINK:   .SET   $   
1660   04 43 4F 4C 44         DB   4,"COLD"   
0E32                          .ORG   vvCODE   
0E32   00                     NOP      
0E33   CD 24 06               CALL   doLIST   
0E36                COLD1:       
0E36   32 06 1A 01 32 06 45 24 DW   DOLIT,UZERO,DOLIT,UPP   
0E3E   32 06 3A 00 4A 0F      DW   DOLIT,ULAST-UZERO,CMOVE   ;initialize user area
0E44   4C 0E                  DW   PRESE   ;initialize stack and TIB
0E46                             ; DW      TBOOT,ATEXE             ;application boot
0E46                             ; DW      FORTH,CNTXT,AT,DUPP     ;initialize search order
0E46                             ; DW      CRRNT,DSTOR,OVERT
0E46   62 0E                  DW   QUIT   ;start interpretation
0E48   74 0E 36 0E            DW   BRAN,COLD1   ;just in case
0E4C                             ;   PRESET      ( -- )
0E4C                             ;               Reset data stack pointer and the terminal input buffer.
0E4C                          ;*Macro unroll: mCOLON  6,'PRESET',PRESE
0E4C                          ;*Macro unroll:  mCODE 6, "PRESET", PRESE
0E4C                          ALIGN   2   
0E4C                PRESE:       
0E4C                VVCODE:   .SET   $   
0E4C                VVLEN:    .SET   (6 & 01FH) / CELLL   
1650                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1650                VVNAME:   .SET   $   
1650   4C 0E 60 16            DW   vvCODE,vvLINK   
1654                VVLINK:   .SET   $   
1654   06 50 52 45 53 45 54   DB   6,"PRESET"   
0E4C                          .ORG   vvCODE   
0E4C   00                     NOP      
0E4D   CD 24 06               CALL   doLIST   
0E50   B8 10 8E 0E CA 0E      DW   SZERO,AT,SPSTO   
0E56   32 06 00 22 18 11 76 03 84 0E 72 06 DW   DOLIT,TIBB,NTIB,CELLP,STORE,EXIT   
0E62                          ;*Macro unroll: mCODE  4, 'QUIT', QUIT
0E62                          ALIGN   2   
0E62                QUIT:        
0E62                VVCODE:   .SET   $   
0E62                VVLEN:    .SET   (4 & 01FH) / CELLL   
1646                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1646                VVNAME:   .SET   $   
1646   62 0E 54 16            DW   vvCODE,vvLINK   
164A                VVLINK:   .SET   $   
164A   04 51 55 49 54         DB   4,"QUIT"   
0E62                          .ORG   vvCODE   
0E62   76                     HALT      
0E63                             ;   EXECUTE	( i*x xt -- j*x )		\ CORE
0E63                             ;		Perform the semantics indentified by execution token, xt.
0E63                          ;*Macro unroll: mCODE	7,'EXECUTE', EXECU
0E63                          ALIGN   2   
0E64                EXECU:       
0E64                VVCODE:   .SET   $   
0E64                VVLEN:    .SET   (7 & 01FH) / CELLL   
163A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
163A                VVNAME:   .SET   $   
163A   64 0E 4A 16            DW   vvCODE,vvLINK   
163E                VVLINK:   .SET   $   
163E   07 45 58 45 43 55 54 45 DB   7,"EXECUTE"   
0E64                          .ORG   vvCODE   
0E64   60                     LD   H,B   
0E65   69                     LD   L,C   
0E66   C1                     POP   BC   
0E67   E9                     JP   (HL)   
0E68                             ; 
0E68                             ;   0BRAN	( flag -- )
0E68                             ;		BRAN if flag is zero.
0E68                          ;*Macro unroll: hCODE	COMPO+7,'?branch', QBRAN
0E68                          ALIGN   2   
0E68                QBRAN:       
0E68   78                     LD   A,B   ; 4t
0E69   B1                     OR   C   ; 4t
0E6A   C1                     POP   BC   ;10t
0E6B   CA 74 0E               JP   Z,BRAN   ;10/7t a fast dec is ok, only
0E6E   13                     INC   DE   ; 6t yes,continue past the BRAN offset
0E6F   13                     INC   DE   ; 6t
0E70                          ;*Macro unroll: 	mNEXT
0E70   EB                     EX   DE,HL   
0E71                          ;*Macro unroll:  mNEXTHL                         ; 34t
0E71   FD E9                  JP   (IY)   ; 34t
0E73                             ;   BRAN	( -- )
0E73                             ;		BRAN to an inline address.
0E73                          ;*Macro unroll: hCODE	COMPO+6,'branch', BRAN
0E73                          ALIGN   2   
0E74                BRAN:        
0E74   1A                     LD   A,(DE)   ; 7t go back to the loop
0E75   6F                     LD   L,A   ; 4t
0E76   13                     INC   DE   ; 6t
0E77   1A                     LD   A,(DE)   ; 7t
0E78   67                     LD   H,A   ; 4t
0E79                          ;*Macro unroll: 	mNEXTHL
0E79   FD E9                  JP   (IY)   
0E7B                             ; 
0E7B                             ;   THROW    ( cstr -- )
0E7B                             ;   Prints string message and returns TODO: restart Forth interpreter QUIT
0E7B                          ;*Macro unroll: mCOLON	5,'THROWX',THROWX
0E7B                          ;*Macro unroll:  mCODE 5, "THROWX", THROWX
0E7B                          ALIGN   2   
0E7C                THROWX:      
0E7C                VVCODE:   .SET   $   
0E7C                VVLEN:    .SET   (5 & 01FH) / CELLL   
1630                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1630                VVNAME:   .SET   $   
1630   7C 0E 3E 16            DW   vvCODE,vvLINK   
1634                VVLINK:   .SET   $   
1634   05 54 48 52 4F 57 58   DB   5,"THROWX"   
0E7C                          .ORG   vvCODE   
0E7C   00                     NOP      
0E7D   CD 24 06               CALL   doLIST   
0E80   3C 0C 72 06            DW   TYPEZ,EXIT   
0E84                             ;   !           ( w a -- )
0E84                             ;               Pop the data stack to memory.
0E84                          ;*Macro unroll: mCODE	1,'!',STORE
0E84                          ALIGN   2   
0E84                STORE:       
0E84                VVCODE:   .SET   $   
0E84                VVLEN:    .SET   (1 & 01FH) / CELLL   
162A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
162A                VVNAME:   .SET   $   
162A   84 0E 34 16            DW   vvCODE,vvLINK   
162E                VVLINK:   .SET   $   
162E   01 21                  DB   1,"!"   
0E84                          .ORG   vvCODE   
0E84   60                     LD   H,B   
0E85   69                     LD   L,C   
0E86   C1                     POP   BC   
0E87   71                     LD   (HL),C   
0E88   23                     INC   HL   
0E89   70                     LD   (HL),B   
0E8A   C1                     POP   BC   
0E8B                          ;*Macro unroll: 	mNEXT
0E8B   EB                     EX   DE,HL   
0E8C                          ;*Macro unroll:  mNEXTHL                         ; 34t
0E8C   FD E9                  JP   (IY)   ; 34t
0E8E                             ;   @           ( a -- w )
0E8E                             ;               Push memory location to the data stack.
0E8E                          ;*Macro unroll: mCODE	1,'@', AT
0E8E                          ALIGN   2   
0E8E                AT:          
0E8E                VVCODE:   .SET   $   
0E8E                VVLEN:    .SET   (1 & 01FH) / CELLL   
1624                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1624                VVNAME:   .SET   $   
1624   8E 0E 2E 16            DW   vvCODE,vvLINK   
1628                VVLINK:   .SET   $   
1628   01 40                  DB   1,"@"   
0E8E                          .ORG   vvCODE   
0E8E   60                     LD   H,B   
0E8F   69                     LD   L,C   
0E90   4E                     LD   C,(HL)   
0E91   23                     INC   HL   
0E92   46                     LD   B,(HL)   
0E93                          ;*Macro unroll: 	mNEXT
0E93   EB                     EX   DE,HL   
0E94                          ;*Macro unroll:  mNEXTHL                         ; 34t
0E94   FD E9                  JP   (IY)   ; 34t
0E96                             ;   C!          ( c b -- )
0E96                             ;               Pop the data stack to byte memory.
0E96                          ;*Macro unroll: mCODE	2,'C!',CSTOR
0E96                          ALIGN   2   
0E96                CSTOR:       
0E96                VVCODE:   .SET   $   
0E96                VVLEN:    .SET   (2 & 01FH) / CELLL   
161C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
161C                VVNAME:   .SET   $   
161C   96 0E 28 16            DW   vvCODE,vvLINK   
1620                VVLINK:   .SET   $   
1620   02 43 21               DB   2,"C!"   
0E96                          .ORG   vvCODE   
0E96   60                     LD   H,B   
0E97   69                     LD   L,C   
0E98   C1                     POP   BC   
0E99   71                     LD   (HL),C   
0E9A   C1                     POP   BC   
0E9B                          ;*Macro unroll: 	mNEXT
0E9B   EB                     EX   DE,HL   
0E9C                          ;*Macro unroll:  mNEXTHL                         ; 34t
0E9C   FD E9                  JP   (IY)   ; 34t
0E9E                             ;   C@          ( b -- c )
0E9E                             ;               Push byte memory location to the data stack.
0E9E                          ;*Macro unroll: mCODE	2,'C@',CAT
0E9E                          ALIGN   2   
0E9E                CAT:         
0E9E                VVCODE:   .SET   $   
0E9E                VVLEN:    .SET   (2 & 01FH) / CELLL   
1614                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1614                VVNAME:   .SET   $   
1614   9E 0E 20 16            DW   vvCODE,vvLINK   
1618                VVLINK:   .SET   $   
1618   02 43 40               DB   2,"C@"   
0E9E                          .ORG   vvCODE   
0E9E   0A                     LD   A,(BC)   
0E9F   4F                     LD   C,A   
0EA0   06 00                  LD   B,0   
0EA2                          ;*Macro unroll: 	mNEXT
0EA2   EB                     EX   DE,HL   
0EA3                          ;*Macro unroll:  mNEXTHL                         ; 34t
0EA3   FD E9                  JP   (IY)   ; 34t
0EA5                             ;   R@          ( -- w )
0EA5                             ;               Copy top of return stack to the data stack.
0EA5                          ;*Macro unroll: mCODE	COMPO+2,'R@',RAT
0EA5                          ALIGN   2   
0EA6                RAT:         
0EA6                VVCODE:   .SET   $   
0EA6                VVLEN:    .SET   (COMPO+2 & 01FH) / CELLL   
15EC                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
15EC                VVNAME:   .SET   $   
15EC   A6 0E 18 16            DW   vvCODE,vvLINK   
15F0                VVLINK:   .SET   $   
15F0   22 52 40               DB   COMPO+2,"R@"   
0EA6                          .ORG   vvCODE   
0EA6   C5                     PUSH   BC   
0EA7   DD 4E 00               LD   C,(IX+0)   
0EAA   DD 46 01               LD   B,(IX+1)   
0EAD                          ;*Macro unroll: 	mNEXT
0EAD   EB                     EX   DE,HL   
0EAE                          ;*Macro unroll:  mNEXTHL                         ; 34t
0EAE   FD E9                  JP   (IY)   ; 34t
0EB0                             ;   RP@         ( -- a )
0EB0                             ;               Push the current RP to the data stack
0EB0                          ;*Macro unroll: mCODE	COMPO+3, 'rp@', RPAT
0EB0                          ALIGN   2   
0EB0                RPAT:        
0EB0                VVCODE:   .SET   $   
0EB0                VVLEN:    .SET   (COMPO+3 & 01FH) / CELLL   
15C4                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
15C4                VVNAME:   .SET   $   
15C4   B0 0E F0 15            DW   vvCODE,vvLINK   
15C8                VVLINK:   .SET   $   
15C8   23 72 70 40            DB   COMPO+3,"rp@"   
0EB0                          .ORG   vvCODE   
0EB0   C5                     DB   0C5h   ; PUSH	BC	;11t
0EB1   DD E5                  DB   0DDh,0E5h   ; PUSH IX	;15t
0EB3   C1                     DB   0C1h   ; POP	BC	;10t
0EB4                          ;*Macro unroll:  mNEXT
0EB4   EB                     EX   DE,HL   
0EB5                          ;*Macro unroll:  mNEXTHL                         ; 34t
0EB5   FD E9                  JP   (IY)   ; 34t
0EB7                             ;   RP!         ( a -- )
0EB7                             ;               Set the return stack pointer.
0EB7                          ;*Macro unroll: mCODE	COMPO+3,'rp!',RPSTO
0EB7                          ALIGN   2   
0EB8                RPSTO:       
0EB8                VVCODE:   .SET   $   
0EB8                VVLEN:    .SET   (COMPO+3 & 01FH) / CELLL   
159C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
159C                VVNAME:   .SET   $   
159C   B8 0E C8 15            DW   vvCODE,vvLINK   
15A0                VVLINK:   .SET   $   
15A0   23 72 70 21            DB   COMPO+3,"rp!"   
0EB8                          .ORG   vvCODE   
0EB8   C5                     DB   0C5h   ; PUSH	BC	;11t
0EB9   DD E1                  DB   0DDh,0E1h   ; POP IX	;14t
0EBB   C1                     DB   0C1h   ; POP	BC	;10t
0EBC                          ;*Macro unroll: 	mNEXT
0EBC   EB                     EX   DE,HL   
0EBD                          ;*Macro unroll:  mNEXTHL                         ; 34t
0EBD   FD E9                  JP   (IY)   ; 34t
0EBF                             ;   SP@         ( -- a )
0EBF                             ;               Push the current data stack pointer.
0EBF                          ;*Macro unroll: mCODE	3, 'sp@', SPAT
0EBF                          ALIGN   2   
0EC0                SPAT:        
0EC0                VVCODE:   .SET   $   
0EC0                VVLEN:    .SET   (3 & 01FH) / CELLL   
1594                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1594                VVNAME:   .SET   $   
1594   C0 0E A0 15            DW   vvCODE,vvLINK   
1598                VVLINK:   .SET   $   
1598   03 73 70 40            DB   3,"sp@"   
0EC0                          .ORG   vvCODE   
0EC0   C5                     DB   0C5h   ; PUSH	BC	;11t
0EC1   21                     DB   021h   ; LD	HL,0	;10t
0EC2   00 00                  DW   0   
0EC4   39                     DB   039h   ; ADD	HL,SP	;11t
0EC5   44                     DB   044h   ; LD	B,H	; 4t
0EC6   4D                     DB   04Dh   ; LD	C,L	; 4t
0EC7                          ;*Macro unroll: 	mNEXT
0EC7   EB                     EX   DE,HL   
0EC8                          ;*Macro unroll:  mNEXTHL                         ; 34t
0EC8   FD E9                  JP   (IY)   ; 34t
0ECA                             ;   SP!         ( a -- )
0ECA                             ;               Set the data stack pointer.
0ECA                          ;*Macro unroll: mCODE	3,'sp!',SPSTO
0ECA                          ALIGN   2   
0ECA                SPSTO:       
0ECA                VVCODE:   .SET   $   
0ECA                VVLEN:    .SET   (3 & 01FH) / CELLL   
158C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
158C                VVNAME:   .SET   $   
158C   CA 0E 98 15            DW   vvCODE,vvLINK   
1590                VVLINK:   .SET   $   
1590   03 73 70 21            DB   3,"sp!"   
0ECA                          .ORG   vvCODE   
0ECA   60                     DB   060h   ; LD	H,B	; 4t
0ECB   69                     DB   069h   ; LD	L,C	; 4t
0ECC   F9                     DB   0F9h   ; LD	SP,HL	; 6t
0ECD   C1                     DB   0C1h   ; POP	BC	;10t
0ECE                          ;*Macro unroll: 	mNEXT
0ECE   EB                     EX   DE,HL   
0ECF                          ;*Macro unroll:  mNEXTHL                         ; 34t
0ECF   FD E9                  JP   (IY)   ; 34t
0ED1                             ;   +!          ( n a -- )
0ED1                             ;               Add n to the contents at address a.
0ED1                          ;*Macro unroll: mCOLON  2,'+!',PSTOR
0ED1                          ;*Macro unroll:  mCODE 2, "+!", PSTOR
0ED1                          ALIGN   2   
0ED2                PSTOR:       
0ED2                VVCODE:   .SET   $   
0ED2                VVLEN:    .SET   (2 & 01FH) / CELLL   
1584                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1584                VVNAME:   .SET   $   
1584   D2 0E 90 15            DW   vvCODE,vvLINK   
1588                VVLINK:   .SET   $   
1588   02 2B 21               DB   2,"+!"   
0ED2                          .ORG   vvCODE   
0ED2   00                     NOP      
0ED3   CD 24 06               CALL   doLIST   
0ED6   40 10 48 10 8E 0E 7A 01 DW   SWAP,OVER,AT,PLUS   
0EDE   40 10 84 0E 72 06      DW   SWAP,STORE,EXIT   
0EE4                             ;   2!          ( d a -- )
0EE4                             ;               STORE the double integer to address a.
0EE4                          ;*Macro unroll: mCOLON  2,'2!',DSTOR
0EE4                          ;*Macro unroll:  mCODE 2, "2!", DSTOR
0EE4                          ALIGN   2   
0EE4                DSTOR:       
0EE4                VVCODE:   .SET   $   
0EE4                VVLEN:    .SET   (2 & 01FH) / CELLL   
157C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
157C                VVNAME:   .SET   $   
157C   E4 0E 88 15            DW   vvCODE,vvLINK   
1580                VVLINK:   .SET   $   
1580   02 32 21               DB   2,"2!"   
0EE4                          .ORG   vvCODE   
0EE4   00                     NOP      
0EE5   CD 24 06               CALL   doLIST   
0EE8   40 10 48 10 84 0E      DW   SWAP,OVER,STORE   
0EEE   76 03 84 0E 72 06      DW   CELLP,STORE,EXIT   
0EF4                             ;   2@          ( a -- d )
0EF4                             ;               Fetch double integer from address a.
0EF4                          ;*Macro unroll: mCOLON  2,'2@',DAT
0EF4                          ;*Macro unroll:  mCODE 2, "2@", DAT
0EF4                          ALIGN   2   
0EF4                DAT:         
0EF4                VVCODE:   .SET   $   
0EF4                VVLEN:    .SET   (2 & 01FH) / CELLL   
1574                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1574                VVNAME:   .SET   $   
1574   F4 0E 80 15            DW   vvCODE,vvLINK   
1578                VVLINK:   .SET   $   
1578   02 32 40               DB   2,"2@"   
0EF4                          .ORG   vvCODE   
0EF4   00                     NOP      
0EF5   CD 24 06               CALL   doLIST   
0EF8   38 10 76 03 8E 0E      DW   DUPP,CELLP,AT   
0EFE   40 10 8E 0E 72 06      DW   SWAP,AT,EXIT   
0F04                             ;   COUNT       ( b -- b +n )
0F04                             ;               Return count byte of a string and add 1 to byte address.
0F04                          ;*Macro unroll: mCOLON  5,'COUNT',COUNT
0F04                          ;*Macro unroll:  mCODE 5, "COUNT", COUNT
0F04                          ALIGN   2   
0F04                COUNT:       
0F04                VVCODE:   .SET   $   
0F04                VVLEN:    .SET   (5 & 01FH) / CELLL   
156A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
156A                VVNAME:   .SET   $   
156A   04 0F 78 15            DW   vvCODE,vvLINK   
156E                VVLINK:   .SET   $   
156E   05 43 4F 55 4E 54      DB   5,"COUNT"   
0F04                          .ORG   vvCODE   
0F04   00                     NOP      
0F05   CD 24 06               CALL   doLIST   
0F08   38 10 32 06 01 00 7A 01 DW   DUPP,DOLIT,1,PLUS   
0F10   40 10 9E 0E 72 06      DW   SWAP,CAT,EXIT   
0F16                             ;   HERE        ( -- a )
0F16                             ;               Return the top of the code dictionary.
0F16                          ;*Macro unroll: mCOLON  4,'HERE',HERE
0F16                          ;*Macro unroll:  mCODE 4, "HERE", HERE
0F16                          ALIGN   2   
0F16                HERE:        
0F16                VVCODE:   .SET   $   
0F16                VVLEN:    .SET   (4 & 01FH) / CELLL   
1560                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1560                VVNAME:   .SET   $   
1560   16 0F 6E 15            DW   vvCODE,vvLINK   
1564                VVLINK:   .SET   $   
1564   04 48 45 52 45         DB   4,"HERE"   
0F16                          .ORG   vvCODE   
0F16   00                     NOP      
0F17   CD 24 06               CALL   doLIST   
0F1A   58 11 8E 0E 72 06      DW   CP,AT,EXIT   
0F20                             ;   PAD         ( -- a )
0F20                             ;               Return the address of a temporary buffer.
0F20                          ;*Macro unroll: mCOLON  3,'PAD',PAD
0F20                          ;*Macro unroll:  mCODE 3, "PAD", PAD
0F20                          ALIGN   2   
0F20                PAD:         
0F20                VVCODE:   .SET   $   
0F20                VVLEN:    .SET   (3 & 01FH) / CELLL   
1558                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1558                VVNAME:   .SET   $   
1558   20 0F 64 15            DW   vvCODE,vvLINK   
155C                VVLINK:   .SET   $   
155C   03 50 41 44            DB   3,"PAD"   
0F20                          .ORG   vvCODE   
0F20   00                     NOP      
0F21   CD 24 06               CALL   doLIST   
0F24   16 0F 32 06 50 00 7A 01 72 06 DW   HERE,DOLIT,80,PLUS,EXIT   
0F2E                             ;   TIB         ( -- a )
0F2E                             ;               Return the address of the terminal input buffer.
0F2E                          ;*Macro unroll: mCOLON  3,'TIB',TIB
0F2E                          ;*Macro unroll:  mCODE 3, "TIB", TIB
0F2E                          ALIGN   2   
0F2E                TIB:         
0F2E                VVCODE:   .SET   $   
0F2E                VVLEN:    .SET   (3 & 01FH) / CELLL   
1550                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1550                VVNAME:   .SET   $   
1550   2E 0F 5C 15            DW   vvCODE,vvLINK   
1554                VVLINK:   .SET   $   
1554   03 54 49 42            DB   3,"TIB"   
0F2E                          .ORG   vvCODE   
0F2E   00                     NOP      
0F2F   CD 24 06               CALL   doLIST   
0F32   18 11 76 03 8E 0E 72 06 DW   NTIB,CELLP,AT,EXIT   
0F3A                             ;   @EXECUTE    ( a -- )
0F3A                             ;               Execute vector STOREd in address a.
0F3A                          ;*Macro unroll: hCOLON  8,'@EXECUTE',ATEXE
0F3A                          ;*Macro unroll:  hCODE 8, "@EXECUTE", ATEXE
0F3A                          ALIGN   2   
0F3A                ATEXE:       
0F3A   00                     NOP      
0F3B   CD 24 06               CALL   doLIST   
0F3E   8E 0E 50 10            DW   AT,QDUP   ;?address or zero
0F42   68 0E 48 0F            DW   QBRAN,EXE1   
0F46   64 0E                  DW   EXECU   ;execute if non-zero
0F48                EXE1:        
0F48   72 06                  DW   EXIT   ;do nothing if zero
0F4A                             ;   CMOVE       ( b1 b2 u -- )
0F4A                             ;               Copy u bytes from b1 to b2.
0F4A                          ;*Macro unroll: mCOLON  5,'CMOVE',CMOVE
0F4A                          ;*Macro unroll:  mCODE 5, "CMOVE", CMOVE
0F4A                          ALIGN   2   
0F4A                CMOVE:       
0F4A                VVCODE:   .SET   $   
0F4A                VVLEN:    .SET   (5 & 01FH) / CELLL   
1546                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1546                VVNAME:   .SET   $   
1546   4A 0F 54 15            DW   vvCODE,vvLINK   
154A                VVLINK:   .SET   $   
154A   05 43 4D 4F 56 45      DB   5,"CMOVE"   
0F4A                          .ORG   vvCODE   
0F4A   00                     NOP      
0F4B   CD 24 06               CALL   doLIST   
0F4E   1C 10                  DW   TOR   
0F50   74 0E 6C 0F            DW   BRAN,CMOV2   
0F54                CMOV1:       
0F54   1C 10 38 10 9E 0E      DW   TOR,DUPP,CAT   
0F5A   A6 0E 96 0E            DW   RAT,CSTOR   
0F5E   32 06 01 00 7A 01      DW   DOLIT,1,PLUS   
0F64   2A 10 32 06 01 00 7A 01 DW   RFROM,DOLIT,1,PLUS   
0F6C                CMOV2:       
0F6C   7E 06 54 0F            DW   DONXT,CMOV1   
0F70   6C 10 72 06            DW   DDROP,EXIT   
0F74                             ;   FILL        ( b u c -- )
0F74                             ;               Fill u bytes of character c to area beginning at b.
0F74                          ;*Macro unroll: mCOLON  4,'FILL',FILL
0F74                          ;*Macro unroll:  mCODE 4, "FILL", FILL
0F74                          ALIGN   2   
0F74                FILL:        
0F74                VVCODE:   .SET   $   
0F74                VVLEN:    .SET   (4 & 01FH) / CELLL   
153C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
153C                VVNAME:   .SET   $   
153C   74 0F 4A 15            DW   vvCODE,vvLINK   
1540                VVLINK:   .SET   $   
1540   04 46 49 4C 4C         DB   4,"FILL"   
0F74                          .ORG   vvCODE   
0F74   00                     NOP      
0F75   CD 24 06               CALL   doLIST   
0F78   40 10 1C 10 40 10      DW   SWAP,TOR,SWAP   
0F7E   74 0E 8C 0F            DW   BRAN,FILL2   
0F82                FILL1:       
0F82   76 10 96 0E 32 06 01 00 7A 01 DW   DDUP,CSTOR,DOLIT,1,PLUS   
0F8C                FILL2:       
0F8C   7E 06 82 0F            DW   DONXT,FILL1   
0F90   6C 10 72 06            DW   DDROP,EXIT   
0F94                             ;   -TRAILING   ( b u -- b u )
0F94                             ;               Adjust the count to eliminate trailing white space.
0F94                          ;*Macro unroll: mCOLON  9,'-TRAILING',DTRAI
0F94                          ;*Macro unroll:  mCODE 9, "-TRAILING", DTRAI
0F94                          ALIGN   2   
0F94                DTRAI:       
0F94                VVCODE:   .SET   $   
0F94                VVLEN:    .SET   (9 & 01FH) / CELLL   
152E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
152E                VVNAME:   .SET   $   
152E   94 0F 40 15            DW   vvCODE,vvLINK   
1532                VVLINK:   .SET   $   
1532   09 2D 54 52 41 49 4C 49 4E 47 DB   9,"-TRAILING"   
0F94                          .ORG   vvCODE   
0F94   00                     NOP      
0F95   CD 24 06               CALL   doLIST   
0F98   1C 10                  DW   TOR   
0F9A   74 0E B8 0F            DW   BRAN,DTRA2   
0F9E                DTRA1:       
0F9E   64 07 48 10 A6 0E 7A 01 9E 0E 00 02 DW   BLANK,OVER,RAT,PLUS,CAT,LESS   
0FAA   68 0E B8 0F            DW   QBRAN,DTRA2   
0FAE   2A 10 32 06 01 00 7A 01 72 06 DW   RFROM,DOLIT,1,PLUS,EXIT   ;adjusted count
0FB8                DTRA2:       
0FB8   7E 06 9E 0F            DW   DONXT,DTRA1   
0FBC   32 06 00 00 72 06      DW   DOLIT,0,EXIT   ;count=0
0FC2                             ;   PACK$       ( b u a -- a )
0FC2                             ;               Build a counted string with u characters from b. Null fill.
0FC2                          ;*Macro unroll: mCOLON  5,'PACK$',PACKS
0FC2                          ;*Macro unroll:  mCODE 5, "PACK$", PACKS
0FC2                          ALIGN   2   
0FC2                PACKS:       
0FC2                VVCODE:   .SET   $   
0FC2                VVLEN:    .SET   (5 & 01FH) / CELLL   
1524                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1524                VVNAME:   .SET   $   
1524   C2 0F 32 15            DW   vvCODE,vvLINK   
1528                VVLINK:   .SET   $   
1528   05 50 41 43 4B 24      DB   5,"PACK$"   
0FC2                          .ORG   vvCODE   
0FC2   00                     NOP      
0FC3   CD 24 06               CALL   doLIST   
0FC6   FC 0F 38 10 1C 10      DW   ALGND,DUPP,TOR   ;strings only on cell boundary
0FCC   48 10 38 10 32 06 00 00 DW   OVER,DUPP,DOLIT,0   
0FD4   32 06 02 00 5E 02 3C 10 DW   DOLIT,CELLL,UMMOD,DROP   ;count mod cell
0FDC   B4 01 48 10 7A 01      DW   SUBB,OVER,PLUS   
0FE2   32 06 00 00 40 10 84 0E DW   DOLIT,0,SWAP,STORE   ;null fill cell
0FEA   76 10 96 0E 32 06 01 00 7A 01 DW   DDUP,CSTOR,DOLIT,1,PLUS   ;save count
0FF4   40 10 4A 0F 2A 10 72 06 DW   SWAP,CMOVE,RFROM,EXIT   ;move string
0FFC                             ;   ALIGNED     ( b -- a )
0FFC                             ;               Align address to the cell boundary.
0FFC                          ;*Macro unroll: mCOLON  7,'ALIGNED', ALGND
0FFC                          ;*Macro unroll:  mCODE 7, "ALIGNED", ALGND
0FFC                          ALIGN   2   
0FFC                ALGND:       
0FFC                VVCODE:   .SET   $   
0FFC                VVLEN:    .SET   (7 & 01FH) / CELLL   
1518                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1518                VVNAME:   .SET   $   
1518   FC 0F 28 15            DW   vvCODE,vvLINK   
151C                VVLINK:   .SET   $   
151C   07 41 4C 49 47 4E 45 44 DB   7,"ALIGNED"   
0FFC                          .ORG   vvCODE   
0FFC   00                     NOP      
0FFD   CD 24 06               CALL   doLIST   
1000   72 06                  DW   EXIT   
1002                             ; GREETING:       .cstr   "Type something\r\n"
1002   44 49 56 20 42 59 20 5A 45 52 4F 00 ERR_DIVZERO:   .CSTR   "DIV BY ZERO"   ;-10
100E   4F 55 54 20 4F 46 20 52 41 4E 47 45 00 ERR_OUTOFRANGE:   .CSTR   "OUT OF RANGE"   ;-11
101B                             ;   >R          ( w -- )
101B                             ;               Push the data stack to the return stack.
101B                          ;*Macro unroll: mCODE	COMPO+2, '>R', ToR
101B                          ALIGN   2   
101C                TOR:         
101C                VVCODE:   .SET   $   
101C                VVLEN:    .SET   (COMPO+2 & 01FH) / CELLL   
14F0                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
14F0                VVNAME:   .SET   $   
14F0   1C 10 1C 15            DW   vvCODE,vvLINK   
14F4                VVLINK:   .SET   $   
14F4   22 3E 52               DB   COMPO+2,">R"   
101C                          .ORG   vvCODE   
101C   DD 2B                  DEC   IX   
101E   DD 70 00               LD   (IX+0),B   
1021   DD 2B                  DEC   IX   
1023   DD 71 00               LD   (IX+0),C   
1026   C1                     POP   BC   
1027                          ;*Macro unroll: 	mNEXT
1027   EB                     EX   DE,HL   
1028                          ;*Macro unroll:  mNEXTHL                         ; 34t
1028   FD E9                  JP   (IY)   ; 34t
102A                             ;   R>          ( -- w )
102A                             ;               Pop the return stack to the data stack.
102A                          ;*Macro unroll: mCODE	COMPO+2, 'R>', RFrom
102A                          ALIGN   2   
102A                RFROM:       
102A                VVCODE:   .SET   $   
102A                VVLEN:    .SET   (COMPO+2 & 01FH) / CELLL   
14C8                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
14C8                VVNAME:   .SET   $   
14C8   2A 10 F4 14            DW   vvCODE,vvLINK   
14CC                VVLINK:   .SET   $   
14CC   22 52 3E               DB   COMPO+2,"R>"   
102A                          .ORG   vvCODE   
102A   C5                     PUSH   BC   
102B   DD 4E 00               LD   C,(IX+0)   
102E   DD 23                  INC   IX   
1030   DD 46 00               LD   B,(IX+0)   
1033   DD 23                  INC   IX   
1035                          ;*Macro unroll: 	mNEXT
1035   EB                     EX   DE,HL   
1036                          ;*Macro unroll:  mNEXTHL                         ; 34t
1036   FD E9                  JP   (IY)   ; 34t
1038                             ;   DUP         ( w -- w w )
1038                             ;               Duplicate the top stack item.
1038                          ;*Macro unroll: mCODE	3, 'DUP', DUPP
1038                          ALIGN   2   
1038                DUPP:        
1038                VVCODE:   .SET   $   
1038                VVLEN:    .SET   (3 & 01FH) / CELLL   
14C0                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
14C0                VVNAME:   .SET   $   
14C0   38 10 CC 14            DW   vvCODE,vvLINK   
14C4                VVLINK:   .SET   $   
14C4   03 44 55 50            DB   3,"DUP"   
1038                          .ORG   vvCODE   
1038   C5                     PUSH   BC   
1039                          ;*Macro unroll:  mNEXT
1039   EB                     EX   DE,HL   
103A                          ;*Macro unroll:  mNEXTHL                         ; 34t
103A   FD E9                  JP   (IY)   ; 34t
103C                             ;   DROP	( x -- )			\ CORE
103C                             ;		Discard top stack item.
103C                          ;*Macro unroll: mCODE	4, 'DROP', DROP
103C                          ALIGN   2   
103C                DROP:        
103C                VVCODE:   .SET   $   
103C                VVLEN:    .SET   (4 & 01FH) / CELLL   
14B6                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
14B6                VVNAME:   .SET   $   
14B6   3C 10 C4 14            DW   vvCODE,vvLINK   
14BA                VVLINK:   .SET   $   
14BA   04 44 52 4F 50         DB   4,"DROP"   
103C                          .ORG   vvCODE   
103C   C1                     POP   BC   
103D                          ;*Macro unroll:  mNEXT
103D   EB                     EX   DE,HL   
103E                          ;*Macro unroll:  mNEXTHL                         ; 34t
103E   FD E9                  JP   (IY)   ; 34t
1040                             ;   SWAP        ( w1 w2 -- w2 w1 )
1040                             ;               Exchange top two stack items.
1040                          ;*Macro unroll: mCODE	4, 'SWAP', SWAP
1040                          ALIGN   2   
1040                SWAP:        
1040                VVCODE:   .SET   $   
1040                VVLEN:    .SET   (4 & 01FH) / CELLL   
14AC                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
14AC                VVNAME:   .SET   $   
14AC   40 10 BA 14            DW   vvCODE,vvLINK   
14B0                VVLINK:   .SET   $   
14B0   04 53 57 41 50         DB   4,"SWAP"   
1040                          .ORG   vvCODE   
1040   E1                     POP   HL   
1041   C5                     PUSH   BC   
1042   44                     LD   B,H   
1043   4D                     LD   C,L   
1044                          ;*Macro unroll: 	mNEXT
1044   EB                     EX   DE,HL   
1045                          ;*Macro unroll:  mNEXTHL                         ; 34t
1045   FD E9                  JP   (IY)   ; 34t
1047                             ;   OVER        ( w1 w2 -- w1 w2 w1 )
1047                             ;               Copy second stack item to top.
1047                          ;*Macro unroll: mCODE	4, 'OVER', OVER
1047                          ALIGN   2   
1048                OVER:        
1048                VVCODE:   .SET   $   
1048                VVLEN:    .SET   (4 & 01FH) / CELLL   
14A2                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
14A2                VVNAME:   .SET   $   
14A2   48 10 B0 14            DW   vvCODE,vvLINK   
14A6                VVLINK:   .SET   $   
14A6   04 4F 56 45 52         DB   4,"OVER"   
1048                          .ORG   vvCODE   
1048   E1                     POP   HL   
1049   E5                     PUSH   HL   
104A   C5                     PUSH   BC   
104B   44                     LD   B,H   
104C   4D                     LD   C,L   
104D                          ;*Macro unroll: 	mNEXT
104D   EB                     EX   DE,HL   
104E                          ;*Macro unroll:  mNEXTHL                         ; 34t
104E   FD E9                  JP   (IY)   ; 34t
1050                             ;   ?DUP        ( w -- w w | 0 )
1050                             ;               Dup tos if its is not zero.
1050                          ;*Macro unroll: mCOLON	4,'?DUP', QDUP
1050                          ;*Macro unroll:  mCODE 4, "?DUP", QDUP
1050                          ALIGN   2   
1050                QDUP:        
1050                VVCODE:   .SET   $   
1050                VVLEN:    .SET   (4 & 01FH) / CELLL   
1498                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1498                VVNAME:   .SET   $   
1498   50 10 A6 14            DW   vvCODE,vvLINK   
149C                VVLINK:   .SET   $   
149C   04 3F 44 55 50         DB   4,"?DUP"   
1050                          .ORG   vvCODE   
1050   00                     NOP      
1051   CD 24 06               CALL   doLIST   
1054   38 10 68 0E 5C 10      DW   DUPP,QBRAN,QDUP1   
105A   38 10                  DW   DUPP   
105C                QDUP1:       
105C   72 06                  DW   EXIT   
105E                             ;   ROT         ( w1 w2 w3 -- w2 w3 w1 )
105E                             ;               Rot 3rd item to top.
105E                          ;*Macro unroll: mCOLON	3,'ROT', ROT
105E                          ;*Macro unroll:  mCODE 3, "ROT", ROT
105E                          ALIGN   2   
105E                ROT:         
105E                VVCODE:   .SET   $   
105E                VVLEN:    .SET   (3 & 01FH) / CELLL   
1490                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1490                VVNAME:   .SET   $   
1490   5E 10 9C 14            DW   vvCODE,vvLINK   
1494                VVLINK:   .SET   $   
1494   03 52 4F 54            DB   3,"ROT"   
105E                          .ORG   vvCODE   
105E   00                     NOP      
105F   CD 24 06               CALL   doLIST   
1062   1C 10 40 10 2A 10 40 10 72 06 DW   ToR,SWAP,RFrom,SWAP,EXIT   
106C                             ;   2DROP       ( w w -- )
106C                             ;               Discard two items on stack.
106C                          ;*Macro unroll: mCOLON	5,'2DROP',DDROP
106C                          ;*Macro unroll:  mCODE 5, "2DROP", DDROP
106C                          ALIGN   2   
106C                DDROP:       
106C                VVCODE:   .SET   $   
106C                VVLEN:    .SET   (5 & 01FH) / CELLL   
1486                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1486                VVNAME:   .SET   $   
1486   6C 10 94 14            DW   vvCODE,vvLINK   
148A                VVLINK:   .SET   $   
148A   05 32 44 52 4F 50      DB   5,"2DROP"   
106C                          .ORG   vvCODE   
106C   00                     NOP      
106D   CD 24 06               CALL   doLIST   
1070   3C 10 3C 10 72 06      DW   DROP,DROP,EXIT   
1076                             ;   2DUP        ( w1 w2 -- w1 w2 w1 w2 )
1076                             ;               Duplicate top two items.
1076                          ;*Macro unroll: mCOLON	4,'2DUP',DDUP
1076                          ;*Macro unroll:  mCODE 4, "2DUP", DDUP
1076                          ALIGN   2   
1076                DDUP:        
1076                VVCODE:   .SET   $   
1076                VVLEN:    .SET   (4 & 01FH) / CELLL   
147C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
147C                VVNAME:   .SET   $   
147C   76 10 8A 14            DW   vvCODE,vvLINK   
1480                VVLINK:   .SET   $   
1480   04 32 44 55 50         DB   4,"2DUP"   
1076                          .ORG   vvCODE   
1076   00                     NOP      
1077   CD 24 06               CALL   doLIST   
107A   48 10 48 10 72 06      DW   OVER,OVER,EXIT   
1080                             ;   2SWAP        ( w1 w2 w3 w4 -- w3 w4 w1 w2 )
1080                             ;               Exchange top two items.
1080                          ;*Macro unroll: mCOLON	5,'2SWAP',TwoSWAP
1080                          ;*Macro unroll:  mCODE 5, "2SWAP", TwoSWAP
1080                          ALIGN   2   
1080                TWOSWAP:      
1080                VVCODE:   .SET   $   
1080                VVLEN:    .SET   (5 & 01FH) / CELLL   
1472                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1472                VVNAME:   .SET   $   
1472   80 10 80 14            DW   vvCODE,vvLINK   
1476                VVLINK:   .SET   $   
1476   05 32 53 57 41 50      DB   5,"2SWAP"   
1080                          .ORG   vvCODE   
1080   00                     NOP      
1081   CD 24 06               CALL   doLIST   
1084   5E 10 1C 10 5E 10 2A 10 72 06 DW   ROT,ToR,ROT,RFrom,EXIT   
108E                             ;   PICK        ( ... +n -- ... w )
108E                             ;               Copy the nth stack item to tos.
108E                          ;*Macro unroll: mCOLON  4,'PICK',PICK
108E                          ;*Macro unroll:  mCODE 4, "PICK", PICK
108E                          ALIGN   2   
108E                PICK:        
108E                VVCODE:   .SET   $   
108E                VVLEN:    .SET   (4 & 01FH) / CELLL   
1468                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1468                VVNAME:   .SET   $   
1468   8E 10 76 14            DW   vvCODE,vvLINK   
146C                VVLINK:   .SET   $   
146C   04 50 49 43 4B         DB   4,"PICK"   
108E                          .ORG   vvCODE   
108E   00                     NOP      
108F   CD 24 06               CALL   doLIST   
1092   32 06 01 00 7A 01 8E 03 DW   DOLIT,1,PLUS,CELLS   
109A   C0 0E 7A 01 8E 0E 72 06 DW   SPAT,PLUS,AT,EXIT   
10A2                             ;   DEPTH       ( -- n )
10A2                             ;               Return the depth of the data stack.
10A2                          ;*Macro unroll: mCOLON	5,'DEPTH',DEPTH
10A2                          ;*Macro unroll:  mCODE 5, "DEPTH", DEPTH
10A2                          ALIGN   2   
10A2                DEPTH:       
10A2                VVCODE:   .SET   $   
10A2                VVLEN:    .SET   (5 & 01FH) / CELLL   
145E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
145E                VVNAME:   .SET   $   
145E   A2 10 6C 14            DW   vvCODE,vvLINK   
1462                VVLINK:   .SET   $   
1462   05 44 45 50 54 48      DB   5,"DEPTH"   
10A2                          .ORG   vvCODE   
10A2   00                     NOP      
10A3   CD 24 06               CALL   doLIST   
10A6   C0 0E B8 10 8E 0E 40 10 B4 01 DW   SPAT,SZero,AT,SWAP,SUBB   
10B0   32 06 02 00 0C 03 72 06 DW   DOLIT,CELLL,Slash,EXIT   
10B8                             ;   SP0         ( -- a )
10B8                             ;               Pointer to bottom of the data stack.
10B8                          ;*Macro unroll: mUSER   3,'SP0',SZERO
10B8                          ;*Macro unroll: 	mCODE 3, "SP0", SZERO
10B8                          ALIGN   2   
10B8                SZERO:       
10B8                VVCODE:   .SET   $   
10B8                VVLEN:    .SET   (3 & 01FH) / CELLL   
1456                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1456                VVNAME:   .SET   $   
1456   B8 10 62 14            DW   vvCODE,vvLINK   
145A                VVLINK:   .SET   $   
145A   03 53 50 30            DB   3,"SP0"   
10B8                          .ORG   vvCODE   
10B8   00                     NOP      
10B9   CD 24 06               CALL   doLIST   
10BC   4A 06 00 00            DW   DoUSE,vvUSER   
10C0                VVUSER:   .SET   vvUSER + CELLL   
10C0                             ;   RP0         ( -- a )
10C0                             ;               Pointer to bottom of the return stack.
10C0                          ;*Macro unroll: mUSER   3,'RP0',RZERO
10C0                          ;*Macro unroll: 	mCODE 3, "RP0", RZERO
10C0                          ALIGN   2   
10C0                RZERO:       
10C0                VVCODE:   .SET   $   
10C0                VVLEN:    .SET   (3 & 01FH) / CELLL   
144E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
144E                VVNAME:   .SET   $   
144E   C0 10 5A 14            DW   vvCODE,vvLINK   
1452                VVLINK:   .SET   $   
1452   03 52 50 30            DB   3,"RP0"   
10C0                          .ORG   vvCODE   
10C0   00                     NOP      
10C1   CD 24 06               CALL   doLIST   
10C4   4A 06 02 00            DW   DoUSE,vvUSER   
10C8                VVUSER:   .SET   vvUSER + CELLL   
10C8                             ;   '?KEY       ( -- a )
10C8                             ;               Execution vector of ?KEY.
10C8                          ;*Macro unroll: hUSER   5,"'?KEY",TQKEY
10C8                          ;*Macro unroll: 	hCODE 5, "'?KEY", TQKEY
10C8                          ALIGN   2   
10C8                TQKEY:       
10C8   00                     NOP      
10C9   CD 24 06               CALL   doLIST   
10CC   4A 06 04 00            DW   DoUSE,vvUSER   
10D0                VVUSER:   .SET   vvUSER + CELLL   
10D0                             ;   'EMIT       ( -- a )
10D0                             ;               Execution vector of EMIT.
10D0                          ;*Macro unroll: hUSER   5,"'EMIT",TEMIT
10D0                          ;*Macro unroll: 	hCODE 5, "'EMIT", TEMIT
10D0                          ALIGN   2   
10D0                TEMIT:       
10D0   00                     NOP      
10D1   CD 24 06               CALL   doLIST   
10D4   4A 06 06 00            DW   DoUSE,vvUSER   
10D8                VVUSER:   .SET   vvUSER + CELLL   
10D8                             ;   'EXPECT     ( -- a )
10D8                             ;               Execution vector of EXPECT.
10D8                          ;*Macro unroll: hUSER   7,"'EXPECT",TEXPE
10D8                          ;*Macro unroll: 	hCODE 7, "'EXPECT", TEXPE
10D8                          ALIGN   2   
10D8                TEXPE:       
10D8   00                     NOP      
10D9   CD 24 06               CALL   doLIST   
10DC   4A 06 08 00            DW   DoUSE,vvUSER   
10E0                VVUSER:   .SET   vvUSER + CELLL   
10E0                             ;   'TAP        ( -- a )
10E0                             ;               Execution vector of TAP.
10E0                          ;*Macro unroll: hUSER   4,"'TAP",TTAP
10E0                          ;*Macro unroll: 	hCODE 4, "'TAP", TTAP
10E0                          ALIGN   2   
10E0                TTAP:        
10E0   00                     NOP      
10E1   CD 24 06               CALL   doLIST   
10E4   4A 06 0A 00            DW   DoUSE,vvUSER   
10E8                VVUSER:   .SET   vvUSER + CELLL   
10E8                             ;   'ECHO       ( -- a )
10E8                             ;               Execution vector of ECHO.
10E8                          ;*Macro unroll: hUSER   5,"'ECHO",TECHO
10E8                          ;*Macro unroll: 	hCODE 5, "'ECHO", TECHO
10E8                          ALIGN   2   
10E8                TECHO:       
10E8   00                     NOP      
10E9   CD 24 06               CALL   doLIST   
10EC   4A 06 0C 00            DW   DoUSE,vvUSER   
10F0                VVUSER:   .SET   vvUSER + CELLL   
10F0                             ;   'PROMPT     ( -- a )
10F0                             ;               Execution vector of PROMPT.
10F0                          ;*Macro unroll: hUSER   7,"'PROMPT",TPROM
10F0                          ;*Macro unroll: 	hCODE 7, "'PROMPT", TPROM
10F0                          ALIGN   2   
10F0                TPROM:       
10F0   00                     NOP      
10F1   CD 24 06               CALL   doLIST   
10F4   4A 06 0E 00            DW   DoUSE,vvUSER   
10F8                VVUSER:   .SET   vvUSER + CELLL   
10F8                             ;   BASE        ( -- a )
10F8                             ;               Storage of the radix base for numeric I/O.
10F8                          ;*Macro unroll: mUSER   4,'BASE',BASE
10F8                          ;*Macro unroll: 	mCODE 4, "BASE", BASE
10F8                          ALIGN   2   
10F8                BASE:        
10F8                VVCODE:   .SET   $   
10F8                VVLEN:    .SET   (4 & 01FH) / CELLL   
1444                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1444                VVNAME:   .SET   $   
1444   F8 10 52 14            DW   vvCODE,vvLINK   
1448                VVLINK:   .SET   $   
1448   04 42 41 53 45         DB   4,"BASE"   
10F8                          .ORG   vvCODE   
10F8   00                     NOP      
10F9   CD 24 06               CALL   doLIST   
10FC   4A 06 10 00            DW   DoUSE,vvUSER   
1100                VVUSER:   .SET   vvUSER + CELLL   
1100                             ;   tmp         ( -- a )
1100                             ;               A temporary storage location used in parse and find.
1100                          ;*Macro unroll: hUSER   COMPO+3,'tmp',TEMP
1100                          ;*Macro unroll: 	hCODE COMPO+3, "tmp", TEMP
1100                          ALIGN   2   
1100                TEMP:        
1100   00                     NOP      
1101   CD 24 06               CALL   doLIST   
1104   4A 06 12 00            DW   DoUSE,vvUSER   
1108                VVUSER:   .SET   vvUSER + CELLL   
1108                             ;   SPAN        ( -- a )
1108                             ;               Hold character count received by EXPECT.
1108                          ;*Macro unroll: hUSER   4,'SPAN',SPAN
1108                          ;*Macro unroll: 	hCODE 4, "SPAN", SPAN
1108                          ALIGN   2   
1108                SPAN:        
1108   00                     NOP      
1109   CD 24 06               CALL   doLIST   
110C   4A 06 14 00            DW   DoUSE,vvUSER   
1110                VVUSER:   .SET   vvUSER + CELLL   
1110                             ;   >IN         ( -- a )
1110                             ;               Hold the character pointer while parsing input stream.
1110                          ;*Macro unroll: mUSER   3,'>IN',INN
1110                          ;*Macro unroll: 	mCODE 3, ">IN", INN
1110                          ALIGN   2   
1110                INN:         
1110                VVCODE:   .SET   $   
1110                VVLEN:    .SET   (3 & 01FH) / CELLL   
143C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
143C                VVNAME:   .SET   $   
143C   10 11 48 14            DW   vvCODE,vvLINK   
1440                VVLINK:   .SET   $   
1440   03 3E 49 4E            DB   3,">IN"   
1110                          .ORG   vvCODE   
1110   00                     NOP      
1111   CD 24 06               CALL   doLIST   
1114   4A 06 16 00            DW   DoUSE,vvUSER   
1118                VVUSER:   .SET   vvUSER + CELLL   
1118                             ;   #TIB        ( -- a )
1118                             ;               Hold the current count and address of the terminal input buffer.
1118                          ;*Macro unroll: hUSER   4,'#TIB',NTIB
1118                          ;*Macro unroll: 	hCODE 4, "#TIB", NTIB
1118                          ALIGN   2   
1118                NTIB:        
1118   00                     NOP      
1119   CD 24 06               CALL   doLIST   
111C   4A 06 18 00            DW   DoUSE,vvUSER   
1120                VVUSER:   .SET   vvUSER + CELLL   
1120                VVUSER:   .SET   vvUSER + CELLL   
1120                             ;   CSP         ( -- a )
1120                             ;               Hold the stack pointer for error checking.
1120                          ;*Macro unroll: hUSER   3,'CSP',CSP
1120                          ;*Macro unroll: 	hCODE 3, "CSP", CSP
1120                          ALIGN   2   
1120                CSP:         
1120   00                     NOP      
1121   CD 24 06               CALL   doLIST   
1124   4A 06 1C 00            DW   DoUSE,vvUSER   
1128                VVUSER:   .SET   vvUSER + CELLL   
1128                             ;   'EVAL       ( -- a )
1128                             ;               Execution vector of EVAL.
1128                          ;*Macro unroll: hUSER   5,"'EVAL",TEVAL
1128                          ;*Macro unroll: 	hCODE 5, "'EVAL", TEVAL
1128                          ALIGN   2   
1128                TEVAL:       
1128   00                     NOP      
1129   CD 24 06               CALL   doLIST   
112C   4A 06 1E 00            DW   DoUSE,vvUSER   
1130                VVUSER:   .SET   vvUSER + CELLL   
1130                             ;   'NUMBER     ( -- a )
1130                             ;               Execution vector of NUMBER?.
1130                          ;*Macro unroll: hUSER   7,"'NUMBER",TNUMB
1130                          ;*Macro unroll: 	hCODE 7, "'NUMBER", TNUMB
1130                          ALIGN   2   
1130                TNUMB:       
1130   00                     NOP      
1131   CD 24 06               CALL   doLIST   
1134   4A 06 20 00            DW   DoUSE,vvUSER   
1138                VVUSER:   .SET   vvUSER + CELLL   
1138                             ;   HLD         ( -- a )
1138                             ;               Hold a pointer in building a numeric output string.
1138                          ;*Macro unroll: hUSER   3,'HLD',HLD
1138                          ;*Macro unroll: 	hCODE 3, "HLD", HLD
1138                          ALIGN   2   
1138                HLD:         
1138   00                     NOP      
1139   CD 24 06               CALL   doLIST   
113C   4A 06 22 00            DW   DoUSE,vvUSER   
1140                VVUSER:   .SET   vvUSER + CELLL   
1140                             ;   HANDLER     ( -- a )
1140                             ;               Hold the return stack pointer for error handling.
1140                          ;*Macro unroll: hUSER   7,'HANDLER',HANDL
1140                          ;*Macro unroll: 	hCODE 7, "HANDLER", HANDL
1140                          ALIGN   2   
1140                HANDL:       
1140   00                     NOP      
1141   CD 24 06               CALL   doLIST   
1144   4A 06 24 00            DW   DoUSE,vvUSER   
1148                VVUSER:   .SET   vvUSER + CELLL   
1148                             ;   CONTEXT     ( -- a )
1148                             ;               A area to specify vocabulary search order.
1148                          ;*Macro unroll: hUSER   7,'CONTEXT',CNTXT
1148                          ;*Macro unroll: 	hCODE 7, "CONTEXT", CNTXT
1148                          ALIGN   2   
1148                CNTXT:       
1148   00                     NOP      
1149   CD 24 06               CALL   doLIST   
114C   4A 06 26 00            DW   DoUSE,vvUSER   
1150                VVUSER:   .SET   vvUSER + CELLL   
1150                VVUSER:   .SET   vvUSER + VOCSS * CELLL   ;vocabulary stack
1150                             ;   CURRENT     ( -- a )
1150                             ;               Point to the vocabulary to be extended.
1150                          ;*Macro unroll: hUSER   7,'CURRENT',CRRNT
1150                          ;*Macro unroll: 	hCODE 7, "CURRENT", CRRNT
1150                          ALIGN   2   
1150                CRRNT:       
1150   00                     NOP      
1151   CD 24 06               CALL   doLIST   
1154   4A 06 38 00            DW   DoUSE,vvUSER   
1158                VVUSER:   .SET   vvUSER + CELLL   
1158                VVUSER:   .SET   vvUSER + CELLL   ;vocabulary link pointer
1158                             ;   CP          ( -- a )
1158                             ;               Point to the top of the code dictionary.
1158                          ;*Macro unroll: hUSER   2,'CP',CP
1158                          ;*Macro unroll: 	hCODE 2, "CP", CP
1158                          ALIGN   2   
1158                CP:          
1158   00                     NOP      
1159   CD 24 06               CALL   doLIST   
115C   4A 06 3C 00            DW   DoUSE,vvUSER   
1160                VVUSER:   .SET   vvUSER + CELLL   
1160                             ;   NP          ( -- a )
1160                             ;               Point to the bottom of the name dictionary.
1160                          ;*Macro unroll: hUSER   2,'NP',NP
1160                          ;*Macro unroll: 	hCODE 2, "NP", NP
1160                          ALIGN   2   
1160                NP:          
1160   00                     NOP      
1161   CD 24 06               CALL   doLIST   
1164   4A 06 3E 00            DW   DoUSE,vvUSER   
1168                VVUSER:   .SET   vvUSER + CELLL   
1168                             ;   LAST        ( -- a )
1168                             ;               Point to the last name in the name dictionary.
1168                          ;*Macro unroll: mUSER   4,'LAST',LAST
1168                          ;*Macro unroll: 	mCODE 4, "LAST", LAST
1168                          ALIGN   2   
1168                LAST:        
1168                VVCODE:   .SET   $   
1168                VVLEN:    .SET   (4 & 01FH) / CELLL   
1432                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1432                VVNAME:   .SET   $   
1432   68 11 40 14            DW   vvCODE,vvLINK   
1436                VVLINK:   .SET   $   
1436   04 4C 41 53 54         DB   4,"LAST"   
1168                          .ORG   vvCODE   
1168   00                     NOP      
1169   CD 24 06               CALL   doLIST   
116C   4A 06 40 00            DW   DoUSE,vvUSER   
1170                VVUSER:   .SET   vvUSER + CELLL   
1170                             ;   forth       ( -- a )
1170                             ;               Point to the last name in the name dictionary.
1170                          ;*Macro unroll: hUSER   5,'forth',VFRTH
1170                          ;*Macro unroll: 	hCODE 5, "forth", VFRTH
1170                          ALIGN   2   
1170                VFRTH:       
1170   00                     NOP      
1171   CD 24 06               CALL   doLIST   
1174   4A 06 42 00            DW   DoUSE,vvUSER   
1178                VVUSER:   .SET   vvUSER + CELLL   
1178                             ;   _TYPE       ( b u -- )
1178                             ;               Display a string. Filter non-printing characters.
1178                          ;*Macro unroll: mCOLON  5,'_TYPE',UTYPE
1178                          ;*Macro unroll:  mCODE 5, "_TYPE", UTYPE
1178                          ALIGN   2   
1178                UTYPE:       
1178                VVCODE:   .SET   $   
1178                VVLEN:    .SET   (5 & 01FH) / CELLL   
1428                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1428                VVNAME:   .SET   $   
1428   78 11 36 14            DW   vvCODE,vvLINK   
142C                VVLINK:   .SET   $   
142C   05 5F 54 59 50 45      DB   5,"_TYPE"   
1178                          .ORG   vvCODE   
1178   00                     NOP      
1179   CD 24 06               CALL   doLIST   
117C   1C 10                  DW   TOR   ;start count down loop
117E   74 0E 90 11            DW   BRAN,UTYP2   ;skip first pass
1182                UTYP1:       
1182   38 10 9E 0E 6E 07 CC 0B DW   DUPP,CAT,TCHAR,EMIT   ;display only printable
118A   32 06 01 00 7A 01      DW   DOLIT,1,PLUS   ;increment address
1190                UTYP2:       
1190   7E 06 82 11            DW   DONXT,UTYP1   ;loop till done
1194   3C 10 72 06            DW   DROP,EXIT   
1198                             ;   dm+         ( a u -- a )
1198                             ;               Dump u bytes from , leaving a+u on the stack.
1198                          ;*Macro unroll: hCOLON  3,'dm+',DMP
1198                          ;*Macro unroll:  hCODE 3, "dm+", DMP
1198                          ALIGN   2   
1198                DMP:         
1198   00                     NOP      
1199   CD 24 06               CALL   doLIST   
119C   48 10 32 06 04 00 94 0C DW   OVER,DOLIT,4,UDOTR   ;display address
11A4   FC 0B 1C 10            DW   SPACE,TOR   ;start count down loop
11A8   74 0E BC 11            DW   BRAN,PDUM2   ;skip first pass
11AC                PDUM1:       
11AC   38 10 9E 0E 32 06 03 00 94 0C DW   DUPP,CAT,DOLIT,3,UDOTR   ;display numeric data
11B6   32 06 01 00 7A 01      DW   DOLIT,1,PLUS   ;increment address
11BC                PDUM2:       
11BC   7E 06 AC 11            DW   DONXT,PDUM1   ;loop till done
11C0   72 06                  DW   EXIT   
11C2                             ;   DUMP        ( a u -- )
11C2                             ;               Dump u bytes from a, in a formatted manner.
11C2                          ;*Macro unroll: mCOLON  4,'DUMP',DUMP
11C2                          ;*Macro unroll:  mCODE 4, "DUMP", DUMP
11C2                          ALIGN   2   
11C2                DUMP:        
11C2                VVCODE:   .SET   $   
11C2                VVLEN:    .SET   (4 & 01FH) / CELLL   
141E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
141E                VVNAME:   .SET   $   
141E   C2 11 2C 14            DW   vvCODE,vvLINK   
1422                VVLINK:   .SET   $   
1422   04 44 55 4D 50         DB   4,"DUMP"   
11C2                          .ORG   vvCODE   
11C2   00                     NOP      
11C3   CD 24 06               CALL   doLIST   
11C6   F8 10 8E 0E 1C 10 48 07 DW   BASE,AT,TOR,HEX   ;save radix, set hex
11CE   32 06 10 00 0C 03      DW   DOLIT,16,SLASH   ;change count to lines
11D4   1C 10                  DW   TOR   ;start count down loop
11D6                DUMP1:       
11D6   5A 0C 32 06 10 00 76 10 98 11 DW   CR,DOLIT,16,DDUP,DMP   ;display numeric
11E0   5E 10 5E 10            DW   ROT,ROT   
11E4   FC 0B FC 0B 78 11      DW   SPACE,SPACE,UTYPE   ;display printable characters
11EA   D8 0B 84 01            DW   NUFQ,INVER   ;user control
11EE   68 0E FA 11            DW   QBRAN,DUMP2   
11F2   7E 06 D6 11            DW   DONXT,DUMP1   ;loop till done
11F6   74 0E FE 11            DW   BRAN,DUMP3   
11FA                DUMP2:       
11FA   2A 10 3C 10            DW   RFROM,DROP   ;cleanup loop stack, early exit
11FE                DUMP3:       
11FE   3C 10 2A 10 F8 10 84 0E DW   DROP,RFROM,BASE,STORE   ;reSTORE radix
1206   72 06                  DW   EXIT   
1208                             ;   .S          ( ... -- ... )
1208                             ;               Display the contents of the data stack.
1208                          ;*Macro unroll: mCOLON  2,'.S',DOTS
1208                          ;*Macro unroll:  mCODE 2, ".S", DOTS
1208                          ALIGN   2   
1208                DOTS:        
1208                VVCODE:   .SET   $   
1208                VVLEN:    .SET   (2 & 01FH) / CELLL   
1416                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1416                VVNAME:   .SET   $   
1416   08 12 22 14            DW   vvCODE,vvLINK   
141A                VVLINK:   .SET   $   
141A   02 2E 53               DB   2,".S"   
1208                          .ORG   vvCODE   
1208   00                     NOP      
1209   CD 24 06               CALL   doLIST   
120C   5A 0C A2 10            DW   CR,DEPTH   ;stack depth
1210   1C 10                  DW   TOR   ;start count down loop
1212   74 0E 1C 12            DW   BRAN,DOTS2   ;skip first pass
1216                DOTS1:       
1216   A6 0E 8E 10 BC 0C      DW   RAT,PICK,DOT   ;index stack, display contents
121C                DOTS2:       
121C   7E 06 16 12            DW   DONXT,DOTS1   ;loop till done
1220                          ;*Macro unroll:  mDSTR DOTQP,' <sp'
1220   74 0C                  DW   DOTQP   
1222                VVLEN:    .SET   $   
1222   00 20 3C 73 70         DB   0," <sp"   
1227                VVCODE:   .SET   $   
1222                          .ORG   vvLEN   
1222   04                     DB   vvCODE - vvLEN - 1   
1227                          .ORG   vvCODE   
1227   72 06                  DW   EXIT   
1229                             ;   !CSP        ( -- )
1229                             ;               Save stack pointer in CSP for error checking.
1229                             ;   ?CSP        ( -- )
1229                             ;               Abort if stack pointer differs from that saved in CSP.
1229                             ;   >NAME       ( ca -- na | F )
1229                             ;               Convert code address to a name address.
1229                          ;*Macro unroll:  mCOLON  5,'>NAME',TNAME
1229                          ;*Macro unroll:  mCODE 5, ">NAME", TNAME
1229                          ALIGN   2   
122A                TNAME:       
122A                VVCODE:   .SET   $   
122A                VVLEN:    .SET   (5 & 01FH) / CELLL   
140C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
140C                VVNAME:   .SET   $   
140C   2A 12 1A 14            DW   vvCODE,vvLINK   
1410                VVLINK:   .SET   $   
1410   05 3E 4E 41 4D 45      DB   5,">NAME"   
122A                          .ORG   vvCODE   
122A   00                     NOP      
122B   CD 24 06               CALL   doLIST   
122E   50 11                  DW   CRRNT   ;vocabulary link
1230                TNAM1:       
1230   76 03 8E 0E 50 10      DW   CELLP,AT,QDUP   ;check all vocabularies
1236   68 0E 68 12            DW   QBRAN,TNAM4   
123A   76 10                  DW   DDUP   
123C                TNAM2:       
123C   8E 0E 38 10            DW   AT,DUPP   ;?last word in a vocabulary
1240   68 0E 54 12            DW   QBRAN,TNAM3   
1244   76 10 7A 09 70 01      DW   DDUP,NAMET,XORR   ;compare
124A   68 0E 54 12            DW   QBRAN,TNAM3   
124E   82 03                  DW   CELLM   ;continue with next word
1250   74 0E 3C 12            DW   BRAN,TNAM2   
1254                TNAM3:       
1254   40 10 3C 10 50 10      DW   SWAP,DROP,QDUP   
125A   68 0E 30 12            DW   QBRAN,TNAM1   
125E   40 10 3C 10 40 10 3C 10 72 06 DW   SWAP,DROP,SWAP,DROP,EXIT   
1268                TNAM4:       
1268   3C 10 32 06 00 00 72 06 DW   DROP,DOLIT,0,EXIT   ;false flag
1270                             ;   .ID         ( na -- )
1270                             ;               Display the name at address.
1270                          ;*Macro unroll: mCOLON  3,'.ID',DOTID
1270                          ;*Macro unroll:  mCODE 3, ".ID", DOTID
1270                          ALIGN   2   
1270                DOTID:       
1270                VVCODE:   .SET   $   
1270                VVLEN:    .SET   (3 & 01FH) / CELLL   
1404                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1404                VVNAME:   .SET   $   
1404   70 12 10 14            DW   vvCODE,vvLINK   
1408                VVLINK:   .SET   $   
1408   03 2E 49 44            DB   3,".ID"   
1270                          .ORG   vvCODE   
1270   00                     NOP      
1271   CD 24 06               CALL   doLIST   
1274   50 10                  DW   QDUP   ;if zero no name
1276   68 0E 86 12            DW   QBRAN,DOTI1   
127A   04 0F 32 06 1F 00 5C 01 DW   COUNT,DOLIT,MASKK,ANDD   ;mask lexicon bits
1282   78 11 72 06            DW   UTYPE,EXIT   ;display name string
1286                DOTI1:       
1286                          ;*Macro unroll:  mDSTR   DOTQP,' {noName}'
1286   74 0C                  DW   DOTQP   
1288                VVLEN:    .SET   $   
1288   00 20 7B 6E 6F 4E 61 6D 65 7D DB   0," {noName}"   
1292                VVCODE:   .SET   $   
1288                          .ORG   vvLEN   
1288   09                     DB   vvCODE - vvLEN - 1   
1292                          .ORG   vvCODE   
1292   72 06                  DW   EXIT   
1294                             ;   SEE         ( -- ; <string> )
1294                             ;               A simple decompiler.
1294                          ;*Macro unroll: mCOLON  3,'SEE',SEE
1294                          ;*Macro unroll:  mCODE 3, "SEE", SEE
1294                          ALIGN   2   
1294                SEE:         
1294                VVCODE:   .SET   $   
1294                VVLEN:    .SET   (3 & 01FH) / CELLL   
13FC                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
13FC                VVNAME:   .SET   $   
13FC   94 12 08 14            DW   vvCODE,vvLINK   
1400                VVLINK:   .SET   $   
1400   03 53 45 45            DB   3,"SEE"   
1294                          .ORG   vvCODE   
1294   00                     NOP      
1295   CD 24 06               CALL   doLIST   
1298   BC 03                  DW   TICK   ;starting address
129A   5A 0C 76 03            DW   CR,CELLP   
129E                SEE1:        
129E   76 03 38 10 8E 0E 38 10 DW   CELLP,DUPP,AT,DUPP   ;?does it contain a zero
12A6   68 0E AC 12            DW   QBRAN,SEE2   
12AA   2A 12                  DW   TNAME   ;?is it a name
12AC                SEE2:        
12AC   50 10                  DW   QDUP   ;name address or zero
12AE   68 0E BA 12            DW   QBRAN,SEE3   
12B2   FC 0B 70 12            DW   SPACE,DOTID   ;display name
12B6   74 0E C0 12            DW   BRAN,SEE4   
12BA                SEE3:        
12BA   38 10 8E 0E AC 0C      DW   DUPP,AT,UDOT   ;display number
12C0                SEE4:        
12C0   D8 0B                  DW   NUFQ   ;user control
12C2   68 0E 9E 12            DW   QBRAN,SEE1   
12C6   3C 10 72 06            DW   DROP,EXIT   
12CA                             ;   WORDS       ( -- )
12CA                             ;               Display the names in the context vocabulary.
12CA                             ;   COLD        ( -- )
12CA                             ;               The hilevel cold start sequence.
12CA                             ; utility words
12CA                             ; report the test number to a numeric output device
12CA                          ;*Macro unroll: mCOLON 2,"T.",TESDOT
12CA                          ;*Macro unroll:  mCODE 2, "T.", TESDOT
12CA                          ALIGN   2   
12CA                TESDOT:      
12CA                VVCODE:   .SET   $   
12CA                VVLEN:    .SET   (2 & 01FH) / CELLL   
13F4                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
13F4                VVNAME:   .SET   $   
13F4   CA 12 00 14            DW   vvCODE,vvLINK   
13F8                VVLINK:   .SET   $   
13F8   02 54 2E               DB   2,"T."   
12CA                          .ORG   vvCODE   
12CA   00                     NOP      
12CB   CD 24 06               CALL   doLIST   
12CE   BC 0C                  DW   DOT   
12D0   72 06                  DW   EXIT   
12D2                             ; halt the system
12D2                          ;*Macro unroll: hCOLON 4,"halt",TESHALT
12D2                          ;*Macro unroll:  hCODE 4, "halt", TESHALT
12D2                          ALIGN   2   
12D2                TESHALT:      
12D2   00                     NOP      
12D3   CD 24 06               CALL   doLIST   
12D6   62 0E                  DW   QUIT   
12D8                             ; compute h1 by hashing x1 and h0
12D8                             ; ( x1 h0 -- h1 )
12D8                             ; : hash ( x1 h0 -- h1 )
12D8                             ;  swap 1+ xor
12D8                             ; ;
12D8                          ;*Macro unroll: hCOLON 4,"hash",TESHASH
12D8                          ;*Macro unroll:  hCODE 4, "hash", TESHASH
12D8                          ALIGN   2   
12D8                TESHASH:      
12D8   00                     NOP      
12D9   CD 24 06               CALL   doLIST   
12DC   40 10 A4 03 70 01      DW   SWAP,INCR,XORR   
12E2   72 06                  DW   EXIT   
12E4                             ; hash n items from the stack and return the hash code
12E4                             ; ( x1 x2 ... xn n -- h )
12E4                             ; : hash-n ( x1 x2 ... xn n -- h )
12E4                             ;  0 >R
12E4                             ;  BEGIN
12E4                             ;   dup 0 >
12E4                             ;  WHILE
12E4                             ;   swap R> hash >R
12E4                             ;   1-
12E4                             ;  REPEAT
12E4                             ;  drop R>
12E4                             ; ;
12E4                          ;*Macro unroll: hCOLON 6,"hash-n",TESHASHN
12E4                          ;*Macro unroll:  hCODE 6, "hash-n", TESHASHN
12E4                          ALIGN   2   
12E4                TESHASHN:      
12E4   00                     NOP      
12E5   CD 24 06               CALL   doLIST   
12E8   32 06 00 00 1C 10      DW   DOLIT,0,TOR   
12EE                TESHASHN1:      
12EE   38 10 32 06 00 00 9A 03 68 0E 08 13 DW   DUPP,DOLIT,0,GREAT,QBRAN,TESHASHN2   
12FA   40 10 2A 10 D8 12 1C 10 DW   SWAP,RFROM,TESHASH,TOR   
1302   B0 03 74 0E EE 12      DW   DECR,BRAN,TESHASHN1   
1308                TESHASHN2:      
1308   3C 10 2A 10            DW   DROP,RFROM   
130C   72 06                  DW   EXIT   
130E                             ; start testing
130E                             ; : Tstart
130E                             ;  0 Tcount !
130E                          ;*Macro unroll: mCOLON 6,"Tstart",TESSTRT
130E                          ;*Macro unroll:  mCODE 6, "Tstart", TESSTRT
130E                          ALIGN   2   
130E                TESSTRT:      
130E                VVCODE:   .SET   $   
130E                VVLEN:    .SET   (6 & 01FH) / CELLL   
13E8                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
13E8                VVNAME:   .SET   $   
13E8   0E 13 F8 13            DW   vvCODE,vvLINK   
13EC                VVLINK:   .SET   $   
13EC   06 54 73 74 61 72 74   DB   6,"Tstart"   
130E                          .ORG   vvCODE   
130E   00                     NOP      
130F   CD 24 06               CALL   doLIST   
1312   32 06 00 00 8D 24 84 0E DW   DOLIT,0,TESCNT,STORE   
131A   72 06                  DW   EXIT   
131C                             ; start a unit test
131C                             ; : T{ ( -- )
131C                             ;  Tcount @ 1+ dup T. Tcount !
131C                             ;  depth Tdepth !
131C                          ;*Macro unroll: mCOLON 2,"T{",TESLBR
131C                          ;*Macro unroll:  mCODE 2, "T{", TESLBR
131C                          ALIGN   2   
131C                TESLBR:      
131C                VVCODE:   .SET   $   
131C                VVLEN:    .SET   (2 & 01FH) / CELLL   
13E0                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
13E0                VVNAME:   .SET   $   
13E0   1C 13 EC 13            DW   vvCODE,vvLINK   
13E4                VVLINK:   .SET   $   
13E4   02 54 7B               DB   2,"T{"   
131C                          .ORG   vvCODE   
131C   00                     NOP      
131D   CD 24 06               CALL   doLIST   
1320   8D 24 8E 0E A4 03 38 10 CA 12 8D 24 84 0E DW   TESCNT,AT,INCR,DUPP,TESDOT,TESCNT,STORE   
132E   A2 10 8F 24 84 0E      DW   DEPTH,TESDPTH,STORE   
1334   72 06                  DW   EXIT   
1336                             ; finish a unit test,
1336                             ; : }T ( y1 y2 ... yn -- hy )
1336                             ;  depth Tdepth @ - ( y1 y2 ... yn Ny )
1336                             ;  hash-n ( hy )
1336                             ;  depth Tdepth ! ( hy )
1336                          ;*Macro unroll: mCOLON 2,"}T",TESRBR
1336                          ;*Macro unroll:  mCODE 2, "}T", TESRBR
1336                          ALIGN   2   
1336                TESRBR:      
1336                VVCODE:   .SET   $   
1336                VVLEN:    .SET   (2 & 01FH) / CELLL   
13D8                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
13D8                VVNAME:   .SET   $   
13D8   36 13 E4 13            DW   vvCODE,vvLINK   
13DC                VVLINK:   .SET   $   
13DC   02 7D 54               DB   2,"}T"   
1336                          .ORG   vvCODE   
1336   00                     NOP      
1337   CD 24 06               CALL   doLIST   
133A   A2 10 8F 24 8E 0E B4 01 DW   DEPTH,TESDPTH,AT,SUBB   
1342   E4 12                  DW   TESHASHN   
1344   A2 10 8F 24 84 0E      DW   DEPTH,TESDPTH,STORE   
134A   72 06                  DW   EXIT   
134C                             ; compare actual output with expected output
134C                             ; : == ( hy x1 x2 ... xn -- )
134C                             ;  depth Tdepth @ - ( hy x1 x2 .. xn Nx )
134C                             ;  hash-n ( hy hx )
134C                             ;  = 0= IF halt THEN
134C                          ;*Macro unroll: mCOLON 2,"==",TESEQ
134C                          ;*Macro unroll:  mCODE 2, "==", TESEQ
134C                          ALIGN   2   
134C                TESEQ:       
134C                VVCODE:   .SET   $   
134C                VVLEN:    .SET   (2 & 01FH) / CELLL   
13D0                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
13D0                VVNAME:   .SET   $   
13D0   4C 13 DC 13            DW   vvCODE,vvLINK   
13D4                VVLINK:   .SET   $   
13D4   02 3D 3D               DB   2,"=="   
134C                          .ORG   vvCODE   
134C   00                     NOP      
134D   CD 24 06               CALL   doLIST   
1350   A2 10 8F 24 8E 0E B4 01 DW   DEPTH,TESDPTH,AT,SUBB   
1358   E4 12                  DW   TESHASHN   
135A   CE 01 68 0E 62 13      DW   EQUAL,QBRAN,TESEQ1   
1360   D2 12                  DW   TESHALT   
1362                TESEQ1:      
1362   72 06                  DW   EXIT   
1364                             ; signal end of testing
1364                             ; : Tend ( -- )
1364                             ;  65535 ( 0xFFFF) T.
1364                             ; ;
1364                          ;*Macro unroll: mCOLON 4,"Tend",TESEND
1364                          ;*Macro unroll:  mCODE 4, "Tend", TESEND
1364                          ALIGN   2   
1364                TESEND:      
1364                VVCODE:   .SET   $   
1364                VVLEN:    .SET   (4 & 01FH) / CELLL   
13C6                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
13C6                VVNAME:   .SET   $   
13C6   64 13 D4 13            DW   vvCODE,vvLINK   
13CA                VVLINK:   .SET   $   
13CA   04 54 65 6E 64         DB   4,"Tend"   
1364                          .ORG   vvCODE   
1364   00                     NOP      
1365   CD 24 06               CALL   doLIST   
1368   32 06 FF FF CA 12      DW   DOLIT,-1,TESDOT   
136E   72 06                  DW   EXIT   
1370                LASTN:    EQU   vvNAME+4   ;last name address
2000                          .ORG   END_ROM   
2000                          .ORG   START_RAM   
2000                          IF   TESTMODE   
                    TESTS_START:      
                              LD   HL,DONE   
                              CALL   PRINTSZ   
                              HALT      
                    DONE:     .CSTR   "Done!\r\n"   
2000                          ENDIF      
2000                          DS   DTS   ; data stack size
2200                SPP:         ; SP0 grows down
2200                TIBB:        
2200                          DS   RTS   ; return stack size
2400                RPP:         ; RP0 grows down (into TIBB)
2400                          ALIGN   $100   
2400                SERBUF:   DS   SER_BUFSIZE   
243F   00 00        SERINPTR:   DW   0   
2441   00 00        SERRDPTR:   DW   0   
2443   00 00        SERBUFUSED:   DW   0   
2445                UPP:         
2445   00 00        VARSZERO:   DW   0   ; SP0
2447   00 00        VARRZERO:   DW   0   ; RP0
2449   00 00        VARTQKEY:   DW   0   ; '?KEY
244B   00 00        VARTEMIT:   DW   0   ; 'EMIT
244D   00 00        VARTEXPE:   DW   0   ; 'EXPECT
244F   00 00        VARTTAP:   DW   0   ; 'TAP
2451   00 00        VARTECHO:   DW   0   ; 'ECHO
2453   00 00        VARTPROM:   DW   0   ; 'PROMPT
2455   00 00        VARBASE:   DW   0   ; BASE
2457   00 00        VARTEMP:   DW   0   ; tmp
2459   00 00        VARSPAN:   DW   0   ; SPAN
245B   00 00        VARINN:   DW   0   ; >IN
245D   00 00        VARNTIB:   DW   0   ; #TIB
245F   00 00        VARTIB:   DW   0   ; TIB
2461   00 00        VARCSP:   DW   0   ; CSP
2463   00 00        VARTEVAL:   DW   0   ; 'EVAL
2465   00 00        VARTNUMB:   DW   0   ; 'NUMBER
2467   00 00        VARHLD:   DW   0   ; HLD
2469   00 00        VARHANDL:   DW   0   ; HANDLER
246B   00 00        VARCNTXT:   DW   0   ; CONTEXT pointer
246D   00 00        VARVOCABS:   DW   0   ; vocabulary stack    ???
246F   00 00        VARCRRNT:   DW   0   ; CURRENT pointer
2471   00 00        VARVOCABLP:   DW   0   ; vocabulary link pointer ???
2473   00 00        VARCP:    DW   0   ; CP  for runing phase on RAM
2475   00 00        VARNP:    DW   0   ; NP  for runing phase on RAM
2477   00 00        VARLAST:   DW   0   ; LAST
2479   00 00        VARVFRTH:   DW   0   ; FORTH   \ mullti-user ???
247B   00 00        VARVOCABL:   DW   0   ; vocabulary link       ???
247D                VECTAB:      
247D   00 00        VRST08:   DW   0   
247F   00 00        VRST10:   DW   0   
2481   00 00        VRST18:   DW   0   
2483   00 00        VRST20:   DW   0   
2485   00 00        VRST28:   DW   0   
2487   00 00        VRST30:   DW   0   
2489   00 00        VINT:     DW   0   
248B   00 00        VNMI:     DW   0   
248D   00 00        TESCNT:   DW   0   ; the current test number
248F   00 00        TESDPTH:   DW   0   ; saved stack depth
2491                CPP:         ; grows up
FFFE                          .ORG   END_RAM - 2   
FFFE                NPP:         ; grows down
FFFE                          .END      


TESTMODE:           0000 DEFINED AT LINE 3
MEM_SIZE:           10000 DEFINED AT LINE 1 IN constants.z80
                    > USED AT LINE 3 IN constants.z80
                    > USED AT LINE 12 IN constants.z80
ROM_SIZE:           2000 DEFINED AT LINE 2 IN constants.z80
                    > USED AT LINE 3 IN constants.z80
                    > USED AT LINE 6 IN constants.z80
                    > USED AT LINE 8 IN constants.z80
RAM_SIZE:           E000 DEFINED AT LINE 3 IN constants.z80
                    > USED AT LINE 9 IN constants.z80
START_ROM:          0000 DEFINED AT LINE 5 IN constants.z80
                    > USED AT LINE 8
END_ROM:            2000 DEFINED AT LINE 6 IN constants.z80
                    > USED AT LINE 4 IN word.macro.z80
                    > USED AT LINE 90
START_RAM:          2000 DEFINED AT LINE 8 IN constants.z80
                    > USED AT LINE 9 IN constants.z80
                    > USED AT LINE 91
END_RAM:            10000 DEFINED AT LINE 9 IN constants.z80
                    > USED AT LINE 59 IN variables.z80
BM:                 0000 DEFINED AT LINE 11 IN constants.z80
                    > USED AT LINE 5 IN constants.z80
                    > USED AT LINE 6 IN constants.z80
                    > USED AT LINE 8 IN constants.z80
                    > USED AT LINE 12 IN constants.z80
EM:                 10000 DEFINED AT LINE 12 IN constants.z80
COMPO:              0020 DEFINED AT LINE 14 IN constants.z80
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
IMEDD:              0040 DEFINED AT LINE 15 IN constants.z80
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 133 IN core-compiler.z80
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
MASKK:              001F DEFINED AT LINE 16 IN constants.z80
CHARR:              0001 DEFINED AT LINE 18 IN constants.z80
CELLL:              0002 DEFINED AT LINE 19 IN constants.z80
                    > USED AT LINE 39 IN constants.z80
                    > USED AT LINE 40 IN constants.z80
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 319 IN core-alu.z80
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 324 IN core-alu.z80
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 329 IN core-alu.z80
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 145 IN core-interpret.z80
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 184 IN core-memory.z80
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 90 IN core-stacks.z80
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 33
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 33
                    > USED AT LINE 63
                    > USED AT LINE 63
                    > USED AT LINE 63
                    > USED AT LINE 63
                    > USED AT LINE 63
                    > USED AT LINE 63
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 33
                    > USED AT LINE 63
                    > USED AT LINE 63
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 33
                    > USED AT LINE 63
                    > USED AT LINE 65 IN core-user.z80
                    > USED AT LINE 63
                    > USED AT LINE 63
                    > USED AT LINE 63
                    > USED AT LINE 63
                    > USED AT LINE 63
                    > USED AT LINE 63
                    > USED AT LINE 96 IN core-user.z80
                    > USED AT LINE 63
                    > USED AT LINE 102 IN core-user.z80
                    > USED AT LINE 63
                    > USED AT LINE 63
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 33
                    > USED AT LINE 63
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
BASEE:              000A DEFINED AT LINE 20 IN constants.z80
                    > USED AT LINE 13 IN defaults.z80
VOCSS:              0008 DEFINED AT LINE 21 IN constants.z80
                    > USED AT LINE 96 IN core-user.z80
MAXCHAR:            00FF DEFINED AT LINE 23 IN constants.z80
MAXSIGNED:          7FFF DEFINED AT LINE 24 IN constants.z80
MAXUNSIGNED:        FFFF DEFINED AT LINE 25 IN constants.z80
MAXNEGATIVE:        8000 DEFINED AT LINE 26 IN constants.z80
BKSPP:              0008 DEFINED AT LINE 28 IN constants.z80
                    > USED AT LINE 187 IN core-io.z80
                    > USED AT LINE 189 IN core-io.z80
                    > USED AT LINE 204 IN core-io.z80
LFF:                000A DEFINED AT LINE 29 IN constants.z80
CRR:                000D DEFINED AT LINE 30 IN constants.z80
                    > USED AT LINE 132 IN core-io.z80
SPACEE:             0020 DEFINED AT LINE 31 IN constants.z80
                    > USED AT LINE 74 IN core-format.z80
                    > USED AT LINE 81 IN core-format.z80
TIC:                0027 DEFINED AT LINE 32 IN constants.z80
MINUSS:             002D DEFINED AT LINE 33 IN constants.z80
                    > USED AT LINE 44 IN core-format.z80
UNDERSC:            005F DEFINED AT LINE 34 IN constants.z80
CALLL:              CD00 DEFINED AT LINE 36 IN constants.z80
                    > USED AT LINE 119 IN core-compiler.z80
US:                 003A DEFINED AT LINE 38 IN constants.z80
                    > USED AT LINE 50
RTS:                0200 DEFINED AT LINE 39 IN constants.z80
                    > USED AT LINE 5 IN variables.z80
DTS:                0200 DEFINED AT LINE 40 IN constants.z80
                    > USED AT LINE 2 IN variables.z80
RET_STACK_SIZE:     0100 DEFINED AT LINE 42 IN constants.z80
DATA_STACK_SIZE:    0100 DEFINED AT LINE 43 IN constants.z80
INT_ADDR:           0038 DEFINED AT LINE 45 IN constants.z80
SER_BUFSIZE:        003F DEFINED AT LINE 46 IN constants.z80
                    > USED AT LINE 11 IN interrupt.z80
                    > USED AT LINE 19 IN interrupt.z80
                    > USED AT LINE 21 IN serial.z80
                    > USED AT LINE 9 IN variables.z80
SER_FULLSIZE:       0030 DEFINED AT LINE 47 IN constants.z80
                    > USED AT LINE 28 IN interrupt.z80
SER_EMPTYSIZE:      0005 DEFINED AT LINE 48 IN constants.z80
                    > USED AT LINE 30 IN serial.z80
RTS_HIGH:           00D6 DEFINED AT LINE 50 IN constants.z80
                    > USED AT LINE 30 IN interrupt.z80
RTS_LOW:            0096 DEFINED AT LINE 51 IN constants.z80
                    > USED AT LINE 11 IN serial.z80
                    > USED AT LINE 32 IN serial.z80
TRUEE:              00-1 DEFINED AT LINE 53 IN constants.z80
                    > USED AT LINE 41 IN core-io.z80
FALSEE:             0000 DEFINED AT LINE 54 IN constants.z80
                    > USED AT LINE 34 IN core-io.z80
VVCODE:             1364 DEFINED AT LINE 12
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 42
                    > USED AT LINE 43
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 42
                    > USED AT LINE 43
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 42
                    > USED AT LINE 43
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 42
                    > USED AT LINE 43
                    > USED AT LINE 42
                    > USED AT LINE 43
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 42
                    > USED AT LINE 43
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 42
                    > USED AT LINE 43
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 42
                    > USED AT LINE 43
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
VVNAME:             13C6 DEFINED AT LINE 15
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 88
VVLINK:             13CA DEFINED AT LINE 17
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
VVUSER:             117A DEFINED AT LINE 63
                    > USED AT LINE 32
                    > USED AT LINE 33
                    > USED AT LINE 32
                    > USED AT LINE 33
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 32
                    > USED AT LINE 33
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 32
                    > USED AT LINE 33
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 65 IN core-user.z80
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 96 IN core-user.z80
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 102 IN core-user.z80
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 32
                    > USED AT LINE 33
                    > USED AT LINE 62
                    > USED AT LINE 63
RESET:              0000 DEFINED AT LINE 9
RST08:              0008 DEFINED AT LINE 12
RST10:              0010 DEFINED AT LINE 16
RST18:              0018 DEFINED AT LINE 20
RST20:              0020 DEFINED AT LINE 24
RST28:              0028 DEFINED AT LINE 28
RST30:              0030 DEFINED AT LINE 32
RST38:              0038 DEFINED AT LINE 36
RST66:              0066 DEFINED AT LINE 40
INIT:               006C DEFINED AT LINE 42
                    > USED AT LINE 9
SER_INTR:           0093 DEFINED AT LINE 1 IN interrupt.z80
                    > USED AT LINE 43
NOTFULL:            00A8 DEFINED AT LINE 16 IN interrupt.z80
                    > USED AT LINE 12 IN interrupt.z80
NOTWRAP:            00B4 DEFINED AT LINE 22 IN interrupt.z80
                    > USED AT LINE 20 IN interrupt.z80
RTS0:               00C8 DEFINED AT LINE 32 IN interrupt.z80
                    > USED AT LINE 6 IN interrupt.z80
                    > USED AT LINE 14 IN interrupt.z80
                    > USED AT LINE 29 IN interrupt.z80
INIT_IO:            00D1 DEFINED AT LINE 4 IN serial.z80
                    > USED AT LINE 25 IN core-io.z80
RXA:                00E5 DEFINED AT LINE 16 IN serial.z80
                    > USED AT LINE 37 IN core-io.z80
RXA1:               00F2 DEFINED AT LINE 24 IN serial.z80
                    > USED AT LINE 22 IN serial.z80
RXA2:               0105 DEFINED AT LINE 34 IN serial.z80
                    > USED AT LINE 31 IN serial.z80
TXA:                0109 DEFINED AT LINE 40 IN serial.z80
                    > USED AT LINE 49 IN core-io.z80
TXA1:               010A DEFINED AT LINE 42 IN serial.z80
                    > USED AT LINE 45 IN serial.z80
QRXA:               0114 DEFINED AT LINE 50 IN serial.z80
                    > USED AT LINE 32 IN core-io.z80
DEFAULTS:           011A DEFINED AT LINE 3 IN defaults.z80
                    > USED AT LINE 38 IN constants.z80
                    > USED AT LINE 48
UZERO:              011A DEFINED AT LINE 4 IN defaults.z80
                    > USED AT LINE 54 IN core-kernel.z80
                    > USED AT LINE 55 IN core-kernel.z80
DEFSZERO:           011A DEFINED AT LINE 5 IN defaults.z80
DEFRZERO:           011C DEFINED AT LINE 6 IN defaults.z80
DEFTQKEY:           011E DEFINED AT LINE 7 IN defaults.z80
DEFTEMIT:           0120 DEFINED AT LINE 8 IN defaults.z80
DEFTEXPE:           0122 DEFINED AT LINE 9 IN defaults.z80
DEFTTAP:            0124 DEFINED AT LINE 10 IN defaults.z80
DEFTECHO:           0126 DEFINED AT LINE 11 IN defaults.z80
DEFTPROM:           0128 DEFINED AT LINE 12 IN defaults.z80
DEFBASE:            012A DEFINED AT LINE 13 IN defaults.z80
DEFTEMP:            012C DEFINED AT LINE 14 IN defaults.z80
DEFSPAN:            012E DEFINED AT LINE 15 IN defaults.z80
DEFINN:             0130 DEFINED AT LINE 16 IN defaults.z80
DEFNTIB:            0132 DEFINED AT LINE 17 IN defaults.z80
DEFTIB:             0134 DEFINED AT LINE 18 IN defaults.z80
DEFCSP:             0136 DEFINED AT LINE 19 IN defaults.z80
DEFTEVAL:           0138 DEFINED AT LINE 20 IN defaults.z80
DEFTNUMB:           013A DEFINED AT LINE 21 IN defaults.z80
DEFHLD:             013C DEFINED AT LINE 22 IN defaults.z80
DEFHANDL:           013E DEFINED AT LINE 23 IN defaults.z80
DEFCNTXT:           0140 DEFINED AT LINE 24 IN defaults.z80
DEFVOCABS:          0142 DEFINED AT LINE 25 IN defaults.z80
DEFCRRENT:          0144 DEFINED AT LINE 26 IN defaults.z80
DEFVOCABLP:         0146 DEFINED AT LINE 27 IN defaults.z80
DEFCP:              0148 DEFINED AT LINE 28 IN defaults.z80
DEFNP:              014A DEFINED AT LINE 29 IN defaults.z80
DEFLAST:            014C DEFINED AT LINE 30 IN defaults.z80
DEFVFRTH:           014E DEFINED AT LINE 31 IN defaults.z80
DEFVOCABL:          0150 DEFINED AT LINE 32 IN defaults.z80
DEFCOLD:            0152 DEFINED AT LINE 33 IN defaults.z80
ULAST:              0154 DEFINED AT LINE 34 IN defaults.z80
                    > USED AT LINE 55 IN core-kernel.z80
END_DEFAULTS:       0154 DEFINED AT LINE 35 IN defaults.z80
                    > USED AT LINE 38 IN constants.z80
ZLESS:              0154 DEFINED AT LINE 11
                    > USED AT LINE 77 IN core-alu.z80
                    > USED AT LINE 98 IN core-alu.z80
                    > USED AT LINE 104 IN core-alu.z80
                    > USED AT LINE 106 IN core-alu.z80
                    > USED AT LINE 233 IN core-alu.z80
                    > USED AT LINE 250 IN core-alu.z80
                    > USED AT LINE 43 IN core-format.z80
                    > USED AT LINE 57 IN core-interpret.z80
                    > USED AT LINE 71 IN core-interpret.z80
                    > USED AT LINE 256 IN core-interpret.z80
VVLEN:              0002 DEFINED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 41
                    > USED AT LINE 42
                    > USED AT LINE 14
                    > USED AT LINE 41
                    > USED AT LINE 42
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 41
                    > USED AT LINE 42
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 41
                    > USED AT LINE 42
                    > USED AT LINE 41
                    > USED AT LINE 42
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 41
                    > USED AT LINE 42
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 41
                    > USED AT LINE 42
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 41
                    > USED AT LINE 42
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
ANDD:               015C DEFINED AT LINE 11
ORR:                0166 DEFINED AT LINE 11
XORR:               0170 DEFINED AT LINE 11
                    > USED AT LINE 85 IN core-alu.z80
                    > USED AT LINE 94 IN core-alu.z80
                    > USED AT LINE 103 IN core-alu.z80
                    > USED AT LINE 300 IN core-alu.z80
                    > USED AT LINE 217 IN core-io.z80
PLUS:               017A DEFINED AT LINE 11
                    > USED AT LINE 67 IN core-alu.z80
                    > USED AT LINE 72 IN core-alu.z80
                    > USED AT LINE 239 IN core-alu.z80
                    > USED AT LINE 44 IN core-compiler.z80
                    > USED AT LINE 215 IN core-io.z80
                    > USED AT LINE 84 IN core-stacks.z80
INVER:              0184 DEFINED AT LINE 11
                    > USED AT LINE 60 IN core-alu.z80
                    > USED AT LINE 65 IN core-alu.z80
                    > USED AT LINE 37 IN core-utils.z80
NEGAT:              0190 DEFINED AT LINE 11
                    > USED AT LINE 72 IN core-alu.z80
                    > USED AT LINE 78 IN core-alu.z80
                    > USED AT LINE 235 IN core-alu.z80
                    > USED AT LINE 243 IN core-alu.z80
                    > USED AT LINE 34 IN core-interpret.z80
DNEGA:              019E DEFINED AT LINE 11
                    > USED AT LINE 302 IN core-alu.z80
SUBB:               01B4 DEFINED AT LINE 11
                    > USED AT LINE 98 IN core-alu.z80
                    > USED AT LINE 106 IN core-alu.z80
                    > USED AT LINE 128 IN core-alu.z80
                    > USED AT LINE 129 IN core-alu.z80
                    > USED AT LINE 57 IN core-interpret.z80
                    > USED AT LINE 82 IN core-interpret.z80
                    > USED AT LINE 135 IN core-interpret.z80
                    > USED AT LINE 185 IN core-memory.z80
ABSS:               01BE DEFINED AT LINE 11
ABS1:               01CC DEFINED AT LINE 79 IN core-alu.z80
EQUAL:              01CE DEFINED AT LINE 11
                    > USED AT LINE 77 IN tester.z80
EQU1:               01DE DEFINED AT LINE 88 IN core-alu.z80
                    > USED AT LINE 86 IN core-alu.z80
ULESS:              01E4 DEFINED AT LINE 11
ULES1:              01FA DEFINED AT LINE 97 IN core-alu.z80
                    > USED AT LINE 95 IN core-alu.z80
LESS:               0200 DEFINED AT LINE 11
                    > USED AT LINE 111 IN core-alu.z80
                    > USED AT LINE 335 IN core-alu.z80
LESS1:              0214 DEFINED AT LINE 105 IN core-alu.z80
MAX:                021A DEFINED AT LINE 11
MAX1:               0228 DEFINED AT LINE 113 IN core-alu.z80
MIN:                022C DEFINED AT LINE 11
MIN1:               023C DEFINED AT LINE 122 IN core-alu.z80
                    > USED AT LINE 120 IN core-alu.z80
WITHI:              0240 DEFINED AT LINE 11
UMPLUS:             0252 DEFINED AT LINE 49
                    > USED AT LINE 50 IN core-alu.z80
UMP2:               025A DEFINED AT LINE 139 IN core-alu.z80
UMP1:               025B DEFINED AT LINE 141 IN core-alu.z80
                    > USED AT LINE 138 IN core-alu.z80
UMMOD:              025E DEFINED AT LINE 11
                    > USED AT LINE 241 IN core-alu.z80
UMSLMOD2:           026A DEFINED AT LINE 11
UMMOD11:            026E DEFINED AT LINE 158 IN core-alu.z80
UMMOD12:            0279 DEFINED AT LINE 169 IN core-alu.z80
UMMOD2:             0293 DEFINED AT LINE 189 IN core-alu.z80
                    > USED AT LINE 157 IN core-alu.z80
UMMOD1:             0299 DEFINED AT LINE 192 IN core-alu.z80
                    > USED AT LINE 168 IN core-alu.z80
UMMOD4:             029F DEFINED AT LINE 195 IN core-alu.z80
                    > USED AT LINE 213 IN core-alu.z80
UMMOD13:            02A7 DEFINED AT LINE 203 IN core-alu.z80
UMMOD3:             02AD DEFINED AT LINE 210 IN core-alu.z80
                    > USED AT LINE 175 IN core-alu.z80
                    > USED AT LINE 179 IN core-alu.z80
                    > USED AT LINE 224 IN core-alu.z80
UMMOD14:            02B1 DEFINED AT LINE 214 IN core-alu.z80
UMMOD5:             02B7 DEFINED AT LINE 221 IN core-alu.z80
                    > USED AT LINE 202 IN core-alu.z80
UMMOD15:            02BB DEFINED AT LINE 225 IN core-alu.z80
MSMOD:              02BC DEFINED AT LINE 11
MMOD1:              02D4 DEFINED AT LINE 236 IN core-alu.z80
                    > USED AT LINE 234 IN core-alu.z80
MMOD2:              02E2 DEFINED AT LINE 240 IN core-alu.z80
                    > USED AT LINE 238 IN core-alu.z80
MMOD3:              02F2 DEFINED AT LINE 244 IN core-alu.z80
                    > USED AT LINE 242 IN core-alu.z80
SLMOD:              02F4 DEFINED AT LINE 11
                    > USED AT LINE 255 IN core-alu.z80
                    > USED AT LINE 260 IN core-alu.z80
MODD:               0302 DEFINED AT LINE 11
SLASH:              030C DEFINED AT LINE 11
UMSTA:              0318 DEFINED AT LINE 11
                    > USED AT LINE 295 IN core-alu.z80
                    > USED AT LINE 301 IN core-alu.z80
UMSTA1:             0320 DEFINED AT LINE 272 IN core-alu.z80
                    > USED AT LINE 285 IN core-alu.z80
UMSTA2:             0327 DEFINED AT LINE 278 IN core-alu.z80
UMSTA5:             032A DEFINED AT LINE 281 IN core-alu.z80
UMSTA3:             032B DEFINED AT LINE 283 IN core-alu.z80
                    > USED AT LINE 277 IN core-alu.z80
                    > USED AT LINE 280 IN core-alu.z80
UMSTA4:             032E DEFINED AT LINE 286 IN core-alu.z80
STAR:               0334 DEFINED AT LINE 11
MSTAR:              033E DEFINED AT LINE 11
                    > USED AT LINE 309 IN core-alu.z80
MSTAR1:             035A DEFINED AT LINE 303 IN core-alu.z80
SSMOD:              035C DEFINED AT LINE 11
                    > USED AT LINE 314 IN core-alu.z80
STASL:              036A DEFINED AT LINE 11
CELLP:              0376 DEFINED AT LINE 11
                    > USED AT LINE 32 IN core-compiler.z80
                    > USED AT LINE 151 IN core-interpret.z80
                    > USED AT LINE 153 IN core-interpret.z80
                    > USED AT LINE 171 IN core-interpret.z80
                    > USED AT LINE 97 IN core-memory.z80
                    > USED AT LINE 102 IN core-memory.z80
                    > USED AT LINE 125 IN core-memory.z80
                    > USED AT LINE 74 IN core-utils.z80
                    > USED AT LINE 107 IN core-utils.z80
                    > USED AT LINE 109 IN core-utils.z80
CELLM:              0382 DEFINED AT LINE 11
                    > USED AT LINE 72 IN core-compiler.z80
                    > USED AT LINE 74 IN core-compiler.z80
                    > USED AT LINE 126 IN core-interpret.z80
                    > USED AT LINE 126 IN core-interpret.z80
                    > USED AT LINE 156 IN core-interpret.z80
                    > USED AT LINE 158 IN core-interpret.z80
                    > USED AT LINE 158 IN core-interpret.z80
                    > USED AT LINE 161 IN core-interpret.z80
                    > USED AT LINE 169 IN core-interpret.z80
                    > USED AT LINE 82 IN core-utils.z80
CELLS:              038E DEFINED AT LINE 11
GREAT:              039A DEFINED AT LINE 11
INCR:               03A4 DEFINED AT LINE 11
                    > USED AT LINE 17 IN tester.z80
DECR:               03B0 DEFINED AT LINE 11
                    > USED AT LINE 37 IN tester.z80
TICK:               03BC DEFINED AT LINE 11
                    > USED AT LINE 25 IN core-compiler.z80
                    > USED AT LINE 106 IN core-utils.z80
TICK1:              03CA DEFINED AT LINE 7 IN core-compiler.z80
                    > USED AT LINE 5 IN core-compiler.z80
ALLOT:              03CC DEFINED AT LINE 11
COMMA:              03D6 DEFINED AT LINE 11
                    > USED AT LINE 25 IN core-compiler.z80
                    > USED AT LINE 90 IN core-compiler.z80
                    > USED AT LINE 120 IN core-compiler.z80
BCOMP:              03E8 DEFINED AT LINE 11
COMPI:              03F2 DEFINED AT LINE 11
                    > USED AT LINE 38 IN core-compiler.z80
                    > USED AT LINE 107 IN core-compiler.z80
                    > USED AT LINE 142 IN core-compiler.z80
                    > USED AT LINE 150 IN core-compiler.z80
                    > USED AT LINE 4 IN core-control.z80
                    > USED AT LINE 14 IN core-control.z80
                    > USED AT LINE 19 IN core-control.z80
                    > USED AT LINE 24 IN core-control.z80
                    > USED AT LINE 30 IN core-control.z80
                    > USED AT LINE 37 IN core-control.z80
                    > USED AT LINE 69 IN core-control.z80
                    > USED AT LINE 74 IN core-control.z80
                    > USED AT LINE 79 IN core-control.z80
LITER:              0404 DEFINED AT LINE 11
                    > USED AT LINE 94 IN core-compiler.z80
STRCQ:              0410 DEFINED AT LINE 49
RECUR:              0426 DEFINED AT LINE 11
UNIQU:              0434 DEFINED AT LINE 11
                    > USED AT LINE 69 IN core-compiler.z80
UNIQ1:              0450 DEFINED AT LINE 60 IN core-compiler.z80
                    > USED AT LINE 57 IN core-compiler.z80
SNAME:              0454 DEFINED AT LINE 11
                    > USED AT LINE 126 IN core-compiler.z80
                    > USED AT LINE 140 IN core-compiler.z80
                    > USED AT LINE 148 IN core-compiler.z80
PNAM1:              0486 DEFINED AT LINE 76 IN core-compiler.z80
                    > USED AT LINE 68 IN core-compiler.z80
SCOMP:              0490 DEFINED AT LINE 49
                    > USED AT LINE 113 IN core-compiler.z80
SCOM1:              04AC DEFINED AT LINE 89 IN core-compiler.z80
                    > USED AT LINE 87 IN core-compiler.z80
SCOM2:              04B0 DEFINED AT LINE 91 IN core-compiler.z80
                    > USED AT LINE 85 IN core-compiler.z80
SCOM3:              04BC DEFINED AT LINE 95 IN core-compiler.z80
                    > USED AT LINE 93 IN core-compiler.z80
OVERT:              04BE DEFINED AT LINE 49
SEMIS:              04CE DEFINED AT LINE 11
RBRAC:              04DC DEFINED AT LINE 11
                    > USED AT LINE 127 IN core-compiler.z80
CALLC:              04EA DEFINED AT LINE 49
                    > USED AT LINE 127 IN core-compiler.z80
COLON:              04F8 DEFINED AT LINE 11
IMMED:              050A DEFINED AT LINE 11
USER:               0522 DEFINED AT LINE 11
CREAT:              053A DEFINED AT LINE 11
                    > USED AT LINE 156 IN core-compiler.z80
VARIA:              0550 DEFINED AT LINE 11
FOR:                055E DEFINED AT LINE 11
BEGIN:              056A DEFINED AT LINE 11
NEXT:               0572 DEFINED AT LINE 11
UNTIL:              057E DEFINED AT LINE 11
AGAIN:              058A DEFINED AT LINE 11
                    > USED AT LINE 43 IN core-control.z80
IFF:                0596 DEFINED AT LINE 11
                    > USED AT LINE 64 IN core-control.z80
AHEAD:              05A8 DEFINED AT LINE 11
                    > USED AT LINE 54 IN core-control.z80
                    > USED AT LINE 59 IN core-control.z80
REPEA:              05BA DEFINED AT LINE 11
THENN:              05C8 DEFINED AT LINE 11
AFT:                05D4 DEFINED AT LINE 11
ELSEE:              05E2 DEFINED AT LINE 11
WHILE:              05EE DEFINED AT LINE 11
ABRTQ:              05F8 DEFINED AT LINE 11
STRQ:               0604 DEFINED AT LINE 49
DOTQ:               0610 DEFINED AT LINE 49
DOCONST:            061C DEFINED AT LINE 49
DOLIST:             0624 DEFINED AT LINE 49
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 141 IN core-compiler.z80
                    > USED AT LINE 25
                    > USED AT LINE 149 IN core-compiler.z80
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 31
                    > USED AT LINE 31
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 31
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 31
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 31
                    > USED AT LINE 61
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
DOLIT:              0632 DEFINED AT LINE 49
                    > USED AT LINE 55 IN core-alu.z80
                    > USED AT LINE 60 IN core-alu.z80
                    > USED AT LINE 66 IN core-alu.z80
                    > USED AT LINE 87 IN core-alu.z80
                    > USED AT LINE 89 IN core-alu.z80
                    > USED AT LINE 319 IN core-alu.z80
                    > USED AT LINE 324 IN core-alu.z80
                    > USED AT LINE 329 IN core-alu.z80
                    > USED AT LINE 338 IN core-alu.z80
                    > USED AT LINE 341 IN core-alu.z80
                    > USED AT LINE 38 IN core-compiler.z80
                    > USED AT LINE 43 IN core-compiler.z80
                    > USED AT LINE 86 IN core-compiler.z80
                    > USED AT LINE 113 IN core-compiler.z80
                    > USED AT LINE 119 IN core-compiler.z80
                    > USED AT LINE 133 IN core-compiler.z80
                    > USED AT LINE 141 IN core-compiler.z80
                    > USED AT LINE 149 IN core-compiler.z80
                    > USED AT LINE 156 IN core-compiler.z80
                    > USED AT LINE 31 IN core-control.z80
                    > USED AT LINE 4 IN core-format.z80
                    > USED AT LINE 5 IN core-format.z80
                    > USED AT LINE 6 IN core-format.z80
                    > USED AT LINE 11 IN core-format.z80
                    > USED AT LINE 44 IN core-format.z80
                    > USED AT LINE 64 IN core-format.z80
                    > USED AT LINE 69 IN core-format.z80
                    > USED AT LINE 74 IN core-format.z80
                    > USED AT LINE 79 IN core-format.z80
                    > USED AT LINE 80 IN core-format.z80
                    > USED AT LINE 81 IN core-format.z80
                    > USED AT LINE 83 IN core-format.z80
                    > USED AT LINE 5 IN core-interpret.z80
                    > USED AT LINE 6 IN core-interpret.z80
                    > USED AT LINE 8 IN core-interpret.z80
                    > USED AT LINE 9 IN core-interpret.z80
                    > USED AT LINE 20 IN core-interpret.z80
                    > USED AT LINE 25 IN core-interpret.z80
                    > USED AT LINE 30 IN core-interpret.z80
                    > USED AT LINE 52 IN core-interpret.z80
                    > USED AT LINE 59 IN core-interpret.z80
                    > USED AT LINE 74 IN core-interpret.z80
                    > USED AT LINE 80 IN core-interpret.z80
                    > USED AT LINE 99 IN core-interpret.z80
                    > USED AT LINE 139 IN core-interpret.z80
                    > USED AT LINE 145 IN core-interpret.z80
                    > USED AT LINE 151 IN core-interpret.z80
                    > USED AT LINE 178 IN core-interpret.z80
                    > USED AT LINE 227 IN core-interpret.z80
                    > USED AT LINE 241 IN core-interpret.z80
                    > USED AT LINE 247 IN core-interpret.z80
                    > USED AT LINE 87 IN core-io.z80
                    > USED AT LINE 97 IN core-io.z80
                    > USED AT LINE 112 IN core-io.z80
                    > USED AT LINE 124 IN core-io.z80
                    > USED AT LINE 132 IN core-io.z80
                    > USED AT LINE 175 IN core-io.z80
                    > USED AT LINE 187 IN core-io.z80
                    > USED AT LINE 189 IN core-io.z80
                    > USED AT LINE 202 IN core-io.z80
                    > USED AT LINE 204 IN core-io.z80
                    > USED AT LINE 220 IN core-io.z80
                    > USED AT LINE 239 IN core-io.z80
                    > USED AT LINE 240 IN core-io.z80
                    > USED AT LINE 20 IN core-kernel.z80
                    > USED AT LINE 24 IN core-kernel.z80
                    > USED AT LINE 44 IN core-kernel.z80
                    > USED AT LINE 47 IN core-kernel.z80
                    > USED AT LINE 54 IN core-kernel.z80
                    > USED AT LINE 55 IN core-kernel.z80
                    > USED AT LINE 67 IN core-kernel.z80
                    > USED AT LINE 108 IN core-memory.z80
                    > USED AT LINE 119 IN core-memory.z80
                    > USED AT LINE 146 IN core-memory.z80
                    > USED AT LINE 147 IN core-memory.z80
                    > USED AT LINE 173 IN core-memory.z80
                    > USED AT LINE 176 IN core-memory.z80
                    > USED AT LINE 184 IN core-memory.z80
                    > USED AT LINE 186 IN core-memory.z80
                    > USED AT LINE 83 IN core-stacks.z80
                    > USED AT LINE 90 IN core-stacks.z80
                    > USED AT LINE 8 IN core-utils.z80
                    > USED AT LINE 16 IN core-utils.z80
                    > USED AT LINE 21 IN core-utils.z80
                    > USED AT LINE 31 IN core-utils.z80
                    > USED AT LINE 34 IN core-utils.z80
                    > USED AT LINE 89 IN core-utils.z80
                    > USED AT LINE 96 IN core-utils.z80
                    > USED AT LINE 33 IN tester.z80
                    > USED AT LINE 35 IN tester.z80
                    > USED AT LINE 46 IN tester.z80
                    > USED AT LINE 87 IN tester.z80
DOVAR:              063A DEFINED AT LINE 49
                    > USED AT LINE 150 IN core-compiler.z80
                    > USED AT LINE 41 IN core-does.z80
                    > USED AT LINE 201 IN core-interpret.z80
UP:                 0642 DEFINED AT LINE 49
DOUSE:              064A DEFINED AT LINE 49
                    > USED AT LINE 142 IN core-compiler.z80
                    > USED AT LINE 32
                    > USED AT LINE 32
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 32
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 32
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 32
                    > USED AT LINE 62
DOSTR:              065A DEFINED AT LINE 49
                    > USED AT LINE 217 IN core-interpret.z80
                    > USED AT LINE 219 IN core-interpret.z80
                    > USED AT LINE 137 IN core-io.z80
                    > USED AT LINE 142 IN core-io.z80
EXIT:               0672 DEFINED AT LINE 11
                    > USED AT LINE 80 IN core-alu.z80
                    > USED AT LINE 114 IN core-alu.z80
                    > USED AT LINE 123 IN core-alu.z80
                    > USED AT LINE 245 IN core-alu.z80
                    > USED AT LINE 304 IN core-alu.z80
                    > USED AT LINE 6 IN core-compiler.z80
                    > USED AT LINE 61 IN core-compiler.z80
                    > USED AT LINE 75 IN core-compiler.z80
                    > USED AT LINE 88 IN core-compiler.z80
                    > USED AT LINE 90 IN core-compiler.z80
                    > USED AT LINE 94 IN core-compiler.z80
                    > USED AT LINE 107 IN core-compiler.z80
                    > USED AT LINE 120 IN core-compiler.z80
                    > USED AT LINE 9 IN core-control.z80
                    > USED AT LINE 36 IN core-does.z80
                    > USED AT LINE 38 IN core-format.z80
                    > USED AT LINE 46 IN core-format.z80
                    > USED AT LINE 85 IN core-format.z80
                    > USED AT LINE 116 IN core-interpret.z80
                    > USED AT LINE 229 IN core-interpret.z80
                    > USED AT LINE 233 IN core-interpret.z80
                    > USED AT LINE 250 IN core-interpret.z80
                    > USED AT LINE 258 IN core-interpret.z80
                    > USED AT LINE 67 IN core-io.z80
                    > USED AT LINE 82 IN core-io.z80
                    > USED AT LINE 103 IN core-io.z80
                    > USED AT LINE 115 IN core-io.z80
                    > USED AT LINE 127 IN core-io.z80
                    > USED AT LINE 137 IN core-io.z80
                    > USED AT LINE 168 IN core-io.z80
                    > USED AT LINE 191 IN core-io.z80
                    > USED AT LINE 208 IN core-io.z80
                    > USED AT LINE 49 IN core-kernel.z80
                    > USED AT LINE 104 IN core-kernel.z80
                    > USED AT LINE 135 IN core-memory.z80
                    > USED AT LINE 150 IN core-memory.z80
                    > USED AT LINE 162 IN core-memory.z80
                    > USED AT LINE 193 IN core-memory.z80
                    > USED AT LINE 58 IN core-stacks.z80
                    > USED AT LINE 11 IN core-utils.z80
                    > USED AT LINE 24 IN core-utils.z80
                    > USED AT LINE 45 IN core-utils.z80
                    > USED AT LINE 58 IN core-utils.z80
                    > USED AT LINE 97 IN core-utils.z80
                    > USED AT LINE 100 IN core-utils.z80
                    > USED AT LINE 122 IN core-utils.z80
                    > USED AT LINE 5 IN tester.z80
                    > USED AT LINE 18 IN tester.z80
                    > USED AT LINE 40 IN tester.z80
                    > USED AT LINE 47 IN tester.z80
                    > USED AT LINE 56 IN tester.z80
                    > USED AT LINE 67 IN tester.z80
                    > USED AT LINE 80 IN tester.z80
                    > USED AT LINE 88 IN tester.z80
DONXT:              067E DEFINED AT LINE 11
                    > USED AT LINE 14 IN core-control.z80
                    > USED AT LINE 31 IN core-interpret.z80
                    > USED AT LINE 60 IN core-interpret.z80
                    > USED AT LINE 75 IN core-interpret.z80
                    > USED AT LINE 138 IN core-interpret.z80
                    > USED AT LINE 102 IN core-io.z80
                    > USED AT LINE 114 IN core-io.z80
                    > USED AT LINE 149 IN core-memory.z80
                    > USED AT LINE 161 IN core-memory.z80
                    > USED AT LINE 175 IN core-memory.z80
                    > USED AT LINE 10 IN core-utils.z80
                    > USED AT LINE 23 IN core-utils.z80
                    > USED AT LINE 39 IN core-utils.z80
                    > USED AT LINE 56 IN core-utils.z80
DECHILO:            0693 DEFINED AT LINE 84 IN core-does.z80
                    > USED AT LINE 77 IN core-does.z80
DECLOW:             0695 DEFINED AT LINE 87 IN core-does.z80
                    > USED AT LINE 73 IN core-does.z80
DIGIT:              069E DEFINED AT LINE 49
                    > USED AT LINE 12 IN core-format.z80
EXTRC:              06B8 DEFINED AT LINE 49
BDIGS:              06CA DEFINED AT LINE 11
                    > USED AT LINE 58 IN core-format.z80
                    > USED AT LINE 153 IN core-io.z80
                    > USED AT LINE 160 IN core-io.z80
HOLD:               06D6 DEFINED AT LINE 11
DIG:                06EE DEFINED AT LINE 11
                    > USED AT LINE 34 IN core-format.z80
DIGS:               06FC DEFINED AT LINE 11
                    > USED AT LINE 58 IN core-format.z80
                    > USED AT LINE 160 IN core-io.z80
DIGS1:              0700 DEFINED AT LINE 33 IN core-format.z80
                    > USED AT LINE 36 IN core-format.z80
DIGS2:              070C DEFINED AT LINE 37 IN core-format.z80
                    > USED AT LINE 35 IN core-format.z80
SIGN:               070E DEFINED AT LINE 11
                    > USED AT LINE 59 IN core-format.z80
SIGN1:              071E DEFINED AT LINE 45 IN core-format.z80
EDIGS:              0720 DEFINED AT LINE 11
                    > USED AT LINE 59 IN core-format.z80
STR:                0732 DEFINED AT LINE 49
                    > USED AT LINE 147 IN core-io.z80
                    > USED AT LINE 170 IN core-io.z80
HEX:                0748 DEFINED AT LINE 11
                    > USED AT LINE 19 IN core-interpret.z80
DECIMAL:            0756 DEFINED AT LINE 11
BLANK:              0764 DEFINED AT LINE 11
                    > USED AT LINE 56 IN core-interpret.z80
                    > USED AT LINE 109 IN core-interpret.z80
                    > USED AT LINE 114 IN core-interpret.z80
                    > USED AT LINE 92 IN core-io.z80
                    > USED AT LINE 188 IN core-io.z80
                    > USED AT LINE 206 IN core-io.z80
                    > USED AT LINE 220 IN core-io.z80
                    > USED AT LINE 171 IN core-memory.z80
TCHAR:              076E DEFINED AT LINE 49
TCHA1:              078E DEFINED AT LINE 84 IN core-format.z80
                    > USED AT LINE 82 IN core-format.z80
DIGTQ:              0790 DEFINED AT LINE 49
DGTQ1:              07B6 DEFINED AT LINE 10 IN core-interpret.z80
                    > USED AT LINE 7 IN core-interpret.z80
NUMBQ:              07BE DEFINED AT LINE 49
                    > USED AT LINE 21 IN defaults.z80
NUMQ1:              07EE DEFINED AT LINE 21 IN core-interpret.z80
                    > USED AT LINE 18 IN core-interpret.z80
NUMQ2:              0812 DEFINED AT LINE 26 IN core-interpret.z80
                    > USED AT LINE 31 IN core-interpret.z80
NUMQ3:              0844 DEFINED AT LINE 35 IN core-interpret.z80
                    > USED AT LINE 33 IN core-interpret.z80
NUMQ4:              084A DEFINED AT LINE 38 IN core-interpret.z80
                    > USED AT LINE 28 IN core-interpret.z80
NUMQ5:              0856 DEFINED AT LINE 40 IN core-interpret.z80
                    > USED AT LINE 37 IN core-interpret.z80
NUMQ6:              0858 DEFINED AT LINE 42 IN core-interpret.z80
                    > USED AT LINE 24 IN core-interpret.z80
PARS:               0864 DEFINED AT LINE 49
                    > USED AT LINE 93 IN core-interpret.z80
PARS1:              088A DEFINED AT LINE 55 IN core-interpret.z80
                    > USED AT LINE 60 IN core-interpret.z80
PARS2:              08B0 DEFINED AT LINE 62 IN core-interpret.z80
                    > USED AT LINE 58 IN core-interpret.z80
PARS3:              08B2 DEFINED AT LINE 64 IN core-interpret.z80
                    > USED AT LINE 53 IN core-interpret.z80
PARS4:              08B8 DEFINED AT LINE 67 IN core-interpret.z80
                    > USED AT LINE 75 IN core-interpret.z80
PARS5:              08D0 DEFINED AT LINE 72 IN core-interpret.z80
                    > USED AT LINE 70 IN core-interpret.z80
PARS6:              08E6 DEFINED AT LINE 78 IN core-interpret.z80
                    > USED AT LINE 73 IN core-interpret.z80
PARS7:              08F4 DEFINED AT LINE 81 IN core-interpret.z80
                    > USED AT LINE 77 IN core-interpret.z80
PARS8:              0900 DEFINED AT LINE 84 IN core-interpret.z80
                    > USED AT LINE 51 IN core-interpret.z80
PARSE:              0908 DEFINED AT LINE 11
                    > USED AT LINE 109 IN core-interpret.z80
                    > USED AT LINE 114 IN core-interpret.z80
                    > USED AT LINE 121 IN core-interpret.z80
PAREN:              092A DEFINED AT LINE 11
BKSLA:              0936 DEFINED AT LINE 11
CHAR:               0944 DEFINED AT LINE 11
TOKEN:              0952 DEFINED AT LINE 49
                    > USED AT LINE 4 IN core-compiler.z80
                    > USED AT LINE 126 IN core-compiler.z80
                    > USED AT LINE 140 IN core-compiler.z80
                    > USED AT LINE 148 IN core-compiler.z80
                    > USED AT LINE 265 IN core-interpret.z80
WORDD:              096E DEFINED AT LINE 11
NAMET:              097A DEFINED AT LINE 49
                    > USED AT LINE 162 IN core-interpret.z80
                    > USED AT LINE 80 IN core-utils.z80
SAMEQ:              0986 DEFINED AT LINE 49
SAME1:              0990 DEFINED AT LINE 133 IN core-interpret.z80
                    > USED AT LINE 138 IN core-interpret.z80
SAME2:              09B2 DEFINED AT LINE 138 IN core-interpret.z80
                    > USED AT LINE 132 IN core-interpret.z80
                    > USED AT LINE 136 IN core-interpret.z80
FIND:               09BC DEFINED AT LINE 11
                    > USED AT LINE 174 IN core-interpret.z80
FIND1:              09DA DEFINED AT LINE 147 IN core-interpret.z80
                    > USED AT LINE 159 IN core-interpret.z80
FIND2:              09FE DEFINED AT LINE 153 IN core-interpret.z80
                    > USED AT LINE 150 IN core-interpret.z80
FIND3:              0A06 DEFINED AT LINE 154 IN core-interpret.z80
                    > USED AT LINE 152 IN core-interpret.z80
FIND6:              0A0A DEFINED AT LINE 155 IN core-interpret.z80
                    > USED AT LINE 148 IN core-interpret.z80
FIND4:              0A16 DEFINED AT LINE 157 IN core-interpret.z80
                    > USED AT LINE 154 IN core-interpret.z80
FIND5:              0A22 DEFINED AT LINE 160 IN core-interpret.z80
                    > USED AT LINE 157 IN core-interpret.z80
NAMEQ:              0A34 DEFINED AT LINE 49
                    > USED AT LINE 4 IN core-compiler.z80
                    > USED AT LINE 56 IN core-compiler.z80
                    > USED AT LINE 84 IN core-compiler.z80
                    > USED AT LINE 225 IN core-interpret.z80
NAMQ1:              0A46 DEFINED AT LINE 170 IN core-interpret.z80
                    > USED AT LINE 168 IN core-interpret.z80
NAMQ2:              0A48 DEFINED AT LINE 171 IN core-interpret.z80
                    > USED AT LINE 175 IN core-interpret.z80
NAMQ3:              0A66 DEFINED AT LINE 177 IN core-interpret.z80
                    > USED AT LINE 173 IN core-interpret.z80
CATCH:              0A70 DEFINED AT LINE 11
THROW:              0A96 DEFINED AT LINE 11
                    > USED AT LINE 8 IN core-compiler.z80
                    > USED AT LINE 78 IN core-compiler.z80
                    > USED AT LINE 95 IN core-compiler.z80
                    > USED AT LINE 210 IN core-interpret.z80
                    > USED AT LINE 217 IN core-interpret.z80
                    > USED AT LINE 235 IN core-interpret.z80
NULLS:              0AB4 DEFINED AT LINE 49
                    > USED AT LINE 210 IN core-interpret.z80
ABORT:              0AC2 DEFINED AT LINE 11
ABORQ:              0ACA DEFINED AT LINE 49
                    > USED AT LINE 69 IN core-control.z80
                    > USED AT LINE 37
                    > USED AT LINE 37
ABOR1:              0AD6 DEFINED AT LINE 218 IN core-interpret.z80
                    > USED AT LINE 216 IN core-interpret.z80
INTER:              0ADC DEFINED AT LINE 49
                    > USED AT LINE 20 IN defaults.z80
                    > USED AT LINE 241 IN core-interpret.z80
                    > USED AT LINE 247 IN core-interpret.z80
INTE1:              0B04 DEFINED AT LINE 230 IN core-interpret.z80
                    > USED AT LINE 226 IN core-interpret.z80
INTE2:              0B0E DEFINED AT LINE 234 IN core-interpret.z80
                    > USED AT LINE 232 IN core-interpret.z80
LBRAC:              0B10 DEFINED AT LINE 11
DOTOK:              0B1E DEFINED AT LINE 11
                    > USED AT LINE 12 IN defaults.z80
DOTO1:              0B36 DEFINED AT LINE 250 IN core-interpret.z80
                    > USED AT LINE 248 IN core-interpret.z80
QSTAC:              0B3A DEFINED AT LINE 49
EVAL:               0B52 DEFINED AT LINE 11
EVAL1:              0B56 DEFINED AT LINE 264 IN core-interpret.z80
                    > USED AT LINE 268 IN core-interpret.z80
EVAL2:              0B6A DEFINED AT LINE 269 IN core-interpret.z80
                    > USED AT LINE 266 IN core-interpret.z80
PCSTO:              0B72 DEFINED AT LINE 11
PCAT:               0B7C DEFINED AT LINE 11
STOIO:              0B88 DEFINED AT LINE 11
                    > USED AT LINE 19 IN core-kernel.z80
                    > USED AT LINE 33 IN core-kernel.z80
QRX:                0B8E DEFINED AT LINE 11
                    > USED AT LINE 7 IN defaults.z80
QRX1:               0B99 DEFINED AT LINE 36 IN core-io.z80
                    > USED AT LINE 33 IN core-io.z80
QRX2:               0BA3 DEFINED AT LINE 42 IN core-io.z80
                    > USED AT LINE 35 IN core-io.z80
TXSTO:              0BA6 DEFINED AT LINE 11
                    > USED AT LINE 8 IN defaults.z80
                    > USED AT LINE 11 IN defaults.z80
QKEY:               0BAE DEFINED AT LINE 11
                    > USED AT LINE 62 IN core-io.z80
                    > USED AT LINE 78 IN core-io.z80
KEY:                0BBA DEFINED AT LINE 11
                    > USED AT LINE 80 IN core-io.z80
                    > USED AT LINE 219 IN core-io.z80
                    > USED AT LINE 22 IN core-kernel.z80
                    > USED AT LINE 42 IN core-kernel.z80
KEY1:               0BBE DEFINED AT LINE 61 IN core-io.z80
                    > USED AT LINE 66 IN core-io.z80
KEY2:               0BC6 DEFINED AT LINE 65 IN core-io.z80
EMIT:               0BCC DEFINED AT LINE 11
                    > USED AT LINE 92 IN core-io.z80
                    > USED AT LINE 123 IN core-io.z80
                    > USED AT LINE 23 IN core-kernel.z80
                    > USED AT LINE 43 IN core-kernel.z80
NUFQ:               0BD8 DEFINED AT LINE 11
                    > USED AT LINE 37 IN core-utils.z80
                    > USED AT LINE 120 IN core-utils.z80
NUFQ1:              0BEE DEFINED AT LINE 81 IN core-io.z80
                    > USED AT LINE 79 IN core-io.z80
PACE:               0BF0 DEFINED AT LINE 49
SPACE:              0BFC DEFINED AT LINE 11
                    > USED AT LINE 100 IN core-io.z80
                    > USED AT LINE 161 IN core-io.z80
                    > USED AT LINE 170 IN core-io.z80
                    > USED AT LINE 17 IN core-utils.z80
                    > USED AT LINE 36 IN core-utils.z80
                    > USED AT LINE 36 IN core-utils.z80
                    > USED AT LINE 115 IN core-utils.z80
SPACS:              0C06 DEFINED AT LINE 11
                    > USED AT LINE 148 IN core-io.z80
                    > USED AT LINE 155 IN core-io.z80
CHAR1:              0C16 DEFINED AT LINE 99 IN core-io.z80
                    > USED AT LINE 102 IN core-io.z80
CHAR2:              0C18 DEFINED AT LINE 101 IN core-io.z80
                    > USED AT LINE 98 IN core-io.z80
TYPEE:              0C1E DEFINED AT LINE 11
                    > USED AT LINE 148 IN core-io.z80
                    > USED AT LINE 155 IN core-io.z80
                    > USED AT LINE 161 IN core-io.z80
TYPE1:              0C28 DEFINED AT LINE 110 IN core-io.z80
                    > USED AT LINE 114 IN core-io.z80
TYPE2:              0C34 DEFINED AT LINE 113 IN core-io.z80
                    > USED AT LINE 109 IN core-io.z80
TYPEZ:              0C3C DEFINED AT LINE 11
                    > USED AT LINE 21 IN core-kernel.z80
                    > USED AT LINE 25 IN core-kernel.z80
                    > USED AT LINE 48 IN core-kernel.z80
                    > USED AT LINE 104 IN core-kernel.z80
TYPEZ1:             0C40 DEFINED AT LINE 120 IN core-io.z80
                    > USED AT LINE 125 IN core-io.z80
TYPEZ2:             0C56 DEFINED AT LINE 126 IN core-io.z80
CR:                 0C5A DEFINED AT LINE 11
                    > USED AT LINE 250 IN core-interpret.z80
                    > USED AT LINE 33 IN core-kernel.z80
                    > USED AT LINE 40 IN core-kernel.z80
                    > USED AT LINE 49 IN core-kernel.z80
                    > USED AT LINE 34 IN core-utils.z80
                    > USED AT LINE 50 IN core-utils.z80
                    > USED AT LINE 107 IN core-utils.z80
STRQP:              0C6C DEFINED AT LINE 49
                    > USED AT LINE 37
                    > USED AT LINE 74 IN core-control.z80
DOTQP:              0C74 DEFINED AT LINE 49
                    > USED AT LINE 37
                    > USED AT LINE 79 IN core-control.z80
                    > USED AT LINE 37
                    > USED AT LINE 37
                    > USED AT LINE 37
                    > USED AT LINE 37
DOTR:               0C80 DEFINED AT LINE 11
UDOTR:              0C94 DEFINED AT LINE 11
UDOT:               0CAC DEFINED AT LINE 11
                    > USED AT LINE 168 IN core-io.z80
DOT:                0CBC DEFINED AT LINE 11
                    > USED AT LINE 180 IN core-io.z80
                    > USED AT LINE 4 IN tester.z80
DOT1:               0CD2 DEFINED AT LINE 169 IN core-io.z80
                    > USED AT LINE 167 IN core-io.z80
DOTPR:              0CDA DEFINED AT LINE 11
QUEST:              0CE6 DEFINED AT LINE 11
BKSP:               0CF0 DEFINED AT LINE 11
                    > USED AT LINE 208 IN core-io.z80
BACK1:              0D20 DEFINED AT LINE 190 IN core-io.z80
                    > USED AT LINE 186 IN core-io.z80
TAP:                0D22 DEFINED AT LINE 11
                    > USED AT LINE 206 IN core-io.z80
                    > USED AT LINE 222 IN core-io.z80
KTAP:               0D38 DEFINED AT LINE 11
                    > USED AT LINE 10 IN defaults.z80
KTAP1:              0D58 DEFINED AT LINE 207 IN core-io.z80
                    > USED AT LINE 205 IN core-io.z80
KTAP2:              0D5C DEFINED AT LINE 209 IN core-io.z80
                    > USED AT LINE 203 IN core-io.z80
ACCEP:              0D66 DEFINED AT LINE 11
                    > USED AT LINE 9 IN defaults.z80
ACCP1:              0D70 DEFINED AT LINE 216 IN core-io.z80
                    > USED AT LINE 227 IN core-io.z80
ACCP2:              0D8E DEFINED AT LINE 224 IN core-io.z80
                    > USED AT LINE 221 IN core-io.z80
ACCP3:              0D92 DEFINED AT LINE 226 IN core-io.z80
                    > USED AT LINE 223 IN core-io.z80
ACCP4:              0D96 DEFINED AT LINE 228 IN core-io.z80
                    > USED AT LINE 218 IN core-io.z80
EXPEC:              0D9E DEFINED AT LINE 49
QUERY:              0DAE DEFINED AT LINE 49
CALL_FORTH:         0DCC DEFINED AT LINE 2 IN core-kernel.z80
                    > USED AT LINE 58
RETURN_HERE:        0DD0 DEFINED AT LINE 5 IN core-kernel.z80
                    > USED AT LINE 8 IN core-kernel.z80
TRETURN_HERE:       0DD1 DEFINED AT LINE 7 IN core-kernel.z80
                    > USED AT LINE 3 IN core-kernel.z80
NEXT_STEP:          0DD3 DEFINED AT LINE 10 IN core-kernel.z80
                    > USED AT LINE 54
                    > USED AT LINE 34 IN interrupt.z80
HI2X:               0DDA DEFINED AT LINE 49
HELLO:              0DF2 DEFINED AT LINE 27 IN core-kernel.z80
                    > USED AT LINE 20 IN core-kernel.z80
                    > USED AT LINE 24 IN core-kernel.z80
                    > USED AT LINE 47 IN core-kernel.z80
HI:                 0E02 DEFINED AT LINE 49
                    > USED AT LINE 57
HI1:                0E17 DEFINED AT LINE 41 IN core-kernel.z80
                    > USED AT LINE 46 IN core-kernel.z80
COLD:               0E32 DEFINED AT LINE 11
COLD1:              0E36 DEFINED AT LINE 53 IN core-kernel.z80
                    > USED AT LINE 61 IN core-kernel.z80
PRESE:              0E4C DEFINED AT LINE 11
                    > USED AT LINE 56 IN core-kernel.z80
QUIT:               0E62 DEFINED AT LINE 11
                    > USED AT LINE 26 IN core-kernel.z80
                    > USED AT LINE 60 IN core-kernel.z80
                    > USED AT LINE 9 IN tester.z80
EXECU:              0E64 DEFINED AT LINE 11
                    > USED AT LINE 88 IN core-compiler.z80
                    > USED AT LINE 229 IN core-interpret.z80
                    > USED AT LINE 133 IN core-memory.z80
QBRAN:              0E68 DEFINED AT LINE 49
                    > USED AT LINE 86 IN core-alu.z80
                    > USED AT LINE 95 IN core-alu.z80
                    > USED AT LINE 120 IN core-alu.z80
                    > USED AT LINE 234 IN core-alu.z80
                    > USED AT LINE 238 IN core-alu.z80
                    > USED AT LINE 242 IN core-alu.z80
                    > USED AT LINE 5 IN core-compiler.z80
                    > USED AT LINE 57 IN core-compiler.z80
                    > USED AT LINE 68 IN core-compiler.z80
                    > USED AT LINE 85 IN core-compiler.z80
                    > USED AT LINE 87 IN core-compiler.z80
                    > USED AT LINE 93 IN core-compiler.z80
                    > USED AT LINE 19 IN core-control.z80
                    > USED AT LINE 30 IN core-control.z80
                    > USED AT LINE 35 IN core-format.z80
                    > USED AT LINE 43 IN core-format.z80
                    > USED AT LINE 82 IN core-format.z80
                    > USED AT LINE 7 IN core-interpret.z80
                    > USED AT LINE 18 IN core-interpret.z80
                    > USED AT LINE 24 IN core-interpret.z80
                    > USED AT LINE 28 IN core-interpret.z80
                    > USED AT LINE 33 IN core-interpret.z80
                    > USED AT LINE 51 IN core-interpret.z80
                    > USED AT LINE 53 IN core-interpret.z80
                    > USED AT LINE 58 IN core-interpret.z80
                    > USED AT LINE 70 IN core-interpret.z80
                    > USED AT LINE 73 IN core-interpret.z80
                    > USED AT LINE 136 IN core-interpret.z80
                    > USED AT LINE 148 IN core-interpret.z80
                    > USED AT LINE 150 IN core-interpret.z80
                    > USED AT LINE 157 IN core-interpret.z80
                    > USED AT LINE 168 IN core-interpret.z80
                    > USED AT LINE 173 IN core-interpret.z80
                    > USED AT LINE 175 IN core-interpret.z80
                    > USED AT LINE 216 IN core-interpret.z80
                    > USED AT LINE 226 IN core-interpret.z80
                    > USED AT LINE 232 IN core-interpret.z80
                    > USED AT LINE 248 IN core-interpret.z80
                    > USED AT LINE 266 IN core-interpret.z80
                    > USED AT LINE 63 IN core-io.z80
                    > USED AT LINE 66 IN core-io.z80
                    > USED AT LINE 79 IN core-io.z80
                    > USED AT LINE 122 IN core-io.z80
                    > USED AT LINE 167 IN core-io.z80
                    > USED AT LINE 186 IN core-io.z80
                    > USED AT LINE 203 IN core-io.z80
                    > USED AT LINE 205 IN core-io.z80
                    > USED AT LINE 218 IN core-io.z80
                    > USED AT LINE 221 IN core-io.z80
                    > USED AT LINE 46 IN core-kernel.z80
                    > USED AT LINE 132 IN core-memory.z80
                    > USED AT LINE 172 IN core-memory.z80
                    > USED AT LINE 55 IN core-stacks.z80
                    > USED AT LINE 38 IN core-utils.z80
                    > USED AT LINE 75 IN core-utils.z80
                    > USED AT LINE 79 IN core-utils.z80
                    > USED AT LINE 81 IN core-utils.z80
                    > USED AT LINE 86 IN core-utils.z80
                    > USED AT LINE 95 IN core-utils.z80
                    > USED AT LINE 110 IN core-utils.z80
                    > USED AT LINE 114 IN core-utils.z80
                    > USED AT LINE 121 IN core-utils.z80
                    > USED AT LINE 77 IN tester.z80
BRAN:               0E74 DEFINED AT LINE 49
                    > USED AT LINE 24 IN core-control.z80
                    > USED AT LINE 37 IN core-control.z80
                    > USED AT LINE 36 IN core-format.z80
                    > USED AT LINE 37 IN core-interpret.z80
                    > USED AT LINE 77 IN core-interpret.z80
                    > USED AT LINE 132 IN core-interpret.z80
                    > USED AT LINE 152 IN core-interpret.z80
                    > USED AT LINE 154 IN core-interpret.z80
                    > USED AT LINE 159 IN core-interpret.z80
                    > USED AT LINE 268 IN core-interpret.z80
                    > USED AT LINE 98 IN core-io.z80
                    > USED AT LINE 109 IN core-io.z80
                    > USED AT LINE 125 IN core-io.z80
                    > USED AT LINE 223 IN core-io.z80
                    > USED AT LINE 227 IN core-io.z80
                    > USED AT LINE 61 IN core-kernel.z80
                    > USED AT LINE 86 IN core-kernel.z80
                    > USED AT LINE 142 IN core-memory.z80
                    > USED AT LINE 157 IN core-memory.z80
                    > USED AT LINE 169 IN core-memory.z80
                    > USED AT LINE 5 IN core-utils.z80
                    > USED AT LINE 18 IN core-utils.z80
                    > USED AT LINE 40 IN core-utils.z80
                    > USED AT LINE 52 IN core-utils.z80
                    > USED AT LINE 83 IN core-utils.z80
                    > USED AT LINE 116 IN core-utils.z80
                    > USED AT LINE 37 IN tester.z80
THROWX:             0E7C DEFINED AT LINE 11
                    > USED AT LINE 191 IN core-alu.z80
                    > USED AT LINE 194 IN core-alu.z80
STORE:              0E84 DEFINED AT LINE 11
                    > USED AT LINE 19 IN core-compiler.z80
                    > USED AT LINE 45 IN core-compiler.z80
                    > USED AT LINE 75 IN core-compiler.z80
                    > USED AT LINE 50 IN core-interpret.z80
                    > USED AT LINE 91 IN core-memory.z80
                    > USED AT LINE 97 IN core-memory.z80
AT:                 0E8E DEFINED AT LINE 11
                    > USED AT LINE 50 IN core-compiler.z80
                    > USED AT LINE 73 IN core-compiler.z80
                    > USED AT LINE 86 IN core-compiler.z80
                    > USED AT LINE 101 IN core-compiler.z80
                    > USED AT LINE 134 IN core-compiler.z80
                    > USED AT LINE 47 IN core-does.z80
                    > USED AT LINE 22 IN core-format.z80
                    > USED AT LINE 28 IN core-format.z80
                    > USED AT LINE 16 IN core-interpret.z80
                    > USED AT LINE 68 IN core-interpret.z80
                    > USED AT LINE 69 IN core-interpret.z80
                    > USED AT LINE 92 IN core-interpret.z80
                    > USED AT LINE 104 IN core-interpret.z80
                    > USED AT LINE 115 IN core-interpret.z80
                    > USED AT LINE 146 IN core-interpret.z80
                    > USED AT LINE 147 IN core-interpret.z80
                    > USED AT LINE 149 IN core-interpret.z80
                    > USED AT LINE 172 IN core-interpret.z80
                    > USED AT LINE 192 IN core-interpret.z80
                    > USED AT LINE 227 IN core-interpret.z80
                    > USED AT LINE 56 IN core-io.z80
                    > USED AT LINE 72 IN core-io.z80
                    > USED AT LINE 166 IN core-io.z80
                    > USED AT LINE 180 IN core-io.z80
                    > USED AT LINE 66 IN core-kernel.z80
                    > USED AT LINE 103 IN core-memory.z80
                    > USED AT LINE 114 IN core-memory.z80
                    > USED AT LINE 131 IN core-memory.z80
                    > USED AT LINE 30 IN core-utils.z80
                    > USED AT LINE 74 IN core-utils.z80
                    > USED AT LINE 78 IN core-utils.z80
                    > USED AT LINE 118 IN core-utils.z80
                    > USED AT LINE 54 IN tester.z80
CSTOR:              0E96 DEFINED AT LINE 11
                    > USED AT LINE 197 IN core-io.z80
                    > USED AT LINE 145 IN core-memory.z80
                    > USED AT LINE 159 IN core-memory.z80
                    > USED AT LINE 187 IN core-memory.z80
CAT:                0E9E DEFINED AT LINE 11
                    > USED AT LINE 67 IN core-compiler.z80
                    > USED AT LINE 17 IN core-interpret.z80
                    > USED AT LINE 22 IN core-interpret.z80
                    > USED AT LINE 111 IN core-io.z80
                    > USED AT LINE 121 IN core-io.z80
                    > USED AT LINE 109 IN core-memory.z80
                    > USED AT LINE 7 IN core-utils.z80
                    > USED AT LINE 20 IN core-utils.z80
RAT:                0EA6 DEFINED AT LINE 11
                    > USED AT LINE 239 IN core-alu.z80
                    > USED AT LINE 52 IN core-does.z80
                    > USED AT LINE 23 IN core-interpret.z80
                    > USED AT LINE 32 IN core-interpret.z80
                    > USED AT LINE 133 IN core-interpret.z80
                    > USED AT LINE 134 IN core-interpret.z80
                    > USED AT LINE 145 IN core-memory.z80
                    > USED AT LINE 54 IN core-utils.z80
RPAT:               0EB0 DEFINED AT LINE 11
                    > USED AT LINE 185 IN core-interpret.z80
RPSTO:              0EB8 DEFINED AT LINE 11
SPAT:               0EC0 DEFINED AT LINE 11
                    > USED AT LINE 184 IN core-interpret.z80
                    > USED AT LINE 84 IN core-stacks.z80
                    > USED AT LINE 89 IN core-stacks.z80
SPSTO:              0ECA DEFINED AT LINE 11
PSTOR:              0ED2 DEFINED AT LINE 11
                    > USED AT LINE 13 IN core-compiler.z80
DSTOR:              0EE4 DEFINED AT LINE 11
DAT:                0EF4 DEFINED AT LINE 11
COUNT:              0F04 DEFINED AT LINE 11
                    > USED AT LINE 44 IN core-compiler.z80
                    > USED AT LINE 59 IN core-compiler.z80
                    > USED AT LINE 142 IN core-io.z80
                    > USED AT LINE 96 IN core-utils.z80
HERE:               0F16 DEFINED AT LINE 11
                    > USED AT LINE 18 IN core-compiler.z80
                    > USED AT LINE 71 IN core-compiler.z80
                    > USED AT LINE 9 IN core-control.z80
                    > USED AT LINE 43 IN core-control.z80
                    > USED AT LINE 48 IN core-control.z80
                    > USED AT LINE 121 IN core-interpret.z80
                    > USED AT LINE 119 IN core-memory.z80
PAD:                0F20 DEFINED AT LINE 11
                    > USED AT LINE 17 IN core-format.z80
                    > USED AT LINE 52 IN core-format.z80
TIB:                0F2E DEFINED AT LINE 11
                    > USED AT LINE 91 IN core-interpret.z80
                    > USED AT LINE 239 IN core-io.z80
ATEXE:              0F3A DEFINED AT LINE 49
                    > USED AT LINE 92 IN core-compiler.z80
                    > USED AT LINE 231 IN core-interpret.z80
                    > USED AT LINE 267 IN core-interpret.z80
                    > USED AT LINE 225 IN core-io.z80
                    > USED AT LINE 234 IN core-io.z80
EXE1:               0F48 DEFINED AT LINE 134 IN core-memory.z80
                    > USED AT LINE 132 IN core-memory.z80
CMOVE:              0F4A DEFINED AT LINE 11
                    > USED AT LINE 188 IN core-memory.z80
CMOV1:              0F54 DEFINED AT LINE 143 IN core-memory.z80
                    > USED AT LINE 149 IN core-memory.z80
CMOV2:              0F6C DEFINED AT LINE 148 IN core-memory.z80
                    > USED AT LINE 142 IN core-memory.z80
FILL:               0F74 DEFINED AT LINE 11
FILL1:              0F82 DEFINED AT LINE 158 IN core-memory.z80
                    > USED AT LINE 161 IN core-memory.z80
FILL2:              0F8C DEFINED AT LINE 160 IN core-memory.z80
                    > USED AT LINE 157 IN core-memory.z80
DTRAI:              0F94 DEFINED AT LINE 11
DTRA1:              0F9E DEFINED AT LINE 170 IN core-memory.z80
                    > USED AT LINE 175 IN core-memory.z80
DTRA2:              0FB8 DEFINED AT LINE 174 IN core-memory.z80
                    > USED AT LINE 169 IN core-memory.z80
                    > USED AT LINE 172 IN core-memory.z80
PACKS:              0FC2 DEFINED AT LINE 11
                    > USED AT LINE 116 IN core-interpret.z80
ALGND:              0FFC DEFINED AT LINE 11
                    > USED AT LINE 71 IN core-compiler.z80
                    > USED AT LINE 53 IN core-does.z80
                    > USED AT LINE 182 IN core-memory.z80
ERR_DIVZERO:        1002 DEFINED AT LINE 3 IN core-messages.z80
                    > USED AT LINE 190 IN core-alu.z80
ERR_OUTOFRANGE:     100E DEFINED AT LINE 4 IN core-messages.z80
                    > USED AT LINE 193 IN core-alu.z80
TOR:                101C DEFINED AT LINE 11
                    > USED AT LINE 65 IN core-alu.z80
                    > USED AT LINE 235 IN core-alu.z80
                    > USED AT LINE 237 IN core-alu.z80
                    > USED AT LINE 309 IN core-alu.z80
                    > USED AT LINE 32 IN core-compiler.z80
                    > USED AT LINE 4 IN core-control.z80
                    > USED AT LINE 53 IN core-does.z80
                    > USED AT LINE 57 IN core-format.z80
                    > USED AT LINE 5 IN core-interpret.z80
                    > USED AT LINE 27 IN core-interpret.z80
                    > USED AT LINE 54 IN core-interpret.z80
                    > USED AT LINE 66 IN core-interpret.z80
                    > USED AT LINE 76 IN core-interpret.z80
                    > USED AT LINE 91 IN core-interpret.z80
                    > USED AT LINE 131 IN core-interpret.z80
                    > USED AT LINE 170 IN core-interpret.z80
                    > USED AT LINE 184 IN core-interpret.z80
                    > USED AT LINE 108 IN core-io.z80
                    > USED AT LINE 147 IN core-io.z80
                    > USED AT LINE 153 IN core-io.z80
                    > USED AT LINE 185 IN core-io.z80
                    > USED AT LINE 141 IN core-memory.z80
                    > USED AT LINE 144 IN core-memory.z80
                    > USED AT LINE 156 IN core-memory.z80
                    > USED AT LINE 168 IN core-memory.z80
                    > USED AT LINE 63 IN core-stacks.z80
                    > USED AT LINE 78 IN core-stacks.z80
                    > USED AT LINE 4 IN core-utils.z80
                    > USED AT LINE 17 IN core-utils.z80
                    > USED AT LINE 32 IN core-utils.z80
                    > USED AT LINE 51 IN core-utils.z80
RFROM:              102A DEFINED AT LINE 11
                    > USED AT LINE 67 IN core-alu.z80
                    > USED AT LINE 129 IN core-alu.z80
                    > USED AT LINE 241 IN core-alu.z80
                    > USED AT LINE 301 IN core-alu.z80
                    > USED AT LINE 31 IN core-compiler.z80
                    > USED AT LINE 36 IN core-does.z80
                    > USED AT LINE 47 IN core-does.z80
                    > USED AT LINE 52 IN core-does.z80
                    > USED AT LINE 11 IN core-interpret.z80
                    > USED AT LINE 39 IN core-interpret.z80
                    > USED AT LINE 39 IN core-interpret.z80
                    > USED AT LINE 43 IN core-interpret.z80
                    > USED AT LINE 44 IN core-interpret.z80
                    > USED AT LINE 61 IN core-interpret.z80
                    > USED AT LINE 63 IN core-interpret.z80
                    > USED AT LINE 79 IN core-interpret.z80
                    > USED AT LINE 83 IN core-interpret.z80
                    > USED AT LINE 83 IN core-interpret.z80
                    > USED AT LINE 85 IN core-interpret.z80
                    > USED AT LINE 93 IN core-interpret.z80
                    > USED AT LINE 137 IN core-interpret.z80
                    > USED AT LINE 155 IN core-interpret.z80
                    > USED AT LINE 160 IN core-interpret.z80
                    > USED AT LINE 171 IN core-interpret.z80
                    > USED AT LINE 176 IN core-interpret.z80
                    > USED AT LINE 177 IN core-interpret.z80
                    > USED AT LINE 186 IN core-interpret.z80
                    > USED AT LINE 187 IN core-interpret.z80
                    > USED AT LINE 193 IN core-interpret.z80
                    > USED AT LINE 194 IN core-interpret.z80
                    > USED AT LINE 195 IN core-interpret.z80
                    > USED AT LINE 154 IN core-io.z80
                    > USED AT LINE 147 IN core-memory.z80
                    > USED AT LINE 173 IN core-memory.z80
                    > USED AT LINE 42 IN core-utils.z80
                    > USED AT LINE 44 IN core-utils.z80
                    > USED AT LINE 36 IN tester.z80
                    > USED AT LINE 39 IN tester.z80
DUPP:               1038 DEFINED AT LINE 11
                    > USED AT LINE 77 IN core-alu.z80
                    > USED AT LINE 233 IN core-alu.z80
                    > USED AT LINE 237 IN core-alu.z80
                    > USED AT LINE 18 IN core-compiler.z80
                    > USED AT LINE 31 IN core-compiler.z80
                    > USED AT LINE 56 IN core-compiler.z80
                    > USED AT LINE 67 IN core-compiler.z80
                    > USED AT LINE 70 IN core-compiler.z80
                    > USED AT LINE 74 IN core-compiler.z80
                    > USED AT LINE 23 IN core-format.z80
                    > USED AT LINE 34 IN core-format.z80
                    > USED AT LINE 57 IN core-format.z80
                    > USED AT LINE 9 IN core-interpret.z80
                    > USED AT LINE 11 IN core-interpret.z80
                    > USED AT LINE 27 IN core-interpret.z80
                    > USED AT LINE 41 IN core-interpret.z80
                    > USED AT LINE 76 IN core-interpret.z80
                    > USED AT LINE 144 IN core-interpret.z80
                    > USED AT LINE 146 IN core-interpret.z80
                    > USED AT LINE 147 IN core-interpret.z80
                    > USED AT LINE 149 IN core-interpret.z80
                    > USED AT LINE 162 IN core-interpret.z80
                    > USED AT LINE 167 IN core-interpret.z80
                    > USED AT LINE 265 IN core-interpret.z80
                    > USED AT LINE 63 IN core-io.z80
                    > USED AT LINE 78 IN core-io.z80
                    > USED AT LINE 111 IN core-io.z80
                    > USED AT LINE 121 IN core-io.z80
                    > USED AT LINE 122 IN core-io.z80
                    > USED AT LINE 196 IN core-io.z80
                    > USED AT LINE 202 IN core-io.z80
                    > USED AT LINE 219 IN core-io.z80
                    > USED AT LINE 43 IN core-kernel.z80
                    > USED AT LINE 102 IN core-memory.z80
                    > USED AT LINE 108 IN core-memory.z80
                    > USED AT LINE 144 IN core-memory.z80
                    > USED AT LINE 182 IN core-memory.z80
                    > USED AT LINE 183 IN core-memory.z80
                    > USED AT LINE 55 IN core-stacks.z80
                    > USED AT LINE 56 IN core-stacks.z80
                    > USED AT LINE 7 IN core-utils.z80
                    > USED AT LINE 20 IN core-utils.z80
                    > USED AT LINE 78 IN core-utils.z80
                    > USED AT LINE 109 IN core-utils.z80
                    > USED AT LINE 118 IN core-utils.z80
                    > USED AT LINE 35 IN tester.z80
DROP:               103C DEFINED AT LINE 11
                    > USED AT LINE 50 IN core-alu.z80
                    > USED AT LINE 96 IN core-alu.z80
                    > USED AT LINE 104 IN core-alu.z80
                    > USED AT LINE 114 IN core-alu.z80
                    > USED AT LINE 123 IN core-alu.z80
                    > USED AT LINE 148 IN core-alu.z80
                    > USED AT LINE 255 IN core-alu.z80
                    > USED AT LINE 295 IN core-alu.z80
                    > USED AT LINE 61 IN core-compiler.z80
                    > USED AT LINE 54 IN core-control.z80
                    > USED AT LINE 51 IN core-format.z80
                    > USED AT LINE 83 IN core-format.z80
                    > USED AT LINE 61 IN core-interpret.z80
                    > USED AT LINE 79 IN core-interpret.z80
                    > USED AT LINE 137 IN core-interpret.z80
                    > USED AT LINE 155 IN core-interpret.z80
                    > USED AT LINE 160 IN core-interpret.z80
                    > USED AT LINE 176 IN core-interpret.z80
                    > USED AT LINE 177 IN core-interpret.z80
                    > USED AT LINE 187 IN core-interpret.z80
                    > USED AT LINE 195 IN core-interpret.z80
                    > USED AT LINE 219 IN core-interpret.z80
                    > USED AT LINE 270 IN core-interpret.z80
                    > USED AT LINE 115 IN core-io.z80
                    > USED AT LINE 127 IN core-io.z80
                    > USED AT LINE 210 IN core-io.z80
                    > USED AT LINE 229 IN core-io.z80
                    > USED AT LINE 240 IN core-io.z80
                    > USED AT LINE 68 IN core-stacks.z80
                    > USED AT LINE 68 IN core-stacks.z80
                    > USED AT LINE 11 IN core-utils.z80
                    > USED AT LINE 42 IN core-utils.z80
                    > USED AT LINE 44 IN core-utils.z80
                    > USED AT LINE 85 IN core-utils.z80
                    > USED AT LINE 87 IN core-utils.z80
                    > USED AT LINE 89 IN core-utils.z80
                    > USED AT LINE 122 IN core-utils.z80
                    > USED AT LINE 39 IN tester.z80
SWAP:               1040 DEFINED AT LINE 11
                    > USED AT LINE 96 IN core-alu.z80
                    > USED AT LINE 112 IN core-alu.z80
                    > USED AT LINE 119 IN core-alu.z80
                    > USED AT LINE 121 IN core-alu.z80
                    > USED AT LINE 148 IN core-alu.z80
                    > USED AT LINE 243 IN core-alu.z80
                    > USED AT LINE 260 IN core-alu.z80
                    > USED AT LINE 314 IN core-alu.z80
                    > USED AT LINE 335 IN core-alu.z80
                    > USED AT LINE 48 IN core-control.z80
                    > USED AT LINE 59 IN core-control.z80
                    > USED AT LINE 64 IN core-control.z80
                    > USED AT LINE 12 IN core-format.z80
                    > USED AT LINE 19 IN core-interpret.z80
                    > USED AT LINE 20 IN core-interpret.z80
                    > USED AT LINE 23 IN core-interpret.z80
                    > USED AT LINE 29 IN core-interpret.z80
                    > USED AT LINE 32 IN core-interpret.z80
                    > USED AT LINE 36 IN core-interpret.z80
                    > USED AT LINE 65 IN core-interpret.z80
                    > USED AT LINE 144 IN core-interpret.z80
                    > USED AT LINE 156 IN core-interpret.z80
                    > USED AT LINE 194 IN core-interpret.z80
                    > USED AT LINE 210 IN core-io.z80
                    > USED AT LINE 90 IN core-memory.z80
                    > USED AT LINE 91 IN core-memory.z80
                    > USED AT LINE 96 IN core-memory.z80
                    > USED AT LINE 103 IN core-memory.z80
                    > USED AT LINE 109 IN core-memory.z80
                    > USED AT LINE 156 IN core-memory.z80
                    > USED AT LINE 188 IN core-memory.z80
                    > USED AT LINE 63 IN core-stacks.z80
                    > USED AT LINE 85 IN core-utils.z80
                    > USED AT LINE 87 IN core-utils.z80
                    > USED AT LINE 17 IN tester.z80
                    > USED AT LINE 36 IN tester.z80
OVER:               1048 DEFINED AT LINE 11
                    > USED AT LINE 128 IN core-alu.z80
                    > USED AT LINE 250 IN core-alu.z80
                    > USED AT LINE 59 IN core-compiler.z80
                    > USED AT LINE 52 IN core-format.z80
                    > USED AT LINE 17 IN core-interpret.z80
                    > USED AT LINE 22 IN core-interpret.z80
                    > USED AT LINE 56 IN core-interpret.z80
                    > USED AT LINE 65 IN core-interpret.z80
                    > USED AT LINE 82 IN core-interpret.z80
                    > USED AT LINE 85 IN core-interpret.z80
                    > USED AT LINE 133 IN core-interpret.z80
                    > USED AT LINE 134 IN core-interpret.z80
                    > USED AT LINE 154 IN core-io.z80
                    > USED AT LINE 185 IN core-io.z80
                    > USED AT LINE 197 IN core-io.z80
                    > USED AT LINE 215 IN core-io.z80
                    > USED AT LINE 229 IN core-io.z80
                    > USED AT LINE 90 IN core-memory.z80
                    > USED AT LINE 96 IN core-memory.z80
                    > USED AT LINE 171 IN core-memory.z80
                    > USED AT LINE 183 IN core-memory.z80
                    > USED AT LINE 185 IN core-memory.z80
                    > USED AT LINE 73 IN core-stacks.z80
                    > USED AT LINE 73 IN core-stacks.z80
                    > USED AT LINE 16 IN core-utils.z80
QDUP:               1050 DEFINED AT LINE 11
                    > USED AT LINE 84 IN core-compiler.z80
                    > USED AT LINE 135 IN core-interpret.z80
                    > USED AT LINE 172 IN core-interpret.z80
                    > USED AT LINE 174 IN core-interpret.z80
                    > USED AT LINE 225 IN core-interpret.z80
                    > USED AT LINE 131 IN core-memory.z80
                    > USED AT LINE 94 IN core-utils.z80
                    > USED AT LINE 113 IN core-utils.z80
QDUP1:              105C DEFINED AT LINE 57 IN core-stacks.z80
ROT:                105E DEFINED AT LINE 11
                    > USED AT LINE 78 IN core-stacks.z80
                    > USED AT LINE 35 IN core-utils.z80
                    > USED AT LINE 35 IN core-utils.z80
DDROP:              106C DEFINED AT LINE 11
                    > USED AT LINE 43 IN core-interpret.z80
                    > USED AT LINE 80 IN core-io.z80
                    > USED AT LINE 150 IN core-memory.z80
                    > USED AT LINE 162 IN core-memory.z80
DDUP:               1076 DEFINED AT LINE 11
                    > USED AT LINE 94 IN core-alu.z80
                    > USED AT LINE 103 IN core-alu.z80
                    > USED AT LINE 111 IN core-alu.z80
                    > USED AT LINE 119 IN core-alu.z80
                    > USED AT LINE 300 IN core-alu.z80
                    > USED AT LINE 217 IN core-io.z80
                    > USED AT LINE 159 IN core-memory.z80
                    > USED AT LINE 187 IN core-memory.z80
                    > USED AT LINE 76 IN core-utils.z80
                    > USED AT LINE 80 IN core-utils.z80
TWOSWAP:            1080 DEFINED AT LINE 11
PICK:               108E DEFINED AT LINE 11
                    > USED AT LINE 54 IN core-utils.z80
DEPTH:              10A2 DEFINED AT LINE 11
                    > USED AT LINE 256 IN core-interpret.z80
                    > USED AT LINE 50 IN core-utils.z80
                    > USED AT LINE 55 IN tester.z80
                    > USED AT LINE 64 IN tester.z80
                    > USED AT LINE 66 IN tester.z80
                    > USED AT LINE 75 IN tester.z80
SZERO:              10B8 DEFINED AT LINE 11
                    > USED AT LINE 66 IN core-kernel.z80
                    > USED AT LINE 89 IN core-stacks.z80
RZERO:              10C0 DEFINED AT LINE 11
TQKEY:              10C8 DEFINED AT LINE 49
                    > USED AT LINE 56 IN core-io.z80
TEMIT:              10D0 DEFINED AT LINE 49
                    > USED AT LINE 72 IN core-io.z80
TEXPE:              10D8 DEFINED AT LINE 49
                    > USED AT LINE 234 IN core-io.z80
TTAP:               10E0 DEFINED AT LINE 49
                    > USED AT LINE 225 IN core-io.z80
TECHO:              10E8 DEFINED AT LINE 49
                    > USED AT LINE 188 IN core-io.z80
                    > USED AT LINE 196 IN core-io.z80
TPROM:              10F0 DEFINED AT LINE 49
                    > USED AT LINE 270 IN core-interpret.z80
BASE:               10F8 DEFINED AT LINE 11
                    > USED AT LINE 28 IN core-format.z80
                    > USED AT LINE 16 IN core-interpret.z80
                    > USED AT LINE 29 IN core-interpret.z80
                    > USED AT LINE 44 IN core-interpret.z80
                    > USED AT LINE 166 IN core-io.z80
                    > USED AT LINE 30 IN core-utils.z80
TEMP:               1100 DEFINED AT LINE 49
                    > USED AT LINE 50 IN core-interpret.z80
                    > USED AT LINE 68 IN core-interpret.z80
                    > USED AT LINE 69 IN core-interpret.z80
                    > USED AT LINE 153 IN core-interpret.z80
SPAN:               1108 DEFINED AT LINE 49
INN:                1110 DEFINED AT LINE 11
NTIB:               1118 DEFINED AT LINE 49
                    > USED AT LINE 92 IN core-interpret.z80
                    > USED AT LINE 104 IN core-interpret.z80
                    > USED AT LINE 125 IN core-memory.z80
CSP:                1120 DEFINED AT LINE 49
TEVAL:              1128 DEFINED AT LINE 49
                    > USED AT LINE 267 IN core-interpret.z80
TNUMB:              1130 DEFINED AT LINE 49
                    > USED AT LINE 92 IN core-compiler.z80
                    > USED AT LINE 231 IN core-interpret.z80
HLD:                1138 DEFINED AT LINE 49
                    > USED AT LINE 17 IN core-format.z80
                    > USED AT LINE 22 IN core-format.z80
                    > USED AT LINE 23 IN core-format.z80
                    > USED AT LINE 51 IN core-format.z80
HANDL:              1140 DEFINED AT LINE 49
                    > USED AT LINE 185 IN core-interpret.z80
                    > USED AT LINE 186 IN core-interpret.z80
                    > USED AT LINE 192 IN core-interpret.z80
                    > USED AT LINE 193 IN core-interpret.z80
CNTXT:              1148 DEFINED AT LINE 49
                    > USED AT LINE 167 IN core-interpret.z80
CRRNT:              1150 DEFINED AT LINE 49
                    > USED AT LINE 73 IN core-compiler.z80
                    > USED AT LINE 72 IN core-utils.z80
CP:                 1158 DEFINED AT LINE 49
                    > USED AT LINE 13 IN core-compiler.z80
                    > USED AT LINE 19 IN core-compiler.z80
                    > USED AT LINE 45 IN core-compiler.z80
                    > USED AT LINE 114 IN core-memory.z80
NP:                 1160 DEFINED AT LINE 49
                    > USED AT LINE 115 IN core-interpret.z80
LAST:               1168 DEFINED AT LINE 11
                    > USED AT LINE 50 IN core-compiler.z80
                    > USED AT LINE 70 IN core-compiler.z80
                    > USED AT LINE 101 IN core-compiler.z80
                    > USED AT LINE 134 IN core-compiler.z80
VFRTH:              1170 DEFINED AT LINE 49
UTYPE:              1178 DEFINED AT LINE 11
                    > USED AT LINE 97 IN core-utils.z80
UTYP1:              1182 DEFINED AT LINE 6 IN core-utils.z80
                    > USED AT LINE 10 IN core-utils.z80
UTYP2:              1190 DEFINED AT LINE 9 IN core-utils.z80
                    > USED AT LINE 5 IN core-utils.z80
DMP:                1198 DEFINED AT LINE 49
PDUM1:              11AC DEFINED AT LINE 19 IN core-utils.z80
                    > USED AT LINE 23 IN core-utils.z80
PDUM2:              11BC DEFINED AT LINE 22 IN core-utils.z80
                    > USED AT LINE 18 IN core-utils.z80
DUMP:               11C2 DEFINED AT LINE 11
DUMP1:              11D6 DEFINED AT LINE 33 IN core-utils.z80
                    > USED AT LINE 39 IN core-utils.z80
DUMP2:              11FA DEFINED AT LINE 41 IN core-utils.z80
                    > USED AT LINE 38 IN core-utils.z80
DUMP3:              11FE DEFINED AT LINE 43 IN core-utils.z80
                    > USED AT LINE 40 IN core-utils.z80
DOTS:               1208 DEFINED AT LINE 11
DOTS1:              1216 DEFINED AT LINE 53 IN core-utils.z80
                    > USED AT LINE 56 IN core-utils.z80
DOTS2:              121C DEFINED AT LINE 55 IN core-utils.z80
                    > USED AT LINE 52 IN core-utils.z80
TNAME:              122A DEFINED AT LINE 11
                    > USED AT LINE 111 IN core-utils.z80
TNAM1:              1230 DEFINED AT LINE 73 IN core-utils.z80
                    > USED AT LINE 86 IN core-utils.z80
TNAM2:              123C DEFINED AT LINE 77 IN core-utils.z80
                    > USED AT LINE 83 IN core-utils.z80
TNAM3:              1254 DEFINED AT LINE 84 IN core-utils.z80
                    > USED AT LINE 79 IN core-utils.z80
                    > USED AT LINE 81 IN core-utils.z80
TNAM4:              1268 DEFINED AT LINE 88 IN core-utils.z80
                    > USED AT LINE 75 IN core-utils.z80
DOTID:              1270 DEFINED AT LINE 11
                    > USED AT LINE 115 IN core-utils.z80
DOTI1:              1286 DEFINED AT LINE 98 IN core-utils.z80
                    > USED AT LINE 95 IN core-utils.z80
SEE:                1294 DEFINED AT LINE 11
SEE1:               129E DEFINED AT LINE 108 IN core-utils.z80
                    > USED AT LINE 121 IN core-utils.z80
SEE2:               12AC DEFINED AT LINE 112 IN core-utils.z80
                    > USED AT LINE 110 IN core-utils.z80
SEE3:               12BA DEFINED AT LINE 117 IN core-utils.z80
                    > USED AT LINE 114 IN core-utils.z80
SEE4:               12C0 DEFINED AT LINE 119 IN core-utils.z80
                    > USED AT LINE 116 IN core-utils.z80
TESDOT:             12CA DEFINED AT LINE 11
TESHALT:            12D2 DEFINED AT LINE 49
                    > USED AT LINE 78 IN tester.z80
TESHASH:            12D8 DEFINED AT LINE 49
TESHASHN:           12E4 DEFINED AT LINE 49
                    > USED AT LINE 65 IN tester.z80
                    > USED AT LINE 76 IN tester.z80
TESHASHN1:          12EE DEFINED AT LINE 34 IN tester.z80
TESHASHN2:          1308 DEFINED AT LINE 38 IN tester.z80
TESSTRT:            130E DEFINED AT LINE 11
TESLBR:             131C DEFINED AT LINE 11
TESRBR:             1336 DEFINED AT LINE 11
TESEQ:              134C DEFINED AT LINE 11
TESEQ1:             1362 DEFINED AT LINE 79 IN tester.z80
TESEND:             1364 DEFINED AT LINE 11
LASTN:              13CA DEFINED AT LINE 88
                    > USED AT LINE 30 IN defaults.z80
                    > USED AT LINE 31 IN defaults.z80
SPP:                2200 DEFINED AT LINE 3 IN variables.z80
                    > USED AT LINE 45
                    > USED AT LINE 5 IN defaults.z80
TIBB:               2200 DEFINED AT LINE 4 IN variables.z80
                    > USED AT LINE 18 IN defaults.z80
                    > USED AT LINE 67 IN core-kernel.z80
RPP:                2400 DEFINED AT LINE 6 IN variables.z80
                    > USED AT LINE 53
                    > USED AT LINE 6 IN defaults.z80
SERBUF:             2400 DEFINED AT LINE 9 IN variables.z80
                    > USED AT LINE 19 IN interrupt.z80
                    > USED AT LINE 21 IN interrupt.z80
                    > USED AT LINE 6 IN serial.z80
                    > USED AT LINE 21 IN serial.z80
                    > USED AT LINE 23 IN serial.z80
SERINPTR:           243F DEFINED AT LINE 10 IN variables.z80
                    > USED AT LINE 16 IN interrupt.z80
                    > USED AT LINE 22 IN interrupt.z80
                    > USED AT LINE 7 IN serial.z80
SERRDPTR:           2441 DEFINED AT LINE 11 IN variables.z80
                    > USED AT LINE 8 IN serial.z80
                    > USED AT LINE 18 IN serial.z80
                    > USED AT LINE 26 IN serial.z80
SERBUFUSED:         2443 DEFINED AT LINE 12 IN variables.z80
                    > USED AT LINE 10 IN interrupt.z80
                    > USED AT LINE 25 IN interrupt.z80
                    > USED AT LINE 27 IN interrupt.z80
                    > USED AT LINE 10 IN serial.z80
                    > USED AT LINE 27 IN serial.z80
                    > USED AT LINE 29 IN serial.z80
                    > USED AT LINE 51 IN serial.z80
UPP:                2445 DEFINED AT LINE 14 IN variables.z80
                    > USED AT LINE 49
                    > USED AT LINE 42 IN core-does.z80
VARSZERO:           2445 DEFINED AT LINE 16 IN variables.z80
VARRZERO:           2447 DEFINED AT LINE 17 IN variables.z80
VARTQKEY:           2449 DEFINED AT LINE 18 IN variables.z80
VARTEMIT:           244B DEFINED AT LINE 19 IN variables.z80
VARTEXPE:           244D DEFINED AT LINE 20 IN variables.z80
VARTTAP:            244F DEFINED AT LINE 21 IN variables.z80
VARTECHO:           2451 DEFINED AT LINE 22 IN variables.z80
VARTPROM:           2453 DEFINED AT LINE 23 IN variables.z80
VARBASE:            2455 DEFINED AT LINE 24 IN variables.z80
VARTEMP:            2457 DEFINED AT LINE 25 IN variables.z80
VARSPAN:            2459 DEFINED AT LINE 26 IN variables.z80
VARINN:             245B DEFINED AT LINE 27 IN variables.z80
VARNTIB:            245D DEFINED AT LINE 28 IN variables.z80
VARTIB:             245F DEFINED AT LINE 29 IN variables.z80
VARCSP:             2461 DEFINED AT LINE 30 IN variables.z80
VARTEVAL:           2463 DEFINED AT LINE 31 IN variables.z80
VARTNUMB:           2465 DEFINED AT LINE 32 IN variables.z80
VARHLD:             2467 DEFINED AT LINE 33 IN variables.z80
VARHANDL:           2469 DEFINED AT LINE 34 IN variables.z80
VARCNTXT:           246B DEFINED AT LINE 35 IN variables.z80
VARVOCABS:          246D DEFINED AT LINE 36 IN variables.z80
VARCRRNT:           246F DEFINED AT LINE 37 IN variables.z80
VARVOCABLP:         2471 DEFINED AT LINE 38 IN variables.z80
VARCP:              2473 DEFINED AT LINE 39 IN variables.z80
VARNP:              2475 DEFINED AT LINE 40 IN variables.z80
VARLAST:            2477 DEFINED AT LINE 41 IN variables.z80
VARVFRTH:           2479 DEFINED AT LINE 42 IN variables.z80
VARVOCABL:          247B DEFINED AT LINE 43 IN variables.z80
VECTAB:             247D DEFINED AT LINE 45 IN variables.z80
VRST08:             247D DEFINED AT LINE 46 IN variables.z80
                    > USED AT LINE 12
VRST10:             247F DEFINED AT LINE 47 IN variables.z80
                    > USED AT LINE 16
VRST18:             2481 DEFINED AT LINE 48 IN variables.z80
                    > USED AT LINE 20
VRST20:             2483 DEFINED AT LINE 49 IN variables.z80
                    > USED AT LINE 24
VRST28:             2485 DEFINED AT LINE 50 IN variables.z80
                    > USED AT LINE 28
VRST30:             2487 DEFINED AT LINE 51 IN variables.z80
                    > USED AT LINE 32
VINT:               2489 DEFINED AT LINE 52 IN variables.z80
                    > USED AT LINE 36
                    > USED AT LINE 44
VNMI:               248B DEFINED AT LINE 53 IN variables.z80
                    > USED AT LINE 40
TESCNT:             248D DEFINED AT LINE 55 IN variables.z80
                    > USED AT LINE 54 IN tester.z80
TESDPTH:            248F DEFINED AT LINE 56 IN variables.z80
                    > USED AT LINE 55 IN tester.z80
                    > USED AT LINE 64 IN tester.z80
                    > USED AT LINE 66 IN tester.z80
                    > USED AT LINE 75 IN tester.z80
CPP:                2491 DEFINED AT LINE 58 IN variables.z80
                    > USED AT LINE 28 IN defaults.z80
NPP:                FFFE DEFINED AT LINE 60 IN variables.z80
                    > USED AT LINE 29 IN defaults.z80

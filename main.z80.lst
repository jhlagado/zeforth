0000                          .ENGINE   mycomputer   
0000                TESTMODE:   EQU   0   
0000                MEM_SIZE:   EQU   $10000   ; MEM is 64K
0000                ROM_SIZE:   EQU   $2000   ; ROM is 8K
0000                RAM_SIZE:   EQU   MEM_SIZE - ROM_SIZE   ; RAM is 64K - 8K
0000                START_ROM:   EQU   BM   ; inclusive
0000                END_ROM:   EQU   BM + ROM_SIZE   ; exclusive
0000                START_RAM:   EQU   BM + ROM_SIZE   ; inclusive
0000                END_RAM:   EQU   START_RAM + RAM_SIZE   ; exclusive
0000                BM:       EQU   0   ; bottom of ROM memory
0000                EM:       EQU   BM + MEM_SIZE   
0000                COMPO:    EQU   $20   ;lexicon compile only bit
0000                IMEDD:    EQU   $40   ;lexicon immediate bit
0000                MASKK:    EQU   $1F   ;lexicon bit mask
0000                CHARR:    EQU   1   ;byte size of a character
0000                CELLL:    EQU   2   
0000                BASEE:    EQU   10   ;BASE
0000                VOCSS:    EQU   8   ;depth of vocabulary stack
0000                MAXCHAR:   EQU   0FFh   ;Extended character set					                    ;  Use 07Fh for ASCII only
0000                MAXSIGNED:   EQU   07FFFh   ;max value of signed integer
0000                MAXUNSIGNED:   EQU   0FFFFh   ;max value of unsigned integer
0000                MAXNEGATIVE:   EQU   8000h   ;max value of negative integer
0000                BKSPP:    EQU   8   ;backspace
0000                LFF:      EQU   $0A   ;line feed
0000                CRR:      EQU   $0D   ;carriage return
0000                SPACEE:   EQU   $20   
0000                TIC:      EQU   $27   ;tick
0000                MINUSS:   EQU   $2D   
0000                UNDERSC:   EQU   $5F   
0000                CALLL:    EQU   $CD00   ; NOP followed by CALL opcodes
0000                US:       EQU   END_DEFAULTS - DEFAULTS   ;user area size
0000                RTS:      EQU   $100 * CELLL   ;return stack/TIB size
0000                DTS:      EQU   $100 * CELLL   ;data stack size
0000                RET_STACK_SIZE:   EQU   $100   
0000                DATA_STACK_SIZE:   EQU   $100   
0000                INT_ADDR:   EQU   $0038   
0000                SER_BUFSIZE:   EQU   $3F   
0000                SER_FULLSIZE:   EQU   $30   
0000                SER_EMPTYSIZE:   EQU   5   
0000                RTS_HIGH:   EQU   $D6   
0000                RTS_LOW:   EQU   $96   
0000                TRUEE:    EQU   -1   
0000                FALSEE:   EQU   0   
0000                             ; Initialize assembly variables
0000                VVCODE:   .SET   0   
0000                VVNAME:   .SET   END_ROM   
0000                VVLINK:   .SET   0   ;force a null link
0000                VVUSER:   .SET   0   ;first user variable offset
0000                .macro MCODE,aaLEX,aaNAME,aaLABEL
0000                             ; 
0000                 .align 2                                         ; force to cell boundary
0000                aaLABEL:                                              ; assembly label
0000                 vvCODE .set $
0000                 vvLEN  .set (aaLEX & 01FH) / CELLL              ; string cell count, round down
0000                 ORG vvNAME - ((vvLEN + 3) * CELLL)                                     ; ? needed
0000                 vvNAME .set $
0000                 DW vvCODE, vvLINK                               ; token pointer and link
0000                 vvLINK .set $                                   ; link points to a name string
0000                 DB aaLEX, aaNAME                                    ; name string
0000                 ORG vvCODE                                      ; restore code pointer
0000                .endm
0000                 
0000                .macro MCOLON,aaLEX,aaNAME,aaLABEL
0000                             ; 
0000                 mCODE aaLEX, aaNAME, aaLABEL
0000                 nop
0000                 CALL doLIST
0000                .endm
0000                 
0000                .macro MUSER,aaLEX,aaNAME,aaLABEL
0000                             ; 
0000                	mCODE aaLEX, aaNAME, aaLABEL
0000                 nop
0000                 CALL doLIST
0000                 DW DoUSE,vvUSER
0000                 vvUSER .set vvUSER + CELLL
0000                .endm
0000                 
0000                             ; .align 2
0000                .macro MDSTR,aaFUNC,aaSTR
0000                             ; 
0000                 DW aaFUNC                       ; function
0000                 vvLEN .set $                    ; save address of count byte
0000                 DB 0,aaSTR                      ; count byte and string
0000                 vvCODE .set $                   ; save code pointer
0000                ORG vvLEN                           ; point to count byte
0000                 DB vvCODE - vvLEN - 1           ; set count
0000                ORG vvCODE                          ; restore code pointer
0000                .endm
0000                 
0000                .macro HCODE,aaLEX,aaNAME,aaLABEL
0000                             ; 
0000                 .align 2                                         ; force to cell boundary
0000                aaLABEL:                                              ; assembly label
0000                .endm
0000                 
0000                .macro HCOLON,aaLEX,aaNAME,aaLABEL
0000                             ; 
0000                 hCODE aaLEX, aaNAME, aaLABEL
0000                 nop
0000                 CALL doLIST
0000                .endm
0000                 
0000                .macro HUSER,aaLEX,aaNAME,aaLABEL
0000                             ; 
0000                	hCODE aaLEX, aaNAME, aaLABEL
0000                 nop
0000                 CALL doLIST
0000                 DW DoUSE,vvUSER
0000                 vvUSER .set vvUSER + CELLL
0000                .endm
0000                 
0000                             ; 	LD	E,(HL)	                    ; 7t
0000                             ; 	INC	HL	                        ; 6t
0000                             ; 	LD	D,(HL)	                    ; 7t
0000                             ; 	INC	HL	                        ; 6t
0000                             ; 	EX	DE,HL	                    ; 4t
0000                             ; 	JP	(HL)	                    ; 4t
0000                .macro MNEXTHL,
0000                             ; 
0000                 JP (IY)
0000                .endm
0000                 
0000                .macro MNEXT,
0000                             ; 
0000                	EX	DE,HL	                    ; 4t
0000                 mNEXTHL                         ; 34t
0000                .endm
0000                 
0000                          .ORG   START_ROM   
0000   C3 6C 00     RESET:    JP   INIT   
0008                          .ORG   $08   
0008   FD 2A 7D 24  RST08:    LD   IY,(vRST08)   
000C   FD E9                  JP   (IY)   
0010                          .ORG   $10   
0010   FD 2A 7F 24  RST10:    LD   IY,(vRST10)   
0014   FD E9                  JP   (IY)   
0018                          .ORG   $18   
0018   FD 2A 81 24  RST18:    LD   IY,(vRST18)   
001C   FD E9                  JP   (IY)   
0020                          .ORG   $20   
0020   FD 2A 83 24  RST20:    LD   IY,(vRST20)   
0024   FD E9                  JP   (IY)   
0028                          .ORG   $28   
0028   FD 2A 85 24  RST28:    LD   IY,(vRST28)   
002C   FD E9                  JP   (IY)   
0030                          .ORG   $30   
0030   FD 2A 87 24  RST30:    LD   IY,(vRST30)   
0034   FD E9                  JP   (IY)   
0038                          .ORG   $38   
0038   FD 2A 89 24  RST38:    LD   IY,(vINT)   
003C   FD E9                  JP   (IY)   
0066                          .ORG   $66   
0066   FD 2A 8B 24  RST66:    LD   IY,(vNMI)   
006A   FD E9                  JP   (IY)   
006C                INIT:        
006C   21 98 00               LD   HL,serialInt   
006F   22 89 24               LD   (vINT),HL   
0072   21 00 22               LD   HL,SPP   ; Setup Forth data stack
0075   F9                     LD   SP,HL   ; also used as return stack by interrupts etc
0076   21 26 01               LD   HL,DEFAULTS   ; initialize user variables with defaults
0079   11 00 24               LD   DE,UPP   
007C   01 3A 00               LD   BC,US   
007F   ED B0                  LDIR      
0081   DD 21 00 24            LD   IX,RPP   ; set up Forth return stack
0085   FD 21 00 0E            LD   IY,NEXT_STEP   
0089   01 FF FF               LD   BC,-1   ; empty stack marker
008C   C3 D8 0D               JP   HI   
008F                          IF   TESTMODE   
                              JP   TESTS_START   
008F                          ELSE      
008F                             ; LD      HL,GREETING
008F                             ; CALL    PRINTSZ
008F                LOOP:        
008F   CD EA 00               CALL   RXA   
0092   CD 15 01               CALL   TXA   
0095   C3 8F 00               JP   LOOP   
0098                          ENDIF      
0098   F5           SERIALINT:   PUSH   AF   
0099   E5                     PUSH   HL   
009A   DB 80                  IN   A,($80)   
009C   E6 01                  AND   $01   ; Check if interupt due to read buffer full
009E   28 2D                  JR   Z,rts0   ; if not, ignore
00A0   DB 81                  IN   A,($81)   
00A2   F5                     PUSH   AF   
00A3   3A 3C 24               LD   A,(serBufUsed)   
00A6   FE 3F                  CP   SER_BUFSIZE   ; If full then ignore
00A8   20 03                  JR   NZ,notFull   
00AA   F1                     POP   AF   
00AB   18 20                  JR   rts0   
00AD   2A 38 24     NOTFULL:   LD   HL,(serInPtr)   
00B0   23                     INC   HL   
00B1   7D                     LD   A,L   ; Only need to check low byte becasuse buffer<256 bytes
00B2   FE 7D                  CP   (serBuf+SER_BUFSIZE) & $FF   
00B4   20 03                  JR   NZ,notWrap   
00B6   21 3E 24               LD   HL,serBuf   
00B9   22 38 24     NOTWRAP:   LD   (serInPtr),HL   
00BC   F1                     POP   AF   
00BD   77                     LD   (HL),A   
00BE   3A 3C 24               LD   A,(serBufUsed)   
00C1   3C                     INC   A   
00C2   32 3C 24               LD   (serBufUsed),A   
00C5   FE 30                  CP   SER_FULLSIZE   
00C7   38 04                  JR   C,rts0   
00C9   3E D6                  LD   A,RTS_HIGH   
00CB   D3 80                  OUT   ($80),A   
00CD   E1           RTS0:     POP   HL   
00CE   F1                     POP   AF   
00CF   FD 21 00 0E            LD   IY,NEXT_STEP   
00D3   FB                     EI      
00D4   ED 4D                  RETI      
00D6                             ; Modified from code by Grant Searle
00D6                             ; Minimum 6850 ACIA interrupt driven serial I/O
00D6                INIT_IO:      
00D6   F3                     DI      ; Disable interrupts
00D7   21 3E 24               LD   HL,serBuf   
00DA   22 38 24               LD   (serInPtr),HL   
00DD   22 3A 24               LD   (serRdPtr),HL   
00E0   AF                     XOR   A   
00E1   32 3C 24               LD   (serBufUsed),A   
00E4   3E 96                  LD   A,RTS_LOW   
00E6   D3 80                  OUT   ($80),A   ; Initialise ACIA
00E8   FB                     EI      
00E9   C9                     RET      
00EA                RXA:         
00EA                WAITFORCHAR:      
00EA   3A 3C 24               LD   A,(serBufUsed)   
00ED   FE 00                  CP   $00   
00EF   28 F9                  JR   Z,waitForChar   
00F1                RXA1:        
00F1   E5                     PUSH   HL   
00F2   2A 3A 24               LD   HL,(serRdPtr)   
00F5   23                     INC   HL   
00F6   7D                     LD   A,L   ; Only need to check low byte becasuse buffer<256 bytes
00F7   FE 7D                  CP   (serBuf+SER_BUFSIZE) & $FF   
00F9   20 03                  JR   NZ,notRdWrap   
00FB   21 3E 24               LD   HL,serBuf   
00FE                NOTRDWRAP:      
00FE   F3                     DI      
00FF   22 3A 24               LD   (serRdPtr),HL   
0102   3A 3C 24               LD   A,(serBufUsed)   
0105   3D                     DEC   A   
0106   32 3C 24               LD   (serBufUsed),A   
0109   FE 05                  CP   SER_EMPTYSIZE   
010B   30 04                  JR   NC,rts1   
010D   3E 96                  LD   A,RTS_LOW   
010F   D3 80                  OUT   ($80),A   
0111                RTS1:        
0111   7E                     LD   A,(HL)   
0112   FB                     EI      
0113   E1                     POP   HL   
0114   C9                     RET      ; Char ready in A
0115                TXA:         
0115   F5                     PUSH   AF   ; Store character
0116                CONOUT1:      
0116   DB 80                  IN   A,($80)   ; Status byte
0118   CB 4F                  BIT   1,A   ; Set Zero flag if still transmitting character
011A   28 FA                  JR   Z,conout1   ; Loop until flag signals ready
011C   F1                     POP   AF   ; Retrieve character
011D   D3 81                  OUT   ($81),A   ; Output the character
011F   C9                     RET      
0120                QRXA:        
0120   3A 3C 24               LD   A,(serBufUsed)   
0123   FE 00                  CP   $0   
0125   C9                     RET      
0126                             ; .align 2
0126                DEFAULTS:      
0126                UZERO:       
0126   00 22        DEFSZERO:   DW   SPP   ; SP0
0128   00 24        DEFRZERO:   DW   RPP   ; RP0
012A   82 0B        DEFTQKEY:   DW   QRX   ; '?KEY
012C   9A 0B        DEFTEMIT:   DW   TXSTO   ; 'EMIT
012E   72 0D        DEFTEXPE:   DW   ACCEP   ; 'EXPECT
0130   44 0D        DEFTTAP:   DW   KTAP   ; 'TAP
0132   9A 0B        DEFTECHO:   DW   TXSTO   ; 'ECHO
0134   12 0B        DEFTPROM:   DW   DOTOK   ; 'PROMPT
0136   0A 00        DEFBASE:   DW   BASEE   ; BASE
0138   00 00        DEFTEMP:   DW   0   ; tmp
013A   00 00        DEFSPAN:   DW   0   ; SPAN
013C   00 00        DEFINN:   DW   0   ; >IN
013E   00 00        DEFNTIB:   DW   0   ; #TIB
0140   00 22        DEFTIB:   DW   TIBB   ; TIB
0142   00 00        DEFCSP:   DW   0   ; CSP
0144   D0 0A        DEFTEVAL:   DW   INTER   ; 'EVAL
0146   B2 07        DEFTNUMB:   DW   NUMBQ   ; 'NUMBER
0148   00 00        DEFHLD:   DW   0   ; HLD
014A   00 00        DEFHANDL:   DW   0   ; HANDLER
014C   00 00        DEFCNTXT:   DW   0   ; CONTEXT pointer
014E   00 00        DEFVOCABS:   DW   0   ; vocabulary stack    ???
0150   00 00        DEFCRRENT:   DW   0   ; CURRENT pointer
0152   00 00        DEFVOCABLP:   DW   0   ; vocabulary link pointer ???
0154   8D 24        DEFCP:    DW   CPP   ; CP  for runing phase on RAM
0156   FE FF        DEFNP:    DW   NPP   ; NP  for runing phase on RAM
0158   9A 13        DEFLAST:   DW   LASTN   ; LAST
015A   9A 13        DEFVFRTH:   DW   LASTN   ; FORTH   \ mullti-user ???
015C   00 00        DEFVOCABL:   DW   0   ; vocabulary link       ???
015E   00 00        DEFCOLD:   DW   0   ; "COLD"
0160                ULAST:       
0160                END_DEFAULTS:      
0160                VVCODE:   .SET   $   
0160                             ;   0<          ( n -- t )
0160                             ;               Return true if n is negative.
0160                          ;*Macro unroll: mCODE	2,'0<', ZLESS
0160                          ALIGN   2   
0160                ZLESS:       
0160                VVCODE:   .SET   $   
0160                VVLEN:    .SET   (2 & 01FH) / CELLL   
1FF8                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FF8                VVNAME:   .SET   $   
1FF8   60 01 00 00            DW   vvCODE,vvLINK   
1FFC                VVLINK:   .SET   $   
1FFC   02 30 3C               DB   2,"0<"   
0160                          .ORG   vvCODE   
0160   CB 20                  SLA   B   ; sign bit -> cy flag
0162   9F                     SBC   A,A   ; propagate cy through A
0163   47                     LD   B,A   ; put 0000 or FFFF in TOS
0164   4F                     LD   C,A   
0165                          ;*Macro unroll: 	mNEXT
0165   EB                     EX   DE,HL   
0166                          ;*Macro unroll:  mNEXTHL                         ; 34t
0166   FD E9                  JP   (IY)   ; 34t
0168                             ;   AND         ( w w -- w )
0168                             ;               Bitwise AND.
0168                          ;*Macro unroll: mCODE	3, 'AND', ANDD
0168                          ALIGN   2   
0168                ANDD:        
0168                VVCODE:   .SET   $   
0168                VVLEN:    .SET   (3 & 01FH) / CELLL   
1FF0                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FF0                VVNAME:   .SET   $   
1FF0   68 01 FC 1F            DW   vvCODE,vvLINK   
1FF4                VVLINK:   .SET   $   
1FF4   03 41 4E 44            DB   3,"AND"   
0168                          .ORG   vvCODE   
0168   E1                     POP   HL   
0169   78                     LD   A,B   
016A   A4                     AND   H   
016B   47                     LD   B,A   
016C   79                     LD   A,C   
016D   A5                     AND   L   
016E   4F                     LD   C,A   
016F                          ;*Macro unroll: 	mNEXT
016F   EB                     EX   DE,HL   
0170                          ;*Macro unroll:  mNEXTHL                         ; 34t
0170   FD E9                  JP   (IY)   ; 34t
0172                             ;   OR          ( w w -- w )
0172                             ;               Bitwise inclusive OR.
0172                          ;*Macro unroll: mCODE	2,'OR', ORR
0172                          ALIGN   2   
0172                ORR:         
0172                VVCODE:   .SET   $   
0172                VVLEN:    .SET   (2 & 01FH) / CELLL   
1FE8                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FE8                VVNAME:   .SET   $   
1FE8   72 01 F4 1F            DW   vvCODE,vvLINK   
1FEC                VVLINK:   .SET   $   
1FEC   02 4F 52               DB   2,"OR"   
0172                          .ORG   vvCODE   
0172   E1                     POP   HL   
0173   78                     LD   A,B   
0174   B4                     OR   H   
0175   47                     LD   B,A   
0176   79                     LD   A,C   
0177   B5                     OR   L   
0178   4F                     LD   C,A   
0179                          ;*Macro unroll: 	mNEXT
0179   EB                     EX   DE,HL   
017A                          ;*Macro unroll:  mNEXTHL                         ; 34t
017A   FD E9                  JP   (IY)   ; 34t
017C                             ;   XOR         ( w w -- w )
017C                             ;               Bitwise exclusive
017C                          ;*Macro unroll: mCODE	3, 'XOR', XORR
017C                          ALIGN   2   
017C                XORR:        
017C                VVCODE:   .SET   $   
017C                VVLEN:    .SET   (3 & 01FH) / CELLL   
1FE0                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FE0                VVNAME:   .SET   $   
1FE0   7C 01 EC 1F            DW   vvCODE,vvLINK   
1FE4                VVLINK:   .SET   $   
1FE4   03 58 4F 52            DB   3,"XOR"   
017C                          .ORG   vvCODE   
017C   E1                     POP   HL   
017D   78                     LD   A,B   
017E   AC                     XOR   H   
017F   47                     LD   B,A   
0180   79                     LD   A,C   
0181   AD                     XOR   L   
0182   4F                     LD   C,A   
0183                          ;*Macro unroll: 	mNEXT
0183   EB                     EX   DE,HL   
0184                          ;*Macro unroll:  mNEXTHL                         ; 34t
0184   FD E9                  JP   (IY)   ; 34t
0186                             ;   +           ( w w -- sum )
0186                             ;               Add top two items.
0186                          ;*Macro unroll: mCOLON	1,'+', PLUS
0186                          ;*Macro unroll:  mCODE 1, "+", PLUS
0186                          ALIGN   2   
0186                PLUS:        
0186                VVCODE:   .SET   $   
0186                VVLEN:    .SET   (1 & 01FH) / CELLL   
1FDA                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FDA                VVNAME:   .SET   $   
1FDA   86 01 E4 1F            DW   vvCODE,vvLINK   
1FDE                VVLINK:   .SET   $   
1FDE   01 2B                  DB   1,"+"   
0186                          .ORG   vvCODE   
0186   00                     NOP      
0187   CD 0E 06               CALL   doLIST   
018A   5E 02 28 10 44 06      DW   UMPlus,DROP,EXIT   
0190                             ;   NOT         ( w -- w )
0190                             ;               One's complement of tos.
0190                          ;*Macro unroll: mCOLON  3, 'NOT', INVER
0190                          ;*Macro unroll:  mCODE 3, "NOT", INVER
0190                          ALIGN   2   
0190                INVER:       
0190                VVCODE:   .SET   $   
0190                VVLEN:    .SET   (3 & 01FH) / CELLL   
1FD2                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FD2                VVNAME:   .SET   $   
1FD2   90 01 DE 1F            DW   vvCODE,vvLINK   
1FD6                VVLINK:   .SET   $   
1FD6   03 4E 4F 54            DB   3,"NOT"   
0190                          .ORG   vvCODE   
0190   00                     NOP      
0191   CD 0E 06               CALL   doLIST   
0194   1C 06 FF FF 7C 01 44 06 DW   DOLIT,-1,XORR,EXIT   
019C                             ;   NEGAT      ( n -- -n )
019C                             ;               Two's complement of tos.
019C                          ;*Macro unroll: mCOLON	6,'NEGATE',NEGAT
019C                          ;*Macro unroll:  mCODE 6, "NEGATE", NEGAT
019C                          ALIGN   2   
019C                NEGAT:       
019C                VVCODE:   .SET   $   
019C                VVLEN:    .SET   (6 & 01FH) / CELLL   
1FC6                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FC6                VVNAME:   .SET   $   
1FC6   9C 01 D6 1F            DW   vvCODE,vvLINK   
1FCA                VVLINK:   .SET   $   
1FCA   06 4E 45 47 41 54 45   DB   6,"NEGATE"   
019C                          .ORG   vvCODE   
019C   00                     NOP      
019D   CD 0E 06               CALL   doLIST   
01A0   90 01 1C 06 01 00 86 01 44 06 DW   INVER,DOLIT,1,Plus,EXIT   
01AA                             ;   DNEGATE     ( d -- -d )
01AA                             ;               Two's complement of top double.
01AA                          ;*Macro unroll: mCOLON	7,'DNEGATE',DNEGA
01AA                          ;*Macro unroll:  mCODE 7, "DNEGATE", DNEGA
01AA                          ALIGN   2   
01AA                DNEGA:       
01AA                VVCODE:   .SET   $   
01AA                VVLEN:    .SET   (7 & 01FH) / CELLL   
1FBA                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FBA                VVNAME:   .SET   $   
1FBA   AA 01 CA 1F            DW   vvCODE,vvLINK   
1FBE                VVLINK:   .SET   $   
1FBE   07 44 4E 45 47 41 54 45 DB   7,"DNEGATE"   
01AA                          .ORG   vvCODE   
01AA   00                     NOP      
01AB   CD 0E 06               CALL   doLIST   
01AE   90 01 08 10 90 01      DW   INVER,ToR,INVER   
01B4   1C 06 01 00 5E 02      DW   DOLIT,1,UMPlus   
01BA   16 10 86 01 44 06      DW   RFrom,Plus,EXIT   
01C0                             ;   -           ( n1 n2 -- n1-n2 )
01C0                             ;               Subtraction.
01C0                          ;*Macro unroll: mCOLON	1, '-', SUBB
01C0                          ;*Macro unroll:  mCODE 1, "-", SUBB
01C0                          ALIGN   2   
01C0                SUBB:        
01C0                VVCODE:   .SET   $   
01C0                VVLEN:    .SET   (1 & 01FH) / CELLL   
1FB4                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FB4                VVNAME:   .SET   $   
1FB4   C0 01 BE 1F            DW   vvCODE,vvLINK   
1FB8                VVLINK:   .SET   $   
1FB8   01 2D                  DB   1,"-"   
01C0                          .ORG   vvCODE   
01C0   00                     NOP      
01C1   CD 0E 06               CALL   doLIST   
01C4   9C 01 86 01 44 06      DW   NEGAT,Plus,EXIT   
01CA                             ;   ABS         ( n -- n )
01CA                             ;               Return the absolute value of n.
01CA                          ;*Macro unroll: mCOLON	3,'ABS',ABSS
01CA                          ;*Macro unroll:  mCODE 3, "ABS", ABSS
01CA                          ALIGN   2   
01CA                ABSS:        
01CA                VVCODE:   .SET   $   
01CA                VVLEN:    .SET   (3 & 01FH) / CELLL   
1FAC                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FAC                VVNAME:   .SET   $   
1FAC   CA 01 B8 1F            DW   vvCODE,vvLINK   
1FB0                VVLINK:   .SET   $   
1FB0   03 41 42 53            DB   3,"ABS"   
01CA                          .ORG   vvCODE   
01CA   00                     NOP      
01CB   CD 0E 06               CALL   doLIST   
01CE   24 10 60 01 3C 0E D8 01 DW   DUPP,ZLESS,QBRAN,ABS1   
01D6   9C 01                  DW   NEGAT   
01D8                ABS1:        
01D8   44 06                  DW   EXIT   
01DA                             ;   =           ( w w -- t )
01DA                             ;               Return true if top two are equal.
01DA                          ;*Macro unroll: mCOLON	1, '=', EQUAL
01DA                          ;*Macro unroll:  mCODE 1, "=", EQUAL
01DA                          ALIGN   2   
01DA                EQUAL:       
01DA                VVCODE:   .SET   $   
01DA                VVLEN:    .SET   (1 & 01FH) / CELLL   
1FA6                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FA6                VVNAME:   .SET   $   
1FA6   DA 01 B0 1F            DW   vvCODE,vvLINK   
1FAA                VVLINK:   .SET   $   
1FAA   01 3D                  DB   1,"="   
01DA                          .ORG   vvCODE   
01DA   00                     NOP      
01DB   CD 0E 06               CALL   doLIST   
01DE   7C 01                  DW   XORR   
01E0   3C 0E EA 01            DW   QBRAN,EQU1   
01E4   1C 06 00 00 44 06      DW   DOLIT,0,EXIT   ;false flag
01EA                EQU1:        
01EA   1C 06 FF FF 44 06      DW   DOLIT,-1,EXIT   ;true flag
01F0                             ;   U<          ( u u -- t )
01F0                             ;               Unsigned compare of top two items.
01F0                          ;*Macro unroll: mCOLON	2,'U<',ULESS
01F0                          ;*Macro unroll:  mCODE 2, "U<", ULESS
01F0                          ALIGN   2   
01F0                ULESS:       
01F0                VVCODE:   .SET   $   
01F0                VVLEN:    .SET   (2 & 01FH) / CELLL   
1F9E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F9E                VVNAME:   .SET   $   
1F9E   F0 01 AA 1F            DW   vvCODE,vvLINK   
1FA2                VVLINK:   .SET   $   
1FA2   02 55 3C               DB   2,"U<"   
01F0                          .ORG   vvCODE   
01F0   00                     NOP      
01F1   CD 0E 06               CALL   doLIST   
01F4   62 10 7C 01 60 01      DW   DDUP,XORR,ZLESS   
01FA   3C 0E 06 02            DW   QBRAN,ULES1   
01FE   2C 10 28 10 60 01 44 06 DW   SWAP,DROP,ZLESS,EXIT   
0206                ULES1:       
0206   C0 01 60 01 44 06      DW   SUBB,ZLESS,EXIT   
020C                             ;   <           ( n1 n2 -- t )
020C                             ;               is less than
020C                          ;*Macro unroll: mCOLON	1,'<',LESS
020C                          ;*Macro unroll:  mCODE 1, "<", LESS
020C                          ALIGN   2   
020C                LESS:        
020C                VVCODE:   .SET   $   
020C                VVLEN:    .SET   (1 & 01FH) / CELLL   
1F98                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F98                VVNAME:   .SET   $   
1F98   0C 02 A2 1F            DW   vvCODE,vvLINK   
1F9C                VVLINK:   .SET   $   
1F9C   01 3C                  DB   1,"<"   
020C                          .ORG   vvCODE   
020C   00                     NOP      
020D   CD 0E 06               CALL   doLIST   
0210   62 10 7C 01 60 01 3C 0E 20 02 DW   DDUP,XORR,ZLESS,QBRAN,LESS1   
021A   28 10 60 01 44 06      DW   DROP,ZLESS,EXIT   
0220                LESS1:       
0220   C0 01 60 01 44 06      DW   SUBB,ZLESS,EXIT   
0226                             ;   MAX         ( n n -- n )
0226                             ;               Return the greater of two top stack items.
0226                          ;*Macro unroll: mCOLON	3,'MAX',MAX
0226                          ;*Macro unroll:  mCODE 3, "MAX", MAX
0226                          ALIGN   2   
0226                MAX:         
0226                VVCODE:   .SET   $   
0226                VVLEN:    .SET   (3 & 01FH) / CELLL   
1F90                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F90                VVNAME:   .SET   $   
1F90   26 02 9C 1F            DW   vvCODE,vvLINK   
1F94                VVLINK:   .SET   $   
1F94   03 4D 41 58            DB   3,"MAX"   
0226                          .ORG   vvCODE   
0226   00                     NOP      
0227   CD 0E 06               CALL   doLIST   
022A   62 10 0C 02 3C 0E 34 02 DW   DDUP,LESS,QBRAN,MAX1   
0232   2C 10                  DW   SWAP   
0234                MAX1:        
0234   28 10 44 06            DW   DROP,EXIT   
0238                             ;   MIN         ( n n -- n )
0238                             ;               Return the smaller of top two stack items.
0238                          ;*Macro unroll: mCOLON	3,'MIN',MIN
0238                          ;*Macro unroll:  mCODE 3, "MIN", MIN
0238                          ALIGN   2   
0238                MIN:         
0238                VVCODE:   .SET   $   
0238                VVLEN:    .SET   (3 & 01FH) / CELLL   
1F88                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F88                VVNAME:   .SET   $   
1F88   38 02 94 1F            DW   vvCODE,vvLINK   
1F8C                VVLINK:   .SET   $   
1F8C   03 4D 49 4E            DB   3,"MIN"   
0238                          .ORG   vvCODE   
0238   00                     NOP      
0239   CD 0E 06               CALL   doLIST   
023C   62 10 2C 10 0C 02      DW   DDUP,SWAP,LESS   
0242   3C 0E 48 02            DW   QBRAN,MIN1   
0246   2C 10                  DW   SWAP   
0248                MIN1:        
0248   28 10 44 06            DW   DROP,EXIT   
024C                             ;   WITHIN      ( u ul uh -- t )
024C                             ;               Return true if u is within the range of ul and uh.
024C                          ;*Macro unroll: mCOLON	6,'WITHIN',WITHI
024C                          ;*Macro unroll:  mCODE 6, "WITHIN", WITHI
024C                          ALIGN   2   
024C                WITHI:       
024C                VVCODE:   .SET   $   
024C                VVLEN:    .SET   (6 & 01FH) / CELLL   
1F7C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F7C                VVNAME:   .SET   $   
1F7C   4C 02 8C 1F            DW   vvCODE,vvLINK   
1F80                VVLINK:   .SET   $   
1F80   06 57 49 54 48 49 4E   DB   6,"WITHIN"   
024C                          .ORG   vvCODE   
024C   00                     NOP      
024D   CD 0E 06               CALL   doLIST   
0250   34 10 C0 01 08 10      DW   OVER,SUBB,ToR   ;ul <= u < uh
0256   C0 01 16 10 F0 01 44 06 DW   SUBB,RFrom,ULess,EXIT   
025E                             ;   UM+         ( w w -- w cy )
025E                             ;               Add two numbers, return the sum and carry flag.
025E                          ;*Macro unroll: hCODE	3,'um+',UMPlus
025E                          ALIGN   2   
025E                UMPLUS:      
025E   E1                     POP   HL   ;10t
025F   09                     ADD   HL,BC   ;11t
0260   E5                     PUSH   HL   ;11t
0261   01 00 00               LD   BC,0   ;10t
0264   30 01                  JR   NC,UMP1   ;12/7t
0266                UMP2:        
0266   03                     INC   BC   ; 6t
0267                UMP1:        
0267                          ;*Macro unroll:  mNEXT
0267   EB                     EX   DE,HL   
0268                          ;*Macro unroll:  mNEXTHL                         ; 34t
0268   FD E9                  JP   (IY)   ; 34t
026A                             ; UM/MOD      ( udl udh u -- ur uq )
026A                             ; Unsigned divide of a double by a single. Return mod and quotient.
026A                             ; Note: Less range than eForth because most significant word discarded TODO: fix
026A                          ;*Macro unroll: mCOLON  6,'UM/MOD',UMMOD
026A                          ;*Macro unroll:  mCODE 6, "UM/MOD", UMMOD
026A                          ALIGN   2   
026A                UMMOD:       
026A                VVCODE:   .SET   $   
026A                VVLEN:    .SET   (6 & 01FH) / CELLL   
1F70                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F70                VVNAME:   .SET   $   
1F70   6A 02 80 1F            DW   vvCODE,vvLINK   
1F74                VVLINK:   .SET   $   
1F74   06 55 4D 2F 4D 4F 44   DB   6,"UM/MOD"   
026A                          .ORG   vvCODE   
026A   00                     NOP      
026B   CD 0E 06               CALL   doLIST   
026E   2C 10 28 10 76 02 44 06 DW   SWAP,DROP,UMSLMOD2,EXIT   
0276                             ; UM/MOD2	( ud u1 -- u2 u3 )		
0276                             ; Unsigned division of a double-cell number ud by a single-cell
0276                             ; number u1. Return remainder u2 and quotient u3.
0276                             ; Note: Less range than eForth TODO: fix
0276                          ;*Macro unroll: mCODE	6,'UM/MOD2',UMSLMOD2
0276                          ALIGN   2   
0276                UMSLMOD2:      
0276                VVCODE:   .SET   $   
0276                VVLEN:    .SET   (6 & 01FH) / CELLL   
1F64                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F64                VVNAME:   .SET   $   
1F64   76 02 74 1F            DW   vvCODE,vvLINK   
1F68                VVLINK:   .SET   $   
1F68   06 55 4D 2F 4D 4F 44 32 DB   6,"UM/MOD2"   
0276                          .ORG   vvCODE   
0276   78                     LD   A,B   
0277   B1                     OR   C   
0278   28 25                  JR   Z,UMMOD2   ;?zero divisor
027A                UMMOD11:      
027A   C5                     PUSH   BC   
027B   D9                     EXX      
027C   C1                     POP   BC   
027D   E1                     POP   HL   
027E   D1                     POP   DE   
027F   7D                     LD   A,L   
0280   91                     SUB   C   
0281   7C                     LD   A,H   
0282   98                     SBC   A,B   
0283   30 20                  JR   NC,UMMOD1   ;?too big
0285                UMMOD12:      
0285   7C                     LD   A,H   
0286   65                     LD   H,L   
0287   6A                     LD   L,D   
0288   16 08                  LD   D,8   
028A   D5                     PUSH   DE   
028B   CD B9 02               CALL   UMMOD3   
028E   D1                     POP   DE   
028F   E5                     PUSH   HL   
0290   6B                     LD   L,E   
0291   CD B9 02               CALL   UMMOD3   
0294   57                     LD   D,A   
0295   5C                     LD   E,H   
0296   C1                     POP   BC   
0297   61                     LD   H,C   
0298   D5                     PUSH   DE   
0299   E5                     PUSH   HL   
029A   D9                     EXX      
029B   C1                     POP   BC   
029C                          ;*Macro unroll: 	mNEXT
029C   EB                     EX   DE,HL   
029D                          ;*Macro unroll:  mNEXTHL                         ; 34t
029D   FD E9                  JP   (IY)   ; 34t
029F                UMMOD2:      
029F   01 F4 0F               LD   BC,ERR_DIVZERO   ; divide by 0
02A2   C3 50 0E               JP   THROWX   
02A5                UMMOD1:      
02A5   01 FC 0F               LD   BC,ERR_OUTOFRANGE   ; result out of range
02A8   C3 50 0E               JP   THROWX   
02AB                UMMOD4:      
02AB   5F                     LD   E,A   
02AC   7C                     LD   A,H   
02AD   91                     SUB   C   
02AE   67                     LD   H,A   
02AF   7B                     LD   A,E   
02B0   98                     SBC   A,B   
02B1   30 10                  JR   NC,UMMOD5   
02B3                UMMOD13:      
02B3   7C                     LD   A,H   
02B4   81                     ADD   A,C   
02B5   67                     LD   H,A   
02B6   7B                     LD   A,E   
02B7   15                     DEC   D   
02B8   C8                     RET   Z   
02B9                UMMOD3:      
02B9   29                     ADD   HL,HL   
02BA   17                     RLA      
02BB   30 EE                  JR   NC,UMMOD4   
02BD                UMMOD14:      
02BD   5F                     LD   E,A   
02BE   7C                     LD   A,H   
02BF   91                     SUB   C   
02C0   67                     LD   H,A   
02C1   7B                     LD   A,E   
02C2   98                     SBC   A,B   
02C3                UMMOD5:      
02C3   2C                     INC   L   
02C4   15                     DEC   D   
02C5   20 F2                  JR   NZ,UMMOD3   
02C7                UMMOD15:      
02C7   C9                     RET      
02C8                             ;   FM/MOD	( d n1 -- n2 n3 )		\ CORE
02C8                             ;		Signed floored divide of double by single. Return mod n2
02C8                             ;		and quotient n3.
02C8                             ; TODO: this is usually called M/MOD in eForth
02C8                          ;*Macro unroll: mCOLON	6,'M/MOD',MSMOD
02C8                          ;*Macro unroll:  mCODE 6, "M/MOD", MSMOD
02C8                          ALIGN   2   
02C8                MSMOD:       
02C8                VVCODE:   .SET   $   
02C8                VVLEN:    .SET   (6 & 01FH) / CELLL   
1F58                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F58                VVNAME:   .SET   $   
1F58   C8 02 68 1F            DW   vvCODE,vvLINK   
1F5C                VVLINK:   .SET   $   
1F5C   06 4D 2F 4D 4F 44      DB   6,"M/MOD"   
02C8                          .ORG   vvCODE   
02C8   00                     NOP      
02C9   CD 0E 06               CALL   doLIST   
02CC   24 10 60 01 24 10 08 10 DW   DUPP,ZLESS,DUPP,TOR   
02D4   3C 0E E0 02            DW   QBRAN,MMOD1   
02D8   9C 01 08 10 AA 01 16 10 DW   NEGAT,TOR,DNEGA,RFROM   
02E0                MMOD1:       
02E0   08 10 24 10 60 01      DW   TOR,DUPP,ZLESS   
02E6   3C 0E EE 02            DW   QBRAN,MMOD2   
02EA   7A 0E 86 01            DW   RAT,PLUS   
02EE                MMOD2:       
02EE   16 10 6A 02 16 10      DW   RFROM,UMMOD,RFROM   
02F4   3C 0E FE 02            DW   QBRAN,MMOD3   
02F8   2C 10 9C 01 2C 10      DW   SWAP,NEGAT,SWAP   
02FE                MMOD3:       
02FE   44 06                  DW   EXIT   
0300                             ;   /MOD        ( n n -- r q )
0300                             ;               Signed divide. Return mod and quotient.
0300                          ;*Macro unroll: mCOLON	4,'/MOD',SLMOD
0300                          ;*Macro unroll:  mCODE 4, "/MOD", SLMOD
0300                          ALIGN   2   
0300                SLMOD:       
0300                VVCODE:   .SET   $   
0300                VVLEN:    .SET   (4 & 01FH) / CELLL   
1F4E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F4E                VVNAME:   .SET   $   
1F4E   00 03 5C 1F            DW   vvCODE,vvLINK   
1F52                VVLINK:   .SET   $   
1F52   04 2F 4D 4F 44         DB   4,"/MOD"   
0300                          .ORG   vvCODE   
0300   00                     NOP      
0301   CD 0E 06               CALL   doLIST   
0304   34 10 60 01 2C 10 C8 02 44 06 DW   OVER,ZLESS,SWAP,MSMOD,EXIT   
030E                             ;   MOD         ( n n -- r )
030E                             ;               Signed divide. Return mod only.
030E                          ;*Macro unroll: mCOLON	3,'MOD',MODD
030E                          ;*Macro unroll:  mCODE 3, "MOD", MODD
030E                          ALIGN   2   
030E                MODD:        
030E                VVCODE:   .SET   $   
030E                VVLEN:    .SET   (3 & 01FH) / CELLL   
1F46                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F46                VVNAME:   .SET   $   
1F46   0E 03 52 1F            DW   vvCODE,vvLINK   
1F4A                VVLINK:   .SET   $   
1F4A   03 4D 4F 44            DB   3,"MOD"   
030E                          .ORG   vvCODE   
030E   00                     NOP      
030F   CD 0E 06               CALL   doLIST   
0312   00 03 28 10 44 06      DW   SLMOD,DROP,EXIT   
0318                             ; 
0318                             ;   /           ( n n -- q )
0318                             ;               Signed divide. Return quotient only.
0318                          ;*Macro unroll: mCOLON	1,'/',SLASH
0318                          ;*Macro unroll:  mCODE 1, "/", SLASH
0318                          ALIGN   2   
0318                SLASH:       
0318                VVCODE:   .SET   $   
0318                VVLEN:    .SET   (1 & 01FH) / CELLL   
1F40                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F40                VVNAME:   .SET   $   
1F40   18 03 4A 1F            DW   vvCODE,vvLINK   
1F44                VVLINK:   .SET   $   
1F44   01 2F                  DB   1,"/"   
0318                          .ORG   vvCODE   
0318   00                     NOP      
0319   CD 0E 06               CALL   doLIST   
031C   00 03 2C 10 28 10 44 06 DW   SLMOD,SWAP,DROP,EXIT   
0324                             ; Multiply
0324                             ;   UM*         ( u u -- ud )
0324                             ;               Unsigned multiply. Return double product.
0324                          ;*Macro unroll: mCODE	3,'UM*',UMSTA
0324                          ALIGN   2   
0324                UMSTA:       
0324                VVCODE:   .SET   $   
0324                VVLEN:    .SET   (3 & 01FH) / CELLL   
1F38                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F38                VVNAME:   .SET   $   
1F38   24 03 44 1F            DW   vvCODE,vvLINK   
1F3C                VVLINK:   .SET   $   
1F3C   03 55 4D 2A            DB   3,"UM*"   
0324                          .ORG   vvCODE   
0324   EB                     EX   DE,HL   
0325   E3                     EX   (SP),HL   
0326   EB                     EX   DE,HL   
0327   21 00 00               LD   HL,0   
032A   3E 10                  LD   A,010h   
032C                UMSTA1:      
032C   29                     ADD   HL,HL   
032D   EB                     EX   DE,HL   
032E   ED 6A                  ADC   HL,HL   
0330   EB                     EX   DE,HL   
0331   30 04                  JR   NC,UMSTA3   
0333                UMSTA2:      
0333   09                     ADD   HL,BC   
0334   30 01                  JR   NC,UMSTA3   
0336                UMSTA5:      
0336   13                     INC   DE   
0337                UMSTA3:      
0337   3D                     DEC   A   
0338   20 F2                  JR   NZ,UMSTA1   
033A                UMSTA4:      
033A   42                     LD   B,D   
033B   4B                     LD   C,E   
033C   E3                     EX   (SP),HL   
033D                          ;*Macro unroll: 	mNEXTHL
033D   FD E9                  JP   (IY)   
033F                             ;   *           ( n n -- n )
033F                             ;               Signed multiply. Return single product.
033F                          ;*Macro unroll: mCOLON	1,'*',STAR
033F                          ;*Macro unroll:  mCODE 1, "*", STAR
033F                          ALIGN   2   
0340                STAR:        
0340                VVCODE:   .SET   $   
0340                VVLEN:    .SET   (1 & 01FH) / CELLL   
1F32                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F32                VVNAME:   .SET   $   
1F32   40 03 3C 1F            DW   vvCODE,vvLINK   
1F36                VVLINK:   .SET   $   
1F36   01 2A                  DB   1,"*"   
0340                          .ORG   vvCODE   
0340   00                     NOP      
0341   CD 0E 06               CALL   doLIST   
0344   24 03 28 10 44 06      DW   UMSTA,DROP,EXIT   
034A                             ;   M*          ( n n -- d )
034A                             ;               Signed multiply. Return double product.
034A                          ;*Macro unroll: mCOLON	2,'M*',MSTAR,
034A                          ;*Macro unroll:  mCODE 2, "M*", MSTAR
034A                          ALIGN   2   
034A                MSTAR:       
034A                VVCODE:   .SET   $   
034A                VVLEN:    .SET   (2 & 01FH) / CELLL   
1F2A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F2A                VVNAME:   .SET   $   
1F2A   4A 03 36 1F            DW   vvCODE,vvLINK   
1F2E                VVLINK:   .SET   $   
1F2E   02 4D 2A               DB   2,"M*"   
034A                          .ORG   vvCODE   
034A   00                     NOP      
034B   CD 0E 06               CALL   doLIST   
034E   62 10 7C 01 60 01 08 10 CA 01 2C 10 CA 01 DW   DDUP,XORR,ZLESS,ToR,ABSS,SWAP,ABSS   
035C   24 03 16 10 3C 0E 66 03 DW   UMSTA,RFrom,QBRAN,MSTAR1   
0364   AA 01                  DW   DNEGA   
0366                MSTAR1:      
0366   44 06                  DW   EXIT   
0368                             ;   */MOD       ( n1 n2 n3 -- r q )
0368                             ;               Multiply n1 and n2, then divide by n3. Return mod and quotient.
0368                          ;*Macro unroll: mCOLON	5,'*/MOD',SSMOD
0368                          ;*Macro unroll:  mCODE 5, "*/MOD", SSMOD
0368                          ALIGN   2   
0368                SSMOD:       
0368                VVCODE:   .SET   $   
0368                VVLEN:    .SET   (5 & 01FH) / CELLL   
1F20                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F20                VVNAME:   .SET   $   
1F20   68 03 2E 1F            DW   vvCODE,vvLINK   
1F24                VVLINK:   .SET   $   
1F24   05 2A 2F 4D 4F 44      DB   5,"*/MOD"   
0368                          .ORG   vvCODE   
0368   00                     NOP      
0369   CD 0E 06               CALL   doLIST   
036C   08 10 4A 03 16 10 C8 02 44 06 DW   ToR,MStar,RFrom,MSMOD,EXIT   
0376                             ;   */          ( n1 n2 n3 -- q )
0376                             ;               Multiply n1 by n2, then divide by n3. Return quotient only.
0376                          ;*Macro unroll: mCOLON	2,'*/',STASL
0376                          ;*Macro unroll:  mCODE 2, "*/", STASL
0376                          ALIGN   2   
0376                STASL:       
0376                VVCODE:   .SET   $   
0376                VVLEN:    .SET   (2 & 01FH) / CELLL   
1F18                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F18                VVNAME:   .SET   $   
1F18   76 03 24 1F            DW   vvCODE,vvLINK   
1F1C                VVLINK:   .SET   $   
1F1C   02 2A 2F               DB   2,"*/"   
0376                          .ORG   vvCODE   
0376   00                     NOP      
0377   CD 0E 06               CALL   doLIST   
037A   68 03 2C 10 28 10 44 06 DW   SSMOD,SWAP,DROP,EXIT   
0382                             ;   CELL+       ( a -- a )
0382                             ;               Add cell size in byte to address.
0382                          ;*Macro unroll: mCOLON	5,'CELL+',CELLP
0382                          ;*Macro unroll:  mCODE 5, "CELL+", CELLP
0382                          ALIGN   2   
0382                CELLP:       
0382                VVCODE:   .SET   $   
0382                VVLEN:    .SET   (5 & 01FH) / CELLL   
1F0E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F0E                VVNAME:   .SET   $   
1F0E   82 03 1C 1F            DW   vvCODE,vvLINK   
1F12                VVLINK:   .SET   $   
1F12   05 43 45 4C 4C 2B      DB   5,"CELL+"   
0382                          .ORG   vvCODE   
0382   00                     NOP      
0383   CD 0E 06               CALL   doLIST   
0386   1C 06 02 00 86 01 44 06 DW   DOLIT,CELLL,PLUS,EXIT   
038E                             ;   CELL-       ( a -- a )
038E                             ;               Subtract cell size in byte from address.
038E                          ;*Macro unroll: mCOLON	5,'CELL-',CELLM
038E                          ;*Macro unroll:  mCODE 5, "CELL-", CELLM
038E                          ALIGN   2   
038E                CELLM:       
038E                VVCODE:   .SET   $   
038E                VVLEN:    .SET   (5 & 01FH) / CELLL   
1F04                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F04                VVNAME:   .SET   $   
1F04   8E 03 12 1F            DW   vvCODE,vvLINK   
1F08                VVLINK:   .SET   $   
1F08   05 43 45 4C 4C 2D      DB   5,"CELL-"   
038E                          .ORG   vvCODE   
038E   00                     NOP      
038F   CD 0E 06               CALL   doLIST   
0392   1C 06 FE FF 86 01 44 06 DW   DOLIT,-CELLL,PLUS,EXIT   
039A                             ;   CELLS       ( n -- n )
039A                             ;               Multiply tos by cell size in bytes.
039A                          ;*Macro unroll: mCOLON	5,'CELLS',CELLS
039A                          ;*Macro unroll:  mCODE 5, "CELLS", CELLS
039A                          ALIGN   2   
039A                CELLS:       
039A                VVCODE:   .SET   $   
039A                VVLEN:    .SET   (5 & 01FH) / CELLL   
1EFA                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1EFA                VVNAME:   .SET   $   
1EFA   9A 03 08 1F            DW   vvCODE,vvLINK   
1EFE                VVLINK:   .SET   $   
1EFE   05 43 45 4C 4C 53      DB   5,"CELLS"   
039A                          .ORG   vvCODE   
039A   00                     NOP      
039B   CD 0E 06               CALL   doLIST   
039E   1C 06 02 00 40 03 44 06 DW   DOLIT,CELLL,STAR,EXIT   
03A6                             ;   '           ( -- ca )
03A6                             ;               Search context vocabularies for the next word in input stream.
03A6                          ;*Macro unroll: mCOLON  1,"'",TICK
03A6                          ;*Macro unroll:  mCODE 1, "'", TICK
03A6                          ALIGN   2   
03A6                TICK:        
03A6                VVCODE:   .SET   $   
03A6                VVLEN:    .SET   (1 & 01FH) / CELLL   
1EF4                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1EF4                VVNAME:   .SET   $   
1EF4   A6 03 FE 1E            DW   vvCODE,vvLINK   
1EF8                VVLINK:   .SET   $   
1EF8   01 27                  DB   1,"'"   
03A6                          .ORG   vvCODE   
03A6   00                     NOP      
03A7   CD 0E 06               CALL   doLIST   
03AA   46 09 28 0A            DW   TOKEN,NAMEQ   ;?defined
03AE   3C 0E B4 03            DW   QBRAN,TICK1   
03B2   44 06                  DW   EXIT   ;yes, push code address
03B4                TICK1:       
03B4   8A 0A                  DW   THROW   ;no, error
03B6                             ;   ALLOT       ( n -- )
03B6                             ;               Allocate n bytes to the code dictionary.
03B6                          ;*Macro unroll: mCOLON  5,'ALLOT',ALLOT
03B6                          ;*Macro unroll:  mCODE 5, "ALLOT", ALLOT
03B6                          ALIGN   2   
03B6                ALLOT:       
03B6                VVCODE:   .SET   $   
03B6                VVLEN:    .SET   (5 & 01FH) / CELLL   
1EEA                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1EEA                VVNAME:   .SET   $   
1EEA   B6 03 F8 1E            DW   vvCODE,vvLINK   
1EEE                VVLINK:   .SET   $   
1EEE   05 41 4C 4C 4F 54      DB   5,"ALLOT"   
03B6                          .ORG   vvCODE   
03B6   00                     NOP      
03B7   CD 0E 06               CALL   doLIST   
03BA   44 11 A6 0E 44 06      DW   CP,PSTOR,EXIT   ;adjust code pointer
03C0                             ;   ,           ( w -- )
03C0                             ;               Compile an integer into the code dictionary.
03C0                          ;*Macro unroll: mCOLON  1,',',COMMA
03C0                          ;*Macro unroll:  mCODE 1, ",", COMMA
03C0                          ALIGN   2   
03C0                COMMA:       
03C0                VVCODE:   .SET   $   
03C0                VVLEN:    .SET   (1 & 01FH) / CELLL   
1EE4                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1EE4                VVNAME:   .SET   $   
1EE4   C0 03 EE 1E            DW   vvCODE,vvLINK   
1EE8                VVLINK:   .SET   $   
1EE8   01 2C                  DB   1,","   
03C0                          .ORG   vvCODE   
03C0   00                     NOP      
03C1   CD 0E 06               CALL   doLIST   
03C4   EA 0E 24 10 82 03      DW   HERE,DUPP,CELLP   ;cell boundary
03CA   44 11 58 0E 58 0E 44 06 DW   CP,STORE,STORE,EXIT   ;adjust code pointer, compile
03D2                             ;   [COMPILE]   ( -- ; <string> )
03D2                             ;               Compile the next immediate word into code dictionary.
03D2                          ;*Macro unroll: mCOLON  IMEDD+9,'[COMPILE]',BCOMP
03D2                          ;*Macro unroll:  mCODE IMEDD+9, "[COMPILE]", BCOMP
03D2                          ALIGN   2   
03D2                BCOMP:       
03D2                VVCODE:   .SET   $   
03D2                VVLEN:    .SET   (IMEDD+9 & 01FH) / CELLL   
1E96                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1E96                VVNAME:   .SET   $   
1E96   D2 03 E8 1E            DW   vvCODE,vvLINK   
1E9A                VVLINK:   .SET   $   
1E9A   49 5B 43 4F 4D 50 49 4C 45 5D DB   IMEDD+9,"[COMPILE]"   
03D2                          .ORG   vvCODE   
03D2   00                     NOP      
03D3   CD 0E 06               CALL   doLIST   
03D6   A6 03 C0 03 44 06      DW   TICK,COMMA,EXIT   
03DC                             ;   COMPILE     ( -- )
03DC                             ;               Compile the next address in colon list to code dictionary.
03DC                          ;*Macro unroll: mCOLON  COMPO+7,'COMPILE',COMPI
03DC                          ;*Macro unroll:  mCODE COMPO+7, "COMPILE", COMPI
03DC                          ALIGN   2   
03DC                COMPI:       
03DC                VVCODE:   .SET   $   
03DC                VVLEN:    .SET   (COMPO+7 & 01FH) / CELLL   
1E6A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1E6A                VVNAME:   .SET   $   
1E6A   DC 03 9A 1E            DW   vvCODE,vvLINK   
1E6E                VVLINK:   .SET   $   
1E6E   27 43 4F 4D 50 49 4C 45 DB   COMPO+7,"COMPILE"   
03DC                          .ORG   vvCODE   
03DC   00                     NOP      
03DD   CD 0E 06               CALL   doLIST   
03E0   16 10 24 10 62 0E C0 03 DW   RFROM,DUPP,AT,COMMA   ;compile address
03E8   82 03 08 10 44 06      DW   CELLP,TOR,EXIT   ;adjust return address
03EE                             ;   LITERAL     ( w -- )
03EE                             ;               Compile tos to code dictionary as an integer literal.
03EE                          ;*Macro unroll: mCOLON  IMEDD+7,'LITERAL',LITER
03EE                          ;*Macro unroll:  mCODE IMEDD+7, "LITERAL", LITER
03EE                          ALIGN   2   
03EE                LITER:       
03EE                VVCODE:   .SET   $   
03EE                VVLEN:    .SET   (IMEDD+7 & 01FH) / CELLL   
1E1E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1E1E                VVNAME:   .SET   $   
1E1E   EE 03 6E 1E            DW   vvCODE,vvLINK   
1E22                VVLINK:   .SET   $   
1E22   47 4C 49 54 45 52 41 4C DB   IMEDD+7,"LITERAL"   
03EE                          .ORG   vvCODE   
03EE   00                     NOP      
03EF   CD 0E 06               CALL   doLIST   
03F2   DC 03 1C 06 C0 03 44 06 DW   COMPI,DOLIT,COMMA,EXIT   
03FA                             ;   $,"         ( -- )
03FA                             ;               Compile a literal string up to next " .
03FA                          ;*Macro unroll: hCOLON  3,'$,|',STRCQ
03FA                          ;*Macro unroll:  hCODE 3, "$,|", STRCQ
03FA                          ALIGN   2   
03FA                STRCQ:       
03FA   00                     NOP      
03FB   CD 0E 06               CALL   doLIST   
03FE   1C 06 22 00 62 09      DW   DOLIT,$22,WORDD   ;move string to code dictionary
0404   D8 0E 86 01 D0 0F      DW   COUNT,PLUS,ALGND   ;calculate aligned end of string
040A   44 11 58 0E 44 06      DW   CP,STORE,EXIT   ;adjust the code pointer
0410                             ;   RECURSE     ( -- )
0410                             ;               Make the current word available for compilation.
0410                          ;*Macro unroll: mCOLON  IMEDD+7,'RECURSE',RECUR
0410                          ;*Macro unroll:  mCODE IMEDD+7, "RECURSE", RECUR
0410                          ALIGN   2   
0410                RECUR:       
0410                VVCODE:   .SET   $   
0410                VVLEN:    .SET   (IMEDD+7 & 01FH) / CELLL   
1DD2                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1DD2                VVNAME:   .SET   $   
1DD2   10 04 22 1E            DW   vvCODE,vvLINK   
1DD6                VVLINK:   .SET   $   
1DD6   47 52 45 43 55 52 53 45 DB   IMEDD+7,"RECURSE"   
0410                          .ORG   vvCODE   
0410   00                     NOP      
0411   CD 0E 06               CALL   doLIST   
0414   54 11 62 0E 6E 09 C0 03 44 06 DW   LAST,AT,NAMET,COMMA,EXIT   
041E                             ;   ?UNIQUE     ( a -- a )
041E                             ;               Display a warning message if the word already exists.
041E                          ;*Macro unroll: mCOLON  7,'?UNIQUE',UNIQU
041E                          ;*Macro unroll:  mCODE 7, "?UNIQUE", UNIQU
041E                          ALIGN   2   
041E                UNIQU:       
041E                VVCODE:   .SET   $   
041E                VVLEN:    .SET   (7 & 01FH) / CELLL   
1DC6                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1DC6                VVNAME:   .SET   $   
1DC6   1E 04 D6 1D            DW   vvCODE,vvLINK   
1DCA                VVLINK:   .SET   $   
1DCA   07 3F 55 4E 49 51 55 45 DB   7,"?UNIQUE"   
041E                          .ORG   vvCODE   
041E   00                     NOP      
041F   CD 0E 06               CALL   doLIST   
0422   24 10 28 0A            DW   DUPP,NAMEQ   ;?name exists
0426   3C 0E 3A 04            DW   QBRAN,UNIQ1   ;redefinitions are OK
042A                          ;*Macro unroll:  mDSTR   DOTQP,' reDef '         ;but warn the user
042A   80 0C                  DW   DOTQP   ;but warn the user
042C                VVLEN:    .SET   $   
042C   00 20 72 65 44 65 66 20 DB   0," reDef "   
0434                VVCODE:   .SET   $   
042C                          .ORG   vvLEN   
042C   07                     DB   vvCODE - vvLEN - 1   
0434                          .ORG   vvCODE   
0434   34 10 D8 0E 12 0C      DW   OVER,COUNT,TYPEE   ;just in case its not planned
043A                UNIQ1:       
043A   28 10 44 06            DW   DROP,EXIT   
043E                             ;   $,n         ( na -- )
043E                             ;               Build a new dictionary name using the string at na.
043E                          ;*Macro unroll: mCOLON  3,'$,n',SNAME
043E                          ;*Macro unroll:  mCODE 3, "$,n", SNAME
043E                          ALIGN   2   
043E                SNAME:       
043E                VVCODE:   .SET   $   
043E                VVLEN:    .SET   (3 & 01FH) / CELLL   
1DBE                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1DBE                VVNAME:   .SET   $   
1DBE   3E 04 CA 1D            DW   vvCODE,vvLINK   
1DC2                VVLINK:   .SET   $   
1DC2   03 24 2C 6E            DB   3,"$,n"   
043E                          .ORG   vvCODE   
043E   00                     NOP      
043F   CD 0E 06               CALL   doLIST   
0442   24 10 72 0E            DW   DUPP,CAT   ;?null input
0446   3C 0E 70 04            DW   QBRAN,PNAM1   
044A   1E 04                  DW   UNIQU   ;?redefinition
044C   24 10 54 11 58 0E      DW   DUPP,LAST,STORE   ;save na for vocabulary link
0452   EA 0E D0 0F 2C 10      DW   HERE,ALGND,SWAP   ;align code address
0458   8E 03                  DW   CELLM   ;link address
045A   3C 11 62 0E 62 0E 34 10 58 0E DW   CRRNT,AT,AT,OVER,STORE   
0464   8E 03 24 10 4C 11 58 0E DW   CELLM,DUPP,NP,STORE   ;adjust name pointer
046C   58 0E 44 06            DW   STORE,EXIT   ;save code pointer
0470                PNAM1:       
0470                          ;*Macro unroll:  mDSTR   STRQP,' name'           ;null input
0470   78 0C                  DW   STRQP   ;null input
0472                VVLEN:    .SET   $   
0472   00 20 6E 61 6D 65      DB   0," name"   
0478                VVCODE:   .SET   $   
0472                          .ORG   vvLEN   
0472   05                     DB   vvCODE - vvLEN - 1   
0478                          .ORG   vvCODE   
0478   8A 0A                  DW   THROW   
047A                             ;   $COMPILE    ( a -- )
047A                             ;               Compile next word to code dictionary as a token or literal.
047A                          ;*Macro unroll: hCOLON  8,'$COMPILE',SCOMP
047A                          ;*Macro unroll:  hCODE 8, "$COMPILE", SCOMP
047A                          ALIGN   2   
047A                SCOMP:       
047A   00                     NOP      
047B   CD 0E 06               CALL   doLIST   
047E   28 0A 3C 10            DW   NAMEQ,QDUP   ;?defined
0482   3C 0E 9A 04            DW   QBRAN,SCOM2   
0486   62 0E 1C 06 40 00 68 01 DW   AT,DOLIT,IMEDD,ANDD   ;?immediate
048E   3C 0E 96 04            DW   QBRAN,SCOM1   
0492   38 0E 44 06            DW   EXECU,EXIT   ;its immediate, execute
0496                SCOM1:       
0496   C0 03 44 06            DW   COMMA,EXIT   ;its not immediate, compile
049A                SCOM2:       
049A   1C 11 0E 0F            DW   TNUMB,ATEXE   ;try to convert to number
049E   3C 0E A6 04            DW   QBRAN,SCOM3   
04A2   EE 03 44 06            DW   LITER,EXIT   ;compile number as integer
04A6   8A 0A        SCOM3:    DW   THROW   ;error
04A8                             ;   OVERT       ( -- )
04A8                             ;               Link a new word into the current vocabulary.
04A8                          ;*Macro unroll: hCOLON  5,'OVERT',OVERT
04A8                          ;*Macro unroll:  hCODE 5, "OVERT", OVERT
04A8                          ALIGN   2   
04A8                OVERT:       
04A8   00                     NOP      
04A9   CD 0E 06               CALL   doLIST   
04AC   54 11 62 0E 3C 11 62 0E 58 0E 44 06 DW   LAST,AT,CRRNT,AT,STORE,EXIT   
04B8                             ;   ;           ( -- )
04B8                             ;               Terminate a colon definition.
04B8                          ;*Macro unroll: mCOLON  IMEDD+COMPO+1,';',SEMIS
04B8                          ;*Macro unroll:  mCODE IMEDD+COMPO+1, ";", SEMIS
04B8                          ALIGN   2   
04B8                SEMIS:       
04B8                VVCODE:   .SET   $   
04B8                VVLEN:    .SET   (IMEDD+COMPO+1 & 01FH) / CELLL   
1D58                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1D58                VVNAME:   .SET   $   
1D58   B8 04 C2 1D            DW   vvCODE,vvLINK   
1D5C                VVLINK:   .SET   $   
1D5C   61 3B                  DB   IMEDD+COMPO+1,";"   
04B8                          .ORG   vvCODE   
04B8   00                     NOP      
04B9   CD 0E 06               CALL   doLIST   
04BC   DC 03 44 06 04 0B A8 04 44 06 DW   COMPI,EXIT,LBRAC,OVERT,EXIT   
04C6                             ;   ]           ( -- )
04C6                             ;               Start compiling the words in the input stream.
04C6                          ;*Macro unroll: mCOLON  1,']',RBRAC
04C6                          ;*Macro unroll:  mCODE 1, "]", RBRAC
04C6                          ALIGN   2   
04C6                RBRAC:       
04C6                VVCODE:   .SET   $   
04C6                VVLEN:    .SET   (1 & 01FH) / CELLL   
1D52                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1D52                VVNAME:   .SET   $   
1D52   C6 04 5C 1D            DW   vvCODE,vvLINK   
1D56                VVLINK:   .SET   $   
1D56   01 5D                  DB   1,"]"   
04C6                          .ORG   vvCODE   
04C6   00                     NOP      
04C7   CD 0E 06               CALL   doLIST   
04CA   1C 06 7A 04 14 11 58 0E 44 06 DW   DOLIT,SCOMP,TEVAL,STORE,EXIT   
04D4                             ;   call,       ( ca -- )
04D4                             ;               Assemble a call instruction to ca.
04D4                          ;*Macro unroll: hCOLON  5,'call,',CALLC
04D4                          ;*Macro unroll:  hCODE 5, "call,", CALLC
04D4                          ALIGN   2   
04D4                CALLC:       
04D4   00                     NOP      
04D5   CD 0E 06               CALL   doLIST   
04D8   1C 06 00 CD C0 03      DW   DOLIT,CALLL,COMMA   ;Direct Threaded Code
04DE   C0 03 44 06            DW   COMMA,EXIT   ;DTC 8086 relative call
04E2                             ;   :           ( -- ; <string> )
04E2                             ;               Start a new colon definition using next word as its name.
04E2                          ;*Macro unroll: mCOLON  1,':',COLON
04E2                          ;*Macro unroll:  mCODE 1, ":", COLON
04E2                          ALIGN   2   
04E2                COLON:       
04E2                VVCODE:   .SET   $   
04E2                VVLEN:    .SET   (1 & 01FH) / CELLL   
1D4C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1D4C                VVNAME:   .SET   $   
1D4C   E2 04 56 1D            DW   vvCODE,vvLINK   
1D50                VVLINK:   .SET   $   
1D50   01 3A                  DB   1,":"   
04E2                          .ORG   vvCODE   
04E2   00                     NOP      
04E3   CD 0E 06               CALL   doLIST   
04E6   46 09 3E 04 1C 06 0E 06 DW   TOKEN,SNAME,DOLIT,DoLIST   
04EE   D4 04 C6 04 44 06      DW   CALLC,RBRAC,EXIT   
04F4                             ;   IMMEDIATE   ( -- )
04F4                             ;               Make the last compiled word an immediate word.
04F4                          ;*Macro unroll: mCOLON  9,'IMMEDIATE',IMMED
04F4                          ;*Macro unroll:  mCODE 9, "IMMEDIATE", IMMED
04F4                          ALIGN   2   
04F4                IMMED:       
04F4                VVCODE:   .SET   $   
04F4                VVLEN:    .SET   (9 & 01FH) / CELLL   
1D3E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1D3E                VVNAME:   .SET   $   
1D3E   F4 04 50 1D            DW   vvCODE,vvLINK   
1D42                VVLINK:   .SET   $   
1D42   09 49 4D 4D 45 44 49 41 54 45 DB   9,"IMMEDIATE"   
04F4                          .ORG   vvCODE   
04F4   00                     NOP      
04F5   CD 0E 06               CALL   doLIST   
04F8   1C 06 40 00 54 11 62 0E 62 0E 72 01 DW   DOLIT,IMEDD,LAST,AT,AT,ORR   
0504   54 11 62 0E 58 0E 44 06 DW   LAST,AT,STORE,EXIT   
050C                             ;   USER        ( u -- ; <string> )
050C                             ;               Compile a new user variable.
050C                          ;*Macro unroll: mCOLON  4,'USER',USER
050C                          ;*Macro unroll:  mCODE 4, "USER", USER
050C                          ALIGN   2   
050C                USER:        
050C                VVCODE:   .SET   $   
050C                VVLEN:    .SET   (4 & 01FH) / CELLL   
1D34                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1D34                VVNAME:   .SET   $   
1D34   0C 05 42 1D            DW   vvCODE,vvLINK   
1D38                VVLINK:   .SET   $   
1D38   04 55 53 45 52         DB   4,"USER"   
050C                          .ORG   vvCODE   
050C   00                     NOP      
050D   CD 0E 06               CALL   doLIST   
0510   46 09 3E 04 A8 04      DW   TOKEN,SNAME,OVERT   
0516   1C 06 0E 06 D4 04      DW   DOLIT,DoLIST,CALLC   
051C   DC 03 34 06 C0 03 44 06 DW   COMPI,DOUSE,COMMA,EXIT   
0524                             ;   CREATE      ( -- ; <string> )
0524                             ;               Compile a new array entry without allocating code space.
0524                          ;*Macro unroll: mCOLON  6,'CREATE',CREAT
0524                          ;*Macro unroll:  mCODE 6, "CREATE", CREAT
0524                          ALIGN   2   
0524                CREAT:       
0524                VVCODE:   .SET   $   
0524                VVLEN:    .SET   (6 & 01FH) / CELLL   
1D28                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1D28                VVNAME:   .SET   $   
1D28   24 05 38 1D            DW   vvCODE,vvLINK   
1D2C                VVLINK:   .SET   $   
1D2C   06 43 52 45 41 54 45   DB   6,"CREATE"   
0524                          .ORG   vvCODE   
0524   00                     NOP      
0525   CD 0E 06               CALL   doLIST   
0528   46 09 3E 04 A8 04      DW   TOKEN,SNAME,OVERT   
052E   1C 06 0E 06 D4 04      DW   DOLIT,DoLIST,CALLC   
0534   DC 03 24 06 44 06      DW   COMPI,DOVAR,EXIT   
053A                             ;   VARIABLE    ( -- ; <string> )
053A                             ;               Compile a new variable initialized to 0.
053A                          ;*Macro unroll: mCOLON  8,'VARIABLE',VARIA
053A                          ;*Macro unroll:  mCODE 8, "VARIABLE", VARIA
053A                          ALIGN   2   
053A                VARIA:       
053A                VVCODE:   .SET   $   
053A                VVLEN:    .SET   (8 & 01FH) / CELLL   
1D1A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1D1A                VVNAME:   .SET   $   
1D1A   3A 05 2C 1D            DW   vvCODE,vvLINK   
1D1E                VVLINK:   .SET   $   
1D1E   08 56 41 52 49 41 42 4C 45 DB   8,"VARIABLE"   
053A                          .ORG   vvCODE   
053A   00                     NOP      
053B   CD 0E 06               CALL   doLIST   
053E   24 05 1C 06 00 00 C0 03 44 06 DW   CREAT,DOLIT,0,COMMA,EXIT   
0548                             ;   FOR         ( -- a )
0548                             ;               Start a FOR-NEXT loop structure in a colon definition.
0548                          ;*Macro unroll: mCOLON  IMEDD+3,'FOR',FOR
0548                          ;*Macro unroll:  mCODE IMEDD+3, "FOR", FOR
0548                          ALIGN   2   
0548                FOR:         
0548                VVCODE:   .SET   $   
0548                VVLEN:    .SET   (IMEDD+3 & 01FH) / CELLL   
1CD2                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1CD2                VVNAME:   .SET   $   
1CD2   48 05 1E 1D            DW   vvCODE,vvLINK   
1CD6                VVLINK:   .SET   $   
1CD6   43 46 4F 52            DB   IMEDD+3,"FOR"   
0548                          .ORG   vvCODE   
0548   00                     NOP      
0549   CD 0E 06               CALL   doLIST   
054C   DC 03 08 10 EA 0E 44 06 DW   COMPI,TOR,HERE,EXIT   
0554                             ;   BEGIN       ( -- a )
0554                             ;               Start an infinite or indefinite loop structure.
0554                          ;*Macro unroll: mCOLON  IMEDD+5,'BEGIN',BEGIN
0554                          ;*Macro unroll:  mCODE IMEDD+5, "BEGIN", BEGIN
0554                          ALIGN   2   
0554                BEGIN:       
0554                VVCODE:   .SET   $   
0554                VVLEN:    .SET   (IMEDD+5 & 01FH) / CELLL   
1C88                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1C88                VVNAME:   .SET   $   
1C88   54 05 D6 1C            DW   vvCODE,vvLINK   
1C8C                VVLINK:   .SET   $   
1C8C   45 42 45 47 49 4E      DB   IMEDD+5,"BEGIN"   
0554                          .ORG   vvCODE   
0554   00                     NOP      
0555   CD 0E 06               CALL   doLIST   
0558   EA 0E 44 06            DW   HERE,EXIT   
055C                             ;   NEXT        ( a -- )
055C                             ;               Terminate a FOR-NEXT loop structure.
055C                          ;*Macro unroll: mCOLON  IMEDD+4,'NEXT',NEXT
055C                          ;*Macro unroll:  mCODE IMEDD+4, "NEXT", NEXT
055C                          ALIGN   2   
055C                NEXT:        
055C                VVCODE:   .SET   $   
055C                VVLEN:    .SET   (IMEDD+4 & 01FH) / CELLL   
1C3E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1C3E                VVNAME:   .SET   $   
1C3E   5C 05 8C 1C            DW   vvCODE,vvLINK   
1C42                VVLINK:   .SET   $   
1C42   44 4E 45 58 54         DB   IMEDD+4,"NEXT"   
055C                          .ORG   vvCODE   
055C   00                     NOP      
055D   CD 0E 06               CALL   doLIST   
0560   DC 03 72 06 C0 03 44 06 DW   COMPI,DONXT,COMMA,EXIT   
0568                             ;   UNTIL       ( a -- )
0568                             ;               Terminate a BEGIN-UNTIL indefinite loop structure.
0568                          ;*Macro unroll: mCOLON  IMEDD+5,'UNTIL',UNTIL
0568                          ;*Macro unroll:  mCODE IMEDD+5, "UNTIL", UNTIL
0568                          ALIGN   2   
0568                UNTIL:       
0568                VVCODE:   .SET   $   
0568                VVLEN:    .SET   (IMEDD+5 & 01FH) / CELLL   
1BF4                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1BF4                VVNAME:   .SET   $   
1BF4   68 05 42 1C            DW   vvCODE,vvLINK   
1BF8                VVLINK:   .SET   $   
1BF8   45 55 4E 54 49 4C      DB   IMEDD+5,"UNTIL"   
0568                          .ORG   vvCODE   
0568   00                     NOP      
0569   CD 0E 06               CALL   doLIST   
056C   DC 03 3C 0E C0 03 44 06 DW   COMPI,QBRAN,COMMA,EXIT   
0574                             ;   AGAIN       ( a -- )
0574                             ;               Terminate a BEGIN-AGAIN infinite loop structure.
0574                          ;*Macro unroll: mCOLON  IMEDD+5,'AGAIN',AGAIN
0574                          ;*Macro unroll:  mCODE IMEDD+5, "AGAIN", AGAIN
0574                          ALIGN   2   
0574                AGAIN:       
0574                VVCODE:   .SET   $   
0574                VVLEN:    .SET   (IMEDD+5 & 01FH) / CELLL   
1BAA                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1BAA                VVNAME:   .SET   $   
1BAA   74 05 F8 1B            DW   vvCODE,vvLINK   
1BAE                VVLINK:   .SET   $   
1BAE   45 41 47 41 49 4E      DB   IMEDD+5,"AGAIN"   
0574                          .ORG   vvCODE   
0574   00                     NOP      
0575   CD 0E 06               CALL   doLIST   
0578   DC 03 48 0E C0 03 44 06 DW   COMPI,BRAN,COMMA,EXIT   
0580                             ;   IF          ( -- A )
0580                             ;               Begin a conditional branch structure.
0580                          ;*Macro unroll: mCOLON  IMEDD+2,'IF',IFF
0580                          ;*Macro unroll:  mCODE IMEDD+2, "IF", IFF
0580                          ALIGN   2   
0580                IFF:         
0580                VVCODE:   .SET   $   
0580                VVLEN:    .SET   (IMEDD+2 & 01FH) / CELLL   
1B62                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1B62                VVNAME:   .SET   $   
1B62   80 05 AE 1B            DW   vvCODE,vvLINK   
1B66                VVLINK:   .SET   $   
1B66   42 49 46               DB   IMEDD+2,"IF"   
0580                          .ORG   vvCODE   
0580   00                     NOP      
0581   CD 0E 06               CALL   doLIST   
0584   DC 03 3C 0E EA 0E      DW   COMPI,QBRAN,HERE   
058A   1C 06 00 00 C0 03 44 06 DW   DOLIT,0,COMMA,EXIT   
0592                             ;   AHEAD       ( -- A )
0592                             ;               Compile a forward branch instruction.
0592                          ;*Macro unroll: mCOLON  IMEDD+5,'AHEAD',AHEAD
0592                          ;*Macro unroll:  mCODE IMEDD+5, "AHEAD", AHEAD
0592                          ALIGN   2   
0592                AHEAD:       
0592                VVCODE:   .SET   $   
0592                VVLEN:    .SET   (IMEDD+5 & 01FH) / CELLL   
1B18                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1B18                VVNAME:   .SET   $   
1B18   92 05 66 1B            DW   vvCODE,vvLINK   
1B1C                VVLINK:   .SET   $   
1B1C   45 41 48 45 41 44      DB   IMEDD+5,"AHEAD"   
0592                          .ORG   vvCODE   
0592   00                     NOP      
0593   CD 0E 06               CALL   doLIST   
0596   DC 03 48 0E EA 0E 1C 06 00 00 C0 03 44 06 DW   COMPI,BRAN,HERE,DOLIT,0,COMMA,EXIT   
05A4                             ;   REPEAT      ( A a -- )
05A4                             ;               Terminate a BEGIN-WHILE-REPEAT indefinite loop.
05A4                          ;*Macro unroll: mCOLON  IMEDD+6,'REPEAT',REPEA
05A4                          ;*Macro unroll:  mCODE IMEDD+6, "REPEAT", REPEA
05A4                          ALIGN   2   
05A4                REPEA:       
05A4                VVCODE:   .SET   $   
05A4                VVLEN:    .SET   (IMEDD+6 & 01FH) / CELLL   
1ACC                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1ACC                VVNAME:   .SET   $   
1ACC   A4 05 1C 1B            DW   vvCODE,vvLINK   
1AD0                VVLINK:   .SET   $   
1AD0   46 52 45 50 45 41 54   DB   IMEDD+6,"REPEAT"   
05A4                          .ORG   vvCODE   
05A4   00                     NOP      
05A5   CD 0E 06               CALL   doLIST   
05A8   74 05 EA 0E 2C 10 58 0E 44 06 DW   AGAIN,HERE,SWAP,STORE,EXIT   
05B2                             ;   THEN        ( A -- )
05B2                             ;               Terminate a conditional branch structure.
05B2                          ;*Macro unroll: mCOLON  IMEDD+4,'THEN',THENN
05B2                          ;*Macro unroll:  mCODE IMEDD+4, "THEN", THENN
05B2                          ALIGN   2   
05B2                THENN:       
05B2                VVCODE:   .SET   $   
05B2                VVLEN:    .SET   (IMEDD+4 & 01FH) / CELLL   
1A82                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1A82                VVNAME:   .SET   $   
1A82   B2 05 D0 1A            DW   vvCODE,vvLINK   
1A86                VVLINK:   .SET   $   
1A86   44 54 48 45 4E         DB   IMEDD+4,"THEN"   
05B2                          .ORG   vvCODE   
05B2   00                     NOP      
05B3   CD 0E 06               CALL   doLIST   
05B6   EA 0E 2C 10 58 0E 44 06 DW   HERE,SWAP,STORE,EXIT   
05BE                             ;   AFT         ( a -- a A )
05BE                             ;               Jump to THEN in a FOR-AFT-THEN-NEXT loop the 1st time through.
05BE                          ;*Macro unroll: mCOLON  IMEDD+3,'AFT',AFT
05BE                          ;*Macro unroll:  mCODE IMEDD+3, "AFT", AFT
05BE                          ALIGN   2   
05BE                AFT:         
05BE                VVCODE:   .SET   $   
05BE                VVLEN:    .SET   (IMEDD+3 & 01FH) / CELLL   
1A3A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1A3A                VVNAME:   .SET   $   
1A3A   BE 05 86 1A            DW   vvCODE,vvLINK   
1A3E                VVLINK:   .SET   $   
1A3E   43 41 46 54            DB   IMEDD+3,"AFT"   
05BE                          .ORG   vvCODE   
05BE   00                     NOP      
05BF   CD 0E 06               CALL   doLIST   
05C2   28 10 92 05 54 05 2C 10 44 06 DW   DROP,AHEAD,BEGIN,SWAP,EXIT   
05CC                             ;   ELSE        ( A -- A )
05CC                             ;               Start the false clause in an IF-ELSE-THEN structure.
05CC                          ;*Macro unroll: mCOLON  IMEDD+4,'ELSE',ELSEE
05CC                          ;*Macro unroll:  mCODE IMEDD+4, "ELSE", ELSEE
05CC                          ALIGN   2   
05CC                ELSEE:       
05CC                VVCODE:   .SET   $   
05CC                VVLEN:    .SET   (IMEDD+4 & 01FH) / CELLL   
19F0                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
19F0                VVNAME:   .SET   $   
19F0   CC 05 3E 1A            DW   vvCODE,vvLINK   
19F4                VVLINK:   .SET   $   
19F4   44 45 4C 53 45         DB   IMEDD+4,"ELSE"   
05CC                          .ORG   vvCODE   
05CC   00                     NOP      
05CD   CD 0E 06               CALL   doLIST   
05D0   92 05 2C 10 B2 05 44 06 DW   AHEAD,SWAP,THENN,EXIT   
05D8                             ;   WHILE       ( a -- A a )
05D8                             ;               Conditional branch out of a BEGIN-WHILE-REPEAT loop.
05D8                          ;*Macro unroll: mCOLON  IMEDD+5,'WHILE',WHILE
05D8                          ;*Macro unroll:  mCODE IMEDD+5, "WHILE", WHILE
05D8                          ALIGN   2   
05D8                WHILE:       
05D8                VVCODE:   .SET   $   
05D8                VVLEN:    .SET   (IMEDD+5 & 01FH) / CELLL   
19A6                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
19A6                VVNAME:   .SET   $   
19A6   D8 05 F4 19            DW   vvCODE,vvLINK   
19AA                VVLINK:   .SET   $   
19AA   45 57 48 49 4C 45      DB   IMEDD+5,"WHILE"   
05D8                          .ORG   vvCODE   
05D8   00                     NOP      
05D9   CD 0E 06               CALL   doLIST   
05DC   80 05 2C 10 44 06      DW   IFF,SWAP,EXIT   
05E2                             ;   ABORT"      ( -- ; <string> )
05E2                             ;               Conditional abort with an error message.
05E2                          ;*Macro unroll: mCOLON  IMEDD+6,'ABORTQ',ABRTQ
05E2                          ;*Macro unroll:  mCODE IMEDD+6, "ABORTQ", ABRTQ
05E2                          ALIGN   2   
05E2                ABRTQ:       
05E2                VVCODE:   .SET   $   
05E2                VVLEN:    .SET   (IMEDD+6 & 01FH) / CELLL   
195A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
195A                VVNAME:   .SET   $   
195A   E2 05 AA 19            DW   vvCODE,vvLINK   
195E                VVLINK:   .SET   $   
195E   46 41 42 4F 52 54 51   DB   IMEDD+6,"ABORTQ"   
05E2                          .ORG   vvCODE   
05E2   00                     NOP      
05E3   CD 0E 06               CALL   doLIST   
05E6   DC 03 BE 0A FA 03 44 06 DW   COMPI,ABORQ,STRCQ,EXIT   
05EE                             ;   $"          ( -- ; <string> )
05EE                             ;               Compile an inline string literal.
05EE                          ;*Macro unroll: hCOLON  IMEDD+2,'$|',STRQ
05EE                          ;*Macro unroll:  hCODE IMEDD+2, "$|", STRQ
05EE                          ALIGN   2   
05EE                STRQ:        
05EE   00                     NOP      
05EF   CD 0E 06               CALL   doLIST   
05F2   DC 03 78 0C FA 03 44 06 DW   COMPI,STRQP,STRCQ,EXIT   
05FA                             ;   ."          ( -- ; <string> )
05FA                             ;               Compile an inline string literal to be typed out at run time.
05FA                          ;*Macro unroll: hCOLON  IMEDD+2,'.|',DOTQ
05FA                          ;*Macro unroll:  hCODE IMEDD+2, ".|", DOTQ
05FA                          ALIGN   2   
05FA                DOTQ:        
05FA   00                     NOP      
05FB   CD 0E 06               CALL   doLIST   
05FE   DC 03 80 0C FA 03 44 06 DW   COMPI,DOTQP,STRCQ,EXIT   
0606                             ; ;   UNLOOP	( -- ) ( R: loop-sys -- )	\ CORE
0606                             ; ;		Discard loop-control parameters for the current nesting level.
0606                             ; ;		An UNLOOP is required for each nesting level before the
0606                             ; ;		definition may be EXITed.
0606                             ; mCOLON	COMPO+6,"UNLOOP",UNLOOP
0606                             ; 	DW	RFrom,RFrom,RFrom,DDROP,ToR,EXIT
0606                             ;   doCONST	( -- x )
0606                             ;	Run-time routine of CONSTANT and VARIABLE.
0606                          ;*Macro unroll: hCODE	COMPO+7, 'doCONST', DoCONST
0606                          ALIGN   2   
0606                DOCONST:      
0606   E1                     POP   HL   ;10t
0607   C5                     PUSH   BC   ;11t
0608   4E                     LD   C,(HL)   ; 7t
0609   23                     INC   HL   ; 6t
060A   46                     LD   B,(HL)   ; 7t
060B                          ;*Macro unroll:  mNEXT
060B   EB                     EX   DE,HL   
060C                          ;*Macro unroll:  mNEXTHL                         ; 34t
060C   FD E9                  JP   (IY)   ; 34t
060E                             ;   doLIST	( -- ) ( R: -- nest-sys )
060E                             ;	Process colon list.
060E                          ;*Macro unroll: hCODE	COMPO+6, 'doLIST', DoLIST
060E                          ALIGN   2   
060E                DOLIST:      
060E   DD 2B                  DEC   IX   ;10t
0610   DD 72 00               LD   (IX+0),D   ;19t
0613   DD 2B                  DEC   IX   ;10t
0615   DD 73 00               LD   (IX+0),E   ;19t
0618   E1                     POP   HL   ;10t
0619                          ;*Macro unroll:  mNEXTHL							
0619   FD E9                  JP   (IY)   
061B                             ;   DOLIT	( -- x )
061B                             ;	Push an inline literal.
061B                          ;*Macro unroll: hCODE	COMPO+5, 'DOLIT', DOLIT
061B                          ALIGN   2   
061C                DOLIT:       
061C   C5                     PUSH   BC   ; 11t
061D   EB                     EX   DE,HL   ; 4t
061E   4E                     LD   C,(HL)   ; 7t
061F   23                     INC   HL   ; 6t
0620   46                     LD   B,(HL)   ; 7t
0621   23                     INC   HL   ; 6t
0622                          ;*Macro unroll:  mNEXTHL
0622   FD E9                  JP   (IY)   
0624                             ;   doVAR       ( -- a )
0624                             ;   Run time routine for VARIABLE and CREATE.
0624                          ;*Macro unroll: hCOLON  COMPO+5, 'doVAR', DoVAR
0624                          ;*Macro unroll:  hCODE COMPO+5, "doVAR", DoVAR
0624                          ALIGN   2   
0624                DOVAR:       
0624   00                     NOP      
0625   CD 0E 06               CALL   doLIST   
0628   16 10 44 06            DW   RFROM,EXIT   
062C                             ;   UP          ( -- a )
062C                             ;   Pointer to the user area.
062C                          ;*Macro unroll: hCOLON  2, 'UP', UP
062C                          ;*Macro unroll:  hCODE 2, "UP", UP
062C                          ALIGN   2   
062C                UP:          
062C   00                     NOP      
062D   CD 0E 06               CALL   doLIST   
0630   24 06                  DW   DoVAR   
0632   00 24                  DW   UPP   
0634                             ;   doUSER      ( -- a )
0634                             ;   Run time routine for user variables.
0634                          ;*Macro unroll: hCOLON  COMPO+6,'doUSER',DOUSE
0634                          ;*Macro unroll:  hCODE COMPO+6, "doUSER", DOUSE
0634                          ALIGN   2   
0634                DOUSE:       
0634   00                     NOP      
0635   CD 0E 06               CALL   doLIST   
0638   16 10 62 0E 2C 06 62 0E 86 01 44 06 DW   RFROM,AT,UP,AT,PLUS,EXIT   
0644                             ;   EXIT	( -- ) ( R: nest-sys -- )	\ CORE
0644                             ;	Return control to the calling definition.
0644                          ;*Macro unroll: mCODE	COMPO+4, 'EXIT', EXIT
0644                          ALIGN   2   
0644                EXIT:        
0644                VVCODE:   .SET   $   
0644                VVLEN:    .SET   (COMPO+4 & 01FH) / CELLL   
1930                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1930                VVNAME:   .SET   $   
1930   44 06 5E 19            DW   vvCODE,vvLINK   
1934                VVLINK:   .SET   $   
1934   24 45 58 49 54         DB   COMPO+4,"EXIT"   
0644                          .ORG   vvCODE   
0644   DD 6E 00               LD   L,(IX+0)   
0647   DD 23                  INC   IX   
0649   DD 66 00               LD   H,(IX+0)   
064C   DD 23                  INC   IX   
064E                          ;*Macro unroll:  mNEXTHL
064E   FD E9                  JP   (IY)   
0650                             ;   doDO	( n1|u1 n2|u2 -- ) ( R: -- n1 n2-n1-max_negative )
0650                             ;		Run-time funtion of DO.
0650                             ; 
0650                             ;   : doDO	>R max-negative + R> OVER - SWAP R> SWAP >R SWAP >R >R ;
0650                          ;*Macro unroll: hCOLON	COMPO+4,'doDO',DoDO
0650                          ;*Macro unroll:  hCODE COMPO+4, "doDO", DoDO
0650                          ALIGN   2   
0650                DODO:        
0650   00                     NOP      
0651   CD 0E 06               CALL   doLIST   
0654   08 10 1C 06 00 80 86 01 16 10 DW   ToR,DOLIT,MaxNegative,Plus,RFrom   
065E   34 10 C0 01 2C 10 16 10 2C 10 08 10 2C 10 08 10 08 10 44 06 DW   OVER,SUBB,SWAP,RFrom,SWAP,ToR,SWAP,ToR,ToR,EXIT   
0672                             ; ;   doLOOP	( -- ) ( R: loop-sys1 -- | loop-sys2 )
0672                             ; ;		Run time routine for LOOP.
0672                             ; hCODE	COMPO+6,"doLOOP",DoLOOP
0672                             ; 	PUSH IX	        ; 15t
0672                             ; 	POP	HL	        ; 10t
0672                             ; 	INC	(HL)	    ; 11t
0672                             ; 	JR Z,DOLOOP2	; 12/7t a fast dec is ok, only
0672                             ; DOLOOP1: 	
0672                             ;     LD	A,(DE)	    ; 7t go back to the loop
0672                             ; 	LD	L,A	        ; 4t
0672                             ; 	INC	DE	        ; 6t
0672                             ; 	LD	A,(DE)	    ; 7t
0672                             ; 	LD	H,A	        ; 4t
0672                             ; 	mNEXTHL
0672                             ; DOLOOP2: 	
0672                             ;     INC	HL	        ; 6t
0672                             ; 	INC	(HL)	    ;11t
0672                             ; 	JP PO,DOLOOP1   ;10/7t ?loop end
0672                             ; 	EX	DE,HL	    ; 4t yes,continue past the BRAN offset
0672                             ; 	LD	DE,4	    ;10t clear return stack
0672                             ; 	ADD IX,DE	    ;15h
0672                             ; 	INC	HL	        ; 6t
0672                             ; 	INC	HL	        ; 6t
0672                             ; 	mNEXTHL
0672                             ; ;   do+LOOP	( n -- ) ( R: loop-sys1 -- | loop-sys2 )
0672                             ; ;		Run time routine for +LOOP.
0672                             ; hCODE	COMPO+7,"do+LOOP",DoPLOOP
0672                             ; 	POP	HL	        ;10t this will be the new TOS
0672                             ; 	PUSH	BC	    ;11t
0672                             ; 	LD	B,H	        ; 4t
0672                             ; 	LD	C,L	        ; 4t
0672                             ; 	EXX		        ; 4t
0672                             ; 	POP	BC	        ;10t old TOS = loop increment
0672                             ; 	LD L,(IX+0)     ;19t
0672                             ; 	LD H,(IX+1)     ;19t
0672                             ; 	OR	A	        ; 4t clear carry
0672                             ; 	ADC HL,BC	    ;15t
0672                             ; 	JP PE,DOPLP1	;10/7t ?loop end
0672                             ; 	LD (IX+0),L     ;19t   no, go back
0672                             ; 	LD (IX+1),H     ;19t
0672                             ; 	EXX		        ; 4t
0672                             ; 	LD	A,(DE)	    ; 7t go back to the loop
0672                             ; 	LD	L,A	        ; 4t
0672                             ; 	INC	DE	        ; 6t
0672                             ; 	LD	A,(DE)	    ; 7t
0672                             ; 	LD	H,A	        ; 4t
0672                             ; 	mNEXTHL
0672                             ; DOPLP1:		
0672                             ;     LD	BC,4	    ;10t clear return stack
0672                             ; 	ADD IX,BC	    ;15h
0672                             ; 	EXX		        ; 4t
0672                             ; 	INC	DE	        ; 6t yes,continue past the BRAN offset
0672                             ; 	INC	DE	        ; 6t
0672                             ; 	mNEXT
0672                             ;   next        ( -- )
0672                             ;               Run time code for the single index loop.
0672                             ;               : next ( -- ) \ hilevel model
0672                             ;                 r> r> dup if 1 - >r @ >r exit then drop cell+ >r ;
0672                          ;*Macro unroll: mCODE   COMPO+4,'next',DONXT
0672                          ALIGN   2   
0672                DONXT:       
0672                VVCODE:   .SET   $   
0672                VVLEN:    .SET   (COMPO+4 & 01FH) / CELLL   
1906                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1906                VVNAME:   .SET   $   
1906   72 06 34 19            DW   vvCODE,vvLINK   
190A                VVLINK:   .SET   $   
190A   24 6E 65 78 74         DB   COMPO+4,"next"   
0672                          .ORG   vvCODE   
0672   DD E5                  PUSH   IX   
0674   E1                     POP   HL   ; load rp into HL
0675   7E                     LD   A,(HL)   ; a = low byte of r@
0676   B7                     OR   A   
0677   20 10                  JR   NZ,DECLOW   ; low > 0 goto dec low
0679   23                     INC   HL   
067A   7E                     LD   A,(HL)   ; a = high byte of r@
067B   B7                     OR   A   
067C   20 09                  JR   NZ,DECHILO   ; high > 0 goto dec hi dec lo
067E   23                     INC   HL   
067F   E5                     PUSH   HL   
0680   DD E1                  POP   IX   ; pop r@
0682   13                     INC   DE   ; IP = skip following word
0683   13                     INC   DE   
0684                          ;*Macro unroll:  mNEXT                               ; continue
0684   EB                     EX   DE,HL   ; continue
0685                          ;*Macro unroll:  mNEXTHL                         ; 34t
0685   FD E9                  JP   (IY)   ; 34t
0687                DECHILO:      
0687   35                     DEC   (HL)   ; dec high byte of r@
0688   2B                     DEC   HL   
0689                DECLOW:      
0689   35                     DEC   (HL)   ; dec low byte of r@
068A   6B                     LD   L,E   ; DE points to location of loop address
068B   62                     LD   H,D   
068C   5E                     LD   E,(HL)   ; DE points to loop address
068D   23                     INC   HL   
068E   56                     LD   D,(HL)   
068F                          ;*Macro unroll:  mNEXT                               ; continue to loop address
068F   EB                     EX   DE,HL   ; continue to loop address
0690                          ;*Macro unroll:  mNEXTHL                         ; 34t
0690   FD E9                  JP   (IY)   ; 34t
0692                             ;   DIGIT       ( u -- c )
0692                             ;               Convert digit u to a character.
0692                          ;*Macro unroll: hCOLON  5,'DIGIT',DIGIT
0692                          ;*Macro unroll:  hCODE 5, "DIGIT", DIGIT
0692                          ALIGN   2   
0692                DIGIT:       
0692   00                     NOP      
0693   CD 0E 06               CALL   doLIST   
0696   1C 06 09 00 34 10 0C 02 DW   DOLIT,9,OVER,LESS   
069E   1C 06 07 00 68 01 86 01 DW   DOLIT,7,ANDD,PLUS   
06A6   1C 06 86 01 44 06      DW   DOLIT,"0",PLUS,EXIT   
06AC                             ;   EXTRACT     ( n base -- n c )
06AC                             ;               Extract the least significant digit from n.
06AC                          ;*Macro unroll: hCOLON  7,'EXTRACT',EXTRC
06AC                          ;*Macro unroll:  hCODE 7, "EXTRACT", EXTRC
06AC                          ALIGN   2   
06AC                EXTRC:       
06AC   00                     NOP      
06AD   CD 0E 06               CALL   doLIST   
06B0   1C 06 00 00 2C 10 6A 02 DW   DOLIT,0,SWAP,UMMOD   
06B8   2C 10 92 06 44 06      DW   SWAP,DIGIT,EXIT   
06BE                             ;   <#          ( -- )
06BE                             ;               Initiate the numeric output process.
06BE                          ;*Macro unroll: mCOLON  2,'<#',BDIGS
06BE                          ;*Macro unroll:  mCODE 2, "<#", BDIGS
06BE                          ALIGN   2   
06BE                BDIGS:       
06BE                VVCODE:   .SET   $   
06BE                VVLEN:    .SET   (2 & 01FH) / CELLL   
18FE                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
18FE                VVNAME:   .SET   $   
18FE   BE 06 0A 19            DW   vvCODE,vvLINK   
1902                VVLINK:   .SET   $   
1902   02 3C 23               DB   2,"<#"   
06BE                          .ORG   vvCODE   
06BE   00                     NOP      
06BF   CD 0E 06               CALL   doLIST   
06C2   F4 0E 24 11 58 0E 44 06 DW   PAD,HLD,STORE,EXIT   
06CA                             ;   HOLD        ( c -- )
06CA                             ;               Insert a character into the numeric output string.
06CA                          ;*Macro unroll: mCOLON  4,'HOLD',HOLD
06CA                          ;*Macro unroll:  mCODE 4, "HOLD", HOLD
06CA                          ALIGN   2   
06CA                HOLD:        
06CA                VVCODE:   .SET   $   
06CA                VVLEN:    .SET   (4 & 01FH) / CELLL   
18F4                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
18F4                VVNAME:   .SET   $   
18F4   CA 06 02 19            DW   vvCODE,vvLINK   
18F8                VVLINK:   .SET   $   
18F8   04 48 4F 4C 44         DB   4,"HOLD"   
06CA                          .ORG   vvCODE   
06CA   00                     NOP      
06CB   CD 0E 06               CALL   doLIST   
06CE   24 11 62 0E 1C 06 01 00 C0 01 DW   HLD,AT,DOLIT,1,SUBB   
06D8   24 10 24 11 58 0E 6A 0E 44 06 DW   DUPP,HLD,STORE,CSTOR,EXIT   
06E2                             ;   #           ( u -- u )
06E2                             ;               Extract one digit from u and append the digit to output string.
06E2                          ;*Macro unroll: mCOLON  1,'#',DIG
06E2                          ;*Macro unroll:  mCODE 1, "#", DIG
06E2                          ALIGN   2   
06E2                DIG:         
06E2                VVCODE:   .SET   $   
06E2                VVLEN:    .SET   (1 & 01FH) / CELLL   
18EE                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
18EE                VVNAME:   .SET   $   
18EE   E2 06 F8 18            DW   vvCODE,vvLINK   
18F2                VVLINK:   .SET   $   
18F2   01 23                  DB   1,"#"   
06E2                          .ORG   vvCODE   
06E2   00                     NOP      
06E3   CD 0E 06               CALL   doLIST   
06E6   E4 10 62 0E AC 06 CA 06 44 06 DW   BASE,AT,EXTRC,HOLD,EXIT   
06F0                             ;   #S          ( u -- 0 )
06F0                             ;               Convert u until all digits are added to the output string.
06F0                          ;*Macro unroll: mCOLON  2,'#S',DIGS
06F0                          ;*Macro unroll:  mCODE 2, "#S", DIGS
06F0                          ALIGN   2   
06F0                DIGS:        
06F0                VVCODE:   .SET   $   
06F0                VVLEN:    .SET   (2 & 01FH) / CELLL   
18E6                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
18E6                VVNAME:   .SET   $   
18E6   F0 06 F2 18            DW   vvCODE,vvLINK   
18EA                VVLINK:   .SET   $   
18EA   02 23 53               DB   2,"#S"   
06F0                          .ORG   vvCODE   
06F0   00                     NOP      
06F1   CD 0E 06               CALL   doLIST   
06F4                DIGS1:       
06F4   E2 06 24 10            DW   DIG,DUPP   
06F8   3C 0E 00 07            DW   QBRAN,DIGS2   
06FC   48 0E F4 06            DW   BRAN,DIGS1   
0700                DIGS2:       
0700   44 06                  DW   EXIT   
0702                             ;   SIGN        ( n -- )
0702                             ;               Add a minus sign to the numeric output string.
0702                          ;*Macro unroll: mCOLON	4,'SIGN',SIGN
0702                          ;*Macro unroll:  mCODE 4, "SIGN", SIGN
0702                          ALIGN   2   
0702                SIGN:        
0702                VVCODE:   .SET   $   
0702                VVLEN:    .SET   (4 & 01FH) / CELLL   
18DC                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
18DC                VVNAME:   .SET   $   
18DC   02 07 EA 18            DW   vvCODE,vvLINK   
18E0                VVLINK:   .SET   $   
18E0   04 53 49 47 4E         DB   4,"SIGN"   
0702                          .ORG   vvCODE   
0702   00                     NOP      
0703   CD 0E 06               CALL   doLIST   
0706   60 01 3C 0E 12 07      DW   ZLESS,QBRAN,SIGN1   
070C   1C 06 2D 00 CA 06      DW   DoLIT,MINUSS,HOLD   
0712                SIGN1:       
0712   44 06                  DW   EXIT   
0714                             ;   #>          ( w -- b u )
0714                             ;               Prepare the output string to be TYPE'd.
0714                          ;*Macro unroll: mCOLON  2,'#>',EDIGS
0714                          ;*Macro unroll:  mCODE 2, "#>", EDIGS
0714                          ALIGN   2   
0714                EDIGS:       
0714                VVCODE:   .SET   $   
0714                VVLEN:    .SET   (2 & 01FH) / CELLL   
18D4                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
18D4                VVNAME:   .SET   $   
18D4   14 07 E0 18            DW   vvCODE,vvLINK   
18D8                VVLINK:   .SET   $   
18D8   02 23 3E               DB   2,"#>"   
0714                          .ORG   vvCODE   
0714   00                     NOP      
0715   CD 0E 06               CALL   doLIST   
0718   28 10 24 11 62 0E      DW   DROP,HLD,AT   
071E   F4 0E 34 10 C0 01 44 06 DW   PAD,OVER,SUBB,EXIT   
0726                             ;   str         ( n -- b u )
0726                             ;               Convert a signed integer to a numeric string.
0726                          ;*Macro unroll: hCOLON  3,'str',STR
0726                          ;*Macro unroll:  hCODE 3, "str", STR
0726                          ALIGN   2   
0726                STR:         
0726   00                     NOP      
0727   CD 0E 06               CALL   doLIST   
072A   24 10 08 10 CA 01      DW   DUPP,TOR,ABSS   
0730   BE 06 F0 06 16 10      DW   BDIGS,DIGS,RFROM   
0736   02 07 14 07 44 06      DW   SIGN,EDIGS,EXIT   
073C                             ;   HEX         ( -- )
073C                             ;               Use radix 16 as base for numeric conversions.
073C                          ;*Macro unroll: mCOLON  3,'HEX',HEX
073C                          ;*Macro unroll:  mCODE 3, "HEX", HEX
073C                          ALIGN   2   
073C                HEX:         
073C                VVCODE:   .SET   $   
073C                VVLEN:    .SET   (3 & 01FH) / CELLL   
18CC                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
18CC                VVNAME:   .SET   $   
18CC   3C 07 D8 18            DW   vvCODE,vvLINK   
18D0                VVLINK:   .SET   $   
18D0   03 48 45 58            DB   3,"HEX"   
073C                          .ORG   vvCODE   
073C   00                     NOP      
073D   CD 0E 06               CALL   doLIST   
0740   1C 06 10 00 E4 10 58 0E 44 06 DW   DOLIT,16,BASE,STORE,EXIT   
074A                             ;   DECIMAL     ( -- )
074A                             ;               Use radix 10 as base for numeric conversions.
074A                          ;*Macro unroll: mCOLON  7,'DECIMAL',DECIMAL
074A                          ;*Macro unroll:  mCODE 7, "DECIMAL", DECIMAL
074A                          ALIGN   2   
074A                DECIMAL:      
074A                VVCODE:   .SET   $   
074A                VVLEN:    .SET   (7 & 01FH) / CELLL   
18C0                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
18C0                VVNAME:   .SET   $   
18C0   4A 07 D0 18            DW   vvCODE,vvLINK   
18C4                VVLINK:   .SET   $   
18C4   07 44 45 43 49 4D 41 4C DB   7,"DECIMAL"   
074A                          .ORG   vvCODE   
074A   00                     NOP      
074B   CD 0E 06               CALL   doLIST   
074E   1C 06 10 00 E4 10 58 0E 44 06 DW   DOLIT,16,BASE,STORE,EXIT   
0758                             ;   BL          ( -- 32 )
0758                             ;               Return 32, the blank character.
0758                          ;*Macro unroll: mCOLON	2,'BL',BLANK
0758                          ;*Macro unroll:  mCODE 2, "BL", BLANK
0758                          ALIGN   2   
0758                BLANK:       
0758                VVCODE:   .SET   $   
0758                VVLEN:    .SET   (2 & 01FH) / CELLL   
18B8                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
18B8                VVNAME:   .SET   $   
18B8   58 07 C4 18            DW   vvCODE,vvLINK   
18BC                VVLINK:   .SET   $   
18BC   02 42 4C               DB   2,"BL"   
0758                          .ORG   vvCODE   
0758   00                     NOP      
0759   CD 0E 06               CALL   doLIST   
075C   1C 06 20 00 44 06      DW   DoLIT,SPACEE,EXIT   
0762                             ;   >CHAR       ( c -- c )
0762                             ;               Filter non-printing characters.
0762                          ;*Macro unroll: hCOLON  5,'>CHAR',TCHAR
0762                          ;*Macro unroll:  hCODE 5, ">CHAR", TCHAR
0762                          ALIGN   2   
0762                TCHAR:       
0762   00                     NOP      
0763   CD 0E 06               CALL   doLIST   
0766   1C 06 7F 00 68 01 24 10 DW   DoLIT,$7F,ANDD,DUPP   ;mask msb
076E   1C 06 7F 00            DW   DoLIT,127   
0772   1C 06 20 00 4C 02      DW   DoLIT,SPACEE,WITHI   ;check for printable
0778   3C 0E 82 07            DW   QBRAN,TCHA1   
077C   28 10 1C 06 5F 00      DW   DROP,DoLIT,UNDERSC   ;replace non-printables
0782                TCHA1:       
0782   44 06                  DW   EXIT   
0784                             ;   DIGIT?      ( c base -- u t )
0784                             ;               Convert a character to its numeric value. A flag indicates success.
0784                          ;*Macro unroll: hCOLON  6,'DIGIT?',DIGTQ
0784                          ;*Macro unroll:  hCODE 6, "DIGIT?", DIGTQ
0784                          ALIGN   2   
0784                DIGTQ:       
0784   00                     NOP      
0785   CD 0E 06               CALL   doLIST   
0788   08 10 1C 06 C0 01      DW   TOR,DOLIT,"0",SUBB   
078E   1C 06 09 00 34 10 0C 02 DW   DOLIT,9,OVER,LESS   
0796   3C 0E AA 07            DW   QBRAN,DGTQ1   
079A   1C 06 07 00 C0 01      DW   DOLIT,7,SUBB   
07A0   24 10 1C 06 0A 00 0C 02 72 01 DW   DUPP,DOLIT,10,LESS,ORR   
07AA                DGTQ1:       
07AA   24 10 16 10 F0 01 44 06 DW   DUPP,RFROM,ULESS,EXIT   
07B2                             ;   NUMBER?     ( a -- n T | a F )
07B2                             ;               Convert a number string to integer. Push a flag on tos.
07B2                          ;*Macro unroll: hCOLON  7,'NUMBER?',NUMBQ
07B2                          ;*Macro unroll:  hCODE 7, "NUMBER?", NUMBQ
07B2                          ALIGN   2   
07B2                NUMBQ:       
07B2   00                     NOP      
07B3   CD 0E 06               CALL   doLIST   
07B6   E4 10 62 0E 08 10 1C 06 00 00 34 10 D8 0E DW   BASE,AT,TOR,DOLIT,0,OVER,COUNT   
07C4   34 10 72 0E 1C 06 DA 01 DW   OVER,CAT,DOLIT,"$",EQUAL   
07CC   3C 0E E2 07            DW   QBRAN,NUMQ1   
07D0   3C 07 2C 10 1C 06 01 00 86 01 DW   HEX,SWAP,DOLIT,1,PLUS   
07DA   2C 10 1C 06 01 00 C0 01 DW   SWAP,DOLIT,1,SUBB   
07E2                NUMQ1:       
07E2   34 10 72 0E 1C 06 DA 01 08 10 DW   OVER,CAT,DOLIT,"-",EQUAL,TOR   
07EC   2C 10 7A 0E C0 01 2C 10 7A 0E 86 01 3C 10 DW   SWAP,RAT,SUBB,SWAP,RAT,PLUS,QDUP   
07FA   3C 0E 4C 08            DW   QBRAN,NUMQ6   
07FE   1C 06 01 00 C0 01 08 10 DW   DOLIT,1,SUBB,TOR   
0806                NUMQ2:       
0806   24 10 08 10 72 0E E4 10 62 0E 84 07 DW   DUPP,TOR,CAT,BASE,AT,DIGTQ   
0812   3C 0E 3E 08            DW   QBRAN,NUMQ4   
0816   2C 10 E4 10 62 0E 40 03 86 01 16 10 DW   SWAP,BASE,AT,STAR,PLUS,RFROM   
0822   1C 06 01 00 86 01      DW   DOLIT,1,PLUS   
0828   72 06 06 08            DW   DONXT,NUMQ2   
082C   7A 0E 2C 10 28 10      DW   RAT,SWAP,DROP   
0832   3C 0E 38 08            DW   QBRAN,NUMQ3   
0836   9C 01                  DW   NEGAT   
0838                NUMQ3:       
0838   2C 10                  DW   SWAP   
083A   48 0E 4A 08            DW   BRAN,NUMQ5   
083E                NUMQ4:       
083E   16 10 16 10 58 10 58 10 1C 06 00 00 DW   RFROM,RFROM,DDROP,DDROP,DOLIT,0   
084A                NUMQ5:       
084A   24 10                  DW   DUPP   
084C                NUMQ6:       
084C   16 10 58 10            DW   RFROM,DDROP   
0850   16 10 E4 10 58 0E 44 06 DW   RFROM,BASE,STORE,EXIT   
0858                             ;   parse       ( b u c -- b u delta ; <string> )
0858                             ;               Scan string delimited by c. Return found string and its offset.
0858                          ;*Macro unroll: hCOLON  5,'parse',PARS
0858                          ;*Macro unroll:  hCODE 5, "parse", PARS
0858                          ALIGN   2   
0858                PARS:        
0858   00                     NOP      
0859   CD 0E 06               CALL   doLIST   
085C   EC 10 58 0E 34 10 08 10 24 10 DW   TEMP,STORE,OVER,TOR,DUPP   
0866   3C 0E F4 08            DW   QBRAN,PARS8   
086A   1C 06 01 00 C0 01 EC 10 62 0E 58 07 DA 01 DW   DOLIT,1,SUBB,TEMP,AT,BLANK,EQUAL   
0878   3C 0E A6 08            DW   QBRAN,PARS3   
087C   08 10                  DW   TOR   
087E                PARS1:       
087E   58 07 34 10 72 0E      DW   BLANK,OVER,CAT   ;skip leading blanks ONLY
0884   C0 01 60 01 90 01      DW   SUBB,ZLESS,INVER   
088A   3C 0E A4 08            DW   QBRAN,PARS2   
088E   1C 06 01 00 86 01      DW   DOLIT,1,PLUS   
0894   72 06 7E 08            DW   DONXT,PARS1   
0898   16 10 28 10 1C 06 00 00 24 10 44 06 DW   RFROM,DROP,DOLIT,0,DUPP,EXIT   
08A4                PARS2:       
08A4   16 10                  DW   RFROM   
08A6                PARS3:       
08A6   34 10 2C 10            DW   OVER,SWAP   
08AA   08 10                  DW   TOR   
08AC                PARS4:       
08AC   EC 10 62 0E 34 10 72 0E C0 01 DW   TEMP,AT,OVER,CAT,SUBB   ;scan for delimiter
08B6   EC 10 62 0E 58 07 DA 01 DW   TEMP,AT,BLANK,EQUAL   
08BE   3C 0E C4 08            DW   QBRAN,PARS5   
08C2   60 01                  DW   ZLESS   
08C4                PARS5:       
08C4   3C 0E DA 08            DW   QBRAN,PARS6   
08C8   1C 06 01 00 86 01      DW   DOLIT,1,PLUS   
08CE   72 06 AC 08            DW   DONXT,PARS4   
08D2   24 10 08 10            DW   DUPP,TOR   
08D6   48 0E E8 08            DW   BRAN,PARS7   
08DA                PARS6:       
08DA   16 10 28 10 24 10      DW   RFROM,DROP,DUPP   
08E0   1C 06 01 00 86 01 08 10 DW   DOLIT,1,PLUS,TOR   
08E8                PARS7:       
08E8   34 10 C0 01            DW   OVER,SUBB   
08EC   16 10 16 10 C0 01 44 06 DW   RFROM,RFROM,SUBB,EXIT   
08F4                PARS8:       
08F4   34 10 16 10 C0 01 44 06 DW   OVER,RFROM,SUBB,EXIT   
08FC                             ;   PARSE       ( c -- b u ; <string> )
08FC                             ;               Scan input stream and return counted string delimited by c.
08FC                          ;*Macro unroll: mCOLON  5,'PARSE',PARSE
08FC                          ;*Macro unroll:  mCODE 5, "PARSE", PARSE
08FC                          ALIGN   2   
08FC                PARSE:       
08FC                VVCODE:   .SET   $   
08FC                VVLEN:    .SET   (5 & 01FH) / CELLL   
18AE                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
18AE                VVNAME:   .SET   $   
18AE   FC 08 BC 18            DW   vvCODE,vvLINK   
18B2                VVLINK:   .SET   $   
18B2   05 50 41 52 53 45      DB   5,"PARSE"   
08FC                          .ORG   vvCODE   
08FC   00                     NOP      
08FD   CD 0E 06               CALL   doLIST   
0900   08 10 02 0F FC 10 62 0E 86 01 DW   TOR,TIB,INN,AT,PLUS   ;current input buffer pointer
090A   04 11 62 0E FC 10 62 0E C0 01 DW   NTIB,AT,INN,AT,SUBB   ;remaining count
0914   16 10 58 08 FC 10 A6 0E 44 06 DW   RFROM,PARS,INN,PSTOR,EXIT   
091E                             ;   (           ( -- )
091E                             ;               Ignore following string up to next ) . A comment.
091E                          ;*Macro unroll: mCOLON  IMEDD+1,'(',PAREN
091E                          ;*Macro unroll:  mCODE IMEDD+1, "(", PAREN
091E                          ALIGN   2   
091E                PAREN:       
091E                VVCODE:   .SET   $   
091E                VVLEN:    .SET   (IMEDD+1 & 01FH) / CELLL   
1868                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1868                VVNAME:   .SET   $   
1868   1E 09 B2 18            DW   vvCODE,vvLINK   
186C                VVLINK:   .SET   $   
186C   41 28                  DB   IMEDD+1,"("   
091E                          .ORG   vvCODE   
091E   00                     NOP      
091F   CD 0E 06               CALL   doLIST   
0922   1C 06 FC 08 58 10 44 06 DW   DOLIT,")",PARSE,DDROP,EXIT   
092A                             ;   \           ( -- )
092A                             ;               Ignore following text till the end of line.
092A                          ;*Macro unroll: mCOLON  IMEDD+1, $5C, BKSLA
092A                          ;*Macro unroll:  mCODE IMEDD+1, $5C, BKSLA
092A                          ALIGN   2   
092A                BKSLA:       
092A                VVCODE:   .SET   $   
092A                VVLEN:    .SET   (IMEDD+1 & 01FH) / CELLL   
1822                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1822                VVNAME:   .SET   $   
1822   2A 09 6C 18            DW   vvCODE,vvLINK   
1826                VVLINK:   .SET   $   
1826   41 5C                  DB   IMEDD+1,$5C   
092A                          .ORG   vvCODE   
092A   00                     NOP      
092B   CD 0E 06               CALL   doLIST   
092E   04 11 62 0E FC 10 58 0E 44 06 DW   NTIB,AT,INN,STORE,EXIT   
0938                             ;   CHAR        ( -- c )
0938                             ;               Parse next word and return its first character.
0938                          ;*Macro unroll: mCOLON  4,'CHAR',CHAR
0938                          ;*Macro unroll:  mCODE 4, "CHAR", CHAR
0938                          ALIGN   2   
0938                CHAR:        
0938                VVCODE:   .SET   $   
0938                VVLEN:    .SET   (4 & 01FH) / CELLL   
1818                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1818                VVNAME:   .SET   $   
1818   38 09 26 18            DW   vvCODE,vvLINK   
181C                VVLINK:   .SET   $   
181C   04 43 48 41 52         DB   4,"CHAR"   
0938                          .ORG   vvCODE   
0938   00                     NOP      
0939   CD 0E 06               CALL   doLIST   
093C   58 07 FC 08 28 10 72 0E 44 06 DW   BLANK,PARSE,DROP,CAT,EXIT   
0946                             ;   TOKEN       ( -- a ; <string> )
0946                             ;               Parse a word from input stream and copy it to name dictionary.
0946                          ;*Macro unroll: hCOLON  5,'TOKEN',TOKEN
0946                          ;*Macro unroll:  hCODE 5, "TOKEN", TOKEN
0946                          ALIGN   2   
0946                TOKEN:       
0946   00                     NOP      
0947   CD 0E 06               CALL   doLIST   
094A   58 07 FC 08 1C 06 1F 00 38 02 DW   BLANK,PARSE,DOLIT,31,MIN   
0954   4C 11 62 0E 34 10 C0 01 8E 03 DW   NP,AT,OVER,SUBB,CELLM   
095E   96 0F 44 06            DW   PACKS,EXIT   
0962                             ;   WORD        ( c -- a ; <string> )
0962                             ;               Parse a word from input stream and copy it to code dictionary.
0962                          ;*Macro unroll: mCOLON  4,'WORD',WORDD
0962                          ;*Macro unroll:  mCODE 4, "WORD", WORDD
0962                          ALIGN   2   
0962                WORDD:       
0962                VVCODE:   .SET   $   
0962                VVLEN:    .SET   (4 & 01FH) / CELLL   
180E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
180E                VVNAME:   .SET   $   
180E   62 09 1C 18            DW   vvCODE,vvLINK   
1812                VVLINK:   .SET   $   
1812   04 57 4F 52 44         DB   4,"WORD"   
0962                          .ORG   vvCODE   
0962   00                     NOP      
0963   CD 0E 06               CALL   doLIST   
0966   FC 08 EA 0E 96 0F 44 06 DW   PARSE,HERE,PACKS,EXIT   
096E                             ;   NAME>       ( na -- ca )
096E                             ;               Return a code address given a name address.
096E                          ;*Macro unroll: hCOLON  5,'NAME>',NAMET
096E                          ;*Macro unroll:  hCODE 5, "NAME>", NAMET
096E                          ALIGN   2   
096E                NAMET:       
096E   00                     NOP      
096F   CD 0E 06               CALL   doLIST   
0972   8E 03 8E 03 62 0E 44 06 DW   CELLM,CELLM,AT,EXIT   
097A                             ;   SAME?       ( a a u -- a a f \ -0+ )
097A                             ;               Compare u cells in two strings. Return 0 if identical.
097A                          ;*Macro unroll: hCOLON  5,'SAME?',SAMEQ
097A                          ;*Macro unroll:  hCODE 5, "SAME?", SAMEQ
097A                          ALIGN   2   
097A                SAMEQ:       
097A   00                     NOP      
097B   CD 0E 06               CALL   doLIST   
097E   08 10                  DW   TOR   
0980   48 0E A6 09            DW   BRAN,SAME2   
0984   34 10 7A 0E 9A 03 86 01 62 0E SAME1:   DW   OVER,RAT,CELLS,PLUS,AT   
098E   34 10 7A 0E 9A 03 86 01 62 0E DW   OVER,RAT,CELLS,PLUS,AT   
0998   C0 01 3C 10            DW   SUBB,QDUP   
099C   3C 0E A6 09            DW   QBRAN,SAME2   
09A0   16 10 28 10 44 06      DW   RFROM,DROP,EXIT   ;strings not equal
09A6   72 06 84 09  SAME2:    DW   DONXT,SAME1   
09AA   1C 06 00 00 44 06      DW   DOLIT,0,EXIT   ;strings equal
09B0                             ;   find        ( a va -- ca na | a F )
09B0                             ;               Search a vocabulary for a string. Return ca and na if succeeded.
09B0                          ;*Macro unroll: mCOLON  4,'find',FIND
09B0                          ;*Macro unroll:  mCODE 4, "find", FIND
09B0                          ALIGN   2   
09B0                FIND:        
09B0                VVCODE:   .SET   $   
09B0                VVLEN:    .SET   (4 & 01FH) / CELLL   
1804                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1804                VVNAME:   .SET   $   
1804   B0 09 12 18            DW   vvCODE,vvLINK   
1808                VVLINK:   .SET   $   
1808   04 66 69 6E 64         DB   4,"find"   
09B0                          .ORG   vvCODE   
09B0   00                     NOP      
09B1   CD 0E 06               CALL   doLIST   
09B4   2C 10 24 10 72 0E      DW   SWAP,DUPP,CAT   
09BA   1C 06 02 00 18 03 EC 10 58 0E DW   DOLIT,CELLL,SLASH,TEMP,STORE   
09C4   24 10 62 0E 08 10 82 03 2C 10 DW   DUPP,AT,TOR,CELLP,SWAP   
09CE   62 0E 24 10  FIND1:    DW   AT,DUPP   
09D2   3C 0E FE 09            DW   QBRAN,FIND6   
09D6   24 10 62 0E 1C 06 1F 00 68 01 7A 0E 7C 01 DW   DUPP,AT,DOLIT,MASKK,ANDD,RAT,XORR   
09E4   3C 0E F2 09            DW   QBRAN,FIND2   
09E8   82 03 1C 06 FF FF      DW   CELLP,DOLIT,-1   ;true flag
09EE   48 0E FA 09            DW   BRAN,FIND3   
09F2   82 03 EC 10 62 0E 7A 09 FIND2:   DW   CELLP,TEMP,AT,SAMEQ   
09FA   48 0E 0A 0A  FIND3:    DW   BRAN,FIND4   
09FE   16 10 28 10  FIND6:    DW   RFROM,DROP   
0A02   2C 10 8E 03 2C 10 44 06 DW   SWAP,CELLM,SWAP,EXIT   
0A0A   3C 0E 16 0A  FIND4:    DW   QBRAN,FIND5   
0A0E   8E 03 8E 03            DW   CELLM,CELLM   
0A12   48 0E CE 09            DW   BRAN,FIND1   
0A16   16 10 28 10 2C 10 28 10 FIND5:   DW   RFROM,DROP,SWAP,DROP   
0A1E   8E 03                  DW   CELLM   
0A20   24 10 6E 09 2C 10 44 06 DW   DUPP,NAMET,SWAP,EXIT   
0A28                             ;   NAME?       ( a -- ca na | a F )
0A28                             ;               Search all context vocabularies for a string.
0A28                          ;*Macro unroll: hCOLON  5,'NAME?',NAMEQ
0A28                          ;*Macro unroll:  hCODE 5, "NAME?", NAMEQ
0A28                          ALIGN   2   
0A28                NAMEQ:       
0A28   00                     NOP      
0A29   CD 0E 06               CALL   doLIST   
0A2C   34 11 24 10 C8 0E 7C 01 DW   CNTXT,DUPP,DAT,XORR   ;?context=also
0A34   3C 0E 3A 0A            DW   QBRAN,NAMQ1   
0A38   8E 03                  DW   CELLM   ;no, start with context
0A3A   08 10        NAMQ1:    DW   TOR   
0A3C   16 10 82 03 24 10 08 10 NAMQ2:   DW   RFROM,CELLP,DUPP,TOR   ;next in search order
0A44   62 0E 3C 10            DW   AT,QDUP   
0A48   3C 0E 5A 0A            DW   QBRAN,NAMQ3   
0A4C   B0 09 3C 10            DW   FIND,QDUP   ;search vocabulary
0A50   3C 0E 3C 0A            DW   QBRAN,NAMQ2   
0A54   16 10 28 10 44 06      DW   RFROM,DROP,EXIT   ;found name
0A5A   16 10 28 10  NAMQ3:    DW   RFROM,DROP   ;name not found
0A5E   1C 06 00 00 44 06      DW   DOLIT,0,EXIT   ;false flag
0A64                             ;   CATCH       ( ca -- 0 | err# )
0A64                             ;               Execute word at ca and set up an error frame for it.
0A64                          ;*Macro unroll: mCOLON  5,'CATCH',CATCH
0A64                          ;*Macro unroll:  mCODE 5, "CATCH", CATCH
0A64                          ALIGN   2   
0A64                CATCH:       
0A64                VVCODE:   .SET   $   
0A64                VVLEN:    .SET   (5 & 01FH) / CELLL   
17FA                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
17FA                VVNAME:   .SET   $   
17FA   64 0A 08 18            DW   vvCODE,vvLINK   
17FE                VVLINK:   .SET   $   
17FE   05 43 41 54 43 48      DB   5,"CATCH"   
0A64                          .ORG   vvCODE   
0A64   00                     NOP      
0A65   CD 0E 06               CALL   doLIST   
0A68   94 0E 08 10 2C 11 62 0E 08 10 DW   SPAT,TOR,HANDL,AT,TOR   ;save error frame
0A72   84 0E 2C 11 58 0E 38 0E DW   RPAT,HANDL,STORE,EXECU   ;execute
0A7A   16 10 2C 11 58 0E      DW   RFROM,HANDL,STORE   ;reSTORE error frame
0A80   16 10 28 10 1C 06 00 00 44 06 DW   RFROM,DROP,DOLIT,0,EXIT   ;no error
0A8A                             ;   THROW       ( err# -- err# )
0A8A                             ;               Reset system to current local error frame an update error flag.
0A8A                          ;*Macro unroll: mCOLON  5,'THROW',THROW
0A8A                          ;*Macro unroll:  mCODE 5, "THROW", THROW
0A8A                          ALIGN   2   
0A8A                THROW:       
0A8A                VVCODE:   .SET   $   
0A8A                VVLEN:    .SET   (5 & 01FH) / CELLL   
17F0                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
17F0                VVNAME:   .SET   $   
17F0   8A 0A FE 17            DW   vvCODE,vvLINK   
17F4                VVLINK:   .SET   $   
17F4   05 54 48 52 4F 57      DB   5,"THROW"   
0A8A                          .ORG   vvCODE   
0A8A   00                     NOP      
0A8B   CD 0E 06               CALL   doLIST   
0A8E   2C 11 62 0E 8C 0E      DW   HANDL,AT,RPSTO   ;reSTORE return stack
0A94   16 10 2C 11 58 0E      DW   RFROM,HANDL,STORE   ;reSTORE handler frame
0A9A   16 10 2C 10 08 10 9E 0E DW   RFROM,SWAP,TOR,SPSTO   ;reSTORE data stack
0AA2   28 10 16 10 44 06      DW   DROP,RFROM,EXIT   
0AA8                             ;   NULL$       ( -- a )
0AA8                             ;               Return address of a null string with zero count.
0AA8                          ;*Macro unroll: hCOLON  5,'NULL$',NULLS
0AA8                          ;*Macro unroll:  hCODE 5, "NULL$", NULLS
0AA8                          ALIGN   2   
0AA8                NULLS:       
0AA8   00                     NOP      
0AA9   CD 0E 06               CALL   doLIST   
0AAC   24 06                  DW   DOVAR   ;emulate CREATE
0AAE   00 00                  DW   0   
0AB0   63 6F 79 6F 74 65      DB   99,111,121,111,116,101   
0AB6                          ALIGN   2   
0AB6                             ;   ABORT       ( -- )
0AB6                             ;               Reset data stack and jump to QUIT.
0AB6                          ;*Macro unroll: mCOLON  5,'ABORT',ABORT
0AB6                          ;*Macro unroll:  mCODE 5, "ABORT", ABORT
0AB6                          ALIGN   2   
0AB6                ABORT:       
0AB6                VVCODE:   .SET   $   
0AB6                VVLEN:    .SET   (5 & 01FH) / CELLL   
17E6                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
17E6                VVNAME:   .SET   $   
17E6   B6 0A F4 17            DW   vvCODE,vvLINK   
17EA                VVLINK:   .SET   $   
17EA   05 41 42 4F 52 54      DB   5,"ABORT"   
0AB6                          .ORG   vvCODE   
0AB6   00                     NOP      
0AB7   CD 0E 06               CALL   doLIST   
0ABA   A8 0A 8A 0A            DW   NULLS,THROW   
0ABE                             ;   abort"      ( f -- )
0ABE                             ;               Run time routine of ABORT" . Abort with a message.
0ABE                          ;*Macro unroll: mCOLON  COMPO+6,'abort|',ABORQ
0ABE                          ;*Macro unroll:  mCODE COMPO+6, "abort|", ABORQ
0ABE                          ALIGN   2   
0ABE                ABORQ:       
0ABE                VVCODE:   .SET   $   
0ABE                VVLEN:    .SET   (COMPO+6 & 01FH) / CELLL   
17BA                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
17BA                VVNAME:   .SET   $   
17BA   BE 0A EA 17            DW   vvCODE,vvLINK   
17BE                VVLINK:   .SET   $   
17BE   26 61 62 6F 72 74 7C   DB   COMPO+6,"abort|"   
0ABE                          .ORG   vvCODE   
0ABE   00                     NOP      
0ABF   CD 0E 06               CALL   doLIST   
0AC2   3C 0E CA 0A            DW   QBRAN,ABOR1   ;text flag
0AC6   60 0C 8A 0A            DW   DOSTR,THROW   ;pass error string
0ACA                ABOR1:       
0ACA   60 0C 28 10 44 06      DW   DOSTR,DROP,EXIT   ;drop error
0AD0                             ;   $INTERPRET  ( a -- )
0AD0                             ;               Interpret a word. If failed, try to convert it to an integer.
0AD0                          ;*Macro unroll: hCOLON  10,'$INTERPRET',INTER
0AD0                          ;*Macro unroll:  hCODE 10, "$INTERPRET", INTER
0AD0                          ALIGN   2   
0AD0                INTER:       
0AD0   00                     NOP      
0AD1   CD 0E 06               CALL   doLIST   
0AD4   28 0A 3C 10            DW   NAMEQ,QDUP   ;?defined
0AD8   3C 0E F8 0A            DW   QBRAN,INTE1   
0ADC   62 0E 1C 06 20 00 68 01 DW   AT,DOLIT,COMPO,ANDD   ;?compile only lexicon bits
0AE4                          ;*Macro unroll:  mDSTR   ABORQ,' compile only'
0AE4   BE 0A                  DW   ABORQ   
0AE6                VVLEN:    .SET   $   
0AE6   00 20 63 6F 6D 70 69 6C 65 20 6F 6E 6C 79 DB   0," compile only"   
0AF4                VVCODE:   .SET   $   
0AE6                          .ORG   vvLEN   
0AE6   0D                     DB   vvCODE - vvLEN - 1   
0AF4                          .ORG   vvCODE   
0AF4   38 0E 44 06            DW   EXECU,EXIT   ;execute defined word
0AF8                INTE1:       
0AF8   1C 11 0E 0F            DW   TNUMB,ATEXE   ;convert a number
0AFC   3C 0E 02 0B            DW   QBRAN,INTE2   
0B00   44 06                  DW   EXIT   
0B02                INTE2:       
0B02   8A 0A                  DW   THROW   ;error
0B04                             ;   [           ( -- )
0B04                             ;               Start the text interpreter.
0B04                          ;*Macro unroll: mCOLON  IMEDD+1,'[',LBRAC
0B04                          ;*Macro unroll:  mCODE IMEDD+1, "[", LBRAC
0B04                          ALIGN   2   
0B04                LBRAC:       
0B04                VVCODE:   .SET   $   
0B04                VVLEN:    .SET   (IMEDD+1 & 01FH) / CELLL   
1774                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1774                VVNAME:   .SET   $   
1774   04 0B BE 17            DW   vvCODE,vvLINK   
1778                VVLINK:   .SET   $   
1778   41 5B                  DB   IMEDD+1,"["   
0B04                          .ORG   vvCODE   
0B04   00                     NOP      
0B05   CD 0E 06               CALL   doLIST   
0B08   1C 06 D0 0A 14 11 58 0E 44 06 DW   DOLIT,INTER,TEVAL,STORE,EXIT   
0B12                             ;   .OK         ( -- )
0B12                             ;               Display "ok" only while interpreting.
0B12                          ;*Macro unroll: mCOLON  3,'.OK',DOTOK
0B12                          ;*Macro unroll:  mCODE 3, ".OK", DOTOK
0B12                          ALIGN   2   
0B12                DOTOK:       
0B12                VVCODE:   .SET   $   
0B12                VVLEN:    .SET   (3 & 01FH) / CELLL   
176C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
176C                VVNAME:   .SET   $   
176C   12 0B 78 17            DW   vvCODE,vvLINK   
1770                VVLINK:   .SET   $   
1770   03 2E 4F 4B            DB   3,".OK"   
0B12                          .ORG   vvCODE   
0B12   00                     NOP      
0B13   CD 0E 06               CALL   doLIST   
0B16   1C 06 D0 0A 14 11 62 0E DA 01 DW   DOLIT,INTER,TEVAL,AT,EQUAL   
0B20   3C 0E 2A 0B            DW   QBRAN,DOTO1   
0B24                          ;*Macro unroll:  mDSTR      DOTQP,' ok'
0B24   80 0C                  DW   DOTQP   
0B26                VVLEN:    .SET   $   
0B26   00 20 6F 6B            DB   0," ok"   
0B2A                VVCODE:   .SET   $   
0B26                          .ORG   vvLEN   
0B26   03                     DB   vvCODE - vvLEN - 1   
0B2A                          .ORG   vvCODE   
0B2A   4E 0C 44 06  DOTO1:    DW   CR,EXIT   
0B2E                             ;   ?STACK      ( -- )
0B2E                             ;               Abort if the data stack underflows.
0B2E                          ;*Macro unroll: hCOLON  6,'?STACK',QSTAC
0B2E                          ;*Macro unroll:  hCODE 6, "?STACK", QSTAC
0B2E                          ALIGN   2   
0B2E                QSTAC:       
0B2E   00                     NOP      
0B2F   CD 0E 06               CALL   doLIST   
0B32   8E 10 60 01            DW   DEPTH,ZLESS   ;check only for underflow
0B36                          ;*Macro unroll:  mDSTR      ABORQ,' underflow'
0B36   BE 0A                  DW   ABORQ   
0B38                VVLEN:    .SET   $   
0B38   00 20 75 6E 64 65 72 66 6C 6F 77 DB   0," underflow"   
0B43                VVCODE:   .SET   $   
0B38                          .ORG   vvLEN   
0B38   0A                     DB   vvCODE - vvLEN - 1   
0B43                          .ORG   vvCODE   
0B43   44 06                  DW   EXIT   
0B45                             ;   EVAL        ( -- )
0B45                             ;               Interpret the input stream.
0B45                          ;*Macro unroll: mCOLON  4,'EVAL',EVAL
0B45                          ;*Macro unroll:  mCODE 4, "EVAL", EVAL
0B45                          ALIGN   2   
0B46                EVAL:        
0B46                VVCODE:   .SET   $   
0B46                VVLEN:    .SET   (4 & 01FH) / CELLL   
1762                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1762                VVNAME:   .SET   $   
1762   46 0B 70 17            DW   vvCODE,vvLINK   
1766                VVLINK:   .SET   $   
1766   04 45 56 41 4C         DB   4,"EVAL"   
0B46                          .ORG   vvCODE   
0B46   00                     NOP      
0B47   CD 0E 06               CALL   doLIST   
0B4A                EVAL1:       
0B4A   46 09 24 10 72 0E      DW   TOKEN,DUPP,CAT   ;?input stream empty
0B50   3C 0E 5E 0B            DW   QBRAN,EVAL2   
0B54   14 11 0E 0F 2E 0B      DW   TEVAL,ATEXE,QSTAC   ;evaluate input, check stack
0B5A   48 0E 4A 0B            DW   BRAN,EVAL1   
0B5E                EVAL2:       
0B5E   28 10 DC 10 0E 0F 44 06 DW   DROP,TPROM,ATEXE,EXIT   ;prompt
0B66                             ;   PC!         ( uc p --  )
0B66                             ;               output uc to IO port p
0B66                          ;*Macro unroll: mCODE   3,'PC!',PCSTO
0B66                          ALIGN   2   
0B66                PCSTO:       
0B66                VVCODE:   .SET   $   
0B66                VVLEN:    .SET   (3 & 01FH) / CELLL   
175A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
175A                VVNAME:   .SET   $   
175A   66 0B 66 17            DW   vvCODE,vvLINK   
175E                VVLINK:   .SET   $   
175E   03 50 43 21            DB   3,"PC!"   
0B66                          .ORG   vvCODE   
0B66   D9                     EXX      ; 4t
0B67   D1                     POP   DE   ;10t
0B68   7B                     LD   A,E   ; 4t
0B69   ED 79                  OUT   (C),A   ;12t
0B6B   D9                     EXX      ; 4t
0B6C                          ;*Macro unroll:  mNEXT
0B6C   EB                     EX   DE,HL   
0B6D                          ;*Macro unroll:  mNEXTHL                         ; 34t
0B6D   FD E9                  JP   (IY)   ; 34t
0B6F                             ;   PC@         ( p -- uc )
0B6F                             ;               output uc to IO port p
0B6F                          ;*Macro unroll: mCODE   3,'PC@',PCAT
0B6F                          ALIGN   2   
0B70                PCAT:        
0B70                VVCODE:   .SET   $   
0B70                VVLEN:    .SET   (3 & 01FH) / CELLL   
1752                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1752                VVNAME:   .SET   $   
1752   70 0B 5E 17            DW   vvCODE,vvLINK   
1756                VVLINK:   .SET   $   
1756   03 50 43 40            DB   3,"PC@"   
0B70                          .ORG   vvCODE   
0B70   D9                     EXX      ; 4t
0B71   ED 78                  IN   A,(C)   ;12t
0B73   5F                     LD   E,A   ; 4t
0B74   16 00                  LD   D,0   ; 7t
0B76   D5                     PUSH   DE   ;11t
0B77   D9                     EXX      ; 4t
0B78                          ;*Macro unroll:  mNEXT
0B78   EB                     EX   DE,HL   
0B79                          ;*Macro unroll:  mNEXTHL                         ; 34t
0B79   FD E9                  JP   (IY)   ; 34t
0B7B                             ;   !IO         ( -- )
0B7B                             ;               Initialize the serial I/O devices.
0B7B                          ;*Macro unroll: mCODE   3,'!IO', STOIO ;
0B7B                          ALIGN   2   ; 
0B7C                STOIO:       
0B7C                VVCODE:   .SET   $   
0B7C                VVLEN:    .SET   (3 & 01FH) / CELLL   
174A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
174A                VVNAME:   .SET   $   
174A   7C 0B 56 17            DW   vvCODE,vvLINK   
174E                VVLINK:   .SET   $   
174E   03 21 49 4F            DB   3,"!IO"   
0B7C                          .ORG   vvCODE   
0B7C   CD D6 00               CALL   INIT_IO   
0B7F                          ;*Macro unroll:  mNEXT
0B7F   EB                     EX   DE,HL   
0B80                          ;*Macro unroll:  mNEXTHL                         ; 34t
0B80   FD E9                  JP   (IY)   ; 34t
0B82                             ;   ?RX         ( -- c T | F )
0B82                             ;               Return input character and true, or a false if no input.
0B82                          ;*Macro unroll: mCODE	3, '?RX', QRX
0B82                          ALIGN   2   
0B82                QRX:         
0B82                VVCODE:   .SET   $   
0B82                VVLEN:    .SET   (3 & 01FH) / CELLL   
1742                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1742                VVNAME:   .SET   $   
1742   82 0B 4E 17            DW   vvCODE,vvLINK   
1746                VVLINK:   .SET   $   
1746   03 3F 52 58            DB   3,"?RX"   
0B82                          .ORG   vvCODE   
0B82   C5                     PUSH   BC   
0B83   CD 20 01               CALL   QRXA   
0B86   20 05                  JR   nz,QRX1   
0B88   01 00 00               LD   BC,FALSEE   
0B8B   18 0A                  JR   QRX2   
0B8D                QRX1:        
0B8D   CD F1 00               CALL   RXA1   
0B90   4F                     LD   C,A   
0B91   06 00                  LD   B,0   
0B93   C5                     PUSH   BC   
0B94   01 FF FF               LD   BC,TRUEE   
0B97                QRX2:        
0B97                          ;*Macro unroll:  mNEXT
0B97   EB                     EX   DE,HL   
0B98                          ;*Macro unroll:  mNEXTHL                         ; 34t
0B98   FD E9                  JP   (IY)   ; 34t
0B9A                             ;   TX!         ( c -- )
0B9A                             ;               Send character c to the output device.
0B9A                          ;*Macro unroll: mCODE	3,'TX!',TXSTO
0B9A                          ALIGN   2   
0B9A                TXSTO:       
0B9A                VVCODE:   .SET   $   
0B9A                VVLEN:    .SET   (3 & 01FH) / CELLL   
173A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
173A                VVNAME:   .SET   $   
173A   9A 0B 46 17            DW   vvCODE,vvLINK   
173E                VVLINK:   .SET   $   
173E   03 54 58 21            DB   3,"TX!"   
0B9A                          .ORG   vvCODE   
0B9A   79                     LD   A,C   
0B9B   CD 15 01               CALL   TXA   
0B9E   C1                     POP   BC   
0B9F                          ;*Macro unroll:  mNEXT
0B9F   EB                     EX   DE,HL   
0BA0                          ;*Macro unroll:  mNEXTHL                         ; 34t
0BA0   FD E9                  JP   (IY)   ; 34t
0BA2                             ;   ?KEY        ( -- c T | F )
0BA2                             ;               Return input character and true, or a false if no input.
0BA2                          ;*Macro unroll: mCOLON  4,'?KEY',QKEY
0BA2                          ;*Macro unroll:  mCODE 4, "?KEY", QKEY
0BA2                          ALIGN   2   
0BA2                QKEY:        
0BA2                VVCODE:   .SET   $   
0BA2                VVLEN:    .SET   (4 & 01FH) / CELLL   
1730                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1730                VVNAME:   .SET   $   
1730   A2 0B 3E 17            DW   vvCODE,vvLINK   
1734                VVLINK:   .SET   $   
1734   04 3F 4B 45 59         DB   4,"?KEY"   
0BA2                          .ORG   vvCODE   
0BA2   00                     NOP      
0BA3   CD 0E 06               CALL   doLIST   
0BA6   B4 10 62 0E 38 0E 44 06 DW   TQKEY,AT,EXECU,EXIT   
0BAE                             ;   KEY         ( -- c )
0BAE                             ;               Wait for and return an input character.
0BAE                          ;*Macro unroll: mCOLON  3,'KEY',KEY
0BAE                          ;*Macro unroll:  mCODE 3, "KEY", KEY
0BAE                          ALIGN   2   
0BAE                KEY:         
0BAE                VVCODE:   .SET   $   
0BAE                VVLEN:    .SET   (3 & 01FH) / CELLL   
1728                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1728                VVNAME:   .SET   $   
1728   AE 0B 34 17            DW   vvCODE,vvLINK   
172C                VVLINK:   .SET   $   
172C   03 4B 45 59            DB   3,"KEY"   
0BAE                          .ORG   vvCODE   
0BAE   00                     NOP      
0BAF   CD 0E 06               CALL   doLIST   
0BB2                KEY1:        
0BB2   A2 0B                  DW   QKEY   
0BB4   24 10 3C 0E BA 0B      DW   DUPP,QBRAN,KEY2   
0BBA                             ; DW DOLIT, $22, EMIT
0BBA                KEY2:        
0BBA   3C 0E B2 0B            DW   QBRAN,KEY1   
0BBE   44 06                  DW   EXIT   
0BC0                             ;   EMIT        ( c -- )
0BC0                             ;               Send a character to the output device.
0BC0                          ;*Macro unroll: mCOLON  4, 'EMIT', EMIT
0BC0                          ;*Macro unroll:  mCODE 4, "EMIT", EMIT
0BC0                          ALIGN   2   
0BC0                EMIT:        
0BC0                VVCODE:   .SET   $   
0BC0                VVLEN:    .SET   (4 & 01FH) / CELLL   
171E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
171E                VVNAME:   .SET   $   
171E   C0 0B 2C 17            DW   vvCODE,vvLINK   
1722                VVLINK:   .SET   $   
1722   04 45 4D 49 54         DB   4,"EMIT"   
0BC0                          .ORG   vvCODE   
0BC0   00                     NOP      
0BC1   CD 0E 06               CALL   doLIST   
0BC4   BC 10 62 0E 38 0E 44 06 DW   TEMIT,AT,EXECU,EXIT   
0BCC                             ;   NUF?        ( -- t )
0BCC                             ;               Return false if no input, else pause and if CR return true.
0BCC                          ;*Macro unroll: mCOLON  4,'NUF?',NUFQ
0BCC                          ;*Macro unroll:  mCODE 4, "NUF?", NUFQ
0BCC                          ALIGN   2   
0BCC                NUFQ:        
0BCC                VVCODE:   .SET   $   
0BCC                VVLEN:    .SET   (4 & 01FH) / CELLL   
1714                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1714                VVNAME:   .SET   $   
1714   CC 0B 22 17            DW   vvCODE,vvLINK   
1718                VVLINK:   .SET   $   
1718   04 4E 55 46 3F         DB   4,"NUF?"   
0BCC                          .ORG   vvCODE   
0BCC   00                     NOP      
0BCD   CD 0E 06               CALL   doLIST   
0BD0   A2 0B 24 10            DW   QKEY,DUPP   
0BD4   3C 0E E2 0B            DW   QBRAN,NUFQ1   
0BD8   58 10 AE 0B 1C 06 0D 00 DA 01 DW   DDROP,KEY,DOLIT,CRR,EQUAL   
0BE2                NUFQ1:       
0BE2   44 06                  DW   EXIT   
0BE4                             ;   PACE        ( -- )
0BE4                             ;               Send a pace character for the file downloading process.
0BE4                          ;*Macro unroll: hCOLON  4,'PACE',PACE
0BE4                          ;*Macro unroll:  hCODE 4, "PACE", PACE
0BE4                          ALIGN   2   
0BE4                PACE:        
0BE4   00                     NOP      
0BE5   CD 0E 06               CALL   doLIST   
0BE8   1C 06 0B 00 C0 0B 44 06 DW   DOLIT,11,EMIT,EXIT   
0BF0                             ;   SPACE       ( -- )
0BF0                             ;               Send the blank character to the output device.
0BF0                          ;*Macro unroll: mCOLON  5,'SPACE',SPACE
0BF0                          ;*Macro unroll:  mCODE 5, "SPACE", SPACE
0BF0                          ALIGN   2   
0BF0                SPACE:       
0BF0                VVCODE:   .SET   $   
0BF0                VVLEN:    .SET   (5 & 01FH) / CELLL   
170A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
170A                VVNAME:   .SET   $   
170A   F0 0B 18 17            DW   vvCODE,vvLINK   
170E                VVLINK:   .SET   $   
170E   05 53 50 41 43 45      DB   5,"SPACE"   
0BF0                          .ORG   vvCODE   
0BF0   00                     NOP      
0BF1   CD 0E 06               CALL   doLIST   
0BF4   58 07 C0 0B 44 06      DW   BLANK,EMIT,EXIT   
0BFA                             ;   SPACES      ( +n -- )
0BFA                             ;               Send n spaces to the output device.
0BFA                          ;*Macro unroll: mCOLON  6,'SPACES',SPACS
0BFA                          ;*Macro unroll:  mCODE 6, "SPACES", SPACS
0BFA                          ALIGN   2   
0BFA                SPACS:       
0BFA                VVCODE:   .SET   $   
0BFA                VVLEN:    .SET   (6 & 01FH) / CELLL   
16FE                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
16FE                VVNAME:   .SET   $   
16FE   FA 0B 0E 17            DW   vvCODE,vvLINK   
1702                VVLINK:   .SET   $   
1702   06 53 50 41 43 45 53   DB   6,"SPACES"   
0BFA                          .ORG   vvCODE   
0BFA   00                     NOP      
0BFB   CD 0E 06               CALL   doLIST   
0BFE   1C 06 00 00 26 02 08 10 DW   DOLIT,0,MAX,TOR   
0C06   48 0E 0C 0C            DW   BRAN,CHAR2   
0C0A                CHAR1:       
0C0A   F0 0B                  DW   SPACE   
0C0C                CHAR2:       
0C0C   72 06 0A 0C            DW   DONXT,CHAR1   
0C10   44 06                  DW   EXIT   
0C12                             ;   TYPE        ( b u -- )
0C12                             ;               Output u characters from b.
0C12                          ;*Macro unroll: mCOLON	4,'TYPE',TYPEE
0C12                          ;*Macro unroll:  mCODE 4, "TYPE", TYPEE
0C12                          ALIGN   2   
0C12                TYPEE:       
0C12                VVCODE:   .SET   $   
0C12                VVLEN:    .SET   (4 & 01FH) / CELLL   
16F4                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
16F4                VVNAME:   .SET   $   
16F4   12 0C 02 17            DW   vvCODE,vvLINK   
16F8                VVLINK:   .SET   $   
16F8   04 54 59 50 45         DB   4,"TYPE"   
0C12                          .ORG   vvCODE   
0C12   00                     NOP      
0C13   CD 0E 06               CALL   doLIST   
0C16   08 10                  DW   TOR   
0C18   48 0E 28 0C            DW   BRAN,TYPE2   
0C1C                TYPE1:       
0C1C   24 10 72 0E C0 0B      DW   DUPP,CAT,EMIT   
0C22   1C 06 01 00 86 01      DW   DOLIT,1,PLUS   
0C28                TYPE2:       
0C28   72 06 1C 0C            DW   DONXT,TYPE1   
0C2C   28 10 44 06            DW   DROP,EXIT   
0C30                             ;   TYPEZ    ( cstr -- )
0C30                             ;   Similar to TYPE but prints C null terminated strings
0C30                          ;*Macro unroll: mCOLON	4,'TYPEZ',TYPEZ
0C30                          ;*Macro unroll:  mCODE 4, "TYPEZ", TYPEZ
0C30                          ALIGN   2   
0C30                TYPEZ:       
0C30                VVCODE:   .SET   $   
0C30                VVLEN:    .SET   (4 & 01FH) / CELLL   
16EA                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
16EA                VVNAME:   .SET   $   
16EA   30 0C F8 16            DW   vvCODE,vvLINK   
16EE                VVLINK:   .SET   $   
16EE   04 54 59 50 45 5A      DB   4,"TYPEZ"   
0C30                          .ORG   vvCODE   
0C30   00                     NOP      
0C31   CD 0E 06               CALL   doLIST   
0C34                TYPEZ1:      
0C34   24 10 72 0E            DW   DUPP,CAT   
0C38   24 10 3C 0E 4A 0C      DW   DUPP,QBRAN,TYPEZ2   
0C3E   C0 0B                  DW   EMIT   
0C40   1C 06 01 00 86 01      DW   DOLIT,1,PLUS   
0C46   48 0E 34 0C            DW   BRAN,TYPEZ1   
0C4A                TYPEZ2:      
0C4A   28 10 44 06            DW   DROP,EXIT   
0C4E                             ;   CR          ( -- )
0C4E                             ;               Output a carriage return and a line feed.
0C4E                          ;*Macro unroll: mCOLON	2,'CR',CR
0C4E                          ;*Macro unroll:  mCODE 2, "CR", CR
0C4E                          ALIGN   2   
0C4E                CR:          
0C4E                VVCODE:   .SET   $   
0C4E                VVLEN:    .SET   (2 & 01FH) / CELLL   
16E2                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
16E2                VVNAME:   .SET   $   
16E2   4E 0C EE 16            DW   vvCODE,vvLINK   
16E6                VVLINK:   .SET   $   
16E6   02 43 52               DB   2,"CR"   
0C4E                          .ORG   vvCODE   
0C4E   00                     NOP      
0C4F   CD 0E 06               CALL   doLIST   
0C52   1C 06 0D 00 C0 0B 1C 06 0A 00 C0 0B 44 06 DW   DOLIT,CRR,EMIT,DOLIT,LFF,EMIT,EXIT   
0C60                             ;   do$         ( -- a )
0C60                             ;               Return the address of a compiled string.
0C60                          ;*Macro unroll: mCOLON  COMPO+3,'do$',DOSTR
0C60                          ;*Macro unroll:  mCODE COMPO+3, "do$", DOSTR
0C60                          ALIGN   2   
0C60                DOSTR:       
0C60                VVCODE:   .SET   $   
0C60                VVLEN:    .SET   (COMPO+3 & 01FH) / CELLL   
16BA                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
16BA                VVNAME:   .SET   $   
16BA   60 0C E6 16            DW   vvCODE,vvLINK   
16BE                VVLINK:   .SET   $   
16BE   23 64 6F 24            DB   COMPO+3,"do$"   
0C60                          .ORG   vvCODE   
0C60   00                     NOP      
0C61   CD 0E 06               CALL   doLIST   
0C64   16 10 7A 0E 16 10 D8 0E 86 01 DW   RFROM,RAT,RFROM,COUNT,PLUS   
0C6E   D0 0F 08 10 2C 10 08 10 44 06 DW   ALGND,TOR,SWAP,TOR,EXIT   
0C78                             ;   $"|         ( -- a )
0C78                             ;               Run time routine compiled by $". Return address of a compiled string.
0C78                          ;*Macro unroll: hCOLON  COMPO+3,'$||',STRQP
0C78                          ;*Macro unroll:  hCODE COMPO+3, "$||", STRQP
0C78                          ALIGN   2   
0C78                STRQP:       
0C78   00                     NOP      
0C79   CD 0E 06               CALL   doLIST   
0C7C   60 0C 44 06            DW   DOSTR,EXIT   ;force a call to do$
0C80                             ;   ."|         ( -- )
0C80                             ;               Run time routine of ." . Output a compiled string.
0C80                          ;*Macro unroll: hCOLON  COMPO+3,'.||',DOTQP
0C80                          ;*Macro unroll:  hCODE COMPO+3, ".||", DOTQP
0C80                          ALIGN   2   
0C80                DOTQP:       
0C80   00                     NOP      
0C81   CD 0E 06               CALL   doLIST   
0C84   60 0C D8 0E 12 0C 44 06 DW   DOSTR,COUNT,TYPEE,EXIT   
0C8C                             ;   .R          ( n +n -- )
0C8C                             ;               Display an integer in a field of n columns, right justified.
0C8C                          ;*Macro unroll: mCOLON  2,'.R',DOTR
0C8C                          ;*Macro unroll:  mCODE 2, ".R", DOTR
0C8C                          ALIGN   2   
0C8C                DOTR:        
0C8C                VVCODE:   .SET   $   
0C8C                VVLEN:    .SET   (2 & 01FH) / CELLL   
16B2                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
16B2                VVNAME:   .SET   $   
16B2   8C 0C BE 16            DW   vvCODE,vvLINK   
16B6                VVLINK:   .SET   $   
16B6   02 2E 52               DB   2,".R"   
0C8C                          .ORG   vvCODE   
0C8C   00                     NOP      
0C8D   CD 0E 06               CALL   doLIST   
0C90   08 10 26 07 16 10 34 10 C0 01 DW   TOR,STR,RFROM,OVER,SUBB   
0C9A   FA 0B 12 0C 44 06      DW   SPACS,TYPEE,EXIT   
0CA0                             ;   U.R         ( u +n -- )
0CA0                             ;               Display an unsigned integer in n column, right justified.
0CA0                          ;*Macro unroll: mCOLON  3,'U.R',UDOTR
0CA0                          ;*Macro unroll:  mCODE 3, "U.R", UDOTR
0CA0                          ALIGN   2   
0CA0                UDOTR:       
0CA0                VVCODE:   .SET   $   
0CA0                VVLEN:    .SET   (3 & 01FH) / CELLL   
16AA                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
16AA                VVNAME:   .SET   $   
16AA   A0 0C B6 16            DW   vvCODE,vvLINK   
16AE                VVLINK:   .SET   $   
16AE   03 55 2E 52            DB   3,"U.R"   
0CA0                          .ORG   vvCODE   
0CA0   00                     NOP      
0CA1   CD 0E 06               CALL   doLIST   
0CA4   08 10 BE 06 F0 06 14 07 DW   TOR,BDIGS,DIGS,EDIGS   
0CAC   16 10 34 10 C0 01      DW   RFROM,OVER,SUBB   
0CB2   FA 0B 12 0C 44 06      DW   SPACS,TYPEE,EXIT   
0CB8                             ;   U.          ( u -- )
0CB8                             ;               Display an unsigned integer in free format.
0CB8                          ;*Macro unroll: mCOLON  2,'U.',UDOT
0CB8                          ;*Macro unroll:  mCODE 2, "U.", UDOT
0CB8                          ALIGN   2   
0CB8                UDOT:        
0CB8                VVCODE:   .SET   $   
0CB8                VVLEN:    .SET   (2 & 01FH) / CELLL   
16A2                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
16A2                VVNAME:   .SET   $   
16A2   B8 0C AE 16            DW   vvCODE,vvLINK   
16A6                VVLINK:   .SET   $   
16A6   02 55 2E               DB   2,"U."   
0CB8                          .ORG   vvCODE   
0CB8   00                     NOP      
0CB9   CD 0E 06               CALL   doLIST   
0CBC   BE 06 F0 06 14 07      DW   BDIGS,DIGS,EDIGS   
0CC2   F0 0B 12 0C 44 06      DW   SPACE,TYPEE,EXIT   
0CC8                             ;   .           ( w -- )
0CC8                             ;               Display an integer in free format, preceeded by a space.
0CC8                          ;*Macro unroll: mCOLON  1,'.',DOT
0CC8                          ;*Macro unroll:  mCODE 1, ".", DOT
0CC8                          ALIGN   2   
0CC8                DOT:         
0CC8                VVCODE:   .SET   $   
0CC8                VVLEN:    .SET   (1 & 01FH) / CELLL   
169C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
169C                VVNAME:   .SET   $   
169C   C8 0C A6 16            DW   vvCODE,vvLINK   
16A0                VVLINK:   .SET   $   
16A0   01 2E                  DB   1,"."   
0CC8                          .ORG   vvCODE   
0CC8   00                     NOP      
0CC9   CD 0E 06               CALL   doLIST   
0CCC   E4 10 62 0E 1C 06 0A 00 7C 01 DW   BASE,AT,DOLIT,10,XORR   ;?decimal
0CD6   3C 0E DE 0C            DW   QBRAN,DOT1   
0CDA   B8 0C 44 06            DW   UDOT,EXIT   ;no, display unsigned
0CDE                DOT1:        
0CDE   26 07 F0 0B 12 0C 44 06 DW   STR,SPACE,TYPEE,EXIT   ;yes, display signed
0CE6                             ;   .(          ( -- )
0CE6                             ;               Output following string up to next ) .
0CE6                          ;*Macro unroll: mCOLON  IMEDD+2,'.(',DOTPR
0CE6                          ;*Macro unroll:  mCODE IMEDD+2, ".(", DOTPR
0CE6                          ALIGN   2   
0CE6                DOTPR:       
0CE6                VVCODE:   .SET   $   
0CE6                VVLEN:    .SET   (IMEDD+2 & 01FH) / CELLL   
1654                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1654                VVNAME:   .SET   $   
1654   E6 0C A0 16            DW   vvCODE,vvLINK   
1658                VVLINK:   .SET   $   
1658   42 2E 28               DB   IMEDD+2,".("   
0CE6                          .ORG   vvCODE   
0CE6   00                     NOP      
0CE7   CD 0E 06               CALL   doLIST   
0CEA   1C 06 FC 08 12 0C 44 06 DW   DOLIT,")",PARSE,TYPEE,EXIT   
0CF2                             ;   ?           ( a -- )
0CF2                             ;               Display the contents in a memory cell.
0CF2                          ;*Macro unroll: mCOLON  1,'?',QUEST
0CF2                          ;*Macro unroll:  mCODE 1, "?", QUEST
0CF2                          ALIGN   2   
0CF2                QUEST:       
0CF2                VVCODE:   .SET   $   
0CF2                VVLEN:    .SET   (1 & 01FH) / CELLL   
164E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
164E                VVNAME:   .SET   $   
164E   F2 0C 58 16            DW   vvCODE,vvLINK   
1652                VVLINK:   .SET   $   
1652   01 3F                  DB   1,"?"   
0CF2                          .ORG   vvCODE   
0CF2   00                     NOP      
0CF3   CD 0E 06               CALL   doLIST   
0CF6   62 0E C8 0C 44 06      DW   AT,DOT,EXIT   
0CFC                             ;   ^H          ( bot eot cur -- bot eot cur )
0CFC                             ;               Backup the cursor by one character.
0CFC                          ;*Macro unroll: mCOLON  2,'^H',BKSP
0CFC                          ;*Macro unroll:  mCODE 2, "^H", BKSP
0CFC                          ALIGN   2   
0CFC                BKSP:        
0CFC                VVCODE:   .SET   $   
0CFC                VVLEN:    .SET   (2 & 01FH) / CELLL   
1646                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1646                VVNAME:   .SET   $   
1646   FC 0C 52 16            DW   vvCODE,vvLINK   
164A                VVLINK:   .SET   $   
164A   02 5E 48               DB   2,"^H"   
0CFC                          .ORG   vvCODE   
0CFC   00                     NOP      
0CFD   CD 0E 06               CALL   doLIST   
0D00   08 10 34 10 16 10 2C 10 34 10 7C 01 DW   TOR,OVER,RFROM,SWAP,OVER,XORR   
0D0C   3C 0E 2C 0D            DW   QBRAN,BACK1   
0D10   1C 06 08 00 D4 10 0E 0F 1C 06 01 00 C0 01 DW   DOLIT,BKSPP,TECHO,ATEXE,DOLIT,1,SUBB   
0D1E   58 07 D4 10 0E 0F      DW   BLANK,TECHO,ATEXE   
0D24   1C 06 08 00 D4 10 0E 0F DW   DOLIT,BKSPP,TECHO,ATEXE   
0D2C                BACK1:       
0D2C   44 06                  DW   EXIT   
0D2E                             ;   TAP         ( bot eot cur c -- bot eot cur )
0D2E                             ;               Accept and echo the key stroke and bump the cursor.
0D2E                          ;*Macro unroll: mCOLON  3,'TAP',TAP
0D2E                          ;*Macro unroll:  mCODE 3, "TAP", TAP
0D2E                          ALIGN   2   
0D2E                TAP:         
0D2E                VVCODE:   .SET   $   
0D2E                VVLEN:    .SET   (3 & 01FH) / CELLL   
163E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
163E                VVNAME:   .SET   $   
163E   2E 0D 4A 16            DW   vvCODE,vvLINK   
1642                VVLINK:   .SET   $   
1642   03 54 41 50            DB   3,"TAP"   
0D2E                          .ORG   vvCODE   
0D2E   00                     NOP      
0D2F   CD 0E 06               CALL   doLIST   
0D32   24 10 D4 10 0E 0F      DW   DUPP,TECHO,ATEXE   
0D38   34 10 6A 0E 1C 06 01 00 86 01 44 06 DW   OVER,CSTOR,DOLIT,1,PLUS,EXIT   
0D44                             ;   kTAP        ( bot eot cur c -- bot eot cur )
0D44                             ;               Process a key stroke, CR or backspace.
0D44                          ;*Macro unroll: mCOLON  4,'kTAP',KTAP
0D44                          ;*Macro unroll:  mCODE 4, "kTAP", KTAP
0D44                          ALIGN   2   
0D44                KTAP:        
0D44                VVCODE:   .SET   $   
0D44                VVLEN:    .SET   (4 & 01FH) / CELLL   
1634                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1634                VVNAME:   .SET   $   
1634   44 0D 42 16            DW   vvCODE,vvLINK   
1638                VVLINK:   .SET   $   
1638   04 6B 54 41 50         DB   4,"kTAP"   
0D44                          .ORG   vvCODE   
0D44   00                     NOP      
0D45   CD 0E 06               CALL   doLIST   
0D48   24 10 1C 06 0D 00 7C 01 DW   DUPP,DOLIT,CRR,XORR   
0D50   3C 0E 68 0D            DW   QBRAN,KTAP2   
0D54   1C 06 08 00 7C 01      DW   DOLIT,BKSPP,XORR   
0D5A   3C 0E 64 0D            DW   QBRAN,KTAP1   
0D5E   58 07 2E 0D 44 06      DW   BLANK,TAP,EXIT   
0D64                KTAP1:       
0D64   FC 0C 44 06            DW   BKSP,EXIT   
0D68                KTAP2:       
0D68   28 10 2C 10 28 10 24 10 44 06 DW   DROP,SWAP,DROP,DUPP,EXIT   
0D72                             ;   accept      ( b u -- b u )
0D72                             ;               Accept characters to input buffer. Return with actual count.
0D72                          ;*Macro unroll: mCOLON  6,'accept',ACCEP
0D72                          ;*Macro unroll:  mCODE 6, "accept", ACCEP
0D72                          ALIGN   2   
0D72                ACCEP:       
0D72                VVCODE:   .SET   $   
0D72                VVLEN:    .SET   (6 & 01FH) / CELLL   
1628                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1628                VVNAME:   .SET   $   
1628   72 0D 38 16            DW   vvCODE,vvLINK   
162C                VVLINK:   .SET   $   
162C   06 61 63 63 65 70 74   DB   6,"accept"   
0D72                          .ORG   vvCODE   
0D72   00                     NOP      
0D73   CD 0E 06               CALL   doLIST   
0D76   34 10 86 01 34 10      DW   OVER,PLUS,OVER   
0D7C                ACCP1:       
0D7C   62 10 7C 01            DW   DDUP,XORR   
0D80   3C 0E A2 0D            DW   QBRAN,ACCP4   
0D84   AE 0B 24 10            DW   KEY,DUPP   
0D88   58 07 1C 06 7F 00 4C 02 DW   BLANK,DOLIT,127,WITHI   
0D90   3C 0E 9A 0D            DW   QBRAN,ACCP2   
0D94   2E 0D                  DW   TAP   
0D96   48 0E 9E 0D            DW   BRAN,ACCP3   
0D9A                ACCP2:       
0D9A   CC 10 0E 0F            DW   TTAP,ATEXE   
0D9E                ACCP3:       
0D9E   48 0E 7C 0D            DW   BRAN,ACCP1   
0DA2                ACCP4:       
0DA2   28 10 34 10 C0 01 44 06 DW   DROP,OVER,SUBB,EXIT   
0DAA                             ;   EXPECT      ( b u -- )
0DAA                             ;               Accept input stream and STORE count in SPAN.
0DAA                          ;*Macro unroll: hCOLON  6,'EXPECT',EXPEC
0DAA                          ;*Macro unroll:  hCODE 6, "EXPECT", EXPEC
0DAA                          ALIGN   2   
0DAA                EXPEC:       
0DAA   00                     NOP      
0DAB   CD 0E 06               CALL   doLIST   
0DAE   C4 10 0E 0F F4 10 58 0E 28 10 44 06 DW   TEXPE,ATEXE,SPAN,STORE,DROP,EXIT   
0DBA                             ;   QUERY       ( -- )
0DBA                             ;               Accept input stream to terminal input buffer.
0DBA                          ;*Macro unroll: hCOLON  5,'QUERY',QUERY
0DBA                          ;*Macro unroll:  hCODE 5, "QUERY", QUERY
0DBA                          ALIGN   2   
0DBA                QUERY:       
0DBA   00                     NOP      
0DBB   CD 0E 06               CALL   doLIST   
0DBE   02 0F 1C 06 50 00 C4 10 0E 0F 04 11 58 0E DW   TIB,DOLIT,80,TEXPE,ATEXE,NTIB,STORE   
0DCC   28 10 1C 06 00 00 FC 10 58 0E 44 06 DW   DROP,DOLIT,0,INN,STORE,EXIT   
0DD8                          ;*Macro unroll: hCOLON	4,'HI',HI
0DD8                          ;*Macro unroll:  hCODE 4, "HI", HI
0DD8                          ALIGN   2   
0DD8                HI:          
0DD8   00                     NOP      
0DD9   CD 0E 06               CALL   doLIST   
0DDC   7C 0B                  DW   STOIO   
0DDE   1C 06 F0 0D            DW   DOLIT,HELLO   
0DE2   30 0C                  DW   TYPEZ   
0DE4   AE 0B                  DW   KEY   
0DE6   C0 0B                  DW   EMIT   
0DE8   1C 06 F0 0D            DW   DOLIT,HELLO   
0DEC   30 0C                  DW   TYPEZ   
0DEE   36 0E                  DW   QUIT   
0DF0   48 65 6C 6C 6F 20 46 6F 72 74 68 21 20 0D 0A 00 HELLO:   .CSTR   "Hello Forth! \r\n"   
0E00                NEXT_STEP:      
0E00   5E                     LD   E,(HL)   ; 7t
0E01   23                     INC   HL   ; 6t
0E02   56                     LD   D,(HL)   ; 7t
0E03   23                     INC   HL   ; 6t
0E04   EB                     EX   DE,HL   ; 4t
0E05   E9                     JP   (HL)   ; 4t
0E06                          ;*Macro unroll: mCOLON	4,'COLD',COLD
0E06                          ;*Macro unroll:  mCODE 4, "COLD", COLD
0E06                          ALIGN   2   
0E06                COLD:        
0E06                VVCODE:   .SET   $   
0E06                VVLEN:    .SET   (4 & 01FH) / CELLL   
161E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
161E                VVNAME:   .SET   $   
161E   06 0E 2C 16            DW   vvCODE,vvLINK   
1622                VVLINK:   .SET   $   
1622   04 43 4F 4C 44         DB   4,"COLD"   
0E06                          .ORG   vvCODE   
0E06   00                     NOP      
0E07   CD 0E 06               CALL   doLIST   
0E0A                COLD1:       
0E0A   1C 06 26 01 1C 06 00 24 DW   DOLIT,UZERO,DOLIT,UPP   
0E12   1C 06 3A 00 1E 0F      DW   DOLIT,ULAST-UZERO,CMOVE   ;initialize user area
0E18   20 0E                  DW   PRESE   ;initialize stack and TIB
0E1A                             ; DW      TBOOT,ATEXE             ;application boot
0E1A                             ; DW      FORTH,CNTXT,AT,DUPP     ;initialize search order
0E1A                             ; DW      CRRNT,DSTOR,OVERT
0E1A   36 0E                  DW   QUIT   ;start interpretation
0E1C   48 0E 0A 0E            DW   BRAN,COLD1   ;just in case
0E20                             ;   PRESET      ( -- )
0E20                             ;               Reset data stack pointer and the terminal input buffer.
0E20                          ;*Macro unroll: mCOLON  6,'PRESET',PRESE
0E20                          ;*Macro unroll:  mCODE 6, "PRESET", PRESE
0E20                          ALIGN   2   
0E20                PRESE:       
0E20                VVCODE:   .SET   $   
0E20                VVLEN:    .SET   (6 & 01FH) / CELLL   
1612                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1612                VVNAME:   .SET   $   
1612   20 0E 22 16            DW   vvCODE,vvLINK   
1616                VVLINK:   .SET   $   
1616   06 50 52 45 53 45 54   DB   6,"PRESET"   
0E20                          .ORG   vvCODE   
0E20   00                     NOP      
0E21   CD 0E 06               CALL   doLIST   
0E24   A4 10 62 0E 9E 0E      DW   SZERO,AT,SPSTO   
0E2A   1C 06 00 22 04 11 82 03 58 0E 44 06 DW   DOLIT,TIBB,NTIB,CELLP,STORE,EXIT   
0E36                          ;*Macro unroll: mCODE  4, 'QUIT', QUIT
0E36                          ALIGN   2   
0E36                QUIT:        
0E36                VVCODE:   .SET   $   
0E36                VVLEN:    .SET   (4 & 01FH) / CELLL   
1608                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1608                VVNAME:   .SET   $   
1608   36 0E 16 16            DW   vvCODE,vvLINK   
160C                VVLINK:   .SET   $   
160C   04 51 55 49 54         DB   4,"QUIT"   
0E36                          .ORG   vvCODE   
0E36   76                     HALT      
0E37                             ;   EXECUTE	( i*x xt -- j*x )		\ CORE
0E37                             ;		Perform the semantics indentified by execution token, xt.
0E37                          ;*Macro unroll: mCODE	7,'EXECUTE', EXECU
0E37                          ALIGN   2   
0E38                EXECU:       
0E38                VVCODE:   .SET   $   
0E38                VVLEN:    .SET   (7 & 01FH) / CELLL   
15FC                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
15FC                VVNAME:   .SET   $   
15FC   38 0E 0C 16            DW   vvCODE,vvLINK   
1600                VVLINK:   .SET   $   
1600   07 45 58 45 43 55 54 45 DB   7,"EXECUTE"   
0E38                          .ORG   vvCODE   
0E38   60                     LD   H,B   
0E39   69                     LD   L,C   
0E3A   C1                     POP   BC   
0E3B   E9                     JP   (HL)   
0E3C                             ; 
0E3C                             ;   0BRAN	( flag -- )
0E3C                             ;		BRAN if flag is zero.
0E3C                          ;*Macro unroll: hCODE	COMPO+7,'?branch', QBRAN
0E3C                          ALIGN   2   
0E3C                QBRAN:       
0E3C   78                     LD   A,B   ; 4t
0E3D   B1                     OR   C   ; 4t
0E3E   C1                     POP   BC   ;10t
0E3F   CA 48 0E               JP   Z,BRAN   ;10/7t a fast dec is ok, only
0E42   13                     INC   DE   ; 6t yes,continue past the BRAN offset
0E43   13                     INC   DE   ; 6t
0E44                          ;*Macro unroll: 	mNEXT
0E44   EB                     EX   DE,HL   
0E45                          ;*Macro unroll:  mNEXTHL                         ; 34t
0E45   FD E9                  JP   (IY)   ; 34t
0E47                             ;   BRAN	( -- )
0E47                             ;		BRAN to an inline address.
0E47                          ;*Macro unroll: hCODE	COMPO+6,'branch', BRAN
0E47                          ALIGN   2   
0E48                BRAN:        
0E48   1A                     LD   A,(DE)   ; 7t go back to the loop
0E49   6F                     LD   L,A   ; 4t
0E4A   13                     INC   DE   ; 6t
0E4B   1A                     LD   A,(DE)   ; 7t
0E4C   67                     LD   H,A   ; 4t
0E4D                          ;*Macro unroll: 	mNEXTHL
0E4D   FD E9                  JP   (IY)   
0E4F                             ; 
0E4F                             ;   THROW    ( cstr -- )
0E4F                             ;   Prints string message and returns TODO: restart Forth interpreter QUIT
0E4F                          ;*Macro unroll: mCOLON	5,'THROWX',THROWX
0E4F                          ;*Macro unroll:  mCODE 5, "THROWX", THROWX
0E4F                          ALIGN   2   
0E50                THROWX:      
0E50                VVCODE:   .SET   $   
0E50                VVLEN:    .SET   (5 & 01FH) / CELLL   
15F2                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
15F2                VVNAME:   .SET   $   
15F2   50 0E 00 16            DW   vvCODE,vvLINK   
15F6                VVLINK:   .SET   $   
15F6   05 54 48 52 4F 57 58   DB   5,"THROWX"   
0E50                          .ORG   vvCODE   
0E50   00                     NOP      
0E51   CD 0E 06               CALL   doLIST   
0E54   30 0C 44 06            DW   TYPEZ,EXIT   
0E58                             ;   !           ( w a -- )
0E58                             ;               Pop the data stack to memory.
0E58                          ;*Macro unroll: mCODE	1,'!',STORE
0E58                          ALIGN   2   
0E58                STORE:       
0E58                VVCODE:   .SET   $   
0E58                VVLEN:    .SET   (1 & 01FH) / CELLL   
15EC                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
15EC                VVNAME:   .SET   $   
15EC   58 0E F6 15            DW   vvCODE,vvLINK   
15F0                VVLINK:   .SET   $   
15F0   01 21                  DB   1,"!"   
0E58                          .ORG   vvCODE   
0E58   60                     LD   H,B   
0E59   69                     LD   L,C   
0E5A   C1                     POP   BC   
0E5B   71                     LD   (HL),C   
0E5C   23                     INC   HL   
0E5D   70                     LD   (HL),B   
0E5E   C1                     POP   BC   
0E5F                          ;*Macro unroll: 	mNEXT
0E5F   EB                     EX   DE,HL   
0E60                          ;*Macro unroll:  mNEXTHL                         ; 34t
0E60   FD E9                  JP   (IY)   ; 34t
0E62                             ;   @           ( a -- w )
0E62                             ;               Push memory location to the data stack.
0E62                          ;*Macro unroll: mCODE	1,'@', AT
0E62                          ALIGN   2   
0E62                AT:          
0E62                VVCODE:   .SET   $   
0E62                VVLEN:    .SET   (1 & 01FH) / CELLL   
15E6                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
15E6                VVNAME:   .SET   $   
15E6   62 0E F0 15            DW   vvCODE,vvLINK   
15EA                VVLINK:   .SET   $   
15EA   01 40                  DB   1,"@"   
0E62                          .ORG   vvCODE   
0E62   60                     LD   H,B   
0E63   69                     LD   L,C   
0E64   4E                     LD   C,(HL)   
0E65   23                     INC   HL   
0E66   46                     LD   B,(HL)   
0E67                          ;*Macro unroll: 	mNEXT
0E67   EB                     EX   DE,HL   
0E68                          ;*Macro unroll:  mNEXTHL                         ; 34t
0E68   FD E9                  JP   (IY)   ; 34t
0E6A                             ;   C!          ( c b -- )
0E6A                             ;               Pop the data stack to byte memory.
0E6A                          ;*Macro unroll: mCODE	2,'C!',CSTOR
0E6A                          ALIGN   2   
0E6A                CSTOR:       
0E6A                VVCODE:   .SET   $   
0E6A                VVLEN:    .SET   (2 & 01FH) / CELLL   
15DE                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
15DE                VVNAME:   .SET   $   
15DE   6A 0E EA 15            DW   vvCODE,vvLINK   
15E2                VVLINK:   .SET   $   
15E2   02 43 21               DB   2,"C!"   
0E6A                          .ORG   vvCODE   
0E6A   60                     LD   H,B   
0E6B   69                     LD   L,C   
0E6C   C1                     POP   BC   
0E6D   71                     LD   (HL),C   
0E6E   C1                     POP   BC   
0E6F                          ;*Macro unroll: 	mNEXT
0E6F   EB                     EX   DE,HL   
0E70                          ;*Macro unroll:  mNEXTHL                         ; 34t
0E70   FD E9                  JP   (IY)   ; 34t
0E72                             ;   C@          ( b -- c )
0E72                             ;               Push byte memory location to the data stack.
0E72                          ;*Macro unroll: mCODE	2,'C@',CAT
0E72                          ALIGN   2   
0E72                CAT:         
0E72                VVCODE:   .SET   $   
0E72                VVLEN:    .SET   (2 & 01FH) / CELLL   
15D6                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
15D6                VVNAME:   .SET   $   
15D6   72 0E E2 15            DW   vvCODE,vvLINK   
15DA                VVLINK:   .SET   $   
15DA   02 43 40               DB   2,"C@"   
0E72                          .ORG   vvCODE   
0E72   0A                     LD   A,(BC)   
0E73   4F                     LD   C,A   
0E74   06 00                  LD   B,0   
0E76                          ;*Macro unroll: 	mNEXT
0E76   EB                     EX   DE,HL   
0E77                          ;*Macro unroll:  mNEXTHL                         ; 34t
0E77   FD E9                  JP   (IY)   ; 34t
0E79                             ;   R@          ( -- w )
0E79                             ;               Copy top of return stack to the data stack.
0E79                          ;*Macro unroll: mCODE	COMPO+2,'R@',RAT
0E79                          ALIGN   2   
0E7A                RAT:         
0E7A                VVCODE:   .SET   $   
0E7A                VVLEN:    .SET   (COMPO+2 & 01FH) / CELLL   
15AE                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
15AE                VVNAME:   .SET   $   
15AE   7A 0E DA 15            DW   vvCODE,vvLINK   
15B2                VVLINK:   .SET   $   
15B2   22 52 40               DB   COMPO+2,"R@"   
0E7A                          .ORG   vvCODE   
0E7A   C5                     PUSH   BC   
0E7B   DD 4E 00               LD   C,(IX+0)   
0E7E   DD 46 01               LD   B,(IX+1)   
0E81                          ;*Macro unroll: 	mNEXT
0E81   EB                     EX   DE,HL   
0E82                          ;*Macro unroll:  mNEXTHL                         ; 34t
0E82   FD E9                  JP   (IY)   ; 34t
0E84                             ;   RP@         ( -- a )
0E84                             ;               Push the current RP to the data stack
0E84                          ;*Macro unroll: mCODE	COMPO+3, 'rp@', RPAT
0E84                          ALIGN   2   
0E84                RPAT:        
0E84                VVCODE:   .SET   $   
0E84                VVLEN:    .SET   (COMPO+3 & 01FH) / CELLL   
1586                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1586                VVNAME:   .SET   $   
1586   84 0E B2 15            DW   vvCODE,vvLINK   
158A                VVLINK:   .SET   $   
158A   23 72 70 40            DB   COMPO+3,"rp@"   
0E84                          .ORG   vvCODE   
0E84   C5                     DB   0C5h   ; PUSH	BC	;11t
0E85   DD E5                  DB   0DDh,0E5h   ; PUSH IX	;15t
0E87   C1                     DB   0C1h   ; POP	BC	;10t
0E88                          ;*Macro unroll:  mNEXT
0E88   EB                     EX   DE,HL   
0E89                          ;*Macro unroll:  mNEXTHL                         ; 34t
0E89   FD E9                  JP   (IY)   ; 34t
0E8B                             ;   RP!         ( a -- )
0E8B                             ;               Set the return stack pointer.
0E8B                          ;*Macro unroll: mCODE	COMPO+3,'rp!',RPSTO
0E8B                          ALIGN   2   
0E8C                RPSTO:       
0E8C                VVCODE:   .SET   $   
0E8C                VVLEN:    .SET   (COMPO+3 & 01FH) / CELLL   
155E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
155E                VVNAME:   .SET   $   
155E   8C 0E 8A 15            DW   vvCODE,vvLINK   
1562                VVLINK:   .SET   $   
1562   23 72 70 21            DB   COMPO+3,"rp!"   
0E8C                          .ORG   vvCODE   
0E8C   C5                     DB   0C5h   ; PUSH	BC	;11t
0E8D   DD E1                  DB   0DDh,0E1h   ; POP IX	;14t
0E8F   C1                     DB   0C1h   ; POP	BC	;10t
0E90                          ;*Macro unroll: 	mNEXT
0E90   EB                     EX   DE,HL   
0E91                          ;*Macro unroll:  mNEXTHL                         ; 34t
0E91   FD E9                  JP   (IY)   ; 34t
0E93                             ;   SP@         ( -- a )
0E93                             ;               Push the current data stack pointer.
0E93                          ;*Macro unroll: mCODE	3, 'sp@', SPAT
0E93                          ALIGN   2   
0E94                SPAT:        
0E94                VVCODE:   .SET   $   
0E94                VVLEN:    .SET   (3 & 01FH) / CELLL   
1556                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1556                VVNAME:   .SET   $   
1556   94 0E 62 15            DW   vvCODE,vvLINK   
155A                VVLINK:   .SET   $   
155A   03 73 70 40            DB   3,"sp@"   
0E94                          .ORG   vvCODE   
0E94   C5                     DB   0C5h   ; PUSH	BC	;11t
0E95   21                     DB   021h   ; LD	HL,0	;10t
0E96   00 00                  DW   0   
0E98   39                     DB   039h   ; ADD	HL,SP	;11t
0E99   44                     DB   044h   ; LD	B,H	; 4t
0E9A   4D                     DB   04Dh   ; LD	C,L	; 4t
0E9B                          ;*Macro unroll: 	mNEXT
0E9B   EB                     EX   DE,HL   
0E9C                          ;*Macro unroll:  mNEXTHL                         ; 34t
0E9C   FD E9                  JP   (IY)   ; 34t
0E9E                             ;   SP!         ( a -- )
0E9E                             ;               Set the data stack pointer.
0E9E                          ;*Macro unroll: mCODE	3,'sp!',SPSTO
0E9E                          ALIGN   2   
0E9E                SPSTO:       
0E9E                VVCODE:   .SET   $   
0E9E                VVLEN:    .SET   (3 & 01FH) / CELLL   
154E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
154E                VVNAME:   .SET   $   
154E   9E 0E 5A 15            DW   vvCODE,vvLINK   
1552                VVLINK:   .SET   $   
1552   03 73 70 21            DB   3,"sp!"   
0E9E                          .ORG   vvCODE   
0E9E   60                     DB   060h   ; LD	H,B	; 4t
0E9F   69                     DB   069h   ; LD	L,C	; 4t
0EA0   F9                     DB   0F9h   ; LD	SP,HL	; 6t
0EA1   C1                     DB   0C1h   ; POP	BC	;10t
0EA2                          ;*Macro unroll: 	mNEXT
0EA2   EB                     EX   DE,HL   
0EA3                          ;*Macro unroll:  mNEXTHL                         ; 34t
0EA3   FD E9                  JP   (IY)   ; 34t
0EA5                             ;   +!          ( n a -- )
0EA5                             ;               Add n to the contents at address a.
0EA5                          ;*Macro unroll: mCOLON  2,'+!',PSTOR
0EA5                          ;*Macro unroll:  mCODE 2, "+!", PSTOR
0EA5                          ALIGN   2   
0EA6                PSTOR:       
0EA6                VVCODE:   .SET   $   
0EA6                VVLEN:    .SET   (2 & 01FH) / CELLL   
1546                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1546                VVNAME:   .SET   $   
1546   A6 0E 52 15            DW   vvCODE,vvLINK   
154A                VVLINK:   .SET   $   
154A   02 2B 21               DB   2,"+!"   
0EA6                          .ORG   vvCODE   
0EA6   00                     NOP      
0EA7   CD 0E 06               CALL   doLIST   
0EAA   2C 10 34 10 62 0E 86 01 DW   SWAP,OVER,AT,PLUS   
0EB2   2C 10 58 0E 44 06      DW   SWAP,STORE,EXIT   
0EB8                             ;   2!          ( d a -- )
0EB8                             ;               STORE the double integer to address a.
0EB8                          ;*Macro unroll: mCOLON  2,'2!',DSTOR
0EB8                          ;*Macro unroll:  mCODE 2, "2!", DSTOR
0EB8                          ALIGN   2   
0EB8                DSTOR:       
0EB8                VVCODE:   .SET   $   
0EB8                VVLEN:    .SET   (2 & 01FH) / CELLL   
153E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
153E                VVNAME:   .SET   $   
153E   B8 0E 4A 15            DW   vvCODE,vvLINK   
1542                VVLINK:   .SET   $   
1542   02 32 21               DB   2,"2!"   
0EB8                          .ORG   vvCODE   
0EB8   00                     NOP      
0EB9   CD 0E 06               CALL   doLIST   
0EBC   2C 10 34 10 58 0E      DW   SWAP,OVER,STORE   
0EC2   82 03 58 0E 44 06      DW   CELLP,STORE,EXIT   
0EC8                             ;   2@          ( a -- d )
0EC8                             ;               Fetch double integer from address a.
0EC8                          ;*Macro unroll: mCOLON  2,'2@',DAT
0EC8                          ;*Macro unroll:  mCODE 2, "2@", DAT
0EC8                          ALIGN   2   
0EC8                DAT:         
0EC8                VVCODE:   .SET   $   
0EC8                VVLEN:    .SET   (2 & 01FH) / CELLL   
1536                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1536                VVNAME:   .SET   $   
1536   C8 0E 42 15            DW   vvCODE,vvLINK   
153A                VVLINK:   .SET   $   
153A   02 32 40               DB   2,"2@"   
0EC8                          .ORG   vvCODE   
0EC8   00                     NOP      
0EC9   CD 0E 06               CALL   doLIST   
0ECC   24 10 82 03 62 0E      DW   DUPP,CELLP,AT   
0ED2   2C 10 62 0E 44 06      DW   SWAP,AT,EXIT   
0ED8                             ;   COUNT       ( b -- b +n )
0ED8                             ;               Return count byte of a string and add 1 to byte address.
0ED8                          ;*Macro unroll: mCOLON  5,'COUNT',COUNT
0ED8                          ;*Macro unroll:  mCODE 5, "COUNT", COUNT
0ED8                          ALIGN   2   
0ED8                COUNT:       
0ED8                VVCODE:   .SET   $   
0ED8                VVLEN:    .SET   (5 & 01FH) / CELLL   
152C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
152C                VVNAME:   .SET   $   
152C   D8 0E 3A 15            DW   vvCODE,vvLINK   
1530                VVLINK:   .SET   $   
1530   05 43 4F 55 4E 54      DB   5,"COUNT"   
0ED8                          .ORG   vvCODE   
0ED8   00                     NOP      
0ED9   CD 0E 06               CALL   doLIST   
0EDC   24 10 1C 06 01 00 86 01 DW   DUPP,DOLIT,1,PLUS   
0EE4   2C 10 72 0E 44 06      DW   SWAP,CAT,EXIT   
0EEA                             ;   HERE        ( -- a )
0EEA                             ;               Return the top of the code dictionary.
0EEA                          ;*Macro unroll: mCOLON  4,'HERE',HERE
0EEA                          ;*Macro unroll:  mCODE 4, "HERE", HERE
0EEA                          ALIGN   2   
0EEA                HERE:        
0EEA                VVCODE:   .SET   $   
0EEA                VVLEN:    .SET   (4 & 01FH) / CELLL   
1522                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1522                VVNAME:   .SET   $   
1522   EA 0E 30 15            DW   vvCODE,vvLINK   
1526                VVLINK:   .SET   $   
1526   04 48 45 52 45         DB   4,"HERE"   
0EEA                          .ORG   vvCODE   
0EEA   00                     NOP      
0EEB   CD 0E 06               CALL   doLIST   
0EEE   44 11 62 0E 44 06      DW   CP,AT,EXIT   
0EF4                             ;   PAD         ( -- a )
0EF4                             ;               Return the address of a temporary buffer.
0EF4                          ;*Macro unroll: mCOLON  3,'PAD',PAD
0EF4                          ;*Macro unroll:  mCODE 3, "PAD", PAD
0EF4                          ALIGN   2   
0EF4                PAD:         
0EF4                VVCODE:   .SET   $   
0EF4                VVLEN:    .SET   (3 & 01FH) / CELLL   
151A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
151A                VVNAME:   .SET   $   
151A   F4 0E 26 15            DW   vvCODE,vvLINK   
151E                VVLINK:   .SET   $   
151E   03 50 41 44            DB   3,"PAD"   
0EF4                          .ORG   vvCODE   
0EF4   00                     NOP      
0EF5   CD 0E 06               CALL   doLIST   
0EF8   EA 0E 1C 06 50 00 86 01 44 06 DW   HERE,DOLIT,80,PLUS,EXIT   
0F02                             ;   TIB         ( -- a )
0F02                             ;               Return the address of the terminal input buffer.
0F02                          ;*Macro unroll: mCOLON  3,'TIB',TIB
0F02                          ;*Macro unroll:  mCODE 3, "TIB", TIB
0F02                          ALIGN   2   
0F02                TIB:         
0F02                VVCODE:   .SET   $   
0F02                VVLEN:    .SET   (3 & 01FH) / CELLL   
1512                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1512                VVNAME:   .SET   $   
1512   02 0F 1E 15            DW   vvCODE,vvLINK   
1516                VVLINK:   .SET   $   
1516   03 54 49 42            DB   3,"TIB"   
0F02                          .ORG   vvCODE   
0F02   00                     NOP      
0F03   CD 0E 06               CALL   doLIST   
0F06   04 11 82 03 62 0E 44 06 DW   NTIB,CELLP,AT,EXIT   
0F0E                             ;   @EXECUTE    ( a -- )
0F0E                             ;               Execute vector STOREd in address a.
0F0E                          ;*Macro unroll: hCOLON  8,'@EXECUTE',ATEXE
0F0E                          ;*Macro unroll:  hCODE 8, "@EXECUTE", ATEXE
0F0E                          ALIGN   2   
0F0E                ATEXE:       
0F0E   00                     NOP      
0F0F   CD 0E 06               CALL   doLIST   
0F12   62 0E 3C 10            DW   AT,QDUP   ;?address or zero
0F16   3C 0E 1C 0F            DW   QBRAN,EXE1   
0F1A   38 0E                  DW   EXECU   ;execute if non-zero
0F1C                EXE1:        
0F1C   44 06                  DW   EXIT   ;do nothing if zero
0F1E                             ;   CMOVE       ( b1 b2 u -- )
0F1E                             ;               Copy u bytes from b1 to b2.
0F1E                          ;*Macro unroll: mCOLON  5,'CMOVE',CMOVE
0F1E                          ;*Macro unroll:  mCODE 5, "CMOVE", CMOVE
0F1E                          ALIGN   2   
0F1E                CMOVE:       
0F1E                VVCODE:   .SET   $   
0F1E                VVLEN:    .SET   (5 & 01FH) / CELLL   
1508                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1508                VVNAME:   .SET   $   
1508   1E 0F 16 15            DW   vvCODE,vvLINK   
150C                VVLINK:   .SET   $   
150C   05 43 4D 4F 56 45      DB   5,"CMOVE"   
0F1E                          .ORG   vvCODE   
0F1E   00                     NOP      
0F1F   CD 0E 06               CALL   doLIST   
0F22   08 10                  DW   TOR   
0F24   48 0E 40 0F            DW   BRAN,CMOV2   
0F28                CMOV1:       
0F28   08 10 24 10 72 0E      DW   TOR,DUPP,CAT   
0F2E   7A 0E 6A 0E            DW   RAT,CSTOR   
0F32   1C 06 01 00 86 01      DW   DOLIT,1,PLUS   
0F38   16 10 1C 06 01 00 86 01 DW   RFROM,DOLIT,1,PLUS   
0F40                CMOV2:       
0F40   72 06 28 0F            DW   DONXT,CMOV1   
0F44   58 10 44 06            DW   DDROP,EXIT   
0F48                             ;   FILL        ( b u c -- )
0F48                             ;               Fill u bytes of character c to area beginning at b.
0F48                          ;*Macro unroll: mCOLON  4,'FILL',FILL
0F48                          ;*Macro unroll:  mCODE 4, "FILL", FILL
0F48                          ALIGN   2   
0F48                FILL:        
0F48                VVCODE:   .SET   $   
0F48                VVLEN:    .SET   (4 & 01FH) / CELLL   
14FE                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
14FE                VVNAME:   .SET   $   
14FE   48 0F 0C 15            DW   vvCODE,vvLINK   
1502                VVLINK:   .SET   $   
1502   04 46 49 4C 4C         DB   4,"FILL"   
0F48                          .ORG   vvCODE   
0F48   00                     NOP      
0F49   CD 0E 06               CALL   doLIST   
0F4C   2C 10 08 10 2C 10      DW   SWAP,TOR,SWAP   
0F52   48 0E 60 0F            DW   BRAN,FILL2   
0F56                FILL1:       
0F56   62 10 6A 0E 1C 06 01 00 86 01 DW   DDUP,CSTOR,DOLIT,1,PLUS   
0F60                FILL2:       
0F60   72 06 56 0F            DW   DONXT,FILL1   
0F64   58 10 44 06            DW   DDROP,EXIT   
0F68                             ;   -TRAILING   ( b u -- b u )
0F68                             ;               Adjust the count to eliminate trailing white space.
0F68                          ;*Macro unroll: mCOLON  9,'-TRAILING',DTRAI
0F68                          ;*Macro unroll:  mCODE 9, "-TRAILING", DTRAI
0F68                          ALIGN   2   
0F68                DTRAI:       
0F68                VVCODE:   .SET   $   
0F68                VVLEN:    .SET   (9 & 01FH) / CELLL   
14F0                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
14F0                VVNAME:   .SET   $   
14F0   68 0F 02 15            DW   vvCODE,vvLINK   
14F4                VVLINK:   .SET   $   
14F4   09 2D 54 52 41 49 4C 49 4E 47 DB   9,"-TRAILING"   
0F68                          .ORG   vvCODE   
0F68   00                     NOP      
0F69   CD 0E 06               CALL   doLIST   
0F6C   08 10                  DW   TOR   
0F6E   48 0E 8C 0F            DW   BRAN,DTRA2   
0F72                DTRA1:       
0F72   58 07 34 10 7A 0E 86 01 72 0E 0C 02 DW   BLANK,OVER,RAT,PLUS,CAT,LESS   
0F7E   3C 0E 8C 0F            DW   QBRAN,DTRA2   
0F82   16 10 1C 06 01 00 86 01 44 06 DW   RFROM,DOLIT,1,PLUS,EXIT   ;adjusted count
0F8C                DTRA2:       
0F8C   72 06 72 0F            DW   DONXT,DTRA1   
0F90   1C 06 00 00 44 06      DW   DOLIT,0,EXIT   ;count=0
0F96                             ;   PACK$       ( b u a -- a )
0F96                             ;               Build a counted string with u characters from b. Null fill.
0F96                          ;*Macro unroll: mCOLON  5,'PACK$',PACKS
0F96                          ;*Macro unroll:  mCODE 5, "PACK$", PACKS
0F96                          ALIGN   2   
0F96                PACKS:       
0F96                VVCODE:   .SET   $   
0F96                VVLEN:    .SET   (5 & 01FH) / CELLL   
14E6                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
14E6                VVNAME:   .SET   $   
14E6   96 0F F4 14            DW   vvCODE,vvLINK   
14EA                VVLINK:   .SET   $   
14EA   05 50 41 43 4B 24      DB   5,"PACK$"   
0F96                          .ORG   vvCODE   
0F96   00                     NOP      
0F97   CD 0E 06               CALL   doLIST   
0F9A   D0 0F 24 10 08 10      DW   ALGND,DUPP,TOR   ;strings only on cell boundary
0FA0   34 10 24 10 1C 06 00 00 DW   OVER,DUPP,DOLIT,0   
0FA8   1C 06 02 00 6A 02 28 10 DW   DOLIT,CELLL,UMMOD,DROP   ;count mod cell
0FB0   C0 01 34 10 86 01      DW   SUBB,OVER,PLUS   
0FB6   1C 06 00 00 2C 10 58 0E DW   DOLIT,0,SWAP,STORE   ;null fill cell
0FBE   62 10 6A 0E 1C 06 01 00 86 01 DW   DDUP,CSTOR,DOLIT,1,PLUS   ;save count
0FC8   2C 10 1E 0F 16 10 44 06 DW   SWAP,CMOVE,RFROM,EXIT   ;move string
0FD0                             ;   ALIGNED     ( b -- a )
0FD0                             ;               Align address to the cell boundary.
0FD0                          ;*Macro unroll: mCOLON  7,'ALIGNED', ALGND
0FD0                          ;*Macro unroll:  mCODE 7, "ALIGNED", ALGND
0FD0                          ALIGN   2   
0FD0                ALGND:       
0FD0                VVCODE:   .SET   $   
0FD0                VVLEN:    .SET   (7 & 01FH) / CELLL   
14DA                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
14DA                VVNAME:   .SET   $   
14DA   D0 0F EA 14            DW   vvCODE,vvLINK   
14DE                VVLINK:   .SET   $   
14DE   07 41 4C 49 47 4E 45 44 DB   7,"ALIGNED"   
0FD0                          .ORG   vvCODE   
0FD0   00                     NOP      
0FD1   CD 0E 06               CALL   doLIST   
0FD4   24 10 1C 06 00 00 1C 06 02 00 DW   DUPP,DOLIT,0,DOLIT,CELLL   
0FDE   6A 02 28 10 24 10      DW   UMMOD,DROP,DUPP   
0FE4   3C 0E F0 0F            DW   QBRAN,ALGN1   
0FE8   1C 06 02 00 2C 10 C0 01 DW   DOLIT,CELLL,SWAP,SUBB   
0FF0                ALGN1:       
0FF0   86 01 44 06            DW   PLUS,EXIT   
0FF4                             ; GREETING:       .cstr   "Type something\r\n"
0FF4   44 49 56 5A 45 52 4F 00 ERR_DIVZERO:   .CSTR   "DIVZERO"   ;-10
0FFC   4F 55 54 4F 46 52 41 4E 47 45 00 ERR_OUTOFRANGE:   .CSTR   "OUTOFRANGE"   ;-11
1007                             ;   >R          ( w -- )
1007                             ;               Push the data stack to the return stack.
1007                          ;*Macro unroll: mCODE	COMPO+2, '>R', ToR
1007                          ALIGN   2   
1008                TOR:         
1008                VVCODE:   .SET   $   
1008                VVLEN:    .SET   (COMPO+2 & 01FH) / CELLL   
14B2                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
14B2                VVNAME:   .SET   $   
14B2   08 10 DE 14            DW   vvCODE,vvLINK   
14B6                VVLINK:   .SET   $   
14B6   22 3E 52               DB   COMPO+2,">R"   
1008                          .ORG   vvCODE   
1008   DD 2B                  DEC   IX   
100A   DD 70 00               LD   (IX+0),B   
100D   DD 2B                  DEC   IX   
100F   DD 71 00               LD   (IX+0),C   
1012   C1                     POP   BC   
1013                          ;*Macro unroll: 	mNEXT
1013   EB                     EX   DE,HL   
1014                          ;*Macro unroll:  mNEXTHL                         ; 34t
1014   FD E9                  JP   (IY)   ; 34t
1016                             ;   R>          ( -- w )
1016                             ;               Pop the return stack to the data stack.
1016                          ;*Macro unroll: mCODE	COMPO+2, 'R>', RFrom
1016                          ALIGN   2   
1016                RFROM:       
1016                VVCODE:   .SET   $   
1016                VVLEN:    .SET   (COMPO+2 & 01FH) / CELLL   
148A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
148A                VVNAME:   .SET   $   
148A   16 10 B6 14            DW   vvCODE,vvLINK   
148E                VVLINK:   .SET   $   
148E   22 52 3E               DB   COMPO+2,"R>"   
1016                          .ORG   vvCODE   
1016   C5                     PUSH   BC   
1017   DD 4E 00               LD   C,(IX+0)   
101A   DD 23                  INC   IX   
101C   DD 46 00               LD   B,(IX+0)   
101F   DD 23                  INC   IX   
1021                          ;*Macro unroll: 	mNEXT
1021   EB                     EX   DE,HL   
1022                          ;*Macro unroll:  mNEXTHL                         ; 34t
1022   FD E9                  JP   (IY)   ; 34t
1024                             ;   DUP         ( w -- w w )
1024                             ;               Duplicate the top stack item.
1024                          ;*Macro unroll: mCODE	3, 'DUP', DUPP
1024                          ALIGN   2   
1024                DUPP:        
1024                VVCODE:   .SET   $   
1024                VVLEN:    .SET   (3 & 01FH) / CELLL   
1482                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1482                VVNAME:   .SET   $   
1482   24 10 8E 14            DW   vvCODE,vvLINK   
1486                VVLINK:   .SET   $   
1486   03 44 55 50            DB   3,"DUP"   
1024                          .ORG   vvCODE   
1024   C5                     PUSH   BC   
1025                          ;*Macro unroll:  mNEXT
1025   EB                     EX   DE,HL   
1026                          ;*Macro unroll:  mNEXTHL                         ; 34t
1026   FD E9                  JP   (IY)   ; 34t
1028                             ;   DROP	( x -- )			\ CORE
1028                             ;		Discard top stack item.
1028                          ;*Macro unroll: mCODE	4, 'DROP', DROP
1028                          ALIGN   2   
1028                DROP:        
1028                VVCODE:   .SET   $   
1028                VVLEN:    .SET   (4 & 01FH) / CELLL   
1478                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1478                VVNAME:   .SET   $   
1478   28 10 86 14            DW   vvCODE,vvLINK   
147C                VVLINK:   .SET   $   
147C   04 44 52 4F 50         DB   4,"DROP"   
1028                          .ORG   vvCODE   
1028   C1                     POP   BC   
1029                          ;*Macro unroll:  mNEXT
1029   EB                     EX   DE,HL   
102A                          ;*Macro unroll:  mNEXTHL                         ; 34t
102A   FD E9                  JP   (IY)   ; 34t
102C                             ;   SWAP        ( w1 w2 -- w2 w1 )
102C                             ;               Exchange top two stack items.
102C                          ;*Macro unroll: mCODE	4, 'SWAP', SWAP
102C                          ALIGN   2   
102C                SWAP:        
102C                VVCODE:   .SET   $   
102C                VVLEN:    .SET   (4 & 01FH) / CELLL   
146E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
146E                VVNAME:   .SET   $   
146E   2C 10 7C 14            DW   vvCODE,vvLINK   
1472                VVLINK:   .SET   $   
1472   04 53 57 41 50         DB   4,"SWAP"   
102C                          .ORG   vvCODE   
102C   E1                     POP   HL   
102D   C5                     PUSH   BC   
102E   44                     LD   B,H   
102F   4D                     LD   C,L   
1030                          ;*Macro unroll: 	mNEXT
1030   EB                     EX   DE,HL   
1031                          ;*Macro unroll:  mNEXTHL                         ; 34t
1031   FD E9                  JP   (IY)   ; 34t
1033                             ;   OVER        ( w1 w2 -- w1 w2 w1 )
1033                             ;               Copy second stack item to top.
1033                          ;*Macro unroll: mCODE	4, 'OVER', OVER
1033                          ALIGN   2   
1034                OVER:        
1034                VVCODE:   .SET   $   
1034                VVLEN:    .SET   (4 & 01FH) / CELLL   
1464                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1464                VVNAME:   .SET   $   
1464   34 10 72 14            DW   vvCODE,vvLINK   
1468                VVLINK:   .SET   $   
1468   04 4F 56 45 52         DB   4,"OVER"   
1034                          .ORG   vvCODE   
1034   E1                     POP   HL   
1035   E5                     PUSH   HL   
1036   C5                     PUSH   BC   
1037   44                     LD   B,H   
1038   4D                     LD   C,L   
1039                          ;*Macro unroll: 	mNEXT
1039   EB                     EX   DE,HL   
103A                          ;*Macro unroll:  mNEXTHL                         ; 34t
103A   FD E9                  JP   (IY)   ; 34t
103C                             ;   ?DUP        ( w -- w w | 0 )
103C                             ;               Dup tos if its is not zero.
103C                          ;*Macro unroll: mCOLON	4,'?DUP', QDUP
103C                          ;*Macro unroll:  mCODE 4, "?DUP", QDUP
103C                          ALIGN   2   
103C                QDUP:        
103C                VVCODE:   .SET   $   
103C                VVLEN:    .SET   (4 & 01FH) / CELLL   
145A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
145A                VVNAME:   .SET   $   
145A   3C 10 68 14            DW   vvCODE,vvLINK   
145E                VVLINK:   .SET   $   
145E   04 3F 44 55 50         DB   4,"?DUP"   
103C                          .ORG   vvCODE   
103C   00                     NOP      
103D   CD 0E 06               CALL   doLIST   
1040   24 10 3C 0E 48 10      DW   DUPP,QBRAN,QDUP1   
1046   24 10                  DW   DUPP   
1048                QDUP1:       
1048   44 06                  DW   EXIT   
104A                             ;   ROT         ( w1 w2 w3 -- w2 w3 w1 )
104A                             ;               Rot 3rd item to top.
104A                          ;*Macro unroll: mCOLON	3,'ROT', ROT
104A                          ;*Macro unroll:  mCODE 3, "ROT", ROT
104A                          ALIGN   2   
104A                ROT:         
104A                VVCODE:   .SET   $   
104A                VVLEN:    .SET   (3 & 01FH) / CELLL   
1452                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1452                VVNAME:   .SET   $   
1452   4A 10 5E 14            DW   vvCODE,vvLINK   
1456                VVLINK:   .SET   $   
1456   03 52 4F 54            DB   3,"ROT"   
104A                          .ORG   vvCODE   
104A   00                     NOP      
104B   CD 0E 06               CALL   doLIST   
104E   08 10 2C 10 16 10 2C 10 44 06 DW   ToR,SWAP,RFrom,SWAP,EXIT   
1058                             ;   2DROP       ( w w -- )
1058                             ;               Discard two items on stack.
1058                          ;*Macro unroll: mCOLON	5,'2DROP',DDROP
1058                          ;*Macro unroll:  mCODE 5, "2DROP", DDROP
1058                          ALIGN   2   
1058                DDROP:       
1058                VVCODE:   .SET   $   
1058                VVLEN:    .SET   (5 & 01FH) / CELLL   
1448                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1448                VVNAME:   .SET   $   
1448   58 10 56 14            DW   vvCODE,vvLINK   
144C                VVLINK:   .SET   $   
144C   05 32 44 52 4F 50      DB   5,"2DROP"   
1058                          .ORG   vvCODE   
1058   00                     NOP      
1059   CD 0E 06               CALL   doLIST   
105C   28 10 28 10 44 06      DW   DROP,DROP,EXIT   
1062                             ;   2DUP        ( w1 w2 -- w1 w2 w1 w2 )
1062                             ;               Duplicate top two items.
1062                          ;*Macro unroll: mCOLON	4,'2DUP',DDUP
1062                          ;*Macro unroll:  mCODE 4, "2DUP", DDUP
1062                          ALIGN   2   
1062                DDUP:        
1062                VVCODE:   .SET   $   
1062                VVLEN:    .SET   (4 & 01FH) / CELLL   
143E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
143E                VVNAME:   .SET   $   
143E   62 10 4C 14            DW   vvCODE,vvLINK   
1442                VVLINK:   .SET   $   
1442   04 32 44 55 50         DB   4,"2DUP"   
1062                          .ORG   vvCODE   
1062   00                     NOP      
1063   CD 0E 06               CALL   doLIST   
1066   34 10 34 10 44 06      DW   OVER,OVER,EXIT   
106C                             ;   2SWAP        ( w1 w2 w3 w4 -- w3 w4 w1 w2 )
106C                             ;               Exchange top two items.
106C                          ;*Macro unroll: mCOLON	5,'2SWAP',TwoSWAP
106C                          ;*Macro unroll:  mCODE 5, "2SWAP", TwoSWAP
106C                          ALIGN   2   
106C                TWOSWAP:      
106C                VVCODE:   .SET   $   
106C                VVLEN:    .SET   (5 & 01FH) / CELLL   
1434                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1434                VVNAME:   .SET   $   
1434   6C 10 42 14            DW   vvCODE,vvLINK   
1438                VVLINK:   .SET   $   
1438   05 32 53 57 41 50      DB   5,"2SWAP"   
106C                          .ORG   vvCODE   
106C   00                     NOP      
106D   CD 0E 06               CALL   doLIST   
1070   4A 10 08 10 4A 10 16 10 44 06 DW   ROT,ToR,ROT,RFrom,EXIT   
107A                             ;   PICK        ( ... +n -- ... w )
107A                             ;               Copy the nth stack item to tos.
107A                          ;*Macro unroll: mCOLON  4,'PICK',PICK
107A                          ;*Macro unroll:  mCODE 4, "PICK", PICK
107A                          ALIGN   2   
107A                PICK:        
107A                VVCODE:   .SET   $   
107A                VVLEN:    .SET   (4 & 01FH) / CELLL   
142A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
142A                VVNAME:   .SET   $   
142A   7A 10 38 14            DW   vvCODE,vvLINK   
142E                VVLINK:   .SET   $   
142E   04 50 49 43 4B         DB   4,"PICK"   
107A                          .ORG   vvCODE   
107A   00                     NOP      
107B   CD 0E 06               CALL   doLIST   
107E   1C 06 01 00 86 01 9A 03 DW   DOLIT,1,PLUS,CELLS   
1086   94 0E 86 01 62 0E 44 06 DW   SPAT,PLUS,AT,EXIT   
108E                             ;   DEPTH       ( -- n )
108E                             ;               Return the depth of the data stack.
108E                          ;*Macro unroll: mCOLON	5,'DEPTH',DEPTH
108E                          ;*Macro unroll:  mCODE 5, "DEPTH", DEPTH
108E                          ALIGN   2   
108E                DEPTH:       
108E                VVCODE:   .SET   $   
108E                VVLEN:    .SET   (5 & 01FH) / CELLL   
1420                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1420                VVNAME:   .SET   $   
1420   8E 10 2E 14            DW   vvCODE,vvLINK   
1424                VVLINK:   .SET   $   
1424   05 44 45 50 54 48      DB   5,"DEPTH"   
108E                          .ORG   vvCODE   
108E   00                     NOP      
108F   CD 0E 06               CALL   doLIST   
1092   94 0E A4 10 62 0E 2C 10 C0 01 DW   SPAT,SZero,AT,SWAP,SUBB   
109C   1C 06 02 00 18 03 44 06 DW   DOLIT,CELLL,Slash,EXIT   
10A4                             ;   SP0         ( -- a )
10A4                             ;               Pointer to bottom of the data stack.
10A4                          ;*Macro unroll: mUSER   3,'SP0',SZERO
10A4                          ;*Macro unroll: 	mCODE 3, "SP0", SZERO
10A4                          ALIGN   2   
10A4                SZERO:       
10A4                VVCODE:   .SET   $   
10A4                VVLEN:    .SET   (3 & 01FH) / CELLL   
1418                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1418                VVNAME:   .SET   $   
1418   A4 10 24 14            DW   vvCODE,vvLINK   
141C                VVLINK:   .SET   $   
141C   03 53 50 30            DB   3,"SP0"   
10A4                          .ORG   vvCODE   
10A4   00                     NOP      
10A5   CD 0E 06               CALL   doLIST   
10A8   34 06 00 00            DW   DoUSE,vvUSER   
10AC                VVUSER:   .SET   vvUSER + CELLL   
10AC                             ;   RP0         ( -- a )
10AC                             ;               Pointer to bottom of the return stack.
10AC                          ;*Macro unroll: mUSER   3,'RP0',RZERO
10AC                          ;*Macro unroll: 	mCODE 3, "RP0", RZERO
10AC                          ALIGN   2   
10AC                RZERO:       
10AC                VVCODE:   .SET   $   
10AC                VVLEN:    .SET   (3 & 01FH) / CELLL   
1410                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1410                VVNAME:   .SET   $   
1410   AC 10 1C 14            DW   vvCODE,vvLINK   
1414                VVLINK:   .SET   $   
1414   03 52 50 30            DB   3,"RP0"   
10AC                          .ORG   vvCODE   
10AC   00                     NOP      
10AD   CD 0E 06               CALL   doLIST   
10B0   34 06 02 00            DW   DoUSE,vvUSER   
10B4                VVUSER:   .SET   vvUSER + CELLL   
10B4                             ;   '?KEY       ( -- a )
10B4                             ;               Execution vector of ?KEY.
10B4                          ;*Macro unroll: hUSER   5,"'?KEY",TQKEY
10B4                          ;*Macro unroll: 	hCODE 5, "'?KEY", TQKEY
10B4                          ALIGN   2   
10B4                TQKEY:       
10B4   00                     NOP      
10B5   CD 0E 06               CALL   doLIST   
10B8   34 06 04 00            DW   DoUSE,vvUSER   
10BC                VVUSER:   .SET   vvUSER + CELLL   
10BC                             ;   'EMIT       ( -- a )
10BC                             ;               Execution vector of EMIT.
10BC                          ;*Macro unroll: hUSER   5,"'EMIT",TEMIT
10BC                          ;*Macro unroll: 	hCODE 5, "'EMIT", TEMIT
10BC                          ALIGN   2   
10BC                TEMIT:       
10BC   00                     NOP      
10BD   CD 0E 06               CALL   doLIST   
10C0   34 06 06 00            DW   DoUSE,vvUSER   
10C4                VVUSER:   .SET   vvUSER + CELLL   
10C4                             ;   'EXPECT     ( -- a )
10C4                             ;               Execution vector of EXPECT.
10C4                          ;*Macro unroll: hUSER   7,"'EXPECT",TEXPE
10C4                          ;*Macro unroll: 	hCODE 7, "'EXPECT", TEXPE
10C4                          ALIGN   2   
10C4                TEXPE:       
10C4   00                     NOP      
10C5   CD 0E 06               CALL   doLIST   
10C8   34 06 08 00            DW   DoUSE,vvUSER   
10CC                VVUSER:   .SET   vvUSER + CELLL   
10CC                             ;   'TAP        ( -- a )
10CC                             ;               Execution vector of TAP.
10CC                          ;*Macro unroll: hUSER   4,"'TAP",TTAP
10CC                          ;*Macro unroll: 	hCODE 4, "'TAP", TTAP
10CC                          ALIGN   2   
10CC                TTAP:        
10CC   00                     NOP      
10CD   CD 0E 06               CALL   doLIST   
10D0   34 06 0A 00            DW   DoUSE,vvUSER   
10D4                VVUSER:   .SET   vvUSER + CELLL   
10D4                             ;   'ECHO       ( -- a )
10D4                             ;               Execution vector of ECHO.
10D4                          ;*Macro unroll: hUSER   5,"'ECHO",TECHO
10D4                          ;*Macro unroll: 	hCODE 5, "'ECHO", TECHO
10D4                          ALIGN   2   
10D4                TECHO:       
10D4   00                     NOP      
10D5   CD 0E 06               CALL   doLIST   
10D8   34 06 0C 00            DW   DoUSE,vvUSER   
10DC                VVUSER:   .SET   vvUSER + CELLL   
10DC                             ;   'PROMPT     ( -- a )
10DC                             ;               Execution vector of PROMPT.
10DC                          ;*Macro unroll: hUSER   7,"'PROMPT",TPROM
10DC                          ;*Macro unroll: 	hCODE 7, "'PROMPT", TPROM
10DC                          ALIGN   2   
10DC                TPROM:       
10DC   00                     NOP      
10DD   CD 0E 06               CALL   doLIST   
10E0   34 06 0E 00            DW   DoUSE,vvUSER   
10E4                VVUSER:   .SET   vvUSER + CELLL   
10E4                             ;   BASE        ( -- a )
10E4                             ;               Storage of the radix base for numeric I/O.
10E4                          ;*Macro unroll: mUSER   4,'BASE',BASE
10E4                          ;*Macro unroll: 	mCODE 4, "BASE", BASE
10E4                          ALIGN   2   
10E4                BASE:        
10E4                VVCODE:   .SET   $   
10E4                VVLEN:    .SET   (4 & 01FH) / CELLL   
1406                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1406                VVNAME:   .SET   $   
1406   E4 10 14 14            DW   vvCODE,vvLINK   
140A                VVLINK:   .SET   $   
140A   04 42 41 53 45         DB   4,"BASE"   
10E4                          .ORG   vvCODE   
10E4   00                     NOP      
10E5   CD 0E 06               CALL   doLIST   
10E8   34 06 10 00            DW   DoUSE,vvUSER   
10EC                VVUSER:   .SET   vvUSER + CELLL   
10EC                             ;   tmp         ( -- a )
10EC                             ;               A temporary storage location used in parse and find.
10EC                          ;*Macro unroll: mUSER   COMPO+3,'tmp',TEMP
10EC                          ;*Macro unroll: 	mCODE COMPO+3, "tmp", TEMP
10EC                          ALIGN   2   
10EC                TEMP:        
10EC                VVCODE:   .SET   $   
10EC                VVLEN:    .SET   (COMPO+3 & 01FH) / CELLL   
13DE                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
13DE                VVNAME:   .SET   $   
13DE   EC 10 0A 14            DW   vvCODE,vvLINK   
13E2                VVLINK:   .SET   $   
13E2   23 74 6D 70            DB   COMPO+3,"tmp"   
10EC                          .ORG   vvCODE   
10EC   00                     NOP      
10ED   CD 0E 06               CALL   doLIST   
10F0   34 06 12 00            DW   DoUSE,vvUSER   
10F4                VVUSER:   .SET   vvUSER + CELLL   
10F4                             ;   SPAN        ( -- a )
10F4                             ;               Hold character count received by EXPECT.
10F4                          ;*Macro unroll: hUSER   4,'SPAN',SPAN
10F4                          ;*Macro unroll: 	hCODE 4, "SPAN", SPAN
10F4                          ALIGN   2   
10F4                SPAN:        
10F4   00                     NOP      
10F5   CD 0E 06               CALL   doLIST   
10F8   34 06 14 00            DW   DoUSE,vvUSER   
10FC                VVUSER:   .SET   vvUSER + CELLL   
10FC                             ;   >IN         ( -- a )
10FC                             ;               Hold the character pointer while parsing input stream.
10FC                          ;*Macro unroll: mUSER   3,'>IN',INN
10FC                          ;*Macro unroll: 	mCODE 3, ">IN", INN
10FC                          ALIGN   2   
10FC                INN:         
10FC                VVCODE:   .SET   $   
10FC                VVLEN:    .SET   (3 & 01FH) / CELLL   
13D6                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
13D6                VVNAME:   .SET   $   
13D6   FC 10 E2 13            DW   vvCODE,vvLINK   
13DA                VVLINK:   .SET   $   
13DA   03 3E 49 4E            DB   3,">IN"   
10FC                          .ORG   vvCODE   
10FC   00                     NOP      
10FD   CD 0E 06               CALL   doLIST   
1100   34 06 16 00            DW   DoUSE,vvUSER   
1104                VVUSER:   .SET   vvUSER + CELLL   
1104                             ;   #TIB        ( -- a )
1104                             ;               Hold the current count and address of the terminal input buffer.
1104                          ;*Macro unroll: hUSER   4,'#TIB',NTIB
1104                          ;*Macro unroll: 	hCODE 4, "#TIB", NTIB
1104                          ALIGN   2   
1104                NTIB:        
1104   00                     NOP      
1105   CD 0E 06               CALL   doLIST   
1108   34 06 18 00            DW   DoUSE,vvUSER   
110C                VVUSER:   .SET   vvUSER + CELLL   
110C                VVUSER:   .SET   vvUSER + CELLL   
110C                             ;   CSP         ( -- a )
110C                             ;               Hold the stack pointer for error checking.
110C                          ;*Macro unroll: hUSER   3,'CSP',CSP
110C                          ;*Macro unroll: 	hCODE 3, "CSP", CSP
110C                          ALIGN   2   
110C                CSP:         
110C   00                     NOP      
110D   CD 0E 06               CALL   doLIST   
1110   34 06 1C 00            DW   DoUSE,vvUSER   
1114                VVUSER:   .SET   vvUSER + CELLL   
1114                             ;   'EVAL       ( -- a )
1114                             ;               Execution vector of EVAL.
1114                          ;*Macro unroll: hUSER   5,"'EVAL",TEVAL
1114                          ;*Macro unroll: 	hCODE 5, "'EVAL", TEVAL
1114                          ALIGN   2   
1114                TEVAL:       
1114   00                     NOP      
1115   CD 0E 06               CALL   doLIST   
1118   34 06 1E 00            DW   DoUSE,vvUSER   
111C                VVUSER:   .SET   vvUSER + CELLL   
111C                             ;   'NUMBER     ( -- a )
111C                             ;               Execution vector of NUMBER?.
111C                          ;*Macro unroll: hUSER   7,"'NUMBER",TNUMB
111C                          ;*Macro unroll: 	hCODE 7, "'NUMBER", TNUMB
111C                          ALIGN   2   
111C                TNUMB:       
111C   00                     NOP      
111D   CD 0E 06               CALL   doLIST   
1120   34 06 20 00            DW   DoUSE,vvUSER   
1124                VVUSER:   .SET   vvUSER + CELLL   
1124                             ;   HLD         ( -- a )
1124                             ;               Hold a pointer in building a numeric output string.
1124                          ;*Macro unroll: hUSER   3,'HLD',HLD
1124                          ;*Macro unroll: 	hCODE 3, "HLD", HLD
1124                          ALIGN   2   
1124                HLD:         
1124   00                     NOP      
1125   CD 0E 06               CALL   doLIST   
1128   34 06 22 00            DW   DoUSE,vvUSER   
112C                VVUSER:   .SET   vvUSER + CELLL   
112C                             ;   HANDLER     ( -- a )
112C                             ;               Hold the return stack pointer for error handling.
112C                          ;*Macro unroll: hUSER   7,'HANDLER',HANDL
112C                          ;*Macro unroll: 	hCODE 7, "HANDLER", HANDL
112C                          ALIGN   2   
112C                HANDL:       
112C   00                     NOP      
112D   CD 0E 06               CALL   doLIST   
1130   34 06 24 00            DW   DoUSE,vvUSER   
1134                VVUSER:   .SET   vvUSER + CELLL   
1134                             ;   CONTEXT     ( -- a )
1134                             ;               A area to specify vocabulary search order.
1134                          ;*Macro unroll: hUSER   7,'CONTEXT',CNTXT
1134                          ;*Macro unroll: 	hCODE 7, "CONTEXT", CNTXT
1134                          ALIGN   2   
1134                CNTXT:       
1134   00                     NOP      
1135   CD 0E 06               CALL   doLIST   
1138   34 06 26 00            DW   DoUSE,vvUSER   
113C                VVUSER:   .SET   vvUSER + CELLL   
113C                VVUSER:   .SET   vvUSER + VOCSS * CELLL   ;vocabulary stack
113C                             ;   CURRENT     ( -- a )
113C                             ;               Point to the vocabulary to be extended.
113C                          ;*Macro unroll: hUSER   7,'CURRENT',CRRNT
113C                          ;*Macro unroll: 	hCODE 7, "CURRENT", CRRNT
113C                          ALIGN   2   
113C                CRRNT:       
113C   00                     NOP      
113D   CD 0E 06               CALL   doLIST   
1140   34 06 38 00            DW   DoUSE,vvUSER   
1144                VVUSER:   .SET   vvUSER + CELLL   
1144                VVUSER:   .SET   vvUSER + CELLL   ;vocabulary link pointer
1144                             ;   CP          ( -- a )
1144                             ;               Point to the top of the code dictionary.
1144                          ;*Macro unroll: hUSER   2,'CP',CP
1144                          ;*Macro unroll: 	hCODE 2, "CP", CP
1144                          ALIGN   2   
1144                CP:          
1144   00                     NOP      
1145   CD 0E 06               CALL   doLIST   
1148   34 06 3C 00            DW   DoUSE,vvUSER   
114C                VVUSER:   .SET   vvUSER + CELLL   
114C                             ;   NP          ( -- a )
114C                             ;               Point to the bottom of the name dictionary.
114C                          ;*Macro unroll: hUSER   2,'NP',NP
114C                          ;*Macro unroll: 	hCODE 2, "NP", NP
114C                          ALIGN   2   
114C                NP:          
114C   00                     NOP      
114D   CD 0E 06               CALL   doLIST   
1150   34 06 3E 00            DW   DoUSE,vvUSER   
1154                VVUSER:   .SET   vvUSER + CELLL   
1154                             ;   LAST        ( -- a )
1154                             ;               Point to the last name in the name dictionary.
1154                          ;*Macro unroll: mUSER   4,'LAST',LAST
1154                          ;*Macro unroll: 	mCODE 4, "LAST", LAST
1154                          ALIGN   2   
1154                LAST:        
1154                VVCODE:   .SET   $   
1154                VVLEN:    .SET   (4 & 01FH) / CELLL   
13CC                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
13CC                VVNAME:   .SET   $   
13CC   54 11 DA 13            DW   vvCODE,vvLINK   
13D0                VVLINK:   .SET   $   
13D0   04 4C 41 53 54         DB   4,"LAST"   
1154                          .ORG   vvCODE   
1154   00                     NOP      
1155   CD 0E 06               CALL   doLIST   
1158   34 06 40 00            DW   DoUSE,vvUSER   
115C                VVUSER:   .SET   vvUSER + CELLL   
115C                             ;   forth       ( -- a )
115C                             ;               Point to the last name in the name dictionary.
115C                          ;*Macro unroll: hUSER   5,'forth',VFRTH
115C                          ;*Macro unroll: 	hCODE 5, "forth", VFRTH
115C                          ALIGN   2   
115C                VFRTH:       
115C   00                     NOP      
115D   CD 0E 06               CALL   doLIST   
1160   34 06 42 00            DW   DoUSE,vvUSER   
1164                VVUSER:   .SET   vvUSER + CELLL   
1164                             ;   _TYPE       ( b u -- )
1164                             ;               Display a string. Filter non-printing characters.
1164                          ;*Macro unroll: mCOLON  5,'_TYPE',UTYPE
1164                          ;*Macro unroll:  mCODE 5, "_TYPE", UTYPE
1164                          ALIGN   2   
1164                UTYPE:       
1164                VVCODE:   .SET   $   
1164                VVLEN:    .SET   (5 & 01FH) / CELLL   
13C2                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
13C2                VVNAME:   .SET   $   
13C2   64 11 D0 13            DW   vvCODE,vvLINK   
13C6                VVLINK:   .SET   $   
13C6   05 5F 54 59 50 45      DB   5,"_TYPE"   
1164                          .ORG   vvCODE   
1164   00                     NOP      
1165   CD 0E 06               CALL   doLIST   
1168   08 10                  DW   TOR   ;start count down loop
116A   48 0E 7C 11            DW   BRAN,UTYP2   ;skip first pass
116E                UTYP1:       
116E   24 10 72 0E 62 07 C0 0B DW   DUPP,CAT,TCHAR,EMIT   ;display only printable
1176   1C 06 01 00 86 01      DW   DOLIT,1,PLUS   ;increment address
117C                UTYP2:       
117C   72 06 6E 11            DW   DONXT,UTYP1   ;loop till done
1180   28 10 44 06            DW   DROP,EXIT   
1184                             ;   dm+         ( a u -- a )
1184                             ;               Dump u bytes from , leaving a+u on the stack.
1184                          ;*Macro unroll: hCOLON  3,'dm+',DMP
1184                          ;*Macro unroll:  hCODE 3, "dm+", DMP
1184                          ALIGN   2   
1184                DMP:         
1184   00                     NOP      
1185   CD 0E 06               CALL   doLIST   
1188   34 10 1C 06 04 00 A0 0C DW   OVER,DOLIT,4,UDOTR   ;display address
1190   F0 0B 08 10            DW   SPACE,TOR   ;start count down loop
1194   48 0E A8 11            DW   BRAN,PDUM2   ;skip first pass
1198                PDUM1:       
1198   24 10 72 0E 1C 06 03 00 A0 0C DW   DUPP,CAT,DOLIT,3,UDOTR   ;display numeric data
11A2   1C 06 01 00 86 01      DW   DOLIT,1,PLUS   ;increment address
11A8                PDUM2:       
11A8   72 06 98 11            DW   DONXT,PDUM1   ;loop till done
11AC   44 06                  DW   EXIT   
11AE                             ;   DUMP        ( a u -- )
11AE                             ;               Dump u bytes from a, in a formatted manner.
11AE                          ;*Macro unroll: mCOLON  4,'DUMP',DUMP
11AE                          ;*Macro unroll:  mCODE 4, "DUMP", DUMP
11AE                          ALIGN   2   
11AE                DUMP:        
11AE                VVCODE:   .SET   $   
11AE                VVLEN:    .SET   (4 & 01FH) / CELLL   
13B8                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
13B8                VVNAME:   .SET   $   
13B8   AE 11 C6 13            DW   vvCODE,vvLINK   
13BC                VVLINK:   .SET   $   
13BC   04 44 55 4D 50         DB   4,"DUMP"   
11AE                          .ORG   vvCODE   
11AE   00                     NOP      
11AF   CD 0E 06               CALL   doLIST   
11B2   E4 10 62 0E 08 10 3C 07 DW   BASE,AT,TOR,HEX   ;save radix, set hex
11BA   1C 06 10 00 18 03      DW   DOLIT,16,SLASH   ;change count to lines
11C0   08 10                  DW   TOR   ;start count down loop
11C2                DUMP1:       
11C2   4E 0C 1C 06 10 00 62 10 84 11 DW   CR,DOLIT,16,DDUP,DMP   ;display numeric
11CC   4A 10 4A 10            DW   ROT,ROT   
11D0   F0 0B F0 0B 64 11      DW   SPACE,SPACE,UTYPE   ;display printable characters
11D6   CC 0B 90 01            DW   NUFQ,INVER   ;user control
11DA   3C 0E E6 11            DW   QBRAN,DUMP2   
11DE   72 06 C2 11            DW   DONXT,DUMP1   ;loop till done
11E2   48 0E EA 11            DW   BRAN,DUMP3   
11E6                DUMP2:       
11E6   16 10 28 10            DW   RFROM,DROP   ;cleanup loop stack, early exit
11EA                DUMP3:       
11EA   28 10 16 10 E4 10 58 0E DW   DROP,RFROM,BASE,STORE   ;reSTORE radix
11F2   44 06                  DW   EXIT   
11F4                             ;   .S          ( ... -- ... )
11F4                             ;               Display the contents of the data stack.
11F4                          ;*Macro unroll: mCOLON  2,'.S',DOTS
11F4                          ;*Macro unroll:  mCODE 2, ".S", DOTS
11F4                          ALIGN   2   
11F4                DOTS:        
11F4                VVCODE:   .SET   $   
11F4                VVLEN:    .SET   (2 & 01FH) / CELLL   
13B0                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
13B0                VVNAME:   .SET   $   
13B0   F4 11 BC 13            DW   vvCODE,vvLINK   
13B4                VVLINK:   .SET   $   
13B4   02 2E 53               DB   2,".S"   
11F4                          .ORG   vvCODE   
11F4   00                     NOP      
11F5   CD 0E 06               CALL   doLIST   
11F8   4E 0C 8E 10            DW   CR,DEPTH   ;stack depth
11FC   08 10                  DW   TOR   ;start count down loop
11FE   48 0E 08 12            DW   BRAN,DOTS2   ;skip first pass
1202                DOTS1:       
1202   7A 0E 7A 10 C8 0C      DW   RAT,PICK,DOT   ;index stack, display contents
1208                DOTS2:       
1208   72 06 02 12            DW   DONXT,DOTS1   ;loop till done
120C                          ;*Macro unroll:  mDSTR DOTQP,' <sp'
120C   80 0C                  DW   DOTQP   
120E                VVLEN:    .SET   $   
120E   00 20 3C 73 70         DB   0," <sp"   
1213                VVCODE:   .SET   $   
120E                          .ORG   vvLEN   
120E   04                     DB   vvCODE - vvLEN - 1   
1213                          .ORG   vvCODE   
1213   44 06                  DW   EXIT   
1215                             ;   !CSP        ( -- )
1215                             ;               Save stack pointer in CSP for error checking.
1215                             ;   ?CSP        ( -- )
1215                             ;               Abort if stack pointer differs from that saved in CSP.
1215                             ;   >NAME       ( ca -- na | F )
1215                             ;               Convert code address to a name address.
1215                          ;*Macro unroll:  mCOLON  5,'>NAME',TNAME
1215                          ;*Macro unroll:  mCODE 5, ">NAME", TNAME
1215                          ALIGN   2   
1216                TNAME:       
1216                VVCODE:   .SET   $   
1216                VVLEN:    .SET   (5 & 01FH) / CELLL   
13A6                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
13A6                VVNAME:   .SET   $   
13A6   16 12 B4 13            DW   vvCODE,vvLINK   
13AA                VVLINK:   .SET   $   
13AA   05 3E 4E 41 4D 45      DB   5,">NAME"   
1216                          .ORG   vvCODE   
1216   00                     NOP      
1217   CD 0E 06               CALL   doLIST   
121A   3C 11                  DW   CRRNT   ;vocabulary link
121C                TNAM1:       
121C   82 03 62 0E 3C 10      DW   CELLP,AT,QDUP   ;check all vocabularies
1222   3C 0E 54 12            DW   QBRAN,TNAM4   
1226   62 10                  DW   DDUP   
1228                TNAM2:       
1228   62 0E 24 10            DW   AT,DUPP   ;?last word in a vocabulary
122C   3C 0E 40 12            DW   QBRAN,TNAM3   
1230   62 10 6E 09 7C 01      DW   DDUP,NAMET,XORR   ;compare
1236   3C 0E 40 12            DW   QBRAN,TNAM3   
123A   8E 03                  DW   CELLM   ;continue with next word
123C   48 0E 28 12            DW   BRAN,TNAM2   
1240                TNAM3:       
1240   2C 10 28 10 3C 10      DW   SWAP,DROP,QDUP   
1246   3C 0E 1C 12            DW   QBRAN,TNAM1   
124A   2C 10 28 10 2C 10 28 10 44 06 DW   SWAP,DROP,SWAP,DROP,EXIT   
1254                TNAM4:       
1254   28 10 1C 06 00 00 44 06 DW   DROP,DOLIT,0,EXIT   ;false flag
125C                             ;   .ID         ( na -- )
125C                             ;               Display the name at address.
125C                          ;*Macro unroll: mCOLON  3,'.ID',DOTID
125C                          ;*Macro unroll:  mCODE 3, ".ID", DOTID
125C                          ALIGN   2   
125C                DOTID:       
125C                VVCODE:   .SET   $   
125C                VVLEN:    .SET   (3 & 01FH) / CELLL   
139E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
139E                VVNAME:   .SET   $   
139E   5C 12 AA 13            DW   vvCODE,vvLINK   
13A2                VVLINK:   .SET   $   
13A2   03 2E 49 44            DB   3,".ID"   
125C                          .ORG   vvCODE   
125C   00                     NOP      
125D   CD 0E 06               CALL   doLIST   
1260   3C 10                  DW   QDUP   ;if zero no name
1262   3C 0E 72 12            DW   QBRAN,DOTI1   
1266   D8 0E 1C 06 1F 00 68 01 DW   COUNT,DOLIT,MASKK,ANDD   ;mask lexicon bits
126E   64 11 44 06            DW   UTYPE,EXIT   ;display name string
1272                DOTI1:       
1272                          ;*Macro unroll:  mDSTR   DOTQP,' {noName}'
1272   80 0C                  DW   DOTQP   
1274                VVLEN:    .SET   $   
1274   00 20 7B 6E 6F 4E 61 6D 65 7D DB   0," {noName}"   
127E                VVCODE:   .SET   $   
1274                          .ORG   vvLEN   
1274   09                     DB   vvCODE - vvLEN - 1   
127E                          .ORG   vvCODE   
127E   44 06                  DW   EXIT   
1280                             ;   SEE         ( -- ; <string> )
1280                             ;               A simple decompiler.
1280                          ;*Macro unroll: mCOLON  3,'SEE',SEE
1280                          ;*Macro unroll:  mCODE 3, "SEE", SEE
1280                          ALIGN   2   
1280                SEE:         
1280                VVCODE:   .SET   $   
1280                VVLEN:    .SET   (3 & 01FH) / CELLL   
1396                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1396                VVNAME:   .SET   $   
1396   80 12 A2 13            DW   vvCODE,vvLINK   
139A                VVLINK:   .SET   $   
139A   03 53 45 45            DB   3,"SEE"   
1280                          .ORG   vvCODE   
1280   00                     NOP      
1281   CD 0E 06               CALL   doLIST   
1284   A6 03                  DW   TICK   ;starting address
1286   4E 0C 82 03            DW   CR,CELLP   
128A                SEE1:        
128A   82 03 24 10 62 0E 24 10 DW   CELLP,DUPP,AT,DUPP   ;?does it contain a zero
1292   3C 0E 98 12            DW   QBRAN,SEE2   
1296   16 12                  DW   TNAME   ;?is it a name
1298                SEE2:        
1298   3C 10                  DW   QDUP   ;name address or zero
129A   3C 0E A6 12            DW   QBRAN,SEE3   
129E   F0 0B 5C 12            DW   SPACE,DOTID   ;display name
12A2   48 0E AC 12            DW   BRAN,SEE4   
12A6                SEE3:        
12A6   24 10 62 0E B8 0C      DW   DUPP,AT,UDOT   ;display number
12AC                SEE4:        
12AC   CC 0B                  DW   NUFQ   ;user control
12AE   3C 0E 8A 12            DW   QBRAN,SEE1   
12B2   28 10 44 06            DW   DROP,EXIT   
12B6                             ;   WORDS       ( -- )
12B6                             ;               Display the names in the context vocabulary.
12B6                             ;   COLD        ( -- )
12B6                             ;               The hilevel cold start sequence.
12B6                LASTN:    EQU   vvNAME+4   ;last name address
2000                          .ORG   END_ROM   
2000                          .ORG   START_RAM   
2000                          IF   TESTMODE   
                    TESTS_START:      
                              LD   HL,DONE   
                              CALL   PRINTSZ   
                              HALT      
                    DONE:     .CSTR   "Done!\r\n"   
2000                          ENDIF      
2000                          DS   DTS   ; data stack size
2200                SPP:         ; SP0 grows down
2200                TIBB:        
2200                          DS   RTS   ; return stack size
2400                RPP:         ; RP0 grows down (into TIBB)
2400                UPP:         
2400   00 00        VARSZERO:   DW   0   ; SP0
2402   00 00        VARRZERO:   DW   0   ; RP0
2404   00 00        VARTQKEY:   DW   0   ; '?KEY
2406   00 00        VARTEMIT:   DW   0   ; 'EMIT
2408   00 00        VARTEXPE:   DW   0   ; 'EXPECT
240A   00 00        VARTTAP:   DW   0   ; 'TAP
240C   00 00        VARTECHO:   DW   0   ; 'ECHO
240E   00 00        VARTPROM:   DW   0   ; 'PROMPT
2410   00 00        VARBASE:   DW   0   ; BASE
2412   00 00        VARTEMP:   DW   0   ; tmp
2414   00 00        VARSPAN:   DW   0   ; SPAN
2416   00 00        VARINN:   DW   0   ; >IN
2418   00 00        VARNTIB:   DW   0   ; #TIB
241A   00 00        VARTIB:   DW   0   ; TIB
241C   00 00        VARCSP:   DW   0   ; CSP
241E   00 00        VARTEVAL:   DW   0   ; 'EVAL
2420   00 00        VARTNUMB:   DW   0   ; 'NUMBER
2422   00 00        VARHLD:   DW   0   ; HLD
2424   00 00        VARHANDL:   DW   0   ; HANDLER
2426   00 00        VARCNTXT:   DW   0   ; CONTEXT pointer
2428   00 00        VARVOCABS:   DW   0   ; vocabulary stack    ???
242A   00 00        VARCRRNT:   DW   0   ; CURRENT pointer
242C   00 00        VARVOCABLP:   DW   0   ; vocabulary link pointer ???
242E   00 00        VARCP:    DW   0   ; CP  for runing phase on RAM
2430   00 00        VARNP:    DW   0   ; NP  for runing phase on RAM
2432   00 00        VARLAST:   DW   0   ; LAST
2434   00 00        VARVFRTH:   DW   0   ; FORTH   \ mullti-user ???
2436   00 00        VARVOCABL:   DW   0   ; vocabulary link       ???
2438   00 00        SERINPTR:   DW   0   
243A   00 00        SERRDPTR:   DW   0   
243C   00 00        SERBUFUSED:   DW   0   
243E                SERBUF:   DS   SER_BUFSIZE   
247D                VECTAB:      
247D   00 00        VRST08:   DW   0   
247F   00 00        VRST10:   DW   0   
2481   00 00        VRST18:   DW   0   
2483   00 00        VRST20:   DW   0   
2485   00 00        VRST28:   DW   0   
2487   00 00        VRST30:   DW   0   
2489   00 00        VINT:     DW   0   
248B   00 00        VNMI:     DW   0   
248D                CPP:         ; grows up
FFFE                          .ORG   END_RAM - 2   
FFFE                NPP:         ; grows down
FFFE                          .END      


TESTMODE:           0000 DEFINED AT LINE 3
MEM_SIZE:           10000 DEFINED AT LINE 1 IN constants.z80
                    > USED AT LINE 3 IN constants.z80
                    > USED AT LINE 12 IN constants.z80
ROM_SIZE:           2000 DEFINED AT LINE 2 IN constants.z80
                    > USED AT LINE 3 IN constants.z80
                    > USED AT LINE 6 IN constants.z80
                    > USED AT LINE 8 IN constants.z80
RAM_SIZE:           E000 DEFINED AT LINE 3 IN constants.z80
                    > USED AT LINE 9 IN constants.z80
START_ROM:          0000 DEFINED AT LINE 5 IN constants.z80
                    > USED AT LINE 8
END_ROM:            2000 DEFINED AT LINE 6 IN constants.z80
                    > USED AT LINE 4 IN word.macro.z80
                    > USED AT LINE 93
START_RAM:          2000 DEFINED AT LINE 8 IN constants.z80
                    > USED AT LINE 9 IN constants.z80
                    > USED AT LINE 94
END_RAM:            10000 DEFINED AT LINE 9 IN constants.z80
                    > USED AT LINE 54 IN variables.z80
BM:                 0000 DEFINED AT LINE 11 IN constants.z80
                    > USED AT LINE 5 IN constants.z80
                    > USED AT LINE 6 IN constants.z80
                    > USED AT LINE 8 IN constants.z80
                    > USED AT LINE 12 IN constants.z80
EM:                 10000 DEFINED AT LINE 12 IN constants.z80
COMPO:              0020 DEFINED AT LINE 14 IN constants.z80
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
IMEDD:              0040 DEFINED AT LINE 15 IN constants.z80
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 133 IN core-compiler.z80
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
MASKK:              001F DEFINED AT LINE 16 IN constants.z80
CHARR:              0001 DEFINED AT LINE 18 IN constants.z80
CELLL:              0002 DEFINED AT LINE 19 IN constants.z80
                    > USED AT LINE 39 IN constants.z80
                    > USED AT LINE 40 IN constants.z80
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 319 IN core-alu.z80
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 324 IN core-alu.z80
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 329 IN core-alu.z80
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 145 IN core-interpret.z80
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 184 IN core-memory.z80
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 196 IN core-memory.z80
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 90 IN core-stacks.z80
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 33
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 33
                    > USED AT LINE 63
                    > USED AT LINE 63
                    > USED AT LINE 63
                    > USED AT LINE 63
                    > USED AT LINE 63
                    > USED AT LINE 63
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 33
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 33
                    > USED AT LINE 63
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 33
                    > USED AT LINE 63
                    > USED AT LINE 65 IN core-user.z80
                    > USED AT LINE 63
                    > USED AT LINE 63
                    > USED AT LINE 63
                    > USED AT LINE 63
                    > USED AT LINE 63
                    > USED AT LINE 63
                    > USED AT LINE 96 IN core-user.z80
                    > USED AT LINE 63
                    > USED AT LINE 102 IN core-user.z80
                    > USED AT LINE 63
                    > USED AT LINE 63
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 33
                    > USED AT LINE 63
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
BASEE:              000A DEFINED AT LINE 20 IN constants.z80
                    > USED AT LINE 13 IN defaults.z80
VOCSS:              0008 DEFINED AT LINE 21 IN constants.z80
                    > USED AT LINE 96 IN core-user.z80
MAXCHAR:            00FF DEFINED AT LINE 23 IN constants.z80
MAXSIGNED:          7FFF DEFINED AT LINE 24 IN constants.z80
MAXUNSIGNED:        FFFF DEFINED AT LINE 25 IN constants.z80
MAXNEGATIVE:        8000 DEFINED AT LINE 26 IN constants.z80
BKSPP:              0008 DEFINED AT LINE 28 IN constants.z80
                    > USED AT LINE 194 IN core-io.z80
                    > USED AT LINE 196 IN core-io.z80
                    > USED AT LINE 211 IN core-io.z80
LFF:                000A DEFINED AT LINE 29 IN constants.z80
CRR:                000D DEFINED AT LINE 30 IN constants.z80
                    > USED AT LINE 132 IN core-io.z80
SPACEE:             0020 DEFINED AT LINE 31 IN constants.z80
                    > USED AT LINE 74 IN core-format.z80
                    > USED AT LINE 81 IN core-format.z80
TIC:                0027 DEFINED AT LINE 32 IN constants.z80
MINUSS:             002D DEFINED AT LINE 33 IN constants.z80
                    > USED AT LINE 44 IN core-format.z80
UNDERSC:            005F DEFINED AT LINE 34 IN constants.z80
CALLL:              CD00 DEFINED AT LINE 36 IN constants.z80
                    > USED AT LINE 119 IN core-compiler.z80
US:                 003A DEFINED AT LINE 38 IN constants.z80
                    > USED AT LINE 50
RTS:                0200 DEFINED AT LINE 39 IN constants.z80
                    > USED AT LINE 5 IN variables.z80
DTS:                0200 DEFINED AT LINE 40 IN constants.z80
                    > USED AT LINE 2 IN variables.z80
RET_STACK_SIZE:     0100 DEFINED AT LINE 42 IN constants.z80
DATA_STACK_SIZE:    0100 DEFINED AT LINE 43 IN constants.z80
INT_ADDR:           0038 DEFINED AT LINE 45 IN constants.z80
SER_BUFSIZE:        003F DEFINED AT LINE 46 IN constants.z80
                    > USED AT LINE 11 IN interrupt.z80
                    > USED AT LINE 19 IN interrupt.z80
                    > USED AT LINE 26 IN serial.z80
                    > USED AT LINE 41 IN variables.z80
SER_FULLSIZE:       0030 DEFINED AT LINE 47 IN constants.z80
                    > USED AT LINE 28 IN interrupt.z80
SER_EMPTYSIZE:      0005 DEFINED AT LINE 48 IN constants.z80
                    > USED AT LINE 35 IN serial.z80
RTS_HIGH:           00D6 DEFINED AT LINE 50 IN constants.z80
                    > USED AT LINE 30 IN interrupt.z80
RTS_LOW:            0096 DEFINED AT LINE 51 IN constants.z80
                    > USED AT LINE 11 IN serial.z80
                    > USED AT LINE 37 IN serial.z80
TRUEE:              00-1 DEFINED AT LINE 53 IN constants.z80
                    > USED AT LINE 41 IN core-io.z80
FALSEE:             0000 DEFINED AT LINE 54 IN constants.z80
                    > USED AT LINE 34 IN core-io.z80
VVCODE:             1280 DEFINED AT LINE 12
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 42
                    > USED AT LINE 43
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 42
                    > USED AT LINE 43
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 42
                    > USED AT LINE 43
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 42
                    > USED AT LINE 43
                    > USED AT LINE 42
                    > USED AT LINE 43
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 42
                    > USED AT LINE 43
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 42
                    > USED AT LINE 43
                    > USED AT LINE 16
                    > USED AT LINE 19
VVNAME:             1396 DEFINED AT LINE 15
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 91
VVLINK:             139A DEFINED AT LINE 17
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
VVUSER:             1166 DEFINED AT LINE 63
                    > USED AT LINE 32
                    > USED AT LINE 33
                    > USED AT LINE 32
                    > USED AT LINE 33
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 32
                    > USED AT LINE 33
                    > USED AT LINE 32
                    > USED AT LINE 33
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 32
                    > USED AT LINE 33
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 65 IN core-user.z80
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 96 IN core-user.z80
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 102 IN core-user.z80
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 32
                    > USED AT LINE 33
                    > USED AT LINE 62
                    > USED AT LINE 63
RESET:              0000 DEFINED AT LINE 9
RST08:              0008 DEFINED AT LINE 12
RST10:              0010 DEFINED AT LINE 16
RST18:              0018 DEFINED AT LINE 20
RST20:              0020 DEFINED AT LINE 24
RST28:              0028 DEFINED AT LINE 28
RST30:              0030 DEFINED AT LINE 32
RST38:              0038 DEFINED AT LINE 36
RST66:              0066 DEFINED AT LINE 40
INIT:               006C DEFINED AT LINE 42
                    > USED AT LINE 9
LOOP:               008F DEFINED AT LINE 65
                    > USED AT LINE 68
SERIALINT:          0098 DEFINED AT LINE 1 IN interrupt.z80
                    > USED AT LINE 43
NOTFULL:            00AD DEFINED AT LINE 16 IN interrupt.z80
                    > USED AT LINE 12 IN interrupt.z80
NOTWRAP:            00B9 DEFINED AT LINE 22 IN interrupt.z80
                    > USED AT LINE 20 IN interrupt.z80
RTS0:               00CD DEFINED AT LINE 32 IN interrupt.z80
                    > USED AT LINE 6 IN interrupt.z80
                    > USED AT LINE 14 IN interrupt.z80
                    > USED AT LINE 29 IN interrupt.z80
INIT_IO:            00D6 DEFINED AT LINE 4 IN serial.z80
                    > USED AT LINE 25 IN core-io.z80
RXA:                00EA DEFINED AT LINE 16 IN serial.z80
                    > USED AT LINE 66
WAITFORCHAR:        00EA DEFINED AT LINE 17 IN serial.z80
                    > USED AT LINE 20 IN serial.z80
RXA1:               00F1 DEFINED AT LINE 21 IN serial.z80
                    > USED AT LINE 37 IN core-io.z80
NOTRDWRAP:          00FE DEFINED AT LINE 29 IN serial.z80
                    > USED AT LINE 27 IN serial.z80
RTS1:               0111 DEFINED AT LINE 39 IN serial.z80
                    > USED AT LINE 36 IN serial.z80
TXA:                0115 DEFINED AT LINE 45 IN serial.z80
                    > USED AT LINE 67
                    > USED AT LINE 49 IN core-io.z80
CONOUT1:            0116 DEFINED AT LINE 47 IN serial.z80
                    > USED AT LINE 50 IN serial.z80
QRXA:               0120 DEFINED AT LINE 55 IN serial.z80
                    > USED AT LINE 32 IN core-io.z80
DEFAULTS:           0126 DEFINED AT LINE 3 IN defaults.z80
                    > USED AT LINE 38 IN constants.z80
                    > USED AT LINE 48
UZERO:              0126 DEFINED AT LINE 4 IN defaults.z80
                    > USED AT LINE 22 IN core-kernel.z80
                    > USED AT LINE 23 IN core-kernel.z80
DEFSZERO:           0126 DEFINED AT LINE 5 IN defaults.z80
DEFRZERO:           0128 DEFINED AT LINE 6 IN defaults.z80
DEFTQKEY:           012A DEFINED AT LINE 7 IN defaults.z80
DEFTEMIT:           012C DEFINED AT LINE 8 IN defaults.z80
DEFTEXPE:           012E DEFINED AT LINE 9 IN defaults.z80
DEFTTAP:            0130 DEFINED AT LINE 10 IN defaults.z80
DEFTECHO:           0132 DEFINED AT LINE 11 IN defaults.z80
DEFTPROM:           0134 DEFINED AT LINE 12 IN defaults.z80
DEFBASE:            0136 DEFINED AT LINE 13 IN defaults.z80
DEFTEMP:            0138 DEFINED AT LINE 14 IN defaults.z80
DEFSPAN:            013A DEFINED AT LINE 15 IN defaults.z80
DEFINN:             013C DEFINED AT LINE 16 IN defaults.z80
DEFNTIB:            013E DEFINED AT LINE 17 IN defaults.z80
DEFTIB:             0140 DEFINED AT LINE 18 IN defaults.z80
DEFCSP:             0142 DEFINED AT LINE 19 IN defaults.z80
DEFTEVAL:           0144 DEFINED AT LINE 20 IN defaults.z80
DEFTNUMB:           0146 DEFINED AT LINE 21 IN defaults.z80
DEFHLD:             0148 DEFINED AT LINE 22 IN defaults.z80
DEFHANDL:           014A DEFINED AT LINE 23 IN defaults.z80
DEFCNTXT:           014C DEFINED AT LINE 24 IN defaults.z80
DEFVOCABS:          014E DEFINED AT LINE 25 IN defaults.z80
DEFCRRENT:          0150 DEFINED AT LINE 26 IN defaults.z80
DEFVOCABLP:         0152 DEFINED AT LINE 27 IN defaults.z80
DEFCP:              0154 DEFINED AT LINE 28 IN defaults.z80
DEFNP:              0156 DEFINED AT LINE 29 IN defaults.z80
DEFLAST:            0158 DEFINED AT LINE 30 IN defaults.z80
DEFVFRTH:           015A DEFINED AT LINE 31 IN defaults.z80
DEFVOCABL:          015C DEFINED AT LINE 32 IN defaults.z80
DEFCOLD:            015E DEFINED AT LINE 33 IN defaults.z80
ULAST:              0160 DEFINED AT LINE 34 IN defaults.z80
                    > USED AT LINE 23 IN core-kernel.z80
END_DEFAULTS:       0160 DEFINED AT LINE 35 IN defaults.z80
                    > USED AT LINE 38 IN constants.z80
ZLESS:              0160 DEFINED AT LINE 11
                    > USED AT LINE 77 IN core-alu.z80
                    > USED AT LINE 98 IN core-alu.z80
                    > USED AT LINE 104 IN core-alu.z80
                    > USED AT LINE 106 IN core-alu.z80
                    > USED AT LINE 233 IN core-alu.z80
                    > USED AT LINE 250 IN core-alu.z80
                    > USED AT LINE 43 IN core-format.z80
                    > USED AT LINE 57 IN core-interpret.z80
                    > USED AT LINE 71 IN core-interpret.z80
                    > USED AT LINE 256 IN core-interpret.z80
VVLEN:              0001 DEFINED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 41
                    > USED AT LINE 42
                    > USED AT LINE 14
                    > USED AT LINE 41
                    > USED AT LINE 42
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 41
                    > USED AT LINE 42
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 41
                    > USED AT LINE 42
                    > USED AT LINE 41
                    > USED AT LINE 42
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 41
                    > USED AT LINE 42
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 41
                    > USED AT LINE 42
                    > USED AT LINE 14
ANDD:               0168 DEFINED AT LINE 11
ORR:                0172 DEFINED AT LINE 11
XORR:               017C DEFINED AT LINE 11
                    > USED AT LINE 85 IN core-alu.z80
                    > USED AT LINE 94 IN core-alu.z80
                    > USED AT LINE 103 IN core-alu.z80
                    > USED AT LINE 300 IN core-alu.z80
                    > USED AT LINE 224 IN core-io.z80
PLUS:               0186 DEFINED AT LINE 11
                    > USED AT LINE 67 IN core-alu.z80
                    > USED AT LINE 72 IN core-alu.z80
                    > USED AT LINE 239 IN core-alu.z80
                    > USED AT LINE 44 IN core-compiler.z80
                    > USED AT LINE 222 IN core-io.z80
                    > USED AT LINE 198 IN core-memory.z80
                    > USED AT LINE 84 IN core-stacks.z80
INVER:              0190 DEFINED AT LINE 11
                    > USED AT LINE 60 IN core-alu.z80
                    > USED AT LINE 65 IN core-alu.z80
                    > USED AT LINE 37 IN core-utils.z80
NEGAT:              019C DEFINED AT LINE 11
                    > USED AT LINE 72 IN core-alu.z80
                    > USED AT LINE 78 IN core-alu.z80
                    > USED AT LINE 235 IN core-alu.z80
                    > USED AT LINE 243 IN core-alu.z80
                    > USED AT LINE 34 IN core-interpret.z80
DNEGA:              01AA DEFINED AT LINE 11
                    > USED AT LINE 302 IN core-alu.z80
SUBB:               01C0 DEFINED AT LINE 11
                    > USED AT LINE 98 IN core-alu.z80
                    > USED AT LINE 106 IN core-alu.z80
                    > USED AT LINE 128 IN core-alu.z80
                    > USED AT LINE 129 IN core-alu.z80
                    > USED AT LINE 65 IN core-does.z80
                    > USED AT LINE 57 IN core-interpret.z80
                    > USED AT LINE 82 IN core-interpret.z80
                    > USED AT LINE 135 IN core-interpret.z80
                    > USED AT LINE 185 IN core-memory.z80
ABSS:               01CA DEFINED AT LINE 11
ABS1:               01D8 DEFINED AT LINE 79 IN core-alu.z80
EQUAL:              01DA DEFINED AT LINE 11
EQU1:               01EA DEFINED AT LINE 88 IN core-alu.z80
                    > USED AT LINE 86 IN core-alu.z80
ULESS:              01F0 DEFINED AT LINE 11
ULES1:              0206 DEFINED AT LINE 97 IN core-alu.z80
                    > USED AT LINE 95 IN core-alu.z80
LESS:               020C DEFINED AT LINE 11
                    > USED AT LINE 111 IN core-alu.z80
LESS1:              0220 DEFINED AT LINE 105 IN core-alu.z80
MAX:                0226 DEFINED AT LINE 11
MAX1:               0234 DEFINED AT LINE 113 IN core-alu.z80
MIN:                0238 DEFINED AT LINE 11
MIN1:               0248 DEFINED AT LINE 122 IN core-alu.z80
                    > USED AT LINE 120 IN core-alu.z80
WITHI:              024C DEFINED AT LINE 11
UMPLUS:             025E DEFINED AT LINE 49
                    > USED AT LINE 50 IN core-alu.z80
UMP2:               0266 DEFINED AT LINE 139 IN core-alu.z80
UMP1:               0267 DEFINED AT LINE 141 IN core-alu.z80
                    > USED AT LINE 138 IN core-alu.z80
UMMOD:              026A DEFINED AT LINE 11
                    > USED AT LINE 241 IN core-alu.z80
                    > USED AT LINE 194 IN core-memory.z80
UMSLMOD2:           0276 DEFINED AT LINE 11
UMMOD11:            027A DEFINED AT LINE 158 IN core-alu.z80
UMMOD12:            0285 DEFINED AT LINE 169 IN core-alu.z80
UMMOD2:             029F DEFINED AT LINE 189 IN core-alu.z80
                    > USED AT LINE 157 IN core-alu.z80
UMMOD1:             02A5 DEFINED AT LINE 192 IN core-alu.z80
                    > USED AT LINE 168 IN core-alu.z80
UMMOD4:             02AB DEFINED AT LINE 195 IN core-alu.z80
                    > USED AT LINE 213 IN core-alu.z80
UMMOD13:            02B3 DEFINED AT LINE 203 IN core-alu.z80
UMMOD3:             02B9 DEFINED AT LINE 210 IN core-alu.z80
                    > USED AT LINE 175 IN core-alu.z80
                    > USED AT LINE 179 IN core-alu.z80
                    > USED AT LINE 224 IN core-alu.z80
UMMOD14:            02BD DEFINED AT LINE 214 IN core-alu.z80
UMMOD5:             02C3 DEFINED AT LINE 221 IN core-alu.z80
                    > USED AT LINE 202 IN core-alu.z80
UMMOD15:            02C7 DEFINED AT LINE 225 IN core-alu.z80
MSMOD:              02C8 DEFINED AT LINE 11
MMOD1:              02E0 DEFINED AT LINE 236 IN core-alu.z80
                    > USED AT LINE 234 IN core-alu.z80
MMOD2:              02EE DEFINED AT LINE 240 IN core-alu.z80
                    > USED AT LINE 238 IN core-alu.z80
MMOD3:              02FE DEFINED AT LINE 244 IN core-alu.z80
                    > USED AT LINE 242 IN core-alu.z80
SLMOD:              0300 DEFINED AT LINE 11
                    > USED AT LINE 255 IN core-alu.z80
                    > USED AT LINE 260 IN core-alu.z80
MODD:               030E DEFINED AT LINE 11
SLASH:              0318 DEFINED AT LINE 11
UMSTA:              0324 DEFINED AT LINE 11
                    > USED AT LINE 295 IN core-alu.z80
                    > USED AT LINE 301 IN core-alu.z80
UMSTA1:             032C DEFINED AT LINE 272 IN core-alu.z80
                    > USED AT LINE 285 IN core-alu.z80
UMSTA2:             0333 DEFINED AT LINE 278 IN core-alu.z80
UMSTA5:             0336 DEFINED AT LINE 281 IN core-alu.z80
UMSTA3:             0337 DEFINED AT LINE 283 IN core-alu.z80
                    > USED AT LINE 277 IN core-alu.z80
                    > USED AT LINE 280 IN core-alu.z80
UMSTA4:             033A DEFINED AT LINE 286 IN core-alu.z80
STAR:               0340 DEFINED AT LINE 11
MSTAR:              034A DEFINED AT LINE 11
                    > USED AT LINE 309 IN core-alu.z80
MSTAR1:             0366 DEFINED AT LINE 303 IN core-alu.z80
SSMOD:              0368 DEFINED AT LINE 11
                    > USED AT LINE 314 IN core-alu.z80
STASL:              0376 DEFINED AT LINE 11
CELLP:              0382 DEFINED AT LINE 11
                    > USED AT LINE 32 IN core-compiler.z80
                    > USED AT LINE 151 IN core-interpret.z80
                    > USED AT LINE 153 IN core-interpret.z80
                    > USED AT LINE 171 IN core-interpret.z80
                    > USED AT LINE 97 IN core-memory.z80
                    > USED AT LINE 102 IN core-memory.z80
                    > USED AT LINE 125 IN core-memory.z80
                    > USED AT LINE 74 IN core-utils.z80
                    > USED AT LINE 107 IN core-utils.z80
                    > USED AT LINE 109 IN core-utils.z80
CELLM:              038E DEFINED AT LINE 11
                    > USED AT LINE 72 IN core-compiler.z80
                    > USED AT LINE 74 IN core-compiler.z80
                    > USED AT LINE 126 IN core-interpret.z80
                    > USED AT LINE 126 IN core-interpret.z80
                    > USED AT LINE 156 IN core-interpret.z80
                    > USED AT LINE 158 IN core-interpret.z80
                    > USED AT LINE 158 IN core-interpret.z80
                    > USED AT LINE 161 IN core-interpret.z80
                    > USED AT LINE 169 IN core-interpret.z80
                    > USED AT LINE 82 IN core-utils.z80
CELLS:              039A DEFINED AT LINE 11
TICK:               03A6 DEFINED AT LINE 11
                    > USED AT LINE 25 IN core-compiler.z80
                    > USED AT LINE 106 IN core-utils.z80
TICK1:              03B4 DEFINED AT LINE 7 IN core-compiler.z80
                    > USED AT LINE 5 IN core-compiler.z80
ALLOT:              03B6 DEFINED AT LINE 11
COMMA:              03C0 DEFINED AT LINE 11
                    > USED AT LINE 25 IN core-compiler.z80
                    > USED AT LINE 90 IN core-compiler.z80
                    > USED AT LINE 120 IN core-compiler.z80
BCOMP:              03D2 DEFINED AT LINE 11
COMPI:              03DC DEFINED AT LINE 11
                    > USED AT LINE 38 IN core-compiler.z80
                    > USED AT LINE 107 IN core-compiler.z80
                    > USED AT LINE 142 IN core-compiler.z80
                    > USED AT LINE 150 IN core-compiler.z80
                    > USED AT LINE 4 IN core-control.z80
                    > USED AT LINE 14 IN core-control.z80
                    > USED AT LINE 19 IN core-control.z80
                    > USED AT LINE 24 IN core-control.z80
                    > USED AT LINE 30 IN core-control.z80
                    > USED AT LINE 37 IN core-control.z80
                    > USED AT LINE 69 IN core-control.z80
                    > USED AT LINE 74 IN core-control.z80
                    > USED AT LINE 79 IN core-control.z80
LITER:              03EE DEFINED AT LINE 11
                    > USED AT LINE 94 IN core-compiler.z80
STRCQ:              03FA DEFINED AT LINE 49
RECUR:              0410 DEFINED AT LINE 11
UNIQU:              041E DEFINED AT LINE 11
                    > USED AT LINE 69 IN core-compiler.z80
UNIQ1:              043A DEFINED AT LINE 60 IN core-compiler.z80
                    > USED AT LINE 57 IN core-compiler.z80
SNAME:              043E DEFINED AT LINE 11
                    > USED AT LINE 126 IN core-compiler.z80
                    > USED AT LINE 140 IN core-compiler.z80
                    > USED AT LINE 148 IN core-compiler.z80
PNAM1:              0470 DEFINED AT LINE 76 IN core-compiler.z80
                    > USED AT LINE 68 IN core-compiler.z80
SCOMP:              047A DEFINED AT LINE 49
                    > USED AT LINE 113 IN core-compiler.z80
SCOM1:              0496 DEFINED AT LINE 89 IN core-compiler.z80
                    > USED AT LINE 87 IN core-compiler.z80
SCOM2:              049A DEFINED AT LINE 91 IN core-compiler.z80
                    > USED AT LINE 85 IN core-compiler.z80
SCOM3:              04A6 DEFINED AT LINE 95 IN core-compiler.z80
                    > USED AT LINE 93 IN core-compiler.z80
OVERT:              04A8 DEFINED AT LINE 49
SEMIS:              04B8 DEFINED AT LINE 11
RBRAC:              04C6 DEFINED AT LINE 11
                    > USED AT LINE 127 IN core-compiler.z80
CALLC:              04D4 DEFINED AT LINE 49
                    > USED AT LINE 127 IN core-compiler.z80
COLON:              04E2 DEFINED AT LINE 11
IMMED:              04F4 DEFINED AT LINE 11
USER:               050C DEFINED AT LINE 11
CREAT:              0524 DEFINED AT LINE 11
                    > USED AT LINE 156 IN core-compiler.z80
VARIA:              053A DEFINED AT LINE 11
FOR:                0548 DEFINED AT LINE 11
BEGIN:              0554 DEFINED AT LINE 11
NEXT:               055C DEFINED AT LINE 11
UNTIL:              0568 DEFINED AT LINE 11
AGAIN:              0574 DEFINED AT LINE 11
                    > USED AT LINE 43 IN core-control.z80
IFF:                0580 DEFINED AT LINE 11
                    > USED AT LINE 64 IN core-control.z80
AHEAD:              0592 DEFINED AT LINE 11
                    > USED AT LINE 54 IN core-control.z80
                    > USED AT LINE 59 IN core-control.z80
REPEA:              05A4 DEFINED AT LINE 11
THENN:              05B2 DEFINED AT LINE 11
AFT:                05BE DEFINED AT LINE 11
ELSEE:              05CC DEFINED AT LINE 11
WHILE:              05D8 DEFINED AT LINE 11
ABRTQ:              05E2 DEFINED AT LINE 11
STRQ:               05EE DEFINED AT LINE 49
DOTQ:               05FA DEFINED AT LINE 49
DOCONST:            0606 DEFINED AT LINE 49
DOLIST:             060E DEFINED AT LINE 49
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 141 IN core-compiler.z80
                    > USED AT LINE 25
                    > USED AT LINE 149 IN core-compiler.z80
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 31
                    > USED AT LINE 31
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 31
                    > USED AT LINE 31
                    > USED AT LINE 61
                    > USED AT LINE 31
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 31
                    > USED AT LINE 61
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
DOLIT:              061C DEFINED AT LINE 49
                    > USED AT LINE 55 IN core-alu.z80
                    > USED AT LINE 60 IN core-alu.z80
                    > USED AT LINE 66 IN core-alu.z80
                    > USED AT LINE 87 IN core-alu.z80
                    > USED AT LINE 89 IN core-alu.z80
                    > USED AT LINE 319 IN core-alu.z80
                    > USED AT LINE 324 IN core-alu.z80
                    > USED AT LINE 329 IN core-alu.z80
                    > USED AT LINE 38 IN core-compiler.z80
                    > USED AT LINE 43 IN core-compiler.z80
                    > USED AT LINE 86 IN core-compiler.z80
                    > USED AT LINE 113 IN core-compiler.z80
                    > USED AT LINE 119 IN core-compiler.z80
                    > USED AT LINE 133 IN core-compiler.z80
                    > USED AT LINE 141 IN core-compiler.z80
                    > USED AT LINE 149 IN core-compiler.z80
                    > USED AT LINE 156 IN core-compiler.z80
                    > USED AT LINE 31 IN core-control.z80
                    > USED AT LINE 64 IN core-does.z80
                    > USED AT LINE 4 IN core-format.z80
                    > USED AT LINE 5 IN core-format.z80
                    > USED AT LINE 6 IN core-format.z80
                    > USED AT LINE 11 IN core-format.z80
                    > USED AT LINE 44 IN core-format.z80
                    > USED AT LINE 64 IN core-format.z80
                    > USED AT LINE 69 IN core-format.z80
                    > USED AT LINE 74 IN core-format.z80
                    > USED AT LINE 79 IN core-format.z80
                    > USED AT LINE 80 IN core-format.z80
                    > USED AT LINE 81 IN core-format.z80
                    > USED AT LINE 83 IN core-format.z80
                    > USED AT LINE 5 IN core-interpret.z80
                    > USED AT LINE 6 IN core-interpret.z80
                    > USED AT LINE 8 IN core-interpret.z80
                    > USED AT LINE 9 IN core-interpret.z80
                    > USED AT LINE 20 IN core-interpret.z80
                    > USED AT LINE 25 IN core-interpret.z80
                    > USED AT LINE 30 IN core-interpret.z80
                    > USED AT LINE 52 IN core-interpret.z80
                    > USED AT LINE 59 IN core-interpret.z80
                    > USED AT LINE 74 IN core-interpret.z80
                    > USED AT LINE 80 IN core-interpret.z80
                    > USED AT LINE 99 IN core-interpret.z80
                    > USED AT LINE 139 IN core-interpret.z80
                    > USED AT LINE 145 IN core-interpret.z80
                    > USED AT LINE 151 IN core-interpret.z80
                    > USED AT LINE 178 IN core-interpret.z80
                    > USED AT LINE 227 IN core-interpret.z80
                    > USED AT LINE 241 IN core-interpret.z80
                    > USED AT LINE 247 IN core-interpret.z80
                    > USED AT LINE 87 IN core-io.z80
                    > USED AT LINE 97 IN core-io.z80
                    > USED AT LINE 112 IN core-io.z80
                    > USED AT LINE 124 IN core-io.z80
                    > USED AT LINE 132 IN core-io.z80
                    > USED AT LINE 182 IN core-io.z80
                    > USED AT LINE 194 IN core-io.z80
                    > USED AT LINE 196 IN core-io.z80
                    > USED AT LINE 209 IN core-io.z80
                    > USED AT LINE 211 IN core-io.z80
                    > USED AT LINE 227 IN core-io.z80
                    > USED AT LINE 246 IN core-io.z80
                    > USED AT LINE 247 IN core-io.z80
                    > USED AT LINE 3 IN core-kernel.z80
                    > USED AT LINE 7 IN core-kernel.z80
                    > USED AT LINE 22 IN core-kernel.z80
                    > USED AT LINE 23 IN core-kernel.z80
                    > USED AT LINE 35 IN core-kernel.z80
                    > USED AT LINE 108 IN core-memory.z80
                    > USED AT LINE 119 IN core-memory.z80
                    > USED AT LINE 146 IN core-memory.z80
                    > USED AT LINE 147 IN core-memory.z80
                    > USED AT LINE 173 IN core-memory.z80
                    > USED AT LINE 176 IN core-memory.z80
                    > USED AT LINE 184 IN core-memory.z80
                    > USED AT LINE 186 IN core-memory.z80
                    > USED AT LINE 193 IN core-memory.z80
                    > USED AT LINE 196 IN core-memory.z80
                    > USED AT LINE 83 IN core-stacks.z80
                    > USED AT LINE 90 IN core-stacks.z80
                    > USED AT LINE 8 IN core-utils.z80
                    > USED AT LINE 16 IN core-utils.z80
                    > USED AT LINE 21 IN core-utils.z80
                    > USED AT LINE 31 IN core-utils.z80
                    > USED AT LINE 34 IN core-utils.z80
                    > USED AT LINE 89 IN core-utils.z80
                    > USED AT LINE 96 IN core-utils.z80
DOVAR:              0624 DEFINED AT LINE 49
                    > USED AT LINE 150 IN core-compiler.z80
                    > USED AT LINE 41 IN core-does.z80
                    > USED AT LINE 201 IN core-interpret.z80
UP:                 062C DEFINED AT LINE 49
DOUSE:              0634 DEFINED AT LINE 49
                    > USED AT LINE 142 IN core-compiler.z80
                    > USED AT LINE 32
                    > USED AT LINE 32
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 32
                    > USED AT LINE 32
                    > USED AT LINE 62
                    > USED AT LINE 32
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 32
                    > USED AT LINE 62
EXIT:               0644 DEFINED AT LINE 11
                    > USED AT LINE 80 IN core-alu.z80
                    > USED AT LINE 114 IN core-alu.z80
                    > USED AT LINE 123 IN core-alu.z80
                    > USED AT LINE 245 IN core-alu.z80
                    > USED AT LINE 304 IN core-alu.z80
                    > USED AT LINE 6 IN core-compiler.z80
                    > USED AT LINE 61 IN core-compiler.z80
                    > USED AT LINE 75 IN core-compiler.z80
                    > USED AT LINE 88 IN core-compiler.z80
                    > USED AT LINE 90 IN core-compiler.z80
                    > USED AT LINE 94 IN core-compiler.z80
                    > USED AT LINE 107 IN core-compiler.z80
                    > USED AT LINE 120 IN core-compiler.z80
                    > USED AT LINE 9 IN core-control.z80
                    > USED AT LINE 36 IN core-does.z80
                    > USED AT LINE 38 IN core-format.z80
                    > USED AT LINE 46 IN core-format.z80
                    > USED AT LINE 85 IN core-format.z80
                    > USED AT LINE 116 IN core-interpret.z80
                    > USED AT LINE 229 IN core-interpret.z80
                    > USED AT LINE 233 IN core-interpret.z80
                    > USED AT LINE 250 IN core-interpret.z80
                    > USED AT LINE 258 IN core-interpret.z80
                    > USED AT LINE 67 IN core-io.z80
                    > USED AT LINE 82 IN core-io.z80
                    > USED AT LINE 103 IN core-io.z80
                    > USED AT LINE 115 IN core-io.z80
                    > USED AT LINE 127 IN core-io.z80
                    > USED AT LINE 144 IN core-io.z80
                    > USED AT LINE 175 IN core-io.z80
                    > USED AT LINE 198 IN core-io.z80
                    > USED AT LINE 215 IN core-io.z80
                    > USED AT LINE 72 IN core-kernel.z80
                    > USED AT LINE 135 IN core-memory.z80
                    > USED AT LINE 150 IN core-memory.z80
                    > USED AT LINE 162 IN core-memory.z80
                    > USED AT LINE 198 IN core-memory.z80
                    > USED AT LINE 58 IN core-stacks.z80
                    > USED AT LINE 11 IN core-utils.z80
                    > USED AT LINE 24 IN core-utils.z80
                    > USED AT LINE 45 IN core-utils.z80
                    > USED AT LINE 58 IN core-utils.z80
                    > USED AT LINE 97 IN core-utils.z80
                    > USED AT LINE 100 IN core-utils.z80
                    > USED AT LINE 122 IN core-utils.z80
DODO:               0650 DEFINED AT LINE 49
DONXT:              0672 DEFINED AT LINE 11
                    > USED AT LINE 14 IN core-control.z80
                    > USED AT LINE 31 IN core-interpret.z80
                    > USED AT LINE 60 IN core-interpret.z80
                    > USED AT LINE 75 IN core-interpret.z80
                    > USED AT LINE 138 IN core-interpret.z80
                    > USED AT LINE 102 IN core-io.z80
                    > USED AT LINE 114 IN core-io.z80
                    > USED AT LINE 149 IN core-memory.z80
                    > USED AT LINE 161 IN core-memory.z80
                    > USED AT LINE 175 IN core-memory.z80
                    > USED AT LINE 10 IN core-utils.z80
                    > USED AT LINE 23 IN core-utils.z80
                    > USED AT LINE 39 IN core-utils.z80
                    > USED AT LINE 56 IN core-utils.z80
DECHILO:            0687 DEFINED AT LINE 146 IN core-does.z80
                    > USED AT LINE 139 IN core-does.z80
DECLOW:             0689 DEFINED AT LINE 149 IN core-does.z80
                    > USED AT LINE 135 IN core-does.z80
DIGIT:              0692 DEFINED AT LINE 49
                    > USED AT LINE 12 IN core-format.z80
EXTRC:              06AC DEFINED AT LINE 49
BDIGS:              06BE DEFINED AT LINE 11
                    > USED AT LINE 58 IN core-format.z80
                    > USED AT LINE 160 IN core-io.z80
                    > USED AT LINE 167 IN core-io.z80
HOLD:               06CA DEFINED AT LINE 11
DIG:                06E2 DEFINED AT LINE 11
                    > USED AT LINE 34 IN core-format.z80
DIGS:               06F0 DEFINED AT LINE 11
                    > USED AT LINE 58 IN core-format.z80
                    > USED AT LINE 167 IN core-io.z80
DIGS1:              06F4 DEFINED AT LINE 33 IN core-format.z80
                    > USED AT LINE 36 IN core-format.z80
DIGS2:              0700 DEFINED AT LINE 37 IN core-format.z80
                    > USED AT LINE 35 IN core-format.z80
SIGN:               0702 DEFINED AT LINE 11
                    > USED AT LINE 59 IN core-format.z80
SIGN1:              0712 DEFINED AT LINE 45 IN core-format.z80
EDIGS:              0714 DEFINED AT LINE 11
                    > USED AT LINE 59 IN core-format.z80
STR:                0726 DEFINED AT LINE 49
                    > USED AT LINE 154 IN core-io.z80
                    > USED AT LINE 177 IN core-io.z80
HEX:                073C DEFINED AT LINE 11
                    > USED AT LINE 19 IN core-interpret.z80
DECIMAL:            074A DEFINED AT LINE 11
BLANK:              0758 DEFINED AT LINE 11
                    > USED AT LINE 56 IN core-interpret.z80
                    > USED AT LINE 109 IN core-interpret.z80
                    > USED AT LINE 114 IN core-interpret.z80
                    > USED AT LINE 92 IN core-io.z80
                    > USED AT LINE 195 IN core-io.z80
                    > USED AT LINE 213 IN core-io.z80
                    > USED AT LINE 227 IN core-io.z80
                    > USED AT LINE 171 IN core-memory.z80
TCHAR:              0762 DEFINED AT LINE 49
TCHA1:              0782 DEFINED AT LINE 84 IN core-format.z80
                    > USED AT LINE 82 IN core-format.z80
DIGTQ:              0784 DEFINED AT LINE 49
DGTQ1:              07AA DEFINED AT LINE 10 IN core-interpret.z80
                    > USED AT LINE 7 IN core-interpret.z80
NUMBQ:              07B2 DEFINED AT LINE 49
                    > USED AT LINE 21 IN defaults.z80
NUMQ1:              07E2 DEFINED AT LINE 21 IN core-interpret.z80
                    > USED AT LINE 18 IN core-interpret.z80
NUMQ2:              0806 DEFINED AT LINE 26 IN core-interpret.z80
                    > USED AT LINE 31 IN core-interpret.z80
NUMQ3:              0838 DEFINED AT LINE 35 IN core-interpret.z80
                    > USED AT LINE 33 IN core-interpret.z80
NUMQ4:              083E DEFINED AT LINE 38 IN core-interpret.z80
                    > USED AT LINE 28 IN core-interpret.z80
NUMQ5:              084A DEFINED AT LINE 40 IN core-interpret.z80
                    > USED AT LINE 37 IN core-interpret.z80
NUMQ6:              084C DEFINED AT LINE 42 IN core-interpret.z80
                    > USED AT LINE 24 IN core-interpret.z80
PARS:               0858 DEFINED AT LINE 49
                    > USED AT LINE 93 IN core-interpret.z80
PARS1:              087E DEFINED AT LINE 55 IN core-interpret.z80
                    > USED AT LINE 60 IN core-interpret.z80
PARS2:              08A4 DEFINED AT LINE 62 IN core-interpret.z80
                    > USED AT LINE 58 IN core-interpret.z80
PARS3:              08A6 DEFINED AT LINE 64 IN core-interpret.z80
                    > USED AT LINE 53 IN core-interpret.z80
PARS4:              08AC DEFINED AT LINE 67 IN core-interpret.z80
                    > USED AT LINE 75 IN core-interpret.z80
PARS5:              08C4 DEFINED AT LINE 72 IN core-interpret.z80
                    > USED AT LINE 70 IN core-interpret.z80
PARS6:              08DA DEFINED AT LINE 78 IN core-interpret.z80
                    > USED AT LINE 73 IN core-interpret.z80
PARS7:              08E8 DEFINED AT LINE 81 IN core-interpret.z80
                    > USED AT LINE 77 IN core-interpret.z80
PARS8:              08F4 DEFINED AT LINE 84 IN core-interpret.z80
                    > USED AT LINE 51 IN core-interpret.z80
PARSE:              08FC DEFINED AT LINE 11
                    > USED AT LINE 109 IN core-interpret.z80
                    > USED AT LINE 114 IN core-interpret.z80
                    > USED AT LINE 121 IN core-interpret.z80
PAREN:              091E DEFINED AT LINE 11
BKSLA:              092A DEFINED AT LINE 11
CHAR:               0938 DEFINED AT LINE 11
TOKEN:              0946 DEFINED AT LINE 49
                    > USED AT LINE 4 IN core-compiler.z80
                    > USED AT LINE 126 IN core-compiler.z80
                    > USED AT LINE 140 IN core-compiler.z80
                    > USED AT LINE 148 IN core-compiler.z80
                    > USED AT LINE 265 IN core-interpret.z80
WORDD:              0962 DEFINED AT LINE 11
NAMET:              096E DEFINED AT LINE 49
                    > USED AT LINE 162 IN core-interpret.z80
                    > USED AT LINE 80 IN core-utils.z80
SAMEQ:              097A DEFINED AT LINE 49
SAME1:              0984 DEFINED AT LINE 133 IN core-interpret.z80
                    > USED AT LINE 138 IN core-interpret.z80
SAME2:              09A6 DEFINED AT LINE 138 IN core-interpret.z80
                    > USED AT LINE 132 IN core-interpret.z80
                    > USED AT LINE 136 IN core-interpret.z80
FIND:               09B0 DEFINED AT LINE 11
                    > USED AT LINE 174 IN core-interpret.z80
FIND1:              09CE DEFINED AT LINE 147 IN core-interpret.z80
                    > USED AT LINE 159 IN core-interpret.z80
FIND2:              09F2 DEFINED AT LINE 153 IN core-interpret.z80
                    > USED AT LINE 150 IN core-interpret.z80
FIND3:              09FA DEFINED AT LINE 154 IN core-interpret.z80
                    > USED AT LINE 152 IN core-interpret.z80
FIND6:              09FE DEFINED AT LINE 155 IN core-interpret.z80
                    > USED AT LINE 148 IN core-interpret.z80
FIND4:              0A0A DEFINED AT LINE 157 IN core-interpret.z80
                    > USED AT LINE 154 IN core-interpret.z80
FIND5:              0A16 DEFINED AT LINE 160 IN core-interpret.z80
                    > USED AT LINE 157 IN core-interpret.z80
NAMEQ:              0A28 DEFINED AT LINE 49
                    > USED AT LINE 4 IN core-compiler.z80
                    > USED AT LINE 56 IN core-compiler.z80
                    > USED AT LINE 84 IN core-compiler.z80
                    > USED AT LINE 225 IN core-interpret.z80
NAMQ1:              0A3A DEFINED AT LINE 170 IN core-interpret.z80
                    > USED AT LINE 168 IN core-interpret.z80
NAMQ2:              0A3C DEFINED AT LINE 171 IN core-interpret.z80
                    > USED AT LINE 175 IN core-interpret.z80
NAMQ3:              0A5A DEFINED AT LINE 177 IN core-interpret.z80
                    > USED AT LINE 173 IN core-interpret.z80
CATCH:              0A64 DEFINED AT LINE 11
THROW:              0A8A DEFINED AT LINE 11
                    > USED AT LINE 8 IN core-compiler.z80
                    > USED AT LINE 78 IN core-compiler.z80
                    > USED AT LINE 95 IN core-compiler.z80
                    > USED AT LINE 210 IN core-interpret.z80
                    > USED AT LINE 217 IN core-interpret.z80
                    > USED AT LINE 235 IN core-interpret.z80
NULLS:              0AA8 DEFINED AT LINE 49
                    > USED AT LINE 210 IN core-interpret.z80
ABORT:              0AB6 DEFINED AT LINE 11
ABORQ:              0ABE DEFINED AT LINE 11
                    > USED AT LINE 69 IN core-control.z80
                    > USED AT LINE 37
                    > USED AT LINE 37
ABOR1:              0ACA DEFINED AT LINE 218 IN core-interpret.z80
                    > USED AT LINE 216 IN core-interpret.z80
INTER:              0AD0 DEFINED AT LINE 49
                    > USED AT LINE 20 IN defaults.z80
                    > USED AT LINE 241 IN core-interpret.z80
                    > USED AT LINE 247 IN core-interpret.z80
INTE1:              0AF8 DEFINED AT LINE 230 IN core-interpret.z80
                    > USED AT LINE 226 IN core-interpret.z80
INTE2:              0B02 DEFINED AT LINE 234 IN core-interpret.z80
                    > USED AT LINE 232 IN core-interpret.z80
LBRAC:              0B04 DEFINED AT LINE 11
DOTOK:              0B12 DEFINED AT LINE 11
                    > USED AT LINE 12 IN defaults.z80
DOTO1:              0B2A DEFINED AT LINE 250 IN core-interpret.z80
                    > USED AT LINE 248 IN core-interpret.z80
QSTAC:              0B2E DEFINED AT LINE 49
EVAL:               0B46 DEFINED AT LINE 11
EVAL1:              0B4A DEFINED AT LINE 264 IN core-interpret.z80
                    > USED AT LINE 268 IN core-interpret.z80
EVAL2:              0B5E DEFINED AT LINE 269 IN core-interpret.z80
                    > USED AT LINE 266 IN core-interpret.z80
PCSTO:              0B66 DEFINED AT LINE 11
PCAT:               0B70 DEFINED AT LINE 11
STOIO:              0B7C DEFINED AT LINE 11
                    > USED AT LINE 2 IN core-kernel.z80
QRX:                0B82 DEFINED AT LINE 11
                    > USED AT LINE 7 IN defaults.z80
QRX1:               0B8D DEFINED AT LINE 36 IN core-io.z80
                    > USED AT LINE 33 IN core-io.z80
QRX2:               0B97 DEFINED AT LINE 42 IN core-io.z80
                    > USED AT LINE 35 IN core-io.z80
TXSTO:              0B9A DEFINED AT LINE 11
                    > USED AT LINE 8 IN defaults.z80
                    > USED AT LINE 11 IN defaults.z80
QKEY:               0BA2 DEFINED AT LINE 11
                    > USED AT LINE 62 IN core-io.z80
                    > USED AT LINE 78 IN core-io.z80
KEY:                0BAE DEFINED AT LINE 11
                    > USED AT LINE 80 IN core-io.z80
                    > USED AT LINE 226 IN core-io.z80
                    > USED AT LINE 5 IN core-kernel.z80
KEY1:               0BB2 DEFINED AT LINE 61 IN core-io.z80
                    > USED AT LINE 66 IN core-io.z80
KEY2:               0BBA DEFINED AT LINE 65 IN core-io.z80
EMIT:               0BC0 DEFINED AT LINE 11
                    > USED AT LINE 92 IN core-io.z80
                    > USED AT LINE 123 IN core-io.z80
                    > USED AT LINE 6 IN core-kernel.z80
NUFQ:               0BCC DEFINED AT LINE 11
                    > USED AT LINE 37 IN core-utils.z80
                    > USED AT LINE 120 IN core-utils.z80
NUFQ1:              0BE2 DEFINED AT LINE 81 IN core-io.z80
                    > USED AT LINE 79 IN core-io.z80
PACE:               0BE4 DEFINED AT LINE 49
SPACE:              0BF0 DEFINED AT LINE 11
                    > USED AT LINE 100 IN core-io.z80
                    > USED AT LINE 168 IN core-io.z80
                    > USED AT LINE 177 IN core-io.z80
                    > USED AT LINE 17 IN core-utils.z80
                    > USED AT LINE 36 IN core-utils.z80
                    > USED AT LINE 36 IN core-utils.z80
                    > USED AT LINE 115 IN core-utils.z80
SPACS:              0BFA DEFINED AT LINE 11
                    > USED AT LINE 155 IN core-io.z80
                    > USED AT LINE 162 IN core-io.z80
CHAR1:              0C0A DEFINED AT LINE 99 IN core-io.z80
                    > USED AT LINE 102 IN core-io.z80
CHAR2:              0C0C DEFINED AT LINE 101 IN core-io.z80
                    > USED AT LINE 98 IN core-io.z80
TYPEE:              0C12 DEFINED AT LINE 11
                    > USED AT LINE 155 IN core-io.z80
                    > USED AT LINE 162 IN core-io.z80
                    > USED AT LINE 168 IN core-io.z80
TYPE1:              0C1C DEFINED AT LINE 110 IN core-io.z80
                    > USED AT LINE 114 IN core-io.z80
TYPE2:              0C28 DEFINED AT LINE 113 IN core-io.z80
                    > USED AT LINE 109 IN core-io.z80
TYPEZ:              0C30 DEFINED AT LINE 11
                    > USED AT LINE 4 IN core-kernel.z80
                    > USED AT LINE 8 IN core-kernel.z80
                    > USED AT LINE 72 IN core-kernel.z80
TYPEZ1:             0C34 DEFINED AT LINE 120 IN core-io.z80
                    > USED AT LINE 125 IN core-io.z80
TYPEZ2:             0C4A DEFINED AT LINE 126 IN core-io.z80
CR:                 0C4E DEFINED AT LINE 11
                    > USED AT LINE 250 IN core-interpret.z80
                    > USED AT LINE 34 IN core-utils.z80
                    > USED AT LINE 50 IN core-utils.z80
                    > USED AT LINE 107 IN core-utils.z80
DOSTR:              0C60 DEFINED AT LINE 11
                    > USED AT LINE 217 IN core-interpret.z80
                    > USED AT LINE 219 IN core-interpret.z80
                    > USED AT LINE 144 IN core-io.z80
                    > USED AT LINE 149 IN core-io.z80
STRQP:              0C78 DEFINED AT LINE 49
                    > USED AT LINE 37
                    > USED AT LINE 74 IN core-control.z80
DOTQP:              0C80 DEFINED AT LINE 49
                    > USED AT LINE 37
                    > USED AT LINE 79 IN core-control.z80
                    > USED AT LINE 37
                    > USED AT LINE 37
                    > USED AT LINE 37
DOTR:               0C8C DEFINED AT LINE 11
UDOTR:              0CA0 DEFINED AT LINE 11
UDOT:               0CB8 DEFINED AT LINE 11
                    > USED AT LINE 175 IN core-io.z80
DOT:                0CC8 DEFINED AT LINE 11
                    > USED AT LINE 187 IN core-io.z80
DOT1:               0CDE DEFINED AT LINE 176 IN core-io.z80
                    > USED AT LINE 174 IN core-io.z80
DOTPR:              0CE6 DEFINED AT LINE 11
QUEST:              0CF2 DEFINED AT LINE 11
BKSP:               0CFC DEFINED AT LINE 11
                    > USED AT LINE 215 IN core-io.z80
BACK1:              0D2C DEFINED AT LINE 197 IN core-io.z80
                    > USED AT LINE 193 IN core-io.z80
TAP:                0D2E DEFINED AT LINE 11
                    > USED AT LINE 213 IN core-io.z80
                    > USED AT LINE 229 IN core-io.z80
KTAP:               0D44 DEFINED AT LINE 11
                    > USED AT LINE 10 IN defaults.z80
KTAP1:              0D64 DEFINED AT LINE 214 IN core-io.z80
                    > USED AT LINE 212 IN core-io.z80
KTAP2:              0D68 DEFINED AT LINE 216 IN core-io.z80
                    > USED AT LINE 210 IN core-io.z80
ACCEP:              0D72 DEFINED AT LINE 11
                    > USED AT LINE 9 IN defaults.z80
ACCP1:              0D7C DEFINED AT LINE 223 IN core-io.z80
                    > USED AT LINE 234 IN core-io.z80
ACCP2:              0D9A DEFINED AT LINE 231 IN core-io.z80
                    > USED AT LINE 228 IN core-io.z80
ACCP3:              0D9E DEFINED AT LINE 233 IN core-io.z80
                    > USED AT LINE 230 IN core-io.z80
ACCP4:              0DA2 DEFINED AT LINE 235 IN core-io.z80
                    > USED AT LINE 225 IN core-io.z80
EXPEC:              0DAA DEFINED AT LINE 49
QUERY:              0DBA DEFINED AT LINE 49
HI:                 0DD8 DEFINED AT LINE 49
                    > USED AT LINE 57
HELLO:              0DF0 DEFINED AT LINE 10 IN core-kernel.z80
                    > USED AT LINE 3 IN core-kernel.z80
                    > USED AT LINE 7 IN core-kernel.z80
NEXT_STEP:          0E00 DEFINED AT LINE 12 IN core-kernel.z80
                    > USED AT LINE 54
                    > USED AT LINE 34 IN interrupt.z80
COLD:               0E06 DEFINED AT LINE 11
COLD1:              0E0A DEFINED AT LINE 21 IN core-kernel.z80
                    > USED AT LINE 29 IN core-kernel.z80
PRESE:              0E20 DEFINED AT LINE 11
                    > USED AT LINE 24 IN core-kernel.z80
QUIT:               0E36 DEFINED AT LINE 11
                    > USED AT LINE 9 IN core-kernel.z80
                    > USED AT LINE 28 IN core-kernel.z80
EXECU:              0E38 DEFINED AT LINE 11
                    > USED AT LINE 88 IN core-compiler.z80
                    > USED AT LINE 229 IN core-interpret.z80
                    > USED AT LINE 133 IN core-memory.z80
QBRAN:              0E3C DEFINED AT LINE 49
                    > USED AT LINE 86 IN core-alu.z80
                    > USED AT LINE 95 IN core-alu.z80
                    > USED AT LINE 120 IN core-alu.z80
                    > USED AT LINE 234 IN core-alu.z80
                    > USED AT LINE 238 IN core-alu.z80
                    > USED AT LINE 242 IN core-alu.z80
                    > USED AT LINE 5 IN core-compiler.z80
                    > USED AT LINE 57 IN core-compiler.z80
                    > USED AT LINE 68 IN core-compiler.z80
                    > USED AT LINE 85 IN core-compiler.z80
                    > USED AT LINE 87 IN core-compiler.z80
                    > USED AT LINE 93 IN core-compiler.z80
                    > USED AT LINE 19 IN core-control.z80
                    > USED AT LINE 30 IN core-control.z80
                    > USED AT LINE 35 IN core-format.z80
                    > USED AT LINE 43 IN core-format.z80
                    > USED AT LINE 82 IN core-format.z80
                    > USED AT LINE 7 IN core-interpret.z80
                    > USED AT LINE 18 IN core-interpret.z80
                    > USED AT LINE 24 IN core-interpret.z80
                    > USED AT LINE 28 IN core-interpret.z80
                    > USED AT LINE 33 IN core-interpret.z80
                    > USED AT LINE 51 IN core-interpret.z80
                    > USED AT LINE 53 IN core-interpret.z80
                    > USED AT LINE 58 IN core-interpret.z80
                    > USED AT LINE 70 IN core-interpret.z80
                    > USED AT LINE 73 IN core-interpret.z80
                    > USED AT LINE 136 IN core-interpret.z80
                    > USED AT LINE 148 IN core-interpret.z80
                    > USED AT LINE 150 IN core-interpret.z80
                    > USED AT LINE 157 IN core-interpret.z80
                    > USED AT LINE 168 IN core-interpret.z80
                    > USED AT LINE 173 IN core-interpret.z80
                    > USED AT LINE 175 IN core-interpret.z80
                    > USED AT LINE 216 IN core-interpret.z80
                    > USED AT LINE 226 IN core-interpret.z80
                    > USED AT LINE 232 IN core-interpret.z80
                    > USED AT LINE 248 IN core-interpret.z80
                    > USED AT LINE 266 IN core-interpret.z80
                    > USED AT LINE 63 IN core-io.z80
                    > USED AT LINE 66 IN core-io.z80
                    > USED AT LINE 79 IN core-io.z80
                    > USED AT LINE 122 IN core-io.z80
                    > USED AT LINE 174 IN core-io.z80
                    > USED AT LINE 193 IN core-io.z80
                    > USED AT LINE 210 IN core-io.z80
                    > USED AT LINE 212 IN core-io.z80
                    > USED AT LINE 225 IN core-io.z80
                    > USED AT LINE 228 IN core-io.z80
                    > USED AT LINE 132 IN core-memory.z80
                    > USED AT LINE 172 IN core-memory.z80
                    > USED AT LINE 195 IN core-memory.z80
                    > USED AT LINE 55 IN core-stacks.z80
                    > USED AT LINE 38 IN core-utils.z80
                    > USED AT LINE 75 IN core-utils.z80
                    > USED AT LINE 79 IN core-utils.z80
                    > USED AT LINE 81 IN core-utils.z80
                    > USED AT LINE 86 IN core-utils.z80
                    > USED AT LINE 95 IN core-utils.z80
                    > USED AT LINE 110 IN core-utils.z80
                    > USED AT LINE 114 IN core-utils.z80
                    > USED AT LINE 121 IN core-utils.z80
BRAN:               0E48 DEFINED AT LINE 49
                    > USED AT LINE 24 IN core-control.z80
                    > USED AT LINE 37 IN core-control.z80
                    > USED AT LINE 36 IN core-format.z80
                    > USED AT LINE 37 IN core-interpret.z80
                    > USED AT LINE 77 IN core-interpret.z80
                    > USED AT LINE 132 IN core-interpret.z80
                    > USED AT LINE 152 IN core-interpret.z80
                    > USED AT LINE 154 IN core-interpret.z80
                    > USED AT LINE 159 IN core-interpret.z80
                    > USED AT LINE 268 IN core-interpret.z80
                    > USED AT LINE 98 IN core-io.z80
                    > USED AT LINE 109 IN core-io.z80
                    > USED AT LINE 125 IN core-io.z80
                    > USED AT LINE 230 IN core-io.z80
                    > USED AT LINE 234 IN core-io.z80
                    > USED AT LINE 29 IN core-kernel.z80
                    > USED AT LINE 54 IN core-kernel.z80
                    > USED AT LINE 142 IN core-memory.z80
                    > USED AT LINE 157 IN core-memory.z80
                    > USED AT LINE 169 IN core-memory.z80
                    > USED AT LINE 5 IN core-utils.z80
                    > USED AT LINE 18 IN core-utils.z80
                    > USED AT LINE 40 IN core-utils.z80
                    > USED AT LINE 52 IN core-utils.z80
                    > USED AT LINE 83 IN core-utils.z80
                    > USED AT LINE 116 IN core-utils.z80
THROWX:             0E50 DEFINED AT LINE 11
                    > USED AT LINE 191 IN core-alu.z80
                    > USED AT LINE 194 IN core-alu.z80
STORE:              0E58 DEFINED AT LINE 11
                    > USED AT LINE 19 IN core-compiler.z80
                    > USED AT LINE 45 IN core-compiler.z80
                    > USED AT LINE 75 IN core-compiler.z80
                    > USED AT LINE 50 IN core-interpret.z80
                    > USED AT LINE 91 IN core-memory.z80
                    > USED AT LINE 97 IN core-memory.z80
AT:                 0E62 DEFINED AT LINE 11
                    > USED AT LINE 50 IN core-compiler.z80
                    > USED AT LINE 73 IN core-compiler.z80
                    > USED AT LINE 86 IN core-compiler.z80
                    > USED AT LINE 101 IN core-compiler.z80
                    > USED AT LINE 134 IN core-compiler.z80
                    > USED AT LINE 47 IN core-does.z80
                    > USED AT LINE 22 IN core-format.z80
                    > USED AT LINE 28 IN core-format.z80
                    > USED AT LINE 16 IN core-interpret.z80
                    > USED AT LINE 68 IN core-interpret.z80
                    > USED AT LINE 69 IN core-interpret.z80
                    > USED AT LINE 92 IN core-interpret.z80
                    > USED AT LINE 104 IN core-interpret.z80
                    > USED AT LINE 115 IN core-interpret.z80
                    > USED AT LINE 146 IN core-interpret.z80
                    > USED AT LINE 147 IN core-interpret.z80
                    > USED AT LINE 149 IN core-interpret.z80
                    > USED AT LINE 172 IN core-interpret.z80
                    > USED AT LINE 192 IN core-interpret.z80
                    > USED AT LINE 227 IN core-interpret.z80
                    > USED AT LINE 56 IN core-io.z80
                    > USED AT LINE 72 IN core-io.z80
                    > USED AT LINE 173 IN core-io.z80
                    > USED AT LINE 187 IN core-io.z80
                    > USED AT LINE 34 IN core-kernel.z80
                    > USED AT LINE 103 IN core-memory.z80
                    > USED AT LINE 114 IN core-memory.z80
                    > USED AT LINE 131 IN core-memory.z80
                    > USED AT LINE 30 IN core-utils.z80
                    > USED AT LINE 74 IN core-utils.z80
                    > USED AT LINE 78 IN core-utils.z80
                    > USED AT LINE 118 IN core-utils.z80
CSTOR:              0E6A DEFINED AT LINE 11
                    > USED AT LINE 204 IN core-io.z80
                    > USED AT LINE 145 IN core-memory.z80
                    > USED AT LINE 159 IN core-memory.z80
                    > USED AT LINE 187 IN core-memory.z80
CAT:                0E72 DEFINED AT LINE 11
                    > USED AT LINE 67 IN core-compiler.z80
                    > USED AT LINE 17 IN core-interpret.z80
                    > USED AT LINE 22 IN core-interpret.z80
                    > USED AT LINE 111 IN core-io.z80
                    > USED AT LINE 121 IN core-io.z80
                    > USED AT LINE 109 IN core-memory.z80
                    > USED AT LINE 7 IN core-utils.z80
                    > USED AT LINE 20 IN core-utils.z80
RAT:                0E7A DEFINED AT LINE 11
                    > USED AT LINE 239 IN core-alu.z80
                    > USED AT LINE 23 IN core-interpret.z80
                    > USED AT LINE 32 IN core-interpret.z80
                    > USED AT LINE 133 IN core-interpret.z80
                    > USED AT LINE 134 IN core-interpret.z80
                    > USED AT LINE 137 IN core-io.z80
                    > USED AT LINE 145 IN core-memory.z80
                    > USED AT LINE 54 IN core-utils.z80
RPAT:               0E84 DEFINED AT LINE 11
                    > USED AT LINE 185 IN core-interpret.z80
RPSTO:              0E8C DEFINED AT LINE 11
SPAT:               0E94 DEFINED AT LINE 11
                    > USED AT LINE 184 IN core-interpret.z80
                    > USED AT LINE 84 IN core-stacks.z80
                    > USED AT LINE 89 IN core-stacks.z80
SPSTO:              0E9E DEFINED AT LINE 11
PSTOR:              0EA6 DEFINED AT LINE 11
                    > USED AT LINE 13 IN core-compiler.z80
DSTOR:              0EB8 DEFINED AT LINE 11
DAT:                0EC8 DEFINED AT LINE 11
COUNT:              0ED8 DEFINED AT LINE 11
                    > USED AT LINE 44 IN core-compiler.z80
                    > USED AT LINE 59 IN core-compiler.z80
                    > USED AT LINE 149 IN core-io.z80
                    > USED AT LINE 96 IN core-utils.z80
HERE:               0EEA DEFINED AT LINE 11
                    > USED AT LINE 18 IN core-compiler.z80
                    > USED AT LINE 71 IN core-compiler.z80
                    > USED AT LINE 9 IN core-control.z80
                    > USED AT LINE 43 IN core-control.z80
                    > USED AT LINE 48 IN core-control.z80
                    > USED AT LINE 121 IN core-interpret.z80
                    > USED AT LINE 119 IN core-memory.z80
PAD:                0EF4 DEFINED AT LINE 11
                    > USED AT LINE 17 IN core-format.z80
                    > USED AT LINE 52 IN core-format.z80
TIB:                0F02 DEFINED AT LINE 11
                    > USED AT LINE 91 IN core-interpret.z80
                    > USED AT LINE 246 IN core-io.z80
ATEXE:              0F0E DEFINED AT LINE 49
                    > USED AT LINE 92 IN core-compiler.z80
                    > USED AT LINE 231 IN core-interpret.z80
                    > USED AT LINE 267 IN core-interpret.z80
                    > USED AT LINE 232 IN core-io.z80
                    > USED AT LINE 241 IN core-io.z80
EXE1:               0F1C DEFINED AT LINE 134 IN core-memory.z80
                    > USED AT LINE 132 IN core-memory.z80
CMOVE:              0F1E DEFINED AT LINE 11
                    > USED AT LINE 188 IN core-memory.z80
CMOV1:              0F28 DEFINED AT LINE 143 IN core-memory.z80
                    > USED AT LINE 149 IN core-memory.z80
CMOV2:              0F40 DEFINED AT LINE 148 IN core-memory.z80
                    > USED AT LINE 142 IN core-memory.z80
FILL:               0F48 DEFINED AT LINE 11
FILL1:              0F56 DEFINED AT LINE 158 IN core-memory.z80
                    > USED AT LINE 161 IN core-memory.z80
FILL2:              0F60 DEFINED AT LINE 160 IN core-memory.z80
                    > USED AT LINE 157 IN core-memory.z80
DTRAI:              0F68 DEFINED AT LINE 11
DTRA1:              0F72 DEFINED AT LINE 170 IN core-memory.z80
                    > USED AT LINE 175 IN core-memory.z80
DTRA2:              0F8C DEFINED AT LINE 174 IN core-memory.z80
                    > USED AT LINE 169 IN core-memory.z80
                    > USED AT LINE 172 IN core-memory.z80
PACKS:              0F96 DEFINED AT LINE 11
                    > USED AT LINE 116 IN core-interpret.z80
ALGND:              0FD0 DEFINED AT LINE 11
                    > USED AT LINE 71 IN core-compiler.z80
                    > USED AT LINE 138 IN core-io.z80
                    > USED AT LINE 182 IN core-memory.z80
ALGN1:              0FF0 DEFINED AT LINE 197 IN core-memory.z80
                    > USED AT LINE 195 IN core-memory.z80
ERR_DIVZERO:        0FF4 DEFINED AT LINE 3 IN core-messages.z80
                    > USED AT LINE 190 IN core-alu.z80
ERR_OUTOFRANGE:     0FFC DEFINED AT LINE 4 IN core-messages.z80
                    > USED AT LINE 193 IN core-alu.z80
TOR:                1008 DEFINED AT LINE 11
                    > USED AT LINE 65 IN core-alu.z80
                    > USED AT LINE 235 IN core-alu.z80
                    > USED AT LINE 237 IN core-alu.z80
                    > USED AT LINE 309 IN core-alu.z80
                    > USED AT LINE 32 IN core-compiler.z80
                    > USED AT LINE 4 IN core-control.z80
                    > USED AT LINE 64 IN core-does.z80
                    > USED AT LINE 57 IN core-format.z80
                    > USED AT LINE 5 IN core-interpret.z80
                    > USED AT LINE 27 IN core-interpret.z80
                    > USED AT LINE 54 IN core-interpret.z80
                    > USED AT LINE 66 IN core-interpret.z80
                    > USED AT LINE 76 IN core-interpret.z80
                    > USED AT LINE 91 IN core-interpret.z80
                    > USED AT LINE 131 IN core-interpret.z80
                    > USED AT LINE 170 IN core-interpret.z80
                    > USED AT LINE 184 IN core-interpret.z80
                    > USED AT LINE 108 IN core-io.z80
                    > USED AT LINE 138 IN core-io.z80
                    > USED AT LINE 154 IN core-io.z80
                    > USED AT LINE 160 IN core-io.z80
                    > USED AT LINE 192 IN core-io.z80
                    > USED AT LINE 141 IN core-memory.z80
                    > USED AT LINE 144 IN core-memory.z80
                    > USED AT LINE 156 IN core-memory.z80
                    > USED AT LINE 168 IN core-memory.z80
                    > USED AT LINE 63 IN core-stacks.z80
                    > USED AT LINE 78 IN core-stacks.z80
                    > USED AT LINE 4 IN core-utils.z80
                    > USED AT LINE 17 IN core-utils.z80
                    > USED AT LINE 32 IN core-utils.z80
                    > USED AT LINE 51 IN core-utils.z80
RFROM:              1016 DEFINED AT LINE 11
                    > USED AT LINE 67 IN core-alu.z80
                    > USED AT LINE 129 IN core-alu.z80
                    > USED AT LINE 241 IN core-alu.z80
                    > USED AT LINE 301 IN core-alu.z80
                    > USED AT LINE 31 IN core-compiler.z80
                    > USED AT LINE 36 IN core-does.z80
                    > USED AT LINE 47 IN core-does.z80
                    > USED AT LINE 11 IN core-interpret.z80
                    > USED AT LINE 39 IN core-interpret.z80
                    > USED AT LINE 39 IN core-interpret.z80
                    > USED AT LINE 43 IN core-interpret.z80
                    > USED AT LINE 44 IN core-interpret.z80
                    > USED AT LINE 61 IN core-interpret.z80
                    > USED AT LINE 63 IN core-interpret.z80
                    > USED AT LINE 79 IN core-interpret.z80
                    > USED AT LINE 83 IN core-interpret.z80
                    > USED AT LINE 83 IN core-interpret.z80
                    > USED AT LINE 85 IN core-interpret.z80
                    > USED AT LINE 93 IN core-interpret.z80
                    > USED AT LINE 137 IN core-interpret.z80
                    > USED AT LINE 155 IN core-interpret.z80
                    > USED AT LINE 160 IN core-interpret.z80
                    > USED AT LINE 171 IN core-interpret.z80
                    > USED AT LINE 176 IN core-interpret.z80
                    > USED AT LINE 177 IN core-interpret.z80
                    > USED AT LINE 186 IN core-interpret.z80
                    > USED AT LINE 187 IN core-interpret.z80
                    > USED AT LINE 193 IN core-interpret.z80
                    > USED AT LINE 194 IN core-interpret.z80
                    > USED AT LINE 195 IN core-interpret.z80
                    > USED AT LINE 137 IN core-io.z80
                    > USED AT LINE 161 IN core-io.z80
                    > USED AT LINE 147 IN core-memory.z80
                    > USED AT LINE 173 IN core-memory.z80
                    > USED AT LINE 42 IN core-utils.z80
                    > USED AT LINE 44 IN core-utils.z80
DUPP:               1024 DEFINED AT LINE 11
                    > USED AT LINE 77 IN core-alu.z80
                    > USED AT LINE 233 IN core-alu.z80
                    > USED AT LINE 237 IN core-alu.z80
                    > USED AT LINE 18 IN core-compiler.z80
                    > USED AT LINE 31 IN core-compiler.z80
                    > USED AT LINE 56 IN core-compiler.z80
                    > USED AT LINE 67 IN core-compiler.z80
                    > USED AT LINE 70 IN core-compiler.z80
                    > USED AT LINE 74 IN core-compiler.z80
                    > USED AT LINE 23 IN core-format.z80
                    > USED AT LINE 34 IN core-format.z80
                    > USED AT LINE 57 IN core-format.z80
                    > USED AT LINE 9 IN core-interpret.z80
                    > USED AT LINE 11 IN core-interpret.z80
                    > USED AT LINE 27 IN core-interpret.z80
                    > USED AT LINE 41 IN core-interpret.z80
                    > USED AT LINE 76 IN core-interpret.z80
                    > USED AT LINE 144 IN core-interpret.z80
                    > USED AT LINE 146 IN core-interpret.z80
                    > USED AT LINE 147 IN core-interpret.z80
                    > USED AT LINE 149 IN core-interpret.z80
                    > USED AT LINE 162 IN core-interpret.z80
                    > USED AT LINE 167 IN core-interpret.z80
                    > USED AT LINE 265 IN core-interpret.z80
                    > USED AT LINE 63 IN core-io.z80
                    > USED AT LINE 78 IN core-io.z80
                    > USED AT LINE 111 IN core-io.z80
                    > USED AT LINE 121 IN core-io.z80
                    > USED AT LINE 122 IN core-io.z80
                    > USED AT LINE 203 IN core-io.z80
                    > USED AT LINE 209 IN core-io.z80
                    > USED AT LINE 226 IN core-io.z80
                    > USED AT LINE 102 IN core-memory.z80
                    > USED AT LINE 108 IN core-memory.z80
                    > USED AT LINE 144 IN core-memory.z80
                    > USED AT LINE 182 IN core-memory.z80
                    > USED AT LINE 183 IN core-memory.z80
                    > USED AT LINE 193 IN core-memory.z80
                    > USED AT LINE 55 IN core-stacks.z80
                    > USED AT LINE 56 IN core-stacks.z80
                    > USED AT LINE 7 IN core-utils.z80
                    > USED AT LINE 20 IN core-utils.z80
                    > USED AT LINE 78 IN core-utils.z80
                    > USED AT LINE 109 IN core-utils.z80
                    > USED AT LINE 118 IN core-utils.z80
DROP:               1028 DEFINED AT LINE 11
                    > USED AT LINE 50 IN core-alu.z80
                    > USED AT LINE 96 IN core-alu.z80
                    > USED AT LINE 104 IN core-alu.z80
                    > USED AT LINE 114 IN core-alu.z80
                    > USED AT LINE 123 IN core-alu.z80
                    > USED AT LINE 148 IN core-alu.z80
                    > USED AT LINE 255 IN core-alu.z80
                    > USED AT LINE 295 IN core-alu.z80
                    > USED AT LINE 61 IN core-compiler.z80
                    > USED AT LINE 54 IN core-control.z80
                    > USED AT LINE 51 IN core-format.z80
                    > USED AT LINE 83 IN core-format.z80
                    > USED AT LINE 61 IN core-interpret.z80
                    > USED AT LINE 79 IN core-interpret.z80
                    > USED AT LINE 137 IN core-interpret.z80
                    > USED AT LINE 155 IN core-interpret.z80
                    > USED AT LINE 160 IN core-interpret.z80
                    > USED AT LINE 176 IN core-interpret.z80
                    > USED AT LINE 177 IN core-interpret.z80
                    > USED AT LINE 187 IN core-interpret.z80
                    > USED AT LINE 195 IN core-interpret.z80
                    > USED AT LINE 219 IN core-interpret.z80
                    > USED AT LINE 270 IN core-interpret.z80
                    > USED AT LINE 115 IN core-io.z80
                    > USED AT LINE 127 IN core-io.z80
                    > USED AT LINE 217 IN core-io.z80
                    > USED AT LINE 236 IN core-io.z80
                    > USED AT LINE 247 IN core-io.z80
                    > USED AT LINE 194 IN core-memory.z80
                    > USED AT LINE 68 IN core-stacks.z80
                    > USED AT LINE 68 IN core-stacks.z80
                    > USED AT LINE 11 IN core-utils.z80
                    > USED AT LINE 42 IN core-utils.z80
                    > USED AT LINE 44 IN core-utils.z80
                    > USED AT LINE 85 IN core-utils.z80
                    > USED AT LINE 87 IN core-utils.z80
                    > USED AT LINE 89 IN core-utils.z80
                    > USED AT LINE 122 IN core-utils.z80
SWAP:               102C DEFINED AT LINE 11
                    > USED AT LINE 96 IN core-alu.z80
                    > USED AT LINE 112 IN core-alu.z80
                    > USED AT LINE 119 IN core-alu.z80
                    > USED AT LINE 121 IN core-alu.z80
                    > USED AT LINE 148 IN core-alu.z80
                    > USED AT LINE 243 IN core-alu.z80
                    > USED AT LINE 260 IN core-alu.z80
                    > USED AT LINE 314 IN core-alu.z80
                    > USED AT LINE 48 IN core-control.z80
                    > USED AT LINE 59 IN core-control.z80
                    > USED AT LINE 64 IN core-control.z80
                    > USED AT LINE 12 IN core-format.z80
                    > USED AT LINE 19 IN core-interpret.z80
                    > USED AT LINE 20 IN core-interpret.z80
                    > USED AT LINE 23 IN core-interpret.z80
                    > USED AT LINE 29 IN core-interpret.z80
                    > USED AT LINE 32 IN core-interpret.z80
                    > USED AT LINE 36 IN core-interpret.z80
                    > USED AT LINE 65 IN core-interpret.z80
                    > USED AT LINE 144 IN core-interpret.z80
                    > USED AT LINE 156 IN core-interpret.z80
                    > USED AT LINE 194 IN core-interpret.z80
                    > USED AT LINE 217 IN core-io.z80
                    > USED AT LINE 90 IN core-memory.z80
                    > USED AT LINE 91 IN core-memory.z80
                    > USED AT LINE 96 IN core-memory.z80
                    > USED AT LINE 103 IN core-memory.z80
                    > USED AT LINE 109 IN core-memory.z80
                    > USED AT LINE 156 IN core-memory.z80
                    > USED AT LINE 188 IN core-memory.z80
                    > USED AT LINE 63 IN core-stacks.z80
                    > USED AT LINE 85 IN core-utils.z80
                    > USED AT LINE 87 IN core-utils.z80
OVER:               1034 DEFINED AT LINE 11
                    > USED AT LINE 128 IN core-alu.z80
                    > USED AT LINE 250 IN core-alu.z80
                    > USED AT LINE 59 IN core-compiler.z80
                    > USED AT LINE 65 IN core-does.z80
                    > USED AT LINE 52 IN core-format.z80
                    > USED AT LINE 17 IN core-interpret.z80
                    > USED AT LINE 22 IN core-interpret.z80
                    > USED AT LINE 56 IN core-interpret.z80
                    > USED AT LINE 65 IN core-interpret.z80
                    > USED AT LINE 82 IN core-interpret.z80
                    > USED AT LINE 85 IN core-interpret.z80
                    > USED AT LINE 133 IN core-interpret.z80
                    > USED AT LINE 134 IN core-interpret.z80
                    > USED AT LINE 161 IN core-io.z80
                    > USED AT LINE 192 IN core-io.z80
                    > USED AT LINE 204 IN core-io.z80
                    > USED AT LINE 222 IN core-io.z80
                    > USED AT LINE 236 IN core-io.z80
                    > USED AT LINE 90 IN core-memory.z80
                    > USED AT LINE 96 IN core-memory.z80
                    > USED AT LINE 171 IN core-memory.z80
                    > USED AT LINE 183 IN core-memory.z80
                    > USED AT LINE 185 IN core-memory.z80
                    > USED AT LINE 73 IN core-stacks.z80
                    > USED AT LINE 73 IN core-stacks.z80
                    > USED AT LINE 16 IN core-utils.z80
QDUP:               103C DEFINED AT LINE 11
                    > USED AT LINE 84 IN core-compiler.z80
                    > USED AT LINE 135 IN core-interpret.z80
                    > USED AT LINE 172 IN core-interpret.z80
                    > USED AT LINE 174 IN core-interpret.z80
                    > USED AT LINE 225 IN core-interpret.z80
                    > USED AT LINE 131 IN core-memory.z80
                    > USED AT LINE 94 IN core-utils.z80
                    > USED AT LINE 113 IN core-utils.z80
QDUP1:              1048 DEFINED AT LINE 57 IN core-stacks.z80
ROT:                104A DEFINED AT LINE 11
                    > USED AT LINE 78 IN core-stacks.z80
                    > USED AT LINE 35 IN core-utils.z80
                    > USED AT LINE 35 IN core-utils.z80
DDROP:              1058 DEFINED AT LINE 11
                    > USED AT LINE 43 IN core-interpret.z80
                    > USED AT LINE 80 IN core-io.z80
                    > USED AT LINE 150 IN core-memory.z80
                    > USED AT LINE 162 IN core-memory.z80
DDUP:               1062 DEFINED AT LINE 11
                    > USED AT LINE 94 IN core-alu.z80
                    > USED AT LINE 103 IN core-alu.z80
                    > USED AT LINE 111 IN core-alu.z80
                    > USED AT LINE 119 IN core-alu.z80
                    > USED AT LINE 300 IN core-alu.z80
                    > USED AT LINE 224 IN core-io.z80
                    > USED AT LINE 159 IN core-memory.z80
                    > USED AT LINE 187 IN core-memory.z80
                    > USED AT LINE 76 IN core-utils.z80
                    > USED AT LINE 80 IN core-utils.z80
TWOSWAP:            106C DEFINED AT LINE 11
PICK:               107A DEFINED AT LINE 11
                    > USED AT LINE 54 IN core-utils.z80
DEPTH:              108E DEFINED AT LINE 11
                    > USED AT LINE 256 IN core-interpret.z80
                    > USED AT LINE 50 IN core-utils.z80
SZERO:              10A4 DEFINED AT LINE 11
                    > USED AT LINE 34 IN core-kernel.z80
                    > USED AT LINE 89 IN core-stacks.z80
RZERO:              10AC DEFINED AT LINE 11
TQKEY:              10B4 DEFINED AT LINE 49
                    > USED AT LINE 56 IN core-io.z80
TEMIT:              10BC DEFINED AT LINE 49
                    > USED AT LINE 72 IN core-io.z80
TEXPE:              10C4 DEFINED AT LINE 49
                    > USED AT LINE 241 IN core-io.z80
TTAP:               10CC DEFINED AT LINE 49
                    > USED AT LINE 232 IN core-io.z80
TECHO:              10D4 DEFINED AT LINE 49
                    > USED AT LINE 195 IN core-io.z80
                    > USED AT LINE 203 IN core-io.z80
TPROM:              10DC DEFINED AT LINE 49
                    > USED AT LINE 270 IN core-interpret.z80
BASE:               10E4 DEFINED AT LINE 11
                    > USED AT LINE 28 IN core-format.z80
                    > USED AT LINE 16 IN core-interpret.z80
                    > USED AT LINE 29 IN core-interpret.z80
                    > USED AT LINE 44 IN core-interpret.z80
                    > USED AT LINE 173 IN core-io.z80
                    > USED AT LINE 30 IN core-utils.z80
TEMP:               10EC DEFINED AT LINE 11
                    > USED AT LINE 50 IN core-interpret.z80
                    > USED AT LINE 68 IN core-interpret.z80
                    > USED AT LINE 69 IN core-interpret.z80
                    > USED AT LINE 153 IN core-interpret.z80
SPAN:               10F4 DEFINED AT LINE 49
INN:                10FC DEFINED AT LINE 11
NTIB:               1104 DEFINED AT LINE 49
                    > USED AT LINE 92 IN core-interpret.z80
                    > USED AT LINE 104 IN core-interpret.z80
                    > USED AT LINE 125 IN core-memory.z80
CSP:                110C DEFINED AT LINE 49
TEVAL:              1114 DEFINED AT LINE 49
                    > USED AT LINE 267 IN core-interpret.z80
TNUMB:              111C DEFINED AT LINE 49
                    > USED AT LINE 92 IN core-compiler.z80
                    > USED AT LINE 231 IN core-interpret.z80
HLD:                1124 DEFINED AT LINE 49
                    > USED AT LINE 17 IN core-format.z80
                    > USED AT LINE 22 IN core-format.z80
                    > USED AT LINE 23 IN core-format.z80
                    > USED AT LINE 51 IN core-format.z80
HANDL:              112C DEFINED AT LINE 49
                    > USED AT LINE 185 IN core-interpret.z80
                    > USED AT LINE 186 IN core-interpret.z80
                    > USED AT LINE 192 IN core-interpret.z80
                    > USED AT LINE 193 IN core-interpret.z80
CNTXT:              1134 DEFINED AT LINE 49
                    > USED AT LINE 167 IN core-interpret.z80
CRRNT:              113C DEFINED AT LINE 49
                    > USED AT LINE 73 IN core-compiler.z80
                    > USED AT LINE 72 IN core-utils.z80
CP:                 1144 DEFINED AT LINE 49
                    > USED AT LINE 13 IN core-compiler.z80
                    > USED AT LINE 19 IN core-compiler.z80
                    > USED AT LINE 45 IN core-compiler.z80
                    > USED AT LINE 114 IN core-memory.z80
NP:                 114C DEFINED AT LINE 49
                    > USED AT LINE 115 IN core-interpret.z80
LAST:               1154 DEFINED AT LINE 11
                    > USED AT LINE 50 IN core-compiler.z80
                    > USED AT LINE 70 IN core-compiler.z80
                    > USED AT LINE 101 IN core-compiler.z80
                    > USED AT LINE 134 IN core-compiler.z80
VFRTH:              115C DEFINED AT LINE 49
UTYPE:              1164 DEFINED AT LINE 11
                    > USED AT LINE 97 IN core-utils.z80
UTYP1:              116E DEFINED AT LINE 6 IN core-utils.z80
                    > USED AT LINE 10 IN core-utils.z80
UTYP2:              117C DEFINED AT LINE 9 IN core-utils.z80
                    > USED AT LINE 5 IN core-utils.z80
DMP:                1184 DEFINED AT LINE 49
PDUM1:              1198 DEFINED AT LINE 19 IN core-utils.z80
                    > USED AT LINE 23 IN core-utils.z80
PDUM2:              11A8 DEFINED AT LINE 22 IN core-utils.z80
                    > USED AT LINE 18 IN core-utils.z80
DUMP:               11AE DEFINED AT LINE 11
DUMP1:              11C2 DEFINED AT LINE 33 IN core-utils.z80
                    > USED AT LINE 39 IN core-utils.z80
DUMP2:              11E6 DEFINED AT LINE 41 IN core-utils.z80
                    > USED AT LINE 38 IN core-utils.z80
DUMP3:              11EA DEFINED AT LINE 43 IN core-utils.z80
                    > USED AT LINE 40 IN core-utils.z80
DOTS:               11F4 DEFINED AT LINE 11
DOTS1:              1202 DEFINED AT LINE 53 IN core-utils.z80
                    > USED AT LINE 56 IN core-utils.z80
DOTS2:              1208 DEFINED AT LINE 55 IN core-utils.z80
                    > USED AT LINE 52 IN core-utils.z80
TNAME:              1216 DEFINED AT LINE 11
                    > USED AT LINE 111 IN core-utils.z80
TNAM1:              121C DEFINED AT LINE 73 IN core-utils.z80
                    > USED AT LINE 86 IN core-utils.z80
TNAM2:              1228 DEFINED AT LINE 77 IN core-utils.z80
                    > USED AT LINE 83 IN core-utils.z80
TNAM3:              1240 DEFINED AT LINE 84 IN core-utils.z80
                    > USED AT LINE 79 IN core-utils.z80
                    > USED AT LINE 81 IN core-utils.z80
TNAM4:              1254 DEFINED AT LINE 88 IN core-utils.z80
                    > USED AT LINE 75 IN core-utils.z80
DOTID:              125C DEFINED AT LINE 11
                    > USED AT LINE 115 IN core-utils.z80
DOTI1:              1272 DEFINED AT LINE 98 IN core-utils.z80
                    > USED AT LINE 95 IN core-utils.z80
SEE:                1280 DEFINED AT LINE 11
SEE1:               128A DEFINED AT LINE 108 IN core-utils.z80
                    > USED AT LINE 121 IN core-utils.z80
SEE2:               1298 DEFINED AT LINE 112 IN core-utils.z80
                    > USED AT LINE 110 IN core-utils.z80
SEE3:               12A6 DEFINED AT LINE 117 IN core-utils.z80
                    > USED AT LINE 114 IN core-utils.z80
SEE4:               12AC DEFINED AT LINE 119 IN core-utils.z80
                    > USED AT LINE 116 IN core-utils.z80
LASTN:              139A DEFINED AT LINE 91
                    > USED AT LINE 30 IN defaults.z80
                    > USED AT LINE 31 IN defaults.z80
SPP:                2200 DEFINED AT LINE 3 IN variables.z80
                    > USED AT LINE 45
                    > USED AT LINE 5 IN defaults.z80
TIBB:               2200 DEFINED AT LINE 4 IN variables.z80
                    > USED AT LINE 18 IN defaults.z80
                    > USED AT LINE 35 IN core-kernel.z80
RPP:                2400 DEFINED AT LINE 6 IN variables.z80
                    > USED AT LINE 53
                    > USED AT LINE 6 IN defaults.z80
UPP:                2400 DEFINED AT LINE 7 IN variables.z80
                    > USED AT LINE 49
                    > USED AT LINE 42 IN core-does.z80
VARSZERO:           2400 DEFINED AT LINE 9 IN variables.z80
VARRZERO:           2402 DEFINED AT LINE 10 IN variables.z80
VARTQKEY:           2404 DEFINED AT LINE 11 IN variables.z80
VARTEMIT:           2406 DEFINED AT LINE 12 IN variables.z80
VARTEXPE:           2408 DEFINED AT LINE 13 IN variables.z80
VARTTAP:            240A DEFINED AT LINE 14 IN variables.z80
VARTECHO:           240C DEFINED AT LINE 15 IN variables.z80
VARTPROM:           240E DEFINED AT LINE 16 IN variables.z80
VARBASE:            2410 DEFINED AT LINE 17 IN variables.z80
VARTEMP:            2412 DEFINED AT LINE 18 IN variables.z80
VARSPAN:            2414 DEFINED AT LINE 19 IN variables.z80
VARINN:             2416 DEFINED AT LINE 20 IN variables.z80
VARNTIB:            2418 DEFINED AT LINE 21 IN variables.z80
VARTIB:             241A DEFINED AT LINE 22 IN variables.z80
VARCSP:             241C DEFINED AT LINE 23 IN variables.z80
VARTEVAL:           241E DEFINED AT LINE 24 IN variables.z80
VARTNUMB:           2420 DEFINED AT LINE 25 IN variables.z80
VARHLD:             2422 DEFINED AT LINE 26 IN variables.z80
VARHANDL:           2424 DEFINED AT LINE 27 IN variables.z80
VARCNTXT:           2426 DEFINED AT LINE 28 IN variables.z80
VARVOCABS:          2428 DEFINED AT LINE 29 IN variables.z80
VARCRRNT:           242A DEFINED AT LINE 30 IN variables.z80
VARVOCABLP:         242C DEFINED AT LINE 31 IN variables.z80
VARCP:              242E DEFINED AT LINE 32 IN variables.z80
VARNP:              2430 DEFINED AT LINE 33 IN variables.z80
VARLAST:            2432 DEFINED AT LINE 34 IN variables.z80
VARVFRTH:           2434 DEFINED AT LINE 35 IN variables.z80
VARVOCABL:          2436 DEFINED AT LINE 36 IN variables.z80
SERINPTR:           2438 DEFINED AT LINE 38 IN variables.z80
                    > USED AT LINE 16 IN interrupt.z80
                    > USED AT LINE 22 IN interrupt.z80
                    > USED AT LINE 7 IN serial.z80
SERRDPTR:           243A DEFINED AT LINE 39 IN variables.z80
                    > USED AT LINE 8 IN serial.z80
                    > USED AT LINE 23 IN serial.z80
                    > USED AT LINE 31 IN serial.z80
SERBUFUSED:         243C DEFINED AT LINE 40 IN variables.z80
                    > USED AT LINE 10 IN interrupt.z80
                    > USED AT LINE 25 IN interrupt.z80
                    > USED AT LINE 27 IN interrupt.z80
                    > USED AT LINE 10 IN serial.z80
                    > USED AT LINE 18 IN serial.z80
                    > USED AT LINE 32 IN serial.z80
                    > USED AT LINE 34 IN serial.z80
                    > USED AT LINE 56 IN serial.z80
SERBUF:             243E DEFINED AT LINE 41 IN variables.z80
                    > USED AT LINE 19 IN interrupt.z80
                    > USED AT LINE 21 IN interrupt.z80
                    > USED AT LINE 6 IN serial.z80
                    > USED AT LINE 26 IN serial.z80
                    > USED AT LINE 28 IN serial.z80
VECTAB:             247D DEFINED AT LINE 43 IN variables.z80
VRST08:             247D DEFINED AT LINE 44 IN variables.z80
                    > USED AT LINE 12
VRST10:             247F DEFINED AT LINE 45 IN variables.z80
                    > USED AT LINE 16
VRST18:             2481 DEFINED AT LINE 46 IN variables.z80
                    > USED AT LINE 20
VRST20:             2483 DEFINED AT LINE 47 IN variables.z80
                    > USED AT LINE 24
VRST28:             2485 DEFINED AT LINE 48 IN variables.z80
                    > USED AT LINE 28
VRST30:             2487 DEFINED AT LINE 49 IN variables.z80
                    > USED AT LINE 32
VINT:               2489 DEFINED AT LINE 50 IN variables.z80
                    > USED AT LINE 36
                    > USED AT LINE 44
VNMI:               248B DEFINED AT LINE 51 IN variables.z80
                    > USED AT LINE 40
CPP:                248D DEFINED AT LINE 53 IN variables.z80
                    > USED AT LINE 28 IN defaults.z80
NPP:                FFFE DEFINED AT LINE 55 IN variables.z80
                    > USED AT LINE 29 IN defaults.z80

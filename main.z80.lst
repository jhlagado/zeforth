0000                          .ENGINE   mycomputer   
0000                TESTMODE:   EQU   0   
0000                MEM_SIZE:   EQU   $10000   ; MEM is 64K
0000                ROM_SIZE:   EQU   $2000   ; ROM is 8K
0000                RAM_SIZE:   EQU   MEM_SIZE - ROM_SIZE   ; RAM is 64K - 8K
0000                START_ROM:   EQU   BM   ; inclusive
0000                END_ROM:   EQU   BM + ROM_SIZE   ; exclusive
0000                START_RAM:   EQU   BM + ROM_SIZE   ; inclusive
0000                END_RAM:   EQU   START_RAM + RAM_SIZE   ; exclusive
0000                BM:       EQU   0   ; bottom of ROM memory
0000                EM:       EQU   BM + MEM_SIZE   
0000                COMPO:    EQU   $20   ;lexicon compile only bit
0000                IMEDD:    EQU   $40   ;lexicon immediate bit
0000                MASKK:    EQU   $1F   ;lexicon bit mask
0000                CHARR:    EQU   1   ;byte size of a character
0000                CELLL:    EQU   2   
0000                BASEE:    EQU   10   ;BASE
0000                VOCSS:    EQU   8   ;depth of vocabulary stack
0000                MAXCHAR:   EQU   0FFh   ;Extended character set					                    ;  Use 07Fh for ASCII only
0000                MAXSIGNED:   EQU   07FFFh   ;max value of signed integer
0000                MAXUNSIGNED:   EQU   0FFFFh   ;max value of unsigned integer
0000                MAXNEGATIVE:   EQU   8000h   ;max value of negative integer
0000                BKSPP:    EQU   8   ;backspace
0000                LFF:      EQU   $0A   ;line feed
0000                CRR:      EQU   $0D   ;carriage return
0000                SPACEE:   EQU   $20   
0000                TIC:      EQU   $27   ;tick
0000                MINUSS:   EQU   $2D   
0000                UNDERSC:   EQU   $5F   
0000                CALLL:    EQU   $CD00   ; NOP followed by CALL opcodes
0000                US:       EQU   END_DEFAULTS - DEFAULTS   ;user area size
0000                RTS:      EQU   $100 * CELLL   ;return stack/TIB size
0000                DTS:      EQU   $100 * CELLL   ;data stack size
0000                RET_STACK_SIZE:   EQU   $100   
0000                DATA_STACK_SIZE:   EQU   $100   
0000                INT_ADDR:   EQU   $0038   
0000                SER_BUFSIZE:   EQU   $3F   
0000                SER_FULLSIZE:   EQU   $30   
0000                SER_EMPTYSIZE:   EQU   5   
0000                RTS_HIGH:   EQU   $D6   
0000                RTS_LOW:   EQU   $96   
0000                TRUEE:    EQU   -1   
0000                FALSEE:   EQU   0   
0000                             ; Initialize assembly variables
0000                VVCODE:   .SET   0   
0000                VVNAME:   .SET   END_ROM   
0000                VVLINK:   .SET   0   ;force a null link
0000                VVUSER:   .SET   0   ;first user variable offset
0000                .macro MCODE,aaLEX,aaNAME,aaLABEL
0000                             ; 
0000                 .align 2                                         ;;force to cell boundary
0000                aaLABEL:                                              ;;assembly label
0000                 vvCODE .set $
0000                 vvLEN  .set (aaLEX & 01FH) / CELLL              ;;string cell count, round down
0000                 ORG vvNAME - ((vvLEN + 3) * CELLL)                                     ; ? needed
0000                 vvNAME .set $
0000                 DW vvCODE, vvLINK                               ;;token pointer and link
0000                 vvLINK .set $                                   ;;link points to a name string
0000                 DB aaLEX, aaNAME                                    ;;name string
0000                 ORG vvCODE                                      ;;restore code pointer
0000                .endm
0000                 
0000                .macro MCOLON,aaLEX,aaNAME,aaLABEL
0000                             ; 
0000                 mCODE aaLEX, aaNAME, aaLABEL
0000                 nop
0000                 CALL doLIST
0000                .endm
0000                 
0000                .macro MUSER,aaLEX,aaNAME,aaLABEL
0000                             ; 
0000                	mCODE aaLEX, aaNAME, aaLABEL
0000                 nop
0000                 CALL doLIST
0000                 DW DoUSE,vvUSER
0000                 vvUSER .set vvUSER + CELLL
0000                .endm
0000                 
0000                             ; .align 2
0000                .macro MDSTR,aaFUNC,aaSTR
0000                             ; 
0000                 DW aaFUNC                       ;;function
0000                 vvLEN .set $                    ;;save address of count byte
0000                 DB 0,aaSTR                      ;;count byte and string
0000                 vvCODE .set $                   ;;save code pointer
0000                ORG vvLEN                           ;;point to count byte
0000                 DB vvCODE - vvLEN - 1           ;;set count
0000                ORG vvCODE                          ;;restore code pointer
0000                .endm
0000                 
0000                .macro HCODE,aaLEX,aaNAME,aaLABEL
0000                             ; 
0000                 .align 2                                         ;;force to cell boundary
0000                aaLABEL:                                              ;;assembly label
0000                .endm
0000                 
0000                .macro HCOLON,aaLEX,aaNAME,aaLABEL
0000                             ; 
0000                 hCODE aaLEX, aaNAME, aaLABEL
0000                 nop
0000                 CALL doLIST
0000                .endm
0000                 
0000                .macro HUSER,aaLEX,aaNAME,aaLABEL
0000                             ; 
0000                	hCODE aaLEX, aaNAME, aaLABEL
0000                 nop
0000                 CALL doLIST
0000                 DW DoUSE,vvUSER
0000                 vvUSER .set vvUSER + CELLL
0000                .endm
0000                 
0000                             ; 	LD	E,(HL)	                    ; 7t
0000                             ; 	INC	HL	                        ; 6t
0000                             ; 	LD	D,(HL)	                    ; 7t
0000                             ; 	INC	HL	                        ; 6t
0000                             ; 	EX	DE,HL	                    ; 4t
0000                             ; 	JP	(HL)	                    ; 4t
0000                .macro MNEXTHL,
0000                             ; 
0000                 JP (IY)
0000                .endm
0000                 
0000                .macro MNEXT,
0000                             ; 
0000                	EX	DE,HL	                    ; 4t
0000                 mNEXTHL                         ; 34t
0000                .endm
0000                 
0000                          .ORG   START_ROM   
0000                RESET:       
0000   C3 6D 00               JP   INIT   ; C3 veclo vechi
0008                          .ORG   $08   
0008   CD E8 0D     RST08:    CALL   SVEC   
0010                          .ORG   $10   
0010   CD E8 0D     RST10:    CALL   SVEC   
0018                          .ORG   $18   
0018   CD E8 0D     RST18:    CALL   SVEC   
0020                          .ORG   $20   
0020   CD E8 0D     RST20:    CALL   SVEC   
0028                          .ORG   $28   
0028   CD E8 0D     RST28:    CALL   SVEC   
0030                          .ORG   $30   
0030   CD E8 0D     RST30:    CALL   SVEC   
0038                          .ORG   $38   
0038   CD E8 0D     RST38:    CALL   SVEC   
0066                          .ORG   $66   
0066                RST66:       
0066   D5                     PUSH   DE   
0067   11 00 00               LD   DE,0   
006A   C3 F4 0D               JP   SVEC1   
006D                INIT:        
006D   21 9C 00               LD   HL,serialInt   
0070   22 8B 24               LD   (vRST38),HL   
0073   21 00 22               LD   HL,SPP   ; Setup Forth data stack
0076   F9                     LD   SP,HL   ; also used as return stack by interrupts etc
0077   21 30 01               LD   HL,DEFAULTS   ; initialize user variables with defaults
007A   11 00 24               LD   DE,UPP   
007D   01 3A 00               LD   BC,US   
0080   ED B0                  LDIR      
0082   DD 21 00 24            LD   IX,RPP   ; set up Forth return stack
0086   FD 21 FE 0D            LD   IY,NEXT_STEP   
008A   01 FF FF               LD   BC,-1   ; empty stack marker
008D   11 01 00               LD   DE,RESET + 1   ; contains reset vector
0090   C3 C8 0D               JP   KOLD   
0093                          IF   TESTMODE   
                              JP   TESTS_START   
0093                          ELSE      
0093                             ; LD      HL,GREETING
0093                             ; CALL    PRINTSZ
0093                LOOP:        
0093   CD EA 00               CALL   RXA   
0096   CD 15 01               CALL   TXA   
0099   C3 93 00               JP   LOOP   
009C                          ENDIF      
009C   F5           SERIALINT:   PUSH   AF   
009D   E5                     PUSH   HL   
009E   DB 80                  IN   A,($80)   
00A0   E6 01                  AND   $01   ; Check if interupt due to read buffer full
00A2   28 2D                  JR   Z,rts0   ; if not, ignore
00A4   DB 81                  IN   A,($81)   
00A6   F5                     PUSH   AF   
00A7   3A 3C 24               LD   A,(serBufUsed)   
00AA   FE 3F                  CP   SER_BUFSIZE   ; If full then ignore
00AC   20 03                  JR   NZ,notFull   
00AE   F1                     POP   AF   
00AF   18 20                  JR   rts0   
00B1   2A 38 24     NOTFULL:   LD   HL,(serInPtr)   
00B4   23                     INC   HL   
00B5   7D                     LD   A,L   ; Only need to check low byte becasuse buffer<256 bytes
00B6   FE 7D                  CP   (serBuf+SER_BUFSIZE) & $FF   
00B8   20 03                  JR   NZ,notWrap   
00BA   21 3E 24               LD   HL,serBuf   
00BD   22 38 24     NOTWRAP:   LD   (serInPtr),HL   
00C0   F1                     POP   AF   
00C1   77                     LD   (HL),A   
00C2   3A 3C 24               LD   A,(serBufUsed)   
00C5   3C                     INC   A   
00C6   32 3C 24               LD   (serBufUsed),A   
00C9   FE 30                  CP   SER_FULLSIZE   
00CB   38 04                  JR   C,rts0   
00CD   3E D6                  LD   A,RTS_HIGH   
00CF   D3 80                  OUT   ($80),A   
00D1   E1           RTS0:     POP   HL   
00D2   F1                     POP   AF   
00D3   FB                     EI      
00D4   ED 4D                  RETI      
00D6                             ; Modified from code by Grant Searle
00D6                             ; Minimum 6850 ACIA interrupt driven serial I/O
00D6                INIT_IO:      
00D6   F3                     DI      ; Disable interrupts
00D7   21 3E 24               LD   HL,serBuf   
00DA   22 38 24               LD   (serInPtr),HL   
00DD   22 3A 24               LD   (serRdPtr),HL   
00E0   AF                     XOR   A   
00E1   32 3C 24               LD   (serBufUsed),A   
00E4   3E 96                  LD   A,RTS_LOW   
00E6   D3 80                  OUT   ($80),A   ; Initialise ACIA
00E8   FB                     EI      
00E9   C9                     RET      
00EA                RXA:         
00EA                WAITFORCHAR:      
00EA   3A 3C 24               LD   A,(serBufUsed)   
00ED   FE 00                  CP   $00   
00EF   28 F9                  JR   Z,waitForChar   
00F1   E5                     PUSH   HL   
00F2   2A 3A 24               LD   HL,(serRdPtr)   
00F5   23                     INC   HL   
00F6   7D                     LD   A,L   ; Only need to check low byte becasuse buffer<256 bytes
00F7   FE 7D                  CP   (serBuf+SER_BUFSIZE) & $FF   
00F9   20 03                  JR   NZ,notRdWrap   
00FB   21 3E 24               LD   HL,serBuf   
00FE                NOTRDWRAP:      
00FE   F3                     DI      
00FF   22 3A 24               LD   (serRdPtr),HL   
0102   3A 3C 24               LD   A,(serBufUsed)   
0105   3D                     DEC   A   
0106   32 3C 24               LD   (serBufUsed),A   
0109   FE 05                  CP   SER_EMPTYSIZE   
010B   30 04                  JR   NC,rts1   
010D   3E 96                  LD   A,RTS_LOW   
010F   D3 80                  OUT   ($80),A   
0111                RTS1:        
0111   7E                     LD   A,(HL)   
0112   FB                     EI      
0113   E1                     POP   HL   
0114   C9                     RET      ; Char ready in A
0115                TXA:         
0115   F5                     PUSH   AF   ; Store character
0116                CONOUT1:      
0116   DB 80                  IN   A,($80)   ; Status byte
0118   CB 4F                  BIT   1,A   ; Set Zero flag if still transmitting character
011A   28 FA                  JR   Z,conout1   ; Loop until flag signals ready
011C   F1                     POP   AF   ; Retrieve character
011D   D3 81                  OUT   ($81),A   ; Output the character
011F   C9                     RET      
0120                CKINCHAR:      
0120   3A 3C 24               LD   A,(serBufUsed)   
0123   FE 00                  CP   $0   
0125   C9                     RET      
0126                PRINTSZ:      
0126   7E                     LD   A,(HL)   ; Get character
0127   B7                     OR   A   ; Is it $00 ?
0128   C8                     RET   Z   ; Then RETurn on terminator
0129   CD 15 01               CALL   TXA   ; Print it
012C   23                     INC   HL   ; Next Character
012D   18 F7                  JR   PRINTSZ   ; Continue until $00
012F   C9                     RET      
0130                             ; .align 2
0130                DEFAULTS:      
0130                UZERO:       
0130   00 22        DEFSZERO:   DW   SPP   ; SP0
0132   00 24        DEFRZERO:   DW   RPP   ; RP0
0134   8C 0B        DEFTQKEY:   DW   QRX   ; '?KEY
0136   A4 0B        DEFTEMIT:   DW   TXSTO   ; 'EMIT
0138   00 00        DEFTEXPE:   DW   0   ; 'EXPECT
013A   00 00        DEFTTAP:   DW   0   ; 'TAP
013C   A4 0B        DEFTECHO:   DW   TXSTO   ; 'ECHO
013E   00 00        DEFTPROM:   DW   0   ; 'PROMPT
0140   00 00        DEFBASE:   DW   0   ; BASE
0142   00 00        DEFTEMP:   DW   0   ; tmp
0144   00 00        DEFSPAN:   DW   0   ; SPAN
0146   00 00        DEFINN:   DW   0   ; >IN
0148   00 00        DEFNTIB:   DW   0   ; #TIB
014A   00 22        DEFTIB:   DW   TIBB   ; TIB
014C   00 00        DEFCSP:   DW   0   ; CSP
014E   00 00        DEFTEVAL:   DW   0   ; 'EVAL
0150   00 00        DEFTNUMB:   DW   0   ; 'NUMBER
0152   00 00        DEFHLD:   DW   0   ; HLD
0154   00 00        DEFHANDL:   DW   0   ; HANDLER
0156   00 00        DEFCNTXT:   DW   0   ; CONTEXT pointer
0158   00 00        DEFVOCABS:   DW   0   ; vocabulary stack    ???
015A   00 00        DEFCRRENT:   DW   0   ; CURRENT pointer
015C   00 00        DEFVOCABLP:   DW   0   ; vocabulary link pointer ???
015E   8D 24        DEFCP:    DW   CPP   ; CP  for runing phase on RAM
0160   FE FF        DEFNP:    DW   NPP   ; NP  for runing phase on RAM
0162   00 00        DEFLAST:   DW   0   ; LAST
0164   00 00        DEFVFRTH:   DW   0   ; FORTH   \ mullti-user ???
0166   00 00        DEFVOCABL:   DW   0   ; vocabulary link       ???
0168   00 00        DEFCOLD:   DW   0   ; "COLD"
016A                ULAST:       
016A                END_DEFAULTS:      
016A                VVCODE:   .SET   $   
016A                             ;   0<          ( n -- t )
016A                             ;               Return true if n is negative.
016A                          ;*Macro unroll: mCODE	2,'0<', ZLESS
016A                          ALIGN   2   
016A                ZLESS:       
016A                VVCODE:   .SET   $   
016A                VVLEN:    .SET   (2 & 01FH) / CELLL   
1FF8                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FF8                VVNAME:   .SET   $   
1FF8   6A 01 00 00            DW   vvCODE,vvLINK   
1FFC                VVLINK:   .SET   $   
1FFC   02 30 3C               DB   2,"0<"   
016A                          .ORG   vvCODE   
016A   CB 20                  SLA   B   ; sign bit -> cy flag
016C   9F                     SBC   A,A   ; propagate cy through A
016D   47                     LD   B,A   ; put 0000 or FFFF in TOS
016E   4F                     LD   C,A   
016F                          ;*Macro unroll: 	mNEXT
016F   EB                     EX   DE,HL   
0170                          ;*Macro unroll:  mNEXTHL                         ; 34t
0170   FD E9                  JP   (IY)   ; 34t
0172                             ;   AND         ( w w -- w )
0172                             ;               Bitwise AND.
0172                          ;*Macro unroll: mCODE	3, 'AND', ANDD
0172                          ALIGN   2   
0172                ANDD:        
0172                VVCODE:   .SET   $   
0172                VVLEN:    .SET   (3 & 01FH) / CELLL   
1FF0                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FF0                VVNAME:   .SET   $   
1FF0   72 01 FC 1F            DW   vvCODE,vvLINK   
1FF4                VVLINK:   .SET   $   
1FF4   03 41 4E 44            DB   3,"AND"   
0172                          .ORG   vvCODE   
0172   E1                     POP   HL   
0173   78                     LD   A,B   
0174   A4                     AND   H   
0175   47                     LD   B,A   
0176   79                     LD   A,C   
0177   A5                     AND   L   
0178   4F                     LD   C,A   
0179                          ;*Macro unroll: 	mNEXT
0179   EB                     EX   DE,HL   
017A                          ;*Macro unroll:  mNEXTHL                         ; 34t
017A   FD E9                  JP   (IY)   ; 34t
017C                             ;   OR          ( w w -- w )
017C                             ;               Bitwise inclusive OR.
017C                          ;*Macro unroll: mCODE	2,'OR', ORR
017C                          ALIGN   2   
017C                ORR:         
017C                VVCODE:   .SET   $   
017C                VVLEN:    .SET   (2 & 01FH) / CELLL   
1FE8                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FE8                VVNAME:   .SET   $   
1FE8   7C 01 F4 1F            DW   vvCODE,vvLINK   
1FEC                VVLINK:   .SET   $   
1FEC   02 4F 52               DB   2,"OR"   
017C                          .ORG   vvCODE   
017C   E1                     POP   HL   
017D   78                     LD   A,B   
017E   B4                     OR   H   
017F   47                     LD   B,A   
0180   79                     LD   A,C   
0181   B5                     OR   L   
0182   4F                     LD   C,A   
0183                          ;*Macro unroll: 	mNEXT
0183   EB                     EX   DE,HL   
0184                          ;*Macro unroll:  mNEXTHL                         ; 34t
0184   FD E9                  JP   (IY)   ; 34t
0186                             ;   XOR         ( w w -- w )
0186                             ;               Bitwise exclusive
0186                          ;*Macro unroll: mCODE	3, 'XOR', XORR
0186                          ALIGN   2   
0186                XORR:        
0186                VVCODE:   .SET   $   
0186                VVLEN:    .SET   (3 & 01FH) / CELLL   
1FE0                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FE0                VVNAME:   .SET   $   
1FE0   86 01 EC 1F            DW   vvCODE,vvLINK   
1FE4                VVLINK:   .SET   $   
1FE4   03 58 4F 52            DB   3,"XOR"   
0186                          .ORG   vvCODE   
0186   E1                     POP   HL   
0187   78                     LD   A,B   
0188   AC                     XOR   H   
0189   47                     LD   B,A   
018A   79                     LD   A,C   
018B   AD                     XOR   L   
018C   4F                     LD   C,A   
018D                          ;*Macro unroll: 	mNEXT
018D   EB                     EX   DE,HL   
018E                          ;*Macro unroll:  mNEXTHL                         ; 34t
018E   FD E9                  JP   (IY)   ; 34t
0190                             ;   +           ( w w -- sum )
0190                             ;               Add top two items.
0190                          ;*Macro unroll: mCOLON	1,'+', PLUS
0190                          ;*Macro unroll:  mCODE 1, "+", PLUS
0190                          ALIGN   2   
0190                PLUS:        
0190                VVCODE:   .SET   $   
0190                VVLEN:    .SET   (1 & 01FH) / CELLL   
1FDA                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FDA                VVNAME:   .SET   $   
1FDA   90 01 E4 1F            DW   vvCODE,vvLINK   
1FDE                VVLINK:   .SET   $   
1FDE   01 2B                  DB   1,"+"   
0190                          .ORG   vvCODE   
0190   00                     NOP      
0191   CD 18 06               CALL   doLIST   
0194   68 02 26 10 4E 06      DW   UMPlus,DROP,EXIT   
019A                             ;   NOT         ( w -- w )
019A                             ;               One's complement of tos.
019A                          ;*Macro unroll: mCOLON  3, 'NOT', INVER
019A                          ;*Macro unroll:  mCODE 3, "NOT", INVER
019A                          ALIGN   2   
019A                INVER:       
019A                VVCODE:   .SET   $   
019A                VVLEN:    .SET   (3 & 01FH) / CELLL   
1FD2                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FD2                VVNAME:   .SET   $   
1FD2   9A 01 DE 1F            DW   vvCODE,vvLINK   
1FD6                VVLINK:   .SET   $   
1FD6   03 4E 4F 54            DB   3,"NOT"   
019A                          .ORG   vvCODE   
019A   00                     NOP      
019B   CD 18 06               CALL   doLIST   
019E   26 06 FF FF 86 01 4E 06 DW   DOLIT,-1,XORR,EXIT   
01A6                             ;   NEGAT      ( n -- -n )
01A6                             ;               Two's complement of tos.
01A6                          ;*Macro unroll: mCOLON	6,'NEGATE',NEGAT
01A6                          ;*Macro unroll:  mCODE 6, "NEGATE", NEGAT
01A6                          ALIGN   2   
01A6                NEGAT:       
01A6                VVCODE:   .SET   $   
01A6                VVLEN:    .SET   (6 & 01FH) / CELLL   
1FC6                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FC6                VVNAME:   .SET   $   
1FC6   A6 01 D6 1F            DW   vvCODE,vvLINK   
1FCA                VVLINK:   .SET   $   
1FCA   06 4E 45 47 41 54 45   DB   6,"NEGATE"   
01A6                          .ORG   vvCODE   
01A6   00                     NOP      
01A7   CD 18 06               CALL   doLIST   
01AA   9A 01 26 06 01 00 90 01 4E 06 DW   INVER,DOLIT,1,Plus,EXIT   
01B4                             ;   DNEGATE     ( d -- -d )
01B4                             ;               Two's complement of top double.
01B4                          ;*Macro unroll: mCOLON	7,'DNEGATE',DNEGA
01B4                          ;*Macro unroll:  mCODE 7, "DNEGATE", DNEGA
01B4                          ALIGN   2   
01B4                DNEGA:       
01B4                VVCODE:   .SET   $   
01B4                VVLEN:    .SET   (7 & 01FH) / CELLL   
1FBA                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FBA                VVNAME:   .SET   $   
1FBA   B4 01 CA 1F            DW   vvCODE,vvLINK   
1FBE                VVLINK:   .SET   $   
1FBE   07 44 4E 45 47 41 54 45 DB   7,"DNEGATE"   
01B4                          .ORG   vvCODE   
01B4   00                     NOP      
01B5   CD 18 06               CALL   doLIST   
01B8   9A 01 06 10 9A 01      DW   INVER,ToR,INVER   
01BE   26 06 01 00 68 02      DW   DOLIT,1,UMPlus   
01C4   14 10 90 01 4E 06      DW   RFrom,Plus,EXIT   
01CA                             ;   -           ( n1 n2 -- n1-n2 )
01CA                             ;               Subtraction.
01CA                          ;*Macro unroll: mCOLON	1, '-', SUBB
01CA                          ;*Macro unroll:  mCODE 1, "-", SUBB
01CA                          ALIGN   2   
01CA                SUBB:        
01CA                VVCODE:   .SET   $   
01CA                VVLEN:    .SET   (1 & 01FH) / CELLL   
1FB4                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FB4                VVNAME:   .SET   $   
1FB4   CA 01 BE 1F            DW   vvCODE,vvLINK   
1FB8                VVLINK:   .SET   $   
1FB8   01 2D                  DB   1,"-"   
01CA                          .ORG   vvCODE   
01CA   00                     NOP      
01CB   CD 18 06               CALL   doLIST   
01CE   A6 01 90 01 4E 06      DW   NEGAT,Plus,EXIT   
01D4                             ;   ABS         ( n -- n )
01D4                             ;               Return the absolute value of n.
01D4                          ;*Macro unroll: mCOLON	3,'ABS',ABSS
01D4                          ;*Macro unroll:  mCODE 3, "ABS", ABSS
01D4                          ALIGN   2   
01D4                ABSS:        
01D4                VVCODE:   .SET   $   
01D4                VVLEN:    .SET   (3 & 01FH) / CELLL   
1FAC                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FAC                VVNAME:   .SET   $   
1FAC   D4 01 B8 1F            DW   vvCODE,vvLINK   
1FB0                VVLINK:   .SET   $   
1FB0   03 41 42 53            DB   3,"ABS"   
01D4                          .ORG   vvCODE   
01D4   00                     NOP      
01D5   CD 18 06               CALL   doLIST   
01D8   22 10 6A 01 3A 0E E2 01 DW   DUPP,ZLESS,QBRAN,ABS1   
01E0   A6 01                  DW   NEGAT   
01E2                ABS1:        
01E2   4E 06                  DW   EXIT   
01E4                             ;   =           ( w w -- t )
01E4                             ;               Return true if top two are equal.
01E4                          ;*Macro unroll: mCOLON	1, '=', EQUAL
01E4                          ;*Macro unroll:  mCODE 1, "=", EQUAL
01E4                          ALIGN   2   
01E4                EQUAL:       
01E4                VVCODE:   .SET   $   
01E4                VVLEN:    .SET   (1 & 01FH) / CELLL   
1FA6                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FA6                VVNAME:   .SET   $   
1FA6   E4 01 B0 1F            DW   vvCODE,vvLINK   
1FAA                VVLINK:   .SET   $   
1FAA   01 3D                  DB   1,"="   
01E4                          .ORG   vvCODE   
01E4   00                     NOP      
01E5   CD 18 06               CALL   doLIST   
01E8   86 01                  DW   XORR   
01EA   3A 0E F4 01            DW   QBRAN,EQU1   
01EE   26 06 00 00 4E 06      DW   DOLIT,0,EXIT   ;false flag
01F4                EQU1:        
01F4   26 06 FF FF 4E 06      DW   DOLIT,-1,EXIT   ;true flag
01FA                             ;   U<          ( u u -- t )
01FA                             ;               Unsigned compare of top two items.
01FA                          ;*Macro unroll: mCOLON	2,'U<',ULESS
01FA                          ;*Macro unroll:  mCODE 2, "U<", ULESS
01FA                          ALIGN   2   
01FA                ULESS:       
01FA                VVCODE:   .SET   $   
01FA                VVLEN:    .SET   (2 & 01FH) / CELLL   
1F9E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F9E                VVNAME:   .SET   $   
1F9E   FA 01 AA 1F            DW   vvCODE,vvLINK   
1FA2                VVLINK:   .SET   $   
1FA2   02 55 3C               DB   2,"U<"   
01FA                          .ORG   vvCODE   
01FA   00                     NOP      
01FB   CD 18 06               CALL   doLIST   
01FE   60 10 86 01 6A 01      DW   DDUP,XORR,ZLESS   
0204   3A 0E 10 02            DW   QBRAN,ULES1   
0208   2A 10 26 10 6A 01 4E 06 DW   SWAP,DROP,ZLESS,EXIT   
0210                ULES1:       
0210   CA 01 6A 01 4E 06      DW   SUBB,ZLESS,EXIT   
0216                             ;   <           ( n1 n2 -- t )
0216                             ;               is less than
0216                          ;*Macro unroll: mCOLON	1,'<',LESS
0216                          ;*Macro unroll:  mCODE 1, "<", LESS
0216                          ALIGN   2   
0216                LESS:        
0216                VVCODE:   .SET   $   
0216                VVLEN:    .SET   (1 & 01FH) / CELLL   
1F98                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F98                VVNAME:   .SET   $   
1F98   16 02 A2 1F            DW   vvCODE,vvLINK   
1F9C                VVLINK:   .SET   $   
1F9C   01 3C                  DB   1,"<"   
0216                          .ORG   vvCODE   
0216   00                     NOP      
0217   CD 18 06               CALL   doLIST   
021A   60 10 86 01 6A 01 3A 0E 2A 02 DW   DDUP,XORR,ZLESS,QBRAN,LESS1   
0224   26 10 6A 01 4E 06      DW   DROP,ZLESS,EXIT   
022A                LESS1:       
022A   CA 01 6A 01 4E 06      DW   SUBB,ZLESS,EXIT   
0230                             ;   MAX         ( n n -- n )
0230                             ;               Return the greater of two top stack items.
0230                          ;*Macro unroll: mCOLON	3,'MAX',MAX
0230                          ;*Macro unroll:  mCODE 3, "MAX", MAX
0230                          ALIGN   2   
0230                MAX:         
0230                VVCODE:   .SET   $   
0230                VVLEN:    .SET   (3 & 01FH) / CELLL   
1F90                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F90                VVNAME:   .SET   $   
1F90   30 02 9C 1F            DW   vvCODE,vvLINK   
1F94                VVLINK:   .SET   $   
1F94   03 4D 41 58            DB   3,"MAX"   
0230                          .ORG   vvCODE   
0230   00                     NOP      
0231   CD 18 06               CALL   doLIST   
0234   60 10 16 02 3A 0E 3E 02 DW   DDUP,LESS,QBRAN,MAX1   
023C   2A 10                  DW   SWAP   
023E                MAX1:        
023E   26 10 4E 06            DW   DROP,EXIT   
0242                             ;   MIN         ( n n -- n )
0242                             ;               Return the smaller of top two stack items.
0242                          ;*Macro unroll: mCOLON	3,'MIN',MIN
0242                          ;*Macro unroll:  mCODE 3, "MIN", MIN
0242                          ALIGN   2   
0242                MIN:         
0242                VVCODE:   .SET   $   
0242                VVLEN:    .SET   (3 & 01FH) / CELLL   
1F88                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F88                VVNAME:   .SET   $   
1F88   42 02 94 1F            DW   vvCODE,vvLINK   
1F8C                VVLINK:   .SET   $   
1F8C   03 4D 49 4E            DB   3,"MIN"   
0242                          .ORG   vvCODE   
0242   00                     NOP      
0243   CD 18 06               CALL   doLIST   
0246   60 10 2A 10 16 02      DW   DDUP,SWAP,LESS   
024C   3A 0E 52 02            DW   QBRAN,MIN1   
0250   2A 10                  DW   SWAP   
0252                MIN1:        
0252   26 10 4E 06            DW   DROP,EXIT   
0256                             ;   WITHIN      ( u ul uh -- t )
0256                             ;               Return true if u is within the range of ul and uh.
0256                          ;*Macro unroll: mCOLON	6,'WITHIN',WITHI
0256                          ;*Macro unroll:  mCODE 6, "WITHIN", WITHI
0256                          ALIGN   2   
0256                WITHI:       
0256                VVCODE:   .SET   $   
0256                VVLEN:    .SET   (6 & 01FH) / CELLL   
1F7C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F7C                VVNAME:   .SET   $   
1F7C   56 02 8C 1F            DW   vvCODE,vvLINK   
1F80                VVLINK:   .SET   $   
1F80   06 57 49 54 48 49 4E   DB   6,"WITHIN"   
0256                          .ORG   vvCODE   
0256   00                     NOP      
0257   CD 18 06               CALL   doLIST   
025A   32 10 CA 01 06 10      DW   OVER,SUBB,ToR   ;ul <= u < uh
0260   CA 01 14 10 FA 01 4E 06 DW   SUBB,RFrom,ULess,EXIT   
0268                             ;   UM+         ( w w -- w cy )
0268                             ;               Add two numbers, return the sum and carry flag.
0268                          ;*Macro unroll: hCODE	3,'um+',UMPlus
0268                          ALIGN   2   
0268                UMPLUS:      
0268   E1                     POP   HL   ;10t
0269   09                     ADD   HL,BC   ;11t
026A   E5                     PUSH   HL   ;11t
026B   01 00 00               LD   BC,0   ;10t
026E   30 01                  JR   NC,UMP1   ;12/7t
0270                UMP2:        
0270   03                     INC   BC   ; 6t
0271                UMP1:        
0271                          ;*Macro unroll:  mNEXT
0271   EB                     EX   DE,HL   
0272                          ;*Macro unroll:  mNEXTHL                         ; 34t
0272   FD E9                  JP   (IY)   ; 34t
0274                             ; UM/MOD      ( udl udh u -- ur uq )
0274                             ; Unsigned divide of a double by a single. Return mod and quotient.
0274                             ; Note: Less range than eForth because most significant word discarded TODO: fix
0274                          ;*Macro unroll: mCOLON  6,'UM/MOD',UMMOD
0274                          ;*Macro unroll:  mCODE 6, "UM/MOD", UMMOD
0274                          ALIGN   2   
0274                UMMOD:       
0274                VVCODE:   .SET   $   
0274                VVLEN:    .SET   (6 & 01FH) / CELLL   
1F70                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F70                VVNAME:   .SET   $   
1F70   74 02 80 1F            DW   vvCODE,vvLINK   
1F74                VVLINK:   .SET   $   
1F74   06 55 4D 2F 4D 4F 44   DB   6,"UM/MOD"   
0274                          .ORG   vvCODE   
0274   00                     NOP      
0275   CD 18 06               CALL   doLIST   
0278   2A 10 26 10 80 02 4E 06 DW   SWAP,DROP,UMSLMOD2,EXIT   
0280                             ; UM/MOD2	( ud u1 -- u2 u3 )		
0280                             ; Unsigned division of a double-cell number ud by a single-cell
0280                             ; number u1. Return remainder u2 and quotient u3.
0280                             ; Note: Less range than eForth TODO: fix
0280                          ;*Macro unroll: mCODE	6,'UM/MOD2',UMSLMOD2
0280                          ALIGN   2   
0280                UMSLMOD2:      
0280                VVCODE:   .SET   $   
0280                VVLEN:    .SET   (6 & 01FH) / CELLL   
1F64                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F64                VVNAME:   .SET   $   
1F64   80 02 74 1F            DW   vvCODE,vvLINK   
1F68                VVLINK:   .SET   $   
1F68   06 55 4D 2F 4D 4F 44 32 DB   6,"UM/MOD2"   
0280                          .ORG   vvCODE   
0280   78                     LD   A,B   
0281   B1                     OR   C   
0282   28 25                  JR   Z,UMMOD2   ;?zero divisor
0284                UMMOD11:      
0284   C5                     PUSH   BC   
0285   D9                     EXX      
0286   C1                     POP   BC   
0287   E1                     POP   HL   
0288   D1                     POP   DE   
0289   7D                     LD   A,L   
028A   91                     SUB   C   
028B   7C                     LD   A,H   
028C   98                     SBC   A,B   
028D   30 20                  JR   NC,UMMOD1   ;?too big
028F                UMMOD12:      
028F   7C                     LD   A,H   
0290   65                     LD   H,L   
0291   6A                     LD   L,D   
0292   16 08                  LD   D,8   
0294   D5                     PUSH   DE   
0295   CD C3 02               CALL   UMMOD3   
0298   D1                     POP   DE   
0299   E5                     PUSH   HL   
029A   6B                     LD   L,E   
029B   CD C3 02               CALL   UMMOD3   
029E   57                     LD   D,A   
029F   5C                     LD   E,H   
02A0   C1                     POP   BC   
02A1   61                     LD   H,C   
02A2   D5                     PUSH   DE   
02A3   E5                     PUSH   HL   
02A4   D9                     EXX      
02A5   C1                     POP   BC   
02A6                          ;*Macro unroll: 	mNEXT
02A6   EB                     EX   DE,HL   
02A7                          ;*Macro unroll:  mNEXTHL                         ; 34t
02A7   FD E9                  JP   (IY)   ; 34t
02A9                UMMOD2:      
02A9   01 F2 0F               LD   BC,ERR_DIVZERO   ; divide by 0
02AC   C3 4E 0E               JP   THROWX   
02AF                UMMOD1:      
02AF   01 FA 0F               LD   BC,ERR_OUTOFRANGE   ; result out of range
02B2   C3 4E 0E               JP   THROWX   
02B5                UMMOD4:      
02B5   5F                     LD   E,A   
02B6   7C                     LD   A,H   
02B7   91                     SUB   C   
02B8   67                     LD   H,A   
02B9   7B                     LD   A,E   
02BA   98                     SBC   A,B   
02BB   30 10                  JR   NC,UMMOD5   
02BD                UMMOD13:      
02BD   7C                     LD   A,H   
02BE   81                     ADD   A,C   
02BF   67                     LD   H,A   
02C0   7B                     LD   A,E   
02C1   15                     DEC   D   
02C2   C8                     RET   Z   
02C3                UMMOD3:      
02C3   29                     ADD   HL,HL   
02C4   17                     RLA      
02C5   30 EE                  JR   NC,UMMOD4   
02C7                UMMOD14:      
02C7   5F                     LD   E,A   
02C8   7C                     LD   A,H   
02C9   91                     SUB   C   
02CA   67                     LD   H,A   
02CB   7B                     LD   A,E   
02CC   98                     SBC   A,B   
02CD                UMMOD5:      
02CD   2C                     INC   L   
02CE   15                     DEC   D   
02CF   20 F2                  JR   NZ,UMMOD3   
02D1                UMMOD15:      
02D1   C9                     RET      
02D2                             ;   FM/MOD	( d n1 -- n2 n3 )		\ CORE
02D2                             ;		Signed floored divide of double by single. Return mod n2
02D2                             ;		and quotient n3.
02D2                             ; TODO: this is usually called M/MOD in eForth
02D2                          ;*Macro unroll: mCOLON	6,'M/MOD',MSMOD
02D2                          ;*Macro unroll:  mCODE 6, "M/MOD", MSMOD
02D2                          ALIGN   2   
02D2                MSMOD:       
02D2                VVCODE:   .SET   $   
02D2                VVLEN:    .SET   (6 & 01FH) / CELLL   
1F58                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F58                VVNAME:   .SET   $   
1F58   D2 02 68 1F            DW   vvCODE,vvLINK   
1F5C                VVLINK:   .SET   $   
1F5C   06 4D 2F 4D 4F 44      DB   6,"M/MOD"   
02D2                          .ORG   vvCODE   
02D2   00                     NOP      
02D3   CD 18 06               CALL   doLIST   
02D6   22 10 6A 01 22 10 06 10 DW   DUPP,ZLESS,DUPP,TOR   
02DE   3A 0E EA 02            DW   QBRAN,MMOD1   
02E2   A6 01 06 10 B4 01 14 10 DW   NEGAT,TOR,DNEGA,RFROM   
02EA                MMOD1:       
02EA   06 10 22 10 6A 01      DW   TOR,DUPP,ZLESS   
02F0   3A 0E F8 02            DW   QBRAN,MMOD2   
02F4   78 0E 90 01            DW   RAT,PLUS   
02F8                MMOD2:       
02F8   14 10 74 02 14 10      DW   RFROM,UMMOD,RFROM   
02FE   3A 0E 08 03            DW   QBRAN,MMOD3   
0302   2A 10 A6 01 2A 10      DW   SWAP,NEGAT,SWAP   
0308                MMOD3:       
0308   4E 06                  DW   EXIT   
030A                             ;   /MOD        ( n n -- r q )
030A                             ;               Signed divide. Return mod and quotient.
030A                          ;*Macro unroll: mCOLON	4,'/MOD',SLMOD
030A                          ;*Macro unroll:  mCODE 4, "/MOD", SLMOD
030A                          ALIGN   2   
030A                SLMOD:       
030A                VVCODE:   .SET   $   
030A                VVLEN:    .SET   (4 & 01FH) / CELLL   
1F4E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F4E                VVNAME:   .SET   $   
1F4E   0A 03 5C 1F            DW   vvCODE,vvLINK   
1F52                VVLINK:   .SET   $   
1F52   04 2F 4D 4F 44         DB   4,"/MOD"   
030A                          .ORG   vvCODE   
030A   00                     NOP      
030B   CD 18 06               CALL   doLIST   
030E   32 10 6A 01 2A 10 D2 02 4E 06 DW   OVER,ZLESS,SWAP,MSMOD,EXIT   
0318                             ;   MOD         ( n n -- r )
0318                             ;               Signed divide. Return mod only.
0318                          ;*Macro unroll: mCOLON	3,'MOD',MODD
0318                          ;*Macro unroll:  mCODE 3, "MOD", MODD
0318                          ALIGN   2   
0318                MODD:        
0318                VVCODE:   .SET   $   
0318                VVLEN:    .SET   (3 & 01FH) / CELLL   
1F46                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F46                VVNAME:   .SET   $   
1F46   18 03 52 1F            DW   vvCODE,vvLINK   
1F4A                VVLINK:   .SET   $   
1F4A   03 4D 4F 44            DB   3,"MOD"   
0318                          .ORG   vvCODE   
0318   00                     NOP      
0319   CD 18 06               CALL   doLIST   
031C   0A 03 26 10 4E 06      DW   SLMOD,DROP,EXIT   
0322                             ; 
0322                             ;   /           ( n n -- q )
0322                             ;               Signed divide. Return quotient only.
0322                          ;*Macro unroll: mCOLON	1,'/',SLASH
0322                          ;*Macro unroll:  mCODE 1, "/", SLASH
0322                          ALIGN   2   
0322                SLASH:       
0322                VVCODE:   .SET   $   
0322                VVLEN:    .SET   (1 & 01FH) / CELLL   
1F40                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F40                VVNAME:   .SET   $   
1F40   22 03 4A 1F            DW   vvCODE,vvLINK   
1F44                VVLINK:   .SET   $   
1F44   01 2F                  DB   1,"/"   
0322                          .ORG   vvCODE   
0322   00                     NOP      
0323   CD 18 06               CALL   doLIST   
0326   0A 03 2A 10 26 10 4E 06 DW   SLMOD,SWAP,DROP,EXIT   
032E                             ; Multiply
032E                             ;   UM*         ( u u -- ud )
032E                             ;               Unsigned multiply. Return double product.
032E                          ;*Macro unroll: mCODE	3,'UM*',UMSTA
032E                          ALIGN   2   
032E                UMSTA:       
032E                VVCODE:   .SET   $   
032E                VVLEN:    .SET   (3 & 01FH) / CELLL   
1F38                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F38                VVNAME:   .SET   $   
1F38   2E 03 44 1F            DW   vvCODE,vvLINK   
1F3C                VVLINK:   .SET   $   
1F3C   03 55 4D 2A            DB   3,"UM*"   
032E                          .ORG   vvCODE   
032E   EB                     EX   DE,HL   
032F   E3                     EX   (SP),HL   
0330   EB                     EX   DE,HL   
0331   21 00 00               LD   HL,0   
0334   3E 10                  LD   A,010h   
0336                UMSTA1:      
0336   29                     ADD   HL,HL   
0337   EB                     EX   DE,HL   
0338   ED 6A                  ADC   HL,HL   
033A   EB                     EX   DE,HL   
033B   30 04                  JR   NC,UMSTA3   
033D                UMSTA2:      
033D   09                     ADD   HL,BC   
033E   30 01                  JR   NC,UMSTA3   
0340                UMSTA5:      
0340   13                     INC   DE   
0341                UMSTA3:      
0341   3D                     DEC   A   
0342   20 F2                  JR   NZ,UMSTA1   
0344                UMSTA4:      
0344   42                     LD   B,D   
0345   4B                     LD   C,E   
0346   E3                     EX   (SP),HL   
0347                          ;*Macro unroll: 	mNEXTHL
0347   FD E9                  JP   (IY)   
0349                             ;   *           ( n n -- n )
0349                             ;               Signed multiply. Return single product.
0349                          ;*Macro unroll: mCOLON	1,'*',STAR
0349                          ;*Macro unroll:  mCODE 1, "*", STAR
0349                          ALIGN   2   
034A                STAR:        
034A                VVCODE:   .SET   $   
034A                VVLEN:    .SET   (1 & 01FH) / CELLL   
1F32                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F32                VVNAME:   .SET   $   
1F32   4A 03 3C 1F            DW   vvCODE,vvLINK   
1F36                VVLINK:   .SET   $   
1F36   01 2A                  DB   1,"*"   
034A                          .ORG   vvCODE   
034A   00                     NOP      
034B   CD 18 06               CALL   doLIST   
034E   2E 03 26 10 4E 06      DW   UMSTA,DROP,EXIT   
0354                             ;   M*          ( n n -- d )
0354                             ;               Signed multiply. Return double product.
0354                          ;*Macro unroll: mCOLON	2,'M*',MSTAR,
0354                          ;*Macro unroll:  mCODE 2, "M*", MSTAR
0354                          ALIGN   2   
0354                MSTAR:       
0354                VVCODE:   .SET   $   
0354                VVLEN:    .SET   (2 & 01FH) / CELLL   
1F2A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F2A                VVNAME:   .SET   $   
1F2A   54 03 36 1F            DW   vvCODE,vvLINK   
1F2E                VVLINK:   .SET   $   
1F2E   02 4D 2A               DB   2,"M*"   
0354                          .ORG   vvCODE   
0354   00                     NOP      
0355   CD 18 06               CALL   doLIST   
0358   60 10 86 01 6A 01 06 10 D4 01 2A 10 D4 01 DW   DDUP,XORR,ZLESS,ToR,ABSS,SWAP,ABSS   
0366   2E 03 14 10 3A 0E 70 03 DW   UMSTA,RFrom,QBRAN,MSTAR1   
036E   B4 01                  DW   DNEGA   
0370                MSTAR1:      
0370   4E 06                  DW   EXIT   
0372                             ;   */MOD       ( n1 n2 n3 -- r q )
0372                             ;               Multiply n1 and n2, then divide by n3. Return mod and quotient.
0372                          ;*Macro unroll: mCOLON	5,'*/MOD',SSMOD
0372                          ;*Macro unroll:  mCODE 5, "*/MOD", SSMOD
0372                          ALIGN   2   
0372                SSMOD:       
0372                VVCODE:   .SET   $   
0372                VVLEN:    .SET   (5 & 01FH) / CELLL   
1F20                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F20                VVNAME:   .SET   $   
1F20   72 03 2E 1F            DW   vvCODE,vvLINK   
1F24                VVLINK:   .SET   $   
1F24   05 2A 2F 4D 4F 44      DB   5,"*/MOD"   
0372                          .ORG   vvCODE   
0372   00                     NOP      
0373   CD 18 06               CALL   doLIST   
0376   06 10 54 03 14 10 D2 02 4E 06 DW   ToR,MStar,RFrom,MSMOD,EXIT   
0380                             ;   */          ( n1 n2 n3 -- q )
0380                             ;               Multiply n1 by n2, then divide by n3. Return quotient only.
0380                          ;*Macro unroll: mCOLON	2,'*/',STASL
0380                          ;*Macro unroll:  mCODE 2, "*/", STASL
0380                          ALIGN   2   
0380                STASL:       
0380                VVCODE:   .SET   $   
0380                VVLEN:    .SET   (2 & 01FH) / CELLL   
1F18                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F18                VVNAME:   .SET   $   
1F18   80 03 24 1F            DW   vvCODE,vvLINK   
1F1C                VVLINK:   .SET   $   
1F1C   02 2A 2F               DB   2,"*/"   
0380                          .ORG   vvCODE   
0380   00                     NOP      
0381   CD 18 06               CALL   doLIST   
0384   72 03 2A 10 26 10 4E 06 DW   SSMOD,SWAP,DROP,EXIT   
038C                             ;   CELL+       ( a -- a )
038C                             ;               Add cell size in byte to address.
038C                          ;*Macro unroll: mCOLON	5,'CELL+',CELLP
038C                          ;*Macro unroll:  mCODE 5, "CELL+", CELLP
038C                          ALIGN   2   
038C                CELLP:       
038C                VVCODE:   .SET   $   
038C                VVLEN:    .SET   (5 & 01FH) / CELLL   
1F0E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F0E                VVNAME:   .SET   $   
1F0E   8C 03 1C 1F            DW   vvCODE,vvLINK   
1F12                VVLINK:   .SET   $   
1F12   05 43 45 4C 4C 2B      DB   5,"CELL+"   
038C                          .ORG   vvCODE   
038C   00                     NOP      
038D   CD 18 06               CALL   doLIST   
0390   26 06 02 00 90 01 4E 06 DW   DOLIT,CELLL,PLUS,EXIT   
0398                             ;   CELL-       ( a -- a )
0398                             ;               Subtract cell size in byte from address.
0398                          ;*Macro unroll: mCOLON	5,'CELL-',CELLM
0398                          ;*Macro unroll:  mCODE 5, "CELL-", CELLM
0398                          ALIGN   2   
0398                CELLM:       
0398                VVCODE:   .SET   $   
0398                VVLEN:    .SET   (5 & 01FH) / CELLL   
1F04                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F04                VVNAME:   .SET   $   
1F04   98 03 12 1F            DW   vvCODE,vvLINK   
1F08                VVLINK:   .SET   $   
1F08   05 43 45 4C 4C 2D      DB   5,"CELL-"   
0398                          .ORG   vvCODE   
0398   00                     NOP      
0399   CD 18 06               CALL   doLIST   
039C   26 06 FE FF 90 01 4E 06 DW   DOLIT,-CELLL,PLUS,EXIT   
03A4                             ;   CELLS       ( n -- n )
03A4                             ;               Multiply tos by cell size in bytes.
03A4                          ;*Macro unroll: mCOLON	5,'CELLS',CELLS
03A4                          ;*Macro unroll:  mCODE 5, "CELLS", CELLS
03A4                          ALIGN   2   
03A4                CELLS:       
03A4                VVCODE:   .SET   $   
03A4                VVLEN:    .SET   (5 & 01FH) / CELLL   
1EFA                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1EFA                VVNAME:   .SET   $   
1EFA   A4 03 08 1F            DW   vvCODE,vvLINK   
1EFE                VVLINK:   .SET   $   
1EFE   05 43 45 4C 4C 53      DB   5,"CELLS"   
03A4                          .ORG   vvCODE   
03A4   00                     NOP      
03A5   CD 18 06               CALL   doLIST   
03A8   26 06 02 00 4A 03 4E 06 DW   DOLIT,CELLL,STAR,EXIT   
03B0                             ;   '           ( -- ca )
03B0                             ;               Search context vocabularies for the next word in input stream.
03B0                          ;*Macro unroll: mCOLON  1,"'",TICK
03B0                          ;*Macro unroll:  mCODE 1, "'", TICK
03B0                          ALIGN   2   
03B0                TICK:        
03B0                VVCODE:   .SET   $   
03B0                VVLEN:    .SET   (1 & 01FH) / CELLL   
1EF4                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1EF4                VVNAME:   .SET   $   
1EF4   B0 03 FE 1E            DW   vvCODE,vvLINK   
1EF8                VVLINK:   .SET   $   
1EF8   01 27                  DB   1,"'"   
03B0                          .ORG   vvCODE   
03B0   00                     NOP      
03B1   CD 18 06               CALL   doLIST   
03B4   50 09 32 0A            DW   TOKEN,NAMEQ   ;?defined
03B8   3A 0E BE 03            DW   QBRAN,TICK1   
03BC   4E 06                  DW   EXIT   ;yes, push code address
03BE                TICK1:       
03BE   94 0A                  DW   THROW   ;no, error
03C0                             ;   ALLOT       ( n -- )
03C0                             ;               Allocate n bytes to the code dictionary.
03C0                          ;*Macro unroll: mCOLON  5,'ALLOT',ALLOT
03C0                          ;*Macro unroll:  mCODE 5, "ALLOT", ALLOT
03C0                          ALIGN   2   
03C0                ALLOT:       
03C0                VVCODE:   .SET   $   
03C0                VVLEN:    .SET   (5 & 01FH) / CELLL   
1EEA                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1EEA                VVNAME:   .SET   $   
1EEA   C0 03 F8 1E            DW   vvCODE,vvLINK   
1EEE                VVLINK:   .SET   $   
1EEE   05 41 4C 4C 4F 54      DB   5,"ALLOT"   
03C0                          .ORG   vvCODE   
03C0   00                     NOP      
03C1   CD 18 06               CALL   doLIST   
03C4   42 11 A4 0E 4E 06      DW   CP,PSTOR,EXIT   ;adjust code pointer
03CA                             ;   ,           ( w -- )
03CA                             ;               Compile an integer into the code dictionary.
03CA                          ;*Macro unroll: mCOLON  1,',',COMMA
03CA                          ;*Macro unroll:  mCODE 1, ",", COMMA
03CA                          ALIGN   2   
03CA                COMMA:       
03CA                VVCODE:   .SET   $   
03CA                VVLEN:    .SET   (1 & 01FH) / CELLL   
1EE4                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1EE4                VVNAME:   .SET   $   
1EE4   CA 03 EE 1E            DW   vvCODE,vvLINK   
1EE8                VVLINK:   .SET   $   
1EE8   01 2C                  DB   1,","   
03CA                          .ORG   vvCODE   
03CA   00                     NOP      
03CB   CD 18 06               CALL   doLIST   
03CE   E8 0E 22 10 8C 03      DW   HERE,DUPP,CELLP   ;cell boundary
03D4   42 11 56 0E 56 0E 4E 06 DW   CP,STORE,STORE,EXIT   ;adjust code pointer, compile
03DC                             ;   [COMPILE]   ( -- ; <string> )
03DC                             ;               Compile the next immediate word into code dictionary.
03DC                          ;*Macro unroll: mCOLON  IMEDD+9,'[COMPILE]',BCOMP
03DC                          ;*Macro unroll:  mCODE IMEDD+9, "[COMPILE]", BCOMP
03DC                          ALIGN   2   
03DC                BCOMP:       
03DC                VVCODE:   .SET   $   
03DC                VVLEN:    .SET   (IMEDD+9 & 01FH) / CELLL   
1E96                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1E96                VVNAME:   .SET   $   
1E96   DC 03 E8 1E            DW   vvCODE,vvLINK   
1E9A                VVLINK:   .SET   $   
1E9A   49 5B 43 4F 4D 50 49 4C 45 5D DB   IMEDD+9,"[COMPILE]"   
03DC                          .ORG   vvCODE   
03DC   00                     NOP      
03DD   CD 18 06               CALL   doLIST   
03E0   B0 03 CA 03 4E 06      DW   TICK,COMMA,EXIT   
03E6                             ;   COMPILE     ( -- )
03E6                             ;               Compile the next address in colon list to code dictionary.
03E6                          ;*Macro unroll: mCOLON  COMPO+7,'COMPILE',COMPI
03E6                          ;*Macro unroll:  mCODE COMPO+7, "COMPILE", COMPI
03E6                          ALIGN   2   
03E6                COMPI:       
03E6                VVCODE:   .SET   $   
03E6                VVLEN:    .SET   (COMPO+7 & 01FH) / CELLL   
1E6A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1E6A                VVNAME:   .SET   $   
1E6A   E6 03 9A 1E            DW   vvCODE,vvLINK   
1E6E                VVLINK:   .SET   $   
1E6E   27 43 4F 4D 50 49 4C 45 DB   COMPO+7,"COMPILE"   
03E6                          .ORG   vvCODE   
03E6   00                     NOP      
03E7   CD 18 06               CALL   doLIST   
03EA   14 10 22 10 60 0E CA 03 DW   RFROM,DUPP,AT,COMMA   ;compile address
03F2   8C 03 06 10 4E 06      DW   CELLP,TOR,EXIT   ;adjust return address
03F8                             ;   LITERAL     ( w -- )
03F8                             ;               Compile tos to code dictionary as an integer literal.
03F8                          ;*Macro unroll: mCOLON  IMEDD+7,'LITERAL',LITER
03F8                          ;*Macro unroll:  mCODE IMEDD+7, "LITERAL", LITER
03F8                          ALIGN   2   
03F8                LITER:       
03F8                VVCODE:   .SET   $   
03F8                VVLEN:    .SET   (IMEDD+7 & 01FH) / CELLL   
1E1E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1E1E                VVNAME:   .SET   $   
1E1E   F8 03 6E 1E            DW   vvCODE,vvLINK   
1E22                VVLINK:   .SET   $   
1E22   47 4C 49 54 45 52 41 4C DB   IMEDD+7,"LITERAL"   
03F8                          .ORG   vvCODE   
03F8   00                     NOP      
03F9   CD 18 06               CALL   doLIST   
03FC   E6 03 26 06 CA 03 4E 06 DW   COMPI,DOLIT,COMMA,EXIT   
0404                             ;   $,"         ( -- )
0404                             ;               Compile a literal string up to next " .
0404                          ;*Macro unroll: hCOLON  3,'$,|',STRCQ
0404                          ;*Macro unroll:  hCODE 3, "$,|", STRCQ
0404                          ALIGN   2   
0404                STRCQ:       
0404   00                     NOP      
0405   CD 18 06               CALL   doLIST   
0408   26 06 22 00 6C 09      DW   DOLIT,$22,WORDD   ;move string to code dictionary
040E   D6 0E 90 01 CE 0F      DW   COUNT,PLUS,ALGND   ;calculate aligned end of string
0414   42 11 56 0E 4E 06      DW   CP,STORE,EXIT   ;adjust the code pointer
041A                             ;   RECURSE     ( -- )
041A                             ;               Make the current word available for compilation.
041A                          ;*Macro unroll: mCOLON  IMEDD+7,'RECURSE',RECUR
041A                          ;*Macro unroll:  mCODE IMEDD+7, "RECURSE", RECUR
041A                          ALIGN   2   
041A                RECUR:       
041A                VVCODE:   .SET   $   
041A                VVLEN:    .SET   (IMEDD+7 & 01FH) / CELLL   
1DD2                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1DD2                VVNAME:   .SET   $   
1DD2   1A 04 22 1E            DW   vvCODE,vvLINK   
1DD6                VVLINK:   .SET   $   
1DD6   47 52 45 43 55 52 53 45 DB   IMEDD+7,"RECURSE"   
041A                          .ORG   vvCODE   
041A   00                     NOP      
041B   CD 18 06               CALL   doLIST   
041E   52 11 60 0E 78 09 CA 03 4E 06 DW   LAST,AT,NAMET,COMMA,EXIT   
0428                             ;   ?UNIQUE     ( a -- a )
0428                             ;               Display a warning message if the word already exists.
0428                          ;*Macro unroll: mCOLON  7,'?UNIQUE',UNIQU
0428                          ;*Macro unroll:  mCODE 7, "?UNIQUE", UNIQU
0428                          ALIGN   2   
0428                UNIQU:       
0428                VVCODE:   .SET   $   
0428                VVLEN:    .SET   (7 & 01FH) / CELLL   
1DC6                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1DC6                VVNAME:   .SET   $   
1DC6   28 04 D6 1D            DW   vvCODE,vvLINK   
1DCA                VVLINK:   .SET   $   
1DCA   07 3F 55 4E 49 51 55 45 DB   7,"?UNIQUE"   
0428                          .ORG   vvCODE   
0428   00                     NOP      
0429   CD 18 06               CALL   doLIST   
042C   22 10 32 0A            DW   DUPP,NAMEQ   ;?name exists
0430   3A 0E 44 04            DW   QBRAN,UNIQ1   ;redefinitions are OK
0434                          ;*Macro unroll:  mDSTR   DOTQP,' reDef '         ;but warn the user
0434   70 0C                  DW   DOTQP   ;but warn the user
0436                VVLEN:    .SET   $   
0436   00 20 72 65 44 65 66 20 DB   0," reDef "   
043E                VVCODE:   .SET   $   
0436                          .ORG   vvLEN   
0436   07                     DB   vvCODE - vvLEN - 1   
043E                          .ORG   vvCODE   
043E   32 10 D6 0E 16 0C      DW   OVER,COUNT,TYPEE   ;just in case its not planned
0444                UNIQ1:       
0444   26 10 4E 06            DW   DROP,EXIT   
0448                             ;   $,n         ( na -- )
0448                             ;               Build a new dictionary name using the string at na.
0448                          ;*Macro unroll: mCOLON  3,'$,n',SNAME
0448                          ;*Macro unroll:  mCODE 3, "$,n", SNAME
0448                          ALIGN   2   
0448                SNAME:       
0448                VVCODE:   .SET   $   
0448                VVLEN:    .SET   (3 & 01FH) / CELLL   
1DBE                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1DBE                VVNAME:   .SET   $   
1DBE   48 04 CA 1D            DW   vvCODE,vvLINK   
1DC2                VVLINK:   .SET   $   
1DC2   03 24 2C 6E            DB   3,"$,n"   
0448                          .ORG   vvCODE   
0448   00                     NOP      
0449   CD 18 06               CALL   doLIST   
044C   22 10 70 0E            DW   DUPP,CAT   ;?null input
0450   3A 0E 7A 04            DW   QBRAN,PNAM1   
0454   28 04                  DW   UNIQU   ;?redefinition
0456   22 10 52 11 56 0E      DW   DUPP,LAST,STORE   ;save na for vocabulary link
045C   E8 0E CE 0F 2A 10      DW   HERE,ALGND,SWAP   ;align code address
0462   98 03                  DW   CELLM   ;link address
0464   3A 11 60 0E 60 0E 32 10 56 0E DW   CRRNT,AT,AT,OVER,STORE   
046E   98 03 22 10 4A 11 56 0E DW   CELLM,DUPP,NP,STORE   ;adjust name pointer
0476   56 0E 4E 06            DW   STORE,EXIT   ;save code pointer
047A                PNAM1:       
047A                          ;*Macro unroll:  mDSTR   STRQP,' name'           ;null input
047A   68 0C                  DW   STRQP   ;null input
047C                VVLEN:    .SET   $   
047C   00 20 6E 61 6D 65      DB   0," name"   
0482                VVCODE:   .SET   $   
047C                          .ORG   vvLEN   
047C   05                     DB   vvCODE - vvLEN - 1   
0482                          .ORG   vvCODE   
0482   94 0A                  DW   THROW   
0484                             ;   $COMPILE    ( a -- )
0484                             ;               Compile next word to code dictionary as a token or literal.
0484                          ;*Macro unroll: hCOLON  8,'$COMPILE',SCOMP
0484                          ;*Macro unroll:  hCODE 8, "$COMPILE", SCOMP
0484                          ALIGN   2   
0484                SCOMP:       
0484   00                     NOP      
0485   CD 18 06               CALL   doLIST   
0488   32 0A 3A 10            DW   NAMEQ,QDUP   ;?defined
048C   3A 0E A4 04            DW   QBRAN,SCOM2   
0490   60 0E 26 06 40 00 72 01 DW   AT,DOLIT,IMEDD,ANDD   ;?immediate
0498   3A 0E A0 04            DW   QBRAN,SCOM1   
049C   36 0E 4E 06            DW   EXECU,EXIT   ;its immediate, execute
04A0                SCOM1:       
04A0   CA 03 4E 06            DW   COMMA,EXIT   ;its not immediate, compile
04A4                SCOM2:       
04A4   1A 11 0C 0F            DW   TNUMB,ATEXE   ;try to convert to number
04A8   3A 0E B0 04            DW   QBRAN,SCOM3   
04AC   F8 03 4E 06            DW   LITER,EXIT   ;compile number as integer
04B0   94 0A        SCOM3:    DW   THROW   ;error
04B2                             ;   OVERT       ( -- )
04B2                             ;               Link a new word into the current vocabulary.
04B2                          ;*Macro unroll: hCOLON  5,'OVERT',OVERT
04B2                          ;*Macro unroll:  hCODE 5, "OVERT", OVERT
04B2                          ALIGN   2   
04B2                OVERT:       
04B2   00                     NOP      
04B3   CD 18 06               CALL   doLIST   
04B6   52 11 60 0E 3A 11 60 0E 56 0E 4E 06 DW   LAST,AT,CRRNT,AT,STORE,EXIT   
04C2                             ;   ;           ( -- )
04C2                             ;               Terminate a colon definition.
04C2                          ;*Macro unroll: mCOLON  IMEDD+COMPO+1,';',SEMIS
04C2                          ;*Macro unroll:  mCODE IMEDD+COMPO+1, ";", SEMIS
04C2                          ALIGN   2   
04C2                SEMIS:       
04C2                VVCODE:   .SET   $   
04C2                VVLEN:    .SET   (IMEDD+COMPO+1 & 01FH) / CELLL   
1D58                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1D58                VVNAME:   .SET   $   
1D58   C2 04 C2 1D            DW   vvCODE,vvLINK   
1D5C                VVLINK:   .SET   $   
1D5C   61 3B                  DB   IMEDD+COMPO+1,";"   
04C2                          .ORG   vvCODE   
04C2   00                     NOP      
04C3   CD 18 06               CALL   doLIST   
04C6   E6 03 4E 06 0E 0B B2 04 4E 06 DW   COMPI,EXIT,LBRAC,OVERT,EXIT   
04D0                             ;   ]           ( -- )
04D0                             ;               Start compiling the words in the input stream.
04D0                          ;*Macro unroll: mCOLON  1,']',RBRAC
04D0                          ;*Macro unroll:  mCODE 1, "]", RBRAC
04D0                          ALIGN   2   
04D0                RBRAC:       
04D0                VVCODE:   .SET   $   
04D0                VVLEN:    .SET   (1 & 01FH) / CELLL   
1D52                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1D52                VVNAME:   .SET   $   
1D52   D0 04 5C 1D            DW   vvCODE,vvLINK   
1D56                VVLINK:   .SET   $   
1D56   01 5D                  DB   1,"]"   
04D0                          .ORG   vvCODE   
04D0   00                     NOP      
04D1   CD 18 06               CALL   doLIST   
04D4   26 06 84 04 12 11 56 0E 4E 06 DW   DOLIT,SCOMP,TEVAL,STORE,EXIT   
04DE                             ;   call,       ( ca -- )
04DE                             ;               Assemble a call instruction to ca.
04DE                          ;*Macro unroll: hCOLON  5,'call,',CALLC
04DE                          ;*Macro unroll:  hCODE 5, "call,", CALLC
04DE                          ALIGN   2   
04DE                CALLC:       
04DE   00                     NOP      
04DF   CD 18 06               CALL   doLIST   
04E2   26 06 00 CD CA 03      DW   DOLIT,CALLL,COMMA   ;Direct Threaded Code
04E8   CA 03 4E 06            DW   COMMA,EXIT   ;DTC 8086 relative call
04EC                             ;   :           ( -- ; <string> )
04EC                             ;               Start a new colon definition using next word as its name.
04EC                          ;*Macro unroll: mCOLON  1,':',COLON
04EC                          ;*Macro unroll:  mCODE 1, ":", COLON
04EC                          ALIGN   2   
04EC                COLON:       
04EC                VVCODE:   .SET   $   
04EC                VVLEN:    .SET   (1 & 01FH) / CELLL   
1D4C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1D4C                VVNAME:   .SET   $   
1D4C   EC 04 56 1D            DW   vvCODE,vvLINK   
1D50                VVLINK:   .SET   $   
1D50   01 3A                  DB   1,":"   
04EC                          .ORG   vvCODE   
04EC   00                     NOP      
04ED   CD 18 06               CALL   doLIST   
04F0   50 09 48 04 26 06 18 06 DW   TOKEN,SNAME,DOLIT,DoLIST   
04F8   DE 04 D0 04 4E 06      DW   CALLC,RBRAC,EXIT   
04FE                             ;   IMMEDIATE   ( -- )
04FE                             ;               Make the last compiled word an immediate word.
04FE                          ;*Macro unroll: mCOLON  9,'IMMEDIATE',IMMED
04FE                          ;*Macro unroll:  mCODE 9, "IMMEDIATE", IMMED
04FE                          ALIGN   2   
04FE                IMMED:       
04FE                VVCODE:   .SET   $   
04FE                VVLEN:    .SET   (9 & 01FH) / CELLL   
1D3E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1D3E                VVNAME:   .SET   $   
1D3E   FE 04 50 1D            DW   vvCODE,vvLINK   
1D42                VVLINK:   .SET   $   
1D42   09 49 4D 4D 45 44 49 41 54 45 DB   9,"IMMEDIATE"   
04FE                          .ORG   vvCODE   
04FE   00                     NOP      
04FF   CD 18 06               CALL   doLIST   
0502   26 06 40 00 52 11 60 0E 60 0E 7C 01 DW   DOLIT,IMEDD,LAST,AT,AT,ORR   
050E   52 11 60 0E 56 0E 4E 06 DW   LAST,AT,STORE,EXIT   
0516                             ;   USER        ( u -- ; <string> )
0516                             ;               Compile a new user variable.
0516                          ;*Macro unroll: mCOLON  4,'USER',USER
0516                          ;*Macro unroll:  mCODE 4, "USER", USER
0516                          ALIGN   2   
0516                USER:        
0516                VVCODE:   .SET   $   
0516                VVLEN:    .SET   (4 & 01FH) / CELLL   
1D34                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1D34                VVNAME:   .SET   $   
1D34   16 05 42 1D            DW   vvCODE,vvLINK   
1D38                VVLINK:   .SET   $   
1D38   04 55 53 45 52         DB   4,"USER"   
0516                          .ORG   vvCODE   
0516   00                     NOP      
0517   CD 18 06               CALL   doLIST   
051A   50 09 48 04 B2 04      DW   TOKEN,SNAME,OVERT   
0520   26 06 18 06 DE 04      DW   DOLIT,DoLIST,CALLC   
0526   E6 03 3E 06 CA 03 4E 06 DW   COMPI,DOUSE,COMMA,EXIT   
052E                             ;   CREATE      ( -- ; <string> )
052E                             ;               Compile a new array entry without allocating code space.
052E                          ;*Macro unroll: mCOLON  6,'CREATE',CREAT
052E                          ;*Macro unroll:  mCODE 6, "CREATE", CREAT
052E                          ALIGN   2   
052E                CREAT:       
052E                VVCODE:   .SET   $   
052E                VVLEN:    .SET   (6 & 01FH) / CELLL   
1D28                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1D28                VVNAME:   .SET   $   
1D28   2E 05 38 1D            DW   vvCODE,vvLINK   
1D2C                VVLINK:   .SET   $   
1D2C   06 43 52 45 41 54 45   DB   6,"CREATE"   
052E                          .ORG   vvCODE   
052E   00                     NOP      
052F   CD 18 06               CALL   doLIST   
0532   50 09 48 04 B2 04      DW   TOKEN,SNAME,OVERT   
0538   26 06 18 06 DE 04      DW   DOLIT,DoLIST,CALLC   
053E   E6 03 2E 06 4E 06      DW   COMPI,DOVAR,EXIT   
0544                             ;   VARIABLE    ( -- ; <string> )
0544                             ;               Compile a new variable initialized to 0.
0544                          ;*Macro unroll: mCOLON  8,'VARIABLE',VARIA
0544                          ;*Macro unroll:  mCODE 8, "VARIABLE", VARIA
0544                          ALIGN   2   
0544                VARIA:       
0544                VVCODE:   .SET   $   
0544                VVLEN:    .SET   (8 & 01FH) / CELLL   
1D1A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1D1A                VVNAME:   .SET   $   
1D1A   44 05 2C 1D            DW   vvCODE,vvLINK   
1D1E                VVLINK:   .SET   $   
1D1E   08 56 41 52 49 41 42 4C 45 DB   8,"VARIABLE"   
0544                          .ORG   vvCODE   
0544   00                     NOP      
0545   CD 18 06               CALL   doLIST   
0548   2E 05 26 06 00 00 CA 03 4E 06 DW   CREAT,DOLIT,0,COMMA,EXIT   
0552                             ;   FOR         ( -- a )
0552                             ;               Start a FOR-NEXT loop structure in a colon definition.
0552                          ;*Macro unroll: mCOLON  IMEDD+3,'FOR',FOR
0552                          ;*Macro unroll:  mCODE IMEDD+3, "FOR", FOR
0552                          ALIGN   2   
0552                FOR:         
0552                VVCODE:   .SET   $   
0552                VVLEN:    .SET   (IMEDD+3 & 01FH) / CELLL   
1CD2                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1CD2                VVNAME:   .SET   $   
1CD2   52 05 1E 1D            DW   vvCODE,vvLINK   
1CD6                VVLINK:   .SET   $   
1CD6   43 46 4F 52            DB   IMEDD+3,"FOR"   
0552                          .ORG   vvCODE   
0552   00                     NOP      
0553   CD 18 06               CALL   doLIST   
0556   E6 03 06 10 E8 0E 4E 06 DW   COMPI,TOR,HERE,EXIT   
055E                             ;   BEGIN       ( -- a )
055E                             ;               Start an infinite or indefinite loop structure.
055E                          ;*Macro unroll: mCOLON  IMEDD+5,'BEGIN',BEGIN
055E                          ;*Macro unroll:  mCODE IMEDD+5, "BEGIN", BEGIN
055E                          ALIGN   2   
055E                BEGIN:       
055E                VVCODE:   .SET   $   
055E                VVLEN:    .SET   (IMEDD+5 & 01FH) / CELLL   
1C88                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1C88                VVNAME:   .SET   $   
1C88   5E 05 D6 1C            DW   vvCODE,vvLINK   
1C8C                VVLINK:   .SET   $   
1C8C   45 42 45 47 49 4E      DB   IMEDD+5,"BEGIN"   
055E                          .ORG   vvCODE   
055E   00                     NOP      
055F   CD 18 06               CALL   doLIST   
0562   E8 0E 4E 06            DW   HERE,EXIT   
0566                             ;   NEXT        ( a -- )
0566                             ;               Terminate a FOR-NEXT loop structure.
0566                          ;*Macro unroll: mCOLON  IMEDD+4,'NEXT',NEXT
0566                          ;*Macro unroll:  mCODE IMEDD+4, "NEXT", NEXT
0566                          ALIGN   2   
0566                NEXT:        
0566                VVCODE:   .SET   $   
0566                VVLEN:    .SET   (IMEDD+4 & 01FH) / CELLL   
1C3E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1C3E                VVNAME:   .SET   $   
1C3E   66 05 8C 1C            DW   vvCODE,vvLINK   
1C42                VVLINK:   .SET   $   
1C42   44 4E 45 58 54         DB   IMEDD+4,"NEXT"   
0566                          .ORG   vvCODE   
0566   00                     NOP      
0567   CD 18 06               CALL   doLIST   
056A   E6 03 7C 06 CA 03 4E 06 DW   COMPI,DONXT,COMMA,EXIT   
0572                             ;   UNTIL       ( a -- )
0572                             ;               Terminate a BEGIN-UNTIL indefinite loop structure.
0572                          ;*Macro unroll: mCOLON  IMEDD+5,'UNTIL',UNTIL
0572                          ;*Macro unroll:  mCODE IMEDD+5, "UNTIL", UNTIL
0572                          ALIGN   2   
0572                UNTIL:       
0572                VVCODE:   .SET   $   
0572                VVLEN:    .SET   (IMEDD+5 & 01FH) / CELLL   
1BF4                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1BF4                VVNAME:   .SET   $   
1BF4   72 05 42 1C            DW   vvCODE,vvLINK   
1BF8                VVLINK:   .SET   $   
1BF8   45 55 4E 54 49 4C      DB   IMEDD+5,"UNTIL"   
0572                          .ORG   vvCODE   
0572   00                     NOP      
0573   CD 18 06               CALL   doLIST   
0576   E6 03 3A 0E CA 03 4E 06 DW   COMPI,QBRAN,COMMA,EXIT   
057E                             ;   AGAIN       ( a -- )
057E                             ;               Terminate a BEGIN-AGAIN infinite loop structure.
057E                          ;*Macro unroll: mCOLON  IMEDD+5,'AGAIN',AGAIN
057E                          ;*Macro unroll:  mCODE IMEDD+5, "AGAIN", AGAIN
057E                          ALIGN   2   
057E                AGAIN:       
057E                VVCODE:   .SET   $   
057E                VVLEN:    .SET   (IMEDD+5 & 01FH) / CELLL   
1BAA                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1BAA                VVNAME:   .SET   $   
1BAA   7E 05 F8 1B            DW   vvCODE,vvLINK   
1BAE                VVLINK:   .SET   $   
1BAE   45 41 47 41 49 4E      DB   IMEDD+5,"AGAIN"   
057E                          .ORG   vvCODE   
057E   00                     NOP      
057F   CD 18 06               CALL   doLIST   
0582   E6 03 46 0E CA 03 4E 06 DW   COMPI,BRAN,COMMA,EXIT   
058A                             ;   IF          ( -- A )
058A                             ;               Begin a conditional branch structure.
058A                          ;*Macro unroll: mCOLON  IMEDD+2,'IF',IFF
058A                          ;*Macro unroll:  mCODE IMEDD+2, "IF", IFF
058A                          ALIGN   2   
058A                IFF:         
058A                VVCODE:   .SET   $   
058A                VVLEN:    .SET   (IMEDD+2 & 01FH) / CELLL   
1B62                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1B62                VVNAME:   .SET   $   
1B62   8A 05 AE 1B            DW   vvCODE,vvLINK   
1B66                VVLINK:   .SET   $   
1B66   42 49 46               DB   IMEDD+2,"IF"   
058A                          .ORG   vvCODE   
058A   00                     NOP      
058B   CD 18 06               CALL   doLIST   
058E   E6 03 3A 0E E8 0E      DW   COMPI,QBRAN,HERE   
0594   26 06 00 00 CA 03 4E 06 DW   DOLIT,0,COMMA,EXIT   
059C                             ;   AHEAD       ( -- A )
059C                             ;               Compile a forward branch instruction.
059C                          ;*Macro unroll: mCOLON  IMEDD+5,'AHEAD',AHEAD
059C                          ;*Macro unroll:  mCODE IMEDD+5, "AHEAD", AHEAD
059C                          ALIGN   2   
059C                AHEAD:       
059C                VVCODE:   .SET   $   
059C                VVLEN:    .SET   (IMEDD+5 & 01FH) / CELLL   
1B18                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1B18                VVNAME:   .SET   $   
1B18   9C 05 66 1B            DW   vvCODE,vvLINK   
1B1C                VVLINK:   .SET   $   
1B1C   45 41 48 45 41 44      DB   IMEDD+5,"AHEAD"   
059C                          .ORG   vvCODE   
059C   00                     NOP      
059D   CD 18 06               CALL   doLIST   
05A0   E6 03 46 0E E8 0E 26 06 00 00 CA 03 4E 06 DW   COMPI,BRAN,HERE,DOLIT,0,COMMA,EXIT   
05AE                             ;   REPEAT      ( A a -- )
05AE                             ;               Terminate a BEGIN-WHILE-REPEAT indefinite loop.
05AE                          ;*Macro unroll: mCOLON  IMEDD+6,'REPEAT',REPEA
05AE                          ;*Macro unroll:  mCODE IMEDD+6, "REPEAT", REPEA
05AE                          ALIGN   2   
05AE                REPEA:       
05AE                VVCODE:   .SET   $   
05AE                VVLEN:    .SET   (IMEDD+6 & 01FH) / CELLL   
1ACC                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1ACC                VVNAME:   .SET   $   
1ACC   AE 05 1C 1B            DW   vvCODE,vvLINK   
1AD0                VVLINK:   .SET   $   
1AD0   46 52 45 50 45 41 54   DB   IMEDD+6,"REPEAT"   
05AE                          .ORG   vvCODE   
05AE   00                     NOP      
05AF   CD 18 06               CALL   doLIST   
05B2   7E 05 E8 0E 2A 10 56 0E 4E 06 DW   AGAIN,HERE,SWAP,STORE,EXIT   
05BC                             ;   THEN        ( A -- )
05BC                             ;               Terminate a conditional branch structure.
05BC                          ;*Macro unroll: mCOLON  IMEDD+4,'THEN',THENN
05BC                          ;*Macro unroll:  mCODE IMEDD+4, "THEN", THENN
05BC                          ALIGN   2   
05BC                THENN:       
05BC                VVCODE:   .SET   $   
05BC                VVLEN:    .SET   (IMEDD+4 & 01FH) / CELLL   
1A82                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1A82                VVNAME:   .SET   $   
1A82   BC 05 D0 1A            DW   vvCODE,vvLINK   
1A86                VVLINK:   .SET   $   
1A86   44 54 48 45 4E         DB   IMEDD+4,"THEN"   
05BC                          .ORG   vvCODE   
05BC   00                     NOP      
05BD   CD 18 06               CALL   doLIST   
05C0   E8 0E 2A 10 56 0E 4E 06 DW   HERE,SWAP,STORE,EXIT   
05C8                             ;   AFT         ( a -- a A )
05C8                             ;               Jump to THEN in a FOR-AFT-THEN-NEXT loop the 1st time through.
05C8                          ;*Macro unroll: mCOLON  IMEDD+3,'AFT',AFT
05C8                          ;*Macro unroll:  mCODE IMEDD+3, "AFT", AFT
05C8                          ALIGN   2   
05C8                AFT:         
05C8                VVCODE:   .SET   $   
05C8                VVLEN:    .SET   (IMEDD+3 & 01FH) / CELLL   
1A3A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1A3A                VVNAME:   .SET   $   
1A3A   C8 05 86 1A            DW   vvCODE,vvLINK   
1A3E                VVLINK:   .SET   $   
1A3E   43 41 46 54            DB   IMEDD+3,"AFT"   
05C8                          .ORG   vvCODE   
05C8   00                     NOP      
05C9   CD 18 06               CALL   doLIST   
05CC   26 10 9C 05 5E 05 2A 10 4E 06 DW   DROP,AHEAD,BEGIN,SWAP,EXIT   
05D6                             ;   ELSE        ( A -- A )
05D6                             ;               Start the false clause in an IF-ELSE-THEN structure.
05D6                          ;*Macro unroll: mCOLON  IMEDD+4,'ELSE',ELSEE
05D6                          ;*Macro unroll:  mCODE IMEDD+4, "ELSE", ELSEE
05D6                          ALIGN   2   
05D6                ELSEE:       
05D6                VVCODE:   .SET   $   
05D6                VVLEN:    .SET   (IMEDD+4 & 01FH) / CELLL   
19F0                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
19F0                VVNAME:   .SET   $   
19F0   D6 05 3E 1A            DW   vvCODE,vvLINK   
19F4                VVLINK:   .SET   $   
19F4   44 45 4C 53 45         DB   IMEDD+4,"ELSE"   
05D6                          .ORG   vvCODE   
05D6   00                     NOP      
05D7   CD 18 06               CALL   doLIST   
05DA   9C 05 2A 10 BC 05 4E 06 DW   AHEAD,SWAP,THENN,EXIT   
05E2                             ;   WHILE       ( a -- A a )
05E2                             ;               Conditional branch out of a BEGIN-WHILE-REPEAT loop.
05E2                          ;*Macro unroll: mCOLON  IMEDD+5,'WHILE',WHILE
05E2                          ;*Macro unroll:  mCODE IMEDD+5, "WHILE", WHILE
05E2                          ALIGN   2   
05E2                WHILE:       
05E2                VVCODE:   .SET   $   
05E2                VVLEN:    .SET   (IMEDD+5 & 01FH) / CELLL   
19A6                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
19A6                VVNAME:   .SET   $   
19A6   E2 05 F4 19            DW   vvCODE,vvLINK   
19AA                VVLINK:   .SET   $   
19AA   45 57 48 49 4C 45      DB   IMEDD+5,"WHILE"   
05E2                          .ORG   vvCODE   
05E2   00                     NOP      
05E3   CD 18 06               CALL   doLIST   
05E6   8A 05 2A 10 4E 06      DW   IFF,SWAP,EXIT   
05EC                             ;   ABORT"      ( -- ; <string> )
05EC                             ;               Conditional abort with an error message.
05EC                          ;*Macro unroll: mCOLON  IMEDD+6,'ABORT|',ABRTQ
05EC                          ;*Macro unroll:  mCODE IMEDD+6, "ABORT|", ABRTQ
05EC                          ALIGN   2   
05EC                ABRTQ:       
05EC                VVCODE:   .SET   $   
05EC                VVLEN:    .SET   (IMEDD+6 & 01FH) / CELLL   
195A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
195A                VVNAME:   .SET   $   
195A   EC 05 AA 19            DW   vvCODE,vvLINK   
195E                VVLINK:   .SET   $   
195E   46 41 42 4F 52 54 7C   DB   IMEDD+6,"ABORT|"   
05EC                          .ORG   vvCODE   
05EC   00                     NOP      
05ED   CD 18 06               CALL   doLIST   
05F0   E6 03 C8 0A 04 04 4E 06 DW   COMPI,ABORQ,STRCQ,EXIT   
05F8                             ;   $"          ( -- ; <string> )
05F8                             ;               Compile an inline string literal.
05F8                          ;*Macro unroll: mCOLON  IMEDD+2,'$|',STRQ
05F8                          ;*Macro unroll:  mCODE IMEDD+2, "$|", STRQ
05F8                          ALIGN   2   
05F8                STRQ:        
05F8                VVCODE:   .SET   $   
05F8                VVLEN:    .SET   (IMEDD+2 & 01FH) / CELLL   
1912                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1912                VVNAME:   .SET   $   
1912   F8 05 5E 19            DW   vvCODE,vvLINK   
1916                VVLINK:   .SET   $   
1916   42 24 7C               DB   IMEDD+2,"$|"   
05F8                          .ORG   vvCODE   
05F8   00                     NOP      
05F9   CD 18 06               CALL   doLIST   
05FC   E6 03 68 0C 04 04 4E 06 DW   COMPI,STRQP,STRCQ,EXIT   
0604                             ;   ."          ( -- ; <string> )
0604                             ;               Compile an inline string literal to be typed out at run time.
0604                          ;*Macro unroll: mCOLON  IMEDD+2,'.|',DOTQ
0604                          ;*Macro unroll:  mCODE IMEDD+2, ".|", DOTQ
0604                          ALIGN   2   
0604                DOTQ:        
0604                VVCODE:   .SET   $   
0604                VVLEN:    .SET   (IMEDD+2 & 01FH) / CELLL   
18CA                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
18CA                VVNAME:   .SET   $   
18CA   04 06 16 19            DW   vvCODE,vvLINK   
18CE                VVLINK:   .SET   $   
18CE   42 2E 7C               DB   IMEDD+2,".|"   
0604                          .ORG   vvCODE   
0604   00                     NOP      
0605   CD 18 06               CALL   doLIST   
0608   E6 03 70 0C 04 04 4E 06 DW   COMPI,DOTQP,STRCQ,EXIT   
0610                             ; ;   UNLOOP	( -- ) ( R: loop-sys -- )	\ CORE
0610                             ; ;		Discard loop-control parameters for the current nesting level.
0610                             ; ;		An UNLOOP is required for each nesting level before the
0610                             ; ;		definition may be EXITed.
0610                             ; mCOLON	COMPO+6,"UNLOOP",UNLOOP
0610                             ; 	DW	RFrom,RFrom,RFrom,DDROP,ToR,EXIT
0610                             ;   doCONST	( -- x )
0610                             ;	Run-time routine of CONSTANT and VARIABLE.
0610                          ;*Macro unroll: hCODE	COMPO+7, 'doCONST', DoCONST
0610                          ALIGN   2   
0610                DOCONST:      
0610   E1                     POP   HL   ;10t
0611   C5                     PUSH   BC   ;11t
0612   4E                     LD   C,(HL)   ; 7t
0613   23                     INC   HL   ; 6t
0614   46                     LD   B,(HL)   ; 7t
0615                          ;*Macro unroll:  mNEXT
0615   EB                     EX   DE,HL   
0616                          ;*Macro unroll:  mNEXTHL                         ; 34t
0616   FD E9                  JP   (IY)   ; 34t
0618                             ;   doLIST	( -- ) ( R: -- nest-sys )
0618                             ;	Process colon list.
0618                          ;*Macro unroll: hCODE	COMPO+6, 'doLIST', DoLIST
0618                          ALIGN   2   
0618                DOLIST:      
0618   DD 2B                  DEC   IX   ;10t
061A   DD 72 00               LD   (IX+0),D   ;19t
061D   DD 2B                  DEC   IX   ;10t
061F   DD 73 00               LD   (IX+0),E   ;19t
0622   E1                     POP   HL   ;10t
0623                          ;*Macro unroll:  mNEXTHL							
0623   FD E9                  JP   (IY)   
0625                             ;   DOLIT	( -- x )
0625                             ;	Push an inline literal.
0625                          ;*Macro unroll: hCODE	COMPO+5, 'DOLIT', DOLIT
0625                          ALIGN   2   
0626                DOLIT:       
0626   C5                     PUSH   BC   ; 11t
0627   EB                     EX   DE,HL   ; 4t
0628   4E                     LD   C,(HL)   ; 7t
0629   23                     INC   HL   ; 6t
062A   46                     LD   B,(HL)   ; 7t
062B   23                     INC   HL   ; 6t
062C                          ;*Macro unroll:  mNEXTHL
062C   FD E9                  JP   (IY)   
062E                             ;   doVAR       ( -- a )
062E                             ;   Run time routine for VARIABLE and CREATE.
062E                          ;*Macro unroll: hCOLON  COMPO+5, 'doVAR', DoVAR
062E                          ;*Macro unroll:  hCODE COMPO+5, "doVAR", DoVAR
062E                          ALIGN   2   
062E                DOVAR:       
062E   00                     NOP      
062F   CD 18 06               CALL   doLIST   
0632   14 10 4E 06            DW   RFROM,EXIT   
0636                             ;   UP          ( -- a )
0636                             ;   Pointer to the user area.
0636                          ;*Macro unroll: hCOLON  2, 'UP', UP
0636                          ;*Macro unroll:  hCODE 2, "UP", UP
0636                          ALIGN   2   
0636                UP:          
0636   00                     NOP      
0637   CD 18 06               CALL   doLIST   
063A   2E 06                  DW   DoVAR   
063C   00 24                  DW   UPP   
063E                             ;   doUSER      ( -- a )
063E                             ;   Run time routine for user variables.
063E                          ;*Macro unroll: hCOLON  COMPO+6,'doUSER',DOUSE
063E                          ;*Macro unroll:  hCODE COMPO+6, "doUSER", DOUSE
063E                          ALIGN   2   
063E                DOUSE:       
063E   00                     NOP      
063F   CD 18 06               CALL   doLIST   
0642   14 10 60 0E 36 06 60 0E 90 01 4E 06 DW   RFROM,AT,UP,AT,PLUS,EXIT   
064E                             ;   EXIT	( -- ) ( R: nest-sys -- )	\ CORE
064E                             ;	Return control to the calling definition.
064E                          ;*Macro unroll: mCODE	COMPO+4, 'EXIT', EXIT
064E                          ALIGN   2   
064E                EXIT:        
064E                VVCODE:   .SET   $   
064E                VVLEN:    .SET   (COMPO+4 & 01FH) / CELLL   
18A0                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
18A0                VVNAME:   .SET   $   
18A0   4E 06 CE 18            DW   vvCODE,vvLINK   
18A4                VVLINK:   .SET   $   
18A4   24 45 58 49 54         DB   COMPO+4,"EXIT"   
064E                          .ORG   vvCODE   
064E   DD 6E 00               LD   L,(IX+0)   
0651   DD 23                  INC   IX   
0653   DD 66 00               LD   H,(IX+0)   
0656   DD 23                  INC   IX   
0658                          ;*Macro unroll:  mNEXTHL
0658   FD E9                  JP   (IY)   
065A                             ;   doDO	( n1|u1 n2|u2 -- ) ( R: -- n1 n2-n1-max_negative )
065A                             ;		Run-time funtion of DO.
065A                             ; 
065A                             ;   : doDO	>R max-negative + R> OVER - SWAP R> SWAP >R SWAP >R >R ;
065A                          ;*Macro unroll: hCOLON	COMPO+4,'doDO',DoDO
065A                          ;*Macro unroll:  hCODE COMPO+4, "doDO", DoDO
065A                          ALIGN   2   
065A                DODO:        
065A   00                     NOP      
065B   CD 18 06               CALL   doLIST   
065E   06 10 26 06 00 80 90 01 14 10 DW   ToR,DOLIT,MaxNegative,Plus,RFrom   
0668   32 10 CA 01 2A 10 14 10 2A 10 06 10 2A 10 06 10 06 10 4E 06 DW   OVER,SUBB,SWAP,RFrom,SWAP,ToR,SWAP,ToR,ToR,EXIT   
067C                             ; ;   doLOOP	( -- ) ( R: loop-sys1 -- | loop-sys2 )
067C                             ; ;		Run time routine for LOOP.
067C                             ; hCODE	COMPO+6,"doLOOP",DoLOOP
067C                             ; 	PUSH IX	        ; 15t
067C                             ; 	POP	HL	        ; 10t
067C                             ; 	INC	(HL)	    ; 11t
067C                             ; 	JR Z,DOLOOP2	; 12/7t a fast dec is ok, only
067C                             ; DOLOOP1: 	
067C                             ;     LD	A,(DE)	    ; 7t go back to the loop
067C                             ; 	LD	L,A	        ; 4t
067C                             ; 	INC	DE	        ; 6t
067C                             ; 	LD	A,(DE)	    ; 7t
067C                             ; 	LD	H,A	        ; 4t
067C                             ; 	mNEXTHL
067C                             ; DOLOOP2: 	
067C                             ;     INC	HL	        ; 6t
067C                             ; 	INC	(HL)	    ;11t
067C                             ; 	JP PO,DOLOOP1   ;10/7t ?loop end
067C                             ; 	EX	DE,HL	    ; 4t yes,continue past the BRAN offset
067C                             ; 	LD	DE,4	    ;10t clear return stack
067C                             ; 	ADD IX,DE	    ;15h
067C                             ; 	INC	HL	        ; 6t
067C                             ; 	INC	HL	        ; 6t
067C                             ; 	mNEXTHL
067C                             ; ;   do+LOOP	( n -- ) ( R: loop-sys1 -- | loop-sys2 )
067C                             ; ;		Run time routine for +LOOP.
067C                             ; hCODE	COMPO+7,"do+LOOP",DoPLOOP
067C                             ; 	POP	HL	        ;10t this will be the new TOS
067C                             ; 	PUSH	BC	    ;11t
067C                             ; 	LD	B,H	        ; 4t
067C                             ; 	LD	C,L	        ; 4t
067C                             ; 	EXX		        ; 4t
067C                             ; 	POP	BC	        ;10t old TOS = loop increment
067C                             ; 	LD L,(IX+0)     ;19t
067C                             ; 	LD H,(IX+1)     ;19t
067C                             ; 	OR	A	        ; 4t clear carry
067C                             ; 	ADC HL,BC	    ;15t
067C                             ; 	JP PE,DOPLP1	;10/7t ?loop end
067C                             ; 	LD (IX+0),L     ;19t   no, go back
067C                             ; 	LD (IX+1),H     ;19t
067C                             ; 	EXX		        ; 4t
067C                             ; 	LD	A,(DE)	    ; 7t go back to the loop
067C                             ; 	LD	L,A	        ; 4t
067C                             ; 	INC	DE	        ; 6t
067C                             ; 	LD	A,(DE)	    ; 7t
067C                             ; 	LD	H,A	        ; 4t
067C                             ; 	mNEXTHL
067C                             ; DOPLP1:		
067C                             ;     LD	BC,4	    ;10t clear return stack
067C                             ; 	ADD IX,BC	    ;15h
067C                             ; 	EXX		        ; 4t
067C                             ; 	INC	DE	        ; 6t yes,continue past the BRAN offset
067C                             ; 	INC	DE	        ; 6t
067C                             ; 	mNEXT
067C                             ;   next        ( -- )
067C                             ;               Run time code for the single index loop.
067C                             ;               : next ( -- ) \ hilevel model
067C                             ;                 r> r> dup if 1 - >r @ >r exit then drop cell+ >r ;
067C                          ;*Macro unroll: mCODE   COMPO+4,'next',DONXT
067C                          ALIGN   2   
067C                DONXT:       
067C                VVCODE:   .SET   $   
067C                VVLEN:    .SET   (COMPO+4 & 01FH) / CELLL   
1876                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1876                VVNAME:   .SET   $   
1876   7C 06 A4 18            DW   vvCODE,vvLINK   
187A                VVLINK:   .SET   $   
187A   24 6E 65 78 74         DB   COMPO+4,"next"   
067C                          .ORG   vvCODE   
067C   DD E5                  PUSH   IX   
067E   E1                     POP   HL   ; load rp into HL
067F   7E                     LD   A,(HL)   ; a = low byte of r@
0680   B7                     OR   A   
0681   20 10                  JR   NZ,DECLOW   ; low > 0 goto dec low
0683   23                     INC   HL   
0684   7E                     LD   A,(HL)   ; a = high byte of r@
0685   B7                     OR   A   
0686   20 09                  JR   NZ,DECHILO   ; high > 0 goto dec hi dec lo
0688   23                     INC   HL   
0689   E5                     PUSH   HL   
068A   DD E1                  POP   IX   ; pop r@
068C   13                     INC   DE   ; IP = skip following word
068D   13                     INC   DE   
068E                          ;*Macro unroll:  mNEXT                               ; continue
068E   EB                     EX   DE,HL   ; continue
068F                          ;*Macro unroll:  mNEXTHL                         ; 34t
068F   FD E9                  JP   (IY)   ; 34t
0691                DECHILO:      
0691   35                     DEC   (HL)   ; dec high byte of r@
0692   2B                     DEC   HL   
0693                DECLOW:      
0693   35                     DEC   (HL)   ; dec low byte of r@
0694   6B                     LD   L,E   ; DE points to location of loop address
0695   62                     LD   H,D   
0696   5E                     LD   E,(HL)   ; DE points to loop address
0697   23                     INC   HL   
0698   56                     LD   D,(HL)   
0699                          ;*Macro unroll:  mNEXT                               ; continue to loop address
0699   EB                     EX   DE,HL   ; continue to loop address
069A                          ;*Macro unroll:  mNEXTHL                         ; 34t
069A   FD E9                  JP   (IY)   ; 34t
069C                             ;   DIGIT       ( u -- c )
069C                             ;               Convert digit u to a character.
069C                          ;*Macro unroll: hCOLON  5,'DIGIT',DIGIT
069C                          ;*Macro unroll:  hCODE 5, "DIGIT", DIGIT
069C                          ALIGN   2   
069C                DIGIT:       
069C   00                     NOP      
069D   CD 18 06               CALL   doLIST   
06A0   26 06 09 00 32 10 16 02 DW   DOLIT,9,OVER,LESS   
06A8   26 06 07 00 72 01 90 01 DW   DOLIT,7,ANDD,PLUS   
06B0   26 06 90 01 4E 06      DW   DOLIT,"0",PLUS,EXIT   
06B6                             ;   EXTRACT     ( n base -- n c )
06B6                             ;               Extract the least significant digit from n.
06B6                          ;*Macro unroll: hCOLON  7,'EXTRACT',EXTRC
06B6                          ;*Macro unroll:  hCODE 7, "EXTRACT", EXTRC
06B6                          ALIGN   2   
06B6                EXTRC:       
06B6   00                     NOP      
06B7   CD 18 06               CALL   doLIST   
06BA   26 06 00 00 2A 10 74 02 DW   DOLIT,0,SWAP,UMMOD   
06C2   2A 10 9C 06 4E 06      DW   SWAP,DIGIT,EXIT   
06C8                             ;   <#          ( -- )
06C8                             ;               Initiate the numeric output process.
06C8                          ;*Macro unroll: mCOLON  2,'<#',BDIGS
06C8                          ;*Macro unroll:  mCODE 2, "<#", BDIGS
06C8                          ALIGN   2   
06C8                BDIGS:       
06C8                VVCODE:   .SET   $   
06C8                VVLEN:    .SET   (2 & 01FH) / CELLL   
186E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
186E                VVNAME:   .SET   $   
186E   C8 06 7A 18            DW   vvCODE,vvLINK   
1872                VVLINK:   .SET   $   
1872   02 3C 23               DB   2,"<#"   
06C8                          .ORG   vvCODE   
06C8   00                     NOP      
06C9   CD 18 06               CALL   doLIST   
06CC   F2 0E 22 11 56 0E 4E 06 DW   PAD,HLD,STORE,EXIT   
06D4                             ;   HOLD        ( c -- )
06D4                             ;               Insert a character into the numeric output string.
06D4                          ;*Macro unroll: mCOLON  4,'HOLD',HOLD
06D4                          ;*Macro unroll:  mCODE 4, "HOLD", HOLD
06D4                          ALIGN   2   
06D4                HOLD:        
06D4                VVCODE:   .SET   $   
06D4                VVLEN:    .SET   (4 & 01FH) / CELLL   
1864                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1864                VVNAME:   .SET   $   
1864   D4 06 72 18            DW   vvCODE,vvLINK   
1868                VVLINK:   .SET   $   
1868   04 48 4F 4C 44         DB   4,"HOLD"   
06D4                          .ORG   vvCODE   
06D4   00                     NOP      
06D5   CD 18 06               CALL   doLIST   
06D8   22 11 60 0E 26 06 01 00 CA 01 DW   HLD,AT,DOLIT,1,SUBB   
06E2   22 10 22 11 56 0E 68 0E 4E 06 DW   DUPP,HLD,STORE,CSTOR,EXIT   
06EC                             ;   #           ( u -- u )
06EC                             ;               Extract one digit from u and append the digit to output string.
06EC                          ;*Macro unroll: mCOLON  1,'#',DIG
06EC                          ;*Macro unroll:  mCODE 1, "#", DIG
06EC                          ALIGN   2   
06EC                DIG:         
06EC                VVCODE:   .SET   $   
06EC                VVLEN:    .SET   (1 & 01FH) / CELLL   
185E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
185E                VVNAME:   .SET   $   
185E   EC 06 68 18            DW   vvCODE,vvLINK   
1862                VVLINK:   .SET   $   
1862   01 23                  DB   1,"#"   
06EC                          .ORG   vvCODE   
06EC   00                     NOP      
06ED   CD 18 06               CALL   doLIST   
06F0   E2 10 60 0E B6 06 D4 06 4E 06 DW   BASE,AT,EXTRC,HOLD,EXIT   
06FA                             ;   #S          ( u -- 0 )
06FA                             ;               Convert u until all digits are added to the output string.
06FA                          ;*Macro unroll: mCOLON  2,'#S',DIGS
06FA                          ;*Macro unroll:  mCODE 2, "#S", DIGS
06FA                          ALIGN   2   
06FA                DIGS:        
06FA                VVCODE:   .SET   $   
06FA                VVLEN:    .SET   (2 & 01FH) / CELLL   
1856                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1856                VVNAME:   .SET   $   
1856   FA 06 62 18            DW   vvCODE,vvLINK   
185A                VVLINK:   .SET   $   
185A   02 23 53               DB   2,"#S"   
06FA                          .ORG   vvCODE   
06FA   00                     NOP      
06FB   CD 18 06               CALL   doLIST   
06FE                DIGS1:       
06FE   EC 06 22 10            DW   DIG,DUPP   
0702   3A 0E 0A 07            DW   QBRAN,DIGS2   
0706   46 0E FE 06            DW   BRAN,DIGS1   
070A                DIGS2:       
070A   4E 06                  DW   EXIT   
070C                             ;   SIGN        ( n -- )
070C                             ;               Add a minus sign to the numeric output string.
070C                          ;*Macro unroll: mCOLON	4,'SIGN',SIGN
070C                          ;*Macro unroll:  mCODE 4, "SIGN", SIGN
070C                          ALIGN   2   
070C                SIGN:        
070C                VVCODE:   .SET   $   
070C                VVLEN:    .SET   (4 & 01FH) / CELLL   
184C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
184C                VVNAME:   .SET   $   
184C   0C 07 5A 18            DW   vvCODE,vvLINK   
1850                VVLINK:   .SET   $   
1850   04 53 49 47 4E         DB   4,"SIGN"   
070C                          .ORG   vvCODE   
070C   00                     NOP      
070D   CD 18 06               CALL   doLIST   
0710   6A 01 3A 0E 1C 07      DW   ZLESS,QBRAN,SIGN1   
0716   26 06 2D 00 D4 06      DW   DoLIT,MINUSS,HOLD   
071C                SIGN1:       
071C   4E 06                  DW   EXIT   
071E                             ;   #>          ( w -- b u )
071E                             ;               Prepare the output string to be TYPE'd.
071E                          ;*Macro unroll: mCOLON  2,'#>',EDIGS
071E                          ;*Macro unroll:  mCODE 2, "#>", EDIGS
071E                          ALIGN   2   
071E                EDIGS:       
071E                VVCODE:   .SET   $   
071E                VVLEN:    .SET   (2 & 01FH) / CELLL   
1844                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1844                VVNAME:   .SET   $   
1844   1E 07 50 18            DW   vvCODE,vvLINK   
1848                VVLINK:   .SET   $   
1848   02 23 3E               DB   2,"#>"   
071E                          .ORG   vvCODE   
071E   00                     NOP      
071F   CD 18 06               CALL   doLIST   
0722   26 10 22 11 60 0E      DW   DROP,HLD,AT   
0728   F2 0E 32 10 CA 01 4E 06 DW   PAD,OVER,SUBB,EXIT   
0730                             ;   str         ( n -- b u )
0730                             ;               Convert a signed integer to a numeric string.
0730                          ;*Macro unroll: hCOLON  3,'str',STR
0730                          ;*Macro unroll:  hCODE 3, "str", STR
0730                          ALIGN   2   
0730                STR:         
0730   00                     NOP      
0731   CD 18 06               CALL   doLIST   
0734   22 10 06 10 D4 01      DW   DUPP,TOR,ABSS   
073A   C8 06 FA 06 14 10      DW   BDIGS,DIGS,RFROM   
0740   0C 07 1E 07 4E 06      DW   SIGN,EDIGS,EXIT   
0746                             ;   HEX         ( -- )
0746                             ;               Use radix 16 as base for numeric conversions.
0746                          ;*Macro unroll: mCOLON  3,'HEX',HEX
0746                          ;*Macro unroll:  mCODE 3, "HEX", HEX
0746                          ALIGN   2   
0746                HEX:         
0746                VVCODE:   .SET   $   
0746                VVLEN:    .SET   (3 & 01FH) / CELLL   
183C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
183C                VVNAME:   .SET   $   
183C   46 07 48 18            DW   vvCODE,vvLINK   
1840                VVLINK:   .SET   $   
1840   03 48 45 58            DB   3,"HEX"   
0746                          .ORG   vvCODE   
0746   00                     NOP      
0747   CD 18 06               CALL   doLIST   
074A   26 06 10 00 E2 10 56 0E 4E 06 DW   DOLIT,16,BASE,STORE,EXIT   
0754                             ;   DECIMAL     ( -- )
0754                             ;               Use radix 10 as base for numeric conversions.
0754                          ;*Macro unroll: mCOLON  7,'DECIMAL',DECIMAL
0754                          ;*Macro unroll:  mCODE 7, "DECIMAL", DECIMAL
0754                          ALIGN   2   
0754                DECIMAL:      
0754                VVCODE:   .SET   $   
0754                VVLEN:    .SET   (7 & 01FH) / CELLL   
1830                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1830                VVNAME:   .SET   $   
1830   54 07 40 18            DW   vvCODE,vvLINK   
1834                VVLINK:   .SET   $   
1834   07 44 45 43 49 4D 41 4C DB   7,"DECIMAL"   
0754                          .ORG   vvCODE   
0754   00                     NOP      
0755   CD 18 06               CALL   doLIST   
0758   26 06 10 00 E2 10 56 0E 4E 06 DW   DOLIT,16,BASE,STORE,EXIT   
0762                             ;   BL          ( -- 32 )
0762                             ;               Return 32, the blank character.
0762                          ;*Macro unroll: mCOLON	2,'BL',BLANK
0762                          ;*Macro unroll:  mCODE 2, "BL", BLANK
0762                          ALIGN   2   
0762                BLANK:       
0762                VVCODE:   .SET   $   
0762                VVLEN:    .SET   (2 & 01FH) / CELLL   
1828                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1828                VVNAME:   .SET   $   
1828   62 07 34 18            DW   vvCODE,vvLINK   
182C                VVLINK:   .SET   $   
182C   02 42 4C               DB   2,"BL"   
0762                          .ORG   vvCODE   
0762   00                     NOP      
0763   CD 18 06               CALL   doLIST   
0766   26 06 20 00 4E 06      DW   DoLIT,SPACEE,EXIT   
076C                             ;   >CHAR       ( c -- c )
076C                             ;               Filter non-printing characters.
076C                          ;*Macro unroll: hCOLON  5,'>CHAR',TCHAR
076C                          ;*Macro unroll:  hCODE 5, ">CHAR", TCHAR
076C                          ALIGN   2   
076C                TCHAR:       
076C   00                     NOP      
076D   CD 18 06               CALL   doLIST   
0770   26 06 7F 00 72 01 22 10 DW   DoLIT,$7F,ANDD,DUPP   ;mask msb
0778   26 06 7F 00            DW   DoLIT,127   
077C   26 06 20 00 56 02      DW   DoLIT,SPACEE,WITHI   ;check for printable
0782   3A 0E 8C 07            DW   QBRAN,TCHA1   
0786   26 10 26 06 5F 00      DW   DROP,DoLIT,UNDERSC   ;replace non-printables
078C                TCHA1:       
078C   4E 06                  DW   EXIT   
078E                             ;   DIGIT?      ( c base -- u t )
078E                             ;               Convert a character to its numeric value. A flag indicates success.
078E                          ;*Macro unroll: hCOLON  6,'DIGIT?',DIGTQ
078E                          ;*Macro unroll:  hCODE 6, "DIGIT?", DIGTQ
078E                          ALIGN   2   
078E                DIGTQ:       
078E   00                     NOP      
078F   CD 18 06               CALL   doLIST   
0792   06 10 26 06 CA 01      DW   TOR,DOLIT,"0",SUBB   
0798   26 06 09 00 32 10 16 02 DW   DOLIT,9,OVER,LESS   
07A0   3A 0E B4 07            DW   QBRAN,DGTQ1   
07A4   26 06 07 00 CA 01      DW   DOLIT,7,SUBB   
07AA   22 10 26 06 0A 00 16 02 7C 01 DW   DUPP,DOLIT,10,LESS,ORR   
07B4                DGTQ1:       
07B4   22 10 14 10 FA 01 4E 06 DW   DUPP,RFROM,ULESS,EXIT   
07BC                             ;   NUMBER?     ( a -- n T | a F )
07BC                             ;               Convert a number string to integer. Push a flag on tos.
07BC                          ;*Macro unroll: hCOLON  7,'NUMBER?',NUMBQ
07BC                          ;*Macro unroll:  hCODE 7, "NUMBER?", NUMBQ
07BC                          ALIGN   2   
07BC                NUMBQ:       
07BC   00                     NOP      
07BD   CD 18 06               CALL   doLIST   
07C0   E2 10 60 0E 06 10 26 06 00 00 32 10 D6 0E DW   BASE,AT,TOR,DOLIT,0,OVER,COUNT   
07CE   32 10 70 0E 26 06 E4 01 DW   OVER,CAT,DOLIT,"$",EQUAL   
07D6   3A 0E EC 07            DW   QBRAN,NUMQ1   
07DA   46 07 2A 10 26 06 01 00 90 01 DW   HEX,SWAP,DOLIT,1,PLUS   
07E4   2A 10 26 06 01 00 CA 01 DW   SWAP,DOLIT,1,SUBB   
07EC                NUMQ1:       
07EC   32 10 70 0E 26 06 E4 01 06 10 DW   OVER,CAT,DOLIT,"-",EQUAL,TOR   
07F6   2A 10 78 0E CA 01 2A 10 78 0E 90 01 3A 10 DW   SWAP,RAT,SUBB,SWAP,RAT,PLUS,QDUP   
0804   3A 0E 56 08            DW   QBRAN,NUMQ6   
0808   26 06 01 00 CA 01 06 10 DW   DOLIT,1,SUBB,TOR   
0810                NUMQ2:       
0810   22 10 06 10 70 0E E2 10 60 0E 8E 07 DW   DUPP,TOR,CAT,BASE,AT,DIGTQ   
081C   3A 0E 48 08            DW   QBRAN,NUMQ4   
0820   2A 10 E2 10 60 0E 4A 03 90 01 14 10 DW   SWAP,BASE,AT,STAR,PLUS,RFROM   
082C   26 06 01 00 90 01      DW   DOLIT,1,PLUS   
0832   7C 06 10 08            DW   DONXT,NUMQ2   
0836   78 0E 2A 10 26 10      DW   RAT,SWAP,DROP   
083C   3A 0E 42 08            DW   QBRAN,NUMQ3   
0840   A6 01                  DW   NEGAT   
0842                NUMQ3:       
0842   2A 10                  DW   SWAP   
0844   46 0E 54 08            DW   BRAN,NUMQ5   
0848                NUMQ4:       
0848   14 10 14 10 56 10 56 10 26 06 00 00 DW   RFROM,RFROM,DDROP,DDROP,DOLIT,0   
0854                NUMQ5:       
0854   22 10                  DW   DUPP   
0856                NUMQ6:       
0856   14 10 56 10            DW   RFROM,DDROP   
085A   14 10 E2 10 56 0E 4E 06 DW   RFROM,BASE,STORE,EXIT   
0862                             ;   parse       ( b u c -- b u delta ; <string> )
0862                             ;               Scan string delimited by c. Return found string and its offset.
0862                          ;*Macro unroll: hCOLON  5,'parse',PARS
0862                          ;*Macro unroll:  hCODE 5, "parse", PARS
0862                          ALIGN   2   
0862                PARS:        
0862   00                     NOP      
0863   CD 18 06               CALL   doLIST   
0866   EA 10 56 0E 32 10 06 10 22 10 DW   TEMP,STORE,OVER,TOR,DUPP   
0870   3A 0E FE 08            DW   QBRAN,PARS8   
0874   26 06 01 00 CA 01 EA 10 60 0E 62 07 E4 01 DW   DOLIT,1,SUBB,TEMP,AT,BLANK,EQUAL   
0882   3A 0E B0 08            DW   QBRAN,PARS3   
0886   06 10                  DW   TOR   
0888                PARS1:       
0888   62 07 32 10 70 0E      DW   BLANK,OVER,CAT   ;skip leading blanks ONLY
088E   CA 01 6A 01 9A 01      DW   SUBB,ZLESS,INVER   
0894   3A 0E AE 08            DW   QBRAN,PARS2   
0898   26 06 01 00 90 01      DW   DOLIT,1,PLUS   
089E   7C 06 88 08            DW   DONXT,PARS1   
08A2   14 10 26 10 26 06 00 00 22 10 4E 06 DW   RFROM,DROP,DOLIT,0,DUPP,EXIT   
08AE                PARS2:       
08AE   14 10                  DW   RFROM   
08B0                PARS3:       
08B0   32 10 2A 10            DW   OVER,SWAP   
08B4   06 10                  DW   TOR   
08B6                PARS4:       
08B6   EA 10 60 0E 32 10 70 0E CA 01 DW   TEMP,AT,OVER,CAT,SUBB   ;scan for delimiter
08C0   EA 10 60 0E 62 07 E4 01 DW   TEMP,AT,BLANK,EQUAL   
08C8   3A 0E CE 08            DW   QBRAN,PARS5   
08CC   6A 01                  DW   ZLESS   
08CE                PARS5:       
08CE   3A 0E E4 08            DW   QBRAN,PARS6   
08D2   26 06 01 00 90 01      DW   DOLIT,1,PLUS   
08D8   7C 06 B6 08            DW   DONXT,PARS4   
08DC   22 10 06 10            DW   DUPP,TOR   
08E0   46 0E F2 08            DW   BRAN,PARS7   
08E4                PARS6:       
08E4   14 10 26 10 22 10      DW   RFROM,DROP,DUPP   
08EA   26 06 01 00 90 01 06 10 DW   DOLIT,1,PLUS,TOR   
08F2                PARS7:       
08F2   32 10 CA 01            DW   OVER,SUBB   
08F6   14 10 14 10 CA 01 4E 06 DW   RFROM,RFROM,SUBB,EXIT   
08FE                PARS8:       
08FE   32 10 14 10 CA 01 4E 06 DW   OVER,RFROM,SUBB,EXIT   
0906                             ;   PARSE       ( c -- b u ; <string> )
0906                             ;               Scan input stream and return counted string delimited by c.
0906                          ;*Macro unroll: mCOLON  5,'PARSE',PARSE
0906                          ;*Macro unroll:  mCODE 5, "PARSE", PARSE
0906                          ALIGN   2   
0906                PARSE:       
0906                VVCODE:   .SET   $   
0906                VVLEN:    .SET   (5 & 01FH) / CELLL   
181E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
181E                VVNAME:   .SET   $   
181E   06 09 2C 18            DW   vvCODE,vvLINK   
1822                VVLINK:   .SET   $   
1822   05 50 41 52 53 45      DB   5,"PARSE"   
0906                          .ORG   vvCODE   
0906   00                     NOP      
0907   CD 18 06               CALL   doLIST   
090A   06 10 00 0F FA 10 60 0E 90 01 DW   TOR,TIB,INN,AT,PLUS   ;current input buffer pointer
0914   02 11 60 0E FA 10 60 0E CA 01 DW   NTIB,AT,INN,AT,SUBB   ;remaining count
091E   14 10 62 08 FA 10 A4 0E 4E 06 DW   RFROM,PARS,INN,PSTOR,EXIT   
0928                             ;   (           ( -- )
0928                             ;               Ignore following string up to next ) . A comment.
0928                          ;*Macro unroll: mCOLON  IMEDD+1,'(',PAREN
0928                          ;*Macro unroll:  mCODE IMEDD+1, "(", PAREN
0928                          ALIGN   2   
0928                PAREN:       
0928                VVCODE:   .SET   $   
0928                VVLEN:    .SET   (IMEDD+1 & 01FH) / CELLL   
17D8                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
17D8                VVNAME:   .SET   $   
17D8   28 09 22 18            DW   vvCODE,vvLINK   
17DC                VVLINK:   .SET   $   
17DC   41 28                  DB   IMEDD+1,"("   
0928                          .ORG   vvCODE   
0928   00                     NOP      
0929   CD 18 06               CALL   doLIST   
092C   26 06 06 09 56 10 4E 06 DW   DOLIT,")",PARSE,DDROP,EXIT   
0934                             ;   \           ( -- )
0934                             ;               Ignore following text till the end of line.
0934                          ;*Macro unroll: mCOLON  IMEDD+1,'||',BKSLA
0934                          ;*Macro unroll:  mCODE IMEDD+1, "||", BKSLA
0934                          ALIGN   2   
0934                BKSLA:       
0934                VVCODE:   .SET   $   
0934                VVLEN:    .SET   (IMEDD+1 & 01FH) / CELLL   
1792                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1792                VVNAME:   .SET   $   
1792   34 09 DC 17            DW   vvCODE,vvLINK   
1796                VVLINK:   .SET   $   
1796   41 7C 7C               DB   IMEDD+1,"||"   
0934                          .ORG   vvCODE   
0934   00                     NOP      
0935   CD 18 06               CALL   doLIST   
0938   02 11 60 0E FA 10 56 0E 4E 06 DW   NTIB,AT,INN,STORE,EXIT   
0942                             ;   CHAR        ( -- c )
0942                             ;               Parse next word and return its first character.
0942                          ;*Macro unroll: mCOLON  4,'CHAR',CHAR
0942                          ;*Macro unroll:  mCODE 4, "CHAR", CHAR
0942                          ALIGN   2   
0942                CHAR:        
0942                VVCODE:   .SET   $   
0942                VVLEN:    .SET   (4 & 01FH) / CELLL   
1788                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1788                VVNAME:   .SET   $   
1788   42 09 96 17            DW   vvCODE,vvLINK   
178C                VVLINK:   .SET   $   
178C   04 43 48 41 52         DB   4,"CHAR"   
0942                          .ORG   vvCODE   
0942   00                     NOP      
0943   CD 18 06               CALL   doLIST   
0946   62 07 06 09 26 10 70 0E 4E 06 DW   BLANK,PARSE,DROP,CAT,EXIT   
0950                             ;   TOKEN       ( -- a ; <string> )
0950                             ;               Parse a word from input stream and copy it to name dictionary.
0950                          ;*Macro unroll: hCOLON  5,'TOKEN',TOKEN
0950                          ;*Macro unroll:  hCODE 5, "TOKEN", TOKEN
0950                          ALIGN   2   
0950                TOKEN:       
0950   00                     NOP      
0951   CD 18 06               CALL   doLIST   
0954   62 07 06 09 26 06 1F 00 42 02 DW   BLANK,PARSE,DOLIT,31,MIN   
095E   4A 11 60 0E 32 10 CA 01 98 03 DW   NP,AT,OVER,SUBB,CELLM   
0968   94 0F 4E 06            DW   PACKS,EXIT   
096C                             ;   WORD        ( c -- a ; <string> )
096C                             ;               Parse a word from input stream and copy it to code dictionary.
096C                          ;*Macro unroll: mCOLON  4,'WORD',WORDD
096C                          ;*Macro unroll:  mCODE 4, "WORD", WORDD
096C                          ALIGN   2   
096C                WORDD:       
096C                VVCODE:   .SET   $   
096C                VVLEN:    .SET   (4 & 01FH) / CELLL   
177E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
177E                VVNAME:   .SET   $   
177E   6C 09 8C 17            DW   vvCODE,vvLINK   
1782                VVLINK:   .SET   $   
1782   04 57 4F 52 44         DB   4,"WORD"   
096C                          .ORG   vvCODE   
096C   00                     NOP      
096D   CD 18 06               CALL   doLIST   
0970   06 09 E8 0E 94 0F 4E 06 DW   PARSE,HERE,PACKS,EXIT   
0978                             ;   NAME>       ( na -- ca )
0978                             ;               Return a code address given a name address.
0978                          ;*Macro unroll: hCOLON  5,'NAME>',NAMET
0978                          ;*Macro unroll:  hCODE 5, "NAME>", NAMET
0978                          ALIGN   2   
0978                NAMET:       
0978   00                     NOP      
0979   CD 18 06               CALL   doLIST   
097C   98 03 98 03 60 0E 4E 06 DW   CELLM,CELLM,AT,EXIT   
0984                             ;   SAME?       ( a a u -- a a f \ -0+ )
0984                             ;               Compare u cells in two strings. Return 0 if identical.
0984                          ;*Macro unroll: hCOLON  5,'SAME?',SAMEQ
0984                          ;*Macro unroll:  hCODE 5, "SAME?", SAMEQ
0984                          ALIGN   2   
0984                SAMEQ:       
0984   00                     NOP      
0985   CD 18 06               CALL   doLIST   
0988   06 10                  DW   TOR   
098A   46 0E B0 09            DW   BRAN,SAME2   
098E   32 10 78 0E A4 03 90 01 60 0E SAME1:   DW   OVER,RAT,CELLS,PLUS,AT   
0998   32 10 78 0E A4 03 90 01 60 0E DW   OVER,RAT,CELLS,PLUS,AT   
09A2   CA 01 3A 10            DW   SUBB,QDUP   
09A6   3A 0E B0 09            DW   QBRAN,SAME2   
09AA   14 10 26 10 4E 06      DW   RFROM,DROP,EXIT   ;strings not equal
09B0   7C 06 8E 09  SAME2:    DW   DONXT,SAME1   
09B4   26 06 00 00 4E 06      DW   DOLIT,0,EXIT   ;strings equal
09BA                             ;   find        ( a va -- ca na | a F )
09BA                             ;               Search a vocabulary for a string. Return ca and na if succeeded.
09BA                          ;*Macro unroll: mCOLON  4,'find',FIND
09BA                          ;*Macro unroll:  mCODE 4, "find", FIND
09BA                          ALIGN   2   
09BA                FIND:        
09BA                VVCODE:   .SET   $   
09BA                VVLEN:    .SET   (4 & 01FH) / CELLL   
1774                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1774                VVNAME:   .SET   $   
1774   BA 09 82 17            DW   vvCODE,vvLINK   
1778                VVLINK:   .SET   $   
1778   04 66 69 6E 64         DB   4,"find"   
09BA                          .ORG   vvCODE   
09BA   00                     NOP      
09BB   CD 18 06               CALL   doLIST   
09BE   2A 10 22 10 70 0E      DW   SWAP,DUPP,CAT   
09C4   26 06 02 00 22 03 EA 10 56 0E DW   DOLIT,CELLL,SLASH,TEMP,STORE   
09CE   22 10 60 0E 06 10 8C 03 2A 10 DW   DUPP,AT,TOR,CELLP,SWAP   
09D8   60 0E 22 10  FIND1:    DW   AT,DUPP   
09DC   3A 0E 08 0A            DW   QBRAN,FIND6   
09E0   22 10 60 0E 26 06 1F 00 72 01 78 0E 86 01 DW   DUPP,AT,DOLIT,MASKK,ANDD,RAT,XORR   
09EE   3A 0E FC 09            DW   QBRAN,FIND2   
09F2   8C 03 26 06 FF FF      DW   CELLP,DOLIT,-1   ;true flag
09F8   46 0E 04 0A            DW   BRAN,FIND3   
09FC   8C 03 EA 10 60 0E 84 09 FIND2:   DW   CELLP,TEMP,AT,SAMEQ   
0A04   46 0E 14 0A  FIND3:    DW   BRAN,FIND4   
0A08   14 10 26 10  FIND6:    DW   RFROM,DROP   
0A0C   2A 10 98 03 2A 10 4E 06 DW   SWAP,CELLM,SWAP,EXIT   
0A14   3A 0E 20 0A  FIND4:    DW   QBRAN,FIND5   
0A18   98 03 98 03            DW   CELLM,CELLM   
0A1C   46 0E D8 09            DW   BRAN,FIND1   
0A20   14 10 26 10 2A 10 26 10 FIND5:   DW   RFROM,DROP,SWAP,DROP   
0A28   98 03                  DW   CELLM   
0A2A   22 10 78 09 2A 10 4E 06 DW   DUPP,NAMET,SWAP,EXIT   
0A32                             ;   NAME?       ( a -- ca na | a F )
0A32                             ;               Search all context vocabularies for a string.
0A32                          ;*Macro unroll: hCOLON  5,'NAME?',NAMEQ
0A32                          ;*Macro unroll:  hCODE 5, "NAME?", NAMEQ
0A32                          ALIGN   2   
0A32                NAMEQ:       
0A32   00                     NOP      
0A33   CD 18 06               CALL   doLIST   
0A36   32 11 22 10 C6 0E 86 01 DW   CNTXT,DUPP,DAT,XORR   ;?context=also
0A3E   3A 0E 44 0A            DW   QBRAN,NAMQ1   
0A42   98 03                  DW   CELLM   ;no, start with context
0A44   06 10        NAMQ1:    DW   TOR   
0A46   14 10 8C 03 22 10 06 10 NAMQ2:   DW   RFROM,CELLP,DUPP,TOR   ;next in search order
0A4E   60 0E 3A 10            DW   AT,QDUP   
0A52   3A 0E 64 0A            DW   QBRAN,NAMQ3   
0A56   BA 09 3A 10            DW   FIND,QDUP   ;search vocabulary
0A5A   3A 0E 46 0A            DW   QBRAN,NAMQ2   
0A5E   14 10 26 10 4E 06      DW   RFROM,DROP,EXIT   ;found name
0A64   14 10 26 10  NAMQ3:    DW   RFROM,DROP   ;name not found
0A68   26 06 00 00 4E 06      DW   DOLIT,0,EXIT   ;false flag
0A6E                             ;   CATCH       ( ca -- 0 | err# )
0A6E                             ;               Execute word at ca and set up an error frame for it.
0A6E                          ;*Macro unroll: mCOLON  5,'CATCH',CATCH
0A6E                          ;*Macro unroll:  mCODE 5, "CATCH", CATCH
0A6E                          ALIGN   2   
0A6E                CATCH:       
0A6E                VVCODE:   .SET   $   
0A6E                VVLEN:    .SET   (5 & 01FH) / CELLL   
176A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
176A                VVNAME:   .SET   $   
176A   6E 0A 78 17            DW   vvCODE,vvLINK   
176E                VVLINK:   .SET   $   
176E   05 43 41 54 43 48      DB   5,"CATCH"   
0A6E                          .ORG   vvCODE   
0A6E   00                     NOP      
0A6F   CD 18 06               CALL   doLIST   
0A72   92 0E 06 10 2A 11 60 0E 06 10 DW   SPAT,TOR,HANDL,AT,TOR   ;save error frame
0A7C   82 0E 2A 11 56 0E 36 0E DW   RPAT,HANDL,STORE,EXECU   ;execute
0A84   14 10 2A 11 56 0E      DW   RFROM,HANDL,STORE   ;reSTORE error frame
0A8A   14 10 26 10 26 06 00 00 4E 06 DW   RFROM,DROP,DOLIT,0,EXIT   ;no error
0A94                             ;   THROW       ( err# -- err# )
0A94                             ;               Reset system to current local error frame an update error flag.
0A94                          ;*Macro unroll: mCOLON  5,'THROW',THROW
0A94                          ;*Macro unroll:  mCODE 5, "THROW", THROW
0A94                          ALIGN   2   
0A94                THROW:       
0A94                VVCODE:   .SET   $   
0A94                VVLEN:    .SET   (5 & 01FH) / CELLL   
1760                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1760                VVNAME:   .SET   $   
1760   94 0A 6E 17            DW   vvCODE,vvLINK   
1764                VVLINK:   .SET   $   
1764   05 54 48 52 4F 57      DB   5,"THROW"   
0A94                          .ORG   vvCODE   
0A94   00                     NOP      
0A95   CD 18 06               CALL   doLIST   
0A98   2A 11 60 0E 8A 0E      DW   HANDL,AT,RPSTO   ;reSTORE return stack
0A9E   14 10 2A 11 56 0E      DW   RFROM,HANDL,STORE   ;reSTORE handler frame
0AA4   14 10 2A 10 06 10 9C 0E DW   RFROM,SWAP,TOR,SPSTO   ;reSTORE data stack
0AAC   26 10 14 10 4E 06      DW   DROP,RFROM,EXIT   
0AB2                             ;   NULL$       ( -- a )
0AB2                             ;               Return address of a null string with zero count.
0AB2                          ;*Macro unroll: hCOLON  5,'NULL$',NULLS
0AB2                          ;*Macro unroll:  hCODE 5, "NULL$", NULLS
0AB2                          ALIGN   2   
0AB2                NULLS:       
0AB2   00                     NOP      
0AB3   CD 18 06               CALL   doLIST   
0AB6   2E 06                  DW   DOVAR   ;emulate CREATE
0AB8   00 00                  DW   0   
0ABA   63 6F 79 6F 74 65      DB   99,111,121,111,116,101   
0AC0                          ALIGN   2   
0AC0                             ;   ABORT       ( -- )
0AC0                             ;               Reset data stack and jump to QUIT.
0AC0                          ;*Macro unroll: mCOLON  5,'ABORT',ABORT
0AC0                          ;*Macro unroll:  mCODE 5, "ABORT", ABORT
0AC0                          ALIGN   2   
0AC0                ABORT:       
0AC0                VVCODE:   .SET   $   
0AC0                VVLEN:    .SET   (5 & 01FH) / CELLL   
1756                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1756                VVNAME:   .SET   $   
1756   C0 0A 64 17            DW   vvCODE,vvLINK   
175A                VVLINK:   .SET   $   
175A   05 41 42 4F 52 54      DB   5,"ABORT"   
0AC0                          .ORG   vvCODE   
0AC0   00                     NOP      
0AC1   CD 18 06               CALL   doLIST   
0AC4   B2 0A 94 0A            DW   NULLS,THROW   
0AC8                             ;   abort"      ( f -- )
0AC8                             ;               Run time routine of ABORT" . Abort with a message.
0AC8                          ;*Macro unroll: mCOLON  COMPO+6,'abort|',ABORQ
0AC8                          ;*Macro unroll:  mCODE COMPO+6, "abort|", ABORQ
0AC8                          ALIGN   2   
0AC8                ABORQ:       
0AC8                VVCODE:   .SET   $   
0AC8                VVLEN:    .SET   (COMPO+6 & 01FH) / CELLL   
172A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
172A                VVNAME:   .SET   $   
172A   C8 0A 5A 17            DW   vvCODE,vvLINK   
172E                VVLINK:   .SET   $   
172E   26 61 62 6F 72 74 7C   DB   COMPO+6,"abort|"   
0AC8                          .ORG   vvCODE   
0AC8   00                     NOP      
0AC9   CD 18 06               CALL   doLIST   
0ACC   3A 0E D4 0A            DW   QBRAN,ABOR1   ;text flag
0AD0   50 0C 94 0A            DW   DOSTR,THROW   ;pass error string
0AD4                ABOR1:       
0AD4   50 0C 26 10 4E 06      DW   DOSTR,DROP,EXIT   ;drop error
0ADA                             ;   $INTERPRET  ( a -- )
0ADA                             ;               Interpret a word. If failed, try to convert it to an integer.
0ADA                          ;*Macro unroll: hCOLON  10,'$INTERPRET',INTER
0ADA                          ;*Macro unroll:  hCODE 10, "$INTERPRET", INTER
0ADA                          ALIGN   2   
0ADA                INTER:       
0ADA   00                     NOP      
0ADB   CD 18 06               CALL   doLIST   
0ADE   32 0A 3A 10            DW   NAMEQ,QDUP   ;?defined
0AE2   3A 0E 02 0B            DW   QBRAN,INTE1   
0AE6   60 0E 26 06 20 00 72 01 DW   AT,DOLIT,COMPO,ANDD   ;?compile only lexicon bits
0AEE                          ;*Macro unroll:  mDSTR   ABORQ,' compile only'
0AEE   C8 0A                  DW   ABORQ   
0AF0                VVLEN:    .SET   $   
0AF0   00 20 63 6F 6D 70 69 6C 65 20 6F 6E 6C 79 DB   0," compile only"   
0AFE                VVCODE:   .SET   $   
0AF0                          .ORG   vvLEN   
0AF0   0D                     DB   vvCODE - vvLEN - 1   
0AFE                          .ORG   vvCODE   
0AFE   36 0E 4E 06            DW   EXECU,EXIT   ;execute defined word
0B02                INTE1:       
0B02   1A 11 0C 0F            DW   TNUMB,ATEXE   ;convert a number
0B06   3A 0E 0C 0B            DW   QBRAN,INTE2   
0B0A   4E 06                  DW   EXIT   
0B0C                INTE2:       
0B0C   94 0A                  DW   THROW   ;error
0B0E                             ;   [           ( -- )
0B0E                             ;               Start the text interpreter.
0B0E                          ;*Macro unroll: mCOLON  IMEDD+1,'[',LBRAC
0B0E                          ;*Macro unroll:  mCODE IMEDD+1, "[", LBRAC
0B0E                          ALIGN   2   
0B0E                LBRAC:       
0B0E                VVCODE:   .SET   $   
0B0E                VVLEN:    .SET   (IMEDD+1 & 01FH) / CELLL   
16E4                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
16E4                VVNAME:   .SET   $   
16E4   0E 0B 2E 17            DW   vvCODE,vvLINK   
16E8                VVLINK:   .SET   $   
16E8   41 5B                  DB   IMEDD+1,"["   
0B0E                          .ORG   vvCODE   
0B0E   00                     NOP      
0B0F   CD 18 06               CALL   doLIST   
0B12   26 06 DA 0A 12 11 56 0E 4E 06 DW   DOLIT,INTER,TEVAL,STORE,EXIT   
0B1C                             ;   .OK         ( -- )
0B1C                             ;               Display "ok" only while interpreting.
0B1C                          ;*Macro unroll: mCOLON  3,'.OK',DOTOK
0B1C                          ;*Macro unroll:  mCODE 3, ".OK", DOTOK
0B1C                          ALIGN   2   
0B1C                DOTOK:       
0B1C                VVCODE:   .SET   $   
0B1C                VVLEN:    .SET   (3 & 01FH) / CELLL   
16DC                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
16DC                VVNAME:   .SET   $   
16DC   1C 0B E8 16            DW   vvCODE,vvLINK   
16E0                VVLINK:   .SET   $   
16E0   03 2E 4F 4B            DB   3,".OK"   
0B1C                          .ORG   vvCODE   
0B1C   00                     NOP      
0B1D   CD 18 06               CALL   doLIST   
0B20   26 06 DA 0A 12 11 60 0E E4 01 DW   DOLIT,INTER,TEVAL,AT,EQUAL   
0B2A   3A 0E 34 0B            DW   QBRAN,DOTO1   
0B2E                          ;*Macro unroll:  mDSTR      DOTQP,' ok'
0B2E   70 0C                  DW   DOTQP   
0B30                VVLEN:    .SET   $   
0B30   00 20 6F 6B            DB   0," ok"   
0B34                VVCODE:   .SET   $   
0B30                          .ORG   vvLEN   
0B30   03                     DB   vvCODE - vvLEN - 1   
0B34                          .ORG   vvCODE   
0B34   3E 0C 4E 06  DOTO1:    DW   CR,EXIT   
0B38                             ;   ?STACK      ( -- )
0B38                             ;               Abort if the data stack underflows.
0B38                          ;*Macro unroll: hCOLON  6,'?STACK',QSTAC
0B38                          ;*Macro unroll:  hCODE 6, "?STACK", QSTAC
0B38                          ALIGN   2   
0B38                QSTAC:       
0B38   00                     NOP      
0B39   CD 18 06               CALL   doLIST   
0B3C   8C 10 6A 01            DW   DEPTH,ZLESS   ;check only for underflow
0B40                          ;*Macro unroll:  mDSTR      ABORQ,' underflow'
0B40   C8 0A                  DW   ABORQ   
0B42                VVLEN:    .SET   $   
0B42   00 20 75 6E 64 65 72 66 6C 6F 77 DB   0," underflow"   
0B4D                VVCODE:   .SET   $   
0B42                          .ORG   vvLEN   
0B42   0A                     DB   vvCODE - vvLEN - 1   
0B4D                          .ORG   vvCODE   
0B4D   4E 06                  DW   EXIT   
0B4F                             ;   EVAL        ( -- )
0B4F                             ;               Interpret the input stream.
0B4F                          ;*Macro unroll: mCOLON  4,'EVAL',EVAL
0B4F                          ;*Macro unroll:  mCODE 4, "EVAL", EVAL
0B4F                          ALIGN   2   
0B50                EVAL:        
0B50                VVCODE:   .SET   $   
0B50                VVLEN:    .SET   (4 & 01FH) / CELLL   
16D2                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
16D2                VVNAME:   .SET   $   
16D2   50 0B E0 16            DW   vvCODE,vvLINK   
16D6                VVLINK:   .SET   $   
16D6   04 45 56 41 4C         DB   4,"EVAL"   
0B50                          .ORG   vvCODE   
0B50   00                     NOP      
0B51   CD 18 06               CALL   doLIST   
0B54                EVAL1:       
0B54   50 09 22 10 70 0E      DW   TOKEN,DUPP,CAT   ;?input stream empty
0B5A   3A 0E 68 0B            DW   QBRAN,EVAL2   
0B5E   12 11 0C 0F 38 0B      DW   TEVAL,ATEXE,QSTAC   ;evaluate input, check stack
0B64   46 0E 54 0B            DW   BRAN,EVAL1   
0B68                EVAL2:       
0B68   26 10 DA 10 0C 0F 4E 06 DW   DROP,TPROM,ATEXE,EXIT   ;prompt
0B70                             ;   PC!         ( uc p --  )
0B70                             ;               output uc to IO port p
0B70                          ;*Macro unroll: mCODE   3,'PC!',PCSTO
0B70                          ALIGN   2   
0B70                PCSTO:       
0B70                VVCODE:   .SET   $   
0B70                VVLEN:    .SET   (3 & 01FH) / CELLL   
16CA                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
16CA                VVNAME:   .SET   $   
16CA   70 0B D6 16            DW   vvCODE,vvLINK   
16CE                VVLINK:   .SET   $   
16CE   03 50 43 21            DB   3,"PC!"   
0B70                          .ORG   vvCODE   
0B70   D9                     EXX      ; 4t
0B71   D1                     POP   DE   ;10t
0B72   7B                     LD   A,E   ; 4t
0B73   ED 79                  OUT   (C),A   ;12t
0B75   D9                     EXX      ; 4t
0B76                          ;*Macro unroll:  mNEXT
0B76   EB                     EX   DE,HL   
0B77                          ;*Macro unroll:  mNEXTHL                         ; 34t
0B77   FD E9                  JP   (IY)   ; 34t
0B79                             ;   PC@         ( p -- uc )
0B79                             ;               output uc to IO port p
0B79                          ;*Macro unroll: mCODE   3,'PC@',PCAT
0B79                          ALIGN   2   
0B7A                PCAT:        
0B7A                VVCODE:   .SET   $   
0B7A                VVLEN:    .SET   (3 & 01FH) / CELLL   
16C2                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
16C2                VVNAME:   .SET   $   
16C2   7A 0B CE 16            DW   vvCODE,vvLINK   
16C6                VVLINK:   .SET   $   
16C6   03 50 43 40            DB   3,"PC@"   
0B7A                          .ORG   vvCODE   
0B7A   D9                     EXX      ; 4t
0B7B   ED 78                  IN   A,(C)   ;12t
0B7D   5F                     LD   E,A   ; 4t
0B7E   16 00                  LD   D,0   ; 7t
0B80   D5                     PUSH   DE   ;11t
0B81   D9                     EXX      ; 4t
0B82                          ;*Macro unroll:  mNEXT
0B82   EB                     EX   DE,HL   
0B83                          ;*Macro unroll:  mNEXTHL                         ; 34t
0B83   FD E9                  JP   (IY)   ; 34t
0B85                             ;   !IO         ( -- )
0B85                             ;               Initialize the serial I/O devices.
0B85                          ;*Macro unroll: mCODE   3,'!IO', STOIO ;
0B85                          ALIGN   2   ; 
0B86                STOIO:       
0B86                VVCODE:   .SET   $   
0B86                VVLEN:    .SET   (3 & 01FH) / CELLL   
16BA                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
16BA                VVNAME:   .SET   $   
16BA   86 0B C6 16            DW   vvCODE,vvLINK   
16BE                VVLINK:   .SET   $   
16BE   03 21 49 4F            DB   3,"!IO"   
0B86                          .ORG   vvCODE   
0B86   CD D6 00               CALL   INIT_IO   
0B89                          ;*Macro unroll:  mNEXT
0B89   EB                     EX   DE,HL   
0B8A                          ;*Macro unroll:  mNEXTHL                         ; 34t
0B8A   FD E9                  JP   (IY)   ; 34t
0B8C                             ;   ?RX         ( -- c T | F )
0B8C                             ;               Return input character and true, or a false if no input.
0B8C                          ;*Macro unroll: mCODE	3, '?RX', QRX
0B8C                          ALIGN   2   
0B8C                QRX:         
0B8C                VVCODE:   .SET   $   
0B8C                VVLEN:    .SET   (3 & 01FH) / CELLL   
16B2                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
16B2                VVNAME:   .SET   $   
16B2   8C 0B BE 16            DW   vvCODE,vvLINK   
16B6                VVLINK:   .SET   $   
16B6   03 3F 52 58            DB   3,"?RX"   
0B8C                          .ORG   vvCODE   
0B8C   C5                     PUSH   BC   
0B8D   CD 20 01               CALL   CKINCHAR   
0B90   20 05                  JR   nz,QRX1   
0B92   01 00 00               LD   BC,FALSEE   
0B95   18 0A                  JR   QRX2   
0B97                QRX1:        
0B97   CD EA 00               CALL   RXA   
0B9A   4F                     LD   C,A   
0B9B   06 00                  LD   B,0   
0B9D   C5                     PUSH   BC   
0B9E   01 FF FF               LD   BC,TRUEE   
0BA1                QRX2:        
0BA1                          ;*Macro unroll:  mNEXT
0BA1   EB                     EX   DE,HL   
0BA2                          ;*Macro unroll:  mNEXTHL                         ; 34t
0BA2   FD E9                  JP   (IY)   ; 34t
0BA4                             ;   TX!         ( c -- )
0BA4                             ;               Send character c to the output device.
0BA4                          ;*Macro unroll: mCODE	3,'TX!',TXSTO
0BA4                          ALIGN   2   
0BA4                TXSTO:       
0BA4                VVCODE:   .SET   $   
0BA4                VVLEN:    .SET   (3 & 01FH) / CELLL   
16AA                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
16AA                VVNAME:   .SET   $   
16AA   A4 0B B6 16            DW   vvCODE,vvLINK   
16AE                VVLINK:   .SET   $   
16AE   03 54 58 21            DB   3,"TX!"   
0BA4                          .ORG   vvCODE   
0BA4   79                     LD   A,C   
0BA5   CD 15 01               CALL   TXA   
0BA8   C1                     POP   BC   
0BA9                          ;*Macro unroll:  mNEXT
0BA9   EB                     EX   DE,HL   
0BAA                          ;*Macro unroll:  mNEXTHL                         ; 34t
0BAA   FD E9                  JP   (IY)   ; 34t
0BAC                             ;   ?KEY        ( -- c T | F )
0BAC                             ;               Return input character and true, or a false if no input.
0BAC                          ;*Macro unroll: mCOLON  4,'?KEY',QKEY
0BAC                          ;*Macro unroll:  mCODE 4, "?KEY", QKEY
0BAC                          ALIGN   2   
0BAC                QKEY:        
0BAC                VVCODE:   .SET   $   
0BAC                VVLEN:    .SET   (4 & 01FH) / CELLL   
16A0                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
16A0                VVNAME:   .SET   $   
16A0   AC 0B AE 16            DW   vvCODE,vvLINK   
16A4                VVLINK:   .SET   $   
16A4   04 3F 4B 45 59         DB   4,"?KEY"   
0BAC                          .ORG   vvCODE   
0BAC   00                     NOP      
0BAD   CD 18 06               CALL   doLIST   
0BB0   B2 10 60 0E 36 0E 4E 06 DW   TQKEY,AT,EXECU,EXIT   
0BB8                             ;   KEY         ( -- c )
0BB8                             ;               Wait for and return an input character.
0BB8                          ;*Macro unroll: mCOLON  3,'KEY',KEY
0BB8                          ;*Macro unroll:  mCODE 3, "KEY", KEY
0BB8                          ALIGN   2   
0BB8                KEY:         
0BB8                VVCODE:   .SET   $   
0BB8                VVLEN:    .SET   (3 & 01FH) / CELLL   
1698                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1698                VVNAME:   .SET   $   
1698   B8 0B A4 16            DW   vvCODE,vvLINK   
169C                VVLINK:   .SET   $   
169C   03 4B 45 59            DB   3,"KEY"   
0BB8                          .ORG   vvCODE   
0BB8   00                     NOP      
0BB9   CD 18 06               CALL   doLIST   
0BBC                KEY1:        
0BBC   AC 0B                  DW   QKEY   
0BBE   3A 0E BC 0B            DW   QBRAN,KEY1   
0BC2   4E 06                  DW   EXIT   
0BC4                             ;   EMIT        ( c -- )
0BC4                             ;               Send a character to the output device.
0BC4                          ;*Macro unroll: mCOLON  4, 'EMIT', EMIT
0BC4                          ;*Macro unroll:  mCODE 4, "EMIT", EMIT
0BC4                          ALIGN   2   
0BC4                EMIT:        
0BC4                VVCODE:   .SET   $   
0BC4                VVLEN:    .SET   (4 & 01FH) / CELLL   
168E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
168E                VVNAME:   .SET   $   
168E   C4 0B 9C 16            DW   vvCODE,vvLINK   
1692                VVLINK:   .SET   $   
1692   04 45 4D 49 54         DB   4,"EMIT"   
0BC4                          .ORG   vvCODE   
0BC4   00                     NOP      
0BC5   CD 18 06               CALL   doLIST   
0BC8   BA 10 60 0E 36 0E 4E 06 DW   TEMIT,AT,EXECU,EXIT   
0BD0                             ;   NUF?        ( -- t )
0BD0                             ;               Return false if no input, else pause and if CR return true.
0BD0                          ;*Macro unroll: mCOLON  4,'NUF?',NUFQ
0BD0                          ;*Macro unroll:  mCODE 4, "NUF?", NUFQ
0BD0                          ALIGN   2   
0BD0                NUFQ:        
0BD0                VVCODE:   .SET   $   
0BD0                VVLEN:    .SET   (4 & 01FH) / CELLL   
1684                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1684                VVNAME:   .SET   $   
1684   D0 0B 92 16            DW   vvCODE,vvLINK   
1688                VVLINK:   .SET   $   
1688   04 4E 55 46 3F         DB   4,"NUF?"   
0BD0                          .ORG   vvCODE   
0BD0   00                     NOP      
0BD1   CD 18 06               CALL   doLIST   
0BD4   AC 0B 22 10            DW   QKEY,DUPP   
0BD8   3A 0E E6 0B            DW   QBRAN,NUFQ1   
0BDC   56 10 B8 0B 26 06 0D 00 E4 01 DW   DDROP,KEY,DOLIT,CRR,EQUAL   
0BE6                NUFQ1:       
0BE6   4E 06                  DW   EXIT   
0BE8                             ;   PACE        ( -- )
0BE8                             ;               Send a pace character for the file downloading process.
0BE8                          ;*Macro unroll: hCOLON  4,'PACE',PACE
0BE8                          ;*Macro unroll:  hCODE 4, "PACE", PACE
0BE8                          ALIGN   2   
0BE8                PACE:        
0BE8   00                     NOP      
0BE9   CD 18 06               CALL   doLIST   
0BEC   26 06 0B 00 C4 0B 4E 06 DW   DOLIT,11,EMIT,EXIT   
0BF4                             ;   SPACE       ( -- )
0BF4                             ;               Send the blank character to the output device.
0BF4                          ;*Macro unroll: mCOLON  5,'SPACE',SPACE
0BF4                          ;*Macro unroll:  mCODE 5, "SPACE", SPACE
0BF4                          ALIGN   2   
0BF4                SPACE:       
0BF4                VVCODE:   .SET   $   
0BF4                VVLEN:    .SET   (5 & 01FH) / CELLL   
167A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
167A                VVNAME:   .SET   $   
167A   F4 0B 88 16            DW   vvCODE,vvLINK   
167E                VVLINK:   .SET   $   
167E   05 53 50 41 43 45      DB   5,"SPACE"   
0BF4                          .ORG   vvCODE   
0BF4   00                     NOP      
0BF5   CD 18 06               CALL   doLIST   
0BF8   62 07 C4 0B 4E 06      DW   BLANK,EMIT,EXIT   
0BFE                             ;   SPACES      ( +n -- )
0BFE                             ;               Send n spaces to the output device.
0BFE                          ;*Macro unroll: mCOLON  6,'SPACES',SPACS
0BFE                          ;*Macro unroll:  mCODE 6, "SPACES", SPACS
0BFE                          ALIGN   2   
0BFE                SPACS:       
0BFE                VVCODE:   .SET   $   
0BFE                VVLEN:    .SET   (6 & 01FH) / CELLL   
166E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
166E                VVNAME:   .SET   $   
166E   FE 0B 7E 16            DW   vvCODE,vvLINK   
1672                VVLINK:   .SET   $   
1672   06 53 50 41 43 45 53   DB   6,"SPACES"   
0BFE                          .ORG   vvCODE   
0BFE   00                     NOP      
0BFF   CD 18 06               CALL   doLIST   
0C02   26 06 00 00 30 02 06 10 DW   DOLIT,0,MAX,TOR   
0C0A   46 0E 10 0C            DW   BRAN,CHAR2   
0C0E                CHAR1:       
0C0E   F4 0B                  DW   SPACE   
0C10                CHAR2:       
0C10   7C 06 0E 0C            DW   DONXT,CHAR1   
0C14   4E 06                  DW   EXIT   
0C16                             ;   TYPE        ( b u -- )
0C16                             ;               Output u characters from b.
0C16                          ;*Macro unroll: mCOLON	4,'TYPE',TYPEE
0C16                          ;*Macro unroll:  mCODE 4, "TYPE", TYPEE
0C16                          ALIGN   2   
0C16                TYPEE:       
0C16                VVCODE:   .SET   $   
0C16                VVLEN:    .SET   (4 & 01FH) / CELLL   
1664                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1664                VVNAME:   .SET   $   
1664   16 0C 72 16            DW   vvCODE,vvLINK   
1668                VVLINK:   .SET   $   
1668   04 54 59 50 45         DB   4,"TYPE"   
0C16                          .ORG   vvCODE   
0C16   00                     NOP      
0C17   CD 18 06               CALL   doLIST   
0C1A   06 10                  DW   TOR   
0C1C   46 0E 2C 0C            DW   BRAN,TYPE2   
0C20                TYPE1:       
0C20   22 10 70 0E C4 0B      DW   DUPP,CAT,EMIT   
0C26   26 06 01 00 90 01      DW   DOLIT,1,PLUS   
0C2C                TYPE2:       
0C2C   7C 06 20 0C            DW   DONXT,TYPE1   
0C30   26 10 4E 06            DW   DROP,EXIT   
0C34                             ;   TYPECSTR    ( cstr -- )
0C34                             ;   Similar to TYPE but prints C null terminated strings
0C34                          ;*Macro unroll: mCODE	3,'TYPESZ',TYPESZ
0C34                          ALIGN   2   
0C34                TYPESZ:      
0C34                VVCODE:   .SET   $   
0C34                VVLEN:    .SET   (3 & 01FH) / CELLL   
165C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
165C                VVNAME:   .SET   $   
165C   34 0C 68 16            DW   vvCODE,vvLINK   
1660                VVLINK:   .SET   $   
1660   03 54 59 50 45 53 5A   DB   3,"TYPESZ"   
0C34                          .ORG   vvCODE   
0C34   60                     LD   H,B   
0C35   69                     LD   L,C   
0C36   CD 26 01               CALL   PRINTSZ   
0C39   C1                     POP   BC   
0C3A                          ;*Macro unroll:  mNEXT
0C3A   EB                     EX   DE,HL   
0C3B                          ;*Macro unroll:  mNEXTHL                         ; 34t
0C3B   FD E9                  JP   (IY)   ; 34t
0C3D                             ;   CR          ( -- )
0C3D                             ;               Output a carriage return and a line feed.
0C3D                          ;*Macro unroll: mCOLON	2,'CR',CR
0C3D                          ;*Macro unroll:  mCODE 2, "CR", CR
0C3D                          ALIGN   2   
0C3E                CR:          
0C3E                VVCODE:   .SET   $   
0C3E                VVLEN:    .SET   (2 & 01FH) / CELLL   
1654                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1654                VVNAME:   .SET   $   
1654   3E 0C 60 16            DW   vvCODE,vvLINK   
1658                VVLINK:   .SET   $   
1658   02 43 52               DB   2,"CR"   
0C3E                          .ORG   vvCODE   
0C3E   00                     NOP      
0C3F   CD 18 06               CALL   doLIST   
0C42   26 06 0D 00 C4 0B 26 06 0A 00 C4 0B 4E 06 DW   DOLIT,CRR,EMIT,DOLIT,LFF,EMIT,EXIT   
0C50                             ;   do$         ( -- a )
0C50                             ;               Return the address of a compiled string.
0C50                          ;*Macro unroll: mCOLON  COMPO+3,'do$',DOSTR
0C50                          ;*Macro unroll:  mCODE COMPO+3, "do$", DOSTR
0C50                          ALIGN   2   
0C50                DOSTR:       
0C50                VVCODE:   .SET   $   
0C50                VVLEN:    .SET   (COMPO+3 & 01FH) / CELLL   
162C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
162C                VVNAME:   .SET   $   
162C   50 0C 58 16            DW   vvCODE,vvLINK   
1630                VVLINK:   .SET   $   
1630   23 64 6F 24            DB   COMPO+3,"do$"   
0C50                          .ORG   vvCODE   
0C50   00                     NOP      
0C51   CD 18 06               CALL   doLIST   
0C54   14 10 78 0E 14 10 D6 0E 90 01 DW   RFROM,RAT,RFROM,COUNT,PLUS   
0C5E   CE 0F 06 10 2A 10 06 10 4E 06 DW   ALGND,TOR,SWAP,TOR,EXIT   
0C68                             ;   $"|         ( -- a )
0C68                             ;               Run time routine compiled by $". Return address of a compiled string.
0C68                          ;*Macro unroll: hCOLON  COMPO+3,'$||',STRQP
0C68                          ;*Macro unroll:  hCODE COMPO+3, "$||", STRQP
0C68                          ALIGN   2   
0C68                STRQP:       
0C68   00                     NOP      
0C69   CD 18 06               CALL   doLIST   
0C6C   50 0C 4E 06            DW   DOSTR,EXIT   ;force a call to do$
0C70                             ;   ."|         ( -- )
0C70                             ;               Run time routine of ." . Output a compiled string.
0C70                          ;*Macro unroll: hCOLON  COMPO+3,'.||',DOTQP
0C70                          ;*Macro unroll:  hCODE COMPO+3, ".||", DOTQP
0C70                          ALIGN   2   
0C70                DOTQP:       
0C70   00                     NOP      
0C71   CD 18 06               CALL   doLIST   
0C74   50 0C D6 0E 16 0C 4E 06 DW   DOSTR,COUNT,TYPEE,EXIT   
0C7C                             ;   .R          ( n +n -- )
0C7C                             ;               Display an integer in a field of n columns, right justified.
0C7C                          ;*Macro unroll: mCOLON  2,'.R',DOTR
0C7C                          ;*Macro unroll:  mCODE 2, ".R", DOTR
0C7C                          ALIGN   2   
0C7C                DOTR:        
0C7C                VVCODE:   .SET   $   
0C7C                VVLEN:    .SET   (2 & 01FH) / CELLL   
1624                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1624                VVNAME:   .SET   $   
1624   7C 0C 30 16            DW   vvCODE,vvLINK   
1628                VVLINK:   .SET   $   
1628   02 2E 52               DB   2,".R"   
0C7C                          .ORG   vvCODE   
0C7C   00                     NOP      
0C7D   CD 18 06               CALL   doLIST   
0C80   06 10 30 07 14 10 32 10 CA 01 DW   TOR,STR,RFROM,OVER,SUBB   
0C8A   FE 0B 16 0C 4E 06      DW   SPACS,TYPEE,EXIT   
0C90                             ;   U.R         ( u +n -- )
0C90                             ;               Display an unsigned integer in n column, right justified.
0C90                          ;*Macro unroll: mCOLON  3,'U.R',UDOTR
0C90                          ;*Macro unroll:  mCODE 3, "U.R", UDOTR
0C90                          ALIGN   2   
0C90                UDOTR:       
0C90                VVCODE:   .SET   $   
0C90                VVLEN:    .SET   (3 & 01FH) / CELLL   
161C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
161C                VVNAME:   .SET   $   
161C   90 0C 28 16            DW   vvCODE,vvLINK   
1620                VVLINK:   .SET   $   
1620   03 55 2E 52            DB   3,"U.R"   
0C90                          .ORG   vvCODE   
0C90   00                     NOP      
0C91   CD 18 06               CALL   doLIST   
0C94   06 10 C8 06 FA 06 1E 07 DW   TOR,BDIGS,DIGS,EDIGS   
0C9C   14 10 32 10 CA 01      DW   RFROM,OVER,SUBB   
0CA2   FE 0B 16 0C 4E 06      DW   SPACS,TYPEE,EXIT   
0CA8                             ;   U.          ( u -- )
0CA8                             ;               Display an unsigned integer in free format.
0CA8                          ;*Macro unroll: mCOLON  2,'U.',UDOT
0CA8                          ;*Macro unroll:  mCODE 2, "U.", UDOT
0CA8                          ALIGN   2   
0CA8                UDOT:        
0CA8                VVCODE:   .SET   $   
0CA8                VVLEN:    .SET   (2 & 01FH) / CELLL   
1614                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1614                VVNAME:   .SET   $   
1614   A8 0C 20 16            DW   vvCODE,vvLINK   
1618                VVLINK:   .SET   $   
1618   02 55 2E               DB   2,"U."   
0CA8                          .ORG   vvCODE   
0CA8   00                     NOP      
0CA9   CD 18 06               CALL   doLIST   
0CAC   C8 06 FA 06 1E 07      DW   BDIGS,DIGS,EDIGS   
0CB2   F4 0B 16 0C 4E 06      DW   SPACE,TYPEE,EXIT   
0CB8                             ;   .           ( w -- )
0CB8                             ;               Display an integer in free format, preceeded by a space.
0CB8                          ;*Macro unroll: mCOLON  1,'.',DOT
0CB8                          ;*Macro unroll:  mCODE 1, ".", DOT
0CB8                          ALIGN   2   
0CB8                DOT:         
0CB8                VVCODE:   .SET   $   
0CB8                VVLEN:    .SET   (1 & 01FH) / CELLL   
160E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
160E                VVNAME:   .SET   $   
160E   B8 0C 18 16            DW   vvCODE,vvLINK   
1612                VVLINK:   .SET   $   
1612   01 2E                  DB   1,"."   
0CB8                          .ORG   vvCODE   
0CB8   00                     NOP      
0CB9   CD 18 06               CALL   doLIST   
0CBC   E2 10 60 0E 26 06 0A 00 86 01 DW   BASE,AT,DOLIT,10,XORR   ;?decimal
0CC6   3A 0E CE 0C            DW   QBRAN,DOT1   
0CCA   A8 0C 4E 06            DW   UDOT,EXIT   ;no, display unsigned
0CCE                DOT1:        
0CCE   30 07 F4 0B 16 0C 4E 06 DW   STR,SPACE,TYPEE,EXIT   ;yes, display signed
0CD6                             ;   .(          ( -- )
0CD6                             ;               Output following string up to next ) .
0CD6                          ;*Macro unroll: mCOLON  IMEDD+2,'.(',DOTPR
0CD6                          ;*Macro unroll:  mCODE IMEDD+2, ".(", DOTPR
0CD6                          ALIGN   2   
0CD6                DOTPR:       
0CD6                VVCODE:   .SET   $   
0CD6                VVLEN:    .SET   (IMEDD+2 & 01FH) / CELLL   
15C6                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
15C6                VVNAME:   .SET   $   
15C6   D6 0C 12 16            DW   vvCODE,vvLINK   
15CA                VVLINK:   .SET   $   
15CA   42 2E 28               DB   IMEDD+2,".("   
0CD6                          .ORG   vvCODE   
0CD6   00                     NOP      
0CD7   CD 18 06               CALL   doLIST   
0CDA   26 06 06 09 16 0C 4E 06 DW   DOLIT,")",PARSE,TYPEE,EXIT   
0CE2                             ;   ?           ( a -- )
0CE2                             ;               Display the contents in a memory cell.
0CE2                          ;*Macro unroll: mCOLON  1,'?',QUEST
0CE2                          ;*Macro unroll:  mCODE 1, "?", QUEST
0CE2                          ALIGN   2   
0CE2                QUEST:       
0CE2                VVCODE:   .SET   $   
0CE2                VVLEN:    .SET   (1 & 01FH) / CELLL   
15C0                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
15C0                VVNAME:   .SET   $   
15C0   E2 0C CA 15            DW   vvCODE,vvLINK   
15C4                VVLINK:   .SET   $   
15C4   01 3F                  DB   1,"?"   
0CE2                          .ORG   vvCODE   
0CE2   00                     NOP      
0CE3   CD 18 06               CALL   doLIST   
0CE6   60 0E B8 0C 4E 06      DW   AT,DOT,EXIT   
0CEC                             ;   ^H          ( bot eot cur -- bot eot cur )
0CEC                             ;               Backup the cursor by one character.
0CEC                          ;*Macro unroll: mCOLON  2,'^H',BKSP
0CEC                          ;*Macro unroll:  mCODE 2, "^H", BKSP
0CEC                          ALIGN   2   
0CEC                BKSP:        
0CEC                VVCODE:   .SET   $   
0CEC                VVLEN:    .SET   (2 & 01FH) / CELLL   
15B8                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
15B8                VVNAME:   .SET   $   
15B8   EC 0C C4 15            DW   vvCODE,vvLINK   
15BC                VVLINK:   .SET   $   
15BC   02 5E 48               DB   2,"^H"   
0CEC                          .ORG   vvCODE   
0CEC   00                     NOP      
0CED   CD 18 06               CALL   doLIST   
0CF0   06 10 32 10 14 10 2A 10 32 10 86 01 DW   TOR,OVER,RFROM,SWAP,OVER,XORR   
0CFC   3A 0E 1C 0D            DW   QBRAN,BACK1   
0D00   26 06 08 00 D2 10 0C 0F 26 06 01 00 CA 01 DW   DOLIT,BKSPP,TECHO,ATEXE,DOLIT,1,SUBB   
0D0E   62 07 D2 10 0C 0F      DW   BLANK,TECHO,ATEXE   
0D14   26 06 08 00 D2 10 0C 0F DW   DOLIT,BKSPP,TECHO,ATEXE   
0D1C                BACK1:       
0D1C   4E 06                  DW   EXIT   
0D1E                             ;   TAP         ( bot eot cur c -- bot eot cur )
0D1E                             ;               Accept and echo the key stroke and bump the cursor.
0D1E                          ;*Macro unroll: mCOLON  3,'TAP',TAP
0D1E                          ;*Macro unroll:  mCODE 3, "TAP", TAP
0D1E                          ALIGN   2   
0D1E                TAP:         
0D1E                VVCODE:   .SET   $   
0D1E                VVLEN:    .SET   (3 & 01FH) / CELLL   
15B0                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
15B0                VVNAME:   .SET   $   
15B0   1E 0D BC 15            DW   vvCODE,vvLINK   
15B4                VVLINK:   .SET   $   
15B4   03 54 41 50            DB   3,"TAP"   
0D1E                          .ORG   vvCODE   
0D1E   00                     NOP      
0D1F   CD 18 06               CALL   doLIST   
0D22   22 10 D2 10 0C 0F      DW   DUPP,TECHO,ATEXE   
0D28   32 10 68 0E 26 06 01 00 90 01 4E 06 DW   OVER,CSTOR,DOLIT,1,PLUS,EXIT   
0D34                             ;   kTAP        ( bot eot cur c -- bot eot cur )
0D34                             ;               Process a key stroke, CR or backspace.
0D34                          ;*Macro unroll: mCOLON  4,'kTAP',KTAP
0D34                          ;*Macro unroll:  mCODE 4, "kTAP", KTAP
0D34                          ALIGN   2   
0D34                KTAP:        
0D34                VVCODE:   .SET   $   
0D34                VVLEN:    .SET   (4 & 01FH) / CELLL   
15A6                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
15A6                VVNAME:   .SET   $   
15A6   34 0D B4 15            DW   vvCODE,vvLINK   
15AA                VVLINK:   .SET   $   
15AA   04 6B 54 41 50         DB   4,"kTAP"   
0D34                          .ORG   vvCODE   
0D34   00                     NOP      
0D35   CD 18 06               CALL   doLIST   
0D38   22 10 26 06 0D 00 86 01 DW   DUPP,DOLIT,CRR,XORR   
0D40   3A 0E 58 0D            DW   QBRAN,KTAP2   
0D44   26 06 08 00 86 01      DW   DOLIT,BKSPP,XORR   
0D4A   3A 0E 54 0D            DW   QBRAN,KTAP1   
0D4E   62 07 1E 0D 4E 06      DW   BLANK,TAP,EXIT   
0D54                KTAP1:       
0D54   EC 0C 4E 06            DW   BKSP,EXIT   
0D58                KTAP2:       
0D58   26 10 2A 10 26 10 22 10 4E 06 DW   DROP,SWAP,DROP,DUPP,EXIT   
0D62                             ;   accept      ( b u -- b u )
0D62                             ;               Accept characters to input buffer. Return with actual count.
0D62                          ;*Macro unroll: mCOLON  6,'accept',ACCEP
0D62                          ;*Macro unroll:  mCODE 6, "accept", ACCEP
0D62                          ALIGN   2   
0D62                ACCEP:       
0D62                VVCODE:   .SET   $   
0D62                VVLEN:    .SET   (6 & 01FH) / CELLL   
159A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
159A                VVNAME:   .SET   $   
159A   62 0D AA 15            DW   vvCODE,vvLINK   
159E                VVLINK:   .SET   $   
159E   06 61 63 63 65 70 74   DB   6,"accept"   
0D62                          .ORG   vvCODE   
0D62   00                     NOP      
0D63   CD 18 06               CALL   doLIST   
0D66   32 10 90 01 32 10      DW   OVER,PLUS,OVER   
0D6C                ACCP1:       
0D6C   60 10 86 01            DW   DDUP,XORR   
0D70   3A 0E 92 0D            DW   QBRAN,ACCP4   
0D74   B8 0B 22 10            DW   KEY,DUPP   
0D78   62 07 26 06 7F 00 56 02 DW   BLANK,DOLIT,127,WITHI   
0D80   3A 0E 8A 0D            DW   QBRAN,ACCP2   
0D84   1E 0D                  DW   TAP   
0D86   46 0E 8E 0D            DW   BRAN,ACCP3   
0D8A                ACCP2:       
0D8A   CA 10 0C 0F            DW   TTAP,ATEXE   
0D8E                ACCP3:       
0D8E   46 0E 6C 0D            DW   BRAN,ACCP1   
0D92                ACCP4:       
0D92   26 10 32 10 CA 01 4E 06 DW   DROP,OVER,SUBB,EXIT   
0D9A                             ;   EXPECT      ( b u -- )
0D9A                             ;               Accept input stream and STORE count in SPAN.
0D9A                          ;*Macro unroll: hCOLON  6,'EXPECT',EXPEC
0D9A                          ;*Macro unroll:  hCODE 6, "EXPECT", EXPEC
0D9A                          ALIGN   2   
0D9A                EXPEC:       
0D9A   00                     NOP      
0D9B   CD 18 06               CALL   doLIST   
0D9E   C2 10 0C 0F F2 10 56 0E 26 10 4E 06 DW   TEXPE,ATEXE,SPAN,STORE,DROP,EXIT   
0DAA                             ;   QUERY       ( -- )
0DAA                             ;               Accept input stream to terminal input buffer.
0DAA                          ;*Macro unroll: hCOLON  5,'QUERY',QUERY
0DAA                          ;*Macro unroll:  hCODE 5, "QUERY", QUERY
0DAA                          ALIGN   2   
0DAA                QUERY:       
0DAA   00                     NOP      
0DAB   CD 18 06               CALL   doLIST   
0DAE   00 0F 26 06 50 00 C2 10 0C 0F 02 11 56 0E DW   TIB,DOLIT,80,TEXPE,ATEXE,NTIB,STORE   
0DBC   26 10 26 06 00 00 FA 10 56 0E 4E 06 DW   DROP,DOLIT,0,INN,STORE,EXIT   
0DC8                          ;*Macro unroll: hCOLON	4,'KOLD',KOLD
0DC8                          ;*Macro unroll:  hCODE 4, "KOLD", KOLD
0DC8                          ALIGN   2   
0DC8                KOLD:        
0DC8   00                     NOP      
0DC9   CD 18 06               CALL   doLIST   
0DCC   86 0B                  DW   STOIO   
0DCE                             ; DW	DOLIT, 65, EMIT
0DCE   26 06 D8 0D D6 0E 16 0C DW   DOLIT,HELLO,COUNT,TYPEE   
0DD6   34 0E                  DW   QUIT   
0DD8   0F 48 65 6C 6C 6F 20 46 6F 72 74 68 21 20 0D 0A HELLO:   .PSTR   "Hello Forth! \r\n"   
0DE8                SVEC:        
0DE8   E1                     POP   HL   ; get return address
0DE9   D5                     PUSH   DE   
0DEA   7D                     LD   A,L   ; sub 3
0DEB   D6 03                  SUB   3   
0DED   CB 1F                  RR   A   ; div by 8 / 2 for word offser
0DEF   CB 1F                  RR   A   
0DF1   16 00                  LD   D,0   
0DF3   5F                     LD   E,A   
0DF4                SVEC1:       
0DF4   21 7D 24               LD   HL,VECTAB   
0DF7   19                     ADD   HL,DE   
0DF8   5E                     LD   E,(HL)   
0DF9   23                     INC   HL   
0DFA   56                     LD   D,(HL)   
0DFB   EB                     EX   DE,HL   
0DFC   D1                     POP   DE   
0DFD   E9                     JP   (HL)   
0DFE                NEXT_STEP:      
0DFE   5E                     LD   E,(HL)   ; 7t
0DFF   23                     INC   HL   ; 6t
0E00   56                     LD   D,(HL)   ; 7t
0E01   23                     INC   HL   ; 6t
0E02   EB                     EX   DE,HL   ; 4t
0E03   E9                     JP   (HL)   ; 4t
0E04                          ;*Macro unroll: mCOLON	4,'COLD',COLD
0E04                          ;*Macro unroll:  mCODE 4, "COLD", COLD
0E04                          ALIGN   2   
0E04                COLD:        
0E04                VVCODE:   .SET   $   
0E04                VVLEN:    .SET   (4 & 01FH) / CELLL   
1590                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1590                VVNAME:   .SET   $   
1590   04 0E 9E 15            DW   vvCODE,vvLINK   
1594                VVLINK:   .SET   $   
1594   04 43 4F 4C 44         DB   4,"COLD"   
0E04                          .ORG   vvCODE   
0E04   00                     NOP      
0E05   CD 18 06               CALL   doLIST   
0E08                COLD1:       
0E08   26 06 30 01 26 06 00 24 DW   DOLIT,UZERO,DOLIT,UPP   
0E10   26 06 3A 00 1C 0F      DW   DOLIT,ULAST-UZERO,CMOVE   ;initialize user area
0E16   1E 0E                  DW   PRESE   ;initialize stack and TIB
0E18                             ; DW      TBOOT,ATEXE             ;application boot
0E18                             ; DW      FORTH,CNTXT,AT,DUPP     ;initialize search order
0E18                             ; DW      CRRNT,DSTOR,OVERT
0E18   34 0E                  DW   QUIT   ;start interpretation
0E1A   46 0E 08 0E            DW   BRAN,COLD1   ;just in case
0E1E                             ;   PRESET      ( -- )
0E1E                             ;               Reset data stack pointer and the terminal input buffer.
0E1E                          ;*Macro unroll: mCOLON  6,'PRESET',PRESE
0E1E                          ;*Macro unroll:  mCODE 6, "PRESET", PRESE
0E1E                          ALIGN   2   
0E1E                PRESE:       
0E1E                VVCODE:   .SET   $   
0E1E                VVLEN:    .SET   (6 & 01FH) / CELLL   
1584                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1584                VVNAME:   .SET   $   
1584   1E 0E 94 15            DW   vvCODE,vvLINK   
1588                VVLINK:   .SET   $   
1588   06 50 52 45 53 45 54   DB   6,"PRESET"   
0E1E                          .ORG   vvCODE   
0E1E   00                     NOP      
0E1F   CD 18 06               CALL   doLIST   
0E22   A2 10 60 0E 9C 0E      DW   SZERO,AT,SPSTO   
0E28   26 06 00 22 02 11 8C 03 56 0E 4E 06 DW   DOLIT,TIBB,NTIB,CELLP,STORE,EXIT   
0E34                          ;*Macro unroll: mCODE  4, 'QUIT', QUIT
0E34                          ALIGN   2   
0E34                QUIT:        
0E34                VVCODE:   .SET   $   
0E34                VVLEN:    .SET   (4 & 01FH) / CELLL   
157A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
157A                VVNAME:   .SET   $   
157A   34 0E 88 15            DW   vvCODE,vvLINK   
157E                VVLINK:   .SET   $   
157E   04 51 55 49 54         DB   4,"QUIT"   
0E34                          .ORG   vvCODE   
0E34   76                     HALT      
0E35                             ;   EXECUTE	( i*x xt -- j*x )		\ CORE
0E35                             ;		Perform the semantics indentified by execution token, xt.
0E35                          ;*Macro unroll: mCODE	7,'EXECUTE', EXECU
0E35                          ALIGN   2   
0E36                EXECU:       
0E36                VVCODE:   .SET   $   
0E36                VVLEN:    .SET   (7 & 01FH) / CELLL   
156E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
156E                VVNAME:   .SET   $   
156E   36 0E 7E 15            DW   vvCODE,vvLINK   
1572                VVLINK:   .SET   $   
1572   07 45 58 45 43 55 54 45 DB   7,"EXECUTE"   
0E36                          .ORG   vvCODE   
0E36   60                     LD   H,B   
0E37   69                     LD   L,C   
0E38   C1                     POP   BC   
0E39   E9                     JP   (HL)   
0E3A                             ; 
0E3A                             ;   0BRAN	( flag -- )
0E3A                             ;		BRAN if flag is zero.
0E3A                          ;*Macro unroll: hCODE	COMPO+7,'?branch', QBRAN
0E3A                          ALIGN   2   
0E3A                QBRAN:       
0E3A   78                     LD   A,B   ; 4t
0E3B   B1                     OR   C   ; 4t
0E3C   C1                     POP   BC   ;10t
0E3D   CA 46 0E               JP   Z,BRAN   ;10/7t a fast dec is ok, only
0E40   13                     INC   DE   ; 6t yes,continue past the BRAN offset
0E41   13                     INC   DE   ; 6t
0E42                          ;*Macro unroll: 	mNEXT
0E42   EB                     EX   DE,HL   
0E43                          ;*Macro unroll:  mNEXTHL                         ; 34t
0E43   FD E9                  JP   (IY)   ; 34t
0E45                             ;   BRAN	( -- )
0E45                             ;		BRAN to an inline address.
0E45                          ;*Macro unroll: hCODE	COMPO+6,'branch', BRAN
0E45                          ALIGN   2   
0E46                BRAN:        
0E46   1A                     LD   A,(DE)   ; 7t go back to the loop
0E47   6F                     LD   L,A   ; 4t
0E48   13                     INC   DE   ; 6t
0E49   1A                     LD   A,(DE)   ; 7t
0E4A   67                     LD   H,A   ; 4t
0E4B                          ;*Macro unroll: 	mNEXTHL
0E4B   FD E9                  JP   (IY)   
0E4D                             ; 
0E4D                             ;   THROW    ( cstr -- )
0E4D                             ;   Prints string message and returns TODO: restart Forth interpreter QUIT
0E4D                          ;*Macro unroll: mCOLON	5,'THROWX',THROWX
0E4D                          ;*Macro unroll:  mCODE 5, "THROWX", THROWX
0E4D                          ALIGN   2   
0E4E                THROWX:      
0E4E                VVCODE:   .SET   $   
0E4E                VVLEN:    .SET   (5 & 01FH) / CELLL   
1564                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1564                VVNAME:   .SET   $   
1564   4E 0E 72 15            DW   vvCODE,vvLINK   
1568                VVLINK:   .SET   $   
1568   05 54 48 52 4F 57 58   DB   5,"THROWX"   
0E4E                          .ORG   vvCODE   
0E4E   00                     NOP      
0E4F   CD 18 06               CALL   doLIST   
0E52   34 0C 4E 06            DW   TYPESZ,EXIT   
0E56                             ;   !           ( w a -- )
0E56                             ;               Pop the data stack to memory.
0E56                          ;*Macro unroll: mCODE	1,'!',STORE
0E56                          ALIGN   2   
0E56                STORE:       
0E56                VVCODE:   .SET   $   
0E56                VVLEN:    .SET   (1 & 01FH) / CELLL   
155E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
155E                VVNAME:   .SET   $   
155E   56 0E 68 15            DW   vvCODE,vvLINK   
1562                VVLINK:   .SET   $   
1562   01 21                  DB   1,"!"   
0E56                          .ORG   vvCODE   
0E56   60                     LD   H,B   
0E57   69                     LD   L,C   
0E58   C1                     POP   BC   
0E59   71                     LD   (HL),C   
0E5A   23                     INC   HL   
0E5B   70                     LD   (HL),B   
0E5C   C1                     POP   BC   
0E5D                          ;*Macro unroll: 	mNEXT
0E5D   EB                     EX   DE,HL   
0E5E                          ;*Macro unroll:  mNEXTHL                         ; 34t
0E5E   FD E9                  JP   (IY)   ; 34t
0E60                             ;   @           ( a -- w )
0E60                             ;               Push memory location to the data stack.
0E60                          ;*Macro unroll: mCODE	1,'@', AT
0E60                          ALIGN   2   
0E60                AT:          
0E60                VVCODE:   .SET   $   
0E60                VVLEN:    .SET   (1 & 01FH) / CELLL   
1558                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1558                VVNAME:   .SET   $   
1558   60 0E 62 15            DW   vvCODE,vvLINK   
155C                VVLINK:   .SET   $   
155C   01 40                  DB   1,"@"   
0E60                          .ORG   vvCODE   
0E60   60                     LD   H,B   
0E61   69                     LD   L,C   
0E62   4E                     LD   C,(HL)   
0E63   23                     INC   HL   
0E64   46                     LD   B,(HL)   
0E65                          ;*Macro unroll: 	mNEXT
0E65   EB                     EX   DE,HL   
0E66                          ;*Macro unroll:  mNEXTHL                         ; 34t
0E66   FD E9                  JP   (IY)   ; 34t
0E68                             ;   C!          ( c b -- )
0E68                             ;               Pop the data stack to byte memory.
0E68                          ;*Macro unroll: mCODE	2,'C!',CSTOR
0E68                          ALIGN   2   
0E68                CSTOR:       
0E68                VVCODE:   .SET   $   
0E68                VVLEN:    .SET   (2 & 01FH) / CELLL   
1550                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1550                VVNAME:   .SET   $   
1550   68 0E 5C 15            DW   vvCODE,vvLINK   
1554                VVLINK:   .SET   $   
1554   02 43 21               DB   2,"C!"   
0E68                          .ORG   vvCODE   
0E68   60                     LD   H,B   
0E69   69                     LD   L,C   
0E6A   C1                     POP   BC   
0E6B   71                     LD   (HL),C   
0E6C   C1                     POP   BC   
0E6D                          ;*Macro unroll: 	mNEXT
0E6D   EB                     EX   DE,HL   
0E6E                          ;*Macro unroll:  mNEXTHL                         ; 34t
0E6E   FD E9                  JP   (IY)   ; 34t
0E70                             ;   C@          ( b -- c )
0E70                             ;               Push byte memory location to the data stack.
0E70                          ;*Macro unroll: mCODE	2,'C@',CAT
0E70                          ALIGN   2   
0E70                CAT:         
0E70                VVCODE:   .SET   $   
0E70                VVLEN:    .SET   (2 & 01FH) / CELLL   
1548                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1548                VVNAME:   .SET   $   
1548   70 0E 54 15            DW   vvCODE,vvLINK   
154C                VVLINK:   .SET   $   
154C   02 43 40               DB   2,"C@"   
0E70                          .ORG   vvCODE   
0E70   0A                     LD   A,(BC)   
0E71   4F                     LD   C,A   
0E72   06 00                  LD   B,0   
0E74                          ;*Macro unroll: 	mNEXT
0E74   EB                     EX   DE,HL   
0E75                          ;*Macro unroll:  mNEXTHL                         ; 34t
0E75   FD E9                  JP   (IY)   ; 34t
0E77                             ;   R@          ( -- w )
0E77                             ;               Copy top of return stack to the data stack.
0E77                          ;*Macro unroll: mCODE	COMPO+2,'R@',RAT
0E77                          ALIGN   2   
0E78                RAT:         
0E78                VVCODE:   .SET   $   
0E78                VVLEN:    .SET   (COMPO+2 & 01FH) / CELLL   
1520                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1520                VVNAME:   .SET   $   
1520   78 0E 4C 15            DW   vvCODE,vvLINK   
1524                VVLINK:   .SET   $   
1524   22 52 40               DB   COMPO+2,"R@"   
0E78                          .ORG   vvCODE   
0E78   C5                     PUSH   BC   
0E79   DD 4E 00               LD   C,(IX+0)   
0E7C   DD 46 01               LD   B,(IX+1)   
0E7F                          ;*Macro unroll: 	mNEXT
0E7F   EB                     EX   DE,HL   
0E80                          ;*Macro unroll:  mNEXTHL                         ; 34t
0E80   FD E9                  JP   (IY)   ; 34t
0E82                             ;   RP@         ( -- a )
0E82                             ;               Push the current RP to the data stack
0E82                          ;*Macro unroll: mCODE	COMPO+3, 'rp@', RPAT
0E82                          ALIGN   2   
0E82                RPAT:        
0E82                VVCODE:   .SET   $   
0E82                VVLEN:    .SET   (COMPO+3 & 01FH) / CELLL   
14F8                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
14F8                VVNAME:   .SET   $   
14F8   82 0E 24 15            DW   vvCODE,vvLINK   
14FC                VVLINK:   .SET   $   
14FC   23 72 70 40            DB   COMPO+3,"rp@"   
0E82                          .ORG   vvCODE   
0E82   C5                     DB   0C5h   ; PUSH	BC	;11t
0E83   DD E5                  DB   0DDh,0E5h   ; PUSH IX	;15t
0E85   C1                     DB   0C1h   ; POP	BC	;10t
0E86                          ;*Macro unroll:  mNEXT
0E86   EB                     EX   DE,HL   
0E87                          ;*Macro unroll:  mNEXTHL                         ; 34t
0E87   FD E9                  JP   (IY)   ; 34t
0E89                             ;   RP!         ( a -- )
0E89                             ;               Set the return stack pointer.
0E89                          ;*Macro unroll: mCODE	COMPO+3,'rp!',RPSTO
0E89                          ALIGN   2   
0E8A                RPSTO:       
0E8A                VVCODE:   .SET   $   
0E8A                VVLEN:    .SET   (COMPO+3 & 01FH) / CELLL   
14D0                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
14D0                VVNAME:   .SET   $   
14D0   8A 0E FC 14            DW   vvCODE,vvLINK   
14D4                VVLINK:   .SET   $   
14D4   23 72 70 21            DB   COMPO+3,"rp!"   
0E8A                          .ORG   vvCODE   
0E8A   C5                     DB   0C5h   ; PUSH	BC	;11t
0E8B   DD E1                  DB   0DDh,0E1h   ; POP IX	;14t
0E8D   C1                     DB   0C1h   ; POP	BC	;10t
0E8E                          ;*Macro unroll: 	mNEXT
0E8E   EB                     EX   DE,HL   
0E8F                          ;*Macro unroll:  mNEXTHL                         ; 34t
0E8F   FD E9                  JP   (IY)   ; 34t
0E91                             ;   SP@         ( -- a )
0E91                             ;               Push the current data stack pointer.
0E91                          ;*Macro unroll: mCODE	3, 'sp@', SPAT
0E91                          ALIGN   2   
0E92                SPAT:        
0E92                VVCODE:   .SET   $   
0E92                VVLEN:    .SET   (3 & 01FH) / CELLL   
14C8                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
14C8                VVNAME:   .SET   $   
14C8   92 0E D4 14            DW   vvCODE,vvLINK   
14CC                VVLINK:   .SET   $   
14CC   03 73 70 40            DB   3,"sp@"   
0E92                          .ORG   vvCODE   
0E92   C5                     DB   0C5h   ; PUSH	BC	;11t
0E93   21                     DB   021h   ; LD	HL,0	;10t
0E94   00 00                  DW   0   
0E96   39                     DB   039h   ; ADD	HL,SP	;11t
0E97   44                     DB   044h   ; LD	B,H	; 4t
0E98   4D                     DB   04Dh   ; LD	C,L	; 4t
0E99                          ;*Macro unroll: 	mNEXT
0E99   EB                     EX   DE,HL   
0E9A                          ;*Macro unroll:  mNEXTHL                         ; 34t
0E9A   FD E9                  JP   (IY)   ; 34t
0E9C                             ;   SP!         ( a -- )
0E9C                             ;               Set the data stack pointer.
0E9C                          ;*Macro unroll: mCODE	3,'sp!',SPSTO
0E9C                          ALIGN   2   
0E9C                SPSTO:       
0E9C                VVCODE:   .SET   $   
0E9C                VVLEN:    .SET   (3 & 01FH) / CELLL   
14C0                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
14C0                VVNAME:   .SET   $   
14C0   9C 0E CC 14            DW   vvCODE,vvLINK   
14C4                VVLINK:   .SET   $   
14C4   03 73 70 21            DB   3,"sp!"   
0E9C                          .ORG   vvCODE   
0E9C   60                     DB   060h   ; LD	H,B	; 4t
0E9D   69                     DB   069h   ; LD	L,C	; 4t
0E9E   F9                     DB   0F9h   ; LD	SP,HL	; 6t
0E9F   C1                     DB   0C1h   ; POP	BC	;10t
0EA0                          ;*Macro unroll: 	mNEXT
0EA0   EB                     EX   DE,HL   
0EA1                          ;*Macro unroll:  mNEXTHL                         ; 34t
0EA1   FD E9                  JP   (IY)   ; 34t
0EA3                             ;   +!          ( n a -- )
0EA3                             ;               Add n to the contents at address a.
0EA3                          ;*Macro unroll: mCOLON  2,'+!',PSTOR
0EA3                          ;*Macro unroll:  mCODE 2, "+!", PSTOR
0EA3                          ALIGN   2   
0EA4                PSTOR:       
0EA4                VVCODE:   .SET   $   
0EA4                VVLEN:    .SET   (2 & 01FH) / CELLL   
14B8                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
14B8                VVNAME:   .SET   $   
14B8   A4 0E C4 14            DW   vvCODE,vvLINK   
14BC                VVLINK:   .SET   $   
14BC   02 2B 21               DB   2,"+!"   
0EA4                          .ORG   vvCODE   
0EA4   00                     NOP      
0EA5   CD 18 06               CALL   doLIST   
0EA8   2A 10 32 10 60 0E 90 01 DW   SWAP,OVER,AT,PLUS   
0EB0   2A 10 56 0E 4E 06      DW   SWAP,STORE,EXIT   
0EB6                             ;   2!          ( d a -- )
0EB6                             ;               STORE the double integer to address a.
0EB6                          ;*Macro unroll: mCOLON  2,'2!',DSTOR
0EB6                          ;*Macro unroll:  mCODE 2, "2!", DSTOR
0EB6                          ALIGN   2   
0EB6                DSTOR:       
0EB6                VVCODE:   .SET   $   
0EB6                VVLEN:    .SET   (2 & 01FH) / CELLL   
14B0                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
14B0                VVNAME:   .SET   $   
14B0   B6 0E BC 14            DW   vvCODE,vvLINK   
14B4                VVLINK:   .SET   $   
14B4   02 32 21               DB   2,"2!"   
0EB6                          .ORG   vvCODE   
0EB6   00                     NOP      
0EB7   CD 18 06               CALL   doLIST   
0EBA   2A 10 32 10 56 0E      DW   SWAP,OVER,STORE   
0EC0   8C 03 56 0E 4E 06      DW   CELLP,STORE,EXIT   
0EC6                             ;   2@          ( a -- d )
0EC6                             ;               Fetch double integer from address a.
0EC6                          ;*Macro unroll: mCOLON  2,'2@',DAT
0EC6                          ;*Macro unroll:  mCODE 2, "2@", DAT
0EC6                          ALIGN   2   
0EC6                DAT:         
0EC6                VVCODE:   .SET   $   
0EC6                VVLEN:    .SET   (2 & 01FH) / CELLL   
14A8                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
14A8                VVNAME:   .SET   $   
14A8   C6 0E B4 14            DW   vvCODE,vvLINK   
14AC                VVLINK:   .SET   $   
14AC   02 32 40               DB   2,"2@"   
0EC6                          .ORG   vvCODE   
0EC6   00                     NOP      
0EC7   CD 18 06               CALL   doLIST   
0ECA   22 10 8C 03 60 0E      DW   DUPP,CELLP,AT   
0ED0   2A 10 60 0E 4E 06      DW   SWAP,AT,EXIT   
0ED6                             ;   COUNT       ( b -- b +n )
0ED6                             ;               Return count byte of a string and add 1 to byte address.
0ED6                          ;*Macro unroll: mCOLON  5,'COUNT',COUNT
0ED6                          ;*Macro unroll:  mCODE 5, "COUNT", COUNT
0ED6                          ALIGN   2   
0ED6                COUNT:       
0ED6                VVCODE:   .SET   $   
0ED6                VVLEN:    .SET   (5 & 01FH) / CELLL   
149E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
149E                VVNAME:   .SET   $   
149E   D6 0E AC 14            DW   vvCODE,vvLINK   
14A2                VVLINK:   .SET   $   
14A2   05 43 4F 55 4E 54      DB   5,"COUNT"   
0ED6                          .ORG   vvCODE   
0ED6   00                     NOP      
0ED7   CD 18 06               CALL   doLIST   
0EDA   22 10 26 06 01 00 90 01 DW   DUPP,DOLIT,1,PLUS   
0EE2   2A 10 70 0E 4E 06      DW   SWAP,CAT,EXIT   
0EE8                             ;   HERE        ( -- a )
0EE8                             ;               Return the top of the code dictionary.
0EE8                          ;*Macro unroll: mCOLON  4,'HERE',HERE
0EE8                          ;*Macro unroll:  mCODE 4, "HERE", HERE
0EE8                          ALIGN   2   
0EE8                HERE:        
0EE8                VVCODE:   .SET   $   
0EE8                VVLEN:    .SET   (4 & 01FH) / CELLL   
1494                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1494                VVNAME:   .SET   $   
1494   E8 0E A2 14            DW   vvCODE,vvLINK   
1498                VVLINK:   .SET   $   
1498   04 48 45 52 45         DB   4,"HERE"   
0EE8                          .ORG   vvCODE   
0EE8   00                     NOP      
0EE9   CD 18 06               CALL   doLIST   
0EEC   42 11 60 0E 4E 06      DW   CP,AT,EXIT   
0EF2                             ;   PAD         ( -- a )
0EF2                             ;               Return the address of a temporary buffer.
0EF2                          ;*Macro unroll: mCOLON  3,'PAD',PAD
0EF2                          ;*Macro unroll:  mCODE 3, "PAD", PAD
0EF2                          ALIGN   2   
0EF2                PAD:         
0EF2                VVCODE:   .SET   $   
0EF2                VVLEN:    .SET   (3 & 01FH) / CELLL   
148C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
148C                VVNAME:   .SET   $   
148C   F2 0E 98 14            DW   vvCODE,vvLINK   
1490                VVLINK:   .SET   $   
1490   03 50 41 44            DB   3,"PAD"   
0EF2                          .ORG   vvCODE   
0EF2   00                     NOP      
0EF3   CD 18 06               CALL   doLIST   
0EF6   E8 0E 26 06 50 00 90 01 4E 06 DW   HERE,DOLIT,80,PLUS,EXIT   
0F00                             ;   TIB         ( -- a )
0F00                             ;               Return the address of the terminal input buffer.
0F00                          ;*Macro unroll: mCOLON  3,'TIB',TIB
0F00                          ;*Macro unroll:  mCODE 3, "TIB", TIB
0F00                          ALIGN   2   
0F00                TIB:         
0F00                VVCODE:   .SET   $   
0F00                VVLEN:    .SET   (3 & 01FH) / CELLL   
1484                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1484                VVNAME:   .SET   $   
1484   00 0F 90 14            DW   vvCODE,vvLINK   
1488                VVLINK:   .SET   $   
1488   03 54 49 42            DB   3,"TIB"   
0F00                          .ORG   vvCODE   
0F00   00                     NOP      
0F01   CD 18 06               CALL   doLIST   
0F04   02 11 8C 03 60 0E 4E 06 DW   NTIB,CELLP,AT,EXIT   
0F0C                             ;   @EXECUTE    ( a -- )
0F0C                             ;               Execute vector STOREd in address a.
0F0C                          ;*Macro unroll: hCOLON  8,'@EXECUTE',ATEXE
0F0C                          ;*Macro unroll:  hCODE 8, "@EXECUTE", ATEXE
0F0C                          ALIGN   2   
0F0C                ATEXE:       
0F0C   00                     NOP      
0F0D   CD 18 06               CALL   doLIST   
0F10   60 0E 3A 10            DW   AT,QDUP   ;?address or zero
0F14   3A 0E 1A 0F            DW   QBRAN,EXE1   
0F18   36 0E                  DW   EXECU   ;execute if non-zero
0F1A                EXE1:        
0F1A   4E 06                  DW   EXIT   ;do nothing if zero
0F1C                             ;   CMOVE       ( b1 b2 u -- )
0F1C                             ;               Copy u bytes from b1 to b2.
0F1C                          ;*Macro unroll: mCOLON  5,'CMOVE',CMOVE
0F1C                          ;*Macro unroll:  mCODE 5, "CMOVE", CMOVE
0F1C                          ALIGN   2   
0F1C                CMOVE:       
0F1C                VVCODE:   .SET   $   
0F1C                VVLEN:    .SET   (5 & 01FH) / CELLL   
147A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
147A                VVNAME:   .SET   $   
147A   1C 0F 88 14            DW   vvCODE,vvLINK   
147E                VVLINK:   .SET   $   
147E   05 43 4D 4F 56 45      DB   5,"CMOVE"   
0F1C                          .ORG   vvCODE   
0F1C   00                     NOP      
0F1D   CD 18 06               CALL   doLIST   
0F20   06 10                  DW   TOR   
0F22   46 0E 3E 0F            DW   BRAN,CMOV2   
0F26                CMOV1:       
0F26   06 10 22 10 70 0E      DW   TOR,DUPP,CAT   
0F2C   78 0E 68 0E            DW   RAT,CSTOR   
0F30   26 06 01 00 90 01      DW   DOLIT,1,PLUS   
0F36   14 10 26 06 01 00 90 01 DW   RFROM,DOLIT,1,PLUS   
0F3E                CMOV2:       
0F3E   7C 06 26 0F            DW   DONXT,CMOV1   
0F42   56 10 4E 06            DW   DDROP,EXIT   
0F46                             ;   FILL        ( b u c -- )
0F46                             ;               Fill u bytes of character c to area beginning at b.
0F46                          ;*Macro unroll: mCOLON  4,'FILL',FILL
0F46                          ;*Macro unroll:  mCODE 4, "FILL", FILL
0F46                          ALIGN   2   
0F46                FILL:        
0F46                VVCODE:   .SET   $   
0F46                VVLEN:    .SET   (4 & 01FH) / CELLL   
1470                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1470                VVNAME:   .SET   $   
1470   46 0F 7E 14            DW   vvCODE,vvLINK   
1474                VVLINK:   .SET   $   
1474   04 46 49 4C 4C         DB   4,"FILL"   
0F46                          .ORG   vvCODE   
0F46   00                     NOP      
0F47   CD 18 06               CALL   doLIST   
0F4A   2A 10 06 10 2A 10      DW   SWAP,TOR,SWAP   
0F50   46 0E 5E 0F            DW   BRAN,FILL2   
0F54                FILL1:       
0F54   60 10 68 0E 26 06 01 00 90 01 DW   DDUP,CSTOR,DOLIT,1,PLUS   
0F5E                FILL2:       
0F5E   7C 06 54 0F            DW   DONXT,FILL1   
0F62   56 10 4E 06            DW   DDROP,EXIT   
0F66                             ;   -TRAILING   ( b u -- b u )
0F66                             ;               Adjust the count to eliminate trailing white space.
0F66                          ;*Macro unroll: mCOLON  9,'-TRAILING',DTRAI
0F66                          ;*Macro unroll:  mCODE 9, "-TRAILING", DTRAI
0F66                          ALIGN   2   
0F66                DTRAI:       
0F66                VVCODE:   .SET   $   
0F66                VVLEN:    .SET   (9 & 01FH) / CELLL   
1462                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1462                VVNAME:   .SET   $   
1462   66 0F 74 14            DW   vvCODE,vvLINK   
1466                VVLINK:   .SET   $   
1466   09 2D 54 52 41 49 4C 49 4E 47 DB   9,"-TRAILING"   
0F66                          .ORG   vvCODE   
0F66   00                     NOP      
0F67   CD 18 06               CALL   doLIST   
0F6A   06 10                  DW   TOR   
0F6C   46 0E 8A 0F            DW   BRAN,DTRA2   
0F70                DTRA1:       
0F70   62 07 32 10 78 0E 90 01 70 0E 16 02 DW   BLANK,OVER,RAT,PLUS,CAT,LESS   
0F7C   3A 0E 8A 0F            DW   QBRAN,DTRA2   
0F80   14 10 26 06 01 00 90 01 4E 06 DW   RFROM,DOLIT,1,PLUS,EXIT   ;adjusted count
0F8A                DTRA2:       
0F8A   7C 06 70 0F            DW   DONXT,DTRA1   
0F8E   26 06 00 00 4E 06      DW   DOLIT,0,EXIT   ;count=0
0F94                             ;   PACK$       ( b u a -- a )
0F94                             ;               Build a counted string with u characters from b. Null fill.
0F94                          ;*Macro unroll: mCOLON  5,'PACK$',PACKS
0F94                          ;*Macro unroll:  mCODE 5, "PACK$", PACKS
0F94                          ALIGN   2   
0F94                PACKS:       
0F94                VVCODE:   .SET   $   
0F94                VVLEN:    .SET   (5 & 01FH) / CELLL   
1458                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1458                VVNAME:   .SET   $   
1458   94 0F 66 14            DW   vvCODE,vvLINK   
145C                VVLINK:   .SET   $   
145C   05 50 41 43 4B 24      DB   5,"PACK$"   
0F94                          .ORG   vvCODE   
0F94   00                     NOP      
0F95   CD 18 06               CALL   doLIST   
0F98   CE 0F 22 10 06 10      DW   ALGND,DUPP,TOR   ;strings only on cell boundary
0F9E   32 10 22 10 26 06 00 00 DW   OVER,DUPP,DOLIT,0   
0FA6   26 06 02 00 74 02 26 10 DW   DOLIT,CELLL,UMMOD,DROP   ;count mod cell
0FAE   CA 01 32 10 90 01      DW   SUBB,OVER,PLUS   
0FB4   26 06 00 00 2A 10 56 0E DW   DOLIT,0,SWAP,STORE   ;null fill cell
0FBC   60 10 68 0E 26 06 01 00 90 01 DW   DDUP,CSTOR,DOLIT,1,PLUS   ;save count
0FC6   2A 10 1C 0F 14 10 4E 06 DW   SWAP,CMOVE,RFROM,EXIT   ;move string
0FCE                             ;   ALIGNED     ( b -- a )
0FCE                             ;               Align address to the cell boundary.
0FCE                          ;*Macro unroll: mCOLON  7,'ALIGNED', ALGND
0FCE                          ;*Macro unroll:  mCODE 7, "ALIGNED", ALGND
0FCE                          ALIGN   2   
0FCE                ALGND:       
0FCE                VVCODE:   .SET   $   
0FCE                VVLEN:    .SET   (7 & 01FH) / CELLL   
144C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
144C                VVNAME:   .SET   $   
144C   CE 0F 5C 14            DW   vvCODE,vvLINK   
1450                VVLINK:   .SET   $   
1450   07 41 4C 49 47 4E 45 44 DB   7,"ALIGNED"   
0FCE                          .ORG   vvCODE   
0FCE   00                     NOP      
0FCF   CD 18 06               CALL   doLIST   
0FD2   22 10 26 06 00 00 26 06 02 00 DW   DUPP,DOLIT,0,DOLIT,CELLL   
0FDC   74 02 26 10 22 10      DW   UMMOD,DROP,DUPP   
0FE2   3A 0E EE 0F            DW   QBRAN,ALGN1   
0FE6   26 06 02 00 2A 10 CA 01 DW   DOLIT,CELLL,SWAP,SUBB   
0FEE                ALGN1:       
0FEE   90 01 4E 06            DW   PLUS,EXIT   
0FF2                             ; GREETING:       .cstr   "Type something\r\n"
0FF2   44 49 56 5A 45 52 4F 00 ERR_DIVZERO:   .CSTR   "DIVZERO"   ;-10
0FFA   4F 55 54 4F 46 52 41 4E 47 45 00 ERR_OUTOFRANGE:   .CSTR   "OUTOFRANGE"   ;-11
1005                             ;   >R          ( w -- )
1005                             ;               Push the data stack to the return stack.
1005                          ;*Macro unroll: mCODE	COMPO+2, '>R', ToR
1005                          ALIGN   2   
1006                TOR:         
1006                VVCODE:   .SET   $   
1006                VVLEN:    .SET   (COMPO+2 & 01FH) / CELLL   
1424                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1424                VVNAME:   .SET   $   
1424   06 10 50 14            DW   vvCODE,vvLINK   
1428                VVLINK:   .SET   $   
1428   22 3E 52               DB   COMPO+2,">R"   
1006                          .ORG   vvCODE   
1006   DD 2B                  DEC   IX   
1008   DD 70 00               LD   (IX+0),B   
100B   DD 2B                  DEC   IX   
100D   DD 71 00               LD   (IX+0),C   
1010   C1                     POP   BC   
1011                          ;*Macro unroll: 	mNEXT
1011   EB                     EX   DE,HL   
1012                          ;*Macro unroll:  mNEXTHL                         ; 34t
1012   FD E9                  JP   (IY)   ; 34t
1014                             ;   R>          ( -- w )
1014                             ;               Pop the return stack to the data stack.
1014                          ;*Macro unroll: mCODE	COMPO+2, 'R>', RFrom
1014                          ALIGN   2   
1014                RFROM:       
1014                VVCODE:   .SET   $   
1014                VVLEN:    .SET   (COMPO+2 & 01FH) / CELLL   
13FC                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
13FC                VVNAME:   .SET   $   
13FC   14 10 28 14            DW   vvCODE,vvLINK   
1400                VVLINK:   .SET   $   
1400   22 52 3E               DB   COMPO+2,"R>"   
1014                          .ORG   vvCODE   
1014   C5                     PUSH   BC   
1015   DD 4E 00               LD   C,(IX+0)   
1018   DD 23                  INC   IX   
101A   DD 46 00               LD   B,(IX+0)   
101D   DD 23                  INC   IX   
101F                          ;*Macro unroll: 	mNEXT
101F   EB                     EX   DE,HL   
1020                          ;*Macro unroll:  mNEXTHL                         ; 34t
1020   FD E9                  JP   (IY)   ; 34t
1022                             ;   DUP         ( w -- w w )
1022                             ;               Duplicate the top stack item.
1022                          ;*Macro unroll: mCODE	3, 'DUP', DUPP
1022                          ALIGN   2   
1022                DUPP:        
1022                VVCODE:   .SET   $   
1022                VVLEN:    .SET   (3 & 01FH) / CELLL   
13F4                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
13F4                VVNAME:   .SET   $   
13F4   22 10 00 14            DW   vvCODE,vvLINK   
13F8                VVLINK:   .SET   $   
13F8   03 44 55 50            DB   3,"DUP"   
1022                          .ORG   vvCODE   
1022   C5                     PUSH   BC   
1023                          ;*Macro unroll:  mNEXT
1023   EB                     EX   DE,HL   
1024                          ;*Macro unroll:  mNEXTHL                         ; 34t
1024   FD E9                  JP   (IY)   ; 34t
1026                             ;   DROP	( x -- )			\ CORE
1026                             ;		Discard top stack item.
1026                          ;*Macro unroll: mCODE	4, 'DROP', DROP
1026                          ALIGN   2   
1026                DROP:        
1026                VVCODE:   .SET   $   
1026                VVLEN:    .SET   (4 & 01FH) / CELLL   
13EA                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
13EA                VVNAME:   .SET   $   
13EA   26 10 F8 13            DW   vvCODE,vvLINK   
13EE                VVLINK:   .SET   $   
13EE   04 44 52 4F 50         DB   4,"DROP"   
1026                          .ORG   vvCODE   
1026   C1                     POP   BC   
1027                          ;*Macro unroll:  mNEXT
1027   EB                     EX   DE,HL   
1028                          ;*Macro unroll:  mNEXTHL                         ; 34t
1028   FD E9                  JP   (IY)   ; 34t
102A                             ;   SWAP        ( w1 w2 -- w2 w1 )
102A                             ;               Exchange top two stack items.
102A                          ;*Macro unroll: mCODE	4, 'SWAP', SWAP
102A                          ALIGN   2   
102A                SWAP:        
102A                VVCODE:   .SET   $   
102A                VVLEN:    .SET   (4 & 01FH) / CELLL   
13E0                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
13E0                VVNAME:   .SET   $   
13E0   2A 10 EE 13            DW   vvCODE,vvLINK   
13E4                VVLINK:   .SET   $   
13E4   04 53 57 41 50         DB   4,"SWAP"   
102A                          .ORG   vvCODE   
102A   E1                     POP   HL   
102B   C5                     PUSH   BC   
102C   44                     LD   B,H   
102D   4D                     LD   C,L   
102E                          ;*Macro unroll: 	mNEXT
102E   EB                     EX   DE,HL   
102F                          ;*Macro unroll:  mNEXTHL                         ; 34t
102F   FD E9                  JP   (IY)   ; 34t
1031                             ;   OVER        ( w1 w2 -- w1 w2 w1 )
1031                             ;               Copy second stack item to top.
1031                          ;*Macro unroll: mCODE	4, 'OVER', OVER
1031                          ALIGN   2   
1032                OVER:        
1032                VVCODE:   .SET   $   
1032                VVLEN:    .SET   (4 & 01FH) / CELLL   
13D6                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
13D6                VVNAME:   .SET   $   
13D6   32 10 E4 13            DW   vvCODE,vvLINK   
13DA                VVLINK:   .SET   $   
13DA   04 4F 56 45 52         DB   4,"OVER"   
1032                          .ORG   vvCODE   
1032   E1                     POP   HL   
1033   E5                     PUSH   HL   
1034   C5                     PUSH   BC   
1035   44                     LD   B,H   
1036   4D                     LD   C,L   
1037                          ;*Macro unroll: 	mNEXT
1037   EB                     EX   DE,HL   
1038                          ;*Macro unroll:  mNEXTHL                         ; 34t
1038   FD E9                  JP   (IY)   ; 34t
103A                             ;   ?DUP        ( w -- w w | 0 )
103A                             ;               Dup tos if its is not zero.
103A                          ;*Macro unroll: mCOLON	4,'?DUP', QDUP
103A                          ;*Macro unroll:  mCODE 4, "?DUP", QDUP
103A                          ALIGN   2   
103A                QDUP:        
103A                VVCODE:   .SET   $   
103A                VVLEN:    .SET   (4 & 01FH) / CELLL   
13CC                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
13CC                VVNAME:   .SET   $   
13CC   3A 10 DA 13            DW   vvCODE,vvLINK   
13D0                VVLINK:   .SET   $   
13D0   04 3F 44 55 50         DB   4,"?DUP"   
103A                          .ORG   vvCODE   
103A   00                     NOP      
103B   CD 18 06               CALL   doLIST   
103E   22 10 3A 0E 46 10      DW   DUPP,QBRAN,QDUP1   
1044   22 10                  DW   DUPP   
1046                QDUP1:       
1046   4E 06                  DW   EXIT   
1048                             ;   ROT         ( w1 w2 w3 -- w2 w3 w1 )
1048                             ;               Rot 3rd item to top.
1048                          ;*Macro unroll: mCOLON	3,'ROT', ROT
1048                          ;*Macro unroll:  mCODE 3, "ROT", ROT
1048                          ALIGN   2   
1048                ROT:         
1048                VVCODE:   .SET   $   
1048                VVLEN:    .SET   (3 & 01FH) / CELLL   
13C4                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
13C4                VVNAME:   .SET   $   
13C4   48 10 D0 13            DW   vvCODE,vvLINK   
13C8                VVLINK:   .SET   $   
13C8   03 52 4F 54            DB   3,"ROT"   
1048                          .ORG   vvCODE   
1048   00                     NOP      
1049   CD 18 06               CALL   doLIST   
104C   06 10 2A 10 14 10 2A 10 4E 06 DW   ToR,SWAP,RFrom,SWAP,EXIT   
1056                             ;   2DROP       ( w w -- )
1056                             ;               Discard two items on stack.
1056                          ;*Macro unroll: mCOLON	5,'2DROP',DDROP
1056                          ;*Macro unroll:  mCODE 5, "2DROP", DDROP
1056                          ALIGN   2   
1056                DDROP:       
1056                VVCODE:   .SET   $   
1056                VVLEN:    .SET   (5 & 01FH) / CELLL   
13BA                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
13BA                VVNAME:   .SET   $   
13BA   56 10 C8 13            DW   vvCODE,vvLINK   
13BE                VVLINK:   .SET   $   
13BE   05 32 44 52 4F 50      DB   5,"2DROP"   
1056                          .ORG   vvCODE   
1056   00                     NOP      
1057   CD 18 06               CALL   doLIST   
105A   26 10 26 10 4E 06      DW   DROP,DROP,EXIT   
1060                             ;   2DUP        ( w1 w2 -- w1 w2 w1 w2 )
1060                             ;               Duplicate top two items.
1060                          ;*Macro unroll: mCOLON	4,'2DUP',DDUP
1060                          ;*Macro unroll:  mCODE 4, "2DUP", DDUP
1060                          ALIGN   2   
1060                DDUP:        
1060                VVCODE:   .SET   $   
1060                VVLEN:    .SET   (4 & 01FH) / CELLL   
13B0                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
13B0                VVNAME:   .SET   $   
13B0   60 10 BE 13            DW   vvCODE,vvLINK   
13B4                VVLINK:   .SET   $   
13B4   04 32 44 55 50         DB   4,"2DUP"   
1060                          .ORG   vvCODE   
1060   00                     NOP      
1061   CD 18 06               CALL   doLIST   
1064   32 10 32 10 4E 06      DW   OVER,OVER,EXIT   
106A                             ;   2SWAP        ( w1 w2 w3 w4 -- w3 w4 w1 w2 )
106A                             ;               Exchange top two items.
106A                          ;*Macro unroll: mCOLON	5,'2SWAP',TwoSWAP
106A                          ;*Macro unroll:  mCODE 5, "2SWAP", TwoSWAP
106A                          ALIGN   2   
106A                TWOSWAP:      
106A                VVCODE:   .SET   $   
106A                VVLEN:    .SET   (5 & 01FH) / CELLL   
13A6                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
13A6                VVNAME:   .SET   $   
13A6   6A 10 B4 13            DW   vvCODE,vvLINK   
13AA                VVLINK:   .SET   $   
13AA   05 32 53 57 41 50      DB   5,"2SWAP"   
106A                          .ORG   vvCODE   
106A   00                     NOP      
106B   CD 18 06               CALL   doLIST   
106E   48 10 06 10 48 10 14 10 4E 06 DW   ROT,ToR,ROT,RFrom,EXIT   
1078                             ;   PICK        ( ... +n -- ... w )
1078                             ;               Copy the nth stack item to tos.
1078                          ;*Macro unroll: mCOLON  4,'PICK',PICK
1078                          ;*Macro unroll:  mCODE 4, "PICK", PICK
1078                          ALIGN   2   
1078                PICK:        
1078                VVCODE:   .SET   $   
1078                VVLEN:    .SET   (4 & 01FH) / CELLL   
139C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
139C                VVNAME:   .SET   $   
139C   78 10 AA 13            DW   vvCODE,vvLINK   
13A0                VVLINK:   .SET   $   
13A0   04 50 49 43 4B         DB   4,"PICK"   
1078                          .ORG   vvCODE   
1078   00                     NOP      
1079   CD 18 06               CALL   doLIST   
107C   26 06 01 00 90 01 A4 03 DW   DOLIT,1,PLUS,CELLS   
1084   92 0E 90 01 60 0E 4E 06 DW   SPAT,PLUS,AT,EXIT   
108C                             ;   DEPTH       ( -- n )
108C                             ;               Return the depth of the data stack.
108C                          ;*Macro unroll: mCOLON	5,'DEPTH',DEPTH
108C                          ;*Macro unroll:  mCODE 5, "DEPTH", DEPTH
108C                          ALIGN   2   
108C                DEPTH:       
108C                VVCODE:   .SET   $   
108C                VVLEN:    .SET   (5 & 01FH) / CELLL   
1392                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1392                VVNAME:   .SET   $   
1392   8C 10 A0 13            DW   vvCODE,vvLINK   
1396                VVLINK:   .SET   $   
1396   05 44 45 50 54 48      DB   5,"DEPTH"   
108C                          .ORG   vvCODE   
108C   00                     NOP      
108D   CD 18 06               CALL   doLIST   
1090   92 0E A2 10 60 0E 2A 10 CA 01 DW   SPAT,SZero,AT,SWAP,SUBB   
109A   26 06 02 00 22 03 4E 06 DW   DOLIT,CELLL,Slash,EXIT   
10A2                             ;   SP0         ( -- a )
10A2                             ;               Pointer to bottom of the data stack.
10A2                          ;*Macro unroll: mUSER   3,'SP0',SZERO
10A2                          ;*Macro unroll: 	mCODE 3, "SP0", SZERO
10A2                          ALIGN   2   
10A2                SZERO:       
10A2                VVCODE:   .SET   $   
10A2                VVLEN:    .SET   (3 & 01FH) / CELLL   
138A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
138A                VVNAME:   .SET   $   
138A   A2 10 96 13            DW   vvCODE,vvLINK   
138E                VVLINK:   .SET   $   
138E   03 53 50 30            DB   3,"SP0"   
10A2                          .ORG   vvCODE   
10A2   00                     NOP      
10A3   CD 18 06               CALL   doLIST   
10A6   3E 06 00 00            DW   DoUSE,vvUSER   
10AA                VVUSER:   .SET   vvUSER + CELLL   
10AA                             ;   RP0         ( -- a )
10AA                             ;               Pointer to bottom of the return stack.
10AA                          ;*Macro unroll: mUSER   3,'RP0',RZERO
10AA                          ;*Macro unroll: 	mCODE 3, "RP0", RZERO
10AA                          ALIGN   2   
10AA                RZERO:       
10AA                VVCODE:   .SET   $   
10AA                VVLEN:    .SET   (3 & 01FH) / CELLL   
1382                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1382                VVNAME:   .SET   $   
1382   AA 10 8E 13            DW   vvCODE,vvLINK   
1386                VVLINK:   .SET   $   
1386   03 52 50 30            DB   3,"RP0"   
10AA                          .ORG   vvCODE   
10AA   00                     NOP      
10AB   CD 18 06               CALL   doLIST   
10AE   3E 06 02 00            DW   DoUSE,vvUSER   
10B2                VVUSER:   .SET   vvUSER + CELLL   
10B2                             ;   '?KEY       ( -- a )
10B2                             ;               Execution vector of ?KEY.
10B2                          ;*Macro unroll: hUSER   5,"'?KEY",TQKEY
10B2                          ;*Macro unroll: 	hCODE 5, "'?KEY", TQKEY
10B2                          ALIGN   2   
10B2                TQKEY:       
10B2   00                     NOP      
10B3   CD 18 06               CALL   doLIST   
10B6   3E 06 04 00            DW   DoUSE,vvUSER   
10BA                VVUSER:   .SET   vvUSER + CELLL   
10BA                             ;   'EMIT       ( -- a )
10BA                             ;               Execution vector of EMIT.
10BA                          ;*Macro unroll: hUSER   5,"'EMIT",TEMIT
10BA                          ;*Macro unroll: 	hCODE 5, "'EMIT", TEMIT
10BA                          ALIGN   2   
10BA                TEMIT:       
10BA   00                     NOP      
10BB   CD 18 06               CALL   doLIST   
10BE   3E 06 06 00            DW   DoUSE,vvUSER   
10C2                VVUSER:   .SET   vvUSER + CELLL   
10C2                             ;   'EXPECT     ( -- a )
10C2                             ;               Execution vector of EXPECT.
10C2                          ;*Macro unroll: hUSER   7,"'EXPECT",TEXPE
10C2                          ;*Macro unroll: 	hCODE 7, "'EXPECT", TEXPE
10C2                          ALIGN   2   
10C2                TEXPE:       
10C2   00                     NOP      
10C3   CD 18 06               CALL   doLIST   
10C6   3E 06 08 00            DW   DoUSE,vvUSER   
10CA                VVUSER:   .SET   vvUSER + CELLL   
10CA                             ;   'TAP        ( -- a )
10CA                             ;               Execution vector of TAP.
10CA                          ;*Macro unroll: hUSER   4,"'TAP",TTAP
10CA                          ;*Macro unroll: 	hCODE 4, "'TAP", TTAP
10CA                          ALIGN   2   
10CA                TTAP:        
10CA   00                     NOP      
10CB   CD 18 06               CALL   doLIST   
10CE   3E 06 0A 00            DW   DoUSE,vvUSER   
10D2                VVUSER:   .SET   vvUSER + CELLL   
10D2                             ;   'ECHO       ( -- a )
10D2                             ;               Execution vector of ECHO.
10D2                          ;*Macro unroll: hUSER   5,"'ECHO",TECHO
10D2                          ;*Macro unroll: 	hCODE 5, "'ECHO", TECHO
10D2                          ALIGN   2   
10D2                TECHO:       
10D2   00                     NOP      
10D3   CD 18 06               CALL   doLIST   
10D6   3E 06 0C 00            DW   DoUSE,vvUSER   
10DA                VVUSER:   .SET   vvUSER + CELLL   
10DA                             ;   'PROMPT     ( -- a )
10DA                             ;               Execution vector of PROMPT.
10DA                          ;*Macro unroll: hUSER   7,"'PROMPT",TPROM
10DA                          ;*Macro unroll: 	hCODE 7, "'PROMPT", TPROM
10DA                          ALIGN   2   
10DA                TPROM:       
10DA   00                     NOP      
10DB   CD 18 06               CALL   doLIST   
10DE   3E 06 0E 00            DW   DoUSE,vvUSER   
10E2                VVUSER:   .SET   vvUSER + CELLL   
10E2                             ;   BASE        ( -- a )
10E2                             ;               Storage of the radix base for numeric I/O.
10E2                          ;*Macro unroll: mUSER   4,'BASE',BASE
10E2                          ;*Macro unroll: 	mCODE 4, "BASE", BASE
10E2                          ALIGN   2   
10E2                BASE:        
10E2                VVCODE:   .SET   $   
10E2                VVLEN:    .SET   (4 & 01FH) / CELLL   
1378                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1378                VVNAME:   .SET   $   
1378   E2 10 86 13            DW   vvCODE,vvLINK   
137C                VVLINK:   .SET   $   
137C   04 42 41 53 45         DB   4,"BASE"   
10E2                          .ORG   vvCODE   
10E2   00                     NOP      
10E3   CD 18 06               CALL   doLIST   
10E6   3E 06 10 00            DW   DoUSE,vvUSER   
10EA                VVUSER:   .SET   vvUSER + CELLL   
10EA                             ;   tmp         ( -- a )
10EA                             ;               A temporary storage location used in parse and find.
10EA                          ;*Macro unroll: mUSER   COMPO+3,'tmp',TEMP
10EA                          ;*Macro unroll: 	mCODE COMPO+3, "tmp", TEMP
10EA                          ALIGN   2   
10EA                TEMP:        
10EA                VVCODE:   .SET   $   
10EA                VVLEN:    .SET   (COMPO+3 & 01FH) / CELLL   
1350                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1350                VVNAME:   .SET   $   
1350   EA 10 7C 13            DW   vvCODE,vvLINK   
1354                VVLINK:   .SET   $   
1354   23 74 6D 70            DB   COMPO+3,"tmp"   
10EA                          .ORG   vvCODE   
10EA   00                     NOP      
10EB   CD 18 06               CALL   doLIST   
10EE   3E 06 12 00            DW   DoUSE,vvUSER   
10F2                VVUSER:   .SET   vvUSER + CELLL   
10F2                             ;   SPAN        ( -- a )
10F2                             ;               Hold character count received by EXPECT.
10F2                          ;*Macro unroll: hUSER   4,'SPAN',SPAN
10F2                          ;*Macro unroll: 	hCODE 4, "SPAN", SPAN
10F2                          ALIGN   2   
10F2                SPAN:        
10F2   00                     NOP      
10F3   CD 18 06               CALL   doLIST   
10F6   3E 06 14 00            DW   DoUSE,vvUSER   
10FA                VVUSER:   .SET   vvUSER + CELLL   
10FA                             ;   >IN         ( -- a )
10FA                             ;               Hold the character pointer while parsing input stream.
10FA                          ;*Macro unroll: mUSER   3,'>IN',INN
10FA                          ;*Macro unroll: 	mCODE 3, ">IN", INN
10FA                          ALIGN   2   
10FA                INN:         
10FA                VVCODE:   .SET   $   
10FA                VVLEN:    .SET   (3 & 01FH) / CELLL   
1348                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1348                VVNAME:   .SET   $   
1348   FA 10 54 13            DW   vvCODE,vvLINK   
134C                VVLINK:   .SET   $   
134C   03 3E 49 4E            DB   3,">IN"   
10FA                          .ORG   vvCODE   
10FA   00                     NOP      
10FB   CD 18 06               CALL   doLIST   
10FE   3E 06 16 00            DW   DoUSE,vvUSER   
1102                VVUSER:   .SET   vvUSER + CELLL   
1102                             ;   #TIB        ( -- a )
1102                             ;               Hold the current count and address of the terminal input buffer.
1102                          ;*Macro unroll: hUSER   4,'#TIB',NTIB
1102                          ;*Macro unroll: 	hCODE 4, "#TIB", NTIB
1102                          ALIGN   2   
1102                NTIB:        
1102   00                     NOP      
1103   CD 18 06               CALL   doLIST   
1106   3E 06 18 00            DW   DoUSE,vvUSER   
110A                VVUSER:   .SET   vvUSER + CELLL   
110A                VVUSER:   .SET   vvUSER + CELLL   
110A                             ;   CSP         ( -- a )
110A                             ;               Hold the stack pointer for error checking.
110A                          ;*Macro unroll: hUSER   3,'CSP',CSP
110A                          ;*Macro unroll: 	hCODE 3, "CSP", CSP
110A                          ALIGN   2   
110A                CSP:         
110A   00                     NOP      
110B   CD 18 06               CALL   doLIST   
110E   3E 06 1C 00            DW   DoUSE,vvUSER   
1112                VVUSER:   .SET   vvUSER + CELLL   
1112                             ;   'EVAL       ( -- a )
1112                             ;               Execution vector of EVAL.
1112                          ;*Macro unroll: hUSER   5,"'EVAL",TEVAL
1112                          ;*Macro unroll: 	hCODE 5, "'EVAL", TEVAL
1112                          ALIGN   2   
1112                TEVAL:       
1112   00                     NOP      
1113   CD 18 06               CALL   doLIST   
1116   3E 06 1E 00            DW   DoUSE,vvUSER   
111A                VVUSER:   .SET   vvUSER + CELLL   
111A                             ;   'NUMBER     ( -- a )
111A                             ;               Execution vector of NUMBER?.
111A                          ;*Macro unroll: hUSER   7,"'NUMBER",TNUMB
111A                          ;*Macro unroll: 	hCODE 7, "'NUMBER", TNUMB
111A                          ALIGN   2   
111A                TNUMB:       
111A   00                     NOP      
111B   CD 18 06               CALL   doLIST   
111E   3E 06 20 00            DW   DoUSE,vvUSER   
1122                VVUSER:   .SET   vvUSER + CELLL   
1122                             ;   HLD         ( -- a )
1122                             ;               Hold a pointer in building a numeric output string.
1122                          ;*Macro unroll: hUSER   3,'HLD',HLD
1122                          ;*Macro unroll: 	hCODE 3, "HLD", HLD
1122                          ALIGN   2   
1122                HLD:         
1122   00                     NOP      
1123   CD 18 06               CALL   doLIST   
1126   3E 06 22 00            DW   DoUSE,vvUSER   
112A                VVUSER:   .SET   vvUSER + CELLL   
112A                             ;   HANDLER     ( -- a )
112A                             ;               Hold the return stack pointer for error handling.
112A                          ;*Macro unroll: hUSER   7,'HANDLER',HANDL
112A                          ;*Macro unroll: 	hCODE 7, "HANDLER", HANDL
112A                          ALIGN   2   
112A                HANDL:       
112A   00                     NOP      
112B   CD 18 06               CALL   doLIST   
112E   3E 06 24 00            DW   DoUSE,vvUSER   
1132                VVUSER:   .SET   vvUSER + CELLL   
1132                             ;   CONTEXT     ( -- a )
1132                             ;               A area to specify vocabulary search order.
1132                          ;*Macro unroll: hUSER   7,'CONTEXT',CNTXT
1132                          ;*Macro unroll: 	hCODE 7, "CONTEXT", CNTXT
1132                          ALIGN   2   
1132                CNTXT:       
1132   00                     NOP      
1133   CD 18 06               CALL   doLIST   
1136   3E 06 26 00            DW   DoUSE,vvUSER   
113A                VVUSER:   .SET   vvUSER + CELLL   
113A                VVUSER:   .SET   vvUSER + VOCSS * CELLL   ;vocabulary stack
113A                             ;   CURRENT     ( -- a )
113A                             ;               Point to the vocabulary to be extended.
113A                          ;*Macro unroll: hUSER   7,'CURRENT',CRRNT
113A                          ;*Macro unroll: 	hCODE 7, "CURRENT", CRRNT
113A                          ALIGN   2   
113A                CRRNT:       
113A   00                     NOP      
113B   CD 18 06               CALL   doLIST   
113E   3E 06 38 00            DW   DoUSE,vvUSER   
1142                VVUSER:   .SET   vvUSER + CELLL   
1142                VVUSER:   .SET   vvUSER + CELLL   ;vocabulary link pointer
1142                             ;   CP          ( -- a )
1142                             ;               Point to the top of the code dictionary.
1142                          ;*Macro unroll: hUSER   2,'CP',CP
1142                          ;*Macro unroll: 	hCODE 2, "CP", CP
1142                          ALIGN   2   
1142                CP:          
1142   00                     NOP      
1143   CD 18 06               CALL   doLIST   
1146   3E 06 3C 00            DW   DoUSE,vvUSER   
114A                VVUSER:   .SET   vvUSER + CELLL   
114A                             ;   NP          ( -- a )
114A                             ;               Point to the bottom of the name dictionary.
114A                          ;*Macro unroll: hUSER   2,'NP',NP
114A                          ;*Macro unroll: 	hCODE 2, "NP", NP
114A                          ALIGN   2   
114A                NP:          
114A   00                     NOP      
114B   CD 18 06               CALL   doLIST   
114E   3E 06 3E 00            DW   DoUSE,vvUSER   
1152                VVUSER:   .SET   vvUSER + CELLL   
1152                             ;   LAST        ( -- a )
1152                             ;               Point to the last name in the name dictionary.
1152                          ;*Macro unroll: mUSER   4,'LAST',LAST
1152                          ;*Macro unroll: 	mCODE 4, "LAST", LAST
1152                          ALIGN   2   
1152                LAST:        
1152                VVCODE:   .SET   $   
1152                VVLEN:    .SET   (4 & 01FH) / CELLL   
133E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
133E                VVNAME:   .SET   $   
133E   52 11 4C 13            DW   vvCODE,vvLINK   
1342                VVLINK:   .SET   $   
1342   04 4C 41 53 54         DB   4,"LAST"   
1152                          .ORG   vvCODE   
1152   00                     NOP      
1153   CD 18 06               CALL   doLIST   
1156   3E 06 40 00            DW   DoUSE,vvUSER   
115A                VVUSER:   .SET   vvUSER + CELLL   
115A                             ;   forth       ( -- a )
115A                             ;               Point to the last name in the name dictionary.
115A                          ;*Macro unroll: hUSER   5,'forth',VFRTH
115A                          ;*Macro unroll: 	hCODE 5, "forth", VFRTH
115A                          ALIGN   2   
115A                VFRTH:       
115A   00                     NOP      
115B   CD 18 06               CALL   doLIST   
115E   3E 06 42 00            DW   DoUSE,vvUSER   
1162                VVUSER:   .SET   vvUSER + CELLL   
1162                             ;   _TYPE       ( b u -- )
1162                             ;               Display a string. Filter non-printing characters.
1162                          ;*Macro unroll: mCOLON  5,'_TYPE',UTYPE
1162                          ;*Macro unroll:  mCODE 5, "_TYPE", UTYPE
1162                          ALIGN   2   
1162                UTYPE:       
1162                VVCODE:   .SET   $   
1162                VVLEN:    .SET   (5 & 01FH) / CELLL   
1334                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1334                VVNAME:   .SET   $   
1334   62 11 42 13            DW   vvCODE,vvLINK   
1338                VVLINK:   .SET   $   
1338   05 5F 54 59 50 45      DB   5,"_TYPE"   
1162                          .ORG   vvCODE   
1162   00                     NOP      
1163   CD 18 06               CALL   doLIST   
1166   06 10                  DW   TOR   ;start count down loop
1168   46 0E 7A 11            DW   BRAN,UTYP2   ;skip first pass
116C                UTYP1:       
116C   22 10 70 0E 6C 07 C4 0B DW   DUPP,CAT,TCHAR,EMIT   ;display only printable
1174   26 06 01 00 90 01      DW   DOLIT,1,PLUS   ;increment address
117A                UTYP2:       
117A   7C 06 6C 11            DW   DONXT,UTYP1   ;loop till done
117E   26 10 4E 06            DW   DROP,EXIT   
1182                             ;   dm+         ( a u -- a )
1182                             ;               Dump u bytes from , leaving a+u on the stack.
1182                          ;*Macro unroll: hCOLON  3,'dm+',DMP
1182                          ;*Macro unroll:  hCODE 3, "dm+", DMP
1182                          ALIGN   2   
1182                DMP:         
1182   00                     NOP      
1183   CD 18 06               CALL   doLIST   
1186   32 10 26 06 04 00 90 0C DW   OVER,DOLIT,4,UDOTR   ;display address
118E   F4 0B 06 10            DW   SPACE,TOR   ;start count down loop
1192   46 0E A6 11            DW   BRAN,PDUM2   ;skip first pass
1196                PDUM1:       
1196   22 10 70 0E 26 06 03 00 90 0C DW   DUPP,CAT,DOLIT,3,UDOTR   ;display numeric data
11A0   26 06 01 00 90 01      DW   DOLIT,1,PLUS   ;increment address
11A6                PDUM2:       
11A6   7C 06 96 11            DW   DONXT,PDUM1   ;loop till done
11AA   4E 06                  DW   EXIT   
11AC                             ;   DUMP        ( a u -- )
11AC                             ;               Dump u bytes from a, in a formatted manner.
11AC                          ;*Macro unroll: mCOLON  4,'DUMP',DUMP
11AC                          ;*Macro unroll:  mCODE 4, "DUMP", DUMP
11AC                          ALIGN   2   
11AC                DUMP:        
11AC                VVCODE:   .SET   $   
11AC                VVLEN:    .SET   (4 & 01FH) / CELLL   
132A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
132A                VVNAME:   .SET   $   
132A   AC 11 38 13            DW   vvCODE,vvLINK   
132E                VVLINK:   .SET   $   
132E   04 44 55 4D 50         DB   4,"DUMP"   
11AC                          .ORG   vvCODE   
11AC   00                     NOP      
11AD   CD 18 06               CALL   doLIST   
11B0   E2 10 60 0E 06 10 46 07 DW   BASE,AT,TOR,HEX   ;save radix, set hex
11B8   26 06 10 00 22 03      DW   DOLIT,16,SLASH   ;change count to lines
11BE   06 10                  DW   TOR   ;start count down loop
11C0                DUMP1:       
11C0   3E 0C 26 06 10 00 60 10 82 11 DW   CR,DOLIT,16,DDUP,DMP   ;display numeric
11CA   48 10 48 10            DW   ROT,ROT   
11CE   F4 0B F4 0B 62 11      DW   SPACE,SPACE,UTYPE   ;display printable characters
11D4   D0 0B 9A 01            DW   NUFQ,INVER   ;user control
11D8   3A 0E E4 11            DW   QBRAN,DUMP2   
11DC   7C 06 C0 11            DW   DONXT,DUMP1   ;loop till done
11E0   46 0E E8 11            DW   BRAN,DUMP3   
11E4                DUMP2:       
11E4   14 10 26 10            DW   RFROM,DROP   ;cleanup loop stack, early exit
11E8                DUMP3:       
11E8   26 10 14 10 E2 10 56 0E DW   DROP,RFROM,BASE,STORE   ;reSTORE radix
11F0   4E 06                  DW   EXIT   
11F2                             ;   .S          ( ... -- ... )
11F2                             ;               Display the contents of the data stack.
11F2                          ;*Macro unroll: mCOLON  2,'.S',DOTS
11F2                          ;*Macro unroll:  mCODE 2, ".S", DOTS
11F2                          ALIGN   2   
11F2                DOTS:        
11F2                VVCODE:   .SET   $   
11F2                VVLEN:    .SET   (2 & 01FH) / CELLL   
1322                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1322                VVNAME:   .SET   $   
1322   F2 11 2E 13            DW   vvCODE,vvLINK   
1326                VVLINK:   .SET   $   
1326   02 2E 53               DB   2,".S"   
11F2                          .ORG   vvCODE   
11F2   00                     NOP      
11F3   CD 18 06               CALL   doLIST   
11F6   3E 0C 8C 10            DW   CR,DEPTH   ;stack depth
11FA   06 10                  DW   TOR   ;start count down loop
11FC   46 0E 06 12            DW   BRAN,DOTS2   ;skip first pass
1200                DOTS1:       
1200   78 0E 78 10 B8 0C      DW   RAT,PICK,DOT   ;index stack, display contents
1206                DOTS2:       
1206   7C 06 00 12            DW   DONXT,DOTS1   ;loop till done
120A                          ;*Macro unroll:  mDSTR DOTQP,' <sp'
120A   70 0C                  DW   DOTQP   
120C                VVLEN:    .SET   $   
120C   00 20 3C 73 70         DB   0," <sp"   
1211                VVCODE:   .SET   $   
120C                          .ORG   vvLEN   
120C   04                     DB   vvCODE - vvLEN - 1   
1211                          .ORG   vvCODE   
1211   4E 06                  DW   EXIT   
1213                             ;   !CSP        ( -- )
1213                             ;               Save stack pointer in CSP for error checking.
1213                             ;   ?CSP        ( -- )
1213                             ;               Abort if stack pointer differs from that saved in CSP.
1213                             ;   >NAME       ( ca -- na | F )
1213                             ;               Convert code address to a name address.
1213                          ;*Macro unroll:  mCOLON  5,'>NAME',TNAME
1213                          ;*Macro unroll:  mCODE 5, ">NAME", TNAME
1213                          ALIGN   2   
1214                TNAME:       
1214                VVCODE:   .SET   $   
1214                VVLEN:    .SET   (5 & 01FH) / CELLL   
1318                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1318                VVNAME:   .SET   $   
1318   14 12 26 13            DW   vvCODE,vvLINK   
131C                VVLINK:   .SET   $   
131C   05 3E 4E 41 4D 45      DB   5,">NAME"   
1214                          .ORG   vvCODE   
1214   00                     NOP      
1215   CD 18 06               CALL   doLIST   
1218   3A 11                  DW   CRRNT   ;vocabulary link
121A                TNAM1:       
121A   8C 03 60 0E 3A 10      DW   CELLP,AT,QDUP   ;check all vocabularies
1220   3A 0E 52 12            DW   QBRAN,TNAM4   
1224   60 10                  DW   DDUP   
1226                TNAM2:       
1226   60 0E 22 10            DW   AT,DUPP   ;?last word in a vocabulary
122A   3A 0E 3E 12            DW   QBRAN,TNAM3   
122E   60 10 78 09 86 01      DW   DDUP,NAMET,XORR   ;compare
1234   3A 0E 3E 12            DW   QBRAN,TNAM3   
1238   98 03                  DW   CELLM   ;continue with next word
123A   46 0E 26 12            DW   BRAN,TNAM2   
123E                TNAM3:       
123E   2A 10 26 10 3A 10      DW   SWAP,DROP,QDUP   
1244   3A 0E 1A 12            DW   QBRAN,TNAM1   
1248   2A 10 26 10 2A 10 26 10 4E 06 DW   SWAP,DROP,SWAP,DROP,EXIT   
1252                TNAM4:       
1252   26 10 26 06 00 00 4E 06 DW   DROP,DOLIT,0,EXIT   ;false flag
125A                             ;   .ID         ( na -- )
125A                             ;               Display the name at address.
125A                          ;*Macro unroll: mCOLON  3,'.ID',DOTID
125A                          ;*Macro unroll:  mCODE 3, ".ID", DOTID
125A                          ALIGN   2   
125A                DOTID:       
125A                VVCODE:   .SET   $   
125A                VVLEN:    .SET   (3 & 01FH) / CELLL   
1310                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1310                VVNAME:   .SET   $   
1310   5A 12 1C 13            DW   vvCODE,vvLINK   
1314                VVLINK:   .SET   $   
1314   03 2E 49 44            DB   3,".ID"   
125A                          .ORG   vvCODE   
125A   00                     NOP      
125B   CD 18 06               CALL   doLIST   
125E   3A 10                  DW   QDUP   ;if zero no name
1260   3A 0E 70 12            DW   QBRAN,DOTI1   
1264   D6 0E 26 06 1F 00 72 01 DW   COUNT,DOLIT,MASKK,ANDD   ;mask lexicon bits
126C   62 11 4E 06            DW   UTYPE,EXIT   ;display name string
1270                DOTI1:       
1270                          ;*Macro unroll:  mDSTR   DOTQP,' {noName}'
1270   70 0C                  DW   DOTQP   
1272                VVLEN:    .SET   $   
1272   00 20 7B 6E 6F 4E 61 6D 65 7D DB   0," {noName}"   
127C                VVCODE:   .SET   $   
1272                          .ORG   vvLEN   
1272   09                     DB   vvCODE - vvLEN - 1   
127C                          .ORG   vvCODE   
127C   4E 06                  DW   EXIT   
127E                             ;   SEE         ( -- ; <string> )
127E                             ;               A simple decompiler.
127E                          ;*Macro unroll: mCOLON  3,'SEE',SEE
127E                          ;*Macro unroll:  mCODE 3, "SEE", SEE
127E                          ALIGN   2   
127E                SEE:         
127E                VVCODE:   .SET   $   
127E                VVLEN:    .SET   (3 & 01FH) / CELLL   
1308                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1308                VVNAME:   .SET   $   
1308   7E 12 14 13            DW   vvCODE,vvLINK   
130C                VVLINK:   .SET   $   
130C   03 53 45 45            DB   3,"SEE"   
127E                          .ORG   vvCODE   
127E   00                     NOP      
127F   CD 18 06               CALL   doLIST   
1282   B0 03                  DW   TICK   ;starting address
1284   3E 0C 8C 03            DW   CR,CELLP   
1288                SEE1:        
1288   8C 03 22 10 60 0E 22 10 DW   CELLP,DUPP,AT,DUPP   ;?does it contain a zero
1290   3A 0E 96 12            DW   QBRAN,SEE2   
1294   14 12                  DW   TNAME   ;?is it a name
1296                SEE2:        
1296   3A 10                  DW   QDUP   ;name address or zero
1298   3A 0E A4 12            DW   QBRAN,SEE3   
129C   F4 0B 5A 12            DW   SPACE,DOTID   ;display name
12A0   46 0E AA 12            DW   BRAN,SEE4   
12A4                SEE3:        
12A4   22 10 60 0E A8 0C      DW   DUPP,AT,UDOT   ;display number
12AA                SEE4:        
12AA   D0 0B                  DW   NUFQ   ;user control
12AC   3A 0E 88 12            DW   QBRAN,SEE1   
12B0   26 10 4E 06            DW   DROP,EXIT   
12B4                             ;   WORDS       ( -- )
12B4                             ;               Display the names in the context vocabulary.
12B4                             ;   COLD        ( -- )
12B4                             ;               The hilevel cold start sequence.
2000                          .ORG   END_ROM   
2000                          .ORG   START_RAM   
2000                          IF   TESTMODE   
                    TESTS_START:      
                              LD   HL,DONE   
                              CALL   PRINTSZ   
                              HALT      
                    DONE:     .CSTR   "Done!\r\n"   
2000                          ENDIF      
2000                          DS   DTS   ; data stack size
2200                SPP:         ; SP0 grows down
2200                TIBB:        
2200                          DS   RTS   ; return stack size
2400                RPP:         ; RP0 grows down (into TIBB)
2400                UPP:         
2400   00 00        VARSZERO:   DW   0   ; SP0
2402   00 00        VARRZERO:   DW   0   ; RP0
2404   00 00        VARTQKEY:   DW   0   ; '?KEY
2406   00 00        VARTEMIT:   DW   0   ; 'EMIT
2408   00 00        VARTEXPE:   DW   0   ; 'EXPECT
240A   00 00        VARTTAP:   DW   0   ; 'TAP
240C   00 00        VARTECHO:   DW   0   ; 'ECHO
240E   00 00        VARTPROM:   DW   0   ; 'PROMPT
2410   00 00        VARBASE:   DW   0   ; BASE
2412   00 00        VARTEMP:   DW   0   ; tmp
2414   00 00        VARSPAN:   DW   0   ; SPAN
2416   00 00        VARINN:   DW   0   ; >IN
2418   00 00        VARNTIB:   DW   0   ; #TIB
241A   00 00        VARTIB:   DW   0   ; TIB
241C   00 00        VARCSP:   DW   0   ; CSP
241E   00 00        VARTEVAL:   DW   0   ; 'EVAL
2420   00 00        VARTNUMB:   DW   0   ; 'NUMBER
2422   00 00        VARHLD:   DW   0   ; HLD
2424   00 00        VARHANDL:   DW   0   ; HANDLER
2426   00 00        VARCNTXT:   DW   0   ; CONTEXT pointer
2428   00 00        VARVOCABS:   DW   0   ; vocabulary stack    ???
242A   00 00        VARCRRNT:   DW   0   ; CURRENT pointer
242C   00 00        VARVOCABLP:   DW   0   ; vocabulary link pointer ???
242E   00 00        VARCP:    DW   0   ; CP  for runing phase on RAM
2430   00 00        VARNP:    DW   0   ; NP  for runing phase on RAM
2432   00 00        VARLAST:   DW   0   ; LAST
2434   00 00        VARVFRTH:   DW   0   ; FORTH   \ mullti-user ???
2436   00 00        VARVOCABL:   DW   0   ; vocabulary link       ???
2438   00 00        SERINPTR:   DW   0   
243A   00 00        SERRDPTR:   DW   0   
243C   00 00        SERBUFUSED:   DW   0   
243E                SERBUF:   DS   SER_BUFSIZE   
247D                VECTAB:      
247D   00 00        VNMI:     DW   0   
247F   00 00        VRST08:   DW   0   
2481   00 00        VRST10:   DW   0   
2483   00 00        VRST18:   DW   0   
2485   00 00        VRST20:   DW   0   
2487   00 00        VRST28:   DW   0   
2489   00 00        VRST30:   DW   0   
248B   00 00        VRST38:   DW   0   
248D                CPP:         ; grows up
FFFE                          .ORG   END_RAM - 2   
FFFE                NPP:         ; grows down
FFFE                          .END      


TESTMODE:           0000 DEFINED AT LINE 3
MEM_SIZE:           10000 DEFINED AT LINE 1 IN constants.z80
                    > USED AT LINE 3 IN constants.z80
                    > USED AT LINE 12 IN constants.z80
ROM_SIZE:           2000 DEFINED AT LINE 2 IN constants.z80
                    > USED AT LINE 3 IN constants.z80
                    > USED AT LINE 6 IN constants.z80
                    > USED AT LINE 8 IN constants.z80
RAM_SIZE:           E000 DEFINED AT LINE 3 IN constants.z80
                    > USED AT LINE 9 IN constants.z80
START_ROM:          0000 DEFINED AT LINE 5 IN constants.z80
                    > USED AT LINE 8
END_ROM:            2000 DEFINED AT LINE 6 IN constants.z80
                    > USED AT LINE 4 IN word.macro.z80
                    > USED AT LINE 81
START_RAM:          2000 DEFINED AT LINE 8 IN constants.z80
                    > USED AT LINE 9 IN constants.z80
                    > USED AT LINE 82
END_RAM:            10000 DEFINED AT LINE 9 IN constants.z80
                    > USED AT LINE 54 IN variables.z80
BM:                 0000 DEFINED AT LINE 11 IN constants.z80
                    > USED AT LINE 5 IN constants.z80
                    > USED AT LINE 6 IN constants.z80
                    > USED AT LINE 8 IN constants.z80
                    > USED AT LINE 12 IN constants.z80
EM:                 10000 DEFINED AT LINE 12 IN constants.z80
COMPO:              0020 DEFINED AT LINE 14 IN constants.z80
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
IMEDD:              0040 DEFINED AT LINE 15 IN constants.z80
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 133 IN core-compiler.z80
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
MASKK:              001F DEFINED AT LINE 16 IN constants.z80
CHARR:              0001 DEFINED AT LINE 18 IN constants.z80
CELLL:              0002 DEFINED AT LINE 19 IN constants.z80
                    > USED AT LINE 39 IN constants.z80
                    > USED AT LINE 40 IN constants.z80
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 319 IN core-alu.z80
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 324 IN core-alu.z80
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 329 IN core-alu.z80
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 145 IN core-interpret.z80
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 184 IN core-memory.z80
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 196 IN core-memory.z80
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 90 IN core-stacks.z80
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 33
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 33
                    > USED AT LINE 63
                    > USED AT LINE 63
                    > USED AT LINE 63
                    > USED AT LINE 63
                    > USED AT LINE 63
                    > USED AT LINE 63
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 33
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 33
                    > USED AT LINE 63
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 33
                    > USED AT LINE 63
                    > USED AT LINE 65 IN core-user.z80
                    > USED AT LINE 63
                    > USED AT LINE 63
                    > USED AT LINE 63
                    > USED AT LINE 63
                    > USED AT LINE 63
                    > USED AT LINE 63
                    > USED AT LINE 96 IN core-user.z80
                    > USED AT LINE 63
                    > USED AT LINE 102 IN core-user.z80
                    > USED AT LINE 63
                    > USED AT LINE 63
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 33
                    > USED AT LINE 63
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
BASEE:              000A DEFINED AT LINE 20 IN constants.z80
VOCSS:              0008 DEFINED AT LINE 21 IN constants.z80
                    > USED AT LINE 96 IN core-user.z80
MAXCHAR:            00FF DEFINED AT LINE 23 IN constants.z80
MAXSIGNED:          7FFF DEFINED AT LINE 24 IN constants.z80
MAXUNSIGNED:        FFFF DEFINED AT LINE 25 IN constants.z80
MAXNEGATIVE:        8000 DEFINED AT LINE 26 IN constants.z80
BKSPP:              0008 DEFINED AT LINE 28 IN constants.z80
                    > USED AT LINE 188 IN core-io.z80
                    > USED AT LINE 190 IN core-io.z80
                    > USED AT LINE 205 IN core-io.z80
LFF:                000A DEFINED AT LINE 29 IN constants.z80
CRR:                000D DEFINED AT LINE 30 IN constants.z80
                    > USED AT LINE 126 IN core-io.z80
SPACEE:             0020 DEFINED AT LINE 31 IN constants.z80
                    > USED AT LINE 74 IN core-format.z80
                    > USED AT LINE 81 IN core-format.z80
TIC:                0027 DEFINED AT LINE 32 IN constants.z80
MINUSS:             002D DEFINED AT LINE 33 IN constants.z80
                    > USED AT LINE 44 IN core-format.z80
UNDERSC:            005F DEFINED AT LINE 34 IN constants.z80
CALLL:              CD00 DEFINED AT LINE 36 IN constants.z80
                    > USED AT LINE 119 IN core-compiler.z80
US:                 003A DEFINED AT LINE 38 IN constants.z80
                    > USED AT LINE 39
RTS:                0200 DEFINED AT LINE 39 IN constants.z80
                    > USED AT LINE 5 IN variables.z80
DTS:                0200 DEFINED AT LINE 40 IN constants.z80
                    > USED AT LINE 2 IN variables.z80
RET_STACK_SIZE:     0100 DEFINED AT LINE 42 IN constants.z80
DATA_STACK_SIZE:    0100 DEFINED AT LINE 43 IN constants.z80
INT_ADDR:           0038 DEFINED AT LINE 45 IN constants.z80
SER_BUFSIZE:        003F DEFINED AT LINE 46 IN constants.z80
                    > USED AT LINE 11 IN interrupt.z80
                    > USED AT LINE 19 IN interrupt.z80
                    > USED AT LINE 25 IN serial.z80
                    > USED AT LINE 41 IN variables.z80
SER_FULLSIZE:       0030 DEFINED AT LINE 47 IN constants.z80
                    > USED AT LINE 28 IN interrupt.z80
SER_EMPTYSIZE:      0005 DEFINED AT LINE 48 IN constants.z80
                    > USED AT LINE 34 IN serial.z80
RTS_HIGH:           00D6 DEFINED AT LINE 50 IN constants.z80
                    > USED AT LINE 30 IN interrupt.z80
RTS_LOW:            0096 DEFINED AT LINE 51 IN constants.z80
                    > USED AT LINE 11 IN serial.z80
                    > USED AT LINE 36 IN serial.z80
TRUEE:              00-1 DEFINED AT LINE 53 IN constants.z80
                    > USED AT LINE 41 IN core-io.z80
FALSEE:             0000 DEFINED AT LINE 54 IN constants.z80
                    > USED AT LINE 34 IN core-io.z80
VVCODE:             127E DEFINED AT LINE 12
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 42
                    > USED AT LINE 43
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 42
                    > USED AT LINE 43
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 42
                    > USED AT LINE 43
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 42
                    > USED AT LINE 43
                    > USED AT LINE 42
                    > USED AT LINE 43
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 42
                    > USED AT LINE 43
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 42
                    > USED AT LINE 43
                    > USED AT LINE 16
                    > USED AT LINE 19
VVNAME:             1308 DEFINED AT LINE 15
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
VVLINK:             130C DEFINED AT LINE 17
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
VVUSER:             1164 DEFINED AT LINE 63
                    > USED AT LINE 32
                    > USED AT LINE 33
                    > USED AT LINE 32
                    > USED AT LINE 33
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 32
                    > USED AT LINE 33
                    > USED AT LINE 32
                    > USED AT LINE 33
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 32
                    > USED AT LINE 33
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 65 IN core-user.z80
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 96 IN core-user.z80
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 102 IN core-user.z80
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 32
                    > USED AT LINE 33
                    > USED AT LINE 62
                    > USED AT LINE 63
RESET:              0000 DEFINED AT LINE 9
                    > USED AT LINE 46
RST08:              0008 DEFINED AT LINE 13
RST10:              0010 DEFINED AT LINE 15
RST18:              0018 DEFINED AT LINE 17
RST20:              0020 DEFINED AT LINE 19
RST28:              0028 DEFINED AT LINE 21
RST30:              0030 DEFINED AT LINE 23
RST38:              0038 DEFINED AT LINE 25
RST66:              0066 DEFINED AT LINE 27
INIT:               006D DEFINED AT LINE 31
                    > USED AT LINE 10
LOOP:               0093 DEFINED AT LINE 55
                    > USED AT LINE 58
SERIALINT:          009C DEFINED AT LINE 1 IN interrupt.z80
                    > USED AT LINE 32
NOTFULL:            00B1 DEFINED AT LINE 16 IN interrupt.z80
                    > USED AT LINE 12 IN interrupt.z80
NOTWRAP:            00BD DEFINED AT LINE 22 IN interrupt.z80
                    > USED AT LINE 20 IN interrupt.z80
RTS0:               00D1 DEFINED AT LINE 32 IN interrupt.z80
                    > USED AT LINE 6 IN interrupt.z80
                    > USED AT LINE 14 IN interrupt.z80
                    > USED AT LINE 29 IN interrupt.z80
INIT_IO:            00D6 DEFINED AT LINE 4 IN serial.z80
                    > USED AT LINE 25 IN core-io.z80
RXA:                00EA DEFINED AT LINE 16 IN serial.z80
                    > USED AT LINE 56
                    > USED AT LINE 37 IN core-io.z80
WAITFORCHAR:        00EA DEFINED AT LINE 17 IN serial.z80
                    > USED AT LINE 20 IN serial.z80
NOTRDWRAP:          00FE DEFINED AT LINE 28 IN serial.z80
                    > USED AT LINE 26 IN serial.z80
RTS1:               0111 DEFINED AT LINE 38 IN serial.z80
                    > USED AT LINE 35 IN serial.z80
TXA:                0115 DEFINED AT LINE 44 IN serial.z80
                    > USED AT LINE 57
                    > USED AT LINE 63 IN serial.z80
                    > USED AT LINE 49 IN core-io.z80
CONOUT1:            0116 DEFINED AT LINE 46 IN serial.z80
                    > USED AT LINE 49 IN serial.z80
CKINCHAR:           0120 DEFINED AT LINE 54 IN serial.z80
                    > USED AT LINE 32 IN core-io.z80
PRINTSZ:            0126 DEFINED AT LINE 59 IN serial.z80
                    > USED AT LINE 65 IN serial.z80
                    > USED AT LINE 119 IN core-io.z80
DEFAULTS:           0130 DEFINED AT LINE 3 IN defaults.z80
                    > USED AT LINE 38 IN constants.z80
                    > USED AT LINE 37
UZERO:              0130 DEFINED AT LINE 4 IN defaults.z80
                    > USED AT LINE 37 IN core-kernel.z80
                    > USED AT LINE 38 IN core-kernel.z80
DEFSZERO:           0130 DEFINED AT LINE 5 IN defaults.z80
DEFRZERO:           0132 DEFINED AT LINE 6 IN defaults.z80
DEFTQKEY:           0134 DEFINED AT LINE 7 IN defaults.z80
DEFTEMIT:           0136 DEFINED AT LINE 8 IN defaults.z80
DEFTEXPE:           0138 DEFINED AT LINE 9 IN defaults.z80
DEFTTAP:            013A DEFINED AT LINE 10 IN defaults.z80
DEFTECHO:           013C DEFINED AT LINE 11 IN defaults.z80
DEFTPROM:           013E DEFINED AT LINE 12 IN defaults.z80
DEFBASE:            0140 DEFINED AT LINE 13 IN defaults.z80
DEFTEMP:            0142 DEFINED AT LINE 14 IN defaults.z80
DEFSPAN:            0144 DEFINED AT LINE 15 IN defaults.z80
DEFINN:             0146 DEFINED AT LINE 16 IN defaults.z80
DEFNTIB:            0148 DEFINED AT LINE 17 IN defaults.z80
DEFTIB:             014A DEFINED AT LINE 18 IN defaults.z80
DEFCSP:             014C DEFINED AT LINE 19 IN defaults.z80
DEFTEVAL:           014E DEFINED AT LINE 20 IN defaults.z80
DEFTNUMB:           0150 DEFINED AT LINE 21 IN defaults.z80
DEFHLD:             0152 DEFINED AT LINE 22 IN defaults.z80
DEFHANDL:           0154 DEFINED AT LINE 23 IN defaults.z80
DEFCNTXT:           0156 DEFINED AT LINE 24 IN defaults.z80
DEFVOCABS:          0158 DEFINED AT LINE 25 IN defaults.z80
DEFCRRENT:          015A DEFINED AT LINE 26 IN defaults.z80
DEFVOCABLP:         015C DEFINED AT LINE 27 IN defaults.z80
DEFCP:              015E DEFINED AT LINE 28 IN defaults.z80
DEFNP:              0160 DEFINED AT LINE 29 IN defaults.z80
DEFLAST:            0162 DEFINED AT LINE 30 IN defaults.z80
DEFVFRTH:           0164 DEFINED AT LINE 31 IN defaults.z80
DEFVOCABL:          0166 DEFINED AT LINE 32 IN defaults.z80
DEFCOLD:            0168 DEFINED AT LINE 33 IN defaults.z80
ULAST:              016A DEFINED AT LINE 34 IN defaults.z80
                    > USED AT LINE 38 IN core-kernel.z80
END_DEFAULTS:       016A DEFINED AT LINE 35 IN defaults.z80
                    > USED AT LINE 38 IN constants.z80
ZLESS:              016A DEFINED AT LINE 11
                    > USED AT LINE 77 IN core-alu.z80
                    > USED AT LINE 98 IN core-alu.z80
                    > USED AT LINE 104 IN core-alu.z80
                    > USED AT LINE 106 IN core-alu.z80
                    > USED AT LINE 233 IN core-alu.z80
                    > USED AT LINE 250 IN core-alu.z80
                    > USED AT LINE 43 IN core-format.z80
                    > USED AT LINE 57 IN core-interpret.z80
                    > USED AT LINE 71 IN core-interpret.z80
                    > USED AT LINE 256 IN core-interpret.z80
VVLEN:              0001 DEFINED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 41
                    > USED AT LINE 42
                    > USED AT LINE 14
                    > USED AT LINE 41
                    > USED AT LINE 42
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 41
                    > USED AT LINE 42
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 41
                    > USED AT LINE 42
                    > USED AT LINE 41
                    > USED AT LINE 42
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 41
                    > USED AT LINE 42
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 41
                    > USED AT LINE 42
                    > USED AT LINE 14
ANDD:               0172 DEFINED AT LINE 11
ORR:                017C DEFINED AT LINE 11
XORR:               0186 DEFINED AT LINE 11
                    > USED AT LINE 85 IN core-alu.z80
                    > USED AT LINE 94 IN core-alu.z80
                    > USED AT LINE 103 IN core-alu.z80
                    > USED AT LINE 300 IN core-alu.z80
                    > USED AT LINE 218 IN core-io.z80
PLUS:               0190 DEFINED AT LINE 11
                    > USED AT LINE 67 IN core-alu.z80
                    > USED AT LINE 72 IN core-alu.z80
                    > USED AT LINE 239 IN core-alu.z80
                    > USED AT LINE 44 IN core-compiler.z80
                    > USED AT LINE 216 IN core-io.z80
                    > USED AT LINE 198 IN core-memory.z80
                    > USED AT LINE 84 IN core-stacks.z80
INVER:              019A DEFINED AT LINE 11
                    > USED AT LINE 60 IN core-alu.z80
                    > USED AT LINE 65 IN core-alu.z80
                    > USED AT LINE 37 IN core-utils.z80
NEGAT:              01A6 DEFINED AT LINE 11
                    > USED AT LINE 72 IN core-alu.z80
                    > USED AT LINE 78 IN core-alu.z80
                    > USED AT LINE 235 IN core-alu.z80
                    > USED AT LINE 243 IN core-alu.z80
                    > USED AT LINE 34 IN core-interpret.z80
DNEGA:              01B4 DEFINED AT LINE 11
                    > USED AT LINE 302 IN core-alu.z80
SUBB:               01CA DEFINED AT LINE 11
                    > USED AT LINE 98 IN core-alu.z80
                    > USED AT LINE 106 IN core-alu.z80
                    > USED AT LINE 128 IN core-alu.z80
                    > USED AT LINE 129 IN core-alu.z80
                    > USED AT LINE 65 IN core-does.z80
                    > USED AT LINE 57 IN core-interpret.z80
                    > USED AT LINE 82 IN core-interpret.z80
                    > USED AT LINE 135 IN core-interpret.z80
                    > USED AT LINE 185 IN core-memory.z80
ABSS:               01D4 DEFINED AT LINE 11
ABS1:               01E2 DEFINED AT LINE 79 IN core-alu.z80
EQUAL:              01E4 DEFINED AT LINE 11
EQU1:               01F4 DEFINED AT LINE 88 IN core-alu.z80
                    > USED AT LINE 86 IN core-alu.z80
ULESS:              01FA DEFINED AT LINE 11
ULES1:              0210 DEFINED AT LINE 97 IN core-alu.z80
                    > USED AT LINE 95 IN core-alu.z80
LESS:               0216 DEFINED AT LINE 11
                    > USED AT LINE 111 IN core-alu.z80
LESS1:              022A DEFINED AT LINE 105 IN core-alu.z80
MAX:                0230 DEFINED AT LINE 11
MAX1:               023E DEFINED AT LINE 113 IN core-alu.z80
MIN:                0242 DEFINED AT LINE 11
MIN1:               0252 DEFINED AT LINE 122 IN core-alu.z80
                    > USED AT LINE 120 IN core-alu.z80
WITHI:              0256 DEFINED AT LINE 11
UMPLUS:             0268 DEFINED AT LINE 49
                    > USED AT LINE 50 IN core-alu.z80
UMP2:               0270 DEFINED AT LINE 139 IN core-alu.z80
UMP1:               0271 DEFINED AT LINE 141 IN core-alu.z80
                    > USED AT LINE 138 IN core-alu.z80
UMMOD:              0274 DEFINED AT LINE 11
                    > USED AT LINE 241 IN core-alu.z80
                    > USED AT LINE 194 IN core-memory.z80
UMSLMOD2:           0280 DEFINED AT LINE 11
UMMOD11:            0284 DEFINED AT LINE 158 IN core-alu.z80
UMMOD12:            028F DEFINED AT LINE 169 IN core-alu.z80
UMMOD2:             02A9 DEFINED AT LINE 189 IN core-alu.z80
                    > USED AT LINE 157 IN core-alu.z80
UMMOD1:             02AF DEFINED AT LINE 192 IN core-alu.z80
                    > USED AT LINE 168 IN core-alu.z80
UMMOD4:             02B5 DEFINED AT LINE 195 IN core-alu.z80
                    > USED AT LINE 213 IN core-alu.z80
UMMOD13:            02BD DEFINED AT LINE 203 IN core-alu.z80
UMMOD3:             02C3 DEFINED AT LINE 210 IN core-alu.z80
                    > USED AT LINE 175 IN core-alu.z80
                    > USED AT LINE 179 IN core-alu.z80
                    > USED AT LINE 224 IN core-alu.z80
UMMOD14:            02C7 DEFINED AT LINE 214 IN core-alu.z80
UMMOD5:             02CD DEFINED AT LINE 221 IN core-alu.z80
                    > USED AT LINE 202 IN core-alu.z80
UMMOD15:            02D1 DEFINED AT LINE 225 IN core-alu.z80
MSMOD:              02D2 DEFINED AT LINE 11
MMOD1:              02EA DEFINED AT LINE 236 IN core-alu.z80
                    > USED AT LINE 234 IN core-alu.z80
MMOD2:              02F8 DEFINED AT LINE 240 IN core-alu.z80
                    > USED AT LINE 238 IN core-alu.z80
MMOD3:              0308 DEFINED AT LINE 244 IN core-alu.z80
                    > USED AT LINE 242 IN core-alu.z80
SLMOD:              030A DEFINED AT LINE 11
                    > USED AT LINE 255 IN core-alu.z80
                    > USED AT LINE 260 IN core-alu.z80
MODD:               0318 DEFINED AT LINE 11
SLASH:              0322 DEFINED AT LINE 11
UMSTA:              032E DEFINED AT LINE 11
                    > USED AT LINE 295 IN core-alu.z80
                    > USED AT LINE 301 IN core-alu.z80
UMSTA1:             0336 DEFINED AT LINE 272 IN core-alu.z80
                    > USED AT LINE 285 IN core-alu.z80
UMSTA2:             033D DEFINED AT LINE 278 IN core-alu.z80
UMSTA5:             0340 DEFINED AT LINE 281 IN core-alu.z80
UMSTA3:             0341 DEFINED AT LINE 283 IN core-alu.z80
                    > USED AT LINE 277 IN core-alu.z80
                    > USED AT LINE 280 IN core-alu.z80
UMSTA4:             0344 DEFINED AT LINE 286 IN core-alu.z80
STAR:               034A DEFINED AT LINE 11
MSTAR:              0354 DEFINED AT LINE 11
                    > USED AT LINE 309 IN core-alu.z80
MSTAR1:             0370 DEFINED AT LINE 303 IN core-alu.z80
SSMOD:              0372 DEFINED AT LINE 11
                    > USED AT LINE 314 IN core-alu.z80
STASL:              0380 DEFINED AT LINE 11
CELLP:              038C DEFINED AT LINE 11
                    > USED AT LINE 32 IN core-compiler.z80
                    > USED AT LINE 151 IN core-interpret.z80
                    > USED AT LINE 153 IN core-interpret.z80
                    > USED AT LINE 171 IN core-interpret.z80
                    > USED AT LINE 97 IN core-memory.z80
                    > USED AT LINE 102 IN core-memory.z80
                    > USED AT LINE 125 IN core-memory.z80
                    > USED AT LINE 74 IN core-utils.z80
                    > USED AT LINE 107 IN core-utils.z80
                    > USED AT LINE 109 IN core-utils.z80
CELLM:              0398 DEFINED AT LINE 11
                    > USED AT LINE 72 IN core-compiler.z80
                    > USED AT LINE 74 IN core-compiler.z80
                    > USED AT LINE 126 IN core-interpret.z80
                    > USED AT LINE 126 IN core-interpret.z80
                    > USED AT LINE 156 IN core-interpret.z80
                    > USED AT LINE 158 IN core-interpret.z80
                    > USED AT LINE 158 IN core-interpret.z80
                    > USED AT LINE 161 IN core-interpret.z80
                    > USED AT LINE 169 IN core-interpret.z80
                    > USED AT LINE 82 IN core-utils.z80
CELLS:              03A4 DEFINED AT LINE 11
TICK:               03B0 DEFINED AT LINE 11
                    > USED AT LINE 25 IN core-compiler.z80
                    > USED AT LINE 106 IN core-utils.z80
TICK1:              03BE DEFINED AT LINE 7 IN core-compiler.z80
                    > USED AT LINE 5 IN core-compiler.z80
ALLOT:              03C0 DEFINED AT LINE 11
COMMA:              03CA DEFINED AT LINE 11
                    > USED AT LINE 25 IN core-compiler.z80
                    > USED AT LINE 90 IN core-compiler.z80
                    > USED AT LINE 120 IN core-compiler.z80
BCOMP:              03DC DEFINED AT LINE 11
COMPI:              03E6 DEFINED AT LINE 11
                    > USED AT LINE 38 IN core-compiler.z80
                    > USED AT LINE 107 IN core-compiler.z80
                    > USED AT LINE 142 IN core-compiler.z80
                    > USED AT LINE 150 IN core-compiler.z80
                    > USED AT LINE 4 IN core-control.z80
                    > USED AT LINE 14 IN core-control.z80
                    > USED AT LINE 19 IN core-control.z80
                    > USED AT LINE 24 IN core-control.z80
                    > USED AT LINE 30 IN core-control.z80
                    > USED AT LINE 37 IN core-control.z80
                    > USED AT LINE 69 IN core-control.z80
                    > USED AT LINE 74 IN core-control.z80
                    > USED AT LINE 79 IN core-control.z80
LITER:              03F8 DEFINED AT LINE 11
                    > USED AT LINE 94 IN core-compiler.z80
STRCQ:              0404 DEFINED AT LINE 49
RECUR:              041A DEFINED AT LINE 11
UNIQU:              0428 DEFINED AT LINE 11
                    > USED AT LINE 69 IN core-compiler.z80
UNIQ1:              0444 DEFINED AT LINE 60 IN core-compiler.z80
                    > USED AT LINE 57 IN core-compiler.z80
SNAME:              0448 DEFINED AT LINE 11
                    > USED AT LINE 126 IN core-compiler.z80
                    > USED AT LINE 140 IN core-compiler.z80
                    > USED AT LINE 148 IN core-compiler.z80
PNAM1:              047A DEFINED AT LINE 76 IN core-compiler.z80
                    > USED AT LINE 68 IN core-compiler.z80
SCOMP:              0484 DEFINED AT LINE 49
                    > USED AT LINE 113 IN core-compiler.z80
SCOM1:              04A0 DEFINED AT LINE 89 IN core-compiler.z80
                    > USED AT LINE 87 IN core-compiler.z80
SCOM2:              04A4 DEFINED AT LINE 91 IN core-compiler.z80
                    > USED AT LINE 85 IN core-compiler.z80
SCOM3:              04B0 DEFINED AT LINE 95 IN core-compiler.z80
                    > USED AT LINE 93 IN core-compiler.z80
OVERT:              04B2 DEFINED AT LINE 49
SEMIS:              04C2 DEFINED AT LINE 11
RBRAC:              04D0 DEFINED AT LINE 11
                    > USED AT LINE 127 IN core-compiler.z80
CALLC:              04DE DEFINED AT LINE 49
                    > USED AT LINE 127 IN core-compiler.z80
COLON:              04EC DEFINED AT LINE 11
IMMED:              04FE DEFINED AT LINE 11
USER:               0516 DEFINED AT LINE 11
CREAT:              052E DEFINED AT LINE 11
                    > USED AT LINE 156 IN core-compiler.z80
VARIA:              0544 DEFINED AT LINE 11
FOR:                0552 DEFINED AT LINE 11
BEGIN:              055E DEFINED AT LINE 11
NEXT:               0566 DEFINED AT LINE 11
UNTIL:              0572 DEFINED AT LINE 11
AGAIN:              057E DEFINED AT LINE 11
                    > USED AT LINE 43 IN core-control.z80
IFF:                058A DEFINED AT LINE 11
                    > USED AT LINE 64 IN core-control.z80
AHEAD:              059C DEFINED AT LINE 11
                    > USED AT LINE 54 IN core-control.z80
                    > USED AT LINE 59 IN core-control.z80
REPEA:              05AE DEFINED AT LINE 11
THENN:              05BC DEFINED AT LINE 11
AFT:                05C8 DEFINED AT LINE 11
ELSEE:              05D6 DEFINED AT LINE 11
WHILE:              05E2 DEFINED AT LINE 11
ABRTQ:              05EC DEFINED AT LINE 11
STRQ:               05F8 DEFINED AT LINE 11
DOTQ:               0604 DEFINED AT LINE 11
DOCONST:            0610 DEFINED AT LINE 49
DOLIST:             0618 DEFINED AT LINE 49
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 141 IN core-compiler.z80
                    > USED AT LINE 25
                    > USED AT LINE 149 IN core-compiler.z80
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 31
                    > USED AT LINE 31
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 31
                    > USED AT LINE 31
                    > USED AT LINE 61
                    > USED AT LINE 31
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 31
                    > USED AT LINE 61
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
DOLIT:              0626 DEFINED AT LINE 49
                    > USED AT LINE 55 IN core-alu.z80
                    > USED AT LINE 60 IN core-alu.z80
                    > USED AT LINE 66 IN core-alu.z80
                    > USED AT LINE 87 IN core-alu.z80
                    > USED AT LINE 89 IN core-alu.z80
                    > USED AT LINE 319 IN core-alu.z80
                    > USED AT LINE 324 IN core-alu.z80
                    > USED AT LINE 329 IN core-alu.z80
                    > USED AT LINE 38 IN core-compiler.z80
                    > USED AT LINE 43 IN core-compiler.z80
                    > USED AT LINE 86 IN core-compiler.z80
                    > USED AT LINE 113 IN core-compiler.z80
                    > USED AT LINE 119 IN core-compiler.z80
                    > USED AT LINE 133 IN core-compiler.z80
                    > USED AT LINE 141 IN core-compiler.z80
                    > USED AT LINE 149 IN core-compiler.z80
                    > USED AT LINE 156 IN core-compiler.z80
                    > USED AT LINE 31 IN core-control.z80
                    > USED AT LINE 64 IN core-does.z80
                    > USED AT LINE 4 IN core-format.z80
                    > USED AT LINE 5 IN core-format.z80
                    > USED AT LINE 6 IN core-format.z80
                    > USED AT LINE 11 IN core-format.z80
                    > USED AT LINE 44 IN core-format.z80
                    > USED AT LINE 64 IN core-format.z80
                    > USED AT LINE 69 IN core-format.z80
                    > USED AT LINE 74 IN core-format.z80
                    > USED AT LINE 79 IN core-format.z80
                    > USED AT LINE 80 IN core-format.z80
                    > USED AT LINE 81 IN core-format.z80
                    > USED AT LINE 83 IN core-format.z80
                    > USED AT LINE 5 IN core-interpret.z80
                    > USED AT LINE 6 IN core-interpret.z80
                    > USED AT LINE 8 IN core-interpret.z80
                    > USED AT LINE 9 IN core-interpret.z80
                    > USED AT LINE 20 IN core-interpret.z80
                    > USED AT LINE 25 IN core-interpret.z80
                    > USED AT LINE 30 IN core-interpret.z80
                    > USED AT LINE 52 IN core-interpret.z80
                    > USED AT LINE 59 IN core-interpret.z80
                    > USED AT LINE 74 IN core-interpret.z80
                    > USED AT LINE 80 IN core-interpret.z80
                    > USED AT LINE 99 IN core-interpret.z80
                    > USED AT LINE 139 IN core-interpret.z80
                    > USED AT LINE 145 IN core-interpret.z80
                    > USED AT LINE 151 IN core-interpret.z80
                    > USED AT LINE 178 IN core-interpret.z80
                    > USED AT LINE 227 IN core-interpret.z80
                    > USED AT LINE 241 IN core-interpret.z80
                    > USED AT LINE 247 IN core-interpret.z80
                    > USED AT LINE 84 IN core-io.z80
                    > USED AT LINE 94 IN core-io.z80
                    > USED AT LINE 109 IN core-io.z80
                    > USED AT LINE 126 IN core-io.z80
                    > USED AT LINE 176 IN core-io.z80
                    > USED AT LINE 188 IN core-io.z80
                    > USED AT LINE 190 IN core-io.z80
                    > USED AT LINE 203 IN core-io.z80
                    > USED AT LINE 205 IN core-io.z80
                    > USED AT LINE 221 IN core-io.z80
                    > USED AT LINE 240 IN core-io.z80
                    > USED AT LINE 241 IN core-io.z80
                    > USED AT LINE 4 IN core-kernel.z80
                    > USED AT LINE 37 IN core-kernel.z80
                    > USED AT LINE 38 IN core-kernel.z80
                    > USED AT LINE 50 IN core-kernel.z80
                    > USED AT LINE 108 IN core-memory.z80
                    > USED AT LINE 119 IN core-memory.z80
                    > USED AT LINE 146 IN core-memory.z80
                    > USED AT LINE 147 IN core-memory.z80
                    > USED AT LINE 173 IN core-memory.z80
                    > USED AT LINE 176 IN core-memory.z80
                    > USED AT LINE 184 IN core-memory.z80
                    > USED AT LINE 186 IN core-memory.z80
                    > USED AT LINE 193 IN core-memory.z80
                    > USED AT LINE 196 IN core-memory.z80
                    > USED AT LINE 83 IN core-stacks.z80
                    > USED AT LINE 90 IN core-stacks.z80
                    > USED AT LINE 8 IN core-utils.z80
                    > USED AT LINE 16 IN core-utils.z80
                    > USED AT LINE 21 IN core-utils.z80
                    > USED AT LINE 31 IN core-utils.z80
                    > USED AT LINE 34 IN core-utils.z80
                    > USED AT LINE 89 IN core-utils.z80
                    > USED AT LINE 96 IN core-utils.z80
DOVAR:              062E DEFINED AT LINE 49
                    > USED AT LINE 150 IN core-compiler.z80
                    > USED AT LINE 41 IN core-does.z80
                    > USED AT LINE 201 IN core-interpret.z80
UP:                 0636 DEFINED AT LINE 49
DOUSE:              063E DEFINED AT LINE 49
                    > USED AT LINE 142 IN core-compiler.z80
                    > USED AT LINE 32
                    > USED AT LINE 32
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 32
                    > USED AT LINE 32
                    > USED AT LINE 62
                    > USED AT LINE 32
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 32
                    > USED AT LINE 62
EXIT:               064E DEFINED AT LINE 11
                    > USED AT LINE 80 IN core-alu.z80
                    > USED AT LINE 114 IN core-alu.z80
                    > USED AT LINE 123 IN core-alu.z80
                    > USED AT LINE 245 IN core-alu.z80
                    > USED AT LINE 304 IN core-alu.z80
                    > USED AT LINE 6 IN core-compiler.z80
                    > USED AT LINE 61 IN core-compiler.z80
                    > USED AT LINE 75 IN core-compiler.z80
                    > USED AT LINE 88 IN core-compiler.z80
                    > USED AT LINE 90 IN core-compiler.z80
                    > USED AT LINE 94 IN core-compiler.z80
                    > USED AT LINE 107 IN core-compiler.z80
                    > USED AT LINE 120 IN core-compiler.z80
                    > USED AT LINE 9 IN core-control.z80
                    > USED AT LINE 36 IN core-does.z80
                    > USED AT LINE 38 IN core-format.z80
                    > USED AT LINE 46 IN core-format.z80
                    > USED AT LINE 85 IN core-format.z80
                    > USED AT LINE 116 IN core-interpret.z80
                    > USED AT LINE 229 IN core-interpret.z80
                    > USED AT LINE 233 IN core-interpret.z80
                    > USED AT LINE 250 IN core-interpret.z80
                    > USED AT LINE 258 IN core-interpret.z80
                    > USED AT LINE 64 IN core-io.z80
                    > USED AT LINE 79 IN core-io.z80
                    > USED AT LINE 100 IN core-io.z80
                    > USED AT LINE 112 IN core-io.z80
                    > USED AT LINE 138 IN core-io.z80
                    > USED AT LINE 169 IN core-io.z80
                    > USED AT LINE 192 IN core-io.z80
                    > USED AT LINE 209 IN core-io.z80
                    > USED AT LINE 87 IN core-kernel.z80
                    > USED AT LINE 135 IN core-memory.z80
                    > USED AT LINE 150 IN core-memory.z80
                    > USED AT LINE 162 IN core-memory.z80
                    > USED AT LINE 198 IN core-memory.z80
                    > USED AT LINE 58 IN core-stacks.z80
                    > USED AT LINE 11 IN core-utils.z80
                    > USED AT LINE 24 IN core-utils.z80
                    > USED AT LINE 45 IN core-utils.z80
                    > USED AT LINE 58 IN core-utils.z80
                    > USED AT LINE 97 IN core-utils.z80
                    > USED AT LINE 100 IN core-utils.z80
                    > USED AT LINE 122 IN core-utils.z80
DODO:               065A DEFINED AT LINE 49
DONXT:              067C DEFINED AT LINE 11
                    > USED AT LINE 14 IN core-control.z80
                    > USED AT LINE 31 IN core-interpret.z80
                    > USED AT LINE 60 IN core-interpret.z80
                    > USED AT LINE 75 IN core-interpret.z80
                    > USED AT LINE 138 IN core-interpret.z80
                    > USED AT LINE 99 IN core-io.z80
                    > USED AT LINE 111 IN core-io.z80
                    > USED AT LINE 149 IN core-memory.z80
                    > USED AT LINE 161 IN core-memory.z80
                    > USED AT LINE 175 IN core-memory.z80
                    > USED AT LINE 10 IN core-utils.z80
                    > USED AT LINE 23 IN core-utils.z80
                    > USED AT LINE 39 IN core-utils.z80
                    > USED AT LINE 56 IN core-utils.z80
DECHILO:            0691 DEFINED AT LINE 146 IN core-does.z80
                    > USED AT LINE 139 IN core-does.z80
DECLOW:             0693 DEFINED AT LINE 149 IN core-does.z80
                    > USED AT LINE 135 IN core-does.z80
DIGIT:              069C DEFINED AT LINE 49
                    > USED AT LINE 12 IN core-format.z80
EXTRC:              06B6 DEFINED AT LINE 49
BDIGS:              06C8 DEFINED AT LINE 11
                    > USED AT LINE 58 IN core-format.z80
                    > USED AT LINE 154 IN core-io.z80
                    > USED AT LINE 161 IN core-io.z80
HOLD:               06D4 DEFINED AT LINE 11
DIG:                06EC DEFINED AT LINE 11
                    > USED AT LINE 34 IN core-format.z80
DIGS:               06FA DEFINED AT LINE 11
                    > USED AT LINE 58 IN core-format.z80
                    > USED AT LINE 161 IN core-io.z80
DIGS1:              06FE DEFINED AT LINE 33 IN core-format.z80
                    > USED AT LINE 36 IN core-format.z80
DIGS2:              070A DEFINED AT LINE 37 IN core-format.z80
                    > USED AT LINE 35 IN core-format.z80
SIGN:               070C DEFINED AT LINE 11
                    > USED AT LINE 59 IN core-format.z80
SIGN1:              071C DEFINED AT LINE 45 IN core-format.z80
EDIGS:              071E DEFINED AT LINE 11
                    > USED AT LINE 59 IN core-format.z80
STR:                0730 DEFINED AT LINE 49
                    > USED AT LINE 148 IN core-io.z80
                    > USED AT LINE 171 IN core-io.z80
HEX:                0746 DEFINED AT LINE 11
                    > USED AT LINE 19 IN core-interpret.z80
DECIMAL:            0754 DEFINED AT LINE 11
BLANK:              0762 DEFINED AT LINE 11
                    > USED AT LINE 56 IN core-interpret.z80
                    > USED AT LINE 109 IN core-interpret.z80
                    > USED AT LINE 114 IN core-interpret.z80
                    > USED AT LINE 89 IN core-io.z80
                    > USED AT LINE 189 IN core-io.z80
                    > USED AT LINE 207 IN core-io.z80
                    > USED AT LINE 221 IN core-io.z80
                    > USED AT LINE 171 IN core-memory.z80
TCHAR:              076C DEFINED AT LINE 49
TCHA1:              078C DEFINED AT LINE 84 IN core-format.z80
                    > USED AT LINE 82 IN core-format.z80
DIGTQ:              078E DEFINED AT LINE 49
DGTQ1:              07B4 DEFINED AT LINE 10 IN core-interpret.z80
                    > USED AT LINE 7 IN core-interpret.z80
NUMBQ:              07BC DEFINED AT LINE 49
NUMQ1:              07EC DEFINED AT LINE 21 IN core-interpret.z80
                    > USED AT LINE 18 IN core-interpret.z80
NUMQ2:              0810 DEFINED AT LINE 26 IN core-interpret.z80
                    > USED AT LINE 31 IN core-interpret.z80
NUMQ3:              0842 DEFINED AT LINE 35 IN core-interpret.z80
                    > USED AT LINE 33 IN core-interpret.z80
NUMQ4:              0848 DEFINED AT LINE 38 IN core-interpret.z80
                    > USED AT LINE 28 IN core-interpret.z80
NUMQ5:              0854 DEFINED AT LINE 40 IN core-interpret.z80
                    > USED AT LINE 37 IN core-interpret.z80
NUMQ6:              0856 DEFINED AT LINE 42 IN core-interpret.z80
                    > USED AT LINE 24 IN core-interpret.z80
PARS:               0862 DEFINED AT LINE 49
                    > USED AT LINE 93 IN core-interpret.z80
PARS1:              0888 DEFINED AT LINE 55 IN core-interpret.z80
                    > USED AT LINE 60 IN core-interpret.z80
PARS2:              08AE DEFINED AT LINE 62 IN core-interpret.z80
                    > USED AT LINE 58 IN core-interpret.z80
PARS3:              08B0 DEFINED AT LINE 64 IN core-interpret.z80
                    > USED AT LINE 53 IN core-interpret.z80
PARS4:              08B6 DEFINED AT LINE 67 IN core-interpret.z80
                    > USED AT LINE 75 IN core-interpret.z80
PARS5:              08CE DEFINED AT LINE 72 IN core-interpret.z80
                    > USED AT LINE 70 IN core-interpret.z80
PARS6:              08E4 DEFINED AT LINE 78 IN core-interpret.z80
                    > USED AT LINE 73 IN core-interpret.z80
PARS7:              08F2 DEFINED AT LINE 81 IN core-interpret.z80
                    > USED AT LINE 77 IN core-interpret.z80
PARS8:              08FE DEFINED AT LINE 84 IN core-interpret.z80
                    > USED AT LINE 51 IN core-interpret.z80
PARSE:              0906 DEFINED AT LINE 11
                    > USED AT LINE 109 IN core-interpret.z80
                    > USED AT LINE 114 IN core-interpret.z80
                    > USED AT LINE 121 IN core-interpret.z80
PAREN:              0928 DEFINED AT LINE 11
BKSLA:              0934 DEFINED AT LINE 11
CHAR:               0942 DEFINED AT LINE 11
TOKEN:              0950 DEFINED AT LINE 49
                    > USED AT LINE 4 IN core-compiler.z80
                    > USED AT LINE 126 IN core-compiler.z80
                    > USED AT LINE 140 IN core-compiler.z80
                    > USED AT LINE 148 IN core-compiler.z80
                    > USED AT LINE 265 IN core-interpret.z80
WORDD:              096C DEFINED AT LINE 11
NAMET:              0978 DEFINED AT LINE 49
                    > USED AT LINE 162 IN core-interpret.z80
                    > USED AT LINE 80 IN core-utils.z80
SAMEQ:              0984 DEFINED AT LINE 49
SAME1:              098E DEFINED AT LINE 133 IN core-interpret.z80
                    > USED AT LINE 138 IN core-interpret.z80
SAME2:              09B0 DEFINED AT LINE 138 IN core-interpret.z80
                    > USED AT LINE 132 IN core-interpret.z80
                    > USED AT LINE 136 IN core-interpret.z80
FIND:               09BA DEFINED AT LINE 11
                    > USED AT LINE 174 IN core-interpret.z80
FIND1:              09D8 DEFINED AT LINE 147 IN core-interpret.z80
                    > USED AT LINE 159 IN core-interpret.z80
FIND2:              09FC DEFINED AT LINE 153 IN core-interpret.z80
                    > USED AT LINE 150 IN core-interpret.z80
FIND3:              0A04 DEFINED AT LINE 154 IN core-interpret.z80
                    > USED AT LINE 152 IN core-interpret.z80
FIND6:              0A08 DEFINED AT LINE 155 IN core-interpret.z80
                    > USED AT LINE 148 IN core-interpret.z80
FIND4:              0A14 DEFINED AT LINE 157 IN core-interpret.z80
                    > USED AT LINE 154 IN core-interpret.z80
FIND5:              0A20 DEFINED AT LINE 160 IN core-interpret.z80
                    > USED AT LINE 157 IN core-interpret.z80
NAMEQ:              0A32 DEFINED AT LINE 49
                    > USED AT LINE 4 IN core-compiler.z80
                    > USED AT LINE 56 IN core-compiler.z80
                    > USED AT LINE 84 IN core-compiler.z80
                    > USED AT LINE 225 IN core-interpret.z80
NAMQ1:              0A44 DEFINED AT LINE 170 IN core-interpret.z80
                    > USED AT LINE 168 IN core-interpret.z80
NAMQ2:              0A46 DEFINED AT LINE 171 IN core-interpret.z80
                    > USED AT LINE 175 IN core-interpret.z80
NAMQ3:              0A64 DEFINED AT LINE 177 IN core-interpret.z80
                    > USED AT LINE 173 IN core-interpret.z80
CATCH:              0A6E DEFINED AT LINE 11
THROW:              0A94 DEFINED AT LINE 11
                    > USED AT LINE 8 IN core-compiler.z80
                    > USED AT LINE 78 IN core-compiler.z80
                    > USED AT LINE 95 IN core-compiler.z80
                    > USED AT LINE 210 IN core-interpret.z80
                    > USED AT LINE 217 IN core-interpret.z80
                    > USED AT LINE 235 IN core-interpret.z80
NULLS:              0AB2 DEFINED AT LINE 49
                    > USED AT LINE 210 IN core-interpret.z80
ABORT:              0AC0 DEFINED AT LINE 11
ABORQ:              0AC8 DEFINED AT LINE 11
                    > USED AT LINE 69 IN core-control.z80
                    > USED AT LINE 37
                    > USED AT LINE 37
ABOR1:              0AD4 DEFINED AT LINE 218 IN core-interpret.z80
                    > USED AT LINE 216 IN core-interpret.z80
INTER:              0ADA DEFINED AT LINE 49
                    > USED AT LINE 241 IN core-interpret.z80
                    > USED AT LINE 247 IN core-interpret.z80
INTE1:              0B02 DEFINED AT LINE 230 IN core-interpret.z80
                    > USED AT LINE 226 IN core-interpret.z80
INTE2:              0B0C DEFINED AT LINE 234 IN core-interpret.z80
                    > USED AT LINE 232 IN core-interpret.z80
LBRAC:              0B0E DEFINED AT LINE 11
DOTOK:              0B1C DEFINED AT LINE 11
DOTO1:              0B34 DEFINED AT LINE 250 IN core-interpret.z80
                    > USED AT LINE 248 IN core-interpret.z80
QSTAC:              0B38 DEFINED AT LINE 49
EVAL:               0B50 DEFINED AT LINE 11
EVAL1:              0B54 DEFINED AT LINE 264 IN core-interpret.z80
                    > USED AT LINE 268 IN core-interpret.z80
EVAL2:              0B68 DEFINED AT LINE 269 IN core-interpret.z80
                    > USED AT LINE 266 IN core-interpret.z80
PCSTO:              0B70 DEFINED AT LINE 11
PCAT:               0B7A DEFINED AT LINE 11
STOIO:              0B86 DEFINED AT LINE 11
                    > USED AT LINE 2 IN core-kernel.z80
QRX:                0B8C DEFINED AT LINE 11
                    > USED AT LINE 7 IN defaults.z80
QRX1:               0B97 DEFINED AT LINE 36 IN core-io.z80
                    > USED AT LINE 33 IN core-io.z80
QRX2:               0BA1 DEFINED AT LINE 42 IN core-io.z80
                    > USED AT LINE 35 IN core-io.z80
TXSTO:              0BA4 DEFINED AT LINE 11
                    > USED AT LINE 8 IN defaults.z80
                    > USED AT LINE 11 IN defaults.z80
QKEY:               0BAC DEFINED AT LINE 11
                    > USED AT LINE 62 IN core-io.z80
                    > USED AT LINE 75 IN core-io.z80
KEY:                0BB8 DEFINED AT LINE 11
                    > USED AT LINE 77 IN core-io.z80
                    > USED AT LINE 220 IN core-io.z80
KEY1:               0BBC DEFINED AT LINE 61 IN core-io.z80
                    > USED AT LINE 63 IN core-io.z80
EMIT:               0BC4 DEFINED AT LINE 11
                    > USED AT LINE 89 IN core-io.z80
NUFQ:               0BD0 DEFINED AT LINE 11
                    > USED AT LINE 37 IN core-utils.z80
                    > USED AT LINE 120 IN core-utils.z80
NUFQ1:              0BE6 DEFINED AT LINE 78 IN core-io.z80
                    > USED AT LINE 76 IN core-io.z80
PACE:               0BE8 DEFINED AT LINE 49
SPACE:              0BF4 DEFINED AT LINE 11
                    > USED AT LINE 97 IN core-io.z80
                    > USED AT LINE 162 IN core-io.z80
                    > USED AT LINE 171 IN core-io.z80
                    > USED AT LINE 17 IN core-utils.z80
                    > USED AT LINE 36 IN core-utils.z80
                    > USED AT LINE 36 IN core-utils.z80
                    > USED AT LINE 115 IN core-utils.z80
SPACS:              0BFE DEFINED AT LINE 11
                    > USED AT LINE 149 IN core-io.z80
                    > USED AT LINE 156 IN core-io.z80
CHAR1:              0C0E DEFINED AT LINE 96 IN core-io.z80
                    > USED AT LINE 99 IN core-io.z80
CHAR2:              0C10 DEFINED AT LINE 98 IN core-io.z80
                    > USED AT LINE 95 IN core-io.z80
TYPEE:              0C16 DEFINED AT LINE 11
                    > USED AT LINE 149 IN core-io.z80
                    > USED AT LINE 156 IN core-io.z80
                    > USED AT LINE 162 IN core-io.z80
TYPE1:              0C20 DEFINED AT LINE 107 IN core-io.z80
                    > USED AT LINE 111 IN core-io.z80
TYPE2:              0C2C DEFINED AT LINE 110 IN core-io.z80
                    > USED AT LINE 106 IN core-io.z80
TYPESZ:             0C34 DEFINED AT LINE 11
                    > USED AT LINE 87 IN core-kernel.z80
CR:                 0C3E DEFINED AT LINE 11
                    > USED AT LINE 250 IN core-interpret.z80
                    > USED AT LINE 34 IN core-utils.z80
                    > USED AT LINE 50 IN core-utils.z80
                    > USED AT LINE 107 IN core-utils.z80
DOSTR:              0C50 DEFINED AT LINE 11
                    > USED AT LINE 217 IN core-interpret.z80
                    > USED AT LINE 219 IN core-interpret.z80
                    > USED AT LINE 138 IN core-io.z80
                    > USED AT LINE 143 IN core-io.z80
STRQP:              0C68 DEFINED AT LINE 49
                    > USED AT LINE 37
                    > USED AT LINE 74 IN core-control.z80
DOTQP:              0C70 DEFINED AT LINE 49
                    > USED AT LINE 37
                    > USED AT LINE 79 IN core-control.z80
                    > USED AT LINE 37
                    > USED AT LINE 37
                    > USED AT LINE 37
DOTR:               0C7C DEFINED AT LINE 11
UDOTR:              0C90 DEFINED AT LINE 11
UDOT:               0CA8 DEFINED AT LINE 11
                    > USED AT LINE 169 IN core-io.z80
DOT:                0CB8 DEFINED AT LINE 11
                    > USED AT LINE 181 IN core-io.z80
DOT1:               0CCE DEFINED AT LINE 170 IN core-io.z80
                    > USED AT LINE 168 IN core-io.z80
DOTPR:              0CD6 DEFINED AT LINE 11
QUEST:              0CE2 DEFINED AT LINE 11
BKSP:               0CEC DEFINED AT LINE 11
                    > USED AT LINE 209 IN core-io.z80
BACK1:              0D1C DEFINED AT LINE 191 IN core-io.z80
                    > USED AT LINE 187 IN core-io.z80
TAP:                0D1E DEFINED AT LINE 11
                    > USED AT LINE 207 IN core-io.z80
                    > USED AT LINE 223 IN core-io.z80
KTAP:               0D34 DEFINED AT LINE 11
KTAP1:              0D54 DEFINED AT LINE 208 IN core-io.z80
                    > USED AT LINE 206 IN core-io.z80
KTAP2:              0D58 DEFINED AT LINE 210 IN core-io.z80
                    > USED AT LINE 204 IN core-io.z80
ACCEP:              0D62 DEFINED AT LINE 11
ACCP1:              0D6C DEFINED AT LINE 217 IN core-io.z80
                    > USED AT LINE 228 IN core-io.z80
ACCP2:              0D8A DEFINED AT LINE 225 IN core-io.z80
                    > USED AT LINE 222 IN core-io.z80
ACCP3:              0D8E DEFINED AT LINE 227 IN core-io.z80
                    > USED AT LINE 224 IN core-io.z80
ACCP4:              0D92 DEFINED AT LINE 229 IN core-io.z80
                    > USED AT LINE 219 IN core-io.z80
EXPEC:              0D9A DEFINED AT LINE 49
QUERY:              0DAA DEFINED AT LINE 49
KOLD:               0DC8 DEFINED AT LINE 49
                    > USED AT LINE 47
HELLO:              0DD8 DEFINED AT LINE 6 IN core-kernel.z80
                    > USED AT LINE 4 IN core-kernel.z80
SVEC:               0DE8 DEFINED AT LINE 8 IN core-kernel.z80
                    > USED AT LINE 13
                    > USED AT LINE 15
                    > USED AT LINE 17
                    > USED AT LINE 19
                    > USED AT LINE 21
                    > USED AT LINE 23
                    > USED AT LINE 25
SVEC1:              0DF4 DEFINED AT LINE 17 IN core-kernel.z80
                    > USED AT LINE 30
NEXT_STEP:          0DFE DEFINED AT LINE 27 IN core-kernel.z80
                    > USED AT LINE 43
COLD:               0E04 DEFINED AT LINE 11
COLD1:              0E08 DEFINED AT LINE 36 IN core-kernel.z80
                    > USED AT LINE 44 IN core-kernel.z80
PRESE:              0E1E DEFINED AT LINE 11
                    > USED AT LINE 39 IN core-kernel.z80
QUIT:               0E34 DEFINED AT LINE 11
                    > USED AT LINE 5 IN core-kernel.z80
                    > USED AT LINE 43 IN core-kernel.z80
EXECU:              0E36 DEFINED AT LINE 11
                    > USED AT LINE 88 IN core-compiler.z80
                    > USED AT LINE 229 IN core-interpret.z80
                    > USED AT LINE 133 IN core-memory.z80
QBRAN:              0E3A DEFINED AT LINE 49
                    > USED AT LINE 86 IN core-alu.z80
                    > USED AT LINE 95 IN core-alu.z80
                    > USED AT LINE 120 IN core-alu.z80
                    > USED AT LINE 234 IN core-alu.z80
                    > USED AT LINE 238 IN core-alu.z80
                    > USED AT LINE 242 IN core-alu.z80
                    > USED AT LINE 5 IN core-compiler.z80
                    > USED AT LINE 57 IN core-compiler.z80
                    > USED AT LINE 68 IN core-compiler.z80
                    > USED AT LINE 85 IN core-compiler.z80
                    > USED AT LINE 87 IN core-compiler.z80
                    > USED AT LINE 93 IN core-compiler.z80
                    > USED AT LINE 19 IN core-control.z80
                    > USED AT LINE 30 IN core-control.z80
                    > USED AT LINE 35 IN core-format.z80
                    > USED AT LINE 43 IN core-format.z80
                    > USED AT LINE 82 IN core-format.z80
                    > USED AT LINE 7 IN core-interpret.z80
                    > USED AT LINE 18 IN core-interpret.z80
                    > USED AT LINE 24 IN core-interpret.z80
                    > USED AT LINE 28 IN core-interpret.z80
                    > USED AT LINE 33 IN core-interpret.z80
                    > USED AT LINE 51 IN core-interpret.z80
                    > USED AT LINE 53 IN core-interpret.z80
                    > USED AT LINE 58 IN core-interpret.z80
                    > USED AT LINE 70 IN core-interpret.z80
                    > USED AT LINE 73 IN core-interpret.z80
                    > USED AT LINE 136 IN core-interpret.z80
                    > USED AT LINE 148 IN core-interpret.z80
                    > USED AT LINE 150 IN core-interpret.z80
                    > USED AT LINE 157 IN core-interpret.z80
                    > USED AT LINE 168 IN core-interpret.z80
                    > USED AT LINE 173 IN core-interpret.z80
                    > USED AT LINE 175 IN core-interpret.z80
                    > USED AT LINE 216 IN core-interpret.z80
                    > USED AT LINE 226 IN core-interpret.z80
                    > USED AT LINE 232 IN core-interpret.z80
                    > USED AT LINE 248 IN core-interpret.z80
                    > USED AT LINE 266 IN core-interpret.z80
                    > USED AT LINE 63 IN core-io.z80
                    > USED AT LINE 76 IN core-io.z80
                    > USED AT LINE 168 IN core-io.z80
                    > USED AT LINE 187 IN core-io.z80
                    > USED AT LINE 204 IN core-io.z80
                    > USED AT LINE 206 IN core-io.z80
                    > USED AT LINE 219 IN core-io.z80
                    > USED AT LINE 222 IN core-io.z80
                    > USED AT LINE 132 IN core-memory.z80
                    > USED AT LINE 172 IN core-memory.z80
                    > USED AT LINE 195 IN core-memory.z80
                    > USED AT LINE 55 IN core-stacks.z80
                    > USED AT LINE 38 IN core-utils.z80
                    > USED AT LINE 75 IN core-utils.z80
                    > USED AT LINE 79 IN core-utils.z80
                    > USED AT LINE 81 IN core-utils.z80
                    > USED AT LINE 86 IN core-utils.z80
                    > USED AT LINE 95 IN core-utils.z80
                    > USED AT LINE 110 IN core-utils.z80
                    > USED AT LINE 114 IN core-utils.z80
                    > USED AT LINE 121 IN core-utils.z80
BRAN:               0E46 DEFINED AT LINE 49
                    > USED AT LINE 24 IN core-control.z80
                    > USED AT LINE 37 IN core-control.z80
                    > USED AT LINE 36 IN core-format.z80
                    > USED AT LINE 37 IN core-interpret.z80
                    > USED AT LINE 77 IN core-interpret.z80
                    > USED AT LINE 132 IN core-interpret.z80
                    > USED AT LINE 152 IN core-interpret.z80
                    > USED AT LINE 154 IN core-interpret.z80
                    > USED AT LINE 159 IN core-interpret.z80
                    > USED AT LINE 268 IN core-interpret.z80
                    > USED AT LINE 95 IN core-io.z80
                    > USED AT LINE 106 IN core-io.z80
                    > USED AT LINE 224 IN core-io.z80
                    > USED AT LINE 228 IN core-io.z80
                    > USED AT LINE 44 IN core-kernel.z80
                    > USED AT LINE 69 IN core-kernel.z80
                    > USED AT LINE 142 IN core-memory.z80
                    > USED AT LINE 157 IN core-memory.z80
                    > USED AT LINE 169 IN core-memory.z80
                    > USED AT LINE 5 IN core-utils.z80
                    > USED AT LINE 18 IN core-utils.z80
                    > USED AT LINE 40 IN core-utils.z80
                    > USED AT LINE 52 IN core-utils.z80
                    > USED AT LINE 83 IN core-utils.z80
                    > USED AT LINE 116 IN core-utils.z80
THROWX:             0E4E DEFINED AT LINE 11
                    > USED AT LINE 191 IN core-alu.z80
                    > USED AT LINE 194 IN core-alu.z80
STORE:              0E56 DEFINED AT LINE 11
                    > USED AT LINE 19 IN core-compiler.z80
                    > USED AT LINE 45 IN core-compiler.z80
                    > USED AT LINE 75 IN core-compiler.z80
                    > USED AT LINE 50 IN core-interpret.z80
                    > USED AT LINE 91 IN core-memory.z80
                    > USED AT LINE 97 IN core-memory.z80
AT:                 0E60 DEFINED AT LINE 11
                    > USED AT LINE 50 IN core-compiler.z80
                    > USED AT LINE 73 IN core-compiler.z80
                    > USED AT LINE 86 IN core-compiler.z80
                    > USED AT LINE 101 IN core-compiler.z80
                    > USED AT LINE 134 IN core-compiler.z80
                    > USED AT LINE 47 IN core-does.z80
                    > USED AT LINE 22 IN core-format.z80
                    > USED AT LINE 28 IN core-format.z80
                    > USED AT LINE 16 IN core-interpret.z80
                    > USED AT LINE 68 IN core-interpret.z80
                    > USED AT LINE 69 IN core-interpret.z80
                    > USED AT LINE 92 IN core-interpret.z80
                    > USED AT LINE 104 IN core-interpret.z80
                    > USED AT LINE 115 IN core-interpret.z80
                    > USED AT LINE 146 IN core-interpret.z80
                    > USED AT LINE 147 IN core-interpret.z80
                    > USED AT LINE 149 IN core-interpret.z80
                    > USED AT LINE 172 IN core-interpret.z80
                    > USED AT LINE 192 IN core-interpret.z80
                    > USED AT LINE 227 IN core-interpret.z80
                    > USED AT LINE 56 IN core-io.z80
                    > USED AT LINE 69 IN core-io.z80
                    > USED AT LINE 167 IN core-io.z80
                    > USED AT LINE 181 IN core-io.z80
                    > USED AT LINE 49 IN core-kernel.z80
                    > USED AT LINE 103 IN core-memory.z80
                    > USED AT LINE 114 IN core-memory.z80
                    > USED AT LINE 131 IN core-memory.z80
                    > USED AT LINE 30 IN core-utils.z80
                    > USED AT LINE 74 IN core-utils.z80
                    > USED AT LINE 78 IN core-utils.z80
                    > USED AT LINE 118 IN core-utils.z80
CSTOR:              0E68 DEFINED AT LINE 11
                    > USED AT LINE 198 IN core-io.z80
                    > USED AT LINE 145 IN core-memory.z80
                    > USED AT LINE 159 IN core-memory.z80
                    > USED AT LINE 187 IN core-memory.z80
CAT:                0E70 DEFINED AT LINE 11
                    > USED AT LINE 67 IN core-compiler.z80
                    > USED AT LINE 17 IN core-interpret.z80
                    > USED AT LINE 22 IN core-interpret.z80
                    > USED AT LINE 108 IN core-io.z80
                    > USED AT LINE 109 IN core-memory.z80
                    > USED AT LINE 7 IN core-utils.z80
                    > USED AT LINE 20 IN core-utils.z80
RAT:                0E78 DEFINED AT LINE 11
                    > USED AT LINE 239 IN core-alu.z80
                    > USED AT LINE 23 IN core-interpret.z80
                    > USED AT LINE 32 IN core-interpret.z80
                    > USED AT LINE 133 IN core-interpret.z80
                    > USED AT LINE 134 IN core-interpret.z80
                    > USED AT LINE 131 IN core-io.z80
                    > USED AT LINE 145 IN core-memory.z80
                    > USED AT LINE 54 IN core-utils.z80
RPAT:               0E82 DEFINED AT LINE 11
                    > USED AT LINE 185 IN core-interpret.z80
RPSTO:              0E8A DEFINED AT LINE 11
SPAT:               0E92 DEFINED AT LINE 11
                    > USED AT LINE 184 IN core-interpret.z80
                    > USED AT LINE 84 IN core-stacks.z80
                    > USED AT LINE 89 IN core-stacks.z80
SPSTO:              0E9C DEFINED AT LINE 11
PSTOR:              0EA4 DEFINED AT LINE 11
                    > USED AT LINE 13 IN core-compiler.z80
DSTOR:              0EB6 DEFINED AT LINE 11
DAT:                0EC6 DEFINED AT LINE 11
COUNT:              0ED6 DEFINED AT LINE 11
                    > USED AT LINE 44 IN core-compiler.z80
                    > USED AT LINE 59 IN core-compiler.z80
                    > USED AT LINE 143 IN core-io.z80
                    > USED AT LINE 96 IN core-utils.z80
HERE:               0EE8 DEFINED AT LINE 11
                    > USED AT LINE 18 IN core-compiler.z80
                    > USED AT LINE 71 IN core-compiler.z80
                    > USED AT LINE 9 IN core-control.z80
                    > USED AT LINE 43 IN core-control.z80
                    > USED AT LINE 48 IN core-control.z80
                    > USED AT LINE 121 IN core-interpret.z80
                    > USED AT LINE 119 IN core-memory.z80
PAD:                0EF2 DEFINED AT LINE 11
                    > USED AT LINE 17 IN core-format.z80
                    > USED AT LINE 52 IN core-format.z80
TIB:                0F00 DEFINED AT LINE 11
                    > USED AT LINE 91 IN core-interpret.z80
                    > USED AT LINE 240 IN core-io.z80
ATEXE:              0F0C DEFINED AT LINE 49
                    > USED AT LINE 92 IN core-compiler.z80
                    > USED AT LINE 231 IN core-interpret.z80
                    > USED AT LINE 267 IN core-interpret.z80
                    > USED AT LINE 226 IN core-io.z80
                    > USED AT LINE 235 IN core-io.z80
EXE1:               0F1A DEFINED AT LINE 134 IN core-memory.z80
                    > USED AT LINE 132 IN core-memory.z80
CMOVE:              0F1C DEFINED AT LINE 11
                    > USED AT LINE 188 IN core-memory.z80
CMOV1:              0F26 DEFINED AT LINE 143 IN core-memory.z80
                    > USED AT LINE 149 IN core-memory.z80
CMOV2:              0F3E DEFINED AT LINE 148 IN core-memory.z80
                    > USED AT LINE 142 IN core-memory.z80
FILL:               0F46 DEFINED AT LINE 11
FILL1:              0F54 DEFINED AT LINE 158 IN core-memory.z80
                    > USED AT LINE 161 IN core-memory.z80
FILL2:              0F5E DEFINED AT LINE 160 IN core-memory.z80
                    > USED AT LINE 157 IN core-memory.z80
DTRAI:              0F66 DEFINED AT LINE 11
DTRA1:              0F70 DEFINED AT LINE 170 IN core-memory.z80
                    > USED AT LINE 175 IN core-memory.z80
DTRA2:              0F8A DEFINED AT LINE 174 IN core-memory.z80
                    > USED AT LINE 169 IN core-memory.z80
                    > USED AT LINE 172 IN core-memory.z80
PACKS:              0F94 DEFINED AT LINE 11
                    > USED AT LINE 116 IN core-interpret.z80
ALGND:              0FCE DEFINED AT LINE 11
                    > USED AT LINE 71 IN core-compiler.z80
                    > USED AT LINE 132 IN core-io.z80
                    > USED AT LINE 182 IN core-memory.z80
ALGN1:              0FEE DEFINED AT LINE 197 IN core-memory.z80
                    > USED AT LINE 195 IN core-memory.z80
ERR_DIVZERO:        0FF2 DEFINED AT LINE 3 IN core-messages.z80
                    > USED AT LINE 190 IN core-alu.z80
ERR_OUTOFRANGE:     0FFA DEFINED AT LINE 4 IN core-messages.z80
                    > USED AT LINE 193 IN core-alu.z80
TOR:                1006 DEFINED AT LINE 11
                    > USED AT LINE 65 IN core-alu.z80
                    > USED AT LINE 235 IN core-alu.z80
                    > USED AT LINE 237 IN core-alu.z80
                    > USED AT LINE 309 IN core-alu.z80
                    > USED AT LINE 32 IN core-compiler.z80
                    > USED AT LINE 4 IN core-control.z80
                    > USED AT LINE 64 IN core-does.z80
                    > USED AT LINE 57 IN core-format.z80
                    > USED AT LINE 5 IN core-interpret.z80
                    > USED AT LINE 27 IN core-interpret.z80
                    > USED AT LINE 54 IN core-interpret.z80
                    > USED AT LINE 66 IN core-interpret.z80
                    > USED AT LINE 76 IN core-interpret.z80
                    > USED AT LINE 91 IN core-interpret.z80
                    > USED AT LINE 131 IN core-interpret.z80
                    > USED AT LINE 170 IN core-interpret.z80
                    > USED AT LINE 184 IN core-interpret.z80
                    > USED AT LINE 105 IN core-io.z80
                    > USED AT LINE 132 IN core-io.z80
                    > USED AT LINE 148 IN core-io.z80
                    > USED AT LINE 154 IN core-io.z80
                    > USED AT LINE 186 IN core-io.z80
                    > USED AT LINE 141 IN core-memory.z80
                    > USED AT LINE 144 IN core-memory.z80
                    > USED AT LINE 156 IN core-memory.z80
                    > USED AT LINE 168 IN core-memory.z80
                    > USED AT LINE 63 IN core-stacks.z80
                    > USED AT LINE 78 IN core-stacks.z80
                    > USED AT LINE 4 IN core-utils.z80
                    > USED AT LINE 17 IN core-utils.z80
                    > USED AT LINE 32 IN core-utils.z80
                    > USED AT LINE 51 IN core-utils.z80
RFROM:              1014 DEFINED AT LINE 11
                    > USED AT LINE 67 IN core-alu.z80
                    > USED AT LINE 129 IN core-alu.z80
                    > USED AT LINE 241 IN core-alu.z80
                    > USED AT LINE 301 IN core-alu.z80
                    > USED AT LINE 31 IN core-compiler.z80
                    > USED AT LINE 36 IN core-does.z80
                    > USED AT LINE 47 IN core-does.z80
                    > USED AT LINE 11 IN core-interpret.z80
                    > USED AT LINE 39 IN core-interpret.z80
                    > USED AT LINE 39 IN core-interpret.z80
                    > USED AT LINE 43 IN core-interpret.z80
                    > USED AT LINE 44 IN core-interpret.z80
                    > USED AT LINE 61 IN core-interpret.z80
                    > USED AT LINE 63 IN core-interpret.z80
                    > USED AT LINE 79 IN core-interpret.z80
                    > USED AT LINE 83 IN core-interpret.z80
                    > USED AT LINE 83 IN core-interpret.z80
                    > USED AT LINE 85 IN core-interpret.z80
                    > USED AT LINE 93 IN core-interpret.z80
                    > USED AT LINE 137 IN core-interpret.z80
                    > USED AT LINE 155 IN core-interpret.z80
                    > USED AT LINE 160 IN core-interpret.z80
                    > USED AT LINE 171 IN core-interpret.z80
                    > USED AT LINE 176 IN core-interpret.z80
                    > USED AT LINE 177 IN core-interpret.z80
                    > USED AT LINE 186 IN core-interpret.z80
                    > USED AT LINE 187 IN core-interpret.z80
                    > USED AT LINE 193 IN core-interpret.z80
                    > USED AT LINE 194 IN core-interpret.z80
                    > USED AT LINE 195 IN core-interpret.z80
                    > USED AT LINE 131 IN core-io.z80
                    > USED AT LINE 155 IN core-io.z80
                    > USED AT LINE 147 IN core-memory.z80
                    > USED AT LINE 173 IN core-memory.z80
                    > USED AT LINE 42 IN core-utils.z80
                    > USED AT LINE 44 IN core-utils.z80
DUPP:               1022 DEFINED AT LINE 11
                    > USED AT LINE 77 IN core-alu.z80
                    > USED AT LINE 233 IN core-alu.z80
                    > USED AT LINE 237 IN core-alu.z80
                    > USED AT LINE 18 IN core-compiler.z80
                    > USED AT LINE 31 IN core-compiler.z80
                    > USED AT LINE 56 IN core-compiler.z80
                    > USED AT LINE 67 IN core-compiler.z80
                    > USED AT LINE 70 IN core-compiler.z80
                    > USED AT LINE 74 IN core-compiler.z80
                    > USED AT LINE 23 IN core-format.z80
                    > USED AT LINE 34 IN core-format.z80
                    > USED AT LINE 57 IN core-format.z80
                    > USED AT LINE 9 IN core-interpret.z80
                    > USED AT LINE 11 IN core-interpret.z80
                    > USED AT LINE 27 IN core-interpret.z80
                    > USED AT LINE 41 IN core-interpret.z80
                    > USED AT LINE 76 IN core-interpret.z80
                    > USED AT LINE 144 IN core-interpret.z80
                    > USED AT LINE 146 IN core-interpret.z80
                    > USED AT LINE 147 IN core-interpret.z80
                    > USED AT LINE 149 IN core-interpret.z80
                    > USED AT LINE 162 IN core-interpret.z80
                    > USED AT LINE 167 IN core-interpret.z80
                    > USED AT LINE 265 IN core-interpret.z80
                    > USED AT LINE 75 IN core-io.z80
                    > USED AT LINE 108 IN core-io.z80
                    > USED AT LINE 197 IN core-io.z80
                    > USED AT LINE 203 IN core-io.z80
                    > USED AT LINE 220 IN core-io.z80
                    > USED AT LINE 102 IN core-memory.z80
                    > USED AT LINE 108 IN core-memory.z80
                    > USED AT LINE 144 IN core-memory.z80
                    > USED AT LINE 182 IN core-memory.z80
                    > USED AT LINE 183 IN core-memory.z80
                    > USED AT LINE 193 IN core-memory.z80
                    > USED AT LINE 55 IN core-stacks.z80
                    > USED AT LINE 56 IN core-stacks.z80
                    > USED AT LINE 7 IN core-utils.z80
                    > USED AT LINE 20 IN core-utils.z80
                    > USED AT LINE 78 IN core-utils.z80
                    > USED AT LINE 109 IN core-utils.z80
                    > USED AT LINE 118 IN core-utils.z80
DROP:               1026 DEFINED AT LINE 11
                    > USED AT LINE 50 IN core-alu.z80
                    > USED AT LINE 96 IN core-alu.z80
                    > USED AT LINE 104 IN core-alu.z80
                    > USED AT LINE 114 IN core-alu.z80
                    > USED AT LINE 123 IN core-alu.z80
                    > USED AT LINE 148 IN core-alu.z80
                    > USED AT LINE 255 IN core-alu.z80
                    > USED AT LINE 295 IN core-alu.z80
                    > USED AT LINE 61 IN core-compiler.z80
                    > USED AT LINE 54 IN core-control.z80
                    > USED AT LINE 51 IN core-format.z80
                    > USED AT LINE 83 IN core-format.z80
                    > USED AT LINE 61 IN core-interpret.z80
                    > USED AT LINE 79 IN core-interpret.z80
                    > USED AT LINE 137 IN core-interpret.z80
                    > USED AT LINE 155 IN core-interpret.z80
                    > USED AT LINE 160 IN core-interpret.z80
                    > USED AT LINE 176 IN core-interpret.z80
                    > USED AT LINE 177 IN core-interpret.z80
                    > USED AT LINE 187 IN core-interpret.z80
                    > USED AT LINE 195 IN core-interpret.z80
                    > USED AT LINE 219 IN core-interpret.z80
                    > USED AT LINE 270 IN core-interpret.z80
                    > USED AT LINE 112 IN core-io.z80
                    > USED AT LINE 211 IN core-io.z80
                    > USED AT LINE 230 IN core-io.z80
                    > USED AT LINE 241 IN core-io.z80
                    > USED AT LINE 194 IN core-memory.z80
                    > USED AT LINE 68 IN core-stacks.z80
                    > USED AT LINE 68 IN core-stacks.z80
                    > USED AT LINE 11 IN core-utils.z80
                    > USED AT LINE 42 IN core-utils.z80
                    > USED AT LINE 44 IN core-utils.z80
                    > USED AT LINE 85 IN core-utils.z80
                    > USED AT LINE 87 IN core-utils.z80
                    > USED AT LINE 89 IN core-utils.z80
                    > USED AT LINE 122 IN core-utils.z80
SWAP:               102A DEFINED AT LINE 11
                    > USED AT LINE 96 IN core-alu.z80
                    > USED AT LINE 112 IN core-alu.z80
                    > USED AT LINE 119 IN core-alu.z80
                    > USED AT LINE 121 IN core-alu.z80
                    > USED AT LINE 148 IN core-alu.z80
                    > USED AT LINE 243 IN core-alu.z80
                    > USED AT LINE 260 IN core-alu.z80
                    > USED AT LINE 314 IN core-alu.z80
                    > USED AT LINE 48 IN core-control.z80
                    > USED AT LINE 59 IN core-control.z80
                    > USED AT LINE 64 IN core-control.z80
                    > USED AT LINE 12 IN core-format.z80
                    > USED AT LINE 19 IN core-interpret.z80
                    > USED AT LINE 20 IN core-interpret.z80
                    > USED AT LINE 23 IN core-interpret.z80
                    > USED AT LINE 29 IN core-interpret.z80
                    > USED AT LINE 32 IN core-interpret.z80
                    > USED AT LINE 36 IN core-interpret.z80
                    > USED AT LINE 65 IN core-interpret.z80
                    > USED AT LINE 144 IN core-interpret.z80
                    > USED AT LINE 156 IN core-interpret.z80
                    > USED AT LINE 194 IN core-interpret.z80
                    > USED AT LINE 211 IN core-io.z80
                    > USED AT LINE 90 IN core-memory.z80
                    > USED AT LINE 91 IN core-memory.z80
                    > USED AT LINE 96 IN core-memory.z80
                    > USED AT LINE 103 IN core-memory.z80
                    > USED AT LINE 109 IN core-memory.z80
                    > USED AT LINE 156 IN core-memory.z80
                    > USED AT LINE 188 IN core-memory.z80
                    > USED AT LINE 63 IN core-stacks.z80
                    > USED AT LINE 85 IN core-utils.z80
                    > USED AT LINE 87 IN core-utils.z80
OVER:               1032 DEFINED AT LINE 11
                    > USED AT LINE 128 IN core-alu.z80
                    > USED AT LINE 250 IN core-alu.z80
                    > USED AT LINE 59 IN core-compiler.z80
                    > USED AT LINE 65 IN core-does.z80
                    > USED AT LINE 52 IN core-format.z80
                    > USED AT LINE 17 IN core-interpret.z80
                    > USED AT LINE 22 IN core-interpret.z80
                    > USED AT LINE 56 IN core-interpret.z80
                    > USED AT LINE 65 IN core-interpret.z80
                    > USED AT LINE 82 IN core-interpret.z80
                    > USED AT LINE 85 IN core-interpret.z80
                    > USED AT LINE 133 IN core-interpret.z80
                    > USED AT LINE 134 IN core-interpret.z80
                    > USED AT LINE 155 IN core-io.z80
                    > USED AT LINE 186 IN core-io.z80
                    > USED AT LINE 198 IN core-io.z80
                    > USED AT LINE 216 IN core-io.z80
                    > USED AT LINE 230 IN core-io.z80
                    > USED AT LINE 90 IN core-memory.z80
                    > USED AT LINE 96 IN core-memory.z80
                    > USED AT LINE 171 IN core-memory.z80
                    > USED AT LINE 183 IN core-memory.z80
                    > USED AT LINE 185 IN core-memory.z80
                    > USED AT LINE 73 IN core-stacks.z80
                    > USED AT LINE 73 IN core-stacks.z80
                    > USED AT LINE 16 IN core-utils.z80
QDUP:               103A DEFINED AT LINE 11
                    > USED AT LINE 84 IN core-compiler.z80
                    > USED AT LINE 135 IN core-interpret.z80
                    > USED AT LINE 172 IN core-interpret.z80
                    > USED AT LINE 174 IN core-interpret.z80
                    > USED AT LINE 225 IN core-interpret.z80
                    > USED AT LINE 131 IN core-memory.z80
                    > USED AT LINE 94 IN core-utils.z80
                    > USED AT LINE 113 IN core-utils.z80
QDUP1:              1046 DEFINED AT LINE 57 IN core-stacks.z80
ROT:                1048 DEFINED AT LINE 11
                    > USED AT LINE 78 IN core-stacks.z80
                    > USED AT LINE 35 IN core-utils.z80
                    > USED AT LINE 35 IN core-utils.z80
DDROP:              1056 DEFINED AT LINE 11
                    > USED AT LINE 43 IN core-interpret.z80
                    > USED AT LINE 77 IN core-io.z80
                    > USED AT LINE 150 IN core-memory.z80
                    > USED AT LINE 162 IN core-memory.z80
DDUP:               1060 DEFINED AT LINE 11
                    > USED AT LINE 94 IN core-alu.z80
                    > USED AT LINE 103 IN core-alu.z80
                    > USED AT LINE 111 IN core-alu.z80
                    > USED AT LINE 119 IN core-alu.z80
                    > USED AT LINE 300 IN core-alu.z80
                    > USED AT LINE 218 IN core-io.z80
                    > USED AT LINE 159 IN core-memory.z80
                    > USED AT LINE 187 IN core-memory.z80
                    > USED AT LINE 76 IN core-utils.z80
                    > USED AT LINE 80 IN core-utils.z80
TWOSWAP:            106A DEFINED AT LINE 11
PICK:               1078 DEFINED AT LINE 11
                    > USED AT LINE 54 IN core-utils.z80
DEPTH:              108C DEFINED AT LINE 11
                    > USED AT LINE 256 IN core-interpret.z80
                    > USED AT LINE 50 IN core-utils.z80
SZERO:              10A2 DEFINED AT LINE 11
                    > USED AT LINE 49 IN core-kernel.z80
                    > USED AT LINE 89 IN core-stacks.z80
RZERO:              10AA DEFINED AT LINE 11
TQKEY:              10B2 DEFINED AT LINE 49
                    > USED AT LINE 56 IN core-io.z80
TEMIT:              10BA DEFINED AT LINE 49
                    > USED AT LINE 69 IN core-io.z80
TEXPE:              10C2 DEFINED AT LINE 49
                    > USED AT LINE 235 IN core-io.z80
TTAP:               10CA DEFINED AT LINE 49
                    > USED AT LINE 226 IN core-io.z80
TECHO:              10D2 DEFINED AT LINE 49
                    > USED AT LINE 189 IN core-io.z80
                    > USED AT LINE 197 IN core-io.z80
TPROM:              10DA DEFINED AT LINE 49
                    > USED AT LINE 270 IN core-interpret.z80
BASE:               10E2 DEFINED AT LINE 11
                    > USED AT LINE 28 IN core-format.z80
                    > USED AT LINE 16 IN core-interpret.z80
                    > USED AT LINE 29 IN core-interpret.z80
                    > USED AT LINE 44 IN core-interpret.z80
                    > USED AT LINE 167 IN core-io.z80
                    > USED AT LINE 30 IN core-utils.z80
TEMP:               10EA DEFINED AT LINE 11
                    > USED AT LINE 50 IN core-interpret.z80
                    > USED AT LINE 68 IN core-interpret.z80
                    > USED AT LINE 69 IN core-interpret.z80
                    > USED AT LINE 153 IN core-interpret.z80
SPAN:               10F2 DEFINED AT LINE 49
INN:                10FA DEFINED AT LINE 11
NTIB:               1102 DEFINED AT LINE 49
                    > USED AT LINE 92 IN core-interpret.z80
                    > USED AT LINE 104 IN core-interpret.z80
                    > USED AT LINE 125 IN core-memory.z80
CSP:                110A DEFINED AT LINE 49
TEVAL:              1112 DEFINED AT LINE 49
                    > USED AT LINE 267 IN core-interpret.z80
TNUMB:              111A DEFINED AT LINE 49
                    > USED AT LINE 92 IN core-compiler.z80
                    > USED AT LINE 231 IN core-interpret.z80
HLD:                1122 DEFINED AT LINE 49
                    > USED AT LINE 17 IN core-format.z80
                    > USED AT LINE 22 IN core-format.z80
                    > USED AT LINE 23 IN core-format.z80
                    > USED AT LINE 51 IN core-format.z80
HANDL:              112A DEFINED AT LINE 49
                    > USED AT LINE 185 IN core-interpret.z80
                    > USED AT LINE 186 IN core-interpret.z80
                    > USED AT LINE 192 IN core-interpret.z80
                    > USED AT LINE 193 IN core-interpret.z80
CNTXT:              1132 DEFINED AT LINE 49
                    > USED AT LINE 167 IN core-interpret.z80
CRRNT:              113A DEFINED AT LINE 49
                    > USED AT LINE 73 IN core-compiler.z80
                    > USED AT LINE 72 IN core-utils.z80
CP:                 1142 DEFINED AT LINE 49
                    > USED AT LINE 13 IN core-compiler.z80
                    > USED AT LINE 19 IN core-compiler.z80
                    > USED AT LINE 45 IN core-compiler.z80
                    > USED AT LINE 114 IN core-memory.z80
NP:                 114A DEFINED AT LINE 49
                    > USED AT LINE 115 IN core-interpret.z80
LAST:               1152 DEFINED AT LINE 11
                    > USED AT LINE 50 IN core-compiler.z80
                    > USED AT LINE 70 IN core-compiler.z80
                    > USED AT LINE 101 IN core-compiler.z80
                    > USED AT LINE 134 IN core-compiler.z80
VFRTH:              115A DEFINED AT LINE 49
UTYPE:              1162 DEFINED AT LINE 11
                    > USED AT LINE 97 IN core-utils.z80
UTYP1:              116C DEFINED AT LINE 6 IN core-utils.z80
                    > USED AT LINE 10 IN core-utils.z80
UTYP2:              117A DEFINED AT LINE 9 IN core-utils.z80
                    > USED AT LINE 5 IN core-utils.z80
DMP:                1182 DEFINED AT LINE 49
PDUM1:              1196 DEFINED AT LINE 19 IN core-utils.z80
                    > USED AT LINE 23 IN core-utils.z80
PDUM2:              11A6 DEFINED AT LINE 22 IN core-utils.z80
                    > USED AT LINE 18 IN core-utils.z80
DUMP:               11AC DEFINED AT LINE 11
DUMP1:              11C0 DEFINED AT LINE 33 IN core-utils.z80
                    > USED AT LINE 39 IN core-utils.z80
DUMP2:              11E4 DEFINED AT LINE 41 IN core-utils.z80
                    > USED AT LINE 38 IN core-utils.z80
DUMP3:              11E8 DEFINED AT LINE 43 IN core-utils.z80
                    > USED AT LINE 40 IN core-utils.z80
DOTS:               11F2 DEFINED AT LINE 11
DOTS1:              1200 DEFINED AT LINE 53 IN core-utils.z80
                    > USED AT LINE 56 IN core-utils.z80
DOTS2:              1206 DEFINED AT LINE 55 IN core-utils.z80
                    > USED AT LINE 52 IN core-utils.z80
TNAME:              1214 DEFINED AT LINE 11
                    > USED AT LINE 111 IN core-utils.z80
TNAM1:              121A DEFINED AT LINE 73 IN core-utils.z80
                    > USED AT LINE 86 IN core-utils.z80
TNAM2:              1226 DEFINED AT LINE 77 IN core-utils.z80
                    > USED AT LINE 83 IN core-utils.z80
TNAM3:              123E DEFINED AT LINE 84 IN core-utils.z80
                    > USED AT LINE 79 IN core-utils.z80
                    > USED AT LINE 81 IN core-utils.z80
TNAM4:              1252 DEFINED AT LINE 88 IN core-utils.z80
                    > USED AT LINE 75 IN core-utils.z80
DOTID:              125A DEFINED AT LINE 11
                    > USED AT LINE 115 IN core-utils.z80
DOTI1:              1270 DEFINED AT LINE 98 IN core-utils.z80
                    > USED AT LINE 95 IN core-utils.z80
SEE:                127E DEFINED AT LINE 11
SEE1:               1288 DEFINED AT LINE 108 IN core-utils.z80
                    > USED AT LINE 121 IN core-utils.z80
SEE2:               1296 DEFINED AT LINE 112 IN core-utils.z80
                    > USED AT LINE 110 IN core-utils.z80
SEE3:               12A4 DEFINED AT LINE 117 IN core-utils.z80
                    > USED AT LINE 114 IN core-utils.z80
SEE4:               12AA DEFINED AT LINE 119 IN core-utils.z80
                    > USED AT LINE 116 IN core-utils.z80
SPP:                2200 DEFINED AT LINE 3 IN variables.z80
                    > USED AT LINE 34
                    > USED AT LINE 5 IN defaults.z80
TIBB:               2200 DEFINED AT LINE 4 IN variables.z80
                    > USED AT LINE 18 IN defaults.z80
                    > USED AT LINE 50 IN core-kernel.z80
RPP:                2400 DEFINED AT LINE 6 IN variables.z80
                    > USED AT LINE 42
                    > USED AT LINE 6 IN defaults.z80
UPP:                2400 DEFINED AT LINE 7 IN variables.z80
                    > USED AT LINE 38
                    > USED AT LINE 42 IN core-does.z80
VARSZERO:           2400 DEFINED AT LINE 9 IN variables.z80
VARRZERO:           2402 DEFINED AT LINE 10 IN variables.z80
VARTQKEY:           2404 DEFINED AT LINE 11 IN variables.z80
VARTEMIT:           2406 DEFINED AT LINE 12 IN variables.z80
VARTEXPE:           2408 DEFINED AT LINE 13 IN variables.z80
VARTTAP:            240A DEFINED AT LINE 14 IN variables.z80
VARTECHO:           240C DEFINED AT LINE 15 IN variables.z80
VARTPROM:           240E DEFINED AT LINE 16 IN variables.z80
VARBASE:            2410 DEFINED AT LINE 17 IN variables.z80
VARTEMP:            2412 DEFINED AT LINE 18 IN variables.z80
VARSPAN:            2414 DEFINED AT LINE 19 IN variables.z80
VARINN:             2416 DEFINED AT LINE 20 IN variables.z80
VARNTIB:            2418 DEFINED AT LINE 21 IN variables.z80
VARTIB:             241A DEFINED AT LINE 22 IN variables.z80
VARCSP:             241C DEFINED AT LINE 23 IN variables.z80
VARTEVAL:           241E DEFINED AT LINE 24 IN variables.z80
VARTNUMB:           2420 DEFINED AT LINE 25 IN variables.z80
VARHLD:             2422 DEFINED AT LINE 26 IN variables.z80
VARHANDL:           2424 DEFINED AT LINE 27 IN variables.z80
VARCNTXT:           2426 DEFINED AT LINE 28 IN variables.z80
VARVOCABS:          2428 DEFINED AT LINE 29 IN variables.z80
VARCRRNT:           242A DEFINED AT LINE 30 IN variables.z80
VARVOCABLP:         242C DEFINED AT LINE 31 IN variables.z80
VARCP:              242E DEFINED AT LINE 32 IN variables.z80
VARNP:              2430 DEFINED AT LINE 33 IN variables.z80
VARLAST:            2432 DEFINED AT LINE 34 IN variables.z80
VARVFRTH:           2434 DEFINED AT LINE 35 IN variables.z80
VARVOCABL:          2436 DEFINED AT LINE 36 IN variables.z80
SERINPTR:           2438 DEFINED AT LINE 38 IN variables.z80
                    > USED AT LINE 16 IN interrupt.z80
                    > USED AT LINE 22 IN interrupt.z80
                    > USED AT LINE 7 IN serial.z80
SERRDPTR:           243A DEFINED AT LINE 39 IN variables.z80
                    > USED AT LINE 8 IN serial.z80
                    > USED AT LINE 22 IN serial.z80
                    > USED AT LINE 30 IN serial.z80
SERBUFUSED:         243C DEFINED AT LINE 40 IN variables.z80
                    > USED AT LINE 10 IN interrupt.z80
                    > USED AT LINE 25 IN interrupt.z80
                    > USED AT LINE 27 IN interrupt.z80
                    > USED AT LINE 10 IN serial.z80
                    > USED AT LINE 18 IN serial.z80
                    > USED AT LINE 31 IN serial.z80
                    > USED AT LINE 33 IN serial.z80
                    > USED AT LINE 55 IN serial.z80
SERBUF:             243E DEFINED AT LINE 41 IN variables.z80
                    > USED AT LINE 19 IN interrupt.z80
                    > USED AT LINE 21 IN interrupt.z80
                    > USED AT LINE 6 IN serial.z80
                    > USED AT LINE 25 IN serial.z80
                    > USED AT LINE 27 IN serial.z80
VECTAB:             247D DEFINED AT LINE 43 IN variables.z80
                    > USED AT LINE 18 IN core-kernel.z80
VNMI:               247D DEFINED AT LINE 44 IN variables.z80
VRST08:             247F DEFINED AT LINE 45 IN variables.z80
VRST10:             2481 DEFINED AT LINE 46 IN variables.z80
VRST18:             2483 DEFINED AT LINE 47 IN variables.z80
VRST20:             2485 DEFINED AT LINE 48 IN variables.z80
VRST28:             2487 DEFINED AT LINE 49 IN variables.z80
VRST30:             2489 DEFINED AT LINE 50 IN variables.z80
VRST38:             248B DEFINED AT LINE 51 IN variables.z80
                    > USED AT LINE 33
CPP:                248D DEFINED AT LINE 53 IN variables.z80
                    > USED AT LINE 28 IN defaults.z80
NPP:                FFFE DEFINED AT LINE 55 IN variables.z80
                    > USED AT LINE 29 IN defaults.z80

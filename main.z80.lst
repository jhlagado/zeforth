0000                          .ENGINE   mycomputer   
0000                TESTMODE:   EQU   0   
0000                MEM_SIZE:   EQU   $10000   ; MEM is 64K
0000                ROM_SIZE:   EQU   $2000   ; ROM is 8K
0000                RAM_SIZE:   EQU   MEM_SIZE - ROM_SIZE   ; RAM is 64K - 8K
0000                START_ROM:   EQU   BM   ; inclusive
0000                END_ROM:   EQU   BM + ROM_SIZE   ; exclusive
0000                START_RAM:   EQU   BM + ROM_SIZE   ; inclusive
0000                END_RAM:   EQU   START_RAM + RAM_SIZE   ; exclusive
0000                BM:       EQU   0   ; bottom of ROM memory
0000                EM:       EQU   BM + MEM_SIZE   
0000                COMPO:    EQU   $20   ;lexicon compile only bit
0000                IMEDD:    EQU   $40   ;lexicon immediate bit
0000                MASKK:    EQU   $1F   ;lexicon bit mask
0000                CHARR:    EQU   1   ;byte size of a character
0000                CELLL:    EQU   2   
0000                BASEE:    EQU   10   ;BASE
0000                VOCSS:    EQU   8   ;depth of vocabulary stack
0000                MAXCHAR:   EQU   0FFh   ;Extended character set					                    ;  Use 07Fh for ASCII only
0000                MAXSIGNED:   EQU   07FFFh   ;max value of signed integer
0000                MAXUNSIGNED:   EQU   0FFFFh   ;max value of unsigned integer
0000                MAXNEGATIVE:   EQU   8000h   ;max value of negative integer
0000                BKSPP:    EQU   8   ;backspace
0000                LFF:      EQU   $0A   ;line feed
0000                CRR:      EQU   $0D   ;carriage return
0000                SPACEE:   EQU   $20   
0000                TIC:      EQU   $27   ;tick
0000                MINUSS:   EQU   $2D   
0000                UNDERSC:   EQU   $5F   
0000                CALLL:    EQU   $CD00   ; NOP followed by CALL opcodes
0000                US:       EQU   END_DEFAULTS - DEFAULTS   ;user area size
0000                RTS:      EQU   $100 * CELLL   ;return stack/TIB size
0000                DTS:      EQU   $100 * CELLL   ;data stack size
0000                RET_STACK_SIZE:   EQU   $100   
0000                DATA_STACK_SIZE:   EQU   $100   
0000                INT_ADDR:   EQU   $0038   
0000                SER_BUFSIZE:   EQU   $3F   
0000                SER_FULLSIZE:   EQU   $30   
0000                SER_EMPTYSIZE:   EQU   5   
0000                RTS_HIGH:   EQU   $D6   
0000                RTS_LOW:   EQU   $96   
0000                TRUEE:    EQU   -1   
0000                FALSEE:   EQU   0   
0000                             ; Initialize assembly variables
0000                VVCODE:   .SET   0   
0000                VVNAME:   .SET   END_ROM   
0000                VVLINK:   .SET   0   ;force a null link
0000                VVUSER:   .SET   0   ;first user variable offset
0000                .macro MCODE,aaLEX,aaNAME,aaLABEL
0000                             ; 
0000                 .align 2                                         ; force to cell boundary
0000                aaLABEL:                                              ; assembly label
0000                 vvCODE .set $
0000                 vvLEN  .set (aaLEX & 01FH) / CELLL              ; string cell count, round down
0000                 ORG vvNAME - ((vvLEN + 3) * CELLL)                                     ; ? needed
0000                 vvNAME .set $
0000                 DW vvCODE, vvLINK                               ; token pointer and link
0000                 vvLINK .set $                                   ; link points to a name string
0000                 DB aaLEX, aaNAME                                    ; name string
0000                 ORG vvCODE                                      ; restore code pointer
0000                .endm
0000                 
0000                .macro MCOLON,aaLEX,aaNAME,aaLABEL
0000                             ; 
0000                 mCODE aaLEX, aaNAME, aaLABEL
0000                 nop
0000                 CALL doLIST
0000                .endm
0000                 
0000                .macro MUSER,aaLEX,aaNAME,aaLABEL
0000                             ; 
0000                	mCODE aaLEX, aaNAME, aaLABEL
0000                 nop
0000                 CALL doLIST
0000                 DW DoUSE,vvUSER
0000                 vvUSER .set vvUSER + CELLL
0000                .endm
0000                 
0000                             ; .align 2
0000                .macro MDSTR,aaFUNC,aaSTR
0000                             ; 
0000                 DW aaFUNC                       ; function
0000                 vvLEN .set $                    ; save address of count byte
0000                 DB 0,aaSTR                      ; count byte and string
0000                 vvCODE .set $                   ; save code pointer
0000                ORG vvLEN                           ; point to count byte
0000                 DB vvCODE - vvLEN - 1           ; set count
0000                ORG vvCODE                          ; restore code pointer
0000                .endm
0000                 
0000                .macro HCODE,aaLEX,aaNAME,aaLABEL
0000                             ; 
0000                 .align 2                                         ; force to cell boundary
0000                aaLABEL:                                              ; assembly label
0000                .endm
0000                 
0000                .macro HCOLON,aaLEX,aaNAME,aaLABEL
0000                             ; 
0000                 hCODE aaLEX, aaNAME, aaLABEL
0000                 nop
0000                 CALL doLIST
0000                .endm
0000                 
0000                .macro HUSER,aaLEX,aaNAME,aaLABEL
0000                             ; 
0000                	hCODE aaLEX, aaNAME, aaLABEL
0000                 nop
0000                 CALL doLIST
0000                 DW DoUSE,vvUSER
0000                 vvUSER .set vvUSER + CELLL
0000                .endm
0000                 
0000                .macro MNEXTHL,
0000                             ; 
0000                 JP (IY)
0000                .endm
0000                 
0000                .macro MNEXT,
0000                             ; 
0000                	EX	DE,HL	                    ; 4t
0000                 JP (IY)
0000                .endm
0000                 
0000                          .ORG   START_ROM   
0000   C3 6C 00     RESET:    JP   INIT   
0008                          .ORG   $08   
0008   FD 2A 7D 24  RST08:    LD   IY,(vRST08)   
000C   FD E9                  JP   (IY)   
0010                          .ORG   $10   
0010   FD 2A 7F 24  RST10:    LD   IY,(vRST10)   
0014   FD E9                  JP   (IY)   
0018                          .ORG   $18   
0018   FD 2A 81 24  RST18:    LD   IY,(vRST18)   
001C   FD E9                  JP   (IY)   
0020                          .ORG   $20   
0020   FD 2A 83 24  RST20:    LD   IY,(vRST20)   
0024   FD E9                  JP   (IY)   
0028                          .ORG   $28   
0028   FD 2A 85 24  RST28:    LD   IY,(vRST28)   
002C   FD E9                  JP   (IY)   
0030                          .ORG   $30   
0030   FD 2A 87 24  RST30:    LD   IY,(vRST30)   
0034   FD E9                  JP   (IY)   
0038                          .ORG   $38   
0038   FD 2A 89 24  RST38:    LD   IY,(vINT)   
003C   FD E9                  JP   (IY)   
0066                          .ORG   $66   
0066   FD 2A 8B 24  RST66:    LD   IY,(vNMI)   
006A   FD E9                  JP   (IY)   
006C                INIT:        
006C   21 93 00               LD   HL,SER_INTR   
006F   22 89 24               LD   (vINT),HL   
0072   21 00 22               LD   HL,SPP   ; Setup Forth data stack
0075   F9                     LD   SP,HL   ; also used as return stack by interrupts etc
0076   21 1A 01               LD   HL,DEFAULTS   ; initialize user variables with defaults
0079   11 45 24               LD   DE,UPP   
007C   01 3A 00               LD   BC,US   
007F   ED B0                  LDIR      
0081   DD 21 00 24            LD   IX,RPP   ; set up Forth return stack
0085   FD 21 F1 0D            LD   IY,NEXT_STEP   
0089   01 FF FF               LD   BC,-1   ; empty stack marker
008C   21 F8 0D               LD   HL,HI   
008F   CD EA 0D               CALL   CALL_FORTH   
0092   76                     HALT      
0093                          IF   TESTMODE   
                              JP   TESTS_START   
0093                          ELSE      
0093                          ENDIF      
0093   F5           SER_INTR:   PUSH   AF   
0094   E5                     PUSH   HL   
0095   DB 80                  IN   A,($80)   
0097   E6 01                  AND   $01   ; Check if interupt due to read buffer full
0099   28 2D                  JR   Z,rts0   ; if not, ignore
009B   DB 81                  IN   A,($81)   
009D   F5                     PUSH   AF   
009E   3A 43 24               LD   A,(serBufUsed)   
00A1   FE 3F                  CP   SER_BUFSIZE   ; If full then ignore
00A3   20 03                  JR   NZ,notFull   
00A5   F1                     POP   AF   
00A6   18 20                  JR   rts0   
00A8   2A 3F 24     NOTFULL:   LD   HL,(serInPtr)   
00AB   23                     INC   HL   
00AC   7D                     LD   A,L   ; Only need to check low byte becasuse buffer<256 bytes
00AD   FE 3F                  CP   (SERBUF+SER_BUFSIZE) & $FF   
00AF   20 03                  JR   NZ,notWrap   
00B1   21 00 24               LD   HL,SERBUF   
00B4   22 3F 24     NOTWRAP:   LD   (serInPtr),HL   
00B7   F1                     POP   AF   
00B8   77                     LD   (HL),A   
00B9   3A 43 24               LD   A,(serBufUsed)   
00BC   3C                     INC   A   
00BD   32 43 24               LD   (serBufUsed),A   
00C0   FE 30                  CP   SER_FULLSIZE   
00C2   38 04                  JR   C,rts0   
00C4   3E D6                  LD   A,RTS_HIGH   
00C6   D3 80                  OUT   ($80),A   
00C8   E1           RTS0:     POP   HL   
00C9   F1                     POP   AF   
00CA   FD 21 F1 0D            LD   IY,NEXT_STEP   
00CE   FB                     EI      
00CF   ED 4D                  RETI      
00D1                             ; Modified from code by Grant Searle
00D1                             ; Minimum 6850 ACIA interrupt driven serial I/O
00D1                INIT_IO:      
00D1   F3                     DI      ; Disable interrupts
00D2   21 00 24               LD   HL,SERBUF   
00D5   22 3F 24               LD   (serInPtr),HL   
00D8   22 41 24               LD   (serRdPtr),HL   
00DB   AF                     XOR   A   
00DC   32 43 24               LD   (serBufUsed),A   
00DF   3E 96                  LD   A,RTS_LOW   
00E1   D3 80                  OUT   ($80),A   ; Initialise ACIA
00E3   FB                     EI      
00E4   C9                     RET      
00E5                RXA:         
00E5   E5                     PUSH   HL   
00E6   2A 41 24               LD   HL,(serRdPtr)   
00E9   23                     INC   HL   
00EA   7D                     LD   A,L   ; Only need to check low byte becasuse buffer<256 bytes
00EB   FE 3F                  CP   (SERBUF+SER_BUFSIZE) & $FF   
00ED   20 03                  JR   NZ,RXA1   
00EF   21 00 24               LD   HL,SERBUF   
00F2                RXA1:        
00F2   F3                     DI      
00F3   22 41 24               LD   (serRdPtr),HL   
00F6   3A 43 24               LD   A,(serBufUsed)   
00F9   3D                     DEC   A   
00FA   32 43 24               LD   (serBufUsed),A   
00FD   FE 05                  CP   SER_EMPTYSIZE   
00FF   30 04                  JR   NC,RXA2   
0101   3E 96                  LD   A,RTS_LOW   
0103   D3 80                  OUT   ($80),A   
0105                RXA2:        
0105   7E                     LD   A,(HL)   
0106   FB                     EI      
0107   E1                     POP   HL   
0108   C9                     RET      ; Char ready in A
0109                TXA:         
0109   F5                     PUSH   AF   ; Store character
010A                TXA1:        
010A   DB 80                  IN   A,($80)   ; Status byte
010C   CB 4F                  BIT   1,A   ; Set Zero flag if still transmitting character
010E   28 FA                  JR   Z,TXA1   ; Loop until flag signals ready
0110   F1                     POP   AF   ; Retrieve character
0111   D3 81                  OUT   ($81),A   ; Output the character
0113   C9                     RET      
0114                QRXA:        
0114   3A 43 24               LD   A,(serBufUsed)   
0117   FE 00                  CP   $0   
0119   C9                     RET      
011A                             ; .align 2
011A                DEFAULTS:      
011A                UZERO:       
011A   00 22        DEFSZERO:   DW   SPP   ; SP0
011C   00 24        DEFRZERO:   DW   RPP   ; RP0
011E   AA 0B        DEFTQKEY:   DW   QRX   ; '?KEY
0120   C2 0B        DEFTEMIT:   DW   TXSTO   ; 'EMIT
0122   84 0D        DEFTEXPE:   DW   ACCEP   ; 'EXPECT
0124   56 0D        DEFTTAP:   DW   KTAP   ; 'TAP
0126   C2 0B        DEFTECHO:   DW   TXSTO   ; 'ECHO
0128   3A 0B        DEFTPROM:   DW   DOTOK   ; 'PROMPT
012A   0A 00        DEFBASE:   DW   BASEE   ; BASE
012C   00 00        DEFTEMP:   DW   0   ; tmp
012E   00 00        DEFSPAN:   DW   0   ; SPAN
0130   00 00        DEFINN:   DW   0   ; >IN
0132   00 00        DEFNTIB:   DW   0   ; #TIB
0134   00 22        DEFTIB:   DW   TIBB   ; TIB
0136   00 00        DEFCSP:   DW   0   ; CSP
0138   F8 0A        DEFTEVAL:   DW   INTER   ; 'EVAL
013A   D4 07        DEFTNUMB:   DW   NUMBQ   ; 'NUMBER
013C   00 00        DEFHLD:   DW   0   ; HLD
013E   00 00        DEFHANDL:   DW   0   ; HANDLER
0140   00 00        DEFCNTXT:   DW   0   ; CONTEXT pointer
0142   00 00        DEFVOCABS:   DW   0   ; vocabulary stack    ???
0144   00 00        DEFCRRENT:   DW   0   ; CURRENT pointer
0146   00 00        DEFVOCABLP:   DW   0   ; vocabulary link pointer ???
0148   91 24        DEFCP:    DW   CPP   ; CP  for runing phase on RAM
014A   FE FF        DEFNP:    DW   NPP   ; NP  for runing phase on RAM
014C   BA 13        DEFLAST:   DW   LASTN   ; LAST
014E   BA 13        DEFVFRTH:   DW   LASTN   ; FORTH   \ mullti-user ???
0150   00 00        DEFVOCABL:   DW   0   ; vocabulary link       ???
0152   00 00        DEFCOLD:   DW   0   ; "COLD"
0154                ULAST:       
0154                END_DEFAULTS:      
0154                VVCODE:   .SET   $   
0154                             ;   0<          ( n -- t )
0154                             ;               Return true if n is negative.
0154                          ;*Macro unroll: mCODE	2,'0<', ZLESS
0154                          ALIGN   2   
0154                ZLESS:       
0154                VVCODE:   .SET   $   
0154                VVLEN:    .SET   (2 & 01FH) / CELLL   
1FF8                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FF8                VVNAME:   .SET   $   
1FF8   54 01 00 00            DW   vvCODE,vvLINK   
1FFC                VVLINK:   .SET   $   
1FFC   02 30 3C               DB   2,"0<"   
0154                          .ORG   vvCODE   
0154   CB 20                  SLA   B   ; sign bit -> cy flag
0156   9F                     SBC   A,A   ; propagate cy through A
0157   47                     LD   B,A   ; put 0000 or FFFF in TOS
0158   4F                     LD   C,A   
0159                          ;*Macro unroll: 	mNEXT
0159   EB                     EX   DE,HL   
015A   FD E9                  JP   (IY)   
015C                             ;   AND         ( w w -- w )
015C                             ;               Bitwise AND.
015C                          ;*Macro unroll: mCODE	3, 'AND', ANDD
015C                          ALIGN   2   
015C                ANDD:        
015C                VVCODE:   .SET   $   
015C                VVLEN:    .SET   (3 & 01FH) / CELLL   
1FF0                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FF0                VVNAME:   .SET   $   
1FF0   5C 01 FC 1F            DW   vvCODE,vvLINK   
1FF4                VVLINK:   .SET   $   
1FF4   03 41 4E 44            DB   3,"AND"   
015C                          .ORG   vvCODE   
015C   E1                     POP   HL   
015D   78                     LD   A,B   
015E   A4                     AND   H   
015F   47                     LD   B,A   
0160   79                     LD   A,C   
0161   A5                     AND   L   
0162   4F                     LD   C,A   
0163                          ;*Macro unroll: 	mNEXT
0163   EB                     EX   DE,HL   
0164   FD E9                  JP   (IY)   
0166                             ;   OR          ( w w -- w )
0166                             ;               Bitwise inclusive OR.
0166                          ;*Macro unroll: mCODE	2,'OR', ORR
0166                          ALIGN   2   
0166                ORR:         
0166                VVCODE:   .SET   $   
0166                VVLEN:    .SET   (2 & 01FH) / CELLL   
1FE8                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FE8                VVNAME:   .SET   $   
1FE8   66 01 F4 1F            DW   vvCODE,vvLINK   
1FEC                VVLINK:   .SET   $   
1FEC   02 4F 52               DB   2,"OR"   
0166                          .ORG   vvCODE   
0166   E1                     POP   HL   
0167   78                     LD   A,B   
0168   B4                     OR   H   
0169   47                     LD   B,A   
016A   79                     LD   A,C   
016B   B5                     OR   L   
016C   4F                     LD   C,A   
016D                          ;*Macro unroll: 	mNEXT
016D   EB                     EX   DE,HL   
016E   FD E9                  JP   (IY)   
0170                             ;   XOR         ( w w -- w )
0170                             ;               Bitwise exclusive
0170                          ;*Macro unroll: mCODE	3, 'XOR', XORR
0170                          ALIGN   2   
0170                XORR:        
0170                VVCODE:   .SET   $   
0170                VVLEN:    .SET   (3 & 01FH) / CELLL   
1FE0                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FE0                VVNAME:   .SET   $   
1FE0   70 01 EC 1F            DW   vvCODE,vvLINK   
1FE4                VVLINK:   .SET   $   
1FE4   03 58 4F 52            DB   3,"XOR"   
0170                          .ORG   vvCODE   
0170   E1                     POP   HL   
0171   78                     LD   A,B   
0172   AC                     XOR   H   
0173   47                     LD   B,A   
0174   79                     LD   A,C   
0175   AD                     XOR   L   
0176   4F                     LD   C,A   
0177                          ;*Macro unroll: 	mNEXT
0177   EB                     EX   DE,HL   
0178   FD E9                  JP   (IY)   
017A                             ;   +           ( w w -- sum )
017A                             ;               Add top two items.
017A                          ;*Macro unroll: mCOLON	1,'+', PLUS
017A                          ;*Macro unroll:  mCODE 1, "+", PLUS
017A                          ALIGN   2   
017A                PLUS:        
017A                VVCODE:   .SET   $   
017A                VVLEN:    .SET   (1 & 01FH) / CELLL   
1FDA                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FDA                VVNAME:   .SET   $   
1FDA   7A 01 E4 1F            DW   vvCODE,vvLINK   
1FDE                VVLINK:   .SET   $   
1FDE   01 2B                  DB   1,"+"   
017A                          .ORG   vvCODE   
017A   00                     NOP      
017B   CD 36 06               CALL   doLIST   
017E   52 02 60 10 84 06      DW   UMPlus,DROP,EXIT   
0184                             ;   NOT         ( w -- w )
0184                             ;               One's complement of tos.
0184                          ;*Macro unroll: mCOLON  3, 'NOT', INVER
0184                          ;*Macro unroll:  mCODE 3, "NOT", INVER
0184                          ALIGN   2   
0184                INVER:       
0184                VVCODE:   .SET   $   
0184                VVLEN:    .SET   (3 & 01FH) / CELLL   
1FD2                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FD2                VVNAME:   .SET   $   
1FD2   84 01 DE 1F            DW   vvCODE,vvLINK   
1FD6                VVLINK:   .SET   $   
1FD6   03 4E 4F 54            DB   3,"NOT"   
0184                          .ORG   vvCODE   
0184   00                     NOP      
0185   CD 36 06               CALL   doLIST   
0188   44 06 FF FF 70 01 84 06 DW   DOLIT,-1,XORR,EXIT   
0190                             ;   NEGAT      ( n -- -n )
0190                             ;               Two's complement of tos.
0190                          ;*Macro unroll: mCOLON	6,'NEGATE',NEGAT
0190                          ;*Macro unroll:  mCODE 6, "NEGATE", NEGAT
0190                          ALIGN   2   
0190                NEGAT:       
0190                VVCODE:   .SET   $   
0190                VVLEN:    .SET   (6 & 01FH) / CELLL   
1FC6                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FC6                VVNAME:   .SET   $   
1FC6   90 01 D6 1F            DW   vvCODE,vvLINK   
1FCA                VVLINK:   .SET   $   
1FCA   06 4E 45 47 41 54 45   DB   6,"NEGATE"   
0190                          .ORG   vvCODE   
0190   00                     NOP      
0191   CD 36 06               CALL   doLIST   
0194   84 01 44 06 01 00 7A 01 84 06 DW   INVER,DOLIT,1,Plus,EXIT   
019E                             ;   DNEGATE     ( d -- -d )
019E                             ;               Two's complement of top double.
019E                          ;*Macro unroll: mCOLON	7,'DNEGATE',DNEGA
019E                          ;*Macro unroll:  mCODE 7, "DNEGATE", DNEGA
019E                          ALIGN   2   
019E                DNEGA:       
019E                VVCODE:   .SET   $   
019E                VVLEN:    .SET   (7 & 01FH) / CELLL   
1FBA                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FBA                VVNAME:   .SET   $   
1FBA   9E 01 CA 1F            DW   vvCODE,vvLINK   
1FBE                VVLINK:   .SET   $   
1FBE   07 44 4E 45 47 41 54 45 DB   7,"DNEGATE"   
019E                          .ORG   vvCODE   
019E   00                     NOP      
019F   CD 36 06               CALL   doLIST   
01A2   84 01 40 10 84 01      DW   INVER,ToR,INVER   
01A8   44 06 01 00 52 02      DW   DOLIT,1,UMPlus   
01AE   4E 10 7A 01 84 06      DW   RFrom,Plus,EXIT   
01B4                             ;   -           ( n1 n2 -- n1-n2 )
01B4                             ;               Subtraction.
01B4                          ;*Macro unroll: mCOLON	1, '-', SUBB
01B4                          ;*Macro unroll:  mCODE 1, "-", SUBB
01B4                          ALIGN   2   
01B4                SUBB:        
01B4                VVCODE:   .SET   $   
01B4                VVLEN:    .SET   (1 & 01FH) / CELLL   
1FB4                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FB4                VVNAME:   .SET   $   
1FB4   B4 01 BE 1F            DW   vvCODE,vvLINK   
1FB8                VVLINK:   .SET   $   
1FB8   01 2D                  DB   1,"-"   
01B4                          .ORG   vvCODE   
01B4   00                     NOP      
01B5   CD 36 06               CALL   doLIST   
01B8   90 01 7A 01 84 06      DW   NEGAT,Plus,EXIT   
01BE                             ;   ABS         ( n -- n )
01BE                             ;               Return the absolute value of n.
01BE                          ;*Macro unroll: mCOLON	3,'ABS',ABSS
01BE                          ;*Macro unroll:  mCODE 3, "ABS", ABSS
01BE                          ALIGN   2   
01BE                ABSS:        
01BE                VVCODE:   .SET   $   
01BE                VVLEN:    .SET   (3 & 01FH) / CELLL   
1FAC                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FAC                VVNAME:   .SET   $   
1FAC   BE 01 B8 1F            DW   vvCODE,vvLINK   
1FB0                VVLINK:   .SET   $   
1FB0   03 41 42 53            DB   3,"ABS"   
01BE                          .ORG   vvCODE   
01BE   00                     NOP      
01BF   CD 36 06               CALL   doLIST   
01C2   5C 10 54 01 86 0E CC 01 DW   DUPP,ZLESS,QBRAN,ABS1   
01CA   90 01                  DW   NEGAT   
01CC                ABS1:        
01CC   84 06                  DW   EXIT   
01CE                             ;   =           ( w w -- t )
01CE                             ;               Return true if top two are equal.
01CE                          ;*Macro unroll: mCOLON	1, '=', EQUAL
01CE                          ;*Macro unroll:  mCODE 1, "=", EQUAL
01CE                          ALIGN   2   
01CE                EQUAL:       
01CE                VVCODE:   .SET   $   
01CE                VVLEN:    .SET   (1 & 01FH) / CELLL   
1FA6                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FA6                VVNAME:   .SET   $   
1FA6   CE 01 B0 1F            DW   vvCODE,vvLINK   
1FAA                VVLINK:   .SET   $   
1FAA   01 3D                  DB   1,"="   
01CE                          .ORG   vvCODE   
01CE   00                     NOP      
01CF   CD 36 06               CALL   doLIST   
01D2   70 01                  DW   XORR   
01D4   86 0E DE 01            DW   QBRAN,EQU1   
01D8   44 06 00 00 84 06      DW   DOLIT,0,EXIT   ;false flag
01DE                EQU1:        
01DE   44 06 FF FF 84 06      DW   DOLIT,-1,EXIT   ;true flag
01E4                             ;   U<          ( u u -- t )
01E4                             ;               Unsigned compare of top two items.
01E4                          ;*Macro unroll: mCOLON	2,'U<',ULESS
01E4                          ;*Macro unroll:  mCODE 2, "U<", ULESS
01E4                          ALIGN   2   
01E4                ULESS:       
01E4                VVCODE:   .SET   $   
01E4                VVLEN:    .SET   (2 & 01FH) / CELLL   
1F9E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F9E                VVNAME:   .SET   $   
1F9E   E4 01 AA 1F            DW   vvCODE,vvLINK   
1FA2                VVLINK:   .SET   $   
1FA2   02 55 3C               DB   2,"U<"   
01E4                          .ORG   vvCODE   
01E4   00                     NOP      
01E5   CD 36 06               CALL   doLIST   
01E8   9A 10 70 01 54 01      DW   DDUP,XORR,ZLESS   
01EE   86 0E FA 01            DW   QBRAN,ULES1   
01F2   64 10 60 10 54 01 84 06 DW   SWAP,DROP,ZLESS,EXIT   
01FA                ULES1:       
01FA   B4 01 54 01 84 06      DW   SUBB,ZLESS,EXIT   
0200                             ;   <           ( n1 n2 -- t )
0200                             ;               is less than
0200                          ;*Macro unroll: mCOLON	1,'<',LESS
0200                          ;*Macro unroll:  mCODE 1, "<", LESS
0200                          ALIGN   2   
0200                LESS:        
0200                VVCODE:   .SET   $   
0200                VVLEN:    .SET   (1 & 01FH) / CELLL   
1F98                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F98                VVNAME:   .SET   $   
1F98   00 02 A2 1F            DW   vvCODE,vvLINK   
1F9C                VVLINK:   .SET   $   
1F9C   01 3C                  DB   1,"<"   
0200                          .ORG   vvCODE   
0200   00                     NOP      
0201   CD 36 06               CALL   doLIST   
0204   9A 10 70 01 54 01 86 0E 14 02 DW   DDUP,XORR,ZLESS,QBRAN,LESS1   
020E   60 10 54 01 84 06      DW   DROP,ZLESS,EXIT   
0214                LESS1:       
0214   B4 01 54 01 84 06      DW   SUBB,ZLESS,EXIT   
021A                             ;   MAX         ( n n -- n )
021A                             ;               Return the greater of two top stack items.
021A                          ;*Macro unroll: mCOLON	3,'MAX',MAX
021A                          ;*Macro unroll:  mCODE 3, "MAX", MAX
021A                          ALIGN   2   
021A                MAX:         
021A                VVCODE:   .SET   $   
021A                VVLEN:    .SET   (3 & 01FH) / CELLL   
1F90                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F90                VVNAME:   .SET   $   
1F90   1A 02 9C 1F            DW   vvCODE,vvLINK   
1F94                VVLINK:   .SET   $   
1F94   03 4D 41 58            DB   3,"MAX"   
021A                          .ORG   vvCODE   
021A   00                     NOP      
021B   CD 36 06               CALL   doLIST   
021E   9A 10 00 02 86 0E 28 02 DW   DDUP,LESS,QBRAN,MAX1   
0226   64 10                  DW   SWAP   
0228                MAX1:        
0228   60 10 84 06            DW   DROP,EXIT   
022C                             ;   MIN         ( n n -- n )
022C                             ;               Return the smaller of top two stack items.
022C                          ;*Macro unroll: mCOLON	3,'MIN',MIN
022C                          ;*Macro unroll:  mCODE 3, "MIN", MIN
022C                          ALIGN   2   
022C                MIN:         
022C                VVCODE:   .SET   $   
022C                VVLEN:    .SET   (3 & 01FH) / CELLL   
1F88                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F88                VVNAME:   .SET   $   
1F88   2C 02 94 1F            DW   vvCODE,vvLINK   
1F8C                VVLINK:   .SET   $   
1F8C   03 4D 49 4E            DB   3,"MIN"   
022C                          .ORG   vvCODE   
022C   00                     NOP      
022D   CD 36 06               CALL   doLIST   
0230   9A 10 64 10 00 02      DW   DDUP,SWAP,LESS   
0236   86 0E 3C 02            DW   QBRAN,MIN1   
023A   64 10                  DW   SWAP   
023C                MIN1:        
023C   60 10 84 06            DW   DROP,EXIT   
0240                             ;   WITHIN      ( u ul uh -- t )
0240                             ;               Return true if u is within the range of ul and uh.
0240                          ;*Macro unroll: mCOLON	6,'WITHIN',WITHI
0240                          ;*Macro unroll:  mCODE 6, "WITHIN", WITHI
0240                          ALIGN   2   
0240                WITHI:       
0240                VVCODE:   .SET   $   
0240                VVLEN:    .SET   (6 & 01FH) / CELLL   
1F7C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F7C                VVNAME:   .SET   $   
1F7C   40 02 8C 1F            DW   vvCODE,vvLINK   
1F80                VVLINK:   .SET   $   
1F80   06 57 49 54 48 49 4E   DB   6,"WITHIN"   
0240                          .ORG   vvCODE   
0240   00                     NOP      
0241   CD 36 06               CALL   doLIST   
0244   6C 10 B4 01 40 10      DW   OVER,SUBB,ToR   ;ul <= u < uh
024A   B4 01 4E 10 E4 01 84 06 DW   SUBB,RFrom,ULess,EXIT   
0252                             ;   UM+         ( w w -- w cy )
0252                             ;               Add two numbers, return the sum and carry flag.
0252                          ;*Macro unroll: hCODE	3,'um+',UMPlus
0252                          ALIGN   2   
0252                UMPLUS:      
0252   E1                     POP   HL   ;10t
0253   09                     ADD   HL,BC   ;11t
0254   E5                     PUSH   HL   ;11t
0255   01 00 00               LD   BC,0   ;10t
0258   30 01                  JR   NC,UMP1   ;12/7t
025A                UMP2:        
025A   03                     INC   BC   ; 6t
025B                UMP1:        
025B                          ;*Macro unroll:  mNEXT
025B   EB                     EX   DE,HL   
025C   FD E9                  JP   (IY)   
025E                             ; UM/MOD      ( udl udh u -- ur uq )
025E                             ; Unsigned divide of a double by a single. Return mod and quotient.
025E                             ; Note: Less range than eForth because most significant word discarded TODO: fix
025E                          ;*Macro unroll: mCOLON  6,'UM/MOD',UMMOD
025E                          ;*Macro unroll:  mCODE 6, "UM/MOD", UMMOD
025E                          ALIGN   2   
025E                UMMOD:       
025E                VVCODE:   .SET   $   
025E                VVLEN:    .SET   (6 & 01FH) / CELLL   
1F70                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F70                VVNAME:   .SET   $   
1F70   5E 02 80 1F            DW   vvCODE,vvLINK   
1F74                VVLINK:   .SET   $   
1F74   06 55 4D 2F 4D 4F 44   DB   6,"UM/MOD"   
025E                          .ORG   vvCODE   
025E   00                     NOP      
025F   CD 36 06               CALL   doLIST   
0262   64 10 60 10 6A 02 84 06 DW   SWAP,DROP,UMSLMOD2,EXIT   
026A                             ; UM/MOD2	( ud u1 -- u2 u3 )		
026A                             ; Unsigned division of a double-cell number ud by a single-cell
026A                             ; number u1. Return remainder u2 and quotient u3.
026A                             ; Note: Less range than eForth TODO: fix
026A                          ;*Macro unroll: mCODE	6,'UM/MOD2',UMSLMOD2
026A                          ALIGN   2   
026A                UMSLMOD2:      
026A                VVCODE:   .SET   $   
026A                VVLEN:    .SET   (6 & 01FH) / CELLL   
1F64                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F64                VVNAME:   .SET   $   
1F64   6A 02 74 1F            DW   vvCODE,vvLINK   
1F68                VVLINK:   .SET   $   
1F68   06 55 4D 2F 4D 4F 44 32 DB   6,"UM/MOD2"   
026A                          .ORG   vvCODE   
026A   78                     LD   A,B   
026B   B1                     OR   C   
026C   28 25                  JR   Z,UMMOD2   ;?zero divisor
026E                UMMOD11:      
026E   C5                     PUSH   BC   
026F   D9                     EXX      
0270   C1                     POP   BC   
0271   E1                     POP   HL   
0272   D1                     POP   DE   
0273   7D                     LD   A,L   
0274   91                     SUB   C   
0275   7C                     LD   A,H   
0276   98                     SBC   A,B   
0277   30 20                  JR   NC,UMMOD1   ;?too big
0279                UMMOD12:      
0279   7C                     LD   A,H   
027A   65                     LD   H,L   
027B   6A                     LD   L,D   
027C   16 08                  LD   D,8   
027E   D5                     PUSH   DE   
027F   CD AD 02               CALL   UMMOD3   
0282   D1                     POP   DE   
0283   E5                     PUSH   HL   
0284   6B                     LD   L,E   
0285   CD AD 02               CALL   UMMOD3   
0288   57                     LD   D,A   
0289   5C                     LD   E,H   
028A   C1                     POP   BC   
028B   61                     LD   H,C   
028C   D5                     PUSH   DE   
028D   E5                     PUSH   HL   
028E   D9                     EXX      
028F   C1                     POP   BC   
0290                          ;*Macro unroll: 	mNEXT
0290   EB                     EX   DE,HL   
0291   FD E9                  JP   (IY)   
0293                UMMOD2:      
0293   01 26 10               LD   BC,ERR_DIVZERO   ; divide by 0
0296   C3 9A 0E               JP   THROWX   
0299                UMMOD1:      
0299   01 32 10               LD   BC,ERR_OUTOFRANGE   ; result out of range
029C   C3 9A 0E               JP   THROWX   
029F                UMMOD4:      
029F   5F                     LD   E,A   
02A0   7C                     LD   A,H   
02A1   91                     SUB   C   
02A2   67                     LD   H,A   
02A3   7B                     LD   A,E   
02A4   98                     SBC   A,B   
02A5   30 10                  JR   NC,UMMOD5   
02A7                UMMOD13:      
02A7   7C                     LD   A,H   
02A8   81                     ADD   A,C   
02A9   67                     LD   H,A   
02AA   7B                     LD   A,E   
02AB   15                     DEC   D   
02AC   C8                     RET   Z   
02AD                UMMOD3:      
02AD   29                     ADD   HL,HL   
02AE   17                     RLA      
02AF   30 EE                  JR   NC,UMMOD4   
02B1                UMMOD14:      
02B1   5F                     LD   E,A   
02B2   7C                     LD   A,H   
02B3   91                     SUB   C   
02B4   67                     LD   H,A   
02B5   7B                     LD   A,E   
02B6   98                     SBC   A,B   
02B7                UMMOD5:      
02B7   2C                     INC   L   
02B8   15                     DEC   D   
02B9   20 F2                  JR   NZ,UMMOD3   
02BB                UMMOD15:      
02BB   C9                     RET      
02BC                             ;   FM/MOD	( d n1 -- n2 n3 )		\ CORE
02BC                             ;		Signed floored divide of double by single. Return mod n2
02BC                             ;		and quotient n3.
02BC                             ; TODO: this is usually called M/MOD in eForth
02BC                          ;*Macro unroll: mCOLON	6,'M/MOD',MSMOD
02BC                          ;*Macro unroll:  mCODE 6, "M/MOD", MSMOD
02BC                          ALIGN   2   
02BC                MSMOD:       
02BC                VVCODE:   .SET   $   
02BC                VVLEN:    .SET   (6 & 01FH) / CELLL   
1F58                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F58                VVNAME:   .SET   $   
1F58   BC 02 68 1F            DW   vvCODE,vvLINK   
1F5C                VVLINK:   .SET   $   
1F5C   06 4D 2F 4D 4F 44      DB   6,"M/MOD"   
02BC                          .ORG   vvCODE   
02BC   00                     NOP      
02BD   CD 36 06               CALL   doLIST   
02C0   5C 10 54 01 5C 10 40 10 DW   DUPP,ZLESS,DUPP,TOR   
02C8   86 0E D4 02            DW   QBRAN,MMOD1   
02CC   90 01 40 10 9E 01 4E 10 DW   NEGAT,TOR,DNEGA,RFROM   
02D4                MMOD1:       
02D4   40 10 5C 10 54 01      DW   TOR,DUPP,ZLESS   
02DA   86 0E E2 02            DW   QBRAN,MMOD2   
02DE   C4 0E 7A 01            DW   RAT,PLUS   
02E2                MMOD2:       
02E2   4E 10 5E 02 4E 10      DW   RFROM,UMMOD,RFROM   
02E8   86 0E F2 02            DW   QBRAN,MMOD3   
02EC   64 10 90 01 64 10      DW   SWAP,NEGAT,SWAP   
02F2                MMOD3:       
02F2   84 06                  DW   EXIT   
02F4                             ;   /MOD        ( n n -- r q )
02F4                             ;               Signed divide. Return mod and quotient.
02F4                          ;*Macro unroll: mCOLON	4,'/MOD',SLMOD
02F4                          ;*Macro unroll:  mCODE 4, "/MOD", SLMOD
02F4                          ALIGN   2   
02F4                SLMOD:       
02F4                VVCODE:   .SET   $   
02F4                VVLEN:    .SET   (4 & 01FH) / CELLL   
1F4E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F4E                VVNAME:   .SET   $   
1F4E   F4 02 5C 1F            DW   vvCODE,vvLINK   
1F52                VVLINK:   .SET   $   
1F52   04 2F 4D 4F 44         DB   4,"/MOD"   
02F4                          .ORG   vvCODE   
02F4   00                     NOP      
02F5   CD 36 06               CALL   doLIST   
02F8   6C 10 54 01 64 10 BC 02 84 06 DW   OVER,ZLESS,SWAP,MSMOD,EXIT   
0302                             ;   MOD         ( n n -- r )
0302                             ;               Signed divide. Return mod only.
0302                          ;*Macro unroll: mCOLON	3,'MOD',MODD
0302                          ;*Macro unroll:  mCODE 3, "MOD", MODD
0302                          ALIGN   2   
0302                MODD:        
0302                VVCODE:   .SET   $   
0302                VVLEN:    .SET   (3 & 01FH) / CELLL   
1F46                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F46                VVNAME:   .SET   $   
1F46   02 03 52 1F            DW   vvCODE,vvLINK   
1F4A                VVLINK:   .SET   $   
1F4A   03 4D 4F 44            DB   3,"MOD"   
0302                          .ORG   vvCODE   
0302   00                     NOP      
0303   CD 36 06               CALL   doLIST   
0306   F4 02 60 10 84 06      DW   SLMOD,DROP,EXIT   
030C                             ; 
030C                             ;   /           ( n n -- q )
030C                             ;               Signed divide. Return quotient only.
030C                          ;*Macro unroll: mCOLON	1,'/',SLASH
030C                          ;*Macro unroll:  mCODE 1, "/", SLASH
030C                          ALIGN   2   
030C                SLASH:       
030C                VVCODE:   .SET   $   
030C                VVLEN:    .SET   (1 & 01FH) / CELLL   
1F40                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F40                VVNAME:   .SET   $   
1F40   0C 03 4A 1F            DW   vvCODE,vvLINK   
1F44                VVLINK:   .SET   $   
1F44   01 2F                  DB   1,"/"   
030C                          .ORG   vvCODE   
030C   00                     NOP      
030D   CD 36 06               CALL   doLIST   
0310   F4 02 64 10 60 10 84 06 DW   SLMOD,SWAP,DROP,EXIT   
0318                             ; Multiply
0318                             ;   UM*         ( u u -- ud )
0318                             ;               Unsigned multiply. Return double product.
0318                          ;*Macro unroll: mCODE	3,'UM*',UMSTA
0318                          ALIGN   2   
0318                UMSTA:       
0318                VVCODE:   .SET   $   
0318                VVLEN:    .SET   (3 & 01FH) / CELLL   
1F38                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F38                VVNAME:   .SET   $   
1F38   18 03 44 1F            DW   vvCODE,vvLINK   
1F3C                VVLINK:   .SET   $   
1F3C   03 55 4D 2A            DB   3,"UM*"   
0318                          .ORG   vvCODE   
0318   EB                     EX   DE,HL   
0319   E3                     EX   (SP),HL   
031A   EB                     EX   DE,HL   
031B   21 00 00               LD   HL,0   
031E   3E 10                  LD   A,010h   
0320                UMSTA1:      
0320   29                     ADD   HL,HL   
0321   EB                     EX   DE,HL   
0322   ED 6A                  ADC   HL,HL   
0324   EB                     EX   DE,HL   
0325   30 04                  JR   NC,UMSTA3   
0327                UMSTA2:      
0327   09                     ADD   HL,BC   
0328   30 01                  JR   NC,UMSTA3   
032A                UMSTA5:      
032A   13                     INC   DE   
032B                UMSTA3:      
032B   3D                     DEC   A   
032C   20 F2                  JR   NZ,UMSTA1   
032E                UMSTA4:      
032E   42                     LD   B,D   
032F   4B                     LD   C,E   
0330   E3                     EX   (SP),HL   
0331                          ;*Macro unroll: 	mNEXTHL
0331   FD E9                  JP   (IY)   
0333                             ;   *           ( n n -- n )
0333                             ;               Signed multiply. Return single product.
0333                          ;*Macro unroll: mCOLON	1,'*',STAR
0333                          ;*Macro unroll:  mCODE 1, "*", STAR
0333                          ALIGN   2   
0334                STAR:        
0334                VVCODE:   .SET   $   
0334                VVLEN:    .SET   (1 & 01FH) / CELLL   
1F32                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F32                VVNAME:   .SET   $   
1F32   34 03 3C 1F            DW   vvCODE,vvLINK   
1F36                VVLINK:   .SET   $   
1F36   01 2A                  DB   1,"*"   
0334                          .ORG   vvCODE   
0334   00                     NOP      
0335   CD 36 06               CALL   doLIST   
0338   18 03 60 10 84 06      DW   UMSTA,DROP,EXIT   
033E                             ;   M*          ( n n -- d )
033E                             ;               Signed multiply. Return double product.
033E                          ;*Macro unroll: mCOLON	2,'M*',MSTAR,
033E                          ;*Macro unroll:  mCODE 2, "M*", MSTAR
033E                          ALIGN   2   
033E                MSTAR:       
033E                VVCODE:   .SET   $   
033E                VVLEN:    .SET   (2 & 01FH) / CELLL   
1F2A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F2A                VVNAME:   .SET   $   
1F2A   3E 03 36 1F            DW   vvCODE,vvLINK   
1F2E                VVLINK:   .SET   $   
1F2E   02 4D 2A               DB   2,"M*"   
033E                          .ORG   vvCODE   
033E   00                     NOP      
033F   CD 36 06               CALL   doLIST   
0342   9A 10 70 01 54 01 40 10 BE 01 64 10 BE 01 DW   DDUP,XORR,ZLESS,ToR,ABSS,SWAP,ABSS   
0350   18 03 4E 10 86 0E 5A 03 DW   UMSTA,RFrom,QBRAN,MSTAR1   
0358   9E 01                  DW   DNEGA   
035A                MSTAR1:      
035A   84 06                  DW   EXIT   
035C                             ;   */MOD       ( n1 n2 n3 -- r q )
035C                             ;               Multiply n1 and n2, then divide by n3. Return mod and quotient.
035C                          ;*Macro unroll: mCOLON	5,'*/MOD',SSMOD
035C                          ;*Macro unroll:  mCODE 5, "*/MOD", SSMOD
035C                          ALIGN   2   
035C                SSMOD:       
035C                VVCODE:   .SET   $   
035C                VVLEN:    .SET   (5 & 01FH) / CELLL   
1F20                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F20                VVNAME:   .SET   $   
1F20   5C 03 2E 1F            DW   vvCODE,vvLINK   
1F24                VVLINK:   .SET   $   
1F24   05 2A 2F 4D 4F 44      DB   5,"*/MOD"   
035C                          .ORG   vvCODE   
035C   00                     NOP      
035D   CD 36 06               CALL   doLIST   
0360   40 10 3E 03 4E 10 BC 02 84 06 DW   ToR,MStar,RFrom,MSMOD,EXIT   
036A                             ;   */          ( n1 n2 n3 -- q )
036A                             ;               Multiply n1 by n2, then divide by n3. Return quotient only.
036A                          ;*Macro unroll: mCOLON	2,'*/',STASL
036A                          ;*Macro unroll:  mCODE 2, "*/", STASL
036A                          ALIGN   2   
036A                STASL:       
036A                VVCODE:   .SET   $   
036A                VVLEN:    .SET   (2 & 01FH) / CELLL   
1F18                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F18                VVNAME:   .SET   $   
1F18   6A 03 24 1F            DW   vvCODE,vvLINK   
1F1C                VVLINK:   .SET   $   
1F1C   02 2A 2F               DB   2,"*/"   
036A                          .ORG   vvCODE   
036A   00                     NOP      
036B   CD 36 06               CALL   doLIST   
036E   5C 03 64 10 60 10 84 06 DW   SSMOD,SWAP,DROP,EXIT   
0376                             ;   CELL+       ( a -- a )
0376                             ;               Add cell size in byte to address.
0376                          ;*Macro unroll: mCOLON	5,'CELL+',CELLP
0376                          ;*Macro unroll:  mCODE 5, "CELL+", CELLP
0376                          ALIGN   2   
0376                CELLP:       
0376                VVCODE:   .SET   $   
0376                VVLEN:    .SET   (5 & 01FH) / CELLL   
1F0E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F0E                VVNAME:   .SET   $   
1F0E   76 03 1C 1F            DW   vvCODE,vvLINK   
1F12                VVLINK:   .SET   $   
1F12   05 43 45 4C 4C 2B      DB   5,"CELL+"   
0376                          .ORG   vvCODE   
0376   00                     NOP      
0377   CD 36 06               CALL   doLIST   
037A   44 06 02 00 7A 01 84 06 DW   DOLIT,CELLL,PLUS,EXIT   
0382                             ;   CELL-       ( a -- a )
0382                             ;               Subtract cell size in byte from address.
0382                          ;*Macro unroll: mCOLON	5,'CELL-',CELLM
0382                          ;*Macro unroll:  mCODE 5, "CELL-", CELLM
0382                          ALIGN   2   
0382                CELLM:       
0382                VVCODE:   .SET   $   
0382                VVLEN:    .SET   (5 & 01FH) / CELLL   
1F04                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F04                VVNAME:   .SET   $   
1F04   82 03 12 1F            DW   vvCODE,vvLINK   
1F08                VVLINK:   .SET   $   
1F08   05 43 45 4C 4C 2D      DB   5,"CELL-"   
0382                          .ORG   vvCODE   
0382   00                     NOP      
0383   CD 36 06               CALL   doLIST   
0386   44 06 FE FF 7A 01 84 06 DW   DOLIT,-CELLL,PLUS,EXIT   
038E                             ;   CELLS       ( n -- n )
038E                             ;               Multiply tos by cell size in bytes.
038E                          ;*Macro unroll: mCOLON	5,'CELLS',CELLS
038E                          ;*Macro unroll:  mCODE 5, "CELLS", CELLS
038E                          ALIGN   2   
038E                CELLS:       
038E                VVCODE:   .SET   $   
038E                VVLEN:    .SET   (5 & 01FH) / CELLL   
1EFA                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1EFA                VVNAME:   .SET   $   
1EFA   8E 03 08 1F            DW   vvCODE,vvLINK   
1EFE                VVLINK:   .SET   $   
1EFE   05 43 45 4C 4C 53      DB   5,"CELLS"   
038E                          .ORG   vvCODE   
038E   00                     NOP      
038F   CD 36 06               CALL   doLIST   
0392   44 06 02 00 34 03 84 06 DW   DOLIT,CELLL,STAR,EXIT   
039A                             ;  EXTRAS ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
039A                          ;*Macro unroll: mCOLON  1,'>',GREAT
039A                          ;*Macro unroll:  mCODE 1, ">", GREAT
039A                          ALIGN   2   
039A                GREAT:       
039A                VVCODE:   .SET   $   
039A                VVLEN:    .SET   (1 & 01FH) / CELLL   
1EF4                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1EF4                VVNAME:   .SET   $   
1EF4   9A 03 FE 1E            DW   vvCODE,vvLINK   
1EF8                VVLINK:   .SET   $   
1EF8   01 3E                  DB   1,">"   
039A                          .ORG   vvCODE   
039A   00                     NOP      
039B   CD 36 06               CALL   doLIST   
039E   64 10 00 02 84 06      DW   SWAP,LESS,EXIT   
03A4                          ;*Macro unroll: mCOLON  2,'1+',ONEP
03A4                          ;*Macro unroll:  mCODE 2, "1+", ONEP
03A4                          ALIGN   2   
03A4                ONEP:        
03A4                VVCODE:   .SET   $   
03A4                VVLEN:    .SET   (2 & 01FH) / CELLL   
1EEC                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1EEC                VVNAME:   .SET   $   
1EEC   A4 03 F8 1E            DW   vvCODE,vvLINK   
1EF0                VVLINK:   .SET   $   
1EF0   02 31 2B               DB   2,"1+"   
03A4                          .ORG   vvCODE   
03A4   00                     NOP      
03A5   CD 36 06               CALL   doLIST   
03A8   44 06 01 00 7A 01 84 06 DW   DOLIT,1,PLUS,EXIT   
03B0                          ;*Macro unroll: mCOLON  2,'1-',ONEM
03B0                          ;*Macro unroll:  mCODE 2, "1-", ONEM
03B0                          ALIGN   2   
03B0                ONEM:        
03B0                VVCODE:   .SET   $   
03B0                VVLEN:    .SET   (2 & 01FH) / CELLL   
1EE4                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1EE4                VVNAME:   .SET   $   
1EE4   B0 03 F0 1E            DW   vvCODE,vvLINK   
1EE8                VVLINK:   .SET   $   
1EE8   02 31 2D               DB   2,"1-"   
03B0                          .ORG   vvCODE   
03B0   00                     NOP      
03B1   CD 36 06               CALL   doLIST   
03B4   44 06 01 00 B4 01 84 06 DW   DOLIT,1,SUBB,EXIT   
03BC                          ;*Macro unroll: mCOLON  2,'2*',TWSTA
03BC                          ;*Macro unroll:  mCODE 2, "2*", TWSTA
03BC                          ALIGN   2   
03BC                TWSTA:       
03BC                VVCODE:   .SET   $   
03BC                VVLEN:    .SET   (2 & 01FH) / CELLL   
1EDC                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1EDC                VVNAME:   .SET   $   
1EDC   BC 03 E8 1E            DW   vvCODE,vvLINK   
1EE0                VVLINK:   .SET   $   
1EE0   02 32 2A               DB   2,"2*"   
03BC                          .ORG   vvCODE   
03BC   00                     NOP      
03BD   CD 36 06               CALL   doLIST   
03C0   5C 10 7A 01 84 06      DW   DUPP,PLUS,EXIT   
03C6                          ;*Macro unroll: mCODE  2,'2/',TWSLA
03C6                          ALIGN   2   
03C6                TWSLA:       
03C6                VVCODE:   .SET   $   
03C6                VVLEN:    .SET   (2 & 01FH) / CELLL   
1ED4                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1ED4                VVNAME:   .SET   $   
1ED4   C6 03 E0 1E            DW   vvCODE,vvLINK   
1ED8                VVLINK:   .SET   $   
1ED8   02 32 2F               DB   2,"2/"   
03C6                          .ORG   vvCODE   
03C6   CB 38                  SRL   B   
03C8   CB 19                  RR   C   
03CA                          ;*Macro unroll:  mNEXT
03CA   EB                     EX   DE,HL   
03CB   FD E9                  JP   (IY)   
03CD                             ;   '           ( -- ca )
03CD                             ;               Search context vocabularies for the next word in input stream.
03CD                          ;*Macro unroll: mCOLON  1,"'",TICK
03CD                          ;*Macro unroll:  mCODE 1, "'", TICK
03CD                          ALIGN   2   
03CE                TICK:        
03CE                VVCODE:   .SET   $   
03CE                VVLEN:    .SET   (1 & 01FH) / CELLL   
1ECE                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1ECE                VVNAME:   .SET   $   
1ECE   CE 03 D8 1E            DW   vvCODE,vvLINK   
1ED2                VVLINK:   .SET   $   
1ED2   01 27                  DB   1,"'"   
03CE                          .ORG   vvCODE   
03CE   00                     NOP      
03CF   CD 36 06               CALL   doLIST   
03D2   6E 09 50 0A            DW   TOKEN,NAMEQ   ;?defined
03D6   86 0E DC 03            DW   QBRAN,TICK1   
03DA   84 06                  DW   EXIT   ;yes, push code address
03DC                TICK1:       
03DC   B2 0A                  DW   THROW   ;no, error
03DE                             ;   ALLOT       ( n -- )
03DE                             ;               Allocate n bytes to the code dictionary.
03DE                          ;*Macro unroll: mCOLON  5,'ALLOT',ALLOT
03DE                          ;*Macro unroll:  mCODE 5, "ALLOT", ALLOT
03DE                          ALIGN   2   
03DE                ALLOT:       
03DE                VVCODE:   .SET   $   
03DE                VVLEN:    .SET   (5 & 01FH) / CELLL   
1EC4                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1EC4                VVNAME:   .SET   $   
1EC4   DE 03 D2 1E            DW   vvCODE,vvLINK   
1EC8                VVLINK:   .SET   $   
1EC8   05 41 4C 4C 4F 54      DB   5,"ALLOT"   
03DE                          .ORG   vvCODE   
03DE   00                     NOP      
03DF   CD 36 06               CALL   doLIST   
03E2   7C 11 F0 0E 84 06      DW   CP,PSTOR,EXIT   ;adjust code pointer
03E8                             ;   ,           ( w -- )
03E8                             ;               Compile an integer into the code dictionary.
03E8                          ;*Macro unroll: mCOLON  1,',',COMMA
03E8                          ;*Macro unroll:  mCODE 1, ",", COMMA
03E8                          ALIGN   2   
03E8                COMMA:       
03E8                VVCODE:   .SET   $   
03E8                VVLEN:    .SET   (1 & 01FH) / CELLL   
1EBE                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1EBE                VVNAME:   .SET   $   
1EBE   E8 03 C8 1E            DW   vvCODE,vvLINK   
1EC2                VVLINK:   .SET   $   
1EC2   01 2C                  DB   1,","   
03E8                          .ORG   vvCODE   
03E8   00                     NOP      
03E9   CD 36 06               CALL   doLIST   
03EC   34 0F 5C 10 76 03      DW   HERE,DUPP,CELLP   ;cell boundary
03F2   7C 11 A2 0E A2 0E 84 06 DW   CP,STORE,STORE,EXIT   ;adjust code pointer, compile
03FA                             ;   [COMPILE]   ( -- ; <string> )
03FA                             ;               Compile the next immediate word into code dictionary.
03FA                          ;*Macro unroll: mCOLON  IMEDD+9,'[COMPILE]',BCOMP
03FA                          ;*Macro unroll:  mCODE IMEDD+9, "[COMPILE]", BCOMP
03FA                          ALIGN   2   
03FA                BCOMP:       
03FA                VVCODE:   .SET   $   
03FA                VVLEN:    .SET   (IMEDD+9 & 01FH) / CELLL   
1E70                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1E70                VVNAME:   .SET   $   
1E70   FA 03 C2 1E            DW   vvCODE,vvLINK   
1E74                VVLINK:   .SET   $   
1E74   49 5B 43 4F 4D 50 49 4C 45 5D DB   IMEDD+9,"[COMPILE]"   
03FA                          .ORG   vvCODE   
03FA   00                     NOP      
03FB   CD 36 06               CALL   doLIST   
03FE   CE 03 E8 03 84 06      DW   TICK,COMMA,EXIT   
0404                             ;   COMPILE     ( -- )
0404                             ;               Compile the next address in colon list to code dictionary.
0404                          ;*Macro unroll: mCOLON  COMPO+7,'COMPILE',COMPI
0404                          ;*Macro unroll:  mCODE COMPO+7, "COMPILE", COMPI
0404                          ALIGN   2   
0404                COMPI:       
0404                VVCODE:   .SET   $   
0404                VVLEN:    .SET   (COMPO+7 & 01FH) / CELLL   
1E44                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1E44                VVNAME:   .SET   $   
1E44   04 04 74 1E            DW   vvCODE,vvLINK   
1E48                VVLINK:   .SET   $   
1E48   27 43 4F 4D 50 49 4C 45 DB   COMPO+7,"COMPILE"   
0404                          .ORG   vvCODE   
0404   00                     NOP      
0405   CD 36 06               CALL   doLIST   
0408   4E 10 5C 10 AC 0E E8 03 DW   RFROM,DUPP,AT,COMMA   ;compile address
0410   76 03 40 10 84 06      DW   CELLP,TOR,EXIT   ;adjust return address
0416                             ;   LITERAL     ( w -- )
0416                             ;               Compile tos to code dictionary as an integer literal.
0416                          ;*Macro unroll: mCOLON  IMEDD+7,'LITERAL',LITER
0416                          ;*Macro unroll:  mCODE IMEDD+7, "LITERAL", LITER
0416                          ALIGN   2   
0416                LITER:       
0416                VVCODE:   .SET   $   
0416                VVLEN:    .SET   (IMEDD+7 & 01FH) / CELLL   
1DF8                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1DF8                VVNAME:   .SET   $   
1DF8   16 04 48 1E            DW   vvCODE,vvLINK   
1DFC                VVLINK:   .SET   $   
1DFC   47 4C 49 54 45 52 41 4C DB   IMEDD+7,"LITERAL"   
0416                          .ORG   vvCODE   
0416   00                     NOP      
0417   CD 36 06               CALL   doLIST   
041A   04 04 44 06 E8 03 84 06 DW   COMPI,DOLIT,COMMA,EXIT   
0422                             ;   $,"         ( -- )
0422                             ;               Compile a literal string up to next " .
0422                          ;*Macro unroll: hCOLON  3,'$,|',STRCQ
0422                          ;*Macro unroll:  hCODE 3, "$,|", STRCQ
0422                          ALIGN   2   
0422                STRCQ:       
0422   00                     NOP      
0423   CD 36 06               CALL   doLIST   
0426   44 06 22 00 8A 09      DW   DOLIT,$22,WORDD   ;move string to code dictionary
042C   22 0F 7A 01 1A 10      DW   COUNT,PLUS,ALGND   ;calculate aligned end of string
0432   7C 11 A2 0E 84 06      DW   CP,STORE,EXIT   ;adjust the code pointer
0438                             ;   RECURSE     ( -- )
0438                             ;               Make the current word available for compilation.
0438                          ;*Macro unroll: mCOLON  IMEDD+7,'RECURSE',RECUR
0438                          ;*Macro unroll:  mCODE IMEDD+7, "RECURSE", RECUR
0438                          ALIGN   2   
0438                RECUR:       
0438                VVCODE:   .SET   $   
0438                VVLEN:    .SET   (IMEDD+7 & 01FH) / CELLL   
1DAC                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1DAC                VVNAME:   .SET   $   
1DAC   38 04 FC 1D            DW   vvCODE,vvLINK   
1DB0                VVLINK:   .SET   $   
1DB0   47 52 45 43 55 52 53 45 DB   IMEDD+7,"RECURSE"   
0438                          .ORG   vvCODE   
0438   00                     NOP      
0439   CD 36 06               CALL   doLIST   
043C   8C 11 AC 0E 96 09 E8 03 84 06 DW   LAST,AT,NAMET,COMMA,EXIT   
0446                             ;   ?UNIQUE     ( a -- a )
0446                             ;               Display a warning message if the word already exists.
0446                          ;*Macro unroll: mCOLON  7,'?UNIQUE',UNIQU
0446                          ;*Macro unroll:  mCODE 7, "?UNIQUE", UNIQU
0446                          ALIGN   2   
0446                UNIQU:       
0446                VVCODE:   .SET   $   
0446                VVLEN:    .SET   (7 & 01FH) / CELLL   
1DA0                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1DA0                VVNAME:   .SET   $   
1DA0   46 04 B0 1D            DW   vvCODE,vvLINK   
1DA4                VVLINK:   .SET   $   
1DA4   07 3F 55 4E 49 51 55 45 DB   7,"?UNIQUE"   
0446                          .ORG   vvCODE   
0446   00                     NOP      
0447   CD 36 06               CALL   doLIST   
044A   5C 10 50 0A            DW   DUPP,NAMEQ   ;?name exists
044E   86 0E 62 04            DW   QBRAN,UNIQ1   ;redefinitions are OK
0452                          ;*Macro unroll:  mDSTR   DOTQP,' reDef '         ;but warn the user
0452   90 0C                  DW   DOTQP   ;but warn the user
0454                VVLEN:    .SET   $   
0454   00 20 72 65 44 65 66 20 DB   0," reDef "   
045C                VVCODE:   .SET   $   
0454                          .ORG   vvLEN   
0454   07                     DB   vvCODE - vvLEN - 1   
045C                          .ORG   vvCODE   
045C   6C 10 22 0F 3A 0C      DW   OVER,COUNT,TYPEE   ;just in case its not planned
0462                UNIQ1:       
0462   60 10 84 06            DW   DROP,EXIT   
0466                             ;   $,n         ( na -- )
0466                             ;               Build a new dictionary name using the string at na.
0466                          ;*Macro unroll: mCOLON  3,'$,n',SNAME
0466                          ;*Macro unroll:  mCODE 3, "$,n", SNAME
0466                          ALIGN   2   
0466                SNAME:       
0466                VVCODE:   .SET   $   
0466                VVLEN:    .SET   (3 & 01FH) / CELLL   
1D98                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1D98                VVNAME:   .SET   $   
1D98   66 04 A4 1D            DW   vvCODE,vvLINK   
1D9C                VVLINK:   .SET   $   
1D9C   03 24 2C 6E            DB   3,"$,n"   
0466                          .ORG   vvCODE   
0466   00                     NOP      
0467   CD 36 06               CALL   doLIST   
046A   5C 10 BC 0E            DW   DUPP,CAT   ;?null input
046E   86 0E 98 04            DW   QBRAN,PNAM1   
0472   46 04                  DW   UNIQU   ;?redefinition
0474   5C 10 8C 11 A2 0E      DW   DUPP,LAST,STORE   ;save na for vocabulary link
047A   34 0F 1A 10 64 10      DW   HERE,ALGND,SWAP   ;align code address
0480   82 03                  DW   CELLM   ;link address
0482   74 11 AC 0E AC 0E 6C 10 A2 0E DW   CRRNT,AT,AT,OVER,STORE   
048C   82 03 5C 10 84 11 A2 0E DW   CELLM,DUPP,NP,STORE   ;adjust name pointer
0494   A2 0E 84 06            DW   STORE,EXIT   ;save code pointer
0498                PNAM1:       
0498                          ;*Macro unroll:  mDSTR   STRQP,' name'           ;null input
0498   88 0C                  DW   STRQP   ;null input
049A                VVLEN:    .SET   $   
049A   00 20 6E 61 6D 65      DB   0," name"   
04A0                VVCODE:   .SET   $   
049A                          .ORG   vvLEN   
049A   05                     DB   vvCODE - vvLEN - 1   
04A0                          .ORG   vvCODE   
04A0   B2 0A                  DW   THROW   
04A2                             ;   $COMPILE    ( a -- )
04A2                             ;               Compile next word to code dictionary as a token or literal.
04A2                          ;*Macro unroll: hCOLON  8,'$COMPILE',SCOMP
04A2                          ;*Macro unroll:  hCODE 8, "$COMPILE", SCOMP
04A2                          ALIGN   2   
04A2                SCOMP:       
04A2   00                     NOP      
04A3   CD 36 06               CALL   doLIST   
04A6   50 0A 74 10            DW   NAMEQ,QDUP   ;?defined
04AA   86 0E C2 04            DW   QBRAN,SCOM2   
04AE   AC 0E 44 06 40 00 5C 01 DW   AT,DOLIT,IMEDD,ANDD   ;?immediate
04B6   86 0E BE 04            DW   QBRAN,SCOM1   
04BA   82 0E 84 06            DW   EXECU,EXIT   ;its immediate, execute
04BE                SCOM1:       
04BE   E8 03 84 06            DW   COMMA,EXIT   ;its not immediate, compile
04C2                SCOM2:       
04C2   54 11 58 0F            DW   TNUMB,ATEXE   ;try to convert to number
04C6   86 0E CE 04            DW   QBRAN,SCOM3   
04CA   16 04 84 06            DW   LITER,EXIT   ;compile number as integer
04CE   B2 0A        SCOM3:    DW   THROW   ;error
04D0                             ;   OVERT       ( -- )
04D0                             ;               Link a new word into the current vocabulary.
04D0                          ;*Macro unroll: hCOLON  5,'OVERT',OVERT
04D0                          ;*Macro unroll:  hCODE 5, "OVERT", OVERT
04D0                          ALIGN   2   
04D0                OVERT:       
04D0   00                     NOP      
04D1   CD 36 06               CALL   doLIST   
04D4   8C 11 AC 0E 74 11 AC 0E A2 0E 84 06 DW   LAST,AT,CRRNT,AT,STORE,EXIT   
04E0                             ;   ;           ( -- )
04E0                             ;               Terminate a colon definition.
04E0                          ;*Macro unroll: mCOLON  IMEDD+COMPO+1,';',SEMIS
04E0                          ;*Macro unroll:  mCODE IMEDD+COMPO+1, ";", SEMIS
04E0                          ALIGN   2   
04E0                SEMIS:       
04E0                VVCODE:   .SET   $   
04E0                VVLEN:    .SET   (IMEDD+COMPO+1 & 01FH) / CELLL   
1D32                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1D32                VVNAME:   .SET   $   
1D32   E0 04 9C 1D            DW   vvCODE,vvLINK   
1D36                VVLINK:   .SET   $   
1D36   61 3B                  DB   IMEDD+COMPO+1,";"   
04E0                          .ORG   vvCODE   
04E0   00                     NOP      
04E1   CD 36 06               CALL   doLIST   
04E4   04 04 84 06 2C 0B D0 04 84 06 DW   COMPI,EXIT,LBRAC,OVERT,EXIT   
04EE                             ;   ]           ( -- )
04EE                             ;               Start compiling the words in the input stream.
04EE                          ;*Macro unroll: mCOLON  1,']',RBRAC
04EE                          ;*Macro unroll:  mCODE 1, "]", RBRAC
04EE                          ALIGN   2   
04EE                RBRAC:       
04EE                VVCODE:   .SET   $   
04EE                VVLEN:    .SET   (1 & 01FH) / CELLL   
1D2C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1D2C                VVNAME:   .SET   $   
1D2C   EE 04 36 1D            DW   vvCODE,vvLINK   
1D30                VVLINK:   .SET   $   
1D30   01 5D                  DB   1,"]"   
04EE                          .ORG   vvCODE   
04EE   00                     NOP      
04EF   CD 36 06               CALL   doLIST   
04F2   44 06 A2 04 4C 11 A2 0E 84 06 DW   DOLIT,SCOMP,TEVAL,STORE,EXIT   
04FC                             ;   call,       ( ca -- )
04FC                             ;               Assemble a call instruction to ca.
04FC                          ;*Macro unroll: hCOLON  5,'call,',CALLC
04FC                          ;*Macro unroll:  hCODE 5, "call,", CALLC
04FC                          ALIGN   2   
04FC                CALLC:       
04FC   00                     NOP      
04FD   CD 36 06               CALL   doLIST   
0500   44 06 00 CD E8 03      DW   DOLIT,CALLL,COMMA   ;Direct Threaded Code
0506   E8 03 84 06            DW   COMMA,EXIT   ;DTC 8086 relative call
050A                             ;   :           ( -- ; <string> )
050A                             ;               Start a new colon definition using next word as its name.
050A                          ;*Macro unroll: mCOLON  1,':',COLON
050A                          ;*Macro unroll:  mCODE 1, ":", COLON
050A                          ALIGN   2   
050A                COLON:       
050A                VVCODE:   .SET   $   
050A                VVLEN:    .SET   (1 & 01FH) / CELLL   
1D26                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1D26                VVNAME:   .SET   $   
1D26   0A 05 30 1D            DW   vvCODE,vvLINK   
1D2A                VVLINK:   .SET   $   
1D2A   01 3A                  DB   1,":"   
050A                          .ORG   vvCODE   
050A   00                     NOP      
050B   CD 36 06               CALL   doLIST   
050E   6E 09 66 04 44 06 36 06 DW   TOKEN,SNAME,DOLIT,DoLIST   
0516   FC 04 EE 04 84 06      DW   CALLC,RBRAC,EXIT   
051C                             ;   IMMEDIATE   ( -- )
051C                             ;               Make the last compiled word an immediate word.
051C                          ;*Macro unroll: mCOLON  9,'IMMEDIATE',IMMED
051C                          ;*Macro unroll:  mCODE 9, "IMMEDIATE", IMMED
051C                          ALIGN   2   
051C                IMMED:       
051C                VVCODE:   .SET   $   
051C                VVLEN:    .SET   (9 & 01FH) / CELLL   
1D18                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1D18                VVNAME:   .SET   $   
1D18   1C 05 2A 1D            DW   vvCODE,vvLINK   
1D1C                VVLINK:   .SET   $   
1D1C   09 49 4D 4D 45 44 49 41 54 45 DB   9,"IMMEDIATE"   
051C                          .ORG   vvCODE   
051C   00                     NOP      
051D   CD 36 06               CALL   doLIST   
0520   44 06 40 00 8C 11 AC 0E AC 0E 66 01 DW   DOLIT,IMEDD,LAST,AT,AT,ORR   
052C   8C 11 AC 0E A2 0E 84 06 DW   LAST,AT,STORE,EXIT   
0534                             ;   USER        ( u -- ; <string> )
0534                             ;               Compile a new user variable.
0534                          ;*Macro unroll: mCOLON  4,'USER',USER
0534                          ;*Macro unroll:  mCODE 4, "USER", USER
0534                          ALIGN   2   
0534                USER:        
0534                VVCODE:   .SET   $   
0534                VVLEN:    .SET   (4 & 01FH) / CELLL   
1D0E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1D0E                VVNAME:   .SET   $   
1D0E   34 05 1C 1D            DW   vvCODE,vvLINK   
1D12                VVLINK:   .SET   $   
1D12   04 55 53 45 52         DB   4,"USER"   
0534                          .ORG   vvCODE   
0534   00                     NOP      
0535   CD 36 06               CALL   doLIST   
0538   6E 09 66 04 D0 04      DW   TOKEN,SNAME,OVERT   
053E   44 06 36 06 FC 04      DW   DOLIT,DoLIST,CALLC   
0544   04 04 5C 06 E8 03 84 06 DW   COMPI,DOUSE,COMMA,EXIT   
054C                             ;   CREATE      ( -- ; <string> )
054C                             ;               Compile a new array entry without allocating code space.
054C                          ;*Macro unroll: mCOLON  6,'CREATE',CREAT
054C                          ;*Macro unroll:  mCODE 6, "CREATE", CREAT
054C                          ALIGN   2   
054C                CREAT:       
054C                VVCODE:   .SET   $   
054C                VVLEN:    .SET   (6 & 01FH) / CELLL   
1D02                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1D02                VVNAME:   .SET   $   
1D02   4C 05 12 1D            DW   vvCODE,vvLINK   
1D06                VVLINK:   .SET   $   
1D06   06 43 52 45 41 54 45   DB   6,"CREATE"   
054C                          .ORG   vvCODE   
054C   00                     NOP      
054D   CD 36 06               CALL   doLIST   
0550   6E 09 66 04 D0 04      DW   TOKEN,SNAME,OVERT   
0556   44 06 36 06 FC 04      DW   DOLIT,DoLIST,CALLC   
055C   04 04 4C 06 84 06      DW   COMPI,DOVAR,EXIT   
0562                             ;   VARIABLE    ( -- ; <string> )
0562                             ;               Compile a new variable initialized to 0.
0562                          ;*Macro unroll: mCOLON  8,'VARIABLE',VARIA
0562                          ;*Macro unroll:  mCODE 8, "VARIABLE", VARIA
0562                          ALIGN   2   
0562                VARIA:       
0562                VVCODE:   .SET   $   
0562                VVLEN:    .SET   (8 & 01FH) / CELLL   
1CF4                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1CF4                VVNAME:   .SET   $   
1CF4   62 05 06 1D            DW   vvCODE,vvLINK   
1CF8                VVLINK:   .SET   $   
1CF8   08 56 41 52 49 41 42 4C 45 DB   8,"VARIABLE"   
0562                          .ORG   vvCODE   
0562   00                     NOP      
0563   CD 36 06               CALL   doLIST   
0566   4C 05 44 06 00 00 E8 03 84 06 DW   CREAT,DOLIT,0,COMMA,EXIT   
0570                             ;   FOR         ( -- a )
0570                             ;               Start a FOR-NEXT loop structure in a colon definition.
0570                          ;*Macro unroll: mCOLON  IMEDD+3,'FOR',FOR
0570                          ;*Macro unroll:  mCODE IMEDD+3, "FOR", FOR
0570                          ALIGN   2   
0570                FOR:         
0570                VVCODE:   .SET   $   
0570                VVLEN:    .SET   (IMEDD+3 & 01FH) / CELLL   
1CAC                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1CAC                VVNAME:   .SET   $   
1CAC   70 05 F8 1C            DW   vvCODE,vvLINK   
1CB0                VVLINK:   .SET   $   
1CB0   43 46 4F 52            DB   IMEDD+3,"FOR"   
0570                          .ORG   vvCODE   
0570   00                     NOP      
0571   CD 36 06               CALL   doLIST   
0574   04 04 40 10 34 0F 84 06 DW   COMPI,TOR,HERE,EXIT   
057C                             ;   BEGIN       ( -- a )
057C                             ;               Start an infinite or indefinite loop structure.
057C                          ;*Macro unroll: mCOLON  IMEDD+5,'BEGIN',BEGIN
057C                          ;*Macro unroll:  mCODE IMEDD+5, "BEGIN", BEGIN
057C                          ALIGN   2   
057C                BEGIN:       
057C                VVCODE:   .SET   $   
057C                VVLEN:    .SET   (IMEDD+5 & 01FH) / CELLL   
1C62                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1C62                VVNAME:   .SET   $   
1C62   7C 05 B0 1C            DW   vvCODE,vvLINK   
1C66                VVLINK:   .SET   $   
1C66   45 42 45 47 49 4E      DB   IMEDD+5,"BEGIN"   
057C                          .ORG   vvCODE   
057C   00                     NOP      
057D   CD 36 06               CALL   doLIST   
0580   34 0F 84 06            DW   HERE,EXIT   
0584                             ;   NEXT        ( a -- )
0584                             ;               Terminate a FOR-NEXT loop structure.
0584                          ;*Macro unroll: mCOLON  IMEDD+4,'NEXT',NEXT
0584                          ;*Macro unroll:  mCODE IMEDD+4, "NEXT", NEXT
0584                          ALIGN   2   
0584                NEXT:        
0584                VVCODE:   .SET   $   
0584                VVLEN:    .SET   (IMEDD+4 & 01FH) / CELLL   
1C18                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1C18                VVNAME:   .SET   $   
1C18   84 05 66 1C            DW   vvCODE,vvLINK   
1C1C                VVLINK:   .SET   $   
1C1C   44 4E 45 58 54         DB   IMEDD+4,"NEXT"   
0584                          .ORG   vvCODE   
0584   00                     NOP      
0585   CD 36 06               CALL   doLIST   
0588   04 04 90 06 E8 03 84 06 DW   COMPI,DONXT,COMMA,EXIT   
0590                             ;   UNTIL       ( a -- )
0590                             ;               Terminate a BEGIN-UNTIL indefinite loop structure.
0590                          ;*Macro unroll: mCOLON  IMEDD+5,'UNTIL',UNTIL
0590                          ;*Macro unroll:  mCODE IMEDD+5, "UNTIL", UNTIL
0590                          ALIGN   2   
0590                UNTIL:       
0590                VVCODE:   .SET   $   
0590                VVLEN:    .SET   (IMEDD+5 & 01FH) / CELLL   
1BCE                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1BCE                VVNAME:   .SET   $   
1BCE   90 05 1C 1C            DW   vvCODE,vvLINK   
1BD2                VVLINK:   .SET   $   
1BD2   45 55 4E 54 49 4C      DB   IMEDD+5,"UNTIL"   
0590                          .ORG   vvCODE   
0590   00                     NOP      
0591   CD 36 06               CALL   doLIST   
0594   04 04 86 0E E8 03 84 06 DW   COMPI,QBRAN,COMMA,EXIT   
059C                             ;   AGAIN       ( a -- )
059C                             ;               Terminate a BEGIN-AGAIN infinite loop structure.
059C                          ;*Macro unroll: mCOLON  IMEDD+5,'AGAIN',AGAIN
059C                          ;*Macro unroll:  mCODE IMEDD+5, "AGAIN", AGAIN
059C                          ALIGN   2   
059C                AGAIN:       
059C                VVCODE:   .SET   $   
059C                VVLEN:    .SET   (IMEDD+5 & 01FH) / CELLL   
1B84                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1B84                VVNAME:   .SET   $   
1B84   9C 05 D2 1B            DW   vvCODE,vvLINK   
1B88                VVLINK:   .SET   $   
1B88   45 41 47 41 49 4E      DB   IMEDD+5,"AGAIN"   
059C                          .ORG   vvCODE   
059C   00                     NOP      
059D   CD 36 06               CALL   doLIST   
05A0   04 04 92 0E E8 03 84 06 DW   COMPI,BRAN,COMMA,EXIT   
05A8                             ;   IF          ( -- A )
05A8                             ;               Begin a conditional branch structure.
05A8                          ;*Macro unroll: mCOLON  IMEDD+2,'IF',IFF
05A8                          ;*Macro unroll:  mCODE IMEDD+2, "IF", IFF
05A8                          ALIGN   2   
05A8                IFF:         
05A8                VVCODE:   .SET   $   
05A8                VVLEN:    .SET   (IMEDD+2 & 01FH) / CELLL   
1B3C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1B3C                VVNAME:   .SET   $   
1B3C   A8 05 88 1B            DW   vvCODE,vvLINK   
1B40                VVLINK:   .SET   $   
1B40   42 49 46               DB   IMEDD+2,"IF"   
05A8                          .ORG   vvCODE   
05A8   00                     NOP      
05A9   CD 36 06               CALL   doLIST   
05AC   04 04 86 0E 34 0F      DW   COMPI,QBRAN,HERE   
05B2   44 06 00 00 E8 03 84 06 DW   DOLIT,0,COMMA,EXIT   
05BA                             ;   AHEAD       ( -- A )
05BA                             ;               Compile a forward branch instruction.
05BA                          ;*Macro unroll: mCOLON  IMEDD+5,'AHEAD',AHEAD
05BA                          ;*Macro unroll:  mCODE IMEDD+5, "AHEAD", AHEAD
05BA                          ALIGN   2   
05BA                AHEAD:       
05BA                VVCODE:   .SET   $   
05BA                VVLEN:    .SET   (IMEDD+5 & 01FH) / CELLL   
1AF2                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1AF2                VVNAME:   .SET   $   
1AF2   BA 05 40 1B            DW   vvCODE,vvLINK   
1AF6                VVLINK:   .SET   $   
1AF6   45 41 48 45 41 44      DB   IMEDD+5,"AHEAD"   
05BA                          .ORG   vvCODE   
05BA   00                     NOP      
05BB   CD 36 06               CALL   doLIST   
05BE   04 04 92 0E 34 0F 44 06 00 00 E8 03 84 06 DW   COMPI,BRAN,HERE,DOLIT,0,COMMA,EXIT   
05CC                             ;   REPEAT      ( A a -- )
05CC                             ;               Terminate a BEGIN-WHILE-REPEAT indefinite loop.
05CC                          ;*Macro unroll: mCOLON  IMEDD+6,'REPEAT',REPEA
05CC                          ;*Macro unroll:  mCODE IMEDD+6, "REPEAT", REPEA
05CC                          ALIGN   2   
05CC                REPEA:       
05CC                VVCODE:   .SET   $   
05CC                VVLEN:    .SET   (IMEDD+6 & 01FH) / CELLL   
1AA6                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1AA6                VVNAME:   .SET   $   
1AA6   CC 05 F6 1A            DW   vvCODE,vvLINK   
1AAA                VVLINK:   .SET   $   
1AAA   46 52 45 50 45 41 54   DB   IMEDD+6,"REPEAT"   
05CC                          .ORG   vvCODE   
05CC   00                     NOP      
05CD   CD 36 06               CALL   doLIST   
05D0   9C 05 34 0F 64 10 A2 0E 84 06 DW   AGAIN,HERE,SWAP,STORE,EXIT   
05DA                             ;   THEN        ( A -- )
05DA                             ;               Terminate a conditional branch structure.
05DA                          ;*Macro unroll: mCOLON  IMEDD+4,'THEN',THENN
05DA                          ;*Macro unroll:  mCODE IMEDD+4, "THEN", THENN
05DA                          ALIGN   2   
05DA                THENN:       
05DA                VVCODE:   .SET   $   
05DA                VVLEN:    .SET   (IMEDD+4 & 01FH) / CELLL   
1A5C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1A5C                VVNAME:   .SET   $   
1A5C   DA 05 AA 1A            DW   vvCODE,vvLINK   
1A60                VVLINK:   .SET   $   
1A60   44 54 48 45 4E         DB   IMEDD+4,"THEN"   
05DA                          .ORG   vvCODE   
05DA   00                     NOP      
05DB   CD 36 06               CALL   doLIST   
05DE   34 0F 64 10 A2 0E 84 06 DW   HERE,SWAP,STORE,EXIT   
05E6                             ;   AFT         ( a -- a A )
05E6                             ;               Jump to THEN in a FOR-AFT-THEN-NEXT loop the 1st time through.
05E6                          ;*Macro unroll: mCOLON  IMEDD+3,'AFT',AFT
05E6                          ;*Macro unroll:  mCODE IMEDD+3, "AFT", AFT
05E6                          ALIGN   2   
05E6                AFT:         
05E6                VVCODE:   .SET   $   
05E6                VVLEN:    .SET   (IMEDD+3 & 01FH) / CELLL   
1A14                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1A14                VVNAME:   .SET   $   
1A14   E6 05 60 1A            DW   vvCODE,vvLINK   
1A18                VVLINK:   .SET   $   
1A18   43 41 46 54            DB   IMEDD+3,"AFT"   
05E6                          .ORG   vvCODE   
05E6   00                     NOP      
05E7   CD 36 06               CALL   doLIST   
05EA   60 10 BA 05 7C 05 64 10 84 06 DW   DROP,AHEAD,BEGIN,SWAP,EXIT   
05F4                             ;   ELSE        ( A -- A )
05F4                             ;               Start the false clause in an IF-ELSE-THEN structure.
05F4                          ;*Macro unroll: mCOLON  IMEDD+4,'ELSE',ELSEE
05F4                          ;*Macro unroll:  mCODE IMEDD+4, "ELSE", ELSEE
05F4                          ALIGN   2   
05F4                ELSEE:       
05F4                VVCODE:   .SET   $   
05F4                VVLEN:    .SET   (IMEDD+4 & 01FH) / CELLL   
19CA                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
19CA                VVNAME:   .SET   $   
19CA   F4 05 18 1A            DW   vvCODE,vvLINK   
19CE                VVLINK:   .SET   $   
19CE   44 45 4C 53 45         DB   IMEDD+4,"ELSE"   
05F4                          .ORG   vvCODE   
05F4   00                     NOP      
05F5   CD 36 06               CALL   doLIST   
05F8   BA 05 64 10 DA 05 84 06 DW   AHEAD,SWAP,THENN,EXIT   
0600                             ;   WHILE       ( a -- A a )
0600                             ;               Conditional branch out of a BEGIN-WHILE-REPEAT loop.
0600                          ;*Macro unroll: mCOLON  IMEDD+5,'WHILE',WHILE
0600                          ;*Macro unroll:  mCODE IMEDD+5, "WHILE", WHILE
0600                          ALIGN   2   
0600                WHILE:       
0600                VVCODE:   .SET   $   
0600                VVLEN:    .SET   (IMEDD+5 & 01FH) / CELLL   
1980                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1980                VVNAME:   .SET   $   
1980   00 06 CE 19            DW   vvCODE,vvLINK   
1984                VVLINK:   .SET   $   
1984   45 57 48 49 4C 45      DB   IMEDD+5,"WHILE"   
0600                          .ORG   vvCODE   
0600   00                     NOP      
0601   CD 36 06               CALL   doLIST   
0604   A8 05 64 10 84 06      DW   IFF,SWAP,EXIT   
060A                             ;   ABORT"      ( -- ; <string> )
060A                             ;               Conditional abort with an error message.
060A                          ;*Macro unroll: mCOLON  IMEDD+6,'ABORTQ',ABRTQ
060A                          ;*Macro unroll:  mCODE IMEDD+6, "ABORTQ", ABRTQ
060A                          ALIGN   2   
060A                ABRTQ:       
060A                VVCODE:   .SET   $   
060A                VVLEN:    .SET   (IMEDD+6 & 01FH) / CELLL   
1934                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1934                VVNAME:   .SET   $   
1934   0A 06 84 19            DW   vvCODE,vvLINK   
1938                VVLINK:   .SET   $   
1938   46 41 42 4F 52 54 51   DB   IMEDD+6,"ABORTQ"   
060A                          .ORG   vvCODE   
060A   00                     NOP      
060B   CD 36 06               CALL   doLIST   
060E   04 04 E6 0A 22 04 84 06 DW   COMPI,ABORQ,STRCQ,EXIT   
0616                             ;   $"          ( -- ; <string> )
0616                             ;               Compile an inline string literal.
0616                          ;*Macro unroll: hCOLON  IMEDD+2,'$|',STRQ
0616                          ;*Macro unroll:  hCODE IMEDD+2, "$|", STRQ
0616                          ALIGN   2   
0616                STRQ:        
0616   00                     NOP      
0617   CD 36 06               CALL   doLIST   
061A   04 04 88 0C 22 04 84 06 DW   COMPI,STRQP,STRCQ,EXIT   
0622                             ;   ."          ( -- ; <string> )
0622                             ;               Compile an inline string literal to be typed out at run time.
0622                          ;*Macro unroll: hCOLON  IMEDD+2,'.|',DOTQ
0622                          ;*Macro unroll:  hCODE IMEDD+2, ".|", DOTQ
0622                          ALIGN   2   
0622                DOTQ:        
0622   00                     NOP      
0623   CD 36 06               CALL   doLIST   
0626   04 04 90 0C 22 04 84 06 DW   COMPI,DOTQP,STRCQ,EXIT   
062E                             ; ;   UNLOOP	( -- ) ( R: loop-sys -- )	\ CORE
062E                             ; ;		Discard loop-control parameters for the current nesting level.
062E                             ; ;		An UNLOOP is required for each nesting level before the
062E                             ; ;		definition may be EXITed.
062E                             ; mCOLON	COMPO+6,"UNLOOP",UNLOOP
062E                             ; 	DW	RFrom,RFrom,RFrom,DDROP,ToR,EXIT
062E                             ;   doCONST	( -- x )
062E                             ;	Run-time routine of CONSTANT and VARIABLE.
062E                          ;*Macro unroll: hCODE	COMPO+7, 'doCONST', DoCONST
062E                          ALIGN   2   
062E                DOCONST:      
062E   E1                     POP   HL   ;10t
062F   C5                     PUSH   BC   ;11t
0630   4E                     LD   C,(HL)   ; 7t
0631   23                     INC   HL   ; 6t
0632   46                     LD   B,(HL)   ; 7t
0633                          ;*Macro unroll:  mNEXT
0633   EB                     EX   DE,HL   
0634   FD E9                  JP   (IY)   
0636                             ;   doLIST	( -- ) ( R: -- nest-sys )
0636                             ;	Process colon list.
0636                          ;*Macro unroll: hCODE	COMPO+6, 'doLIST', DoLIST
0636                          ALIGN   2   
0636                DOLIST:      
0636   DD 2B                  DEC   IX   ;10t
0638   DD 72 00               LD   (IX+0),D   ;19t
063B   DD 2B                  DEC   IX   ;10t
063D   DD 73 00               LD   (IX+0),E   ;19t
0640   E1                     POP   HL   ;10t
0641                          ;*Macro unroll:  mNEXTHL							
0641   FD E9                  JP   (IY)   
0643                             ;   DOLIT	( -- x )
0643                             ;	Push an inline literal.
0643                          ;*Macro unroll: hCODE	COMPO+5, 'DOLIT', DOLIT
0643                          ALIGN   2   
0644                DOLIT:       
0644   C5                     PUSH   BC   ; 11t
0645   EB                     EX   DE,HL   ; 4t
0646   4E                     LD   C,(HL)   ; 7t
0647   23                     INC   HL   ; 6t
0648   46                     LD   B,(HL)   ; 7t
0649   23                     INC   HL   ; 6t
064A                          ;*Macro unroll:  mNEXTHL
064A   FD E9                  JP   (IY)   
064C                             ;   doVAR       ( -- a )
064C                             ;   Run time routine for VARIABLE and CREATE.
064C                          ;*Macro unroll: hCOLON  COMPO+5, 'doVAR', DoVAR
064C                          ;*Macro unroll:  hCODE COMPO+5, "doVAR", DoVAR
064C                          ALIGN   2   
064C                DOVAR:       
064C   00                     NOP      
064D   CD 36 06               CALL   doLIST   
0650   4E 10 84 06            DW   RFROM,EXIT   
0654                             ;   UP          ( -- a )
0654                             ;   Pointer to the user area.
0654                          ;*Macro unroll: hCOLON  2, 'UP', UP
0654                          ;*Macro unroll:  hCODE 2, "UP", UP
0654                          ALIGN   2   
0654                UP:          
0654   00                     NOP      
0655   CD 36 06               CALL   doLIST   
0658   4C 06                  DW   DoVAR   
065A   45 24                  DW   UPP   
065C                             ;   doUSER      ( -- a )
065C                             ;   Run time routine for user variables.
065C                          ;*Macro unroll: hCOLON  COMPO+6,'doUSER',DOUSE
065C                          ;*Macro unroll:  hCODE COMPO+6, "doUSER", DOUSE
065C                          ALIGN   2   
065C                DOUSE:       
065C   00                     NOP      
065D   CD 36 06               CALL   doLIST   
0660   4E 10 AC 0E 54 06 AC 0E 7A 01 84 06 DW   RFROM,AT,UP,AT,PLUS,EXIT   
066C                             ;   do$         ( -- a )
066C                             ;               Return the address of a compiled string.
066C                          ;*Macro unroll: hCOLON  COMPO+3,'do$',DOSTR
066C                          ;*Macro unroll:  hCODE COMPO+3, "do$", DOSTR
066C                          ALIGN   2   
066C                DOSTR:       
066C   00                     NOP      
066D   CD 36 06               CALL   doLIST   
0670   4E 10 C4 0E 4E 10 22 0F 7A 01 DW   RFROM,RAT,RFROM,COUNT,PLUS   
067A   1A 10 40 10 64 10 40 10 84 06 DW   ALGND,TOR,SWAP,TOR,EXIT   
0684                             ;   EXIT	( -- ) ( R: nest-sys -- )	\ CORE
0684                             ;	Return control to the calling definition.
0684                          ;*Macro unroll: mCODE	COMPO+4, 'EXIT', EXIT
0684                          ALIGN   2   
0684                EXIT:        
0684                VVCODE:   .SET   $   
0684                VVLEN:    .SET   (COMPO+4 & 01FH) / CELLL   
190A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
190A                VVNAME:   .SET   $   
190A   84 06 38 19            DW   vvCODE,vvLINK   
190E                VVLINK:   .SET   $   
190E   24 45 58 49 54         DB   COMPO+4,"EXIT"   
0684                          .ORG   vvCODE   
0684   DD 6E 00               LD   L,(IX+0)   
0687   DD 23                  INC   IX   
0689   DD 66 00               LD   H,(IX+0)   
068C   DD 23                  INC   IX   
068E                          ;*Macro unroll:  mNEXTHL
068E   FD E9                  JP   (IY)   
0690                             ;   next        ( -- )
0690                             ;               Run time code for the single index loop.
0690                             ;               : next ( -- ) \ hilevel model
0690                             ;                 r> r> dup if 1 - >r @ >r exit then drop cell+ >r ;
0690                          ;*Macro unroll: mCODE   COMPO+4,'next',DONXT
0690                          ALIGN   2   
0690                DONXT:       
0690                VVCODE:   .SET   $   
0690                VVLEN:    .SET   (COMPO+4 & 01FH) / CELLL   
18E0                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
18E0                VVNAME:   .SET   $   
18E0   90 06 0E 19            DW   vvCODE,vvLINK   
18E4                VVLINK:   .SET   $   
18E4   24 6E 65 78 74         DB   COMPO+4,"next"   
0690                          .ORG   vvCODE   
0690   DD E5                  PUSH   IX   
0692   E1                     POP   HL   ; load rp into HL
0693   7E                     LD   A,(HL)   ; a = low byte of r@
0694   B7                     OR   A   
0695   20 10                  JR   NZ,DECLOW   ; low > 0 goto dec low
0697   23                     INC   HL   
0698   7E                     LD   A,(HL)   ; a = high byte of r@
0699   B7                     OR   A   
069A   20 09                  JR   NZ,DECHILO   ; high > 0 goto dec hi dec lo
069C   23                     INC   HL   
069D   E5                     PUSH   HL   
069E   DD E1                  POP   IX   ; pop r@
06A0   13                     INC   DE   ; IP = skip following word
06A1   13                     INC   DE   
06A2                          ;*Macro unroll:  mNEXT                               ; continue
06A2   EB                     EX   DE,HL   ; continue
06A3   FD E9                  JP   (IY)   
06A5                DECHILO:      
06A5   35                     DEC   (HL)   ; dec high byte of r@
06A6   2B                     DEC   HL   
06A7                DECLOW:      
06A7   35                     DEC   (HL)   ; dec low byte of r@
06A8   6B                     LD   L,E   ; DE points to location of loop address
06A9   62                     LD   H,D   
06AA   5E                     LD   E,(HL)   ; DE points to loop address
06AB   23                     INC   HL   
06AC   56                     LD   D,(HL)   
06AD                          ;*Macro unroll:  mNEXT                               ; continue to loop address
06AD   EB                     EX   DE,HL   ; continue to loop address
06AE   FD E9                  JP   (IY)   
06B0                             ;   DIGIT       ( u -- c )
06B0                             ;               Convert digit u to a character.
06B0                          ;*Macro unroll: hCOLON  5,'DIGIT',DIGIT
06B0                          ;*Macro unroll:  hCODE 5, "DIGIT", DIGIT
06B0                          ALIGN   2   
06B0                DIGIT:       
06B0   00                     NOP      
06B1   CD 36 06               CALL   doLIST   
06B4   44 06 09 00 6C 10 00 02 DW   DOLIT,9,OVER,LESS   
06BC   44 06 07 00 5C 01 7A 01 DW   DOLIT,7,ANDD,PLUS   
06C4   44 06 30 00 7A 01 84 06 DW   DOLIT,$30,PLUS,EXIT   ; $30 = "0"
06CC                             ;   EXTRACT     ( n base -- n c )
06CC                             ;               Extract the least significant digit from n.
06CC                          ;*Macro unroll: hCOLON  7,'EXTRACT',EXTRC
06CC                          ;*Macro unroll:  hCODE 7, "EXTRACT", EXTRC
06CC                          ALIGN   2   
06CC                EXTRC:       
06CC   00                     NOP      
06CD   CD 36 06               CALL   doLIST   
06D0   44 06 00 00 64 10 5E 02 DW   DOLIT,0,SWAP,UMMOD   
06D8   64 10 B0 06 84 06      DW   SWAP,DIGIT,EXIT   
06DE                             ;   <#          ( -- )
06DE                             ;               Initiate the numeric output process.
06DE                          ;*Macro unroll: mCOLON  2,'<#',BDIGS
06DE                          ;*Macro unroll:  mCODE 2, "<#", BDIGS
06DE                          ALIGN   2   
06DE                BDIGS:       
06DE                VVCODE:   .SET   $   
06DE                VVLEN:    .SET   (2 & 01FH) / CELLL   
18D8                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
18D8                VVNAME:   .SET   $   
18D8   DE 06 E4 18            DW   vvCODE,vvLINK   
18DC                VVLINK:   .SET   $   
18DC   02 3C 23               DB   2,"<#"   
06DE                          .ORG   vvCODE   
06DE   00                     NOP      
06DF   CD 36 06               CALL   doLIST   
06E2   3E 0F 5C 11 A2 0E 84 06 DW   PAD,HLD,STORE,EXIT   
06EA                             ;   HOLD        ( c -- )
06EA                             ;               Insert a character into the numeric output string.
06EA                          ;*Macro unroll: mCOLON  4,'HOLD',HOLD
06EA                          ;*Macro unroll:  mCODE 4, "HOLD", HOLD
06EA                          ALIGN   2   
06EA                HOLD:        
06EA                VVCODE:   .SET   $   
06EA                VVLEN:    .SET   (4 & 01FH) / CELLL   
18CE                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
18CE                VVNAME:   .SET   $   
18CE   EA 06 DC 18            DW   vvCODE,vvLINK   
18D2                VVLINK:   .SET   $   
18D2   04 48 4F 4C 44         DB   4,"HOLD"   
06EA                          .ORG   vvCODE   
06EA   00                     NOP      
06EB   CD 36 06               CALL   doLIST   
06EE   5C 11 AC 0E 44 06 01 00 B4 01 DW   HLD,AT,DOLIT,1,SUBB   
06F8   5C 10 5C 11 A2 0E B4 0E 84 06 DW   DUPP,HLD,STORE,CSTOR,EXIT   
0702                             ;   #           ( u -- u )
0702                             ;               Extract one digit from u and append the digit to output string.
0702                          ;*Macro unroll: mCOLON  1,'#',DIG
0702                          ;*Macro unroll:  mCODE 1, "#", DIG
0702                          ALIGN   2   
0702                DIG:         
0702                VVCODE:   .SET   $   
0702                VVLEN:    .SET   (1 & 01FH) / CELLL   
18C8                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
18C8                VVNAME:   .SET   $   
18C8   02 07 D2 18            DW   vvCODE,vvLINK   
18CC                VVLINK:   .SET   $   
18CC   01 23                  DB   1,"#"   
0702                          .ORG   vvCODE   
0702   00                     NOP      
0703   CD 36 06               CALL   doLIST   
0706   1C 11 AC 0E CC 06 EA 06 84 06 DW   BASE,AT,EXTRC,HOLD,EXIT   
0710                             ;   #S          ( u -- 0 )
0710                             ;               Convert u until all digits are added to the output string.
0710                          ;*Macro unroll: mCOLON  2,'#S',DIGS
0710                          ;*Macro unroll:  mCODE 2, "#S", DIGS
0710                          ALIGN   2   
0710                DIGS:        
0710                VVCODE:   .SET   $   
0710                VVLEN:    .SET   (2 & 01FH) / CELLL   
18C0                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
18C0                VVNAME:   .SET   $   
18C0   10 07 CC 18            DW   vvCODE,vvLINK   
18C4                VVLINK:   .SET   $   
18C4   02 23 53               DB   2,"#S"   
0710                          .ORG   vvCODE   
0710   00                     NOP      
0711   CD 36 06               CALL   doLIST   
0714                DIGS1:       
0714   02 07 5C 10            DW   DIG,DUPP   
0718   86 0E 20 07            DW   QBRAN,DIGS2   
071C   92 0E 14 07            DW   BRAN,DIGS1   
0720                DIGS2:       
0720   84 06                  DW   EXIT   
0722                             ;   SIGN        ( n -- )
0722                             ;               Add a minus sign to the numeric output string.
0722                          ;*Macro unroll: mCOLON	4,'SIGN',SIGN
0722                          ;*Macro unroll:  mCODE 4, "SIGN", SIGN
0722                          ALIGN   2   
0722                SIGN:        
0722                VVCODE:   .SET   $   
0722                VVLEN:    .SET   (4 & 01FH) / CELLL   
18B6                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
18B6                VVNAME:   .SET   $   
18B6   22 07 C4 18            DW   vvCODE,vvLINK   
18BA                VVLINK:   .SET   $   
18BA   04 53 49 47 4E         DB   4,"SIGN"   
0722                          .ORG   vvCODE   
0722   00                     NOP      
0723   CD 36 06               CALL   doLIST   
0726   54 01 86 0E 32 07      DW   ZLESS,QBRAN,SIGN1   
072C   44 06 2D 00 EA 06      DW   DoLIT,MINUSS,HOLD   
0732                SIGN1:       
0732   84 06                  DW   EXIT   
0734                             ;   #>          ( w -- b u )
0734                             ;               Prepare the output string to be TYPE'd.
0734                          ;*Macro unroll: mCOLON  2,'#>',EDIGS
0734                          ;*Macro unroll:  mCODE 2, "#>", EDIGS
0734                          ALIGN   2   
0734                EDIGS:       
0734                VVCODE:   .SET   $   
0734                VVLEN:    .SET   (2 & 01FH) / CELLL   
18AE                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
18AE                VVNAME:   .SET   $   
18AE   34 07 BA 18            DW   vvCODE,vvLINK   
18B2                VVLINK:   .SET   $   
18B2   02 23 3E               DB   2,"#>"   
0734                          .ORG   vvCODE   
0734   00                     NOP      
0735   CD 36 06               CALL   doLIST   
0738   60 10 5C 11 AC 0E      DW   DROP,HLD,AT   
073E   3E 0F 6C 10 B4 01 84 06 DW   PAD,OVER,SUBB,EXIT   
0746                             ;   str         ( n -- b u )
0746                             ;               Convert a signed integer to a numeric string.
0746                          ;*Macro unroll: hCOLON  3,'str',STR
0746                          ;*Macro unroll:  hCODE 3, "str", STR
0746                          ALIGN   2   
0746                STR:         
0746   00                     NOP      
0747   CD 36 06               CALL   doLIST   
074A   5C 10 40 10 BE 01      DW   DUPP,TOR,ABSS   
0750   DE 06 10 07 4E 10      DW   BDIGS,DIGS,RFROM   
0756   22 07 34 07 84 06      DW   SIGN,EDIGS,EXIT   
075C                             ;   HEX         ( -- )
075C                             ;               Use radix 16 as base for numeric conversions.
075C                          ;*Macro unroll: mCOLON  3,'HEX',HEX
075C                          ;*Macro unroll:  mCODE 3, "HEX", HEX
075C                          ALIGN   2   
075C                HEX:         
075C                VVCODE:   .SET   $   
075C                VVLEN:    .SET   (3 & 01FH) / CELLL   
18A6                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
18A6                VVNAME:   .SET   $   
18A6   5C 07 B2 18            DW   vvCODE,vvLINK   
18AA                VVLINK:   .SET   $   
18AA   03 48 45 58            DB   3,"HEX"   
075C                          .ORG   vvCODE   
075C   00                     NOP      
075D   CD 36 06               CALL   doLIST   
0760   44 06 10 00 1C 11 A2 0E 84 06 DW   DOLIT,16,BASE,STORE,EXIT   
076A                             ;   DECIMAL     ( -- )
076A                             ;               Use radix 10 as base for numeric conversions.
076A                          ;*Macro unroll: mCOLON  7,'DECIMAL',DECIMAL
076A                          ;*Macro unroll:  mCODE 7, "DECIMAL", DECIMAL
076A                          ALIGN   2   
076A                DECIMAL:      
076A                VVCODE:   .SET   $   
076A                VVLEN:    .SET   (7 & 01FH) / CELLL   
189A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
189A                VVNAME:   .SET   $   
189A   6A 07 AA 18            DW   vvCODE,vvLINK   
189E                VVLINK:   .SET   $   
189E   07 44 45 43 49 4D 41 4C DB   7,"DECIMAL"   
076A                          .ORG   vvCODE   
076A   00                     NOP      
076B   CD 36 06               CALL   doLIST   
076E   44 06 10 00 1C 11 A2 0E 84 06 DW   DOLIT,16,BASE,STORE,EXIT   
0778                             ;   BL          ( -- 32 )
0778                             ;               Return 32, the blank character.
0778                          ;*Macro unroll: mCOLON	2,'BL',BLANK
0778                          ;*Macro unroll:  mCODE 2, "BL", BLANK
0778                          ALIGN   2   
0778                BLANK:       
0778                VVCODE:   .SET   $   
0778                VVLEN:    .SET   (2 & 01FH) / CELLL   
1892                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1892                VVNAME:   .SET   $   
1892   78 07 9E 18            DW   vvCODE,vvLINK   
1896                VVLINK:   .SET   $   
1896   02 42 4C               DB   2,"BL"   
0778                          .ORG   vvCODE   
0778   00                     NOP      
0779   CD 36 06               CALL   doLIST   
077C   44 06 20 00 84 06      DW   DoLIT,SPACEE,EXIT   
0782                             ;   >CHAR       ( c -- c )
0782                             ;               Filter non-printing characters.
0782                          ;*Macro unroll: hCOLON  5,'>CHAR',TCHAR
0782                          ;*Macro unroll:  hCODE 5, ">CHAR", TCHAR
0782                          ALIGN   2   
0782                TCHAR:       
0782   00                     NOP      
0783   CD 36 06               CALL   doLIST   
0786   44 06 7F 00 5C 01 5C 10 DW   DoLIT,$7F,ANDD,DUPP   ;mask msb
078E   44 06 7F 00            DW   DoLIT,127   
0792   44 06 20 00 40 02      DW   DoLIT,SPACEE,WITHI   ;check for printable
0798   86 0E A2 07            DW   QBRAN,TCHA1   
079C   60 10 44 06 5F 00      DW   DROP,DoLIT,UNDERSC   ;replace non-printables
07A2                TCHA1:       
07A2   84 06                  DW   EXIT   
07A4                             ;   DIGIT?      ( c base -- u t )
07A4                             ;               Convert a character to its numeric value. A flag indicates success.
07A4                          ;*Macro unroll: hCOLON  6,'DIGIT?',DIGTQ
07A4                          ;*Macro unroll:  hCODE 6, "DIGIT?", DIGTQ
07A4                          ALIGN   2   
07A4                DIGTQ:       
07A4   00                     NOP      
07A5   CD 36 06               CALL   doLIST   
07A8   40 10 44 06 30 00 B4 01 DW   TOR,DOLIT,$30,SUBB   ; $30 = "0"
07B0   44 06 09 00 6C 10 00 02 DW   DOLIT,9,OVER,LESS   
07B8   86 0E CC 07            DW   QBRAN,DGTQ1   
07BC   44 06 07 00 B4 01      DW   DOLIT,7,SUBB   
07C2   5C 10 44 06 0A 00 00 02 66 01 DW   DUPP,DOLIT,10,LESS,ORR   
07CC                DGTQ1:       
07CC   5C 10 4E 10 E4 01 84 06 DW   DUPP,RFROM,ULESS,EXIT   
07D4                             ;   NUMBER?     ( a -- n T | a F )
07D4                             ;               Convert a number string to integer. Push a flag on tos.
07D4                          ;*Macro unroll: hCOLON  7,'NUMBER?',NUMBQ
07D4                          ;*Macro unroll:  hCODE 7, "NUMBER?", NUMBQ
07D4                          ALIGN   2   
07D4                NUMBQ:       
07D4   00                     NOP      
07D5   CD 36 06               CALL   doLIST   
07D8   1C 11 AC 0E 40 10 44 06 00 00 6C 10 22 0F DW   BASE,AT,TOR,DOLIT,0,OVER,COUNT   
07E6   6C 10 BC 0E 44 06 24 00 CE 01 DW   OVER,CAT,DOLIT,$24,EQUAL   ; $24 = '$"
07F0   86 0E 06 08            DW   QBRAN,NUMQ1   
07F4   5C 07 64 10 44 06 01 00 7A 01 DW   HEX,SWAP,DOLIT,1,PLUS   
07FE   64 10 44 06 01 00 B4 01 DW   SWAP,DOLIT,1,SUBB   
0806                NUMQ1:       
0806   6C 10 BC 0E 44 06 2D 00 CE 01 40 10 DW   OVER,CAT,DOLIT,$2D,EQUAL,TOR   ;$2D = "-"
0812   64 10 C4 0E B4 01 64 10 C4 0E 7A 01 74 10 DW   SWAP,RAT,SUBB,SWAP,RAT,PLUS,QDUP   
0820   86 0E 72 08            DW   QBRAN,NUMQ6   
0824   44 06 01 00 B4 01 40 10 DW   DOLIT,1,SUBB,TOR   
082C                NUMQ2:       
082C   5C 10 40 10 BC 0E 1C 11 AC 0E A4 07 DW   DUPP,TOR,CAT,BASE,AT,DIGTQ   
0838   86 0E 64 08            DW   QBRAN,NUMQ4   
083C   64 10 1C 11 AC 0E 34 03 7A 01 4E 10 DW   SWAP,BASE,AT,STAR,PLUS,RFROM   
0848   44 06 01 00 7A 01      DW   DOLIT,1,PLUS   
084E   90 06 2C 08            DW   DONXT,NUMQ2   
0852   C4 0E 64 10 60 10      DW   RAT,SWAP,DROP   
0858   86 0E 5E 08            DW   QBRAN,NUMQ3   
085C   90 01                  DW   NEGAT   
085E                NUMQ3:       
085E   64 10                  DW   SWAP   
0860   92 0E 70 08            DW   BRAN,NUMQ5   
0864                NUMQ4:       
0864   4E 10 4E 10 90 10 90 10 44 06 00 00 DW   RFROM,RFROM,DDROP,DDROP,DOLIT,0   
0870                NUMQ5:       
0870   5C 10                  DW   DUPP   
0872                NUMQ6:       
0872   4E 10 90 10            DW   RFROM,DDROP   
0876   4E 10 1C 11 A2 0E 84 06 DW   RFROM,BASE,STORE,EXIT   
087E                             ;   parse       ( b u c -- b u delta ; <string> )
087E                             ;               Scan string delimited by c. Return found string and its offset.
087E                          ;*Macro unroll: hCOLON  5,'parse',PARS
087E                          ;*Macro unroll:  hCODE 5, "parse", PARS
087E                          ALIGN   2   
087E                PARS:        
087E   00                     NOP      
087F   CD 36 06               CALL   doLIST   
0882   24 11 A2 0E 6C 10 40 10 5C 10 DW   TEMP,STORE,OVER,TOR,DUPP   
088C   86 0E 1A 09            DW   QBRAN,PARS8   
0890   44 06 01 00 B4 01 24 11 AC 0E 78 07 CE 01 DW   DOLIT,1,SUBB,TEMP,AT,BLANK,EQUAL   
089E   86 0E CC 08            DW   QBRAN,PARS3   
08A2   40 10                  DW   TOR   
08A4                PARS1:       
08A4   78 07 6C 10 BC 0E      DW   BLANK,OVER,CAT   ;skip leading blanks ONLY
08AA   B4 01 54 01 84 01      DW   SUBB,ZLESS,INVER   
08B0   86 0E CA 08            DW   QBRAN,PARS2   
08B4   44 06 01 00 7A 01      DW   DOLIT,1,PLUS   
08BA   90 06 A4 08            DW   DONXT,PARS1   
08BE   4E 10 60 10 44 06 00 00 5C 10 84 06 DW   RFROM,DROP,DOLIT,0,DUPP,EXIT   
08CA                PARS2:       
08CA   4E 10                  DW   RFROM   
08CC                PARS3:       
08CC   6C 10 64 10            DW   OVER,SWAP   
08D0   40 10                  DW   TOR   
08D2                PARS4:       
08D2   24 11 AC 0E 6C 10 BC 0E B4 01 DW   TEMP,AT,OVER,CAT,SUBB   ;scan for delimiter
08DC   24 11 AC 0E 78 07 CE 01 DW   TEMP,AT,BLANK,EQUAL   
08E4   86 0E EA 08            DW   QBRAN,PARS5   
08E8   54 01                  DW   ZLESS   
08EA                PARS5:       
08EA   86 0E 00 09            DW   QBRAN,PARS6   
08EE   44 06 01 00 7A 01      DW   DOLIT,1,PLUS   
08F4   90 06 D2 08            DW   DONXT,PARS4   
08F8   5C 10 40 10            DW   DUPP,TOR   
08FC   92 0E 0E 09            DW   BRAN,PARS7   
0900                PARS6:       
0900   4E 10 60 10 5C 10      DW   RFROM,DROP,DUPP   
0906   44 06 01 00 7A 01 40 10 DW   DOLIT,1,PLUS,TOR   
090E                PARS7:       
090E   6C 10 B4 01            DW   OVER,SUBB   
0912   4E 10 4E 10 B4 01 84 06 DW   RFROM,RFROM,SUBB,EXIT   
091A                PARS8:       
091A   6C 10 4E 10 B4 01 84 06 DW   OVER,RFROM,SUBB,EXIT   
0922                             ;   PARSE       ( c -- b u ; <string> )
0922                             ;               Scan input stream and return counted string delimited by c.
0922                          ;*Macro unroll: mCOLON  5,'PARSE',PARSE
0922                          ;*Macro unroll:  mCODE 5, "PARSE", PARSE
0922                          ALIGN   2   
0922                PARSE:       
0922                VVCODE:   .SET   $   
0922                VVLEN:    .SET   (5 & 01FH) / CELLL   
1888                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1888                VVNAME:   .SET   $   
1888   22 09 96 18            DW   vvCODE,vvLINK   
188C                VVLINK:   .SET   $   
188C   05 50 41 52 53 45      DB   5,"PARSE"   
0922                          .ORG   vvCODE   
0922   00                     NOP      
0923   CD 36 06               CALL   doLIST   
0926   40 10 4C 0F 34 11 AC 0E 7A 01 DW   TOR,TIB,INN,AT,PLUS   ;current input buffer pointer
0930   3C 11 AC 0E 34 11 AC 0E B4 01 DW   NTIB,AT,INN,AT,SUBB   ;remaining count
093A   4E 10 7E 08 34 11 F0 0E 84 06 DW   RFROM,PARS,INN,PSTOR,EXIT   
0944                             ;   (           ( -- )
0944                             ;               Ignore following string up to next ) . A comment.
0944                          ;*Macro unroll: mCOLON  IMEDD+1,'(',PAREN
0944                          ;*Macro unroll:  mCODE IMEDD+1, "(", PAREN
0944                          ALIGN   2   
0944                PAREN:       
0944                VVCODE:   .SET   $   
0944                VVLEN:    .SET   (IMEDD+1 & 01FH) / CELLL   
1842                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1842                VVNAME:   .SET   $   
1842   44 09 8C 18            DW   vvCODE,vvLINK   
1846                VVLINK:   .SET   $   
1846   41 28                  DB   IMEDD+1,"("   
0944                          .ORG   vvCODE   
0944   00                     NOP      
0945   CD 36 06               CALL   doLIST   
0948   44 06 29 00 22 09 90 10 84 06 DW   DOLIT,$29,PARSE,DDROP,EXIT   ; $29 = ")"
0952                             ;   \           ( -- )
0952                             ;               Ignore following text till the end of line.
0952                          ;*Macro unroll: mCOLON  IMEDD+1, $5C, BKSLA
0952                          ;*Macro unroll:  mCODE IMEDD+1, $5C, BKSLA
0952                          ALIGN   2   
0952                BKSLA:       
0952                VVCODE:   .SET   $   
0952                VVLEN:    .SET   (IMEDD+1 & 01FH) / CELLL   
17FC                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
17FC                VVNAME:   .SET   $   
17FC   52 09 46 18            DW   vvCODE,vvLINK   
1800                VVLINK:   .SET   $   
1800   41 5C                  DB   IMEDD+1,$5C   
0952                          .ORG   vvCODE   
0952   00                     NOP      
0953   CD 36 06               CALL   doLIST   
0956   3C 11 AC 0E 34 11 A2 0E 84 06 DW   NTIB,AT,INN,STORE,EXIT   
0960                             ;   CHAR        ( -- c )
0960                             ;               Parse next word and return its first character.
0960                          ;*Macro unroll: mCOLON  4,'CHAR',CHAR
0960                          ;*Macro unroll:  mCODE 4, "CHAR", CHAR
0960                          ALIGN   2   
0960                CHAR:        
0960                VVCODE:   .SET   $   
0960                VVLEN:    .SET   (4 & 01FH) / CELLL   
17F2                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
17F2                VVNAME:   .SET   $   
17F2   60 09 00 18            DW   vvCODE,vvLINK   
17F6                VVLINK:   .SET   $   
17F6   04 43 48 41 52         DB   4,"CHAR"   
0960                          .ORG   vvCODE   
0960   00                     NOP      
0961   CD 36 06               CALL   doLIST   
0964   78 07 22 09 60 10 BC 0E 84 06 DW   BLANK,PARSE,DROP,CAT,EXIT   
096E                             ;   TOKEN       ( -- a ; <string> )
096E                             ;               Parse a word from input stream and copy it to name dictionary.
096E                          ;*Macro unroll: hCOLON  5,'TOKEN',TOKEN
096E                          ;*Macro unroll:  hCODE 5, "TOKEN", TOKEN
096E                          ALIGN   2   
096E                TOKEN:       
096E   00                     NOP      
096F   CD 36 06               CALL   doLIST   
0972   78 07 22 09 44 06 1F 00 2C 02 DW   BLANK,PARSE,DOLIT,31,MIN   
097C   84 11 AC 0E 6C 10 B4 01 82 03 DW   NP,AT,OVER,SUBB,CELLM   
0986   E0 0F 84 06            DW   PACKS,EXIT   
098A                             ;   WORD        ( c -- a ; <string> )
098A                             ;               Parse a word from input stream and copy it to code dictionary.
098A                          ;*Macro unroll: mCOLON  4,'WORD',WORDD
098A                          ;*Macro unroll:  mCODE 4, "WORD", WORDD
098A                          ALIGN   2   
098A                WORDD:       
098A                VVCODE:   .SET   $   
098A                VVLEN:    .SET   (4 & 01FH) / CELLL   
17E8                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
17E8                VVNAME:   .SET   $   
17E8   8A 09 F6 17            DW   vvCODE,vvLINK   
17EC                VVLINK:   .SET   $   
17EC   04 57 4F 52 44         DB   4,"WORD"   
098A                          .ORG   vvCODE   
098A   00                     NOP      
098B   CD 36 06               CALL   doLIST   
098E   22 09 34 0F E0 0F 84 06 DW   PARSE,HERE,PACKS,EXIT   
0996                             ;   NAME>       ( na -- ca )
0996                             ;               Return a code address given a name address.
0996                          ;*Macro unroll: hCOLON  5,'NAME>',NAMET
0996                          ;*Macro unroll:  hCODE 5, "NAME>", NAMET
0996                          ALIGN   2   
0996                NAMET:       
0996   00                     NOP      
0997   CD 36 06               CALL   doLIST   
099A   82 03 82 03 AC 0E 84 06 DW   CELLM,CELLM,AT,EXIT   
09A2                             ;   SAME?       ( a a u -- a a f \ -0+ )
09A2                             ;               Compare u cells in two strings. Return 0 if identical.
09A2                          ;*Macro unroll: hCOLON  5,'SAME?',SAMEQ
09A2                          ;*Macro unroll:  hCODE 5, "SAME?", SAMEQ
09A2                          ALIGN   2   
09A2                SAMEQ:       
09A2   00                     NOP      
09A3   CD 36 06               CALL   doLIST   
09A6   40 10                  DW   TOR   
09A8   92 0E CE 09            DW   BRAN,SAME2   
09AC   6C 10 C4 0E 8E 03 7A 01 AC 0E SAME1:   DW   OVER,RAT,CELLS,PLUS,AT   
09B6   6C 10 C4 0E 8E 03 7A 01 AC 0E DW   OVER,RAT,CELLS,PLUS,AT   
09C0   B4 01 74 10            DW   SUBB,QDUP   
09C4   86 0E CE 09            DW   QBRAN,SAME2   
09C8   4E 10 60 10 84 06      DW   RFROM,DROP,EXIT   ;strings not equal
09CE   90 06 AC 09  SAME2:    DW   DONXT,SAME1   
09D2   44 06 00 00 84 06      DW   DOLIT,0,EXIT   ;strings equal
09D8                             ;   find        ( a va -- ca na | a F )
09D8                             ;               Search a vocabulary for a string. Return ca and na if succeeded.
09D8                          ;*Macro unroll: mCOLON  4,'find',FIND
09D8                          ;*Macro unroll:  mCODE 4, "find", FIND
09D8                          ALIGN   2   
09D8                FIND:        
09D8                VVCODE:   .SET   $   
09D8                VVLEN:    .SET   (4 & 01FH) / CELLL   
17DE                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
17DE                VVNAME:   .SET   $   
17DE   D8 09 EC 17            DW   vvCODE,vvLINK   
17E2                VVLINK:   .SET   $   
17E2   04 66 69 6E 64         DB   4,"find"   
09D8                          .ORG   vvCODE   
09D8   00                     NOP      
09D9   CD 36 06               CALL   doLIST   
09DC   64 10 5C 10 BC 0E      DW   SWAP,DUPP,CAT   
09E2   44 06 02 00 0C 03 24 11 A2 0E DW   DOLIT,CELLL,SLASH,TEMP,STORE   
09EC   5C 10 AC 0E 40 10 76 03 64 10 DW   DUPP,AT,TOR,CELLP,SWAP   
09F6   AC 0E 5C 10  FIND1:    DW   AT,DUPP   
09FA   86 0E 26 0A            DW   QBRAN,FIND6   
09FE   5C 10 AC 0E 44 06 1F 00 5C 01 C4 0E 70 01 DW   DUPP,AT,DOLIT,MASKK,ANDD,RAT,XORR   
0A0C   86 0E 1A 0A            DW   QBRAN,FIND2   
0A10   76 03 44 06 FF FF      DW   CELLP,DOLIT,-1   ;true flag
0A16   92 0E 22 0A            DW   BRAN,FIND3   
0A1A   76 03 24 11 AC 0E A2 09 FIND2:   DW   CELLP,TEMP,AT,SAMEQ   
0A22   92 0E 32 0A  FIND3:    DW   BRAN,FIND4   
0A26   4E 10 60 10  FIND6:    DW   RFROM,DROP   
0A2A   64 10 82 03 64 10 84 06 DW   SWAP,CELLM,SWAP,EXIT   
0A32   86 0E 3E 0A  FIND4:    DW   QBRAN,FIND5   
0A36   82 03 82 03            DW   CELLM,CELLM   
0A3A   92 0E F6 09            DW   BRAN,FIND1   
0A3E   4E 10 60 10 64 10 60 10 FIND5:   DW   RFROM,DROP,SWAP,DROP   
0A46   82 03                  DW   CELLM   
0A48   5C 10 96 09 64 10 84 06 DW   DUPP,NAMET,SWAP,EXIT   
0A50                             ;   NAME?       ( a -- ca na | a F )
0A50                             ;               Search all context vocabularies for a string.
0A50                          ;*Macro unroll: hCOLON  5,'NAME?',NAMEQ
0A50                          ;*Macro unroll:  hCODE 5, "NAME?", NAMEQ
0A50                          ALIGN   2   
0A50                NAMEQ:       
0A50   00                     NOP      
0A51   CD 36 06               CALL   doLIST   
0A54   6C 11 5C 10 12 0F 70 01 DW   CNTXT,DUPP,DAT,XORR   ;?context=also
0A5C   86 0E 62 0A            DW   QBRAN,NAMQ1   
0A60   82 03                  DW   CELLM   ;no, start with context
0A62   40 10        NAMQ1:    DW   TOR   
0A64   4E 10 76 03 5C 10 40 10 NAMQ2:   DW   RFROM,CELLP,DUPP,TOR   ;next in search order
0A6C   AC 0E 74 10            DW   AT,QDUP   
0A70   86 0E 82 0A            DW   QBRAN,NAMQ3   
0A74   D8 09 74 10            DW   FIND,QDUP   ;search vocabulary
0A78   86 0E 64 0A            DW   QBRAN,NAMQ2   
0A7C   4E 10 60 10 84 06      DW   RFROM,DROP,EXIT   ;found name
0A82   4E 10 60 10  NAMQ3:    DW   RFROM,DROP   ;name not found
0A86   44 06 00 00 84 06      DW   DOLIT,0,EXIT   ;false flag
0A8C                             ;   CATCH       ( ca -- 0 | err# )
0A8C                             ;               Execute word at ca and set up an error frame for it.
0A8C                          ;*Macro unroll: mCOLON  5,'CATCH',CATCH
0A8C                          ;*Macro unroll:  mCODE 5, "CATCH", CATCH
0A8C                          ALIGN   2   
0A8C                CATCH:       
0A8C                VVCODE:   .SET   $   
0A8C                VVLEN:    .SET   (5 & 01FH) / CELLL   
17D4                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
17D4                VVNAME:   .SET   $   
17D4   8C 0A E2 17            DW   vvCODE,vvLINK   
17D8                VVLINK:   .SET   $   
17D8   05 43 41 54 43 48      DB   5,"CATCH"   
0A8C                          .ORG   vvCODE   
0A8C   00                     NOP      
0A8D   CD 36 06               CALL   doLIST   
0A90   DE 0E 40 10 64 11 AC 0E 40 10 DW   SPAT,TOR,HANDL,AT,TOR   ;save error frame
0A9A   CE 0E 64 11 A2 0E 82 0E DW   RPAT,HANDL,STORE,EXECU   ;execute
0AA2   4E 10 64 11 A2 0E      DW   RFROM,HANDL,STORE   ;reSTORE error frame
0AA8   4E 10 60 10 44 06 00 00 84 06 DW   RFROM,DROP,DOLIT,0,EXIT   ;no error
0AB2                             ;   THROW       ( err# -- err# )
0AB2                             ;               Reset system to current local error frame an update error flag.
0AB2                          ;*Macro unroll: mCOLON  5,'THROW',THROW
0AB2                          ;*Macro unroll:  mCODE 5, "THROW", THROW
0AB2                          ALIGN   2   
0AB2                THROW:       
0AB2                VVCODE:   .SET   $   
0AB2                VVLEN:    .SET   (5 & 01FH) / CELLL   
17CA                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
17CA                VVNAME:   .SET   $   
17CA   B2 0A D8 17            DW   vvCODE,vvLINK   
17CE                VVLINK:   .SET   $   
17CE   05 54 48 52 4F 57      DB   5,"THROW"   
0AB2                          .ORG   vvCODE   
0AB2   00                     NOP      
0AB3   CD 36 06               CALL   doLIST   
0AB6   64 11 AC 0E D6 0E      DW   HANDL,AT,RPSTO   ;reSTORE return stack
0ABC   4E 10 64 11 A2 0E      DW   RFROM,HANDL,STORE   ;reSTORE handler frame
0AC2   4E 10 64 10 40 10 E8 0E DW   RFROM,SWAP,TOR,SPSTO   ;reSTORE data stack
0ACA   60 10 4E 10 84 06      DW   DROP,RFROM,EXIT   
0AD0                             ;   NULL$       ( -- a )
0AD0                             ;               Return address of a null string with zero count.
0AD0                          ;*Macro unroll: hCOLON  5,'NULL$',NULLS
0AD0                          ;*Macro unroll:  hCODE 5, "NULL$", NULLS
0AD0                          ALIGN   2   
0AD0                NULLS:       
0AD0   00                     NOP      
0AD1   CD 36 06               CALL   doLIST   
0AD4   4C 06                  DW   DOVAR   ;emulate CREATE
0AD6   00 00                  DW   0   
0AD8   63 6F 79 6F 74 65      DB   99,111,121,111,116,101   
0ADE                          ALIGN   2   
0ADE                             ;   ABORT       ( -- )
0ADE                             ;               Reset data stack and jump to QUIT.
0ADE                          ;*Macro unroll: mCOLON  5,'ABORT',ABORT
0ADE                          ;*Macro unroll:  mCODE 5, "ABORT", ABORT
0ADE                          ALIGN   2   
0ADE                ABORT:       
0ADE                VVCODE:   .SET   $   
0ADE                VVLEN:    .SET   (5 & 01FH) / CELLL   
17C0                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
17C0                VVNAME:   .SET   $   
17C0   DE 0A CE 17            DW   vvCODE,vvLINK   
17C4                VVLINK:   .SET   $   
17C4   05 41 42 4F 52 54      DB   5,"ABORT"   
0ADE                          .ORG   vvCODE   
0ADE   00                     NOP      
0ADF   CD 36 06               CALL   doLIST   
0AE2   D0 0A B2 0A            DW   NULLS,THROW   
0AE6                             ;   abort"      ( f -- )
0AE6                             ;               Run time routine of ABORT" . Abort with a message.
0AE6                          ;*Macro unroll: hCOLON  COMPO+6,'abort|',ABORQ
0AE6                          ;*Macro unroll:  hCODE COMPO+6, "abort|", ABORQ
0AE6                          ALIGN   2   
0AE6                ABORQ:       
0AE6   00                     NOP      
0AE7   CD 36 06               CALL   doLIST   
0AEA   86 0E F2 0A            DW   QBRAN,ABOR1   ;text flag
0AEE   6C 06 B2 0A            DW   DOSTR,THROW   ;pass error string
0AF2                ABOR1:       
0AF2   6C 06 60 10 84 06      DW   DOSTR,DROP,EXIT   ;drop error
0AF8                             ;   $INTERPRET  ( a -- )
0AF8                             ;               Interpret a word. If failed, try to convert it to an integer.
0AF8                          ;*Macro unroll: hCOLON  10,'$INTERPRET',INTER
0AF8                          ;*Macro unroll:  hCODE 10, "$INTERPRET", INTER
0AF8                          ALIGN   2   
0AF8                INTER:       
0AF8   00                     NOP      
0AF9   CD 36 06               CALL   doLIST   
0AFC   50 0A 74 10            DW   NAMEQ,QDUP   ;?defined
0B00   86 0E 20 0B            DW   QBRAN,INTE1   
0B04   AC 0E 44 06 20 00 5C 01 DW   AT,DOLIT,COMPO,ANDD   ;?compile only lexicon bits
0B0C                          ;*Macro unroll:  mDSTR   ABORQ,' compile only'
0B0C   E6 0A                  DW   ABORQ   
0B0E                VVLEN:    .SET   $   
0B0E   00 20 63 6F 6D 70 69 6C 65 20 6F 6E 6C 79 DB   0," compile only"   
0B1C                VVCODE:   .SET   $   
0B0E                          .ORG   vvLEN   
0B0E   0D                     DB   vvCODE - vvLEN - 1   
0B1C                          .ORG   vvCODE   
0B1C   82 0E 84 06            DW   EXECU,EXIT   ;execute defined word
0B20                INTE1:       
0B20   54 11 58 0F            DW   TNUMB,ATEXE   ;convert a number
0B24   86 0E 2A 0B            DW   QBRAN,INTE2   
0B28   84 06                  DW   EXIT   
0B2A                INTE2:       
0B2A   B2 0A                  DW   THROW   ;error
0B2C                             ;   [           ( -- )
0B2C                             ;               Start the text interpreter.
0B2C                          ;*Macro unroll: mCOLON  IMEDD+1,'[',LBRAC
0B2C                          ;*Macro unroll:  mCODE IMEDD+1, "[", LBRAC
0B2C                          ALIGN   2   
0B2C                LBRAC:       
0B2C                VVCODE:   .SET   $   
0B2C                VVLEN:    .SET   (IMEDD+1 & 01FH) / CELLL   
177A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
177A                VVNAME:   .SET   $   
177A   2C 0B C4 17            DW   vvCODE,vvLINK   
177E                VVLINK:   .SET   $   
177E   41 5B                  DB   IMEDD+1,"["   
0B2C                          .ORG   vvCODE   
0B2C   00                     NOP      
0B2D   CD 36 06               CALL   doLIST   
0B30   44 06 F8 0A 4C 11 A2 0E 84 06 DW   DOLIT,INTER,TEVAL,STORE,EXIT   
0B3A                             ;   .OK         ( -- )
0B3A                             ;               Display "ok" only while interpreting.
0B3A                          ;*Macro unroll: mCOLON  3,'.OK',DOTOK
0B3A                          ;*Macro unroll:  mCODE 3, ".OK", DOTOK
0B3A                          ALIGN   2   
0B3A                DOTOK:       
0B3A                VVCODE:   .SET   $   
0B3A                VVLEN:    .SET   (3 & 01FH) / CELLL   
1772                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1772                VVNAME:   .SET   $   
1772   3A 0B 7E 17            DW   vvCODE,vvLINK   
1776                VVLINK:   .SET   $   
1776   03 2E 4F 4B            DB   3,".OK"   
0B3A                          .ORG   vvCODE   
0B3A   00                     NOP      
0B3B   CD 36 06               CALL   doLIST   
0B3E   44 06 F8 0A 4C 11 AC 0E CE 01 DW   DOLIT,INTER,TEVAL,AT,EQUAL   
0B48   86 0E 52 0B            DW   QBRAN,DOTO1   
0B4C                          ;*Macro unroll:  mDSTR      DOTQP,' ok'
0B4C   90 0C                  DW   DOTQP   
0B4E                VVLEN:    .SET   $   
0B4E   00 20 6F 6B            DB   0," ok"   
0B52                VVCODE:   .SET   $   
0B4E                          .ORG   vvLEN   
0B4E   03                     DB   vvCODE - vvLEN - 1   
0B52                          .ORG   vvCODE   
0B52   76 0C 84 06  DOTO1:    DW   CR,EXIT   
0B56                             ;   ?STACK      ( -- )
0B56                             ;               Abort if the data stack underflows.
0B56                          ;*Macro unroll: hCOLON  6,'?STACK',QSTAC
0B56                          ;*Macro unroll:  hCODE 6, "?STACK", QSTAC
0B56                          ALIGN   2   
0B56                QSTAC:       
0B56   00                     NOP      
0B57   CD 36 06               CALL   doLIST   
0B5A   C6 10 54 01            DW   DEPTH,ZLESS   ;check only for underflow
0B5E                          ;*Macro unroll:  mDSTR      ABORQ,' underflow'
0B5E   E6 0A                  DW   ABORQ   
0B60                VVLEN:    .SET   $   
0B60   00 20 75 6E 64 65 72 66 6C 6F 77 DB   0," underflow"   
0B6B                VVCODE:   .SET   $   
0B60                          .ORG   vvLEN   
0B60   0A                     DB   vvCODE - vvLEN - 1   
0B6B                          .ORG   vvCODE   
0B6B   84 06                  DW   EXIT   
0B6D                             ;   EVAL        ( -- )
0B6D                             ;               Interpret the input stream.
0B6D                          ;*Macro unroll: mCOLON  4,'EVAL',EVAL
0B6D                          ;*Macro unroll:  mCODE 4, "EVAL", EVAL
0B6D                          ALIGN   2   
0B6E                EVAL:        
0B6E                VVCODE:   .SET   $   
0B6E                VVLEN:    .SET   (4 & 01FH) / CELLL   
1768                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1768                VVNAME:   .SET   $   
1768   6E 0B 76 17            DW   vvCODE,vvLINK   
176C                VVLINK:   .SET   $   
176C   04 45 56 41 4C         DB   4,"EVAL"   
0B6E                          .ORG   vvCODE   
0B6E   00                     NOP      
0B6F   CD 36 06               CALL   doLIST   
0B72                EVAL1:       
0B72   6E 09 5C 10 BC 0E      DW   TOKEN,DUPP,CAT   ;?input stream empty
0B78   86 0E 86 0B            DW   QBRAN,EVAL2   
0B7C   4C 11 58 0F 56 0B      DW   TEVAL,ATEXE,QSTAC   ;evaluate input, check stack
0B82   92 0E 72 0B            DW   BRAN,EVAL1   
0B86                EVAL2:       
0B86   60 10 14 11 58 0F 84 06 DW   DROP,TPROM,ATEXE,EXIT   ;prompt
0B8E                             ;   PC!         ( uc p --  )
0B8E                             ;               output uc to IO port p
0B8E                          ;*Macro unroll: mCODE   3,'PC!',PCSTO
0B8E                          ALIGN   2   
0B8E                PCSTO:       
0B8E                VVCODE:   .SET   $   
0B8E                VVLEN:    .SET   (3 & 01FH) / CELLL   
1760                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1760                VVNAME:   .SET   $   
1760   8E 0B 6C 17            DW   vvCODE,vvLINK   
1764                VVLINK:   .SET   $   
1764   03 50 43 21            DB   3,"PC!"   
0B8E                          .ORG   vvCODE   
0B8E   D9                     EXX      ; 4t
0B8F   D1                     POP   DE   ;10t
0B90   7B                     LD   A,E   ; 4t
0B91   ED 79                  OUT   (C),A   ;12t
0B93   D9                     EXX      ; 4t
0B94                          ;*Macro unroll:  mNEXT
0B94   EB                     EX   DE,HL   
0B95   FD E9                  JP   (IY)   
0B97                             ;   PC@         ( p -- uc )
0B97                             ;               output uc to IO port p
0B97                          ;*Macro unroll: mCODE   3,'PC@',PCAT
0B97                          ALIGN   2   
0B98                PCAT:        
0B98                VVCODE:   .SET   $   
0B98                VVLEN:    .SET   (3 & 01FH) / CELLL   
1758                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1758                VVNAME:   .SET   $   
1758   98 0B 64 17            DW   vvCODE,vvLINK   
175C                VVLINK:   .SET   $   
175C   03 50 43 40            DB   3,"PC@"   
0B98                          .ORG   vvCODE   
0B98   D9                     EXX      ; 4t
0B99   ED 78                  IN   A,(C)   ;12t
0B9B   5F                     LD   E,A   ; 4t
0B9C   16 00                  LD   D,0   ; 7t
0B9E   D5                     PUSH   DE   ;11t
0B9F   D9                     EXX      ; 4t
0BA0                          ;*Macro unroll:  mNEXT
0BA0   EB                     EX   DE,HL   
0BA1   FD E9                  JP   (IY)   
0BA3                             ;   !IO         ( -- )
0BA3                             ;               Initialize the serial I/O devices.
0BA3                          ;*Macro unroll: mCODE   3,'!IO', STOIO ;
0BA3                          ALIGN   2   ; 
0BA4                STOIO:       
0BA4                VVCODE:   .SET   $   
0BA4                VVLEN:    .SET   (3 & 01FH) / CELLL   
1750                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1750                VVNAME:   .SET   $   
1750   A4 0B 5C 17            DW   vvCODE,vvLINK   
1754                VVLINK:   .SET   $   
1754   03 21 49 4F            DB   3,"!IO"   
0BA4                          .ORG   vvCODE   
0BA4   CD D1 00               CALL   INIT_IO   
0BA7                          ;*Macro unroll:  mNEXT
0BA7   EB                     EX   DE,HL   
0BA8   FD E9                  JP   (IY)   
0BAA                             ;   ?RX         ( -- c T | F )
0BAA                             ;               Return input character and true, or a false if no input.
0BAA                          ;*Macro unroll: mCODE	3, '?RX', QRX
0BAA                          ALIGN   2   
0BAA                QRX:         
0BAA                VVCODE:   .SET   $   
0BAA                VVLEN:    .SET   (3 & 01FH) / CELLL   
1748                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1748                VVNAME:   .SET   $   
1748   AA 0B 54 17            DW   vvCODE,vvLINK   
174C                VVLINK:   .SET   $   
174C   03 3F 52 58            DB   3,"?RX"   
0BAA                          .ORG   vvCODE   
0BAA   C5                     PUSH   BC   
0BAB   CD 14 01               CALL   QRXA   
0BAE   20 05                  JR   nz,QRX1   
0BB0   01 00 00               LD   BC,FALSEE   
0BB3   18 0A                  JR   QRX2   
0BB5                QRX1:        
0BB5   CD E5 00               CALL   RXA   
0BB8   4F                     LD   C,A   
0BB9   06 00                  LD   B,0   
0BBB   C5                     PUSH   BC   
0BBC   01 FF FF               LD   BC,TRUEE   
0BBF                QRX2:        
0BBF                          ;*Macro unroll:  mNEXT
0BBF   EB                     EX   DE,HL   
0BC0   FD E9                  JP   (IY)   
0BC2                             ;   TX!         ( c -- )
0BC2                             ;               Send character c to the output device.
0BC2                          ;*Macro unroll: mCODE	3,'TX!',TXSTO
0BC2                          ALIGN   2   
0BC2                TXSTO:       
0BC2                VVCODE:   .SET   $   
0BC2                VVLEN:    .SET   (3 & 01FH) / CELLL   
1740                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1740                VVNAME:   .SET   $   
1740   C2 0B 4C 17            DW   vvCODE,vvLINK   
1744                VVLINK:   .SET   $   
1744   03 54 58 21            DB   3,"TX!"   
0BC2                          .ORG   vvCODE   
0BC2   79                     LD   A,C   
0BC3   CD 09 01               CALL   TXA   
0BC6   C1                     POP   BC   
0BC7                          ;*Macro unroll:  mNEXT
0BC7   EB                     EX   DE,HL   
0BC8   FD E9                  JP   (IY)   
0BCA                             ;   ?KEY        ( -- c T | F )
0BCA                             ;               Return input character and true, or a false if no input.
0BCA                          ;*Macro unroll: mCOLON  4,'?KEY',QKEY
0BCA                          ;*Macro unroll:  mCODE 4, "?KEY", QKEY
0BCA                          ALIGN   2   
0BCA                QKEY:        
0BCA                VVCODE:   .SET   $   
0BCA                VVLEN:    .SET   (4 & 01FH) / CELLL   
1736                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1736                VVNAME:   .SET   $   
1736   CA 0B 44 17            DW   vvCODE,vvLINK   
173A                VVLINK:   .SET   $   
173A   04 3F 4B 45 59         DB   4,"?KEY"   
0BCA                          .ORG   vvCODE   
0BCA   00                     NOP      
0BCB   CD 36 06               CALL   doLIST   
0BCE   EC 10 AC 0E 82 0E 84 06 DW   TQKEY,AT,EXECU,EXIT   
0BD6                             ;   KEY         ( -- c )
0BD6                             ;               Wait for and return an input character.
0BD6                          ;*Macro unroll: mCOLON  3,'KEY',KEY
0BD6                          ;*Macro unroll:  mCODE 3, "KEY", KEY
0BD6                          ALIGN   2   
0BD6                KEY:         
0BD6                VVCODE:   .SET   $   
0BD6                VVLEN:    .SET   (3 & 01FH) / CELLL   
172E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
172E                VVNAME:   .SET   $   
172E   D6 0B 3A 17            DW   vvCODE,vvLINK   
1732                VVLINK:   .SET   $   
1732   03 4B 45 59            DB   3,"KEY"   
0BD6                          .ORG   vvCODE   
0BD6   00                     NOP      
0BD7   CD 36 06               CALL   doLIST   
0BDA                KEY1:        
0BDA   CA 0B                  DW   QKEY   
0BDC   5C 10 86 0E E2 0B      DW   DUPP,QBRAN,KEY2   
0BE2                             ; DW DOLIT, $22, EMIT
0BE2                KEY2:        
0BE2   86 0E DA 0B            DW   QBRAN,KEY1   
0BE6   84 06                  DW   EXIT   
0BE8                             ;   EMIT        ( c -- )
0BE8                             ;               Send a character to the output device.
0BE8                          ;*Macro unroll: mCOLON  4, 'EMIT', EMIT
0BE8                          ;*Macro unroll:  mCODE 4, "EMIT", EMIT
0BE8                          ALIGN   2   
0BE8                EMIT:        
0BE8                VVCODE:   .SET   $   
0BE8                VVLEN:    .SET   (4 & 01FH) / CELLL   
1724                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1724                VVNAME:   .SET   $   
1724   E8 0B 32 17            DW   vvCODE,vvLINK   
1728                VVLINK:   .SET   $   
1728   04 45 4D 49 54         DB   4,"EMIT"   
0BE8                          .ORG   vvCODE   
0BE8   00                     NOP      
0BE9   CD 36 06               CALL   doLIST   
0BEC   F4 10 AC 0E 82 0E 84 06 DW   TEMIT,AT,EXECU,EXIT   
0BF4                             ;   NUF?        ( -- t )
0BF4                             ;               Return false if no input, else pause and if CR return true.
0BF4                          ;*Macro unroll: mCOLON  4,'NUF?',NUFQ
0BF4                          ;*Macro unroll:  mCODE 4, "NUF?", NUFQ
0BF4                          ALIGN   2   
0BF4                NUFQ:        
0BF4                VVCODE:   .SET   $   
0BF4                VVLEN:    .SET   (4 & 01FH) / CELLL   
171A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
171A                VVNAME:   .SET   $   
171A   F4 0B 28 17            DW   vvCODE,vvLINK   
171E                VVLINK:   .SET   $   
171E   04 4E 55 46 3F         DB   4,"NUF?"   
0BF4                          .ORG   vvCODE   
0BF4   00                     NOP      
0BF5   CD 36 06               CALL   doLIST   
0BF8   CA 0B 5C 10            DW   QKEY,DUPP   
0BFC   86 0E 0A 0C            DW   QBRAN,NUFQ1   
0C00   90 10 D6 0B 44 06 0D 00 CE 01 DW   DDROP,KEY,DOLIT,CRR,EQUAL   
0C0A                NUFQ1:       
0C0A   84 06                  DW   EXIT   
0C0C                             ;   PACE        ( -- )
0C0C                             ;               Send a pace character for the file downloading process.
0C0C                          ;*Macro unroll: hCOLON  4,'PACE',PACE
0C0C                          ;*Macro unroll:  hCODE 4, "PACE", PACE
0C0C                          ALIGN   2   
0C0C                PACE:        
0C0C   00                     NOP      
0C0D   CD 36 06               CALL   doLIST   
0C10   44 06 0B 00 E8 0B 84 06 DW   DOLIT,11,EMIT,EXIT   
0C18                             ;   SPACE       ( -- )
0C18                             ;               Send the blank character to the output device.
0C18                          ;*Macro unroll: mCOLON  5,'SPACE',SPACE
0C18                          ;*Macro unroll:  mCODE 5, "SPACE", SPACE
0C18                          ALIGN   2   
0C18                SPACE:       
0C18                VVCODE:   .SET   $   
0C18                VVLEN:    .SET   (5 & 01FH) / CELLL   
1710                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1710                VVNAME:   .SET   $   
1710   18 0C 1E 17            DW   vvCODE,vvLINK   
1714                VVLINK:   .SET   $   
1714   05 53 50 41 43 45      DB   5,"SPACE"   
0C18                          .ORG   vvCODE   
0C18   00                     NOP      
0C19   CD 36 06               CALL   doLIST   
0C1C   78 07 E8 0B 84 06      DW   BLANK,EMIT,EXIT   
0C22                             ;   SPACES      ( +n -- )
0C22                             ;               Send n spaces to the output device.
0C22                          ;*Macro unroll: mCOLON  6,'SPACES',SPACS
0C22                          ;*Macro unroll:  mCODE 6, "SPACES", SPACS
0C22                          ALIGN   2   
0C22                SPACS:       
0C22                VVCODE:   .SET   $   
0C22                VVLEN:    .SET   (6 & 01FH) / CELLL   
1704                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1704                VVNAME:   .SET   $   
1704   22 0C 14 17            DW   vvCODE,vvLINK   
1708                VVLINK:   .SET   $   
1708   06 53 50 41 43 45 53   DB   6,"SPACES"   
0C22                          .ORG   vvCODE   
0C22   00                     NOP      
0C23   CD 36 06               CALL   doLIST   
0C26   44 06 00 00 1A 02 40 10 DW   DOLIT,0,MAX,TOR   
0C2E   92 0E 34 0C            DW   BRAN,CHAR2   
0C32                CHAR1:       
0C32   18 0C                  DW   SPACE   
0C34                CHAR2:       
0C34   90 06 32 0C            DW   DONXT,CHAR1   
0C38   84 06                  DW   EXIT   
0C3A                             ;   TYPE        ( b u -- )
0C3A                             ;               Output u characters from b.
0C3A                          ;*Macro unroll: mCOLON	4,'TYPE',TYPEE
0C3A                          ;*Macro unroll:  mCODE 4, "TYPE", TYPEE
0C3A                          ALIGN   2   
0C3A                TYPEE:       
0C3A                VVCODE:   .SET   $   
0C3A                VVLEN:    .SET   (4 & 01FH) / CELLL   
16FA                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
16FA                VVNAME:   .SET   $   
16FA   3A 0C 08 17            DW   vvCODE,vvLINK   
16FE                VVLINK:   .SET   $   
16FE   04 54 59 50 45         DB   4,"TYPE"   
0C3A                          .ORG   vvCODE   
0C3A   00                     NOP      
0C3B   CD 36 06               CALL   doLIST   
0C3E   40 10                  DW   TOR   
0C40   92 0E 50 0C            DW   BRAN,TYPE2   
0C44                TYPE1:       
0C44   5C 10 BC 0E E8 0B      DW   DUPP,CAT,EMIT   
0C4A   44 06 01 00 7A 01      DW   DOLIT,1,PLUS   
0C50                TYPE2:       
0C50   90 06 44 0C            DW   DONXT,TYPE1   
0C54   60 10 84 06            DW   DROP,EXIT   
0C58                             ;   TYPEZ    ( cstr -- )
0C58                             ;   Similar to TYPE but prints C null terminated strings
0C58                          ;*Macro unroll: mCOLON	4,'TYPEZ',TYPEZ
0C58                          ;*Macro unroll:  mCODE 4, "TYPEZ", TYPEZ
0C58                          ALIGN   2   
0C58                TYPEZ:       
0C58                VVCODE:   .SET   $   
0C58                VVLEN:    .SET   (4 & 01FH) / CELLL   
16F0                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
16F0                VVNAME:   .SET   $   
16F0   58 0C FE 16            DW   vvCODE,vvLINK   
16F4                VVLINK:   .SET   $   
16F4   04 54 59 50 45 5A      DB   4,"TYPEZ"   
0C58                          .ORG   vvCODE   
0C58   00                     NOP      
0C59   CD 36 06               CALL   doLIST   
0C5C                TYPEZ1:      
0C5C   5C 10 BC 0E            DW   DUPP,CAT   
0C60   5C 10 86 0E 72 0C      DW   DUPP,QBRAN,TYPEZ2   
0C66   E8 0B                  DW   EMIT   
0C68   44 06 01 00 7A 01      DW   DOLIT,1,PLUS   
0C6E   92 0E 5C 0C            DW   BRAN,TYPEZ1   
0C72                TYPEZ2:      
0C72   60 10 84 06            DW   DROP,EXIT   
0C76                             ;   CR          ( -- )
0C76                             ;               Output a carriage return and a line feed.
0C76                          ;*Macro unroll: mCOLON	2,'CR',CR
0C76                          ;*Macro unroll:  mCODE 2, "CR", CR
0C76                          ALIGN   2   
0C76                CR:          
0C76                VVCODE:   .SET   $   
0C76                VVLEN:    .SET   (2 & 01FH) / CELLL   
16E8                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
16E8                VVNAME:   .SET   $   
16E8   76 0C F4 16            DW   vvCODE,vvLINK   
16EC                VVLINK:   .SET   $   
16EC   02 43 52               DB   2,"CR"   
0C76                          .ORG   vvCODE   
0C76   00                     NOP      
0C77   CD 36 06               CALL   doLIST   
0C7A   44 06 0D 00 E8 0B 44 06 0A 00 E8 0B 84 06 DW   DOLIT,CRR,EMIT,DOLIT,LFF,EMIT,EXIT   
0C88                             ;   $"|         ( -- a )
0C88                             ;               Run time routine compiled by $". Return address of a compiled string.
0C88                          ;*Macro unroll: hCOLON  COMPO+3,'$||',STRQP
0C88                          ;*Macro unroll:  hCODE COMPO+3, "$||", STRQP
0C88                          ALIGN   2   
0C88                STRQP:       
0C88   00                     NOP      
0C89   CD 36 06               CALL   doLIST   
0C8C   6C 06 84 06            DW   DOSTR,EXIT   ;force a call to do$
0C90                             ;   ."|         ( -- )
0C90                             ;               Run time routine of ." . Output a compiled string.
0C90                          ;*Macro unroll: hCOLON  COMPO+3,'.||',DOTQP
0C90                          ;*Macro unroll:  hCODE COMPO+3, ".||", DOTQP
0C90                          ALIGN   2   
0C90                DOTQP:       
0C90   00                     NOP      
0C91   CD 36 06               CALL   doLIST   
0C94   6C 06 22 0F 3A 0C 84 06 DW   DOSTR,COUNT,TYPEE,EXIT   
0C9C                             ;   .R          ( n +n -- )
0C9C                             ;               Display an integer in a field of n columns, right justified.
0C9C                          ;*Macro unroll: mCOLON  2,'.R',DOTR
0C9C                          ;*Macro unroll:  mCODE 2, ".R", DOTR
0C9C                          ALIGN   2   
0C9C                DOTR:        
0C9C                VVCODE:   .SET   $   
0C9C                VVLEN:    .SET   (2 & 01FH) / CELLL   
16E0                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
16E0                VVNAME:   .SET   $   
16E0   9C 0C EC 16            DW   vvCODE,vvLINK   
16E4                VVLINK:   .SET   $   
16E4   02 2E 52               DB   2,".R"   
0C9C                          .ORG   vvCODE   
0C9C   00                     NOP      
0C9D   CD 36 06               CALL   doLIST   
0CA0   40 10 46 07 4E 10 6C 10 B4 01 DW   TOR,STR,RFROM,OVER,SUBB   
0CAA   22 0C 3A 0C 84 06      DW   SPACS,TYPEE,EXIT   
0CB0                             ;   U.R         ( u +n -- )
0CB0                             ;               Display an unsigned integer in n column, right justified.
0CB0                          ;*Macro unroll: mCOLON  3,'U.R',UDOTR
0CB0                          ;*Macro unroll:  mCODE 3, "U.R", UDOTR
0CB0                          ALIGN   2   
0CB0                UDOTR:       
0CB0                VVCODE:   .SET   $   
0CB0                VVLEN:    .SET   (3 & 01FH) / CELLL   
16D8                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
16D8                VVNAME:   .SET   $   
16D8   B0 0C E4 16            DW   vvCODE,vvLINK   
16DC                VVLINK:   .SET   $   
16DC   03 55 2E 52            DB   3,"U.R"   
0CB0                          .ORG   vvCODE   
0CB0   00                     NOP      
0CB1   CD 36 06               CALL   doLIST   
0CB4   40 10 DE 06 10 07 34 07 DW   TOR,BDIGS,DIGS,EDIGS   
0CBC   4E 10 6C 10 B4 01      DW   RFROM,OVER,SUBB   
0CC2   22 0C 3A 0C 84 06      DW   SPACS,TYPEE,EXIT   
0CC8                             ;   U.          ( u -- )
0CC8                             ;               Display an unsigned integer in free format.
0CC8                          ;*Macro unroll: mCOLON  2,'U.',UDOT
0CC8                          ;*Macro unroll:  mCODE 2, "U.", UDOT
0CC8                          ALIGN   2   
0CC8                UDOT:        
0CC8                VVCODE:   .SET   $   
0CC8                VVLEN:    .SET   (2 & 01FH) / CELLL   
16D0                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
16D0                VVNAME:   .SET   $   
16D0   C8 0C DC 16            DW   vvCODE,vvLINK   
16D4                VVLINK:   .SET   $   
16D4   02 55 2E               DB   2,"U."   
0CC8                          .ORG   vvCODE   
0CC8   00                     NOP      
0CC9   CD 36 06               CALL   doLIST   
0CCC   DE 06 10 07 34 07      DW   BDIGS,DIGS,EDIGS   
0CD2   18 0C 3A 0C 84 06      DW   SPACE,TYPEE,EXIT   
0CD8                             ;   .           ( w -- )
0CD8                             ;               Display an integer in free format, preceeded by a space.
0CD8                          ;*Macro unroll: mCOLON  1,'.',DOT
0CD8                          ;*Macro unroll:  mCODE 1, ".", DOT
0CD8                          ALIGN   2   
0CD8                DOT:         
0CD8                VVCODE:   .SET   $   
0CD8                VVLEN:    .SET   (1 & 01FH) / CELLL   
16CA                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
16CA                VVNAME:   .SET   $   
16CA   D8 0C D4 16            DW   vvCODE,vvLINK   
16CE                VVLINK:   .SET   $   
16CE   01 2E                  DB   1,"."   
0CD8                          .ORG   vvCODE   
0CD8   00                     NOP      
0CD9   CD 36 06               CALL   doLIST   
0CDC   1C 11 AC 0E 44 06 0A 00 70 01 DW   BASE,AT,DOLIT,10,XORR   ;?decimal
0CE6   86 0E EE 0C            DW   QBRAN,DOT1   
0CEA   C8 0C 84 06            DW   UDOT,EXIT   ;no, display unsigned
0CEE                DOT1:        
0CEE   46 07 18 0C 3A 0C 84 06 DW   STR,SPACE,TYPEE,EXIT   ;yes, display signed
0CF6                             ;   .(          ( -- )
0CF6                             ;               Output following string up to next ) .
0CF6                          ;*Macro unroll: mCOLON  IMEDD+2,'.(',DOTPR
0CF6                          ;*Macro unroll:  mCODE IMEDD+2, ".(", DOTPR
0CF6                          ALIGN   2   
0CF6                DOTPR:       
0CF6                VVCODE:   .SET   $   
0CF6                VVLEN:    .SET   (IMEDD+2 & 01FH) / CELLL   
1682                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1682                VVNAME:   .SET   $   
1682   F6 0C CE 16            DW   vvCODE,vvLINK   
1686                VVLINK:   .SET   $   
1686   42 2E 28               DB   IMEDD+2,".("   
0CF6                          .ORG   vvCODE   
0CF6   00                     NOP      
0CF7   CD 36 06               CALL   doLIST   
0CFA   44 06 29 00 22 09 3A 0C 84 06 DW   DOLIT,$29,PARSE,TYPEE,EXIT   ; $29 = ")"
0D04                             ;   ?           ( a -- )
0D04                             ;               Display the contents in a memory cell.
0D04                          ;*Macro unroll: mCOLON  1,'?',QUEST
0D04                          ;*Macro unroll:  mCODE 1, "?", QUEST
0D04                          ALIGN   2   
0D04                QUEST:       
0D04                VVCODE:   .SET   $   
0D04                VVLEN:    .SET   (1 & 01FH) / CELLL   
167C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
167C                VVNAME:   .SET   $   
167C   04 0D 86 16            DW   vvCODE,vvLINK   
1680                VVLINK:   .SET   $   
1680   01 3F                  DB   1,"?"   
0D04                          .ORG   vvCODE   
0D04   00                     NOP      
0D05   CD 36 06               CALL   doLIST   
0D08   AC 0E D8 0C 84 06      DW   AT,DOT,EXIT   
0D0E                             ;   ^H          ( bot eot cur -- bot eot cur )
0D0E                             ;               Backup the cursor by one character.
0D0E                          ;*Macro unroll: mCOLON  2,'^H',BKSP
0D0E                          ;*Macro unroll:  mCODE 2, "^H", BKSP
0D0E                          ALIGN   2   
0D0E                BKSP:        
0D0E                VVCODE:   .SET   $   
0D0E                VVLEN:    .SET   (2 & 01FH) / CELLL   
1674                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1674                VVNAME:   .SET   $   
1674   0E 0D 80 16            DW   vvCODE,vvLINK   
1678                VVLINK:   .SET   $   
1678   02 5E 48               DB   2,"^H"   
0D0E                          .ORG   vvCODE   
0D0E   00                     NOP      
0D0F   CD 36 06               CALL   doLIST   
0D12   40 10 6C 10 4E 10 64 10 6C 10 70 01 DW   TOR,OVER,RFROM,SWAP,OVER,XORR   
0D1E   86 0E 3E 0D            DW   QBRAN,BACK1   
0D22   44 06 08 00 0C 11 58 0F 44 06 01 00 B4 01 DW   DOLIT,BKSPP,TECHO,ATEXE,DOLIT,1,SUBB   
0D30   78 07 0C 11 58 0F      DW   BLANK,TECHO,ATEXE   
0D36   44 06 08 00 0C 11 58 0F DW   DOLIT,BKSPP,TECHO,ATEXE   
0D3E                BACK1:       
0D3E   84 06                  DW   EXIT   
0D40                             ;   TAP         ( bot eot cur c -- bot eot cur )
0D40                             ;               Accept and echo the key stroke and bump the cursor.
0D40                          ;*Macro unroll: mCOLON  3,'TAP',TAP
0D40                          ;*Macro unroll:  mCODE 3, "TAP", TAP
0D40                          ALIGN   2   
0D40                TAP:         
0D40                VVCODE:   .SET   $   
0D40                VVLEN:    .SET   (3 & 01FH) / CELLL   
166C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
166C                VVNAME:   .SET   $   
166C   40 0D 78 16            DW   vvCODE,vvLINK   
1670                VVLINK:   .SET   $   
1670   03 54 41 50            DB   3,"TAP"   
0D40                          .ORG   vvCODE   
0D40   00                     NOP      
0D41   CD 36 06               CALL   doLIST   
0D44   5C 10 0C 11 58 0F      DW   DUPP,TECHO,ATEXE   
0D4A   6C 10 B4 0E 44 06 01 00 7A 01 84 06 DW   OVER,CSTOR,DOLIT,1,PLUS,EXIT   
0D56                             ;   kTAP        ( bot eot cur c -- bot eot cur )
0D56                             ;               Process a key stroke, CR or backspace.
0D56                          ;*Macro unroll: mCOLON  4,'kTAP',KTAP
0D56                          ;*Macro unroll:  mCODE 4, "kTAP", KTAP
0D56                          ALIGN   2   
0D56                KTAP:        
0D56                VVCODE:   .SET   $   
0D56                VVLEN:    .SET   (4 & 01FH) / CELLL   
1662                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1662                VVNAME:   .SET   $   
1662   56 0D 70 16            DW   vvCODE,vvLINK   
1666                VVLINK:   .SET   $   
1666   04 6B 54 41 50         DB   4,"kTAP"   
0D56                          .ORG   vvCODE   
0D56   00                     NOP      
0D57   CD 36 06               CALL   doLIST   
0D5A   5C 10 44 06 0D 00 70 01 DW   DUPP,DOLIT,CRR,XORR   
0D62   86 0E 7A 0D            DW   QBRAN,KTAP2   
0D66   44 06 08 00 70 01      DW   DOLIT,BKSPP,XORR   
0D6C   86 0E 76 0D            DW   QBRAN,KTAP1   
0D70   78 07 40 0D 84 06      DW   BLANK,TAP,EXIT   
0D76                KTAP1:       
0D76   0E 0D 84 06            DW   BKSP,EXIT   
0D7A                KTAP2:       
0D7A   60 10 64 10 60 10 5C 10 84 06 DW   DROP,SWAP,DROP,DUPP,EXIT   
0D84                             ;   accept      ( b u -- b u )
0D84                             ;               Accept characters to input buffer. Return with actual count.
0D84                          ;*Macro unroll: mCOLON  6,'accept',ACCEP
0D84                          ;*Macro unroll:  mCODE 6, "accept", ACCEP
0D84                          ALIGN   2   
0D84                ACCEP:       
0D84                VVCODE:   .SET   $   
0D84                VVLEN:    .SET   (6 & 01FH) / CELLL   
1656                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1656                VVNAME:   .SET   $   
1656   84 0D 66 16            DW   vvCODE,vvLINK   
165A                VVLINK:   .SET   $   
165A   06 61 63 63 65 70 74   DB   6,"accept"   
0D84                          .ORG   vvCODE   
0D84   00                     NOP      
0D85   CD 36 06               CALL   doLIST   
0D88   6C 10 7A 01 6C 10      DW   OVER,PLUS,OVER   
0D8E                ACCP1:       
0D8E   9A 10 70 01            DW   DDUP,XORR   
0D92   86 0E B4 0D            DW   QBRAN,ACCP4   
0D96   D6 0B 5C 10            DW   KEY,DUPP   
0D9A   78 07 44 06 7F 00 40 02 DW   BLANK,DOLIT,127,WITHI   
0DA2   86 0E AC 0D            DW   QBRAN,ACCP2   
0DA6   40 0D                  DW   TAP   
0DA8   92 0E B0 0D            DW   BRAN,ACCP3   
0DAC                ACCP2:       
0DAC   04 11 58 0F            DW   TTAP,ATEXE   
0DB0                ACCP3:       
0DB0   92 0E 8E 0D            DW   BRAN,ACCP1   
0DB4                ACCP4:       
0DB4   60 10 6C 10 B4 01 84 06 DW   DROP,OVER,SUBB,EXIT   
0DBC                             ;   EXPECT      ( b u -- )
0DBC                             ;               Accept input stream and STORE count in SPAN.
0DBC                          ;*Macro unroll: hCOLON  6,'EXPECT',EXPEC
0DBC                          ;*Macro unroll:  hCODE 6, "EXPECT", EXPEC
0DBC                          ALIGN   2   
0DBC                EXPEC:       
0DBC   00                     NOP      
0DBD   CD 36 06               CALL   doLIST   
0DC0   FC 10 58 0F 2C 11 A2 0E 60 10 84 06 DW   TEXPE,ATEXE,SPAN,STORE,DROP,EXIT   
0DCC                             ;   QUERY       ( -- )
0DCC                             ;               Accept input stream to terminal input buffer.
0DCC                          ;*Macro unroll: hCOLON  5,'QUERY',QUERY
0DCC                          ;*Macro unroll:  hCODE 5, "QUERY", QUERY
0DCC                          ALIGN   2   
0DCC                QUERY:       
0DCC   00                     NOP      
0DCD   CD 36 06               CALL   doLIST   
0DD0   4C 0F 44 06 50 00 FC 10 58 0F 3C 11 A2 0E DW   TIB,DOLIT,80,TEXPE,ATEXE,NTIB,STORE   
0DDE   60 10 44 06 00 00 34 11 A2 0E 84 06 DW   DROP,DOLIT,0,INN,STORE,EXIT   
0DEA                             ; HL contains the xt of the word
0DEA                CALL_FORTH:      
0DEA   11 EF 0D               LD   DE,TRETURN_HERE   
0DED   E9                     JP   (HL)   
0DEE                RETURN_HERE:      
0DEE   C9                     RET      
0DEF                TRETURN_HERE:      
0DEF   EE 0D                  DW   RETURN_HERE   
0DF1                NEXT_STEP:      
0DF1   5E                     LD   E,(HL)   ; 7t
0DF2   23                     INC   HL   ; 6t
0DF3   56                     LD   D,(HL)   ; 7t
0DF4   23                     INC   HL   ; 6t
0DF5   EB                     EX   DE,HL   ; 4t
0DF6   E9                     JP   (HL)   ; 4t
0DF7                          ;*Macro unroll: hCOLON	2,'HI',HI
0DF7                          ;*Macro unroll:  hCODE 2, "HI", HI
0DF7                          ALIGN   2   
0DF8                HI:          
0DF8   00                     NOP      
0DF9   CD 36 06               CALL   doLIST   
0DFC   A4 0B                  DW   STOIO   
0DFE                             ; DW  DOLIT,1,DOLIT,0,DOLIT,1,UMMOD,TESDOT,TESDOT
0DFE   44 06 10 0E            DW   DOLIT,HELLO   
0E02   58 0C                  DW   TYPEZ   
0E04   D6 0B                  DW   KEY   
0E06   E8 0B                  DW   EMIT   
0E08   44 06 10 0E            DW   DOLIT,HELLO   
0E0C   58 0C                  DW   TYPEZ   
0E0E   80 0E                  DW   QUIT   
0E10   48 65 6C 6C 6F 20 46 6F 72 74 68 21 20 0D 0A 00 HELLO:   .CSTR   "Hello Forth! \r\n"   
0E20                             ;   hi          ( -- )
0E20                             ;               Display the sign-on message of eForth.
0E20                          ;*Macro unroll: hCOLON  2,'hix',HIX
0E20                          ;*Macro unroll:  hCODE 2, "hix", HIX
0E20                          ALIGN   2   
0E20                HIX:         
0E20   00                     NOP      
0E21   CD 36 06               CALL   doLIST   
0E24   A4 0B 76 0C            DW   STOIO,CR   ;initialize I/O
0E28                          ;*Macro unroll:  mDSTR   DOTQP,'eForth v'        ;model
0E28   90 0C                  DW   DOTQP   ;model
0E2A                VVLEN:    .SET   $   
0E2A   00 65 46 6F 72 74 68 20 76 DB   0,"eForth v"   
0E33                VVCODE:   .SET   $   
0E2A                          .ORG   vvLEN   
0E2A   08                     DB   vvCODE - vvLEN - 1   
0E33                          .ORG   vvCODE   
0E33                             ; DW      BASE,AT,HEX             ;save radix
0E33                             ; DW      VERSN,BDIGS,DIG,DIG
0E33                             ; DW      DOLIT,$2E,HOLD          ; $2E = "."
0E33                             ; DW      DIGS,EDIGS,TYPEE        ;format version number
0E33                             ; DW      BASE,STORE              ;restore radix
0E33   76 0C                  DW   CR   
0E35                HI1:         
0E35   D6 0B                  DW   KEY   
0E37   5C 10 E8 0B            DW   DUPP,EMIT   
0E3B   44 06 0D 00 CE 01      DW   DOLIT,$0D,EQUAL   
0E41                             ; DW  DROP, DOLIT, 0
0E41   86 0E 35 0E            DW   QBRAN,HI1   
0E45   44 06 10 0E            DW   DOLIT,HELLO   
0E49   58 0C                  DW   TYPEZ   
0E4B   76 0C 84 06            DW   CR,EXIT   
0E4F                          ;*Macro unroll: mCOLON	4,'COLD',COLD
0E4F                          ;*Macro unroll:  mCODE 4, "COLD", COLD
0E4F                          ALIGN   2   
0E50                COLD:        
0E50                VVCODE:   .SET   $   
0E50                VVLEN:    .SET   (4 & 01FH) / CELLL   
164C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
164C                VVNAME:   .SET   $   
164C   50 0E 5A 16            DW   vvCODE,vvLINK   
1650                VVLINK:   .SET   $   
1650   04 43 4F 4C 44         DB   4,"COLD"   
0E50                          .ORG   vvCODE   
0E50   00                     NOP      
0E51   CD 36 06               CALL   doLIST   
0E54                COLD1:       
0E54   44 06 1A 01 44 06 45 24 DW   DOLIT,UZERO,DOLIT,UPP   
0E5C   44 06 3A 00 68 0F      DW   DOLIT,ULAST-UZERO,CMOVE   ;initialize user area
0E62   6A 0E                  DW   PRESE   ;initialize stack and TIB
0E64                             ; DW      TBOOT,ATEXE             ;application boot
0E64                             ; DW      FORTH,CNTXT,AT,DUPP     ;initialize search order
0E64                             ; DW      CRRNT,DSTOR,OVERT
0E64   80 0E                  DW   QUIT   ;start interpretation
0E66   92 0E 54 0E            DW   BRAN,COLD1   ;just in case
0E6A                             ;   PRESET      ( -- )
0E6A                             ;               Reset data stack pointer and the terminal input buffer.
0E6A                          ;*Macro unroll: mCOLON  6,'PRESET',PRESE
0E6A                          ;*Macro unroll:  mCODE 6, "PRESET", PRESE
0E6A                          ALIGN   2   
0E6A                PRESE:       
0E6A                VVCODE:   .SET   $   
0E6A                VVLEN:    .SET   (6 & 01FH) / CELLL   
1640                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1640                VVNAME:   .SET   $   
1640   6A 0E 50 16            DW   vvCODE,vvLINK   
1644                VVLINK:   .SET   $   
1644   06 50 52 45 53 45 54   DB   6,"PRESET"   
0E6A                          .ORG   vvCODE   
0E6A   00                     NOP      
0E6B   CD 36 06               CALL   doLIST   
0E6E   DC 10 AC 0E E8 0E      DW   SZERO,AT,SPSTO   
0E74   44 06 00 22 3C 11 76 03 A2 0E 84 06 DW   DOLIT,TIBB,NTIB,CELLP,STORE,EXIT   
0E80                          ;*Macro unroll: mCODE  4, 'QUIT', QUIT
0E80                          ALIGN   2   
0E80                QUIT:        
0E80                VVCODE:   .SET   $   
0E80                VVLEN:    .SET   (4 & 01FH) / CELLL   
1636                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1636                VVNAME:   .SET   $   
1636   80 0E 44 16            DW   vvCODE,vvLINK   
163A                VVLINK:   .SET   $   
163A   04 51 55 49 54         DB   4,"QUIT"   
0E80                          .ORG   vvCODE   
0E80   76                     HALT      
0E81                             ;   EXECUTE	( i*x xt -- j*x )		\ CORE
0E81                             ;		Perform the semantics indentified by execution token, xt.
0E81                          ;*Macro unroll: mCODE	7,'EXECUTE', EXECU
0E81                          ALIGN   2   
0E82                EXECU:       
0E82                VVCODE:   .SET   $   
0E82                VVLEN:    .SET   (7 & 01FH) / CELLL   
162A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
162A                VVNAME:   .SET   $   
162A   82 0E 3A 16            DW   vvCODE,vvLINK   
162E                VVLINK:   .SET   $   
162E   07 45 58 45 43 55 54 45 DB   7,"EXECUTE"   
0E82                          .ORG   vvCODE   
0E82   60                     LD   H,B   
0E83   69                     LD   L,C   
0E84   C1                     POP   BC   
0E85   E9                     JP   (HL)   
0E86                             ; 
0E86                             ;   0BRAN	( flag -- )
0E86                             ;		BRAN if flag is zero.
0E86                          ;*Macro unroll: hCODE	COMPO+7,'?branch', QBRAN
0E86                          ALIGN   2   
0E86                QBRAN:       
0E86   78                     LD   A,B   ; 4t
0E87   B1                     OR   C   ; 4t
0E88   C1                     POP   BC   ;10t
0E89   CA 92 0E               JP   Z,BRAN   ;10/7t a fast dec is ok, only
0E8C   13                     INC   DE   ; 6t yes,continue past the BRAN offset
0E8D   13                     INC   DE   ; 6t
0E8E                          ;*Macro unroll: 	mNEXT
0E8E   EB                     EX   DE,HL   
0E8F   FD E9                  JP   (IY)   
0E91                             ;   BRAN	( -- )
0E91                             ;		BRAN to an inline address.
0E91                          ;*Macro unroll: hCODE	COMPO+6,'branch', BRAN
0E91                          ALIGN   2   
0E92                BRAN:        
0E92   1A                     LD   A,(DE)   ; 7t go back to the loop
0E93   6F                     LD   L,A   ; 4t
0E94   13                     INC   DE   ; 6t
0E95   1A                     LD   A,(DE)   ; 7t
0E96   67                     LD   H,A   ; 4t
0E97                          ;*Macro unroll: 	mNEXTHL
0E97   FD E9                  JP   (IY)   
0E99                             ; 
0E99                             ;   THROW    ( cstr -- )
0E99                             ;   Prints string message and returns TODO: restart Forth interpreter QUIT
0E99                          ;*Macro unroll: mCOLON	5,'THROWX',THROWX
0E99                          ;*Macro unroll:  mCODE 5, "THROWX", THROWX
0E99                          ALIGN   2   
0E9A                THROWX:      
0E9A                VVCODE:   .SET   $   
0E9A                VVLEN:    .SET   (5 & 01FH) / CELLL   
1620                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1620                VVNAME:   .SET   $   
1620   9A 0E 2E 16            DW   vvCODE,vvLINK   
1624                VVLINK:   .SET   $   
1624   05 54 48 52 4F 57 58   DB   5,"THROWX"   
0E9A                          .ORG   vvCODE   
0E9A   00                     NOP      
0E9B   CD 36 06               CALL   doLIST   
0E9E   58 0C 84 06            DW   TYPEZ,EXIT   
0EA2                             ;   !           ( w a -- )
0EA2                             ;               Pop the data stack to memory.
0EA2                          ;*Macro unroll: mCODE	1,'!',STORE
0EA2                          ALIGN   2   
0EA2                STORE:       
0EA2                VVCODE:   .SET   $   
0EA2                VVLEN:    .SET   (1 & 01FH) / CELLL   
161A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
161A                VVNAME:   .SET   $   
161A   A2 0E 24 16            DW   vvCODE,vvLINK   
161E                VVLINK:   .SET   $   
161E   01 21                  DB   1,"!"   
0EA2                          .ORG   vvCODE   
0EA2   60                     LD   H,B   
0EA3   69                     LD   L,C   
0EA4   C1                     POP   BC   
0EA5   71                     LD   (HL),C   
0EA6   23                     INC   HL   
0EA7   70                     LD   (HL),B   
0EA8   C1                     POP   BC   
0EA9                          ;*Macro unroll: 	mNEXT
0EA9   EB                     EX   DE,HL   
0EAA   FD E9                  JP   (IY)   
0EAC                             ;   @           ( a -- w )
0EAC                             ;               Push memory location to the data stack.
0EAC                          ;*Macro unroll: mCODE	1,'@', AT
0EAC                          ALIGN   2   
0EAC                AT:          
0EAC                VVCODE:   .SET   $   
0EAC                VVLEN:    .SET   (1 & 01FH) / CELLL   
1614                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1614                VVNAME:   .SET   $   
1614   AC 0E 1E 16            DW   vvCODE,vvLINK   
1618                VVLINK:   .SET   $   
1618   01 40                  DB   1,"@"   
0EAC                          .ORG   vvCODE   
0EAC   60                     LD   H,B   
0EAD   69                     LD   L,C   
0EAE   4E                     LD   C,(HL)   
0EAF   23                     INC   HL   
0EB0   46                     LD   B,(HL)   
0EB1                          ;*Macro unroll: 	mNEXT
0EB1   EB                     EX   DE,HL   
0EB2   FD E9                  JP   (IY)   
0EB4                             ;   C!          ( c b -- )
0EB4                             ;               Pop the data stack to byte memory.
0EB4                          ;*Macro unroll: mCODE	2,'C!',CSTOR
0EB4                          ALIGN   2   
0EB4                CSTOR:       
0EB4                VVCODE:   .SET   $   
0EB4                VVLEN:    .SET   (2 & 01FH) / CELLL   
160C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
160C                VVNAME:   .SET   $   
160C   B4 0E 18 16            DW   vvCODE,vvLINK   
1610                VVLINK:   .SET   $   
1610   02 43 21               DB   2,"C!"   
0EB4                          .ORG   vvCODE   
0EB4   60                     LD   H,B   
0EB5   69                     LD   L,C   
0EB6   C1                     POP   BC   
0EB7   71                     LD   (HL),C   
0EB8   C1                     POP   BC   
0EB9                          ;*Macro unroll: 	mNEXT
0EB9   EB                     EX   DE,HL   
0EBA   FD E9                  JP   (IY)   
0EBC                             ;   C@          ( b -- c )
0EBC                             ;               Push byte memory location to the data stack.
0EBC                          ;*Macro unroll: mCODE	2,'C@',CAT
0EBC                          ALIGN   2   
0EBC                CAT:         
0EBC                VVCODE:   .SET   $   
0EBC                VVLEN:    .SET   (2 & 01FH) / CELLL   
1604                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1604                VVNAME:   .SET   $   
1604   BC 0E 10 16            DW   vvCODE,vvLINK   
1608                VVLINK:   .SET   $   
1608   02 43 40               DB   2,"C@"   
0EBC                          .ORG   vvCODE   
0EBC   0A                     LD   A,(BC)   
0EBD   4F                     LD   C,A   
0EBE   06 00                  LD   B,0   
0EC0                          ;*Macro unroll: 	mNEXT
0EC0   EB                     EX   DE,HL   
0EC1   FD E9                  JP   (IY)   
0EC3                             ;   R@          ( -- w )
0EC3                             ;               Copy top of return stack to the data stack.
0EC3                          ;*Macro unroll: mCODE	COMPO+2,'R@',RAT
0EC3                          ALIGN   2   
0EC4                RAT:         
0EC4                VVCODE:   .SET   $   
0EC4                VVLEN:    .SET   (COMPO+2 & 01FH) / CELLL   
15DC                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
15DC                VVNAME:   .SET   $   
15DC   C4 0E 08 16            DW   vvCODE,vvLINK   
15E0                VVLINK:   .SET   $   
15E0   22 52 40               DB   COMPO+2,"R@"   
0EC4                          .ORG   vvCODE   
0EC4   C5                     PUSH   BC   
0EC5   DD 4E 00               LD   C,(IX+0)   
0EC8   DD 46 01               LD   B,(IX+1)   
0ECB                          ;*Macro unroll: 	mNEXT
0ECB   EB                     EX   DE,HL   
0ECC   FD E9                  JP   (IY)   
0ECE                             ;   RP@         ( -- a )
0ECE                             ;               Push the current RP to the data stack
0ECE                          ;*Macro unroll: mCODE	COMPO+3, 'rp@', RPAT
0ECE                          ALIGN   2   
0ECE                RPAT:        
0ECE                VVCODE:   .SET   $   
0ECE                VVLEN:    .SET   (COMPO+3 & 01FH) / CELLL   
15B4                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
15B4                VVNAME:   .SET   $   
15B4   CE 0E E0 15            DW   vvCODE,vvLINK   
15B8                VVLINK:   .SET   $   
15B8   23 72 70 40            DB   COMPO+3,"rp@"   
0ECE                          .ORG   vvCODE   
0ECE   C5                     DB   0C5h   ; PUSH	BC	;11t
0ECF   DD E5                  DB   0DDh,0E5h   ; PUSH IX	;15t
0ED1   C1                     DB   0C1h   ; POP	BC	;10t
0ED2                          ;*Macro unroll:  mNEXT
0ED2   EB                     EX   DE,HL   
0ED3   FD E9                  JP   (IY)   
0ED5                             ;   RP!         ( a -- )
0ED5                             ;               Set the return stack pointer.
0ED5                          ;*Macro unroll: mCODE	COMPO+3,'rp!',RPSTO
0ED5                          ALIGN   2   
0ED6                RPSTO:       
0ED6                VVCODE:   .SET   $   
0ED6                VVLEN:    .SET   (COMPO+3 & 01FH) / CELLL   
158C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
158C                VVNAME:   .SET   $   
158C   D6 0E B8 15            DW   vvCODE,vvLINK   
1590                VVLINK:   .SET   $   
1590   23 72 70 21            DB   COMPO+3,"rp!"   
0ED6                          .ORG   vvCODE   
0ED6   C5                     DB   0C5h   ; PUSH	BC	;11t
0ED7   DD E1                  DB   0DDh,0E1h   ; POP IX	;14t
0ED9   C1                     DB   0C1h   ; POP	BC	;10t
0EDA                          ;*Macro unroll: 	mNEXT
0EDA   EB                     EX   DE,HL   
0EDB   FD E9                  JP   (IY)   
0EDD                             ;   SP@         ( -- a )
0EDD                             ;               Push the current data stack pointer.
0EDD                          ;*Macro unroll: mCODE	3, 'sp@', SPAT
0EDD                          ALIGN   2   
0EDE                SPAT:        
0EDE                VVCODE:   .SET   $   
0EDE                VVLEN:    .SET   (3 & 01FH) / CELLL   
1584                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1584                VVNAME:   .SET   $   
1584   DE 0E 90 15            DW   vvCODE,vvLINK   
1588                VVLINK:   .SET   $   
1588   03 73 70 40            DB   3,"sp@"   
0EDE                          .ORG   vvCODE   
0EDE   C5                     DB   0C5h   ; PUSH	BC	;11t
0EDF   21                     DB   021h   ; LD	HL,0	;10t
0EE0   00 00                  DW   0   
0EE2   39                     DB   039h   ; ADD	HL,SP	;11t
0EE3   44                     DB   044h   ; LD	B,H	; 4t
0EE4   4D                     DB   04Dh   ; LD	C,L	; 4t
0EE5                          ;*Macro unroll: 	mNEXT
0EE5   EB                     EX   DE,HL   
0EE6   FD E9                  JP   (IY)   
0EE8                             ;   SP!         ( a -- )
0EE8                             ;               Set the data stack pointer.
0EE8                          ;*Macro unroll: mCODE	3,'sp!',SPSTO
0EE8                          ALIGN   2   
0EE8                SPSTO:       
0EE8                VVCODE:   .SET   $   
0EE8                VVLEN:    .SET   (3 & 01FH) / CELLL   
157C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
157C                VVNAME:   .SET   $   
157C   E8 0E 88 15            DW   vvCODE,vvLINK   
1580                VVLINK:   .SET   $   
1580   03 73 70 21            DB   3,"sp!"   
0EE8                          .ORG   vvCODE   
0EE8   60                     DB   060h   ; LD	H,B	; 4t
0EE9   69                     DB   069h   ; LD	L,C	; 4t
0EEA   F9                     DB   0F9h   ; LD	SP,HL	; 6t
0EEB   C1                     DB   0C1h   ; POP	BC	;10t
0EEC                          ;*Macro unroll: 	mNEXT
0EEC   EB                     EX   DE,HL   
0EED   FD E9                  JP   (IY)   
0EEF                             ;   +!          ( n a -- )
0EEF                             ;               Add n to the contents at address a.
0EEF                          ;*Macro unroll: mCOLON  2,'+!',PSTOR
0EEF                          ;*Macro unroll:  mCODE 2, "+!", PSTOR
0EEF                          ALIGN   2   
0EF0                PSTOR:       
0EF0                VVCODE:   .SET   $   
0EF0                VVLEN:    .SET   (2 & 01FH) / CELLL   
1574                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1574                VVNAME:   .SET   $   
1574   F0 0E 80 15            DW   vvCODE,vvLINK   
1578                VVLINK:   .SET   $   
1578   02 2B 21               DB   2,"+!"   
0EF0                          .ORG   vvCODE   
0EF0   00                     NOP      
0EF1   CD 36 06               CALL   doLIST   
0EF4   64 10 6C 10 AC 0E 7A 01 DW   SWAP,OVER,AT,PLUS   
0EFC   64 10 A2 0E 84 06      DW   SWAP,STORE,EXIT   
0F02                             ;   2!          ( d a -- )
0F02                             ;               STORE the double integer to address a.
0F02                          ;*Macro unroll: mCOLON  2,'2!',DSTOR
0F02                          ;*Macro unroll:  mCODE 2, "2!", DSTOR
0F02                          ALIGN   2   
0F02                DSTOR:       
0F02                VVCODE:   .SET   $   
0F02                VVLEN:    .SET   (2 & 01FH) / CELLL   
156C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
156C                VVNAME:   .SET   $   
156C   02 0F 78 15            DW   vvCODE,vvLINK   
1570                VVLINK:   .SET   $   
1570   02 32 21               DB   2,"2!"   
0F02                          .ORG   vvCODE   
0F02   00                     NOP      
0F03   CD 36 06               CALL   doLIST   
0F06   64 10 6C 10 A2 0E      DW   SWAP,OVER,STORE   
0F0C   76 03 A2 0E 84 06      DW   CELLP,STORE,EXIT   
0F12                             ;   2@          ( a -- d )
0F12                             ;               Fetch double integer from address a.
0F12                          ;*Macro unroll: mCOLON  2,'2@',DAT
0F12                          ;*Macro unroll:  mCODE 2, "2@", DAT
0F12                          ALIGN   2   
0F12                DAT:         
0F12                VVCODE:   .SET   $   
0F12                VVLEN:    .SET   (2 & 01FH) / CELLL   
1564                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1564                VVNAME:   .SET   $   
1564   12 0F 70 15            DW   vvCODE,vvLINK   
1568                VVLINK:   .SET   $   
1568   02 32 40               DB   2,"2@"   
0F12                          .ORG   vvCODE   
0F12   00                     NOP      
0F13   CD 36 06               CALL   doLIST   
0F16   5C 10 76 03 AC 0E      DW   DUPP,CELLP,AT   
0F1C   64 10 AC 0E 84 06      DW   SWAP,AT,EXIT   
0F22                             ;   COUNT       ( b -- b +n )
0F22                             ;               Return count byte of a string and add 1 to byte address.
0F22                          ;*Macro unroll: mCOLON  5,'COUNT',COUNT
0F22                          ;*Macro unroll:  mCODE 5, "COUNT", COUNT
0F22                          ALIGN   2   
0F22                COUNT:       
0F22                VVCODE:   .SET   $   
0F22                VVLEN:    .SET   (5 & 01FH) / CELLL   
155A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
155A                VVNAME:   .SET   $   
155A   22 0F 68 15            DW   vvCODE,vvLINK   
155E                VVLINK:   .SET   $   
155E   05 43 4F 55 4E 54      DB   5,"COUNT"   
0F22                          .ORG   vvCODE   
0F22   00                     NOP      
0F23   CD 36 06               CALL   doLIST   
0F26   5C 10 44 06 01 00 7A 01 DW   DUPP,DOLIT,1,PLUS   
0F2E   64 10 BC 0E 84 06      DW   SWAP,CAT,EXIT   
0F34                             ;   HERE        ( -- a )
0F34                             ;               Return the top of the code dictionary.
0F34                          ;*Macro unroll: mCOLON  4,'HERE',HERE
0F34                          ;*Macro unroll:  mCODE 4, "HERE", HERE
0F34                          ALIGN   2   
0F34                HERE:        
0F34                VVCODE:   .SET   $   
0F34                VVLEN:    .SET   (4 & 01FH) / CELLL   
1550                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1550                VVNAME:   .SET   $   
1550   34 0F 5E 15            DW   vvCODE,vvLINK   
1554                VVLINK:   .SET   $   
1554   04 48 45 52 45         DB   4,"HERE"   
0F34                          .ORG   vvCODE   
0F34   00                     NOP      
0F35   CD 36 06               CALL   doLIST   
0F38   7C 11 AC 0E 84 06      DW   CP,AT,EXIT   
0F3E                             ;   PAD         ( -- a )
0F3E                             ;               Return the address of a temporary buffer.
0F3E                          ;*Macro unroll: mCOLON  3,'PAD',PAD
0F3E                          ;*Macro unroll:  mCODE 3, "PAD", PAD
0F3E                          ALIGN   2   
0F3E                PAD:         
0F3E                VVCODE:   .SET   $   
0F3E                VVLEN:    .SET   (3 & 01FH) / CELLL   
1548                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1548                VVNAME:   .SET   $   
1548   3E 0F 54 15            DW   vvCODE,vvLINK   
154C                VVLINK:   .SET   $   
154C   03 50 41 44            DB   3,"PAD"   
0F3E                          .ORG   vvCODE   
0F3E   00                     NOP      
0F3F   CD 36 06               CALL   doLIST   
0F42   34 0F 44 06 50 00 7A 01 84 06 DW   HERE,DOLIT,80,PLUS,EXIT   
0F4C                             ;   TIB         ( -- a )
0F4C                             ;               Return the address of the terminal input buffer.
0F4C                          ;*Macro unroll: mCOLON  3,'TIB',TIB
0F4C                          ;*Macro unroll:  mCODE 3, "TIB", TIB
0F4C                          ALIGN   2   
0F4C                TIB:         
0F4C                VVCODE:   .SET   $   
0F4C                VVLEN:    .SET   (3 & 01FH) / CELLL   
1540                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1540                VVNAME:   .SET   $   
1540   4C 0F 4C 15            DW   vvCODE,vvLINK   
1544                VVLINK:   .SET   $   
1544   03 54 49 42            DB   3,"TIB"   
0F4C                          .ORG   vvCODE   
0F4C   00                     NOP      
0F4D   CD 36 06               CALL   doLIST   
0F50   3C 11 76 03 AC 0E 84 06 DW   NTIB,CELLP,AT,EXIT   
0F58                             ;   @EXECUTE    ( a -- )
0F58                             ;               Execute vector STOREd in address a.
0F58                          ;*Macro unroll: hCOLON  8,'@EXECUTE',ATEXE
0F58                          ;*Macro unroll:  hCODE 8, "@EXECUTE", ATEXE
0F58                          ALIGN   2   
0F58                ATEXE:       
0F58   00                     NOP      
0F59   CD 36 06               CALL   doLIST   
0F5C   AC 0E 74 10            DW   AT,QDUP   ;?address or zero
0F60   86 0E 66 0F            DW   QBRAN,EXE1   
0F64   82 0E                  DW   EXECU   ;execute if non-zero
0F66                EXE1:        
0F66   84 06                  DW   EXIT   ;do nothing if zero
0F68                             ;   CMOVE       ( b1 b2 u -- )
0F68                             ;               Copy u bytes from b1 to b2.
0F68                          ;*Macro unroll: mCOLON  5,'CMOVE',CMOVE
0F68                          ;*Macro unroll:  mCODE 5, "CMOVE", CMOVE
0F68                          ALIGN   2   
0F68                CMOVE:       
0F68                VVCODE:   .SET   $   
0F68                VVLEN:    .SET   (5 & 01FH) / CELLL   
1536                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1536                VVNAME:   .SET   $   
1536   68 0F 44 15            DW   vvCODE,vvLINK   
153A                VVLINK:   .SET   $   
153A   05 43 4D 4F 56 45      DB   5,"CMOVE"   
0F68                          .ORG   vvCODE   
0F68   00                     NOP      
0F69   CD 36 06               CALL   doLIST   
0F6C   40 10                  DW   TOR   
0F6E   92 0E 8A 0F            DW   BRAN,CMOV2   
0F72                CMOV1:       
0F72   40 10 5C 10 BC 0E      DW   TOR,DUPP,CAT   
0F78   C4 0E B4 0E            DW   RAT,CSTOR   
0F7C   44 06 01 00 7A 01      DW   DOLIT,1,PLUS   
0F82   4E 10 44 06 01 00 7A 01 DW   RFROM,DOLIT,1,PLUS   
0F8A                CMOV2:       
0F8A   90 06 72 0F            DW   DONXT,CMOV1   
0F8E   90 10 84 06            DW   DDROP,EXIT   
0F92                             ;   FILL        ( b u c -- )
0F92                             ;               Fill u bytes of character c to area beginning at b.
0F92                          ;*Macro unroll: mCOLON  4,'FILL',FILL
0F92                          ;*Macro unroll:  mCODE 4, "FILL", FILL
0F92                          ALIGN   2   
0F92                FILL:        
0F92                VVCODE:   .SET   $   
0F92                VVLEN:    .SET   (4 & 01FH) / CELLL   
152C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
152C                VVNAME:   .SET   $   
152C   92 0F 3A 15            DW   vvCODE,vvLINK   
1530                VVLINK:   .SET   $   
1530   04 46 49 4C 4C         DB   4,"FILL"   
0F92                          .ORG   vvCODE   
0F92   00                     NOP      
0F93   CD 36 06               CALL   doLIST   
0F96   64 10 40 10 64 10      DW   SWAP,TOR,SWAP   
0F9C   92 0E AA 0F            DW   BRAN,FILL2   
0FA0                FILL1:       
0FA0   9A 10 B4 0E 44 06 01 00 7A 01 DW   DDUP,CSTOR,DOLIT,1,PLUS   
0FAA                FILL2:       
0FAA   90 06 A0 0F            DW   DONXT,FILL1   
0FAE   90 10 84 06            DW   DDROP,EXIT   
0FB2                             ;   -TRAILING   ( b u -- b u )
0FB2                             ;               Adjust the count to eliminate trailing white space.
0FB2                          ;*Macro unroll: mCOLON  9,'-TRAILING',DTRAI
0FB2                          ;*Macro unroll:  mCODE 9, "-TRAILING", DTRAI
0FB2                          ALIGN   2   
0FB2                DTRAI:       
0FB2                VVCODE:   .SET   $   
0FB2                VVLEN:    .SET   (9 & 01FH) / CELLL   
151E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
151E                VVNAME:   .SET   $   
151E   B2 0F 30 15            DW   vvCODE,vvLINK   
1522                VVLINK:   .SET   $   
1522   09 2D 54 52 41 49 4C 49 4E 47 DB   9,"-TRAILING"   
0FB2                          .ORG   vvCODE   
0FB2   00                     NOP      
0FB3   CD 36 06               CALL   doLIST   
0FB6   40 10                  DW   TOR   
0FB8   92 0E D6 0F            DW   BRAN,DTRA2   
0FBC                DTRA1:       
0FBC   78 07 6C 10 C4 0E 7A 01 BC 0E 00 02 DW   BLANK,OVER,RAT,PLUS,CAT,LESS   
0FC8   86 0E D6 0F            DW   QBRAN,DTRA2   
0FCC   4E 10 44 06 01 00 7A 01 84 06 DW   RFROM,DOLIT,1,PLUS,EXIT   ;adjusted count
0FD6                DTRA2:       
0FD6   90 06 BC 0F            DW   DONXT,DTRA1   
0FDA   44 06 00 00 84 06      DW   DOLIT,0,EXIT   ;count=0
0FE0                             ;   PACK$       ( b u a -- a )
0FE0                             ;               Build a counted string with u characters from b. Null fill.
0FE0                          ;*Macro unroll: mCOLON  5,'PACK$',PACKS
0FE0                          ;*Macro unroll:  mCODE 5, "PACK$", PACKS
0FE0                          ALIGN   2   
0FE0                PACKS:       
0FE0                VVCODE:   .SET   $   
0FE0                VVLEN:    .SET   (5 & 01FH) / CELLL   
1514                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1514                VVNAME:   .SET   $   
1514   E0 0F 22 15            DW   vvCODE,vvLINK   
1518                VVLINK:   .SET   $   
1518   05 50 41 43 4B 24      DB   5,"PACK$"   
0FE0                          .ORG   vvCODE   
0FE0   00                     NOP      
0FE1   CD 36 06               CALL   doLIST   
0FE4   1A 10 5C 10 40 10      DW   ALGND,DUPP,TOR   ;strings only on cell boundary
0FEA   6C 10 5C 10 44 06 00 00 DW   OVER,DUPP,DOLIT,0   
0FF2   44 06 02 00 5E 02 60 10 DW   DOLIT,CELLL,UMMOD,DROP   ;count mod cell
0FFA   B4 01 6C 10 7A 01      DW   SUBB,OVER,PLUS   
1000   44 06 00 00 64 10 A2 0E DW   DOLIT,0,SWAP,STORE   ;null fill cell
1008   9A 10 B4 0E 44 06 01 00 7A 01 DW   DDUP,CSTOR,DOLIT,1,PLUS   ;save count
1012   64 10 68 0F 4E 10 84 06 DW   SWAP,CMOVE,RFROM,EXIT   ;move string
101A                             ;   ALIGNED     ( b -- a )
101A                             ;               Align address to the cell boundary.
101A                          ;*Macro unroll: mCOLON  7,'ALIGNED', ALGND
101A                          ;*Macro unroll:  mCODE 7, "ALIGNED", ALGND
101A                          ALIGN   2   
101A                ALGND:       
101A                VVCODE:   .SET   $   
101A                VVLEN:    .SET   (7 & 01FH) / CELLL   
1508                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1508                VVNAME:   .SET   $   
1508   1A 10 18 15            DW   vvCODE,vvLINK   
150C                VVLINK:   .SET   $   
150C   07 41 4C 49 47 4E 45 44 DB   7,"ALIGNED"   
101A                          .ORG   vvCODE   
101A   00                     NOP      
101B   CD 36 06               CALL   doLIST   
101E   A4 03 C6 03 BC 03      DW   ONEP,TWSLA,TWSTA   
1024   84 06                  DW   EXIT   
1026                             ; GREETING:       .cstr   "Type something\r\n"
1026   44 49 56 20 42 59 20 5A 45 52 4F 00 ERR_DIVZERO:   .CSTR   "DIV BY ZERO"   ;-10
1032   4F 55 54 20 4F 46 20 52 41 4E 47 45 00 ERR_OUTOFRANGE:   .CSTR   "OUT OF RANGE"   ;-11
103F                             ;   >R          ( w -- )
103F                             ;               Push the data stack to the return stack.
103F                          ;*Macro unroll: mCODE	COMPO+2, '>R', ToR
103F                          ALIGN   2   
1040                TOR:         
1040                VVCODE:   .SET   $   
1040                VVLEN:    .SET   (COMPO+2 & 01FH) / CELLL   
14E0                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
14E0                VVNAME:   .SET   $   
14E0   40 10 0C 15            DW   vvCODE,vvLINK   
14E4                VVLINK:   .SET   $   
14E4   22 3E 52               DB   COMPO+2,">R"   
1040                          .ORG   vvCODE   
1040   DD 2B                  DEC   IX   
1042   DD 70 00               LD   (IX+0),B   
1045   DD 2B                  DEC   IX   
1047   DD 71 00               LD   (IX+0),C   
104A   C1                     POP   BC   
104B                          ;*Macro unroll: 	mNEXT
104B   EB                     EX   DE,HL   
104C   FD E9                  JP   (IY)   
104E                             ;   R>          ( -- w )
104E                             ;               Pop the return stack to the data stack.
104E                          ;*Macro unroll: mCODE	COMPO+2, 'R>', RFrom
104E                          ALIGN   2   
104E                RFROM:       
104E                VVCODE:   .SET   $   
104E                VVLEN:    .SET   (COMPO+2 & 01FH) / CELLL   
14B8                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
14B8                VVNAME:   .SET   $   
14B8   4E 10 E4 14            DW   vvCODE,vvLINK   
14BC                VVLINK:   .SET   $   
14BC   22 52 3E               DB   COMPO+2,"R>"   
104E                          .ORG   vvCODE   
104E   C5                     PUSH   BC   
104F   DD 4E 00               LD   C,(IX+0)   
1052   DD 23                  INC   IX   
1054   DD 46 00               LD   B,(IX+0)   
1057   DD 23                  INC   IX   
1059                          ;*Macro unroll: 	mNEXT
1059   EB                     EX   DE,HL   
105A   FD E9                  JP   (IY)   
105C                             ;   DUP         ( w -- w w )
105C                             ;               Duplicate the top stack item.
105C                          ;*Macro unroll: mCODE	3, 'DUP', DUPP
105C                          ALIGN   2   
105C                DUPP:        
105C                VVCODE:   .SET   $   
105C                VVLEN:    .SET   (3 & 01FH) / CELLL   
14B0                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
14B0                VVNAME:   .SET   $   
14B0   5C 10 BC 14            DW   vvCODE,vvLINK   
14B4                VVLINK:   .SET   $   
14B4   03 44 55 50            DB   3,"DUP"   
105C                          .ORG   vvCODE   
105C   C5                     PUSH   BC   
105D                          ;*Macro unroll:  mNEXT
105D   EB                     EX   DE,HL   
105E   FD E9                  JP   (IY)   
1060                             ;   DROP	( x -- )			\ CORE
1060                             ;		Discard top stack item.
1060                          ;*Macro unroll: mCODE	4, 'DROP', DROP
1060                          ALIGN   2   
1060                DROP:        
1060                VVCODE:   .SET   $   
1060                VVLEN:    .SET   (4 & 01FH) / CELLL   
14A6                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
14A6                VVNAME:   .SET   $   
14A6   60 10 B4 14            DW   vvCODE,vvLINK   
14AA                VVLINK:   .SET   $   
14AA   04 44 52 4F 50         DB   4,"DROP"   
1060                          .ORG   vvCODE   
1060   C1                     POP   BC   
1061                          ;*Macro unroll:  mNEXT
1061   EB                     EX   DE,HL   
1062   FD E9                  JP   (IY)   
1064                             ;   SWAP        ( w1 w2 -- w2 w1 )
1064                             ;               Exchange top two stack items.
1064                          ;*Macro unroll: mCODE	4, 'SWAP', SWAP
1064                          ALIGN   2   
1064                SWAP:        
1064                VVCODE:   .SET   $   
1064                VVLEN:    .SET   (4 & 01FH) / CELLL   
149C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
149C                VVNAME:   .SET   $   
149C   64 10 AA 14            DW   vvCODE,vvLINK   
14A0                VVLINK:   .SET   $   
14A0   04 53 57 41 50         DB   4,"SWAP"   
1064                          .ORG   vvCODE   
1064   E1                     POP   HL   
1065   C5                     PUSH   BC   
1066   44                     LD   B,H   
1067   4D                     LD   C,L   
1068                          ;*Macro unroll: 	mNEXT
1068   EB                     EX   DE,HL   
1069   FD E9                  JP   (IY)   
106B                             ;   OVER        ( w1 w2 -- w1 w2 w1 )
106B                             ;               Copy second stack item to top.
106B                          ;*Macro unroll: mCODE	4, 'OVER', OVER
106B                          ALIGN   2   
106C                OVER:        
106C                VVCODE:   .SET   $   
106C                VVLEN:    .SET   (4 & 01FH) / CELLL   
1492                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1492                VVNAME:   .SET   $   
1492   6C 10 A0 14            DW   vvCODE,vvLINK   
1496                VVLINK:   .SET   $   
1496   04 4F 56 45 52         DB   4,"OVER"   
106C                          .ORG   vvCODE   
106C   E1                     POP   HL   
106D   E5                     PUSH   HL   
106E   C5                     PUSH   BC   
106F   44                     LD   B,H   
1070   4D                     LD   C,L   
1071                          ;*Macro unroll: 	mNEXT
1071   EB                     EX   DE,HL   
1072   FD E9                  JP   (IY)   
1074                             ;   ?DUP        ( w -- w w | 0 )
1074                             ;               Dup tos if its is not zero.
1074                          ;*Macro unroll: mCOLON	4,'?DUP', QDUP
1074                          ;*Macro unroll:  mCODE 4, "?DUP", QDUP
1074                          ALIGN   2   
1074                QDUP:        
1074                VVCODE:   .SET   $   
1074                VVLEN:    .SET   (4 & 01FH) / CELLL   
1488                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1488                VVNAME:   .SET   $   
1488   74 10 96 14            DW   vvCODE,vvLINK   
148C                VVLINK:   .SET   $   
148C   04 3F 44 55 50         DB   4,"?DUP"   
1074                          .ORG   vvCODE   
1074   00                     NOP      
1075   CD 36 06               CALL   doLIST   
1078   5C 10 86 0E 80 10      DW   DUPP,QBRAN,QDUP1   
107E   5C 10                  DW   DUPP   
1080                QDUP1:       
1080   84 06                  DW   EXIT   
1082                             ;   ROT         ( w1 w2 w3 -- w2 w3 w1 )
1082                             ;               Rot 3rd item to top.
1082                          ;*Macro unroll: mCOLON	3,'ROT', ROT
1082                          ;*Macro unroll:  mCODE 3, "ROT", ROT
1082                          ALIGN   2   
1082                ROT:         
1082                VVCODE:   .SET   $   
1082                VVLEN:    .SET   (3 & 01FH) / CELLL   
1480                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1480                VVNAME:   .SET   $   
1480   82 10 8C 14            DW   vvCODE,vvLINK   
1484                VVLINK:   .SET   $   
1484   03 52 4F 54            DB   3,"ROT"   
1082                          .ORG   vvCODE   
1082   00                     NOP      
1083   CD 36 06               CALL   doLIST   
1086   40 10 64 10 4E 10 64 10 84 06 DW   ToR,SWAP,RFrom,SWAP,EXIT   
1090                             ;   2DROP       ( w w -- )
1090                             ;               Discard two items on stack.
1090                          ;*Macro unroll: mCOLON	5,'2DROP',DDROP
1090                          ;*Macro unroll:  mCODE 5, "2DROP", DDROP
1090                          ALIGN   2   
1090                DDROP:       
1090                VVCODE:   .SET   $   
1090                VVLEN:    .SET   (5 & 01FH) / CELLL   
1476                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1476                VVNAME:   .SET   $   
1476   90 10 84 14            DW   vvCODE,vvLINK   
147A                VVLINK:   .SET   $   
147A   05 32 44 52 4F 50      DB   5,"2DROP"   
1090                          .ORG   vvCODE   
1090   00                     NOP      
1091   CD 36 06               CALL   doLIST   
1094   60 10 60 10 84 06      DW   DROP,DROP,EXIT   
109A                             ;   2DUP        ( w1 w2 -- w1 w2 w1 w2 )
109A                             ;               Duplicate top two items.
109A                          ;*Macro unroll: mCOLON	4,'2DUP',DDUP
109A                          ;*Macro unroll:  mCODE 4, "2DUP", DDUP
109A                          ALIGN   2   
109A                DDUP:        
109A                VVCODE:   .SET   $   
109A                VVLEN:    .SET   (4 & 01FH) / CELLL   
146C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
146C                VVNAME:   .SET   $   
146C   9A 10 7A 14            DW   vvCODE,vvLINK   
1470                VVLINK:   .SET   $   
1470   04 32 44 55 50         DB   4,"2DUP"   
109A                          .ORG   vvCODE   
109A   00                     NOP      
109B   CD 36 06               CALL   doLIST   
109E   6C 10 6C 10 84 06      DW   OVER,OVER,EXIT   
10A4                             ;   2SWAP        ( w1 w2 w3 w4 -- w3 w4 w1 w2 )
10A4                             ;               Exchange top two items.
10A4                          ;*Macro unroll: mCOLON	5,'2SWAP',TwoSWAP
10A4                          ;*Macro unroll:  mCODE 5, "2SWAP", TwoSWAP
10A4                          ALIGN   2   
10A4                TWOSWAP:      
10A4                VVCODE:   .SET   $   
10A4                VVLEN:    .SET   (5 & 01FH) / CELLL   
1462                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1462                VVNAME:   .SET   $   
1462   A4 10 70 14            DW   vvCODE,vvLINK   
1466                VVLINK:   .SET   $   
1466   05 32 53 57 41 50      DB   5,"2SWAP"   
10A4                          .ORG   vvCODE   
10A4   00                     NOP      
10A5   CD 36 06               CALL   doLIST   
10A8   82 10 40 10 82 10 4E 10 84 06 DW   ROT,ToR,ROT,RFrom,EXIT   
10B2                             ;   PICK        ( ... +n -- ... w )
10B2                             ;               Copy the nth stack item to tos.
10B2                          ;*Macro unroll: mCOLON  4,'PICK',PICK
10B2                          ;*Macro unroll:  mCODE 4, "PICK", PICK
10B2                          ALIGN   2   
10B2                PICK:        
10B2                VVCODE:   .SET   $   
10B2                VVLEN:    .SET   (4 & 01FH) / CELLL   
1458                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1458                VVNAME:   .SET   $   
1458   B2 10 66 14            DW   vvCODE,vvLINK   
145C                VVLINK:   .SET   $   
145C   04 50 49 43 4B         DB   4,"PICK"   
10B2                          .ORG   vvCODE   
10B2   00                     NOP      
10B3   CD 36 06               CALL   doLIST   
10B6   44 06 01 00 7A 01 8E 03 DW   DOLIT,1,PLUS,CELLS   
10BE   DE 0E 7A 01 AC 0E 84 06 DW   SPAT,PLUS,AT,EXIT   
10C6                             ;   DEPTH       ( -- n )
10C6                             ;               Return the depth of the data stack.
10C6                          ;*Macro unroll: mCOLON	5,'DEPTH',DEPTH
10C6                          ;*Macro unroll:  mCODE 5, "DEPTH", DEPTH
10C6                          ALIGN   2   
10C6                DEPTH:       
10C6                VVCODE:   .SET   $   
10C6                VVLEN:    .SET   (5 & 01FH) / CELLL   
144E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
144E                VVNAME:   .SET   $   
144E   C6 10 5C 14            DW   vvCODE,vvLINK   
1452                VVLINK:   .SET   $   
1452   05 44 45 50 54 48      DB   5,"DEPTH"   
10C6                          .ORG   vvCODE   
10C6   00                     NOP      
10C7   CD 36 06               CALL   doLIST   
10CA   DE 0E DC 10 AC 0E 64 10 B4 01 DW   SPAT,SZero,AT,SWAP,SUBB   
10D4   44 06 02 00 0C 03 84 06 DW   DOLIT,CELLL,Slash,EXIT   
10DC                             ;   SP0         ( -- a )
10DC                             ;               Pointer to bottom of the data stack.
10DC                          ;*Macro unroll: mUSER   3,'SP0',SZERO
10DC                          ;*Macro unroll: 	mCODE 3, "SP0", SZERO
10DC                          ALIGN   2   
10DC                SZERO:       
10DC                VVCODE:   .SET   $   
10DC                VVLEN:    .SET   (3 & 01FH) / CELLL   
1446                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1446                VVNAME:   .SET   $   
1446   DC 10 52 14            DW   vvCODE,vvLINK   
144A                VVLINK:   .SET   $   
144A   03 53 50 30            DB   3,"SP0"   
10DC                          .ORG   vvCODE   
10DC   00                     NOP      
10DD   CD 36 06               CALL   doLIST   
10E0   5C 06 00 00            DW   DoUSE,vvUSER   
10E4                VVUSER:   .SET   vvUSER + CELLL   
10E4                             ;   RP0         ( -- a )
10E4                             ;               Pointer to bottom of the return stack.
10E4                          ;*Macro unroll: mUSER   3,'RP0',RZERO
10E4                          ;*Macro unroll: 	mCODE 3, "RP0", RZERO
10E4                          ALIGN   2   
10E4                RZERO:       
10E4                VVCODE:   .SET   $   
10E4                VVLEN:    .SET   (3 & 01FH) / CELLL   
143E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
143E                VVNAME:   .SET   $   
143E   E4 10 4A 14            DW   vvCODE,vvLINK   
1442                VVLINK:   .SET   $   
1442   03 52 50 30            DB   3,"RP0"   
10E4                          .ORG   vvCODE   
10E4   00                     NOP      
10E5   CD 36 06               CALL   doLIST   
10E8   5C 06 02 00            DW   DoUSE,vvUSER   
10EC                VVUSER:   .SET   vvUSER + CELLL   
10EC                             ;   '?KEY       ( -- a )
10EC                             ;               Execution vector of ?KEY.
10EC                          ;*Macro unroll: hUSER   5,"'?KEY",TQKEY
10EC                          ;*Macro unroll: 	hCODE 5, "'?KEY", TQKEY
10EC                          ALIGN   2   
10EC                TQKEY:       
10EC   00                     NOP      
10ED   CD 36 06               CALL   doLIST   
10F0   5C 06 04 00            DW   DoUSE,vvUSER   
10F4                VVUSER:   .SET   vvUSER + CELLL   
10F4                             ;   'EMIT       ( -- a )
10F4                             ;               Execution vector of EMIT.
10F4                          ;*Macro unroll: hUSER   5,"'EMIT",TEMIT
10F4                          ;*Macro unroll: 	hCODE 5, "'EMIT", TEMIT
10F4                          ALIGN   2   
10F4                TEMIT:       
10F4   00                     NOP      
10F5   CD 36 06               CALL   doLIST   
10F8   5C 06 06 00            DW   DoUSE,vvUSER   
10FC                VVUSER:   .SET   vvUSER + CELLL   
10FC                             ;   'EXPECT     ( -- a )
10FC                             ;               Execution vector of EXPECT.
10FC                          ;*Macro unroll: hUSER   7,"'EXPECT",TEXPE
10FC                          ;*Macro unroll: 	hCODE 7, "'EXPECT", TEXPE
10FC                          ALIGN   2   
10FC                TEXPE:       
10FC   00                     NOP      
10FD   CD 36 06               CALL   doLIST   
1100   5C 06 08 00            DW   DoUSE,vvUSER   
1104                VVUSER:   .SET   vvUSER + CELLL   
1104                             ;   'TAP        ( -- a )
1104                             ;               Execution vector of TAP.
1104                          ;*Macro unroll: hUSER   4,"'TAP",TTAP
1104                          ;*Macro unroll: 	hCODE 4, "'TAP", TTAP
1104                          ALIGN   2   
1104                TTAP:        
1104   00                     NOP      
1105   CD 36 06               CALL   doLIST   
1108   5C 06 0A 00            DW   DoUSE,vvUSER   
110C                VVUSER:   .SET   vvUSER + CELLL   
110C                             ;   'ECHO       ( -- a )
110C                             ;               Execution vector of ECHO.
110C                          ;*Macro unroll: hUSER   5,"'ECHO",TECHO
110C                          ;*Macro unroll: 	hCODE 5, "'ECHO", TECHO
110C                          ALIGN   2   
110C                TECHO:       
110C   00                     NOP      
110D   CD 36 06               CALL   doLIST   
1110   5C 06 0C 00            DW   DoUSE,vvUSER   
1114                VVUSER:   .SET   vvUSER + CELLL   
1114                             ;   'PROMPT     ( -- a )
1114                             ;               Execution vector of PROMPT.
1114                          ;*Macro unroll: hUSER   7,"'PROMPT",TPROM
1114                          ;*Macro unroll: 	hCODE 7, "'PROMPT", TPROM
1114                          ALIGN   2   
1114                TPROM:       
1114   00                     NOP      
1115   CD 36 06               CALL   doLIST   
1118   5C 06 0E 00            DW   DoUSE,vvUSER   
111C                VVUSER:   .SET   vvUSER + CELLL   
111C                             ;   BASE        ( -- a )
111C                             ;               Storage of the radix base for numeric I/O.
111C                          ;*Macro unroll: mUSER   4,'BASE',BASE
111C                          ;*Macro unroll: 	mCODE 4, "BASE", BASE
111C                          ALIGN   2   
111C                BASE:        
111C                VVCODE:   .SET   $   
111C                VVLEN:    .SET   (4 & 01FH) / CELLL   
1434                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1434                VVNAME:   .SET   $   
1434   1C 11 42 14            DW   vvCODE,vvLINK   
1438                VVLINK:   .SET   $   
1438   04 42 41 53 45         DB   4,"BASE"   
111C                          .ORG   vvCODE   
111C   00                     NOP      
111D   CD 36 06               CALL   doLIST   
1120   5C 06 10 00            DW   DoUSE,vvUSER   
1124                VVUSER:   .SET   vvUSER + CELLL   
1124                             ;   tmp         ( -- a )
1124                             ;               A temporary storage location used in parse and find.
1124                          ;*Macro unroll: hUSER   COMPO+3,'tmp',TEMP
1124                          ;*Macro unroll: 	hCODE COMPO+3, "tmp", TEMP
1124                          ALIGN   2   
1124                TEMP:        
1124   00                     NOP      
1125   CD 36 06               CALL   doLIST   
1128   5C 06 12 00            DW   DoUSE,vvUSER   
112C                VVUSER:   .SET   vvUSER + CELLL   
112C                             ;   SPAN        ( -- a )
112C                             ;               Hold character count received by EXPECT.
112C                          ;*Macro unroll: hUSER   4,'SPAN',SPAN
112C                          ;*Macro unroll: 	hCODE 4, "SPAN", SPAN
112C                          ALIGN   2   
112C                SPAN:        
112C   00                     NOP      
112D   CD 36 06               CALL   doLIST   
1130   5C 06 14 00            DW   DoUSE,vvUSER   
1134                VVUSER:   .SET   vvUSER + CELLL   
1134                             ;   >IN         ( -- a )
1134                             ;               Hold the character pointer while parsing input stream.
1134                          ;*Macro unroll: mUSER   3,'>IN',INN
1134                          ;*Macro unroll: 	mCODE 3, ">IN", INN
1134                          ALIGN   2   
1134                INN:         
1134                VVCODE:   .SET   $   
1134                VVLEN:    .SET   (3 & 01FH) / CELLL   
142C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
142C                VVNAME:   .SET   $   
142C   34 11 38 14            DW   vvCODE,vvLINK   
1430                VVLINK:   .SET   $   
1430   03 3E 49 4E            DB   3,">IN"   
1134                          .ORG   vvCODE   
1134   00                     NOP      
1135   CD 36 06               CALL   doLIST   
1138   5C 06 16 00            DW   DoUSE,vvUSER   
113C                VVUSER:   .SET   vvUSER + CELLL   
113C                             ;   #TIB        ( -- a )
113C                             ;               Hold the current count and address of the terminal input buffer.
113C                          ;*Macro unroll: hUSER   4,'#TIB',NTIB
113C                          ;*Macro unroll: 	hCODE 4, "#TIB", NTIB
113C                          ALIGN   2   
113C                NTIB:        
113C   00                     NOP      
113D   CD 36 06               CALL   doLIST   
1140   5C 06 18 00            DW   DoUSE,vvUSER   
1144                VVUSER:   .SET   vvUSER + CELLL   
1144                VVUSER:   .SET   vvUSER + CELLL   
1144                             ;   CSP         ( -- a )
1144                             ;               Hold the stack pointer for error checking.
1144                          ;*Macro unroll: hUSER   3,'CSP',CSP
1144                          ;*Macro unroll: 	hCODE 3, "CSP", CSP
1144                          ALIGN   2   
1144                CSP:         
1144   00                     NOP      
1145   CD 36 06               CALL   doLIST   
1148   5C 06 1C 00            DW   DoUSE,vvUSER   
114C                VVUSER:   .SET   vvUSER + CELLL   
114C                             ;   'EVAL       ( -- a )
114C                             ;               Execution vector of EVAL.
114C                          ;*Macro unroll: hUSER   5,"'EVAL",TEVAL
114C                          ;*Macro unroll: 	hCODE 5, "'EVAL", TEVAL
114C                          ALIGN   2   
114C                TEVAL:       
114C   00                     NOP      
114D   CD 36 06               CALL   doLIST   
1150   5C 06 1E 00            DW   DoUSE,vvUSER   
1154                VVUSER:   .SET   vvUSER + CELLL   
1154                             ;   'NUMBER     ( -- a )
1154                             ;               Execution vector of NUMBER?.
1154                          ;*Macro unroll: hUSER   7,"'NUMBER",TNUMB
1154                          ;*Macro unroll: 	hCODE 7, "'NUMBER", TNUMB
1154                          ALIGN   2   
1154                TNUMB:       
1154   00                     NOP      
1155   CD 36 06               CALL   doLIST   
1158   5C 06 20 00            DW   DoUSE,vvUSER   
115C                VVUSER:   .SET   vvUSER + CELLL   
115C                             ;   HLD         ( -- a )
115C                             ;               Hold a pointer in building a numeric output string.
115C                          ;*Macro unroll: hUSER   3,'HLD',HLD
115C                          ;*Macro unroll: 	hCODE 3, "HLD", HLD
115C                          ALIGN   2   
115C                HLD:         
115C   00                     NOP      
115D   CD 36 06               CALL   doLIST   
1160   5C 06 22 00            DW   DoUSE,vvUSER   
1164                VVUSER:   .SET   vvUSER + CELLL   
1164                             ;   HANDLER     ( -- a )
1164                             ;               Hold the return stack pointer for error handling.
1164                          ;*Macro unroll: hUSER   7,'HANDLER',HANDL
1164                          ;*Macro unroll: 	hCODE 7, "HANDLER", HANDL
1164                          ALIGN   2   
1164                HANDL:       
1164   00                     NOP      
1165   CD 36 06               CALL   doLIST   
1168   5C 06 24 00            DW   DoUSE,vvUSER   
116C                VVUSER:   .SET   vvUSER + CELLL   
116C                             ;   CONTEXT     ( -- a )
116C                             ;               A area to specify vocabulary search order.
116C                          ;*Macro unroll: hUSER   7,'CONTEXT',CNTXT
116C                          ;*Macro unroll: 	hCODE 7, "CONTEXT", CNTXT
116C                          ALIGN   2   
116C                CNTXT:       
116C   00                     NOP      
116D   CD 36 06               CALL   doLIST   
1170   5C 06 26 00            DW   DoUSE,vvUSER   
1174                VVUSER:   .SET   vvUSER + CELLL   
1174                VVUSER:   .SET   vvUSER + VOCSS * CELLL   ;vocabulary stack
1174                             ;   CURRENT     ( -- a )
1174                             ;               Point to the vocabulary to be extended.
1174                          ;*Macro unroll: hUSER   7,'CURRENT',CRRNT
1174                          ;*Macro unroll: 	hCODE 7, "CURRENT", CRRNT
1174                          ALIGN   2   
1174                CRRNT:       
1174   00                     NOP      
1175   CD 36 06               CALL   doLIST   
1178   5C 06 38 00            DW   DoUSE,vvUSER   
117C                VVUSER:   .SET   vvUSER + CELLL   
117C                VVUSER:   .SET   vvUSER + CELLL   ;vocabulary link pointer
117C                             ;   CP          ( -- a )
117C                             ;               Point to the top of the code dictionary.
117C                          ;*Macro unroll: hUSER   2,'CP',CP
117C                          ;*Macro unroll: 	hCODE 2, "CP", CP
117C                          ALIGN   2   
117C                CP:          
117C   00                     NOP      
117D   CD 36 06               CALL   doLIST   
1180   5C 06 3C 00            DW   DoUSE,vvUSER   
1184                VVUSER:   .SET   vvUSER + CELLL   
1184                             ;   NP          ( -- a )
1184                             ;               Point to the bottom of the name dictionary.
1184                          ;*Macro unroll: hUSER   2,'NP',NP
1184                          ;*Macro unroll: 	hCODE 2, "NP", NP
1184                          ALIGN   2   
1184                NP:          
1184   00                     NOP      
1185   CD 36 06               CALL   doLIST   
1188   5C 06 3E 00            DW   DoUSE,vvUSER   
118C                VVUSER:   .SET   vvUSER + CELLL   
118C                             ;   LAST        ( -- a )
118C                             ;               Point to the last name in the name dictionary.
118C                          ;*Macro unroll: mUSER   4,'LAST',LAST
118C                          ;*Macro unroll: 	mCODE 4, "LAST", LAST
118C                          ALIGN   2   
118C                LAST:        
118C                VVCODE:   .SET   $   
118C                VVLEN:    .SET   (4 & 01FH) / CELLL   
1422                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1422                VVNAME:   .SET   $   
1422   8C 11 30 14            DW   vvCODE,vvLINK   
1426                VVLINK:   .SET   $   
1426   04 4C 41 53 54         DB   4,"LAST"   
118C                          .ORG   vvCODE   
118C   00                     NOP      
118D   CD 36 06               CALL   doLIST   
1190   5C 06 40 00            DW   DoUSE,vvUSER   
1194                VVUSER:   .SET   vvUSER + CELLL   
1194                             ;   forth       ( -- a )
1194                             ;               Point to the last name in the name dictionary.
1194                          ;*Macro unroll: hUSER   5,'forth',VFRTH
1194                          ;*Macro unroll: 	hCODE 5, "forth", VFRTH
1194                          ALIGN   2   
1194                VFRTH:       
1194   00                     NOP      
1195   CD 36 06               CALL   doLIST   
1198   5C 06 42 00            DW   DoUSE,vvUSER   
119C                VVUSER:   .SET   vvUSER + CELLL   
119C                             ;   _TYPE       ( b u -- )
119C                             ;               Display a string. Filter non-printing characters.
119C                          ;*Macro unroll: mCOLON  5,'_TYPE',UTYPE
119C                          ;*Macro unroll:  mCODE 5, "_TYPE", UTYPE
119C                          ALIGN   2   
119C                UTYPE:       
119C                VVCODE:   .SET   $   
119C                VVLEN:    .SET   (5 & 01FH) / CELLL   
1418                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1418                VVNAME:   .SET   $   
1418   9C 11 26 14            DW   vvCODE,vvLINK   
141C                VVLINK:   .SET   $   
141C   05 5F 54 59 50 45      DB   5,"_TYPE"   
119C                          .ORG   vvCODE   
119C   00                     NOP      
119D   CD 36 06               CALL   doLIST   
11A0   40 10                  DW   TOR   ;start count down loop
11A2   92 0E B4 11            DW   BRAN,UTYP2   ;skip first pass
11A6                UTYP1:       
11A6   5C 10 BC 0E 82 07 E8 0B DW   DUPP,CAT,TCHAR,EMIT   ;display only printable
11AE   44 06 01 00 7A 01      DW   DOLIT,1,PLUS   ;increment address
11B4                UTYP2:       
11B4   90 06 A6 11            DW   DONXT,UTYP1   ;loop till done
11B8   60 10 84 06            DW   DROP,EXIT   
11BC                             ;   dm+         ( a u -- a )
11BC                             ;               Dump u bytes from , leaving a+u on the stack.
11BC                          ;*Macro unroll: hCOLON  3,'dm+',DMP
11BC                          ;*Macro unroll:  hCODE 3, "dm+", DMP
11BC                          ALIGN   2   
11BC                DMP:         
11BC   00                     NOP      
11BD   CD 36 06               CALL   doLIST   
11C0   6C 10 44 06 04 00 B0 0C DW   OVER,DOLIT,4,UDOTR   ;display address
11C8   18 0C 40 10            DW   SPACE,TOR   ;start count down loop
11CC   92 0E E0 11            DW   BRAN,PDUM2   ;skip first pass
11D0                PDUM1:       
11D0   5C 10 BC 0E 44 06 03 00 B0 0C DW   DUPP,CAT,DOLIT,3,UDOTR   ;display numeric data
11DA   44 06 01 00 7A 01      DW   DOLIT,1,PLUS   ;increment address
11E0                PDUM2:       
11E0   90 06 D0 11            DW   DONXT,PDUM1   ;loop till done
11E4   84 06                  DW   EXIT   
11E6                             ;   DUMP        ( a u -- )
11E6                             ;               Dump u bytes from a, in a formatted manner.
11E6                          ;*Macro unroll: mCOLON  4,'DUMP',DUMP
11E6                          ;*Macro unroll:  mCODE 4, "DUMP", DUMP
11E6                          ALIGN   2   
11E6                DUMP:        
11E6                VVCODE:   .SET   $   
11E6                VVLEN:    .SET   (4 & 01FH) / CELLL   
140E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
140E                VVNAME:   .SET   $   
140E   E6 11 1C 14            DW   vvCODE,vvLINK   
1412                VVLINK:   .SET   $   
1412   04 44 55 4D 50         DB   4,"DUMP"   
11E6                          .ORG   vvCODE   
11E6   00                     NOP      
11E7   CD 36 06               CALL   doLIST   
11EA   1C 11 AC 0E 40 10 5C 07 DW   BASE,AT,TOR,HEX   ;save radix, set hex
11F2   44 06 10 00 0C 03      DW   DOLIT,16,SLASH   ;change count to lines
11F8   40 10                  DW   TOR   ;start count down loop
11FA                DUMP1:       
11FA   76 0C 44 06 10 00 9A 10 BC 11 DW   CR,DOLIT,16,DDUP,DMP   ;display numeric
1204   82 10 82 10            DW   ROT,ROT   
1208   18 0C 18 0C 9C 11      DW   SPACE,SPACE,UTYPE   ;display printable characters
120E   F4 0B 84 01            DW   NUFQ,INVER   ;user control
1212   86 0E 1E 12            DW   QBRAN,DUMP2   
1216   90 06 FA 11            DW   DONXT,DUMP1   ;loop till done
121A   92 0E 22 12            DW   BRAN,DUMP3   
121E                DUMP2:       
121E   4E 10 60 10            DW   RFROM,DROP   ;cleanup loop stack, early exit
1222                DUMP3:       
1222   60 10 4E 10 1C 11 A2 0E DW   DROP,RFROM,BASE,STORE   ;reSTORE radix
122A   84 06                  DW   EXIT   
122C                             ;   .S          ( ... -- ... )
122C                             ;               Display the contents of the data stack.
122C                          ;*Macro unroll: mCOLON  2,'.S',DOTS
122C                          ;*Macro unroll:  mCODE 2, ".S", DOTS
122C                          ALIGN   2   
122C                DOTS:        
122C                VVCODE:   .SET   $   
122C                VVLEN:    .SET   (2 & 01FH) / CELLL   
1406                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1406                VVNAME:   .SET   $   
1406   2C 12 12 14            DW   vvCODE,vvLINK   
140A                VVLINK:   .SET   $   
140A   02 2E 53               DB   2,".S"   
122C                          .ORG   vvCODE   
122C   00                     NOP      
122D   CD 36 06               CALL   doLIST   
1230   76 0C C6 10            DW   CR,DEPTH   ;stack depth
1234   40 10                  DW   TOR   ;start count down loop
1236   92 0E 40 12            DW   BRAN,DOTS2   ;skip first pass
123A                DOTS1:       
123A   C4 0E B2 10 D8 0C      DW   RAT,PICK,DOT   ;index stack, display contents
1240                DOTS2:       
1240   90 06 3A 12            DW   DONXT,DOTS1   ;loop till done
1244                          ;*Macro unroll:  mDSTR DOTQP,' <sp'
1244   90 0C                  DW   DOTQP   
1246                VVLEN:    .SET   $   
1246   00 20 3C 73 70         DB   0," <sp"   
124B                VVCODE:   .SET   $   
1246                          .ORG   vvLEN   
1246   04                     DB   vvCODE - vvLEN - 1   
124B                          .ORG   vvCODE   
124B   84 06                  DW   EXIT   
124D                             ;   !CSP        ( -- )
124D                             ;               Save stack pointer in CSP for error checking.
124D                             ;   ?CSP        ( -- )
124D                             ;               Abort if stack pointer differs from that saved in CSP.
124D                             ;   >NAME       ( ca -- na | F )
124D                             ;               Convert code address to a name address.
124D                          ;*Macro unroll:  mCOLON  5,'>NAME',TNAME
124D                          ;*Macro unroll:  mCODE 5, ">NAME", TNAME
124D                          ALIGN   2   
124E                TNAME:       
124E                VVCODE:   .SET   $   
124E                VVLEN:    .SET   (5 & 01FH) / CELLL   
13FC                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
13FC                VVNAME:   .SET   $   
13FC   4E 12 0A 14            DW   vvCODE,vvLINK   
1400                VVLINK:   .SET   $   
1400   05 3E 4E 41 4D 45      DB   5,">NAME"   
124E                          .ORG   vvCODE   
124E   00                     NOP      
124F   CD 36 06               CALL   doLIST   
1252   74 11                  DW   CRRNT   ;vocabulary link
1254                TNAM1:       
1254   76 03 AC 0E 74 10      DW   CELLP,AT,QDUP   ;check all vocabularies
125A   86 0E 8C 12            DW   QBRAN,TNAM4   
125E   9A 10                  DW   DDUP   
1260                TNAM2:       
1260   AC 0E 5C 10            DW   AT,DUPP   ;?last word in a vocabulary
1264   86 0E 78 12            DW   QBRAN,TNAM3   
1268   9A 10 96 09 70 01      DW   DDUP,NAMET,XORR   ;compare
126E   86 0E 78 12            DW   QBRAN,TNAM3   
1272   82 03                  DW   CELLM   ;continue with next word
1274   92 0E 60 12            DW   BRAN,TNAM2   
1278                TNAM3:       
1278   64 10 60 10 74 10      DW   SWAP,DROP,QDUP   
127E   86 0E 54 12            DW   QBRAN,TNAM1   
1282   64 10 60 10 64 10 60 10 84 06 DW   SWAP,DROP,SWAP,DROP,EXIT   
128C                TNAM4:       
128C   60 10 44 06 00 00 84 06 DW   DROP,DOLIT,0,EXIT   ;false flag
1294                             ;   .ID         ( na -- )
1294                             ;               Display the name at address.
1294                          ;*Macro unroll: mCOLON  3,'.ID',DOTID
1294                          ;*Macro unroll:  mCODE 3, ".ID", DOTID
1294                          ALIGN   2   
1294                DOTID:       
1294                VVCODE:   .SET   $   
1294                VVLEN:    .SET   (3 & 01FH) / CELLL   
13F4                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
13F4                VVNAME:   .SET   $   
13F4   94 12 00 14            DW   vvCODE,vvLINK   
13F8                VVLINK:   .SET   $   
13F8   03 2E 49 44            DB   3,".ID"   
1294                          .ORG   vvCODE   
1294   00                     NOP      
1295   CD 36 06               CALL   doLIST   
1298   74 10                  DW   QDUP   ;if zero no name
129A   86 0E AA 12            DW   QBRAN,DOTI1   
129E   22 0F 44 06 1F 00 5C 01 DW   COUNT,DOLIT,MASKK,ANDD   ;mask lexicon bits
12A6   9C 11 84 06            DW   UTYPE,EXIT   ;display name string
12AA                DOTI1:       
12AA                          ;*Macro unroll:  mDSTR   DOTQP,' {noName}'
12AA   90 0C                  DW   DOTQP   
12AC                VVLEN:    .SET   $   
12AC   00 20 7B 6E 6F 4E 61 6D 65 7D DB   0," {noName}"   
12B6                VVCODE:   .SET   $   
12AC                          .ORG   vvLEN   
12AC   09                     DB   vvCODE - vvLEN - 1   
12B6                          .ORG   vvCODE   
12B6   84 06                  DW   EXIT   
12B8                             ;   SEE         ( -- ; <string> )
12B8                             ;               A simple decompiler.
12B8                          ;*Macro unroll: mCOLON  3,'SEE',SEE
12B8                          ;*Macro unroll:  mCODE 3, "SEE", SEE
12B8                          ALIGN   2   
12B8                SEE:         
12B8                VVCODE:   .SET   $   
12B8                VVLEN:    .SET   (3 & 01FH) / CELLL   
13EC                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
13EC                VVNAME:   .SET   $   
13EC   B8 12 F8 13            DW   vvCODE,vvLINK   
13F0                VVLINK:   .SET   $   
13F0   03 53 45 45            DB   3,"SEE"   
12B8                          .ORG   vvCODE   
12B8   00                     NOP      
12B9   CD 36 06               CALL   doLIST   
12BC   CE 03                  DW   TICK   ;starting address
12BE   76 0C 76 03            DW   CR,CELLP   
12C2                SEE1:        
12C2   76 03 5C 10 AC 0E 5C 10 DW   CELLP,DUPP,AT,DUPP   ;?does it contain a zero
12CA   86 0E D0 12            DW   QBRAN,SEE2   
12CE   4E 12                  DW   TNAME   ;?is it a name
12D0                SEE2:        
12D0   74 10                  DW   QDUP   ;name address or zero
12D2   86 0E DE 12            DW   QBRAN,SEE3   
12D6   18 0C 94 12            DW   SPACE,DOTID   ;display name
12DA   92 0E E4 12            DW   BRAN,SEE4   
12DE                SEE3:        
12DE   5C 10 AC 0E C8 0C      DW   DUPP,AT,UDOT   ;display number
12E4                SEE4:        
12E4   F4 0B                  DW   NUFQ   ;user control
12E6   86 0E C2 12            DW   QBRAN,SEE1   
12EA   60 10 84 06            DW   DROP,EXIT   
12EE                             ;   WORDS       ( -- )
12EE                             ;               Display the names in the context vocabulary.
12EE                             ;   COLD        ( -- )
12EE                             ;               The hilevel cold start sequence.
12EE                             ; utility words
12EE                             ; report the test number to a numeric output device
12EE                          ;*Macro unroll: mCOLON 2,"T.",TESDOT
12EE                          ;*Macro unroll:  mCODE 2, "T.", TESDOT
12EE                          ALIGN   2   
12EE                TESDOT:      
12EE                VVCODE:   .SET   $   
12EE                VVLEN:    .SET   (2 & 01FH) / CELLL   
13E4                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
13E4                VVNAME:   .SET   $   
13E4   EE 12 F0 13            DW   vvCODE,vvLINK   
13E8                VVLINK:   .SET   $   
13E8   02 54 2E               DB   2,"T."   
12EE                          .ORG   vvCODE   
12EE   00                     NOP      
12EF   CD 36 06               CALL   doLIST   
12F2                             ; DW  DOT
12F2                             ; DW  EXIT
12F2   86 0E FE 12            DW   QBRAN,TESDOT1   
12F6   44 06 58 00 E8 0B 84 06 DW   DOLIT,$58,EMIT,EXIT   
12FE                TESDOT1:      
12FE   44 06 4F 00 E8 0B 84 06 DW   DOLIT,$4F,EMIT,EXIT   
1306                             ; halt the system
1306                          ;*Macro unroll: hCOLON 4,"halt",TESHALT
1306                          ;*Macro unroll:  hCODE 4, "halt", TESHALT
1306                          ALIGN   2   
1306                TESHALT:      
1306   00                     NOP      
1307   CD 36 06               CALL   doLIST   
130A   80 0E                  DW   QUIT   
130C                             ; compute h1 by hashing x1 and h0
130C                             ; ( x1 h0 -- h1 )
130C                             ; : hash ( x1 h0 -- h1 )
130C                             ;  swap 1+ xor
130C                             ; ;
130C                          ;*Macro unroll: hCOLON 4,"hash",TESHASH
130C                          ;*Macro unroll:  hCODE 4, "hash", TESHASH
130C                          ALIGN   2   
130C                TESHASH:      
130C   00                     NOP      
130D   CD 36 06               CALL   doLIST   
1310   64 10 A4 03 70 01      DW   SWAP,ONEP,XORR   
1316   84 06                  DW   EXIT   
1318                             ; hash n items from the stack and return the hash code
1318                             ; ( x1 x2 ... xn n -- h )
1318                             ; : hash-n ( x1 x2 ... xn n -- h )
1318                             ;  0 >R
1318                             ;  BEGIN
1318                             ;   dup 0 >
1318                             ;  WHILE
1318                             ;   swap R> hash >R
1318                             ;   1-
1318                             ;  REPEAT
1318                             ;  drop R>
1318                             ; ;
1318                          ;*Macro unroll: hCOLON 6,"hash-n",TESHASHN
1318                          ;*Macro unroll:  hCODE 6, "hash-n", TESHASHN
1318                          ALIGN   2   
1318                TESHASHN:      
1318   00                     NOP      
1319   CD 36 06               CALL   doLIST   
131C   44 06 00 00 40 10      DW   DOLIT,0,TOR   
1322                TESHASHN1:      
1322   5C 10 44 06 00 00 9A 03 86 0E 3C 13 DW   DUPP,DOLIT,0,GREAT,QBRAN,TESHASHN2   
132E   64 10 4E 10 0C 13 40 10 DW   SWAP,RFROM,TESHASH,TOR   
1336   B0 03 92 0E 22 13      DW   ONEM,BRAN,TESHASHN1   
133C                TESHASHN2:      
133C   60 10 4E 10            DW   DROP,RFROM   
1340   84 06                  DW   EXIT   
1342                             ; start testing
1342                             ; : Tstart
1342                             ;  0 Tcount !
1342                          ;*Macro unroll: mCOLON 6,"Tstart",TESSTRT
1342                          ;*Macro unroll:  mCODE 6, "Tstart", TESSTRT
1342                          ALIGN   2   
1342                TESSTRT:      
1342                VVCODE:   .SET   $   
1342                VVLEN:    .SET   (6 & 01FH) / CELLL   
13D8                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
13D8                VVNAME:   .SET   $   
13D8   42 13 E8 13            DW   vvCODE,vvLINK   
13DC                VVLINK:   .SET   $   
13DC   06 54 73 74 61 72 74   DB   6,"Tstart"   
1342                          .ORG   vvCODE   
1342   00                     NOP      
1343   CD 36 06               CALL   doLIST   
1346   44 06 00 00 8D 24 A2 0E DW   DOLIT,0,TESCNT,STORE   
134E   84 06                  DW   EXIT   
1350                             ; start a unit test
1350                             ; : T{ ( -- )
1350                             ;  Tcount @ 1+ dup T. Tcount !
1350                             ;  depth Tdepth !
1350                          ;*Macro unroll: mCOLON 2,"T{",TESLBR
1350                          ;*Macro unroll:  mCODE 2, "T{", TESLBR
1350                          ALIGN   2   
1350                TESLBR:      
1350                VVCODE:   .SET   $   
1350                VVLEN:    .SET   (2 & 01FH) / CELLL   
13D0                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
13D0                VVNAME:   .SET   $   
13D0   50 13 DC 13            DW   vvCODE,vvLINK   
13D4                VVLINK:   .SET   $   
13D4   02 54 7B               DB   2,"T{"   
1350                          .ORG   vvCODE   
1350   00                     NOP      
1351   CD 36 06               CALL   doLIST   
1354   8D 24 AC 0E A4 03 5C 10 EE 12 8D 24 A2 0E DW   TESCNT,AT,ONEP,DUPP,TESDOT,TESCNT,STORE   
1362   C6 10 8F 24 A2 0E      DW   DEPTH,TESDPTH,STORE   
1368   84 06                  DW   EXIT   
136A                             ; finish a unit test,
136A                             ; : }T ( y1 y2 ... yn -- hy )
136A                             ;  depth Tdepth @ - ( y1 y2 ... yn Ny )
136A                             ;  hash-n ( hy )
136A                             ;  depth Tdepth ! ( hy )
136A                          ;*Macro unroll: mCOLON 2,"}T",TESRBR
136A                          ;*Macro unroll:  mCODE 2, "}T", TESRBR
136A                          ALIGN   2   
136A                TESRBR:      
136A                VVCODE:   .SET   $   
136A                VVLEN:    .SET   (2 & 01FH) / CELLL   
13C8                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
13C8                VVNAME:   .SET   $   
13C8   6A 13 D4 13            DW   vvCODE,vvLINK   
13CC                VVLINK:   .SET   $   
13CC   02 7D 54               DB   2,"}T"   
136A                          .ORG   vvCODE   
136A   00                     NOP      
136B   CD 36 06               CALL   doLIST   
136E   C6 10 8F 24 AC 0E B4 01 DW   DEPTH,TESDPTH,AT,SUBB   
1376   18 13                  DW   TESHASHN   
1378   C6 10 8F 24 A2 0E      DW   DEPTH,TESDPTH,STORE   
137E   84 06                  DW   EXIT   
1380                             ; compare actual output with expected output
1380                             ; : == ( hy x1 x2 ... xn -- )
1380                             ;  depth Tdepth @ - ( hy x1 x2 .. xn Nx )
1380                             ;  hash-n ( hy hx )
1380                             ;  = 0= IF halt THEN
1380                          ;*Macro unroll: mCOLON 2,"==",TESEQ
1380                          ;*Macro unroll:  mCODE 2, "==", TESEQ
1380                          ALIGN   2   
1380                TESEQ:       
1380                VVCODE:   .SET   $   
1380                VVLEN:    .SET   (2 & 01FH) / CELLL   
13C0                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
13C0                VVNAME:   .SET   $   
13C0   80 13 CC 13            DW   vvCODE,vvLINK   
13C4                VVLINK:   .SET   $   
13C4   02 3D 3D               DB   2,"=="   
1380                          .ORG   vvCODE   
1380   00                     NOP      
1381   CD 36 06               CALL   doLIST   
1384   C6 10 8F 24 AC 0E B4 01 DW   DEPTH,TESDPTH,AT,SUBB   
138C   18 13                  DW   TESHASHN   
138E   CE 01 86 0E 96 13      DW   EQUAL,QBRAN,TESEQ1   
1394   06 13                  DW   TESHALT   
1396                TESEQ1:      
1396   84 06                  DW   EXIT   
1398                             ; signal end of testing
1398                             ; : Tend ( -- )
1398                             ;  65535 ( 0xFFFF) T.
1398                             ; ;
1398                          ;*Macro unroll: mCOLON 4,"Tend",TESEND
1398                          ;*Macro unroll:  mCODE 4, "Tend", TESEND
1398                          ALIGN   2   
1398                TESEND:      
1398                VVCODE:   .SET   $   
1398                VVLEN:    .SET   (4 & 01FH) / CELLL   
13B6                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
13B6                VVNAME:   .SET   $   
13B6   98 13 C4 13            DW   vvCODE,vvLINK   
13BA                VVLINK:   .SET   $   
13BA   04 54 65 6E 64         DB   4,"Tend"   
1398                          .ORG   vvCODE   
1398   00                     NOP      
1399   CD 36 06               CALL   doLIST   
139C   44 06 FF FF EE 12      DW   DOLIT,-1,TESDOT   
13A2   84 06                  DW   EXIT   
13A4                LASTN:    EQU   vvNAME+4   ;last name address
2000                          .ORG   END_ROM   
2000                          .ORG   START_RAM   
2000                          IF   TESTMODE   
                    TESTS_START:      
                              LD   HL,DONE   
                              CALL   PRINTSZ   
                              HALT      
                    DONE:     .CSTR   "Done!\r\n"   
2000                          ENDIF      
2000                          DS   DTS   ; data stack size
2200                SPP:         ; SP0 grows down
2200                TIBB:        
2200                          DS   RTS   ; return stack size
2400                RPP:         ; RP0 grows down (into TIBB)
2400                          ALIGN   $100   
2400                SERBUF:   DS   SER_BUFSIZE   
243F   00 00        SERINPTR:   DW   0   
2441   00 00        SERRDPTR:   DW   0   
2443   00 00        SERBUFUSED:   DW   0   
2445                UPP:         
2445   00 00        VARSZERO:   DW   0   ; SP0
2447   00 00        VARRZERO:   DW   0   ; RP0
2449   00 00        VARTQKEY:   DW   0   ; '?KEY
244B   00 00        VARTEMIT:   DW   0   ; 'EMIT
244D   00 00        VARTEXPE:   DW   0   ; 'EXPECT
244F   00 00        VARTTAP:   DW   0   ; 'TAP
2451   00 00        VARTECHO:   DW   0   ; 'ECHO
2453   00 00        VARTPROM:   DW   0   ; 'PROMPT
2455   00 00        VARBASE:   DW   0   ; BASE
2457   00 00        VARTEMP:   DW   0   ; tmp
2459   00 00        VARSPAN:   DW   0   ; SPAN
245B   00 00        VARINN:   DW   0   ; >IN
245D   00 00        VARNTIB:   DW   0   ; #TIB
245F   00 00        VARTIB:   DW   0   ; TIB
2461   00 00        VARCSP:   DW   0   ; CSP
2463   00 00        VARTEVAL:   DW   0   ; 'EVAL
2465   00 00        VARTNUMB:   DW   0   ; 'NUMBER
2467   00 00        VARHLD:   DW   0   ; HLD
2469   00 00        VARHANDL:   DW   0   ; HANDLER
246B   00 00        VARCNTXT:   DW   0   ; CONTEXT pointer
246D   00 00        VARVOCABS:   DW   0   ; vocabulary stack    ???
246F   00 00        VARCRRNT:   DW   0   ; CURRENT pointer
2471   00 00        VARVOCABLP:   DW   0   ; vocabulary link pointer ???
2473   00 00        VARCP:    DW   0   ; CP  for runing phase on RAM
2475   00 00        VARNP:    DW   0   ; NP  for runing phase on RAM
2477   00 00        VARLAST:   DW   0   ; LAST
2479   00 00        VARVFRTH:   DW   0   ; FORTH   \ mullti-user ???
247B   00 00        VARVOCABL:   DW   0   ; vocabulary link       ???
247D                VECTAB:      
247D   00 00        VRST08:   DW   0   
247F   00 00        VRST10:   DW   0   
2481   00 00        VRST18:   DW   0   
2483   00 00        VRST20:   DW   0   
2485   00 00        VRST28:   DW   0   
2487   00 00        VRST30:   DW   0   
2489   00 00        VINT:     DW   0   
248B   00 00        VNMI:     DW   0   
248D   00 00        TESCNT:   DW   0   ; the current test number
248F   00 00        TESDPTH:   DW   0   ; saved stack depth
2491                CPP:         ; grows up
FFFE                          .ORG   END_RAM - 2   
FFFE                NPP:         ; grows down
FFFE                          .END      


TESTMODE:           0000 DEFINED AT LINE 3
MEM_SIZE:           10000 DEFINED AT LINE 1 IN constants.z80
                    > USED AT LINE 3 IN constants.z80
                    > USED AT LINE 12 IN constants.z80
ROM_SIZE:           2000 DEFINED AT LINE 2 IN constants.z80
                    > USED AT LINE 3 IN constants.z80
                    > USED AT LINE 6 IN constants.z80
                    > USED AT LINE 8 IN constants.z80
RAM_SIZE:           E000 DEFINED AT LINE 3 IN constants.z80
                    > USED AT LINE 9 IN constants.z80
START_ROM:          0000 DEFINED AT LINE 5 IN constants.z80
                    > USED AT LINE 8
END_ROM:            2000 DEFINED AT LINE 6 IN constants.z80
                    > USED AT LINE 4 IN word.macro.z80
                    > USED AT LINE 90
START_RAM:          2000 DEFINED AT LINE 8 IN constants.z80
                    > USED AT LINE 9 IN constants.z80
                    > USED AT LINE 91
END_RAM:            10000 DEFINED AT LINE 9 IN constants.z80
                    > USED AT LINE 59 IN variables.z80
BM:                 0000 DEFINED AT LINE 11 IN constants.z80
                    > USED AT LINE 5 IN constants.z80
                    > USED AT LINE 6 IN constants.z80
                    > USED AT LINE 8 IN constants.z80
                    > USED AT LINE 12 IN constants.z80
EM:                 10000 DEFINED AT LINE 12 IN constants.z80
COMPO:              0020 DEFINED AT LINE 14 IN constants.z80
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
IMEDD:              0040 DEFINED AT LINE 15 IN constants.z80
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 133 IN core-compiler.z80
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
MASKK:              001F DEFINED AT LINE 16 IN constants.z80
CHARR:              0001 DEFINED AT LINE 18 IN constants.z80
CELLL:              0002 DEFINED AT LINE 19 IN constants.z80
                    > USED AT LINE 39 IN constants.z80
                    > USED AT LINE 40 IN constants.z80
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 319 IN core-alu.z80
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 324 IN core-alu.z80
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 329 IN core-alu.z80
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 145 IN core-interpret.z80
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 184 IN core-memory.z80
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 90 IN core-stacks.z80
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 33
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 33
                    > USED AT LINE 63
                    > USED AT LINE 63
                    > USED AT LINE 63
                    > USED AT LINE 63
                    > USED AT LINE 63
                    > USED AT LINE 63
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 33
                    > USED AT LINE 63
                    > USED AT LINE 63
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 33
                    > USED AT LINE 63
                    > USED AT LINE 65 IN core-user.z80
                    > USED AT LINE 63
                    > USED AT LINE 63
                    > USED AT LINE 63
                    > USED AT LINE 63
                    > USED AT LINE 63
                    > USED AT LINE 63
                    > USED AT LINE 96 IN core-user.z80
                    > USED AT LINE 63
                    > USED AT LINE 102 IN core-user.z80
                    > USED AT LINE 63
                    > USED AT LINE 63
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 33
                    > USED AT LINE 63
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
BASEE:              000A DEFINED AT LINE 20 IN constants.z80
                    > USED AT LINE 13 IN defaults.z80
VOCSS:              0008 DEFINED AT LINE 21 IN constants.z80
                    > USED AT LINE 96 IN core-user.z80
MAXCHAR:            00FF DEFINED AT LINE 23 IN constants.z80
MAXSIGNED:          7FFF DEFINED AT LINE 24 IN constants.z80
MAXUNSIGNED:        FFFF DEFINED AT LINE 25 IN constants.z80
MAXNEGATIVE:        8000 DEFINED AT LINE 26 IN constants.z80
BKSPP:              0008 DEFINED AT LINE 28 IN constants.z80
                    > USED AT LINE 187 IN core-io.z80
                    > USED AT LINE 189 IN core-io.z80
                    > USED AT LINE 204 IN core-io.z80
LFF:                000A DEFINED AT LINE 29 IN constants.z80
CRR:                000D DEFINED AT LINE 30 IN constants.z80
                    > USED AT LINE 132 IN core-io.z80
SPACEE:             0020 DEFINED AT LINE 31 IN constants.z80
                    > USED AT LINE 74 IN core-format.z80
                    > USED AT LINE 81 IN core-format.z80
TIC:                0027 DEFINED AT LINE 32 IN constants.z80
MINUSS:             002D DEFINED AT LINE 33 IN constants.z80
                    > USED AT LINE 44 IN core-format.z80
UNDERSC:            005F DEFINED AT LINE 34 IN constants.z80
CALLL:              CD00 DEFINED AT LINE 36 IN constants.z80
                    > USED AT LINE 119 IN core-compiler.z80
US:                 003A DEFINED AT LINE 38 IN constants.z80
                    > USED AT LINE 50
RTS:                0200 DEFINED AT LINE 39 IN constants.z80
                    > USED AT LINE 5 IN variables.z80
DTS:                0200 DEFINED AT LINE 40 IN constants.z80
                    > USED AT LINE 2 IN variables.z80
RET_STACK_SIZE:     0100 DEFINED AT LINE 42 IN constants.z80
DATA_STACK_SIZE:    0100 DEFINED AT LINE 43 IN constants.z80
INT_ADDR:           0038 DEFINED AT LINE 45 IN constants.z80
SER_BUFSIZE:        003F DEFINED AT LINE 46 IN constants.z80
                    > USED AT LINE 11 IN interrupt.z80
                    > USED AT LINE 19 IN interrupt.z80
                    > USED AT LINE 21 IN serial.z80
                    > USED AT LINE 9 IN variables.z80
SER_FULLSIZE:       0030 DEFINED AT LINE 47 IN constants.z80
                    > USED AT LINE 28 IN interrupt.z80
SER_EMPTYSIZE:      0005 DEFINED AT LINE 48 IN constants.z80
                    > USED AT LINE 30 IN serial.z80
RTS_HIGH:           00D6 DEFINED AT LINE 50 IN constants.z80
                    > USED AT LINE 30 IN interrupt.z80
RTS_LOW:            0096 DEFINED AT LINE 51 IN constants.z80
                    > USED AT LINE 11 IN serial.z80
                    > USED AT LINE 32 IN serial.z80
TRUEE:              00-1 DEFINED AT LINE 53 IN constants.z80
                    > USED AT LINE 41 IN core-io.z80
FALSEE:             0000 DEFINED AT LINE 54 IN constants.z80
                    > USED AT LINE 34 IN core-io.z80
VVCODE:             1398 DEFINED AT LINE 12
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 42
                    > USED AT LINE 43
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 42
                    > USED AT LINE 43
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 42
                    > USED AT LINE 43
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 42
                    > USED AT LINE 43
                    > USED AT LINE 42
                    > USED AT LINE 43
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 42
                    > USED AT LINE 43
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 42
                    > USED AT LINE 43
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 42
                    > USED AT LINE 43
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
VVNAME:             13B6 DEFINED AT LINE 15
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 88
VVLINK:             13BA DEFINED AT LINE 17
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
VVUSER:             119E DEFINED AT LINE 63
                    > USED AT LINE 32
                    > USED AT LINE 33
                    > USED AT LINE 32
                    > USED AT LINE 33
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 32
                    > USED AT LINE 33
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 32
                    > USED AT LINE 33
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 65 IN core-user.z80
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 96 IN core-user.z80
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 102 IN core-user.z80
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 62
                    > USED AT LINE 63
                    > USED AT LINE 32
                    > USED AT LINE 33
                    > USED AT LINE 62
                    > USED AT LINE 63
RESET:              0000 DEFINED AT LINE 9
RST08:              0008 DEFINED AT LINE 12
RST10:              0010 DEFINED AT LINE 16
RST18:              0018 DEFINED AT LINE 20
RST20:              0020 DEFINED AT LINE 24
RST28:              0028 DEFINED AT LINE 28
RST30:              0030 DEFINED AT LINE 32
RST38:              0038 DEFINED AT LINE 36
RST66:              0066 DEFINED AT LINE 40
INIT:               006C DEFINED AT LINE 42
                    > USED AT LINE 9
SER_INTR:           0093 DEFINED AT LINE 1 IN interrupt.z80
                    > USED AT LINE 43
NOTFULL:            00A8 DEFINED AT LINE 16 IN interrupt.z80
                    > USED AT LINE 12 IN interrupt.z80
NOTWRAP:            00B4 DEFINED AT LINE 22 IN interrupt.z80
                    > USED AT LINE 20 IN interrupt.z80
RTS0:               00C8 DEFINED AT LINE 32 IN interrupt.z80
                    > USED AT LINE 6 IN interrupt.z80
                    > USED AT LINE 14 IN interrupt.z80
                    > USED AT LINE 29 IN interrupt.z80
INIT_IO:            00D1 DEFINED AT LINE 4 IN serial.z80
                    > USED AT LINE 25 IN core-io.z80
RXA:                00E5 DEFINED AT LINE 16 IN serial.z80
                    > USED AT LINE 37 IN core-io.z80
RXA1:               00F2 DEFINED AT LINE 24 IN serial.z80
                    > USED AT LINE 22 IN serial.z80
RXA2:               0105 DEFINED AT LINE 34 IN serial.z80
                    > USED AT LINE 31 IN serial.z80
TXA:                0109 DEFINED AT LINE 40 IN serial.z80
                    > USED AT LINE 49 IN core-io.z80
TXA1:               010A DEFINED AT LINE 42 IN serial.z80
                    > USED AT LINE 45 IN serial.z80
QRXA:               0114 DEFINED AT LINE 50 IN serial.z80
                    > USED AT LINE 32 IN core-io.z80
DEFAULTS:           011A DEFINED AT LINE 3 IN defaults.z80
                    > USED AT LINE 38 IN constants.z80
                    > USED AT LINE 48
UZERO:              011A DEFINED AT LINE 4 IN defaults.z80
                    > USED AT LINE 54 IN core-kernel.z80
                    > USED AT LINE 55 IN core-kernel.z80
DEFSZERO:           011A DEFINED AT LINE 5 IN defaults.z80
DEFRZERO:           011C DEFINED AT LINE 6 IN defaults.z80
DEFTQKEY:           011E DEFINED AT LINE 7 IN defaults.z80
DEFTEMIT:           0120 DEFINED AT LINE 8 IN defaults.z80
DEFTEXPE:           0122 DEFINED AT LINE 9 IN defaults.z80
DEFTTAP:            0124 DEFINED AT LINE 10 IN defaults.z80
DEFTECHO:           0126 DEFINED AT LINE 11 IN defaults.z80
DEFTPROM:           0128 DEFINED AT LINE 12 IN defaults.z80
DEFBASE:            012A DEFINED AT LINE 13 IN defaults.z80
DEFTEMP:            012C DEFINED AT LINE 14 IN defaults.z80
DEFSPAN:            012E DEFINED AT LINE 15 IN defaults.z80
DEFINN:             0130 DEFINED AT LINE 16 IN defaults.z80
DEFNTIB:            0132 DEFINED AT LINE 17 IN defaults.z80
DEFTIB:             0134 DEFINED AT LINE 18 IN defaults.z80
DEFCSP:             0136 DEFINED AT LINE 19 IN defaults.z80
DEFTEVAL:           0138 DEFINED AT LINE 20 IN defaults.z80
DEFTNUMB:           013A DEFINED AT LINE 21 IN defaults.z80
DEFHLD:             013C DEFINED AT LINE 22 IN defaults.z80
DEFHANDL:           013E DEFINED AT LINE 23 IN defaults.z80
DEFCNTXT:           0140 DEFINED AT LINE 24 IN defaults.z80
DEFVOCABS:          0142 DEFINED AT LINE 25 IN defaults.z80
DEFCRRENT:          0144 DEFINED AT LINE 26 IN defaults.z80
DEFVOCABLP:         0146 DEFINED AT LINE 27 IN defaults.z80
DEFCP:              0148 DEFINED AT LINE 28 IN defaults.z80
DEFNP:              014A DEFINED AT LINE 29 IN defaults.z80
DEFLAST:            014C DEFINED AT LINE 30 IN defaults.z80
DEFVFRTH:           014E DEFINED AT LINE 31 IN defaults.z80
DEFVOCABL:          0150 DEFINED AT LINE 32 IN defaults.z80
DEFCOLD:            0152 DEFINED AT LINE 33 IN defaults.z80
ULAST:              0154 DEFINED AT LINE 34 IN defaults.z80
                    > USED AT LINE 55 IN core-kernel.z80
END_DEFAULTS:       0154 DEFINED AT LINE 35 IN defaults.z80
                    > USED AT LINE 38 IN constants.z80
ZLESS:              0154 DEFINED AT LINE 11
                    > USED AT LINE 77 IN core-alu.z80
                    > USED AT LINE 98 IN core-alu.z80
                    > USED AT LINE 104 IN core-alu.z80
                    > USED AT LINE 106 IN core-alu.z80
                    > USED AT LINE 233 IN core-alu.z80
                    > USED AT LINE 250 IN core-alu.z80
                    > USED AT LINE 43 IN core-format.z80
                    > USED AT LINE 57 IN core-interpret.z80
                    > USED AT LINE 71 IN core-interpret.z80
                    > USED AT LINE 256 IN core-interpret.z80
VVLEN:              0002 DEFINED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 41
                    > USED AT LINE 42
                    > USED AT LINE 14
                    > USED AT LINE 41
                    > USED AT LINE 42
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 41
                    > USED AT LINE 42
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 41
                    > USED AT LINE 42
                    > USED AT LINE 41
                    > USED AT LINE 42
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 41
                    > USED AT LINE 42
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 41
                    > USED AT LINE 42
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 41
                    > USED AT LINE 42
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
ANDD:               015C DEFINED AT LINE 11
ORR:                0166 DEFINED AT LINE 11
XORR:               0170 DEFINED AT LINE 11
                    > USED AT LINE 85 IN core-alu.z80
                    > USED AT LINE 94 IN core-alu.z80
                    > USED AT LINE 103 IN core-alu.z80
                    > USED AT LINE 300 IN core-alu.z80
                    > USED AT LINE 217 IN core-io.z80
PLUS:               017A DEFINED AT LINE 11
                    > USED AT LINE 67 IN core-alu.z80
                    > USED AT LINE 72 IN core-alu.z80
                    > USED AT LINE 239 IN core-alu.z80
                    > USED AT LINE 344 IN core-alu.z80
                    > USED AT LINE 44 IN core-compiler.z80
                    > USED AT LINE 215 IN core-io.z80
                    > USED AT LINE 84 IN core-stacks.z80
INVER:              0184 DEFINED AT LINE 11
                    > USED AT LINE 60 IN core-alu.z80
                    > USED AT LINE 65 IN core-alu.z80
                    > USED AT LINE 37 IN core-utils.z80
NEGAT:              0190 DEFINED AT LINE 11
                    > USED AT LINE 72 IN core-alu.z80
                    > USED AT LINE 78 IN core-alu.z80
                    > USED AT LINE 235 IN core-alu.z80
                    > USED AT LINE 243 IN core-alu.z80
                    > USED AT LINE 34 IN core-interpret.z80
DNEGA:              019E DEFINED AT LINE 11
                    > USED AT LINE 302 IN core-alu.z80
SUBB:               01B4 DEFINED AT LINE 11
                    > USED AT LINE 98 IN core-alu.z80
                    > USED AT LINE 106 IN core-alu.z80
                    > USED AT LINE 128 IN core-alu.z80
                    > USED AT LINE 129 IN core-alu.z80
                    > USED AT LINE 57 IN core-interpret.z80
                    > USED AT LINE 82 IN core-interpret.z80
                    > USED AT LINE 135 IN core-interpret.z80
                    > USED AT LINE 185 IN core-memory.z80
ABSS:               01BE DEFINED AT LINE 11
ABS1:               01CC DEFINED AT LINE 79 IN core-alu.z80
EQUAL:              01CE DEFINED AT LINE 11
                    > USED AT LINE 81 IN tester.z80
EQU1:               01DE DEFINED AT LINE 88 IN core-alu.z80
                    > USED AT LINE 86 IN core-alu.z80
ULESS:              01E4 DEFINED AT LINE 11
ULES1:              01FA DEFINED AT LINE 97 IN core-alu.z80
                    > USED AT LINE 95 IN core-alu.z80
LESS:               0200 DEFINED AT LINE 11
                    > USED AT LINE 111 IN core-alu.z80
                    > USED AT LINE 335 IN core-alu.z80
LESS1:              0214 DEFINED AT LINE 105 IN core-alu.z80
MAX:                021A DEFINED AT LINE 11
MAX1:               0228 DEFINED AT LINE 113 IN core-alu.z80
MIN:                022C DEFINED AT LINE 11
MIN1:               023C DEFINED AT LINE 122 IN core-alu.z80
                    > USED AT LINE 120 IN core-alu.z80
WITHI:              0240 DEFINED AT LINE 11
UMPLUS:             0252 DEFINED AT LINE 49
                    > USED AT LINE 50 IN core-alu.z80
UMP2:               025A DEFINED AT LINE 139 IN core-alu.z80
UMP1:               025B DEFINED AT LINE 141 IN core-alu.z80
                    > USED AT LINE 138 IN core-alu.z80
UMMOD:              025E DEFINED AT LINE 11
                    > USED AT LINE 241 IN core-alu.z80
UMSLMOD2:           026A DEFINED AT LINE 11
UMMOD11:            026E DEFINED AT LINE 158 IN core-alu.z80
UMMOD12:            0279 DEFINED AT LINE 169 IN core-alu.z80
UMMOD2:             0293 DEFINED AT LINE 189 IN core-alu.z80
                    > USED AT LINE 157 IN core-alu.z80
UMMOD1:             0299 DEFINED AT LINE 192 IN core-alu.z80
                    > USED AT LINE 168 IN core-alu.z80
UMMOD4:             029F DEFINED AT LINE 195 IN core-alu.z80
                    > USED AT LINE 213 IN core-alu.z80
UMMOD13:            02A7 DEFINED AT LINE 203 IN core-alu.z80
UMMOD3:             02AD DEFINED AT LINE 210 IN core-alu.z80
                    > USED AT LINE 175 IN core-alu.z80
                    > USED AT LINE 179 IN core-alu.z80
                    > USED AT LINE 224 IN core-alu.z80
UMMOD14:            02B1 DEFINED AT LINE 214 IN core-alu.z80
UMMOD5:             02B7 DEFINED AT LINE 221 IN core-alu.z80
                    > USED AT LINE 202 IN core-alu.z80
UMMOD15:            02BB DEFINED AT LINE 225 IN core-alu.z80
MSMOD:              02BC DEFINED AT LINE 11
MMOD1:              02D4 DEFINED AT LINE 236 IN core-alu.z80
                    > USED AT LINE 234 IN core-alu.z80
MMOD2:              02E2 DEFINED AT LINE 240 IN core-alu.z80
                    > USED AT LINE 238 IN core-alu.z80
MMOD3:              02F2 DEFINED AT LINE 244 IN core-alu.z80
                    > USED AT LINE 242 IN core-alu.z80
SLMOD:              02F4 DEFINED AT LINE 11
                    > USED AT LINE 255 IN core-alu.z80
                    > USED AT LINE 260 IN core-alu.z80
MODD:               0302 DEFINED AT LINE 11
SLASH:              030C DEFINED AT LINE 11
UMSTA:              0318 DEFINED AT LINE 11
                    > USED AT LINE 295 IN core-alu.z80
                    > USED AT LINE 301 IN core-alu.z80
UMSTA1:             0320 DEFINED AT LINE 272 IN core-alu.z80
                    > USED AT LINE 285 IN core-alu.z80
UMSTA2:             0327 DEFINED AT LINE 278 IN core-alu.z80
UMSTA5:             032A DEFINED AT LINE 281 IN core-alu.z80
UMSTA3:             032B DEFINED AT LINE 283 IN core-alu.z80
                    > USED AT LINE 277 IN core-alu.z80
                    > USED AT LINE 280 IN core-alu.z80
UMSTA4:             032E DEFINED AT LINE 286 IN core-alu.z80
STAR:               0334 DEFINED AT LINE 11
MSTAR:              033E DEFINED AT LINE 11
                    > USED AT LINE 309 IN core-alu.z80
MSTAR1:             035A DEFINED AT LINE 303 IN core-alu.z80
SSMOD:              035C DEFINED AT LINE 11
                    > USED AT LINE 314 IN core-alu.z80
STASL:              036A DEFINED AT LINE 11
CELLP:              0376 DEFINED AT LINE 11
                    > USED AT LINE 32 IN core-compiler.z80
                    > USED AT LINE 151 IN core-interpret.z80
                    > USED AT LINE 153 IN core-interpret.z80
                    > USED AT LINE 171 IN core-interpret.z80
                    > USED AT LINE 97 IN core-memory.z80
                    > USED AT LINE 102 IN core-memory.z80
                    > USED AT LINE 125 IN core-memory.z80
                    > USED AT LINE 74 IN core-utils.z80
                    > USED AT LINE 107 IN core-utils.z80
                    > USED AT LINE 109 IN core-utils.z80
CELLM:              0382 DEFINED AT LINE 11
                    > USED AT LINE 72 IN core-compiler.z80
                    > USED AT LINE 74 IN core-compiler.z80
                    > USED AT LINE 126 IN core-interpret.z80
                    > USED AT LINE 126 IN core-interpret.z80
                    > USED AT LINE 156 IN core-interpret.z80
                    > USED AT LINE 158 IN core-interpret.z80
                    > USED AT LINE 158 IN core-interpret.z80
                    > USED AT LINE 161 IN core-interpret.z80
                    > USED AT LINE 169 IN core-interpret.z80
                    > USED AT LINE 82 IN core-utils.z80
CELLS:              038E DEFINED AT LINE 11
GREAT:              039A DEFINED AT LINE 11
ONEP:               03A4 DEFINED AT LINE 11
                    > USED AT LINE 193 IN core-memory.z80
                    > USED AT LINE 21 IN tester.z80
ONEM:               03B0 DEFINED AT LINE 11
                    > USED AT LINE 41 IN tester.z80
TWSTA:              03BC DEFINED AT LINE 11
TWSLA:              03C6 DEFINED AT LINE 11
                    > USED AT LINE 193 IN core-memory.z80
TICK:               03CE DEFINED AT LINE 11
                    > USED AT LINE 25 IN core-compiler.z80
                    > USED AT LINE 106 IN core-utils.z80
TICK1:              03DC DEFINED AT LINE 7 IN core-compiler.z80
                    > USED AT LINE 5 IN core-compiler.z80
ALLOT:              03DE DEFINED AT LINE 11
COMMA:              03E8 DEFINED AT LINE 11
                    > USED AT LINE 25 IN core-compiler.z80
                    > USED AT LINE 90 IN core-compiler.z80
                    > USED AT LINE 120 IN core-compiler.z80
BCOMP:              03FA DEFINED AT LINE 11
COMPI:              0404 DEFINED AT LINE 11
                    > USED AT LINE 38 IN core-compiler.z80
                    > USED AT LINE 107 IN core-compiler.z80
                    > USED AT LINE 142 IN core-compiler.z80
                    > USED AT LINE 150 IN core-compiler.z80
                    > USED AT LINE 4 IN core-control.z80
                    > USED AT LINE 14 IN core-control.z80
                    > USED AT LINE 19 IN core-control.z80
                    > USED AT LINE 24 IN core-control.z80
                    > USED AT LINE 30 IN core-control.z80
                    > USED AT LINE 37 IN core-control.z80
                    > USED AT LINE 69 IN core-control.z80
                    > USED AT LINE 74 IN core-control.z80
                    > USED AT LINE 79 IN core-control.z80
LITER:              0416 DEFINED AT LINE 11
                    > USED AT LINE 94 IN core-compiler.z80
STRCQ:              0422 DEFINED AT LINE 49
RECUR:              0438 DEFINED AT LINE 11
UNIQU:              0446 DEFINED AT LINE 11
                    > USED AT LINE 69 IN core-compiler.z80
UNIQ1:              0462 DEFINED AT LINE 60 IN core-compiler.z80
                    > USED AT LINE 57 IN core-compiler.z80
SNAME:              0466 DEFINED AT LINE 11
                    > USED AT LINE 126 IN core-compiler.z80
                    > USED AT LINE 140 IN core-compiler.z80
                    > USED AT LINE 148 IN core-compiler.z80
PNAM1:              0498 DEFINED AT LINE 76 IN core-compiler.z80
                    > USED AT LINE 68 IN core-compiler.z80
SCOMP:              04A2 DEFINED AT LINE 49
                    > USED AT LINE 113 IN core-compiler.z80
SCOM1:              04BE DEFINED AT LINE 89 IN core-compiler.z80
                    > USED AT LINE 87 IN core-compiler.z80
SCOM2:              04C2 DEFINED AT LINE 91 IN core-compiler.z80
                    > USED AT LINE 85 IN core-compiler.z80
SCOM3:              04CE DEFINED AT LINE 95 IN core-compiler.z80
                    > USED AT LINE 93 IN core-compiler.z80
OVERT:              04D0 DEFINED AT LINE 49
SEMIS:              04E0 DEFINED AT LINE 11
RBRAC:              04EE DEFINED AT LINE 11
                    > USED AT LINE 127 IN core-compiler.z80
CALLC:              04FC DEFINED AT LINE 49
                    > USED AT LINE 127 IN core-compiler.z80
COLON:              050A DEFINED AT LINE 11
IMMED:              051C DEFINED AT LINE 11
USER:               0534 DEFINED AT LINE 11
CREAT:              054C DEFINED AT LINE 11
                    > USED AT LINE 156 IN core-compiler.z80
VARIA:              0562 DEFINED AT LINE 11
FOR:                0570 DEFINED AT LINE 11
BEGIN:              057C DEFINED AT LINE 11
NEXT:               0584 DEFINED AT LINE 11
UNTIL:              0590 DEFINED AT LINE 11
AGAIN:              059C DEFINED AT LINE 11
                    > USED AT LINE 43 IN core-control.z80
IFF:                05A8 DEFINED AT LINE 11
                    > USED AT LINE 64 IN core-control.z80
AHEAD:              05BA DEFINED AT LINE 11
                    > USED AT LINE 54 IN core-control.z80
                    > USED AT LINE 59 IN core-control.z80
REPEA:              05CC DEFINED AT LINE 11
THENN:              05DA DEFINED AT LINE 11
AFT:                05E6 DEFINED AT LINE 11
ELSEE:              05F4 DEFINED AT LINE 11
WHILE:              0600 DEFINED AT LINE 11
ABRTQ:              060A DEFINED AT LINE 11
STRQ:               0616 DEFINED AT LINE 49
DOTQ:               0622 DEFINED AT LINE 49
DOCONST:            062E DEFINED AT LINE 49
DOLIST:             0636 DEFINED AT LINE 49
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 141 IN core-compiler.z80
                    > USED AT LINE 25
                    > USED AT LINE 149 IN core-compiler.z80
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 31
                    > USED AT LINE 31
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 31
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 31
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 61
                    > USED AT LINE 31
                    > USED AT LINE 61
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
DOLIT:              0644 DEFINED AT LINE 49
                    > USED AT LINE 55 IN core-alu.z80
                    > USED AT LINE 60 IN core-alu.z80
                    > USED AT LINE 66 IN core-alu.z80
                    > USED AT LINE 87 IN core-alu.z80
                    > USED AT LINE 89 IN core-alu.z80
                    > USED AT LINE 319 IN core-alu.z80
                    > USED AT LINE 324 IN core-alu.z80
                    > USED AT LINE 329 IN core-alu.z80
                    > USED AT LINE 338 IN core-alu.z80
                    > USED AT LINE 341 IN core-alu.z80
                    > USED AT LINE 38 IN core-compiler.z80
                    > USED AT LINE 43 IN core-compiler.z80
                    > USED AT LINE 86 IN core-compiler.z80
                    > USED AT LINE 113 IN core-compiler.z80
                    > USED AT LINE 119 IN core-compiler.z80
                    > USED AT LINE 133 IN core-compiler.z80
                    > USED AT LINE 141 IN core-compiler.z80
                    > USED AT LINE 149 IN core-compiler.z80
                    > USED AT LINE 156 IN core-compiler.z80
                    > USED AT LINE 31 IN core-control.z80
                    > USED AT LINE 4 IN core-format.z80
                    > USED AT LINE 5 IN core-format.z80
                    > USED AT LINE 6 IN core-format.z80
                    > USED AT LINE 11 IN core-format.z80
                    > USED AT LINE 44 IN core-format.z80
                    > USED AT LINE 64 IN core-format.z80
                    > USED AT LINE 69 IN core-format.z80
                    > USED AT LINE 74 IN core-format.z80
                    > USED AT LINE 79 IN core-format.z80
                    > USED AT LINE 80 IN core-format.z80
                    > USED AT LINE 81 IN core-format.z80
                    > USED AT LINE 83 IN core-format.z80
                    > USED AT LINE 5 IN core-interpret.z80
                    > USED AT LINE 6 IN core-interpret.z80
                    > USED AT LINE 8 IN core-interpret.z80
                    > USED AT LINE 9 IN core-interpret.z80
                    > USED AT LINE 20 IN core-interpret.z80
                    > USED AT LINE 25 IN core-interpret.z80
                    > USED AT LINE 30 IN core-interpret.z80
                    > USED AT LINE 52 IN core-interpret.z80
                    > USED AT LINE 59 IN core-interpret.z80
                    > USED AT LINE 74 IN core-interpret.z80
                    > USED AT LINE 80 IN core-interpret.z80
                    > USED AT LINE 99 IN core-interpret.z80
                    > USED AT LINE 139 IN core-interpret.z80
                    > USED AT LINE 145 IN core-interpret.z80
                    > USED AT LINE 151 IN core-interpret.z80
                    > USED AT LINE 178 IN core-interpret.z80
                    > USED AT LINE 227 IN core-interpret.z80
                    > USED AT LINE 241 IN core-interpret.z80
                    > USED AT LINE 247 IN core-interpret.z80
                    > USED AT LINE 87 IN core-io.z80
                    > USED AT LINE 97 IN core-io.z80
                    > USED AT LINE 112 IN core-io.z80
                    > USED AT LINE 124 IN core-io.z80
                    > USED AT LINE 132 IN core-io.z80
                    > USED AT LINE 175 IN core-io.z80
                    > USED AT LINE 187 IN core-io.z80
                    > USED AT LINE 189 IN core-io.z80
                    > USED AT LINE 202 IN core-io.z80
                    > USED AT LINE 204 IN core-io.z80
                    > USED AT LINE 220 IN core-io.z80
                    > USED AT LINE 239 IN core-io.z80
                    > USED AT LINE 240 IN core-io.z80
                    > USED AT LINE 21 IN core-kernel.z80
                    > USED AT LINE 25 IN core-kernel.z80
                    > USED AT LINE 44 IN core-kernel.z80
                    > USED AT LINE 47 IN core-kernel.z80
                    > USED AT LINE 54 IN core-kernel.z80
                    > USED AT LINE 55 IN core-kernel.z80
                    > USED AT LINE 67 IN core-kernel.z80
                    > USED AT LINE 108 IN core-memory.z80
                    > USED AT LINE 119 IN core-memory.z80
                    > USED AT LINE 146 IN core-memory.z80
                    > USED AT LINE 147 IN core-memory.z80
                    > USED AT LINE 173 IN core-memory.z80
                    > USED AT LINE 176 IN core-memory.z80
                    > USED AT LINE 184 IN core-memory.z80
                    > USED AT LINE 186 IN core-memory.z80
                    > USED AT LINE 83 IN core-stacks.z80
                    > USED AT LINE 90 IN core-stacks.z80
                    > USED AT LINE 8 IN core-utils.z80
                    > USED AT LINE 16 IN core-utils.z80
                    > USED AT LINE 21 IN core-utils.z80
                    > USED AT LINE 31 IN core-utils.z80
                    > USED AT LINE 34 IN core-utils.z80
                    > USED AT LINE 89 IN core-utils.z80
                    > USED AT LINE 96 IN core-utils.z80
                    > USED AT LINE 7 IN tester.z80
                    > USED AT LINE 9 IN tester.z80
                    > USED AT LINE 37 IN tester.z80
                    > USED AT LINE 39 IN tester.z80
                    > USED AT LINE 50 IN tester.z80
                    > USED AT LINE 91 IN tester.z80
DOVAR:              064C DEFINED AT LINE 49
                    > USED AT LINE 150 IN core-compiler.z80
                    > USED AT LINE 41 IN core-does.z80
                    > USED AT LINE 201 IN core-interpret.z80
UP:                 0654 DEFINED AT LINE 49
DOUSE:              065C DEFINED AT LINE 49
                    > USED AT LINE 142 IN core-compiler.z80
                    > USED AT LINE 32
                    > USED AT LINE 32
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 32
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 32
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 62
                    > USED AT LINE 32
                    > USED AT LINE 62
DOSTR:              066C DEFINED AT LINE 49
                    > USED AT LINE 217 IN core-interpret.z80
                    > USED AT LINE 219 IN core-interpret.z80
                    > USED AT LINE 137 IN core-io.z80
                    > USED AT LINE 142 IN core-io.z80
EXIT:               0684 DEFINED AT LINE 11
                    > USED AT LINE 80 IN core-alu.z80
                    > USED AT LINE 114 IN core-alu.z80
                    > USED AT LINE 123 IN core-alu.z80
                    > USED AT LINE 245 IN core-alu.z80
                    > USED AT LINE 304 IN core-alu.z80
                    > USED AT LINE 6 IN core-compiler.z80
                    > USED AT LINE 61 IN core-compiler.z80
                    > USED AT LINE 75 IN core-compiler.z80
                    > USED AT LINE 88 IN core-compiler.z80
                    > USED AT LINE 90 IN core-compiler.z80
                    > USED AT LINE 94 IN core-compiler.z80
                    > USED AT LINE 107 IN core-compiler.z80
                    > USED AT LINE 120 IN core-compiler.z80
                    > USED AT LINE 9 IN core-control.z80
                    > USED AT LINE 36 IN core-does.z80
                    > USED AT LINE 38 IN core-format.z80
                    > USED AT LINE 46 IN core-format.z80
                    > USED AT LINE 85 IN core-format.z80
                    > USED AT LINE 116 IN core-interpret.z80
                    > USED AT LINE 229 IN core-interpret.z80
                    > USED AT LINE 233 IN core-interpret.z80
                    > USED AT LINE 250 IN core-interpret.z80
                    > USED AT LINE 258 IN core-interpret.z80
                    > USED AT LINE 67 IN core-io.z80
                    > USED AT LINE 82 IN core-io.z80
                    > USED AT LINE 103 IN core-io.z80
                    > USED AT LINE 115 IN core-io.z80
                    > USED AT LINE 127 IN core-io.z80
                    > USED AT LINE 137 IN core-io.z80
                    > USED AT LINE 168 IN core-io.z80
                    > USED AT LINE 191 IN core-io.z80
                    > USED AT LINE 208 IN core-io.z80
                    > USED AT LINE 49 IN core-kernel.z80
                    > USED AT LINE 104 IN core-kernel.z80
                    > USED AT LINE 135 IN core-memory.z80
                    > USED AT LINE 150 IN core-memory.z80
                    > USED AT LINE 162 IN core-memory.z80
                    > USED AT LINE 194 IN core-memory.z80
                    > USED AT LINE 58 IN core-stacks.z80
                    > USED AT LINE 11 IN core-utils.z80
                    > USED AT LINE 24 IN core-utils.z80
                    > USED AT LINE 45 IN core-utils.z80
                    > USED AT LINE 58 IN core-utils.z80
                    > USED AT LINE 97 IN core-utils.z80
                    > USED AT LINE 100 IN core-utils.z80
                    > USED AT LINE 122 IN core-utils.z80
                    > USED AT LINE 22 IN tester.z80
                    > USED AT LINE 44 IN tester.z80
                    > USED AT LINE 51 IN tester.z80
                    > USED AT LINE 60 IN tester.z80
                    > USED AT LINE 71 IN tester.z80
                    > USED AT LINE 84 IN tester.z80
                    > USED AT LINE 92 IN tester.z80
DONXT:              0690 DEFINED AT LINE 11
                    > USED AT LINE 14 IN core-control.z80
                    > USED AT LINE 31 IN core-interpret.z80
                    > USED AT LINE 60 IN core-interpret.z80
                    > USED AT LINE 75 IN core-interpret.z80
                    > USED AT LINE 138 IN core-interpret.z80
                    > USED AT LINE 102 IN core-io.z80
                    > USED AT LINE 114 IN core-io.z80
                    > USED AT LINE 149 IN core-memory.z80
                    > USED AT LINE 161 IN core-memory.z80
                    > USED AT LINE 175 IN core-memory.z80
                    > USED AT LINE 10 IN core-utils.z80
                    > USED AT LINE 23 IN core-utils.z80
                    > USED AT LINE 39 IN core-utils.z80
                    > USED AT LINE 56 IN core-utils.z80
DECHILO:            06A5 DEFINED AT LINE 84 IN core-does.z80
                    > USED AT LINE 77 IN core-does.z80
DECLOW:             06A7 DEFINED AT LINE 87 IN core-does.z80
                    > USED AT LINE 73 IN core-does.z80
DIGIT:              06B0 DEFINED AT LINE 49
                    > USED AT LINE 12 IN core-format.z80
EXTRC:              06CC DEFINED AT LINE 49
BDIGS:              06DE DEFINED AT LINE 11
                    > USED AT LINE 58 IN core-format.z80
                    > USED AT LINE 153 IN core-io.z80
                    > USED AT LINE 160 IN core-io.z80
HOLD:               06EA DEFINED AT LINE 11
DIG:                0702 DEFINED AT LINE 11
                    > USED AT LINE 34 IN core-format.z80
DIGS:               0710 DEFINED AT LINE 11
                    > USED AT LINE 58 IN core-format.z80
                    > USED AT LINE 160 IN core-io.z80
DIGS1:              0714 DEFINED AT LINE 33 IN core-format.z80
                    > USED AT LINE 36 IN core-format.z80
DIGS2:              0720 DEFINED AT LINE 37 IN core-format.z80
                    > USED AT LINE 35 IN core-format.z80
SIGN:               0722 DEFINED AT LINE 11
                    > USED AT LINE 59 IN core-format.z80
SIGN1:              0732 DEFINED AT LINE 45 IN core-format.z80
EDIGS:              0734 DEFINED AT LINE 11
                    > USED AT LINE 59 IN core-format.z80
STR:                0746 DEFINED AT LINE 49
                    > USED AT LINE 147 IN core-io.z80
                    > USED AT LINE 170 IN core-io.z80
HEX:                075C DEFINED AT LINE 11
                    > USED AT LINE 19 IN core-interpret.z80
DECIMAL:            076A DEFINED AT LINE 11
BLANK:              0778 DEFINED AT LINE 11
                    > USED AT LINE 56 IN core-interpret.z80
                    > USED AT LINE 109 IN core-interpret.z80
                    > USED AT LINE 114 IN core-interpret.z80
                    > USED AT LINE 92 IN core-io.z80
                    > USED AT LINE 188 IN core-io.z80
                    > USED AT LINE 206 IN core-io.z80
                    > USED AT LINE 220 IN core-io.z80
                    > USED AT LINE 171 IN core-memory.z80
TCHAR:              0782 DEFINED AT LINE 49
TCHA1:              07A2 DEFINED AT LINE 84 IN core-format.z80
                    > USED AT LINE 82 IN core-format.z80
DIGTQ:              07A4 DEFINED AT LINE 49
DGTQ1:              07CC DEFINED AT LINE 10 IN core-interpret.z80
                    > USED AT LINE 7 IN core-interpret.z80
NUMBQ:              07D4 DEFINED AT LINE 49
                    > USED AT LINE 21 IN defaults.z80
NUMQ1:              0806 DEFINED AT LINE 21 IN core-interpret.z80
                    > USED AT LINE 18 IN core-interpret.z80
NUMQ2:              082C DEFINED AT LINE 26 IN core-interpret.z80
                    > USED AT LINE 31 IN core-interpret.z80
NUMQ3:              085E DEFINED AT LINE 35 IN core-interpret.z80
                    > USED AT LINE 33 IN core-interpret.z80
NUMQ4:              0864 DEFINED AT LINE 38 IN core-interpret.z80
                    > USED AT LINE 28 IN core-interpret.z80
NUMQ5:              0870 DEFINED AT LINE 40 IN core-interpret.z80
                    > USED AT LINE 37 IN core-interpret.z80
NUMQ6:              0872 DEFINED AT LINE 42 IN core-interpret.z80
                    > USED AT LINE 24 IN core-interpret.z80
PARS:               087E DEFINED AT LINE 49
                    > USED AT LINE 93 IN core-interpret.z80
PARS1:              08A4 DEFINED AT LINE 55 IN core-interpret.z80
                    > USED AT LINE 60 IN core-interpret.z80
PARS2:              08CA DEFINED AT LINE 62 IN core-interpret.z80
                    > USED AT LINE 58 IN core-interpret.z80
PARS3:              08CC DEFINED AT LINE 64 IN core-interpret.z80
                    > USED AT LINE 53 IN core-interpret.z80
PARS4:              08D2 DEFINED AT LINE 67 IN core-interpret.z80
                    > USED AT LINE 75 IN core-interpret.z80
PARS5:              08EA DEFINED AT LINE 72 IN core-interpret.z80
                    > USED AT LINE 70 IN core-interpret.z80
PARS6:              0900 DEFINED AT LINE 78 IN core-interpret.z80
                    > USED AT LINE 73 IN core-interpret.z80
PARS7:              090E DEFINED AT LINE 81 IN core-interpret.z80
                    > USED AT LINE 77 IN core-interpret.z80
PARS8:              091A DEFINED AT LINE 84 IN core-interpret.z80
                    > USED AT LINE 51 IN core-interpret.z80
PARSE:              0922 DEFINED AT LINE 11
                    > USED AT LINE 109 IN core-interpret.z80
                    > USED AT LINE 114 IN core-interpret.z80
                    > USED AT LINE 121 IN core-interpret.z80
PAREN:              0944 DEFINED AT LINE 11
BKSLA:              0952 DEFINED AT LINE 11
CHAR:               0960 DEFINED AT LINE 11
TOKEN:              096E DEFINED AT LINE 49
                    > USED AT LINE 4 IN core-compiler.z80
                    > USED AT LINE 126 IN core-compiler.z80
                    > USED AT LINE 140 IN core-compiler.z80
                    > USED AT LINE 148 IN core-compiler.z80
                    > USED AT LINE 265 IN core-interpret.z80
WORDD:              098A DEFINED AT LINE 11
NAMET:              0996 DEFINED AT LINE 49
                    > USED AT LINE 162 IN core-interpret.z80
                    > USED AT LINE 80 IN core-utils.z80
SAMEQ:              09A2 DEFINED AT LINE 49
SAME1:              09AC DEFINED AT LINE 133 IN core-interpret.z80
                    > USED AT LINE 138 IN core-interpret.z80
SAME2:              09CE DEFINED AT LINE 138 IN core-interpret.z80
                    > USED AT LINE 132 IN core-interpret.z80
                    > USED AT LINE 136 IN core-interpret.z80
FIND:               09D8 DEFINED AT LINE 11
                    > USED AT LINE 174 IN core-interpret.z80
FIND1:              09F6 DEFINED AT LINE 147 IN core-interpret.z80
                    > USED AT LINE 159 IN core-interpret.z80
FIND2:              0A1A DEFINED AT LINE 153 IN core-interpret.z80
                    > USED AT LINE 150 IN core-interpret.z80
FIND3:              0A22 DEFINED AT LINE 154 IN core-interpret.z80
                    > USED AT LINE 152 IN core-interpret.z80
FIND6:              0A26 DEFINED AT LINE 155 IN core-interpret.z80
                    > USED AT LINE 148 IN core-interpret.z80
FIND4:              0A32 DEFINED AT LINE 157 IN core-interpret.z80
                    > USED AT LINE 154 IN core-interpret.z80
FIND5:              0A3E DEFINED AT LINE 160 IN core-interpret.z80
                    > USED AT LINE 157 IN core-interpret.z80
NAMEQ:              0A50 DEFINED AT LINE 49
                    > USED AT LINE 4 IN core-compiler.z80
                    > USED AT LINE 56 IN core-compiler.z80
                    > USED AT LINE 84 IN core-compiler.z80
                    > USED AT LINE 225 IN core-interpret.z80
NAMQ1:              0A62 DEFINED AT LINE 170 IN core-interpret.z80
                    > USED AT LINE 168 IN core-interpret.z80
NAMQ2:              0A64 DEFINED AT LINE 171 IN core-interpret.z80
                    > USED AT LINE 175 IN core-interpret.z80
NAMQ3:              0A82 DEFINED AT LINE 177 IN core-interpret.z80
                    > USED AT LINE 173 IN core-interpret.z80
CATCH:              0A8C DEFINED AT LINE 11
THROW:              0AB2 DEFINED AT LINE 11
                    > USED AT LINE 8 IN core-compiler.z80
                    > USED AT LINE 78 IN core-compiler.z80
                    > USED AT LINE 95 IN core-compiler.z80
                    > USED AT LINE 210 IN core-interpret.z80
                    > USED AT LINE 217 IN core-interpret.z80
                    > USED AT LINE 235 IN core-interpret.z80
NULLS:              0AD0 DEFINED AT LINE 49
                    > USED AT LINE 210 IN core-interpret.z80
ABORT:              0ADE DEFINED AT LINE 11
ABORQ:              0AE6 DEFINED AT LINE 49
                    > USED AT LINE 69 IN core-control.z80
                    > USED AT LINE 37
                    > USED AT LINE 37
ABOR1:              0AF2 DEFINED AT LINE 218 IN core-interpret.z80
                    > USED AT LINE 216 IN core-interpret.z80
INTER:              0AF8 DEFINED AT LINE 49
                    > USED AT LINE 20 IN defaults.z80
                    > USED AT LINE 241 IN core-interpret.z80
                    > USED AT LINE 247 IN core-interpret.z80
INTE1:              0B20 DEFINED AT LINE 230 IN core-interpret.z80
                    > USED AT LINE 226 IN core-interpret.z80
INTE2:              0B2A DEFINED AT LINE 234 IN core-interpret.z80
                    > USED AT LINE 232 IN core-interpret.z80
LBRAC:              0B2C DEFINED AT LINE 11
DOTOK:              0B3A DEFINED AT LINE 11
                    > USED AT LINE 12 IN defaults.z80
DOTO1:              0B52 DEFINED AT LINE 250 IN core-interpret.z80
                    > USED AT LINE 248 IN core-interpret.z80
QSTAC:              0B56 DEFINED AT LINE 49
EVAL:               0B6E DEFINED AT LINE 11
EVAL1:              0B72 DEFINED AT LINE 264 IN core-interpret.z80
                    > USED AT LINE 268 IN core-interpret.z80
EVAL2:              0B86 DEFINED AT LINE 269 IN core-interpret.z80
                    > USED AT LINE 266 IN core-interpret.z80
PCSTO:              0B8E DEFINED AT LINE 11
PCAT:               0B98 DEFINED AT LINE 11
STOIO:              0BA4 DEFINED AT LINE 11
                    > USED AT LINE 19 IN core-kernel.z80
                    > USED AT LINE 33 IN core-kernel.z80
QRX:                0BAA DEFINED AT LINE 11
                    > USED AT LINE 7 IN defaults.z80
QRX1:               0BB5 DEFINED AT LINE 36 IN core-io.z80
                    > USED AT LINE 33 IN core-io.z80
QRX2:               0BBF DEFINED AT LINE 42 IN core-io.z80
                    > USED AT LINE 35 IN core-io.z80
TXSTO:              0BC2 DEFINED AT LINE 11
                    > USED AT LINE 8 IN defaults.z80
                    > USED AT LINE 11 IN defaults.z80
QKEY:               0BCA DEFINED AT LINE 11
                    > USED AT LINE 62 IN core-io.z80
                    > USED AT LINE 78 IN core-io.z80
KEY:                0BD6 DEFINED AT LINE 11
                    > USED AT LINE 80 IN core-io.z80
                    > USED AT LINE 219 IN core-io.z80
                    > USED AT LINE 23 IN core-kernel.z80
                    > USED AT LINE 42 IN core-kernel.z80
KEY1:               0BDA DEFINED AT LINE 61 IN core-io.z80
                    > USED AT LINE 66 IN core-io.z80
KEY2:               0BE2 DEFINED AT LINE 65 IN core-io.z80
EMIT:               0BE8 DEFINED AT LINE 11
                    > USED AT LINE 92 IN core-io.z80
                    > USED AT LINE 123 IN core-io.z80
                    > USED AT LINE 24 IN core-kernel.z80
                    > USED AT LINE 43 IN core-kernel.z80
NUFQ:               0BF4 DEFINED AT LINE 11
                    > USED AT LINE 37 IN core-utils.z80
                    > USED AT LINE 120 IN core-utils.z80
NUFQ1:              0C0A DEFINED AT LINE 81 IN core-io.z80
                    > USED AT LINE 79 IN core-io.z80
PACE:               0C0C DEFINED AT LINE 49
SPACE:              0C18 DEFINED AT LINE 11
                    > USED AT LINE 100 IN core-io.z80
                    > USED AT LINE 161 IN core-io.z80
                    > USED AT LINE 170 IN core-io.z80
                    > USED AT LINE 17 IN core-utils.z80
                    > USED AT LINE 36 IN core-utils.z80
                    > USED AT LINE 36 IN core-utils.z80
                    > USED AT LINE 115 IN core-utils.z80
SPACS:              0C22 DEFINED AT LINE 11
                    > USED AT LINE 148 IN core-io.z80
                    > USED AT LINE 155 IN core-io.z80
CHAR1:              0C32 DEFINED AT LINE 99 IN core-io.z80
                    > USED AT LINE 102 IN core-io.z80
CHAR2:              0C34 DEFINED AT LINE 101 IN core-io.z80
                    > USED AT LINE 98 IN core-io.z80
TYPEE:              0C3A DEFINED AT LINE 11
                    > USED AT LINE 148 IN core-io.z80
                    > USED AT LINE 155 IN core-io.z80
                    > USED AT LINE 161 IN core-io.z80
TYPE1:              0C44 DEFINED AT LINE 110 IN core-io.z80
                    > USED AT LINE 114 IN core-io.z80
TYPE2:              0C50 DEFINED AT LINE 113 IN core-io.z80
                    > USED AT LINE 109 IN core-io.z80
TYPEZ:              0C58 DEFINED AT LINE 11
                    > USED AT LINE 22 IN core-kernel.z80
                    > USED AT LINE 26 IN core-kernel.z80
                    > USED AT LINE 48 IN core-kernel.z80
                    > USED AT LINE 104 IN core-kernel.z80
TYPEZ1:             0C5C DEFINED AT LINE 120 IN core-io.z80
                    > USED AT LINE 125 IN core-io.z80
TYPEZ2:             0C72 DEFINED AT LINE 126 IN core-io.z80
CR:                 0C76 DEFINED AT LINE 11
                    > USED AT LINE 250 IN core-interpret.z80
                    > USED AT LINE 33 IN core-kernel.z80
                    > USED AT LINE 40 IN core-kernel.z80
                    > USED AT LINE 49 IN core-kernel.z80
                    > USED AT LINE 34 IN core-utils.z80
                    > USED AT LINE 50 IN core-utils.z80
                    > USED AT LINE 107 IN core-utils.z80
STRQP:              0C88 DEFINED AT LINE 49
                    > USED AT LINE 37
                    > USED AT LINE 74 IN core-control.z80
DOTQP:              0C90 DEFINED AT LINE 49
                    > USED AT LINE 37
                    > USED AT LINE 79 IN core-control.z80
                    > USED AT LINE 37
                    > USED AT LINE 37
                    > USED AT LINE 37
                    > USED AT LINE 37
DOTR:               0C9C DEFINED AT LINE 11
UDOTR:              0CB0 DEFINED AT LINE 11
UDOT:               0CC8 DEFINED AT LINE 11
                    > USED AT LINE 168 IN core-io.z80
DOT:                0CD8 DEFINED AT LINE 11
                    > USED AT LINE 180 IN core-io.z80
DOT1:               0CEE DEFINED AT LINE 169 IN core-io.z80
                    > USED AT LINE 167 IN core-io.z80
DOTPR:              0CF6 DEFINED AT LINE 11
QUEST:              0D04 DEFINED AT LINE 11
BKSP:               0D0E DEFINED AT LINE 11
                    > USED AT LINE 208 IN core-io.z80
BACK1:              0D3E DEFINED AT LINE 190 IN core-io.z80
                    > USED AT LINE 186 IN core-io.z80
TAP:                0D40 DEFINED AT LINE 11
                    > USED AT LINE 206 IN core-io.z80
                    > USED AT LINE 222 IN core-io.z80
KTAP:               0D56 DEFINED AT LINE 11
                    > USED AT LINE 10 IN defaults.z80
KTAP1:              0D76 DEFINED AT LINE 207 IN core-io.z80
                    > USED AT LINE 205 IN core-io.z80
KTAP2:              0D7A DEFINED AT LINE 209 IN core-io.z80
                    > USED AT LINE 203 IN core-io.z80
ACCEP:              0D84 DEFINED AT LINE 11
                    > USED AT LINE 9 IN defaults.z80
ACCP1:              0D8E DEFINED AT LINE 216 IN core-io.z80
                    > USED AT LINE 227 IN core-io.z80
ACCP2:              0DAC DEFINED AT LINE 224 IN core-io.z80
                    > USED AT LINE 221 IN core-io.z80
ACCP3:              0DB0 DEFINED AT LINE 226 IN core-io.z80
                    > USED AT LINE 223 IN core-io.z80
ACCP4:              0DB4 DEFINED AT LINE 228 IN core-io.z80
                    > USED AT LINE 218 IN core-io.z80
EXPEC:              0DBC DEFINED AT LINE 49
QUERY:              0DCC DEFINED AT LINE 49
CALL_FORTH:         0DEA DEFINED AT LINE 2 IN core-kernel.z80
                    > USED AT LINE 58
RETURN_HERE:        0DEE DEFINED AT LINE 5 IN core-kernel.z80
                    > USED AT LINE 8 IN core-kernel.z80
TRETURN_HERE:       0DEF DEFINED AT LINE 7 IN core-kernel.z80
                    > USED AT LINE 3 IN core-kernel.z80
NEXT_STEP:          0DF1 DEFINED AT LINE 10 IN core-kernel.z80
                    > USED AT LINE 54
                    > USED AT LINE 34 IN interrupt.z80
HI:                 0DF8 DEFINED AT LINE 49
                    > USED AT LINE 57
HELLO:              0E10 DEFINED AT LINE 28 IN core-kernel.z80
                    > USED AT LINE 21 IN core-kernel.z80
                    > USED AT LINE 25 IN core-kernel.z80
                    > USED AT LINE 47 IN core-kernel.z80
HIX:                0E20 DEFINED AT LINE 49
HI1:                0E35 DEFINED AT LINE 41 IN core-kernel.z80
                    > USED AT LINE 46 IN core-kernel.z80
COLD:               0E50 DEFINED AT LINE 11
COLD1:              0E54 DEFINED AT LINE 53 IN core-kernel.z80
                    > USED AT LINE 61 IN core-kernel.z80
PRESE:              0E6A DEFINED AT LINE 11
                    > USED AT LINE 56 IN core-kernel.z80
QUIT:               0E80 DEFINED AT LINE 11
                    > USED AT LINE 27 IN core-kernel.z80
                    > USED AT LINE 60 IN core-kernel.z80
                    > USED AT LINE 13 IN tester.z80
EXECU:              0E82 DEFINED AT LINE 11
                    > USED AT LINE 88 IN core-compiler.z80
                    > USED AT LINE 229 IN core-interpret.z80
                    > USED AT LINE 133 IN core-memory.z80
QBRAN:              0E86 DEFINED AT LINE 49
                    > USED AT LINE 86 IN core-alu.z80
                    > USED AT LINE 95 IN core-alu.z80
                    > USED AT LINE 120 IN core-alu.z80
                    > USED AT LINE 234 IN core-alu.z80
                    > USED AT LINE 238 IN core-alu.z80
                    > USED AT LINE 242 IN core-alu.z80
                    > USED AT LINE 5 IN core-compiler.z80
                    > USED AT LINE 57 IN core-compiler.z80
                    > USED AT LINE 68 IN core-compiler.z80
                    > USED AT LINE 85 IN core-compiler.z80
                    > USED AT LINE 87 IN core-compiler.z80
                    > USED AT LINE 93 IN core-compiler.z80
                    > USED AT LINE 19 IN core-control.z80
                    > USED AT LINE 30 IN core-control.z80
                    > USED AT LINE 35 IN core-format.z80
                    > USED AT LINE 43 IN core-format.z80
                    > USED AT LINE 82 IN core-format.z80
                    > USED AT LINE 7 IN core-interpret.z80
                    > USED AT LINE 18 IN core-interpret.z80
                    > USED AT LINE 24 IN core-interpret.z80
                    > USED AT LINE 28 IN core-interpret.z80
                    > USED AT LINE 33 IN core-interpret.z80
                    > USED AT LINE 51 IN core-interpret.z80
                    > USED AT LINE 53 IN core-interpret.z80
                    > USED AT LINE 58 IN core-interpret.z80
                    > USED AT LINE 70 IN core-interpret.z80
                    > USED AT LINE 73 IN core-interpret.z80
                    > USED AT LINE 136 IN core-interpret.z80
                    > USED AT LINE 148 IN core-interpret.z80
                    > USED AT LINE 150 IN core-interpret.z80
                    > USED AT LINE 157 IN core-interpret.z80
                    > USED AT LINE 168 IN core-interpret.z80
                    > USED AT LINE 173 IN core-interpret.z80
                    > USED AT LINE 175 IN core-interpret.z80
                    > USED AT LINE 216 IN core-interpret.z80
                    > USED AT LINE 226 IN core-interpret.z80
                    > USED AT LINE 232 IN core-interpret.z80
                    > USED AT LINE 248 IN core-interpret.z80
                    > USED AT LINE 266 IN core-interpret.z80
                    > USED AT LINE 63 IN core-io.z80
                    > USED AT LINE 66 IN core-io.z80
                    > USED AT LINE 79 IN core-io.z80
                    > USED AT LINE 122 IN core-io.z80
                    > USED AT LINE 167 IN core-io.z80
                    > USED AT LINE 186 IN core-io.z80
                    > USED AT LINE 203 IN core-io.z80
                    > USED AT LINE 205 IN core-io.z80
                    > USED AT LINE 218 IN core-io.z80
                    > USED AT LINE 221 IN core-io.z80
                    > USED AT LINE 46 IN core-kernel.z80
                    > USED AT LINE 132 IN core-memory.z80
                    > USED AT LINE 172 IN core-memory.z80
                    > USED AT LINE 55 IN core-stacks.z80
                    > USED AT LINE 38 IN core-utils.z80
                    > USED AT LINE 75 IN core-utils.z80
                    > USED AT LINE 79 IN core-utils.z80
                    > USED AT LINE 81 IN core-utils.z80
                    > USED AT LINE 86 IN core-utils.z80
                    > USED AT LINE 95 IN core-utils.z80
                    > USED AT LINE 110 IN core-utils.z80
                    > USED AT LINE 114 IN core-utils.z80
                    > USED AT LINE 121 IN core-utils.z80
                    > USED AT LINE 6 IN tester.z80
                    > USED AT LINE 81 IN tester.z80
BRAN:               0E92 DEFINED AT LINE 49
                    > USED AT LINE 24 IN core-control.z80
                    > USED AT LINE 37 IN core-control.z80
                    > USED AT LINE 36 IN core-format.z80
                    > USED AT LINE 37 IN core-interpret.z80
                    > USED AT LINE 77 IN core-interpret.z80
                    > USED AT LINE 132 IN core-interpret.z80
                    > USED AT LINE 152 IN core-interpret.z80
                    > USED AT LINE 154 IN core-interpret.z80
                    > USED AT LINE 159 IN core-interpret.z80
                    > USED AT LINE 268 IN core-interpret.z80
                    > USED AT LINE 98 IN core-io.z80
                    > USED AT LINE 109 IN core-io.z80
                    > USED AT LINE 125 IN core-io.z80
                    > USED AT LINE 223 IN core-io.z80
                    > USED AT LINE 227 IN core-io.z80
                    > USED AT LINE 61 IN core-kernel.z80
                    > USED AT LINE 86 IN core-kernel.z80
                    > USED AT LINE 142 IN core-memory.z80
                    > USED AT LINE 157 IN core-memory.z80
                    > USED AT LINE 169 IN core-memory.z80
                    > USED AT LINE 5 IN core-utils.z80
                    > USED AT LINE 18 IN core-utils.z80
                    > USED AT LINE 40 IN core-utils.z80
                    > USED AT LINE 52 IN core-utils.z80
                    > USED AT LINE 83 IN core-utils.z80
                    > USED AT LINE 116 IN core-utils.z80
                    > USED AT LINE 41 IN tester.z80
THROWX:             0E9A DEFINED AT LINE 11
                    > USED AT LINE 191 IN core-alu.z80
                    > USED AT LINE 194 IN core-alu.z80
STORE:              0EA2 DEFINED AT LINE 11
                    > USED AT LINE 19 IN core-compiler.z80
                    > USED AT LINE 45 IN core-compiler.z80
                    > USED AT LINE 75 IN core-compiler.z80
                    > USED AT LINE 50 IN core-interpret.z80
                    > USED AT LINE 91 IN core-memory.z80
                    > USED AT LINE 97 IN core-memory.z80
AT:                 0EAC DEFINED AT LINE 11
                    > USED AT LINE 50 IN core-compiler.z80
                    > USED AT LINE 73 IN core-compiler.z80
                    > USED AT LINE 86 IN core-compiler.z80
                    > USED AT LINE 101 IN core-compiler.z80
                    > USED AT LINE 134 IN core-compiler.z80
                    > USED AT LINE 47 IN core-does.z80
                    > USED AT LINE 22 IN core-format.z80
                    > USED AT LINE 28 IN core-format.z80
                    > USED AT LINE 16 IN core-interpret.z80
                    > USED AT LINE 68 IN core-interpret.z80
                    > USED AT LINE 69 IN core-interpret.z80
                    > USED AT LINE 92 IN core-interpret.z80
                    > USED AT LINE 104 IN core-interpret.z80
                    > USED AT LINE 115 IN core-interpret.z80
                    > USED AT LINE 146 IN core-interpret.z80
                    > USED AT LINE 147 IN core-interpret.z80
                    > USED AT LINE 149 IN core-interpret.z80
                    > USED AT LINE 172 IN core-interpret.z80
                    > USED AT LINE 192 IN core-interpret.z80
                    > USED AT LINE 227 IN core-interpret.z80
                    > USED AT LINE 56 IN core-io.z80
                    > USED AT LINE 72 IN core-io.z80
                    > USED AT LINE 166 IN core-io.z80
                    > USED AT LINE 180 IN core-io.z80
                    > USED AT LINE 66 IN core-kernel.z80
                    > USED AT LINE 103 IN core-memory.z80
                    > USED AT LINE 114 IN core-memory.z80
                    > USED AT LINE 131 IN core-memory.z80
                    > USED AT LINE 30 IN core-utils.z80
                    > USED AT LINE 74 IN core-utils.z80
                    > USED AT LINE 78 IN core-utils.z80
                    > USED AT LINE 118 IN core-utils.z80
                    > USED AT LINE 58 IN tester.z80
CSTOR:              0EB4 DEFINED AT LINE 11
                    > USED AT LINE 197 IN core-io.z80
                    > USED AT LINE 145 IN core-memory.z80
                    > USED AT LINE 159 IN core-memory.z80
                    > USED AT LINE 187 IN core-memory.z80
CAT:                0EBC DEFINED AT LINE 11
                    > USED AT LINE 67 IN core-compiler.z80
                    > USED AT LINE 17 IN core-interpret.z80
                    > USED AT LINE 22 IN core-interpret.z80
                    > USED AT LINE 111 IN core-io.z80
                    > USED AT LINE 121 IN core-io.z80
                    > USED AT LINE 109 IN core-memory.z80
                    > USED AT LINE 7 IN core-utils.z80
                    > USED AT LINE 20 IN core-utils.z80
RAT:                0EC4 DEFINED AT LINE 11
                    > USED AT LINE 239 IN core-alu.z80
                    > USED AT LINE 52 IN core-does.z80
                    > USED AT LINE 23 IN core-interpret.z80
                    > USED AT LINE 32 IN core-interpret.z80
                    > USED AT LINE 133 IN core-interpret.z80
                    > USED AT LINE 134 IN core-interpret.z80
                    > USED AT LINE 145 IN core-memory.z80
                    > USED AT LINE 54 IN core-utils.z80
RPAT:               0ECE DEFINED AT LINE 11
                    > USED AT LINE 185 IN core-interpret.z80
RPSTO:              0ED6 DEFINED AT LINE 11
SPAT:               0EDE DEFINED AT LINE 11
                    > USED AT LINE 184 IN core-interpret.z80
                    > USED AT LINE 84 IN core-stacks.z80
                    > USED AT LINE 89 IN core-stacks.z80
SPSTO:              0EE8 DEFINED AT LINE 11
PSTOR:              0EF0 DEFINED AT LINE 11
                    > USED AT LINE 13 IN core-compiler.z80
DSTOR:              0F02 DEFINED AT LINE 11
DAT:                0F12 DEFINED AT LINE 11
COUNT:              0F22 DEFINED AT LINE 11
                    > USED AT LINE 44 IN core-compiler.z80
                    > USED AT LINE 59 IN core-compiler.z80
                    > USED AT LINE 142 IN core-io.z80
                    > USED AT LINE 96 IN core-utils.z80
HERE:               0F34 DEFINED AT LINE 11
                    > USED AT LINE 18 IN core-compiler.z80
                    > USED AT LINE 71 IN core-compiler.z80
                    > USED AT LINE 9 IN core-control.z80
                    > USED AT LINE 43 IN core-control.z80
                    > USED AT LINE 48 IN core-control.z80
                    > USED AT LINE 121 IN core-interpret.z80
                    > USED AT LINE 119 IN core-memory.z80
PAD:                0F3E DEFINED AT LINE 11
                    > USED AT LINE 17 IN core-format.z80
                    > USED AT LINE 52 IN core-format.z80
TIB:                0F4C DEFINED AT LINE 11
                    > USED AT LINE 91 IN core-interpret.z80
                    > USED AT LINE 239 IN core-io.z80
ATEXE:              0F58 DEFINED AT LINE 49
                    > USED AT LINE 92 IN core-compiler.z80
                    > USED AT LINE 231 IN core-interpret.z80
                    > USED AT LINE 267 IN core-interpret.z80
                    > USED AT LINE 225 IN core-io.z80
                    > USED AT LINE 234 IN core-io.z80
EXE1:               0F66 DEFINED AT LINE 134 IN core-memory.z80
                    > USED AT LINE 132 IN core-memory.z80
CMOVE:              0F68 DEFINED AT LINE 11
                    > USED AT LINE 188 IN core-memory.z80
CMOV1:              0F72 DEFINED AT LINE 143 IN core-memory.z80
                    > USED AT LINE 149 IN core-memory.z80
CMOV2:              0F8A DEFINED AT LINE 148 IN core-memory.z80
                    > USED AT LINE 142 IN core-memory.z80
FILL:               0F92 DEFINED AT LINE 11
FILL1:              0FA0 DEFINED AT LINE 158 IN core-memory.z80
                    > USED AT LINE 161 IN core-memory.z80
FILL2:              0FAA DEFINED AT LINE 160 IN core-memory.z80
                    > USED AT LINE 157 IN core-memory.z80
DTRAI:              0FB2 DEFINED AT LINE 11
DTRA1:              0FBC DEFINED AT LINE 170 IN core-memory.z80
                    > USED AT LINE 175 IN core-memory.z80
DTRA2:              0FD6 DEFINED AT LINE 174 IN core-memory.z80
                    > USED AT LINE 169 IN core-memory.z80
                    > USED AT LINE 172 IN core-memory.z80
PACKS:              0FE0 DEFINED AT LINE 11
                    > USED AT LINE 116 IN core-interpret.z80
ALGND:              101A DEFINED AT LINE 11
                    > USED AT LINE 71 IN core-compiler.z80
                    > USED AT LINE 53 IN core-does.z80
                    > USED AT LINE 182 IN core-memory.z80
ERR_DIVZERO:        1026 DEFINED AT LINE 3 IN core-messages.z80
                    > USED AT LINE 190 IN core-alu.z80
ERR_OUTOFRANGE:     1032 DEFINED AT LINE 4 IN core-messages.z80
                    > USED AT LINE 193 IN core-alu.z80
TOR:                1040 DEFINED AT LINE 11
                    > USED AT LINE 65 IN core-alu.z80
                    > USED AT LINE 235 IN core-alu.z80
                    > USED AT LINE 237 IN core-alu.z80
                    > USED AT LINE 309 IN core-alu.z80
                    > USED AT LINE 32 IN core-compiler.z80
                    > USED AT LINE 4 IN core-control.z80
                    > USED AT LINE 53 IN core-does.z80
                    > USED AT LINE 57 IN core-format.z80
                    > USED AT LINE 5 IN core-interpret.z80
                    > USED AT LINE 27 IN core-interpret.z80
                    > USED AT LINE 54 IN core-interpret.z80
                    > USED AT LINE 66 IN core-interpret.z80
                    > USED AT LINE 76 IN core-interpret.z80
                    > USED AT LINE 91 IN core-interpret.z80
                    > USED AT LINE 131 IN core-interpret.z80
                    > USED AT LINE 170 IN core-interpret.z80
                    > USED AT LINE 184 IN core-interpret.z80
                    > USED AT LINE 108 IN core-io.z80
                    > USED AT LINE 147 IN core-io.z80
                    > USED AT LINE 153 IN core-io.z80
                    > USED AT LINE 185 IN core-io.z80
                    > USED AT LINE 141 IN core-memory.z80
                    > USED AT LINE 144 IN core-memory.z80
                    > USED AT LINE 156 IN core-memory.z80
                    > USED AT LINE 168 IN core-memory.z80
                    > USED AT LINE 63 IN core-stacks.z80
                    > USED AT LINE 78 IN core-stacks.z80
                    > USED AT LINE 4 IN core-utils.z80
                    > USED AT LINE 17 IN core-utils.z80
                    > USED AT LINE 32 IN core-utils.z80
                    > USED AT LINE 51 IN core-utils.z80
RFROM:              104E DEFINED AT LINE 11
                    > USED AT LINE 67 IN core-alu.z80
                    > USED AT LINE 129 IN core-alu.z80
                    > USED AT LINE 241 IN core-alu.z80
                    > USED AT LINE 301 IN core-alu.z80
                    > USED AT LINE 31 IN core-compiler.z80
                    > USED AT LINE 36 IN core-does.z80
                    > USED AT LINE 47 IN core-does.z80
                    > USED AT LINE 52 IN core-does.z80
                    > USED AT LINE 11 IN core-interpret.z80
                    > USED AT LINE 39 IN core-interpret.z80
                    > USED AT LINE 39 IN core-interpret.z80
                    > USED AT LINE 43 IN core-interpret.z80
                    > USED AT LINE 44 IN core-interpret.z80
                    > USED AT LINE 61 IN core-interpret.z80
                    > USED AT LINE 63 IN core-interpret.z80
                    > USED AT LINE 79 IN core-interpret.z80
                    > USED AT LINE 83 IN core-interpret.z80
                    > USED AT LINE 83 IN core-interpret.z80
                    > USED AT LINE 85 IN core-interpret.z80
                    > USED AT LINE 93 IN core-interpret.z80
                    > USED AT LINE 137 IN core-interpret.z80
                    > USED AT LINE 155 IN core-interpret.z80
                    > USED AT LINE 160 IN core-interpret.z80
                    > USED AT LINE 171 IN core-interpret.z80
                    > USED AT LINE 176 IN core-interpret.z80
                    > USED AT LINE 177 IN core-interpret.z80
                    > USED AT LINE 186 IN core-interpret.z80
                    > USED AT LINE 187 IN core-interpret.z80
                    > USED AT LINE 193 IN core-interpret.z80
                    > USED AT LINE 194 IN core-interpret.z80
                    > USED AT LINE 195 IN core-interpret.z80
                    > USED AT LINE 154 IN core-io.z80
                    > USED AT LINE 147 IN core-memory.z80
                    > USED AT LINE 173 IN core-memory.z80
                    > USED AT LINE 42 IN core-utils.z80
                    > USED AT LINE 44 IN core-utils.z80
                    > USED AT LINE 40 IN tester.z80
                    > USED AT LINE 43 IN tester.z80
DUPP:               105C DEFINED AT LINE 11
                    > USED AT LINE 77 IN core-alu.z80
                    > USED AT LINE 233 IN core-alu.z80
                    > USED AT LINE 237 IN core-alu.z80
                    > USED AT LINE 344 IN core-alu.z80
                    > USED AT LINE 18 IN core-compiler.z80
                    > USED AT LINE 31 IN core-compiler.z80
                    > USED AT LINE 56 IN core-compiler.z80
                    > USED AT LINE 67 IN core-compiler.z80
                    > USED AT LINE 70 IN core-compiler.z80
                    > USED AT LINE 74 IN core-compiler.z80
                    > USED AT LINE 23 IN core-format.z80
                    > USED AT LINE 34 IN core-format.z80
                    > USED AT LINE 57 IN core-format.z80
                    > USED AT LINE 9 IN core-interpret.z80
                    > USED AT LINE 11 IN core-interpret.z80
                    > USED AT LINE 27 IN core-interpret.z80
                    > USED AT LINE 41 IN core-interpret.z80
                    > USED AT LINE 76 IN core-interpret.z80
                    > USED AT LINE 144 IN core-interpret.z80
                    > USED AT LINE 146 IN core-interpret.z80
                    > USED AT LINE 147 IN core-interpret.z80
                    > USED AT LINE 149 IN core-interpret.z80
                    > USED AT LINE 162 IN core-interpret.z80
                    > USED AT LINE 167 IN core-interpret.z80
                    > USED AT LINE 265 IN core-interpret.z80
                    > USED AT LINE 63 IN core-io.z80
                    > USED AT LINE 78 IN core-io.z80
                    > USED AT LINE 111 IN core-io.z80
                    > USED AT LINE 121 IN core-io.z80
                    > USED AT LINE 122 IN core-io.z80
                    > USED AT LINE 196 IN core-io.z80
                    > USED AT LINE 202 IN core-io.z80
                    > USED AT LINE 219 IN core-io.z80
                    > USED AT LINE 43 IN core-kernel.z80
                    > USED AT LINE 102 IN core-memory.z80
                    > USED AT LINE 108 IN core-memory.z80
                    > USED AT LINE 144 IN core-memory.z80
                    > USED AT LINE 182 IN core-memory.z80
                    > USED AT LINE 183 IN core-memory.z80
                    > USED AT LINE 55 IN core-stacks.z80
                    > USED AT LINE 56 IN core-stacks.z80
                    > USED AT LINE 7 IN core-utils.z80
                    > USED AT LINE 20 IN core-utils.z80
                    > USED AT LINE 78 IN core-utils.z80
                    > USED AT LINE 109 IN core-utils.z80
                    > USED AT LINE 118 IN core-utils.z80
                    > USED AT LINE 39 IN tester.z80
DROP:               1060 DEFINED AT LINE 11
                    > USED AT LINE 50 IN core-alu.z80
                    > USED AT LINE 96 IN core-alu.z80
                    > USED AT LINE 104 IN core-alu.z80
                    > USED AT LINE 114 IN core-alu.z80
                    > USED AT LINE 123 IN core-alu.z80
                    > USED AT LINE 148 IN core-alu.z80
                    > USED AT LINE 255 IN core-alu.z80
                    > USED AT LINE 295 IN core-alu.z80
                    > USED AT LINE 61 IN core-compiler.z80
                    > USED AT LINE 54 IN core-control.z80
                    > USED AT LINE 51 IN core-format.z80
                    > USED AT LINE 83 IN core-format.z80
                    > USED AT LINE 61 IN core-interpret.z80
                    > USED AT LINE 79 IN core-interpret.z80
                    > USED AT LINE 137 IN core-interpret.z80
                    > USED AT LINE 155 IN core-interpret.z80
                    > USED AT LINE 160 IN core-interpret.z80
                    > USED AT LINE 176 IN core-interpret.z80
                    > USED AT LINE 177 IN core-interpret.z80
                    > USED AT LINE 187 IN core-interpret.z80
                    > USED AT LINE 195 IN core-interpret.z80
                    > USED AT LINE 219 IN core-interpret.z80
                    > USED AT LINE 270 IN core-interpret.z80
                    > USED AT LINE 115 IN core-io.z80
                    > USED AT LINE 127 IN core-io.z80
                    > USED AT LINE 210 IN core-io.z80
                    > USED AT LINE 229 IN core-io.z80
                    > USED AT LINE 240 IN core-io.z80
                    > USED AT LINE 68 IN core-stacks.z80
                    > USED AT LINE 68 IN core-stacks.z80
                    > USED AT LINE 11 IN core-utils.z80
                    > USED AT LINE 42 IN core-utils.z80
                    > USED AT LINE 44 IN core-utils.z80
                    > USED AT LINE 85 IN core-utils.z80
                    > USED AT LINE 87 IN core-utils.z80
                    > USED AT LINE 89 IN core-utils.z80
                    > USED AT LINE 122 IN core-utils.z80
                    > USED AT LINE 43 IN tester.z80
SWAP:               1064 DEFINED AT LINE 11
                    > USED AT LINE 96 IN core-alu.z80
                    > USED AT LINE 112 IN core-alu.z80
                    > USED AT LINE 119 IN core-alu.z80
                    > USED AT LINE 121 IN core-alu.z80
                    > USED AT LINE 148 IN core-alu.z80
                    > USED AT LINE 243 IN core-alu.z80
                    > USED AT LINE 260 IN core-alu.z80
                    > USED AT LINE 314 IN core-alu.z80
                    > USED AT LINE 335 IN core-alu.z80
                    > USED AT LINE 48 IN core-control.z80
                    > USED AT LINE 59 IN core-control.z80
                    > USED AT LINE 64 IN core-control.z80
                    > USED AT LINE 12 IN core-format.z80
                    > USED AT LINE 19 IN core-interpret.z80
                    > USED AT LINE 20 IN core-interpret.z80
                    > USED AT LINE 23 IN core-interpret.z80
                    > USED AT LINE 29 IN core-interpret.z80
                    > USED AT LINE 32 IN core-interpret.z80
                    > USED AT LINE 36 IN core-interpret.z80
                    > USED AT LINE 65 IN core-interpret.z80
                    > USED AT LINE 144 IN core-interpret.z80
                    > USED AT LINE 156 IN core-interpret.z80
                    > USED AT LINE 194 IN core-interpret.z80
                    > USED AT LINE 210 IN core-io.z80
                    > USED AT LINE 90 IN core-memory.z80
                    > USED AT LINE 91 IN core-memory.z80
                    > USED AT LINE 96 IN core-memory.z80
                    > USED AT LINE 103 IN core-memory.z80
                    > USED AT LINE 109 IN core-memory.z80
                    > USED AT LINE 156 IN core-memory.z80
                    > USED AT LINE 188 IN core-memory.z80
                    > USED AT LINE 63 IN core-stacks.z80
                    > USED AT LINE 85 IN core-utils.z80
                    > USED AT LINE 87 IN core-utils.z80
                    > USED AT LINE 21 IN tester.z80
                    > USED AT LINE 40 IN tester.z80
OVER:               106C DEFINED AT LINE 11
                    > USED AT LINE 128 IN core-alu.z80
                    > USED AT LINE 250 IN core-alu.z80
                    > USED AT LINE 59 IN core-compiler.z80
                    > USED AT LINE 52 IN core-format.z80
                    > USED AT LINE 17 IN core-interpret.z80
                    > USED AT LINE 22 IN core-interpret.z80
                    > USED AT LINE 56 IN core-interpret.z80
                    > USED AT LINE 65 IN core-interpret.z80
                    > USED AT LINE 82 IN core-interpret.z80
                    > USED AT LINE 85 IN core-interpret.z80
                    > USED AT LINE 133 IN core-interpret.z80
                    > USED AT LINE 134 IN core-interpret.z80
                    > USED AT LINE 154 IN core-io.z80
                    > USED AT LINE 185 IN core-io.z80
                    > USED AT LINE 197 IN core-io.z80
                    > USED AT LINE 215 IN core-io.z80
                    > USED AT LINE 229 IN core-io.z80
                    > USED AT LINE 90 IN core-memory.z80
                    > USED AT LINE 96 IN core-memory.z80
                    > USED AT LINE 171 IN core-memory.z80
                    > USED AT LINE 183 IN core-memory.z80
                    > USED AT LINE 185 IN core-memory.z80
                    > USED AT LINE 73 IN core-stacks.z80
                    > USED AT LINE 73 IN core-stacks.z80
                    > USED AT LINE 16 IN core-utils.z80
QDUP:               1074 DEFINED AT LINE 11
                    > USED AT LINE 84 IN core-compiler.z80
                    > USED AT LINE 135 IN core-interpret.z80
                    > USED AT LINE 172 IN core-interpret.z80
                    > USED AT LINE 174 IN core-interpret.z80
                    > USED AT LINE 225 IN core-interpret.z80
                    > USED AT LINE 131 IN core-memory.z80
                    > USED AT LINE 94 IN core-utils.z80
                    > USED AT LINE 113 IN core-utils.z80
QDUP1:              1080 DEFINED AT LINE 57 IN core-stacks.z80
ROT:                1082 DEFINED AT LINE 11
                    > USED AT LINE 78 IN core-stacks.z80
                    > USED AT LINE 35 IN core-utils.z80
                    > USED AT LINE 35 IN core-utils.z80
DDROP:              1090 DEFINED AT LINE 11
                    > USED AT LINE 43 IN core-interpret.z80
                    > USED AT LINE 80 IN core-io.z80
                    > USED AT LINE 150 IN core-memory.z80
                    > USED AT LINE 162 IN core-memory.z80
DDUP:               109A DEFINED AT LINE 11
                    > USED AT LINE 94 IN core-alu.z80
                    > USED AT LINE 103 IN core-alu.z80
                    > USED AT LINE 111 IN core-alu.z80
                    > USED AT LINE 119 IN core-alu.z80
                    > USED AT LINE 300 IN core-alu.z80
                    > USED AT LINE 217 IN core-io.z80
                    > USED AT LINE 159 IN core-memory.z80
                    > USED AT LINE 187 IN core-memory.z80
                    > USED AT LINE 76 IN core-utils.z80
                    > USED AT LINE 80 IN core-utils.z80
TWOSWAP:            10A4 DEFINED AT LINE 11
PICK:               10B2 DEFINED AT LINE 11
                    > USED AT LINE 54 IN core-utils.z80
DEPTH:              10C6 DEFINED AT LINE 11
                    > USED AT LINE 256 IN core-interpret.z80
                    > USED AT LINE 50 IN core-utils.z80
                    > USED AT LINE 59 IN tester.z80
                    > USED AT LINE 68 IN tester.z80
                    > USED AT LINE 70 IN tester.z80
                    > USED AT LINE 79 IN tester.z80
SZERO:              10DC DEFINED AT LINE 11
                    > USED AT LINE 66 IN core-kernel.z80
                    > USED AT LINE 89 IN core-stacks.z80
RZERO:              10E4 DEFINED AT LINE 11
TQKEY:              10EC DEFINED AT LINE 49
                    > USED AT LINE 56 IN core-io.z80
TEMIT:              10F4 DEFINED AT LINE 49
                    > USED AT LINE 72 IN core-io.z80
TEXPE:              10FC DEFINED AT LINE 49
                    > USED AT LINE 234 IN core-io.z80
TTAP:               1104 DEFINED AT LINE 49
                    > USED AT LINE 225 IN core-io.z80
TECHO:              110C DEFINED AT LINE 49
                    > USED AT LINE 188 IN core-io.z80
                    > USED AT LINE 196 IN core-io.z80
TPROM:              1114 DEFINED AT LINE 49
                    > USED AT LINE 270 IN core-interpret.z80
BASE:               111C DEFINED AT LINE 11
                    > USED AT LINE 28 IN core-format.z80
                    > USED AT LINE 16 IN core-interpret.z80
                    > USED AT LINE 29 IN core-interpret.z80
                    > USED AT LINE 44 IN core-interpret.z80
                    > USED AT LINE 166 IN core-io.z80
                    > USED AT LINE 30 IN core-utils.z80
TEMP:               1124 DEFINED AT LINE 49
                    > USED AT LINE 50 IN core-interpret.z80
                    > USED AT LINE 68 IN core-interpret.z80
                    > USED AT LINE 69 IN core-interpret.z80
                    > USED AT LINE 153 IN core-interpret.z80
SPAN:               112C DEFINED AT LINE 49
INN:                1134 DEFINED AT LINE 11
NTIB:               113C DEFINED AT LINE 49
                    > USED AT LINE 92 IN core-interpret.z80
                    > USED AT LINE 104 IN core-interpret.z80
                    > USED AT LINE 125 IN core-memory.z80
CSP:                1144 DEFINED AT LINE 49
TEVAL:              114C DEFINED AT LINE 49
                    > USED AT LINE 267 IN core-interpret.z80
TNUMB:              1154 DEFINED AT LINE 49
                    > USED AT LINE 92 IN core-compiler.z80
                    > USED AT LINE 231 IN core-interpret.z80
HLD:                115C DEFINED AT LINE 49
                    > USED AT LINE 17 IN core-format.z80
                    > USED AT LINE 22 IN core-format.z80
                    > USED AT LINE 23 IN core-format.z80
                    > USED AT LINE 51 IN core-format.z80
HANDL:              1164 DEFINED AT LINE 49
                    > USED AT LINE 185 IN core-interpret.z80
                    > USED AT LINE 186 IN core-interpret.z80
                    > USED AT LINE 192 IN core-interpret.z80
                    > USED AT LINE 193 IN core-interpret.z80
CNTXT:              116C DEFINED AT LINE 49
                    > USED AT LINE 167 IN core-interpret.z80
CRRNT:              1174 DEFINED AT LINE 49
                    > USED AT LINE 73 IN core-compiler.z80
                    > USED AT LINE 72 IN core-utils.z80
CP:                 117C DEFINED AT LINE 49
                    > USED AT LINE 13 IN core-compiler.z80
                    > USED AT LINE 19 IN core-compiler.z80
                    > USED AT LINE 45 IN core-compiler.z80
                    > USED AT LINE 114 IN core-memory.z80
NP:                 1184 DEFINED AT LINE 49
                    > USED AT LINE 115 IN core-interpret.z80
LAST:               118C DEFINED AT LINE 11
                    > USED AT LINE 50 IN core-compiler.z80
                    > USED AT LINE 70 IN core-compiler.z80
                    > USED AT LINE 101 IN core-compiler.z80
                    > USED AT LINE 134 IN core-compiler.z80
VFRTH:              1194 DEFINED AT LINE 49
UTYPE:              119C DEFINED AT LINE 11
                    > USED AT LINE 97 IN core-utils.z80
UTYP1:              11A6 DEFINED AT LINE 6 IN core-utils.z80
                    > USED AT LINE 10 IN core-utils.z80
UTYP2:              11B4 DEFINED AT LINE 9 IN core-utils.z80
                    > USED AT LINE 5 IN core-utils.z80
DMP:                11BC DEFINED AT LINE 49
PDUM1:              11D0 DEFINED AT LINE 19 IN core-utils.z80
                    > USED AT LINE 23 IN core-utils.z80
PDUM2:              11E0 DEFINED AT LINE 22 IN core-utils.z80
                    > USED AT LINE 18 IN core-utils.z80
DUMP:               11E6 DEFINED AT LINE 11
DUMP1:              11FA DEFINED AT LINE 33 IN core-utils.z80
                    > USED AT LINE 39 IN core-utils.z80
DUMP2:              121E DEFINED AT LINE 41 IN core-utils.z80
                    > USED AT LINE 38 IN core-utils.z80
DUMP3:              1222 DEFINED AT LINE 43 IN core-utils.z80
                    > USED AT LINE 40 IN core-utils.z80
DOTS:               122C DEFINED AT LINE 11
DOTS1:              123A DEFINED AT LINE 53 IN core-utils.z80
                    > USED AT LINE 56 IN core-utils.z80
DOTS2:              1240 DEFINED AT LINE 55 IN core-utils.z80
                    > USED AT LINE 52 IN core-utils.z80
TNAME:              124E DEFINED AT LINE 11
                    > USED AT LINE 111 IN core-utils.z80
TNAM1:              1254 DEFINED AT LINE 73 IN core-utils.z80
                    > USED AT LINE 86 IN core-utils.z80
TNAM2:              1260 DEFINED AT LINE 77 IN core-utils.z80
                    > USED AT LINE 83 IN core-utils.z80
TNAM3:              1278 DEFINED AT LINE 84 IN core-utils.z80
                    > USED AT LINE 79 IN core-utils.z80
                    > USED AT LINE 81 IN core-utils.z80
TNAM4:              128C DEFINED AT LINE 88 IN core-utils.z80
                    > USED AT LINE 75 IN core-utils.z80
DOTID:              1294 DEFINED AT LINE 11
                    > USED AT LINE 115 IN core-utils.z80
DOTI1:              12AA DEFINED AT LINE 98 IN core-utils.z80
                    > USED AT LINE 95 IN core-utils.z80
SEE:                12B8 DEFINED AT LINE 11
SEE1:               12C2 DEFINED AT LINE 108 IN core-utils.z80
                    > USED AT LINE 121 IN core-utils.z80
SEE2:               12D0 DEFINED AT LINE 112 IN core-utils.z80
                    > USED AT LINE 110 IN core-utils.z80
SEE3:               12DE DEFINED AT LINE 117 IN core-utils.z80
                    > USED AT LINE 114 IN core-utils.z80
SEE4:               12E4 DEFINED AT LINE 119 IN core-utils.z80
                    > USED AT LINE 116 IN core-utils.z80
TESDOT:             12EE DEFINED AT LINE 11
TESDOT1:            12FE DEFINED AT LINE 8 IN tester.z80
                    > USED AT LINE 6 IN tester.z80
TESHALT:            1306 DEFINED AT LINE 49
                    > USED AT LINE 82 IN tester.z80
TESHASH:            130C DEFINED AT LINE 49
TESHASHN:           1318 DEFINED AT LINE 49
                    > USED AT LINE 69 IN tester.z80
                    > USED AT LINE 80 IN tester.z80
TESHASHN1:          1322 DEFINED AT LINE 38 IN tester.z80
TESHASHN2:          133C DEFINED AT LINE 42 IN tester.z80
TESSTRT:            1342 DEFINED AT LINE 11
TESLBR:             1350 DEFINED AT LINE 11
TESRBR:             136A DEFINED AT LINE 11
TESEQ:              1380 DEFINED AT LINE 11
TESEQ1:             1396 DEFINED AT LINE 83 IN tester.z80
TESEND:             1398 DEFINED AT LINE 11
LASTN:              13BA DEFINED AT LINE 88
                    > USED AT LINE 30 IN defaults.z80
                    > USED AT LINE 31 IN defaults.z80
SPP:                2200 DEFINED AT LINE 3 IN variables.z80
                    > USED AT LINE 45
                    > USED AT LINE 5 IN defaults.z80
TIBB:               2200 DEFINED AT LINE 4 IN variables.z80
                    > USED AT LINE 18 IN defaults.z80
                    > USED AT LINE 67 IN core-kernel.z80
RPP:                2400 DEFINED AT LINE 6 IN variables.z80
                    > USED AT LINE 53
                    > USED AT LINE 6 IN defaults.z80
SERBUF:             2400 DEFINED AT LINE 9 IN variables.z80
                    > USED AT LINE 19 IN interrupt.z80
                    > USED AT LINE 21 IN interrupt.z80
                    > USED AT LINE 6 IN serial.z80
                    > USED AT LINE 21 IN serial.z80
                    > USED AT LINE 23 IN serial.z80
SERINPTR:           243F DEFINED AT LINE 10 IN variables.z80
                    > USED AT LINE 16 IN interrupt.z80
                    > USED AT LINE 22 IN interrupt.z80
                    > USED AT LINE 7 IN serial.z80
SERRDPTR:           2441 DEFINED AT LINE 11 IN variables.z80
                    > USED AT LINE 8 IN serial.z80
                    > USED AT LINE 18 IN serial.z80
                    > USED AT LINE 26 IN serial.z80
SERBUFUSED:         2443 DEFINED AT LINE 12 IN variables.z80
                    > USED AT LINE 10 IN interrupt.z80
                    > USED AT LINE 25 IN interrupt.z80
                    > USED AT LINE 27 IN interrupt.z80
                    > USED AT LINE 10 IN serial.z80
                    > USED AT LINE 27 IN serial.z80
                    > USED AT LINE 29 IN serial.z80
                    > USED AT LINE 51 IN serial.z80
UPP:                2445 DEFINED AT LINE 14 IN variables.z80
                    > USED AT LINE 49
                    > USED AT LINE 42 IN core-does.z80
VARSZERO:           2445 DEFINED AT LINE 16 IN variables.z80
VARRZERO:           2447 DEFINED AT LINE 17 IN variables.z80
VARTQKEY:           2449 DEFINED AT LINE 18 IN variables.z80
VARTEMIT:           244B DEFINED AT LINE 19 IN variables.z80
VARTEXPE:           244D DEFINED AT LINE 20 IN variables.z80
VARTTAP:            244F DEFINED AT LINE 21 IN variables.z80
VARTECHO:           2451 DEFINED AT LINE 22 IN variables.z80
VARTPROM:           2453 DEFINED AT LINE 23 IN variables.z80
VARBASE:            2455 DEFINED AT LINE 24 IN variables.z80
VARTEMP:            2457 DEFINED AT LINE 25 IN variables.z80
VARSPAN:            2459 DEFINED AT LINE 26 IN variables.z80
VARINN:             245B DEFINED AT LINE 27 IN variables.z80
VARNTIB:            245D DEFINED AT LINE 28 IN variables.z80
VARTIB:             245F DEFINED AT LINE 29 IN variables.z80
VARCSP:             2461 DEFINED AT LINE 30 IN variables.z80
VARTEVAL:           2463 DEFINED AT LINE 31 IN variables.z80
VARTNUMB:           2465 DEFINED AT LINE 32 IN variables.z80
VARHLD:             2467 DEFINED AT LINE 33 IN variables.z80
VARHANDL:           2469 DEFINED AT LINE 34 IN variables.z80
VARCNTXT:           246B DEFINED AT LINE 35 IN variables.z80
VARVOCABS:          246D DEFINED AT LINE 36 IN variables.z80
VARCRRNT:           246F DEFINED AT LINE 37 IN variables.z80
VARVOCABLP:         2471 DEFINED AT LINE 38 IN variables.z80
VARCP:              2473 DEFINED AT LINE 39 IN variables.z80
VARNP:              2475 DEFINED AT LINE 40 IN variables.z80
VARLAST:            2477 DEFINED AT LINE 41 IN variables.z80
VARVFRTH:           2479 DEFINED AT LINE 42 IN variables.z80
VARVOCABL:          247B DEFINED AT LINE 43 IN variables.z80
VECTAB:             247D DEFINED AT LINE 45 IN variables.z80
VRST08:             247D DEFINED AT LINE 46 IN variables.z80
                    > USED AT LINE 12
VRST10:             247F DEFINED AT LINE 47 IN variables.z80
                    > USED AT LINE 16
VRST18:             2481 DEFINED AT LINE 48 IN variables.z80
                    > USED AT LINE 20
VRST20:             2483 DEFINED AT LINE 49 IN variables.z80
                    > USED AT LINE 24
VRST28:             2485 DEFINED AT LINE 50 IN variables.z80
                    > USED AT LINE 28
VRST30:             2487 DEFINED AT LINE 51 IN variables.z80
                    > USED AT LINE 32
VINT:               2489 DEFINED AT LINE 52 IN variables.z80
                    > USED AT LINE 36
                    > USED AT LINE 44
VNMI:               248B DEFINED AT LINE 53 IN variables.z80
                    > USED AT LINE 40
TESCNT:             248D DEFINED AT LINE 55 IN variables.z80
                    > USED AT LINE 58 IN tester.z80
TESDPTH:            248F DEFINED AT LINE 56 IN variables.z80
                    > USED AT LINE 59 IN tester.z80
                    > USED AT LINE 68 IN tester.z80
                    > USED AT LINE 70 IN tester.z80
                    > USED AT LINE 79 IN tester.z80
CPP:                2491 DEFINED AT LINE 58 IN variables.z80
                    > USED AT LINE 28 IN defaults.z80
NPP:                FFFE DEFINED AT LINE 60 IN variables.z80
                    > USED AT LINE 29 IN defaults.z80

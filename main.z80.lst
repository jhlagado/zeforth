0000                          .ENGINE   mycomputer   
0000                TESTMODE:   EQU   0   
0000                COMPO:    EQU   $20   ;lexicon compile only bit
0000                IMEDD:    EQU   $40   ;lexicon immediate bit
0000                MASKK:    EQU   $1F   ;lexicon bit mask
0000                CHARR:    EQU   1   ;byte size of a character
0000                CELLL:    EQU   2   
0000                BASEE:    EQU   10   ;BASE
0000                VOCSS:    EQU   8   ;depth of vocabulary stack
0000                MAXCHAR:   EQU   0FFh   ;Extended character set					                    ;  Use 07Fh for ASCII only
0000                MAXSIGNED:   EQU   07FFFh   ;max value of signed integer
0000                MAXUNSIGNED:   EQU   0FFFFh   ;max value of unsigned integer
0000                MAXNEGATIVE:   EQU   8000h   ;max value of negative integer
0000                BKSPP:    EQU   8   ;backspace
0000                LFF:      EQU   $0A   ;line feed
0000                CRR:      EQU   $0D   ;carriage return
0000                SPACEE:   EQU   $20   
0000                TIC:      EQU   $27   ;tick
0000                MINUSS:   EQU   $2D   
0000                UNDERSC:   EQU   $5F   
0000                CALLL:    EQU   $CD00   ; NOP followed by CALL opcodes
0000                MEM_SIZE:   EQU   $10000   ; MEM is 64K
0000                ROM_SIZE:   EQU   $2000   ; ROM is 8K
0000                RAM_SIZE:   EQU   MEM_SIZE - ROM_SIZE   ; RAM is 64K - 8K
0000                START_ROM:   EQU   BM   ; inclusive
0000                END_ROM:   EQU   BM + ROM_SIZE   ; exclusive
0000                START_RAM:   EQU   BM + ROM_SIZE   ; inclusive
0000                END_RAM:   EQU   START_RAM + RAM_SIZE   ; exclusive
0000                BM:       EQU   0   ; bottom of ROM memory
0000                EM:       EQU   BM + MEM_SIZE   
0000                UAB:      EQU   $C000   ; user area base address
0000                UAEM:     EQU   $E200   ; user area end of memory adr
0000                US:       EQU   END_DEFAULTS - DEFAULTS   ;user area size
0000                RTS:      EQU   $100 * CELLL   ;return stack/TIB size
0000                DTS:      EQU   $100 * CELLL   ;data stack size
0000                RET_STACK_SIZE:   EQU   $100   
0000                DATA_STACK_SIZE:   EQU   $100   
0000                INT_ADDR:   EQU   $0038   
0000                SER_BUFSIZE:   EQU   $3F   
0000                SER_FULLSIZE:   EQU   $30   
0000                SER_EMPTYSIZE:   EQU   5   
0000                RTS_HIGH:   EQU   $D6   
0000                RTS_LOW:   EQU   $96   
0000                TRUEE:    EQU   -1   
0000                FALSEE:   EQU   0   
0000                             ; Initialize assembly variables
0000                VVCODE:   .SET   0   
0000                VVNAME:   .SET   END_ROM   
0000                VVLINK:   .SET   0   ;force a null link
0000                VVUSER:   .SET   0   ;first user variable offset
0000                .macro MCODE,aaLEX,aaNAME,aaLABEL
0000                             ; 
0000                 .align 2                                         ;;force to cell boundary
0000                aaLABEL:                                              ;;assembly label
0000                 vvCODE .set $
0000                 vvLEN  .set (aaLEX & 01FH) / CELLL              ;;string cell count, round down
0000                 ORG vvNAME - ((vvLEN + 3) * CELLL)                                     ; ? needed
0000                 vvNAME .set $
0000                 DW vvCODE, vvLINK                               ;;token pointer and link
0000                 vvLINK .set $                                   ;;link points to a name string
0000                 DB aaLEX, aaNAME                                    ;;name string
0000                 ORG vvCODE                                      ;;restore code pointer
0000                .endm
0000                 
0000                .macro MCOLON,aaLEX,aaNAME,aaLABEL
0000                             ; 
0000                 mCODE aaLEX, aaNAME, aaLABEL
0000                 nop
0000                 CALL doLIST
0000                .endm
0000                 
0000                .macro MCONST,aaLEX,aaNAME,aaLABEL,aaVALUE
0000                             ; 
0000                	mCODE aaLEX, aaNAME, aaLABEL
0000                	nop
0000                	call DoCONST
0000                	DW	aaVALUE
0000                .endm
0000                 
0000                .macro MUSER,aaLEX,aaNAME,aaLABEL
0000                             ; 
0000                	mCODE aaLEX, aaNAME, aaLABEL
0000                 nop
0000                 CALL doLIST
0000                 DW DoUSE,vvUSER
0000                 vvUSER .set vvUSER + CELLL
0000                .endm
0000                 
0000                .macro MDSTR,aaFUNC,aaSTR
0000                             ; 
0000                 DW aaFUNC                       ;;function
0000                 vvLEN .set $                    ;;save address of count byte
0000                 DB 0,aaSTR                      ;;count byte and string
0000                 vvCODE .set $                   ;;save code pointer
0000                ORG vvLEN                           ;;point to count byte
0000                 DB vvCODE - vvLEN - 1           ;;set count
0000                ORG vvCODE                          ;;restore code pointer
0000                 .align 2
0000                .endm
0000                 
0000                .macro MNEXTHL,
0000                             ; 
0000                	LD	E,(HL)	                    ; 7t
0000                	INC	HL	                        ; 6t
0000                	LD	D,(HL)	                    ; 7t
0000                	INC	HL	                        ; 6t
0000                	EX	DE,HL	                    ; 4t
0000                	JP	(HL)	                    ; 4t
0000                .endm
0000                 
0000                .macro MNEXT,
0000                             ; 
0000                	EX	DE,HL	                    ; 4t
0000                 mNEXTHL                         ; 34t
0000                .endm
0000                 
0000                          .ORG   START_ROM   
0000                RESET:       
0000   C3 72 00               JP   INIT   ; C3 veclo vechi
0038                          .ORG   INT_ADDR   ; RST 38 - INTERRUPT VECTOR [ for IM 1 ]
0038   F5           SERIALINT:   PUSH   AF   
0039   E5                     PUSH   HL   
003A   DB 80                  IN   A,($80)   
003C   E6 01                  AND   $01   ; Check if interupt due to read buffer full
003E   28 2D                  JR   Z,rts0   ; if not, ignore
0040   DB 81                  IN   A,($81)   
0042   F5                     PUSH   AF   
0043   3A 3C 24               LD   A,(serBufUsed)   
0046   FE 3F                  CP   SER_BUFSIZE   ; If full then ignore
0048   20 03                  JR   NZ,notFull   
004A   F1                     POP   AF   
004B   18 20                  JR   rts0   
004D   2A 38 24     NOTFULL:   LD   HL,(serInPtr)   
0050   23                     INC   HL   
0051   7D                     LD   A,L   ; Only need to check low byte becasuse buffer<256 bytes
0052   FE 7D                  CP   (serBuf+SER_BUFSIZE) & $FF   
0054   20 03                  JR   NZ,notWrap   
0056   21 3E 24               LD   HL,serBuf   
0059   22 38 24     NOTWRAP:   LD   (serInPtr),HL   
005C   F1                     POP   AF   
005D   77                     LD   (HL),A   
005E   3A 3C 24               LD   A,(serBufUsed)   
0061   3C                     INC   A   
0062   32 3C 24               LD   (serBufUsed),A   
0065   FE 30                  CP   SER_FULLSIZE   
0067   38 04                  JR   C,rts0   
0069   3E D6                  LD   A,RTS_HIGH   
006B   D3 80                  OUT   ($80),A   
006D   E1           RTS0:     POP   HL   
006E   F1                     POP   AF   
006F   FB                     EI      
0070   ED 4D                  RETI      
0072                INIT:        
0072   21 00 22               LD   HL,SPP   ; Setup Forth data stack
0075   F9                     LD   SP,HL   ; also used as return stack by interrupts etc
0076   21 FA 00               LD   HL,DEFAULTS   ; initialize user variables with defaults
0079   11 00 24               LD   DE,UPP   
007C   01 3A 00               LD   BC,US   
007F   ED B0                  LDIR      
0081   21 00 24               LD   HL,RPP   ; set up Forth return stack
0084   E5                     PUSH   HL   
0085   DD E1                  POP   IX   
0087   01 FF FF               LD   BC,-1   ; empty stack marker
008A   11 01 00               LD   DE,RESET + 1   ; contains reset vector
008D   C3 A6 0C               JP   COLD   
0090                          IF   TESTMODE   
                              JP   TESTS_START   
0090                          ELSE      
0090   21 BE 0E               LD   HL,GREETING   
0093   CD EF 00               CALL   PRINTSZ   
0096                LOOP:        
0096   CD B3 00               CALL   RXA   
0099   CD DE 00               CALL   TXA   
009C   C3 96 00               JP   LOOP   
009F                          ENDIF      
009F                             ; Modified from code by Grant Searle
009F                             ; Minimum 6850 ACIA interrupt driven serial I/O
009F                INIT_IO:      
009F   F3                     DI      ; Disable interrupts
00A0   21 3E 24               LD   HL,serBuf   
00A3   22 38 24               LD   (serInPtr),HL   
00A6   22 3A 24               LD   (serRdPtr),HL   
00A9   AF                     XOR   A   
00AA   32 3C 24               LD   (serBufUsed),A   
00AD   3E 96                  LD   A,RTS_LOW   
00AF   D3 80                  OUT   ($80),A   ; Initialise ACIA
00B1   FB                     EI      
00B2   C9                     RET      
00B3                RXA:         
00B3                WAITFORCHAR:      
00B3   3A 3C 24               LD   A,(serBufUsed)   
00B6   FE 00                  CP   $00   
00B8   28 F9                  JR   Z,waitForChar   
00BA   E5                     PUSH   HL   
00BB   2A 3A 24               LD   HL,(serRdPtr)   
00BE   23                     INC   HL   
00BF   7D                     LD   A,L   ; Only need to check low byte becasuse buffer<256 bytes
00C0   FE 7D                  CP   (serBuf+SER_BUFSIZE) & $FF   
00C2   20 03                  JR   NZ,notRdWrap   
00C4   21 3E 24               LD   HL,serBuf   
00C7                NOTRDWRAP:      
00C7   F3                     DI      
00C8   22 3A 24               LD   (serRdPtr),HL   
00CB   3A 3C 24               LD   A,(serBufUsed)   
00CE   3D                     DEC   A   
00CF   32 3C 24               LD   (serBufUsed),A   
00D2   FE 05                  CP   SER_EMPTYSIZE   
00D4   30 04                  JR   NC,rts1   
00D6   3E 96                  LD   A,RTS_LOW   
00D8   D3 80                  OUT   ($80),A   
00DA                RTS1:        
00DA   7E                     LD   A,(HL)   
00DB   FB                     EI      
00DC   E1                     POP   HL   
00DD   C9                     RET      ; Char ready in A
00DE                TXA:         
00DE   F5                     PUSH   AF   ; Store character
00DF                CONOUT1:      
00DF   DB 80                  IN   A,($80)   ; Status byte
00E1   CB 4F                  BIT   1,A   ; Set Zero flag if still transmitting character
00E3   28 FA                  JR   Z,conout1   ; Loop until flag signals ready
00E5   F1                     POP   AF   ; Retrieve character
00E6   D3 81                  OUT   ($81),A   ; Output the character
00E8   C9                     RET      
00E9                CKINCHAR:      
00E9   3A 3C 24               LD   A,(serBufUsed)   
00EC   FE 00                  CP   $0   
00EE   C9                     RET      
00EF                PRINTSZ:      
00EF   7E                     LD   A,(HL)   ; Get character
00F0   B7                     OR   A   ; Is it $00 ?
00F1   C8                     RET   Z   ; Then RETurn on terminator
00F2   CD DE 00               CALL   TXA   ; Print it
00F5   23                     INC   HL   ; Next Character
00F6   18 F7                  JR   PRINTSZ   ; Continue until $00
00F8   C9                     RET      
00F9                          ALIGN   2   
00FA                DEFAULTS:      
00FA   00 22        DEFSP0:   DW   SPP   ; SP0
00FC   00 24        DEFRP0:   DW   RPP   ; RP0
00FE   78 0A        DEFQKEY:   DW   QRX   ; '?KEY
0100   94 0A        DEFTEMIT:   DW   TXSTO   ; 'EMIT
0102   00 00        DEFTEXPECT:   DW   0   ; 'EXPECT
0104   00 00        DEFTTAP:   DW   0   ; 'TAP
0106   94 0A        DEFTECHO:   DW   TXSTO   ; 'ECHO
0108   00 00        DEFTPROMPT:   DW   0   ; 'PROMPT
010A   00 00        DEFBASE:   DW   0   ; BASE
010C   00 00        DEFTMP:   DW   0   ; tmp
010E   00 00        DEFSPAN:   DW   0   ; SPAN
0110   00 00        DEFPIN:   DW   0   ; >IN
0112   00 00        DEFNTIB:   DW   0   ; #TIB
0114   00 22        DEFTIB:   DW   TIBB   ; TIB
0116   00 00        DEFCSP:   DW   0   ; CSP
0118   00 00        DEFTEVAL:   DW   0   ; 'EVAL
011A   00 00        DEFTNUM:   DW   0   ; 'NUMBER
011C   00 00        DEFHLD:   DW   0   ; HLD
011E   00 00        DEFHANDLER:   DW   0   ; HANDLER
0120   00 00        DEFCONTEXT:   DW   0   ; CONTEXT pointer
0122   00 00        DEFVOCABS:   DW   0   ; vocabulary stack    ???
0124   00 00        DEFCURRENT:   DW   0   ; CURRENT pointer
0126   00 00        DEFVOCABLP:   DW   0   ; vocabulary link pointer ???
0128   7D 24        DEFCP:    DW   CPP   ; CP  for runing phase on RAM
012A   FE FF        DEFNP:    DW   NPP   ; NP  for runing phase on RAM
012C   00 00        DEFLAST:   DW   0   ; LAST
012E   00 00        DEFFORTH:   DW   0   ; FORTH   \ mullti-user ???
0130   00 00        DEFVOCABL:   DW   0   ; vocabulary link       ???
0132   00 00        DEFCOLD:   DW   0   ; "COLD"
0134                END_DEFAULTS:      
0134                VVCODE:   .SET   $   
0134                             ;   2*		( x1 -- x2 )			
0134                             ;		Bit-shift left, filling the least significant bit with 0.
0134                          ;*Macro unroll: mCODE	2,'2*',TwoStar
0134                          ALIGN   2   
0134                TWOSTAR:      
0134                VVCODE:   .SET   $   
0134                VVLEN:    .SET   (2 & 01FH) / CELLL   
1FF8                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FF8                VVNAME:   .SET   $   
1FF8   34 01 00 00            DW   vvCODE,vvLINK   
1FFC                VVLINK:   .SET   $   
1FFC   02 32 2A               DB   2,"2*"   
0134                          .ORG   vvCODE   
0134   CB 21                  SLA   C   
0136   CB 10                  RL   B   
0138                          ;*Macro unroll: 	mNEXT
0138   EB                     EX   DE,HL   
0139                          ;*Macro unroll:  mNEXTHL                         ; 34t
0139   5E                     LD   E,(HL)   ; 34t
013A   23                     INC   HL   
013B   56                     LD   D,(HL)   
013C   23                     INC   HL   
013D   EB                     EX   DE,HL   
013E   E9                     JP   (HL)   
013F                             ;   0<          ( n -- t )
013F                             ;               Return true if n is negative.
013F                          ;*Macro unroll: mCODE	2,'0<', ZLESS
013F                          ALIGN   2   
0140                ZLESS:       
0140                VVCODE:   .SET   $   
0140                VVLEN:    .SET   (2 & 01FH) / CELLL   
1FF0                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FF0                VVNAME:   .SET   $   
1FF0   40 01 FC 1F            DW   vvCODE,vvLINK   
1FF4                VVLINK:   .SET   $   
1FF4   02 30 3C               DB   2,"0<"   
0140                          .ORG   vvCODE   
0140   CB 20                  SLA   B   ; sign bit -> cy flag
0142   9F                     SBC   A,A   ; propagate cy through A
0143   47                     LD   B,A   ; put 0000 or FFFF in TOS
0144   4F                     LD   C,A   
0145                          ;*Macro unroll: 	mNEXT
0145   EB                     EX   DE,HL   
0146                          ;*Macro unroll:  mNEXTHL                         ; 34t
0146   5E                     LD   E,(HL)   ; 34t
0147   23                     INC   HL   
0148   56                     LD   D,(HL)   
0149   23                     INC   HL   
014A   EB                     EX   DE,HL   
014B   E9                     JP   (HL)   
014C                             ;   AND         ( w w -- w )
014C                             ;               Bitwise AND.
014C                          ;*Macro unroll: mCODE	3, 'AND', ANDD
014C                          ALIGN   2   
014C                ANDD:        
014C                VVCODE:   .SET   $   
014C                VVLEN:    .SET   (3 & 01FH) / CELLL   
1FE8                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FE8                VVNAME:   .SET   $   
1FE8   4C 01 F4 1F            DW   vvCODE,vvLINK   
1FEC                VVLINK:   .SET   $   
1FEC   03 41 4E 44            DB   3,"AND"   
014C                          .ORG   vvCODE   
014C   E1                     POP   HL   
014D   78                     LD   A,B   
014E   A4                     AND   H   
014F   47                     LD   B,A   
0150   79                     LD   A,C   
0151   A5                     AND   L   
0152   4F                     LD   C,A   
0153                          ;*Macro unroll: 	mNEXT
0153   EB                     EX   DE,HL   
0154                          ;*Macro unroll:  mNEXTHL                         ; 34t
0154   5E                     LD   E,(HL)   ; 34t
0155   23                     INC   HL   
0156   56                     LD   D,(HL)   
0157   23                     INC   HL   
0158   EB                     EX   DE,HL   
0159   E9                     JP   (HL)   
015A                             ;   OR          ( w w -- w )
015A                             ;               Bitwise inclusive OR.
015A                          ;*Macro unroll: mCODE	2,'OR', ORR
015A                          ALIGN   2   
015A                ORR:         
015A                VVCODE:   .SET   $   
015A                VVLEN:    .SET   (2 & 01FH) / CELLL   
1FE0                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FE0                VVNAME:   .SET   $   
1FE0   5A 01 EC 1F            DW   vvCODE,vvLINK   
1FE4                VVLINK:   .SET   $   
1FE4   02 4F 52               DB   2,"OR"   
015A                          .ORG   vvCODE   
015A   E1                     POP   HL   
015B   78                     LD   A,B   
015C   B4                     OR   H   
015D   47                     LD   B,A   
015E   79                     LD   A,C   
015F   B5                     OR   L   
0160   4F                     LD   C,A   
0161                          ;*Macro unroll: 	mNEXT
0161   EB                     EX   DE,HL   
0162                          ;*Macro unroll:  mNEXTHL                         ; 34t
0162   5E                     LD   E,(HL)   ; 34t
0163   23                     INC   HL   
0164   56                     LD   D,(HL)   
0165   23                     INC   HL   
0166   EB                     EX   DE,HL   
0167   E9                     JP   (HL)   
0168                             ;   XOR         ( w w -- w )
0168                             ;               Bitwise exclusive
0168                          ;*Macro unroll: mCODE	3, 'XOR', XORR
0168                          ALIGN   2   
0168                XORR:        
0168                VVCODE:   .SET   $   
0168                VVLEN:    .SET   (3 & 01FH) / CELLL   
1FD8                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FD8                VVNAME:   .SET   $   
1FD8   68 01 E4 1F            DW   vvCODE,vvLINK   
1FDC                VVLINK:   .SET   $   
1FDC   03 58 4F 52            DB   3,"XOR"   
0168                          .ORG   vvCODE   
0168   E1                     POP   HL   
0169   78                     LD   A,B   
016A   AC                     XOR   H   
016B   47                     LD   B,A   
016C   79                     LD   A,C   
016D   AD                     XOR   L   
016E   4F                     LD   C,A   
016F                          ;*Macro unroll: 	mNEXT
016F   EB                     EX   DE,HL   
0170                          ;*Macro unroll:  mNEXTHL                         ; 34t
0170   5E                     LD   E,(HL)   ; 34t
0171   23                     INC   HL   
0172   56                     LD   D,(HL)   
0173   23                     INC   HL   
0174   EB                     EX   DE,HL   
0175   E9                     JP   (HL)   
0176                             ;   +           ( w w -- sum )
0176                             ;               Add top two items.
0176                          ;*Macro unroll: mCOLON	1,'+', PLUS
0176                          ;*Macro unroll:  mCODE 1, "+", PLUS
0176                          ALIGN   2   
0176                PLUS:        
0176                VVCODE:   .SET   $   
0176                VVLEN:    .SET   (1 & 01FH) / CELLL   
1FD2                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FD2                VVNAME:   .SET   $   
1FD2   76 01 DC 1F            DW   vvCODE,vvLINK   
1FD6                VVLINK:   .SET   $   
1FD6   01 2B                  DB   1,"+"   
0176                          .ORG   vvCODE   
0176   00                     NOP      
0177   CD 42 06               CALL   doLIST   
017A   7E 02 20 0F 80 06      DW   UMPlus,DROP,EXIT   
0180                             ;   D+          ( d d -- d )
0180                             ;               Double addition, as an example using UM+.
0180                          ;*Macro unroll: mCOLON	2,'D+',DPlus
0180                          ;*Macro unroll:  mCODE 2, "D+", DPlus
0180                          ALIGN   2   
0180                DPLUS:       
0180                VVCODE:   .SET   $   
0180                VVLEN:    .SET   (2 & 01FH) / CELLL   
1FCA                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FCA                VVNAME:   .SET   $   
1FCA   80 01 D6 1F            DW   vvCODE,vvLINK   
1FCE                VVLINK:   .SET   $   
1FCE   02 44 2B               DB   2,"D+"   
0180                          .ORG   vvCODE   
0180   00                     NOP      
0181   CD 42 06               CALL   doLIST   
0184   F4 0E 28 0F F4 0E 7E 02 DW   ToR,SWAP,ToR,UMPlus   
018C   06 0F 06 0F 76 01 76 01 80 06 DW   RFrom,RFrom,Plus,Plus,EXIT   
0196                             ;   NOT         ( w -- w )
0196                             ;               One's complement of tos.
0196                          ;*Macro unroll: mCOLON  3, 'NOT', INVER
0196                          ;*Macro unroll:  mCODE 3, "NOT", INVER
0196                          ALIGN   2   
0196                INVER:       
0196                VVCODE:   .SET   $   
0196                VVLEN:    .SET   (3 & 01FH) / CELLL   
1FC2                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FC2                VVNAME:   .SET   $   
1FC2   96 01 CE 1F            DW   vvCODE,vvLINK   
1FC6                VVLINK:   .SET   $   
1FC6   03 4E 4F 54            DB   3,"NOT"   
0196                          .ORG   vvCODE   
0196   00                     NOP      
0197   CD 42 06               CALL   doLIST   
019A   54 06 FF FF 68 01 80 06 DW   DoLIT,-1,XORR,EXIT   
01A2                             ;   NEGAT      ( n -- -n )
01A2                             ;               Two's complement of tos.
01A2                          ;*Macro unroll: mCOLON	6,'NEGAT',NEGAT
01A2                          ;*Macro unroll:  mCODE 6, "NEGAT", NEGAT
01A2                          ALIGN   2   
01A2                NEGAT:       
01A2                VVCODE:   .SET   $   
01A2                VVLEN:    .SET   (6 & 01FH) / CELLL   
1FB6                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FB6                VVNAME:   .SET   $   
1FB6   A2 01 C6 1F            DW   vvCODE,vvLINK   
1FBA                VVLINK:   .SET   $   
1FBA   06 4E 45 47 41 54      DB   6,"NEGAT"   
01A2                          .ORG   vvCODE   
01A2   00                     NOP      
01A3   CD 42 06               CALL   doLIST   
01A6   96 01 AC 01 80 06      DW   INVER,OnePlus,EXIT   
01AC                             ;   1+		( n1|u1 -- n2|u2 )		
01AC                             ;		Increase top of the stack item by 1.
01AC                          ;*Macro unroll: mCOLON	2,'1+',OnePlus
01AC                          ;*Macro unroll:  mCODE 2, "1+", OnePlus
01AC                          ALIGN   2   
01AC                ONEPLUS:      
01AC                VVCODE:   .SET   $   
01AC                VVLEN:    .SET   (2 & 01FH) / CELLL   
1FAE                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FAE                VVNAME:   .SET   $   
1FAE   AC 01 BA 1F            DW   vvCODE,vvLINK   
1FB2                VVLINK:   .SET   $   
1FB2   02 31 2B               DB   2,"1+"   
01AC                          .ORG   vvCODE   
01AC   00                     NOP      
01AD   CD 42 06               CALL   doLIST   
01B0   54 06 01 00 76 01 80 06 DW   DoLIT,1,Plus,EXIT   
01B8                             ;   DNEGATE     ( d -- -d )
01B8                             ;               Two's complement of top double.
01B8                          ;*Macro unroll: mCOLON	7,'DNEGATE',DNEGATE
01B8                          ;*Macro unroll:  mCODE 7, "DNEGATE", DNEGATE
01B8                          ALIGN   2   
01B8                DNEGATE:      
01B8                VVCODE:   .SET   $   
01B8                VVLEN:    .SET   (7 & 01FH) / CELLL   
1FA2                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1FA2                VVNAME:   .SET   $   
1FA2   B8 01 B2 1F            DW   vvCODE,vvLINK   
1FA6                VVLINK:   .SET   $   
1FA6   07 44 4E 45 47 41 54 45 DB   7,"DNEGATE"   
01B8                          .ORG   vvCODE   
01B8   00                     NOP      
01B9   CD 42 06               CALL   doLIST   
01BC   96 01 F4 0E 96 01      DW   INVER,ToR,INVER   
01C2   54 06 01 00 7E 02      DW   DoLIT,1,UMPlus   
01C8   06 0F 76 01 80 06      DW   RFrom,Plus,EXIT   
01CE                             ;   -           ( n1 n2 -- n1-n2 )
01CE                             ;               Subtraction.
01CE                          ;*Macro unroll: mCOLON	1, '-', SUBB
01CE                          ;*Macro unroll:  mCODE 1, "-", SUBB
01CE                          ALIGN   2   
01CE                SUBB:        
01CE                VVCODE:   .SET   $   
01CE                VVLEN:    .SET   (1 & 01FH) / CELLL   
1F9C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F9C                VVNAME:   .SET   $   
1F9C   CE 01 A6 1F            DW   vvCODE,vvLINK   
1FA0                VVLINK:   .SET   $   
1FA0   01 2D                  DB   1,"-"   
01CE                          .ORG   vvCODE   
01CE   00                     NOP      
01CF   CD 42 06               CALL   doLIST   
01D2   A2 01 76 01 80 06      DW   NEGAT,Plus,EXIT   
01D8                             ;   ABS         ( n -- n )
01D8                             ;               Return the absolute value of n.
01D8                          ;*Macro unroll: mCOLON	3,'ABS',ABSS
01D8                          ;*Macro unroll:  mCODE 3, "ABS", ABSS
01D8                          ALIGN   2   
01D8                ABSS:        
01D8                VVCODE:   .SET   $   
01D8                VVLEN:    .SET   (3 & 01FH) / CELLL   
1F94                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F94                VVNAME:   .SET   $   
1F94   D8 01 A0 1F            DW   vvCODE,vvLINK   
1F98                VVLINK:   .SET   $   
1F98   03 41 42 53            DB   3,"ABS"   
01D8                          .ORG   vvCODE   
01D8   00                     NOP      
01D9   CD 42 06               CALL   doLIST   
01DC   18 0F 40 01 CC 0C E6 01 DW   DUPP,ZLESS,QBRAN,ABS1   
01E4   A2 01                  DW   NEGAT   
01E6                ABS1:        
01E6   80 06                  DW   EXIT   
01E8                             ;   =           ( w w -- t )
01E8                             ;               Return true if top two are equal.
01E8                          ;*Macro unroll: mCOLON	1, '=', EQUAL
01E8                          ;*Macro unroll:  mCODE 1, "=", EQUAL
01E8                          ALIGN   2   
01E8                EQUAL:       
01E8                VVCODE:   .SET   $   
01E8                VVLEN:    .SET   (1 & 01FH) / CELLL   
1F8E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F8E                VVNAME:   .SET   $   
1F8E   E8 01 98 1F            DW   vvCODE,vvLINK   
1F92                VVLINK:   .SET   $   
1F92   01 3D                  DB   1,"="   
01E8                          .ORG   vvCODE   
01E8   00                     NOP      
01E9   CD 42 06               CALL   doLIST   
01EC   68 01 F2 01 80 06      DW   XORR,ZeroEquals,EXIT   
01F2                             ;   0=		( x -- flag )			\ CORE
01F2                             ;		Return true if x is zero.
01F2                          ;*Macro unroll: mCODE	2,'0=',ZeroEquals,_FLINK
01F2                          ALIGN   2   
01F2                ZEROEQUALS:      
01F2                VVCODE:   .SET   $   
01F2                VVLEN:    .SET   (2 & 01FH) / CELLL   
1F86                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F86                VVNAME:   .SET   $   
1F86   F2 01 92 1F            DW   vvCODE,vvLINK   
1F8A                VVLINK:   .SET   $   
1F8A   02 30 3D               DB   2,"0="   
01F2                          .ORG   vvCODE   
01F2   78                     LD   A,B   
01F3   B1                     OR   C   ; result=0 if bc was 0
01F4   D6 01                  SUB   1   ; cy set   if bc was 0 ;;; ???? TODO: replace with DEC A
01F6   9F                     SBC   A,A   ; propagate cy through A
01F7   47                     LD   B,A   ; put 0000 or FFFF in TOS
01F8   4F                     LD   C,A   
01F9                          ;*Macro unroll: 	mNEXT
01F9   EB                     EX   DE,HL   
01FA                          ;*Macro unroll:  mNEXTHL                         ; 34t
01FA   5E                     LD   E,(HL)   ; 34t
01FB   23                     INC   HL   
01FC   56                     LD   D,(HL)   
01FD   23                     INC   HL   
01FE   EB                     EX   DE,HL   
01FF   E9                     JP   (HL)   
0200                             ;   U<          ( u u -- t )
0200                             ;               Unsigned compare of top two items.
0200                          ;*Macro unroll: mCOLON	2,'U<',ULess
0200                          ;*Macro unroll:  mCODE 2, "U<", ULess
0200                          ALIGN   2   
0200                ULESS:       
0200                VVCODE:   .SET   $   
0200                VVLEN:    .SET   (2 & 01FH) / CELLL   
1F7E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F7E                VVNAME:   .SET   $   
1F7E   00 02 8A 1F            DW   vvCODE,vvLINK   
1F82                VVLINK:   .SET   $   
1F82   02 55 3C               DB   2,"U<"   
0200                          .ORG   vvCODE   
0200   00                     NOP      
0201   CD 42 06               CALL   doLIST   
0204   66 0F 68 01 40 01      DW   DDUP,XORR,ZLESS   
020A   CC 0C 14 02            DW   QBRAN,ULES1   
020E   1A 02 40 01 80 06      DW   NIP,ZLESS,EXIT   
0214                ULES1:       
0214   CE 01 40 01 80 06      DW   SUBB,ZLESS,EXIT   
021A                             ;   NIP 	( n1 n2 -- n2 ) 		\ CORE EXT
021A                             ;		Discard the second stack item.
021A                          ;*Macro unroll: mCOLON	3,'NIP',NIP
021A                          ;*Macro unroll:  mCODE 3, "NIP", NIP
021A                          ALIGN   2   
021A                NIP:         
021A                VVCODE:   .SET   $   
021A                VVLEN:    .SET   (3 & 01FH) / CELLL   
1F76                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F76                VVNAME:   .SET   $   
1F76   1A 02 82 1F            DW   vvCODE,vvLINK   
1F7A                VVLINK:   .SET   $   
1F7A   03 4E 49 50            DB   3,"NIP"   
021A                          .ORG   vvCODE   
021A   00                     NOP      
021B   CD 42 06               CALL   doLIST   
021E   28 0F 20 0F 80 06      DW   SWAP,DROP,EXIT   
0224                             ;   <           ( n1 n2 -- t )
0224                             ;               is less than
0224                          ;*Macro unroll: mCOLON	1,'<',LESS
0224                          ;*Macro unroll:  mCODE 1, "<", LESS
0224                          ALIGN   2   
0224                LESS:        
0224                VVCODE:   .SET   $   
0224                VVLEN:    .SET   (1 & 01FH) / CELLL   
1F70                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F70                VVNAME:   .SET   $   
1F70   24 02 7A 1F            DW   vvCODE,vvLINK   
1F74                VVLINK:   .SET   $   
1F74   01 3C                  DB   1,"<"   
0224                          .ORG   vvCODE   
0224   00                     NOP      
0225   CD 42 06               CALL   doLIST   
0228   66 0F 68 01 40 01 CC 0C 38 02 DW   DDUP,XORR,ZLESS,QBRAN,LESS1   
0232   20 0F 40 01 80 06      DW   DROP,ZLESS,EXIT   
0238                LESS1:       
0238   CE 01 40 01 80 06      DW   SUBB,ZLESS,EXIT   
023E                             ;   >           ( n1 n2 -- t )
023E                             ;               is greater than
023E                          ;*Macro unroll: mCOLON	1,'>',GreaterThan
023E                          ;*Macro unroll:  mCODE 1, ">", GreaterThan
023E                          ALIGN   2   
023E                GREATERTHAN:      
023E                VVCODE:   .SET   $   
023E                VVLEN:    .SET   (1 & 01FH) / CELLL   
1F6A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F6A                VVNAME:   .SET   $   
1F6A   3E 02 74 1F            DW   vvCODE,vvLINK   
1F6E                VVLINK:   .SET   $   
1F6E   01 3E                  DB   1,">"   
023E                          .ORG   vvCODE   
023E   00                     NOP      
023F   CD 42 06               CALL   doLIST   
0242   28 0F 24 02 80 06      DW   SWAP,LESS,EXIT   
0248                             ;   MAX         ( n n -- n )
0248                             ;               Return the greater of two top stack items.
0248                          ;*Macro unroll: mCOLON	3,'MAX',MAX
0248                          ;*Macro unroll:  mCODE 3, "MAX", MAX
0248                          ALIGN   2   
0248                MAX:         
0248                VVCODE:   .SET   $   
0248                VVLEN:    .SET   (3 & 01FH) / CELLL   
1F62                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F62                VVNAME:   .SET   $   
1F62   48 02 6E 1F            DW   vvCODE,vvLINK   
1F66                VVLINK:   .SET   $   
1F66   03 4D 41 58            DB   3,"MAX"   
0248                          .ORG   vvCODE   
0248   00                     NOP      
0249   CD 42 06               CALL   doLIST   
024C   66 0F 24 02 CC 0C 56 02 DW   DDUP,LESS,QBRAN,MAX1   
0254   28 0F                  DW   SWAP   
0256                MAX1:        
0256   20 0F 80 06            DW   DROP,EXIT   
025A                             ;   MIN         ( n n -- n )
025A                             ;               Return the smaller of top two stack items.
025A                          ;*Macro unroll: mCOLON	3,'MIN',MIN
025A                          ;*Macro unroll:  mCODE 3, "MIN", MIN
025A                          ALIGN   2   
025A                MIN:         
025A                VVCODE:   .SET   $   
025A                VVLEN:    .SET   (3 & 01FH) / CELLL   
1F5A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F5A                VVNAME:   .SET   $   
1F5A   5A 02 66 1F            DW   vvCODE,vvLINK   
1F5E                VVLINK:   .SET   $   
1F5E   03 4D 49 4E            DB   3,"MIN"   
025A                          .ORG   vvCODE   
025A   00                     NOP      
025B   CD 42 06               CALL   doLIST   
025E   66 0F 3E 02 CC 0C 68 02 DW   DDUP,GreaterThan,QBRAN,MIN1   
0266   28 0F                  DW   SWAP   
0268                MIN1:        
0268   20 0F 80 06            DW   DROP,EXIT   
026C                             ;   WITHIN      ( u ul uh -- t )
026C                             ;               Return true if u is within the range of ul and uh.
026C                          ;*Macro unroll: mCOLON	6,'WITHIN',WITHI
026C                          ;*Macro unroll:  mCODE 6, "WITHIN", WITHI
026C                          ALIGN   2   
026C                WITHI:       
026C                VVCODE:   .SET   $   
026C                VVLEN:    .SET   (6 & 01FH) / CELLL   
1F4E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F4E                VVNAME:   .SET   $   
1F4E   6C 02 5E 1F            DW   vvCODE,vvLINK   
1F52                VVLINK:   .SET   $   
1F52   06 57 49 54 48 49 4E   DB   6,"WITHIN"   
026C                          .ORG   vvCODE   
026C   00                     NOP      
026D   CD 42 06               CALL   doLIST   
0270   34 0F CE 01 F4 0E      DW   OVER,SUBB,ToR   ;ul <= u < uh
0276   CE 01 06 0F 00 02 80 06 DW   SUBB,RFrom,ULess,EXIT   
027E                             ;   UM+         ( w w -- w cy )
027E                             ;               Add two numbers, return the sum and carry flag.
027E                          ;*Macro unroll: mCODE	3,'um+',UMPlus
027E                          ALIGN   2   
027E                UMPLUS:      
027E                VVCODE:   .SET   $   
027E                VVLEN:    .SET   (3 & 01FH) / CELLL   
1F46                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F46                VVNAME:   .SET   $   
1F46   7E 02 52 1F            DW   vvCODE,vvLINK   
1F4A                VVLINK:   .SET   $   
1F4A   03 75 6D 2B            DB   3,"um+"   
027E                          .ORG   vvCODE   
027E   E1                     POP   HL   ;10t
027F   09                     ADD   HL,BC   ;11t
0280   E5                     PUSH   HL   ;11t
0281   01 00 00               LD   BC,0   ;10t
0284   30 01                  JR   NC,UMP1   ;12/7t
0286                UMP2:        
0286   03                     INC   BC   ; 6t
0287                UMP1:        
0287                          ;*Macro unroll:  mNEXT
0287   EB                     EX   DE,HL   
0288                          ;*Macro unroll:  mNEXTHL                         ; 34t
0288   5E                     LD   E,(HL)   ; 34t
0289   23                     INC   HL   
028A   56                     LD   D,(HL)   
028B   23                     INC   HL   
028C   EB                     EX   DE,HL   
028D   E9                     JP   (HL)   
028E                             ; UM/MOD      ( udl udh u -- ur uq )
028E                             ; Unsigned divide of a double by a single. Return mod and quotient.
028E                             ; Note: Less range than eForth because most significant word discarded TODO: fix
028E                          ;*Macro unroll: mCOLON  6,'UM/MOD',UMMOD
028E                          ;*Macro unroll:  mCODE 6, "UM/MOD", UMMOD
028E                          ALIGN   2   
028E                UMMOD:       
028E                VVCODE:   .SET   $   
028E                VVLEN:    .SET   (6 & 01FH) / CELLL   
1F3A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F3A                VVNAME:   .SET   $   
1F3A   8E 02 4A 1F            DW   vvCODE,vvLINK   
1F3E                VVLINK:   .SET   $   
1F3E   06 55 4D 2F 4D 4F 44   DB   6,"UM/MOD"   
028E                          .ORG   vvCODE   
028E   00                     NOP      
028F   CD 42 06               CALL   doLIST   
0292   1A 02 98 02 80 06      DW   NIP,UMSlashMOD2,EXIT   
0298                             ; UM/MOD2	( ud u1 -- u2 u3 )		
0298                             ; Unsigned division of a double-cell number ud by a single-cell
0298                             ; number u1. Return remainder u2 and quotient u3.
0298                             ; Note: Less range than eForth TODO: fix
0298                          ;*Macro unroll: mCODE	6,'UM/MOD2',UMSlashMOD2
0298                          ALIGN   2   
0298                UMSLASHMOD2:      
0298                VVCODE:   .SET   $   
0298                VVLEN:    .SET   (6 & 01FH) / CELLL   
1F2E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F2E                VVNAME:   .SET   $   
1F2E   98 02 3E 1F            DW   vvCODE,vvLINK   
1F32                VVLINK:   .SET   $   
1F32   06 55 4D 2F 4D 4F 44 32 DB   6,"UM/MOD2"   
0298                          .ORG   vvCODE   
0298   78                     LD   A,B   
0299   B1                     OR   C   
029A   28 29                  JR   Z,UMMOD2   ;?zero divisor
029C                UMMOD11:      
029C   C5                     PUSH   BC   
029D   D9                     EXX      
029E   C1                     POP   BC   
029F   E1                     POP   HL   
02A0   D1                     POP   DE   
02A1   7D                     LD   A,L   
02A2   91                     SUB   C   
02A3   7C                     LD   A,H   
02A4   98                     SBC   A,B   
02A5   30 24                  JR   NC,UMMOD1   ;?too big
02A7                UMMOD12:      
02A7   7C                     LD   A,H   
02A8   65                     LD   H,L   
02A9   6A                     LD   L,D   
02AA   16 08                  LD   D,8   
02AC   D5                     PUSH   DE   
02AD   CD DF 02               CALL   UMMOD3   
02B0   D1                     POP   DE   
02B1   E5                     PUSH   HL   
02B2   6B                     LD   L,E   
02B3   CD DF 02               CALL   UMMOD3   
02B6   57                     LD   D,A   
02B7   5C                     LD   E,H   
02B8   C1                     POP   BC   
02B9   61                     LD   H,C   
02BA   D5                     PUSH   DE   
02BB   E5                     PUSH   HL   
02BC   D9                     EXX      
02BD   C1                     POP   BC   
02BE                          ;*Macro unroll: 	mNEXT
02BE   EB                     EX   DE,HL   
02BF                          ;*Macro unroll:  mNEXTHL                         ; 34t
02BF   5E                     LD   E,(HL)   ; 34t
02C0   23                     INC   HL   
02C1   56                     LD   D,(HL)   
02C2   23                     INC   HL   
02C3   EB                     EX   DE,HL   
02C4   E9                     JP   (HL)   
02C5                UMMOD2:      
02C5   01 CF 0E               LD   BC,ERR_DIVZERO   ; divide by 0
02C8   C3 F6 0C               JP   THROWX   
02CB                UMMOD1:      
02CB   01 E0 0E               LD   BC,ERR_OUTOFRANGE   ; result out of range
02CE   C3 F6 0C               JP   THROWX   
02D1                UMMOD4:      
02D1   5F                     LD   E,A   
02D2   7C                     LD   A,H   
02D3   91                     SUB   C   
02D4   67                     LD   H,A   
02D5   7B                     LD   A,E   
02D6   98                     SBC   A,B   
02D7   30 10                  JR   NC,UMMOD5   
02D9                UMMOD13:      
02D9   7C                     LD   A,H   
02DA   81                     ADD   A,C   
02DB   67                     LD   H,A   
02DC   7B                     LD   A,E   
02DD   15                     DEC   D   
02DE   C8                     RET   Z   
02DF                UMMOD3:      
02DF   29                     ADD   HL,HL   
02E0   17                     RLA      
02E1   30 EE                  JR   NC,UMMOD4   
02E3                UMMOD14:      
02E3   5F                     LD   E,A   
02E4   7C                     LD   A,H   
02E5   91                     SUB   C   
02E6   67                     LD   H,A   
02E7   7B                     LD   A,E   
02E8   98                     SBC   A,B   
02E9                UMMOD5:      
02E9   2C                     INC   L   
02EA   15                     DEC   D   
02EB   20 F2                  JR   NZ,UMMOD3   
02ED                UMMOD15:      
02ED   C9                     RET      
02EE                             ;   FM/MOD	( d n1 -- n2 n3 )		\ CORE
02EE                             ;		Signed floored divide of double by single. Return mod n2
02EE                             ;		and quotient n3.
02EE                             ; TODO: this is usually called M/MOD in eForth
02EE                          ;*Macro unroll: mCOLON	6,'FM/MOD',FMSlashMOD
02EE                          ;*Macro unroll:  mCODE 6, "FM/MOD", FMSlashMOD
02EE                          ALIGN   2   
02EE                FMSLASHMOD:      
02EE                VVCODE:   .SET   $   
02EE                VVLEN:    .SET   (6 & 01FH) / CELLL   
1F22                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F22                VVNAME:   .SET   $   
1F22   EE 02 32 1F            DW   vvCODE,vvLINK   
1F26                VVLINK:   .SET   $   
1F26   06 46 4D 2F 4D 4F 44   DB   6,"FM/MOD"   
02EE                          .ORG   vvCODE   
02EE   00                     NOP      
02EF   CD 42 06               CALL   doLIST   
02F2   18 0F F4 0E 66 0F 68 01 F4 0E F4 0E 18 0F 40 01 DW   DUPP,ToR,DDUP,XORR,ToR,ToR,DUPP,ZLESS   
0302   CC 0C 08 03            DW   QBRAN,FMMOD1   
0306   B8 01                  DW   DNEGATE   
0308                FMMOD1:      
0308   30 0D D8 01 98 02      DW   rat,ABSS,UMSlashMOD2   
030E   06 0F 40 01 CC 0C 1C 03 DW   RFrom,ZLESS,QBRAN,FMMOD2   
0316   28 0F A2 01 28 0F      DW   SWAP,NEGAT,SWAP   
031C                FMMOD2:      
031C   06 0F 40 01 CC 0C 4E 03 DW   RFrom,ZLESS,QBRAN,FMMOD3   
0324   A2 01 34 0F CC 0C 36 03 DW   NEGAT,OVER,QBRAN,FMMOD4   
032C   30 0D 4E 0F CE 01 28 0F 60 03 DW   rat,ROT,SUBB,SWAP,OneSUBB   
0336                FMMOD4:      
0336   06 0F 20 0F            DW   RFrom,DROP   
033A   54 06 00 00 34 0F 24 02 CC 0C 4C 03 DW   DoLIT,0,OVER,LESS,QBRAN,FMMOD6   
0346   54 06 E0 0E F6 0C      DW   DoLIT,ERR_OUTOFRANGE,THROWX   
034C                FMMOD6:      
034C   80 06                  DW   EXIT   
034E                FMMOD3:      
034E   06 0F 20 0F 18 0F 40 01 CC 0C 4C 03 DW   RFrom,DROP,DUPP,ZLESS,QBRAN,FMMOD6   
035A   54 06 E0 0E F6 0C      DW   DoLIT,ERR_OUTOFRANGE,THROWX   
0360                             ;   1-		( n1|u1 -- n2|u2 )		\ COR
0360                             ;		Decrease top of the stack item by 1.
0360                          ;*Macro unroll: mCOLON	2,'1-',OneSUBB,_FLINK
0360                          ;*Macro unroll:  mCODE 2, "1-", OneSUBB
0360                          ALIGN   2   
0360                ONESUBB:      
0360                VVCODE:   .SET   $   
0360                VVLEN:    .SET   (2 & 01FH) / CELLL   
1F1A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F1A                VVNAME:   .SET   $   
1F1A   60 03 26 1F            DW   vvCODE,vvLINK   
1F1E                VVLINK:   .SET   $   
1F1E   02 31 2D               DB   2,"1-"   
0360                          .ORG   vvCODE   
0360   00                     NOP      
0361   CD 42 06               CALL   doLIST   
0364   54 06 FF FF 76 01 80 06 DW   DoLIT,-1,Plus,EXIT   
036C                             ;   S>D 	( n -- d )			\ CORE
036C                             ;		Convert a single-cell number n to double-cell number.
036C                          ;*Macro unroll: mCOLON	3,'S>D',SToD,_FLINK
036C                          ;*Macro unroll:  mCODE 3, "S>D", SToD
036C                          ALIGN   2   
036C                STOD:        
036C                VVCODE:   .SET   $   
036C                VVLEN:    .SET   (3 & 01FH) / CELLL   
1F12                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F12                VVNAME:   .SET   $   
1F12   6C 03 1E 1F            DW   vvCODE,vvLINK   
1F16                VVLINK:   .SET   $   
1F16   03 53 3E 44            DB   3,"S>D"   
036C                          .ORG   vvCODE   
036C   00                     NOP      
036D   CD 42 06               CALL   doLIST   
0370   18 0F 40 01 80 06      DW   DUPP,ZLESS,EXIT   
0376                             ;   /MOD        ( n n -- r q )
0376                             ;               Signed divide. Return mod and quotient.
0376                          ;*Macro unroll: mCOLON	4,'/MOD',SlashMOD
0376                          ;*Macro unroll:  mCODE 4, "/MOD", SlashMOD
0376                          ALIGN   2   
0376                SLASHMOD:      
0376                VVCODE:   .SET   $   
0376                VVLEN:    .SET   (4 & 01FH) / CELLL   
1F08                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F08                VVNAME:   .SET   $   
1F08   76 03 16 1F            DW   vvCODE,vvLINK   
1F0C                VVLINK:   .SET   $   
1F0C   04 2F 4D 4F 44         DB   4,"/MOD"   
0376                          .ORG   vvCODE   
0376   00                     NOP      
0377   CD 42 06               CALL   doLIST   
037A   F4 0E 6C 03 06 0F EE 02 80 06 DW   ToR,SToD,RFrom,FMSlashMOD,EXIT   
0384                             ;   MOD         ( n n -- r )
0384                             ;               Signed divide. Return mod only.
0384                          ;*Macro unroll: mCOLON	3,'MOD',MODD
0384                          ;*Macro unroll:  mCODE 3, "MOD", MODD
0384                          ALIGN   2   
0384                MODD:        
0384                VVCODE:   .SET   $   
0384                VVLEN:    .SET   (3 & 01FH) / CELLL   
1F00                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1F00                VVNAME:   .SET   $   
1F00   84 03 0C 1F            DW   vvCODE,vvLINK   
1F04                VVLINK:   .SET   $   
1F04   03 4D 4F 44            DB   3,"MOD"   
0384                          .ORG   vvCODE   
0384   00                     NOP      
0385   CD 42 06               CALL   doLIST   
0388   76 03 20 0F 80 06      DW   SlashMOD,DROP,EXIT   
038E                             ; 
038E                             ;   /           ( n n -- q )
038E                             ;               Signed divide. Return quotient only.
038E                          ;*Macro unroll: mCOLON	1,'/',Slash
038E                          ;*Macro unroll:  mCODE 1, "/", Slash
038E                          ALIGN   2   
038E                SLASH:       
038E                VVCODE:   .SET   $   
038E                VVLEN:    .SET   (1 & 01FH) / CELLL   
1EFA                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1EFA                VVNAME:   .SET   $   
1EFA   8E 03 04 1F            DW   vvCODE,vvLINK   
1EFE                VVLINK:   .SET   $   
1EFE   01 2F                  DB   1,"/"   
038E                          .ORG   vvCODE   
038E   00                     NOP      
038F   CD 42 06               CALL   doLIST   
0392   76 03 1A 02 80 06      DW   SlashMOD,NIP,EXIT   
0398                             ; Multiply
0398                             ;   UM*         ( u u -- ud )
0398                             ;               Unsigned multiply. Return double product.
0398                          ;*Macro unroll: mCODE	3,'UM*',UMStar,_FLINK
0398                          ALIGN   2   
0398                UMSTAR:      
0398                VVCODE:   .SET   $   
0398                VVLEN:    .SET   (3 & 01FH) / CELLL   
1EF2                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1EF2                VVNAME:   .SET   $   
1EF2   98 03 FE 1E            DW   vvCODE,vvLINK   
1EF6                VVLINK:   .SET   $   
1EF6   03 55 4D 2A            DB   3,"UM*"   
0398                          .ORG   vvCODE   
0398   EB                     EX   DE,HL   
0399   E3                     EX   (SP),HL   
039A   EB                     EX   DE,HL   
039B   21 00 00               LD   HL,0   
039E   3E 10                  LD   A,010h   
03A0                UMSTAR1:      
03A0   29                     ADD   HL,HL   
03A1   EB                     EX   DE,HL   
03A2   ED 6A                  ADC   HL,HL   
03A4   EB                     EX   DE,HL   
03A5   30 04                  JR   NC,UMSTAR3   
03A7                UMSTAR2:      
03A7   09                     ADD   HL,BC   
03A8   30 01                  JR   NC,UMSTAR3   
03AA                UMSTAR5:      
03AA   13                     INC   DE   
03AB                UMSTAR3:      
03AB   3D                     DEC   A   
03AC   20 F2                  JR   NZ,UMSTAR1   
03AE                UMSTAR4:      
03AE   42                     LD   B,D   
03AF   4B                     LD   C,E   
03B0   E3                     EX   (SP),HL   
03B1                          ;*Macro unroll: 	mNEXTHL
03B1   5E                     LD   E,(HL)   
03B2   23                     INC   HL   
03B3   56                     LD   D,(HL)   
03B4   23                     INC   HL   
03B5   EB                     EX   DE,HL   
03B6   E9                     JP   (HL)   
03B7                             ;   *           ( n n -- n )
03B7                             ;               Signed multiply. Return single product.
03B7                          ;*Macro unroll: mCOLON	1,'*',Star
03B7                          ;*Macro unroll:  mCODE 1, "*", Star
03B7                          ALIGN   2   
03B8                STAR:        
03B8                VVCODE:   .SET   $   
03B8                VVLEN:    .SET   (1 & 01FH) / CELLL   
1EEC                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1EEC                VVNAME:   .SET   $   
1EEC   B8 03 F6 1E            DW   vvCODE,vvLINK   
1EF0                VVLINK:   .SET   $   
1EF0   01 2A                  DB   1,"*"   
03B8                          .ORG   vvCODE   
03B8   00                     NOP      
03B9   CD 42 06               CALL   doLIST   
03BC   98 03 20 0F 80 06      DW   UMStar,DROP,EXIT   
03C2                             ;   M*          ( n n -- d )
03C2                             ;               Signed multiply. Return double product.
03C2                          ;*Macro unroll: mCOLON	2,'M*',MStar,
03C2                          ;*Macro unroll:  mCODE 2, "M*", MStar
03C2                          ALIGN   2   
03C2                MSTAR:       
03C2                VVCODE:   .SET   $   
03C2                VVLEN:    .SET   (2 & 01FH) / CELLL   
1EE4                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1EE4                VVNAME:   .SET   $   
1EE4   C2 03 F0 1E            DW   vvCODE,vvLINK   
1EE8                VVLINK:   .SET   $   
1EE8   02 4D 2A               DB   2,"M*"   
03C2                          .ORG   vvCODE   
03C2   00                     NOP      
03C3   CD 42 06               CALL   doLIST   
03C6   66 0F 68 01 40 01 F4 0E D8 01 28 0F D8 01 DW   DDUP,XORR,ZLESS,ToR,ABSS,SWAP,ABSS   
03D4   98 03 06 0F CC 0C DE 03 DW   UMStar,RFrom,QBRAN,MSTAR1   
03DC   B8 01                  DW   DNEGATE   
03DE                MSTAR1:      
03DE   80 06                  DW   EXIT   
03E0                             ;   */MOD       ( n1 n2 n3 -- r q )
03E0                             ;               Multiply n1 and n2, then divide by n3. Return mod and quotient.
03E0                          ;*Macro unroll: mCOLON	5,'*/MOD',StarSlashMOD
03E0                          ;*Macro unroll:  mCODE 5, "*/MOD", StarSlashMOD
03E0                          ALIGN   2   
03E0                STARSLASHMOD:      
03E0                VVCODE:   .SET   $   
03E0                VVLEN:    .SET   (5 & 01FH) / CELLL   
1EDA                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1EDA                VVNAME:   .SET   $   
1EDA   E0 03 E8 1E            DW   vvCODE,vvLINK   
1EDE                VVLINK:   .SET   $   
1EDE   05 2A 2F 4D 4F 44      DB   5,"*/MOD"   
03E0                          .ORG   vvCODE   
03E0   00                     NOP      
03E1   CD 42 06               CALL   doLIST   
03E4   F4 0E C2 03 06 0F EE 02 80 06 DW   ToR,MStar,RFrom,FMSlashMOD,EXIT   
03EE                             ;   */          ( n1 n2 n3 -- q )
03EE                             ;               Multiply n1 by n2, then divide by n3. Return quotient only.
03EE                          ;*Macro unroll: mCOLON	2,'*/',StarSlash
03EE                          ;*Macro unroll:  mCODE 2, "*/", StarSlash
03EE                          ALIGN   2   
03EE                STARSLASH:      
03EE                VVCODE:   .SET   $   
03EE                VVLEN:    .SET   (2 & 01FH) / CELLL   
1ED2                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1ED2                VVNAME:   .SET   $   
1ED2   EE 03 DE 1E            DW   vvCODE,vvLINK   
1ED6                VVLINK:   .SET   $   
1ED6   02 2A 2F               DB   2,"*/"   
03EE                          .ORG   vvCODE   
03EE   00                     NOP      
03EF   CD 42 06               CALL   doLIST   
03F2   E0 03 1A 02 80 06      DW   StarSlashMOD,NIP,EXIT   
03F8                             ;   CELL+       ( a -- a )
03F8                             ;               Add cell size in byte to address.
03F8                          ;*Macro unroll: mCOLON	5,'CELL+',CELLP
03F8                          ;*Macro unroll:  mCODE 5, "CELL+", CELLP
03F8                          ALIGN   2   
03F8                CELLP:       
03F8                VVCODE:   .SET   $   
03F8                VVLEN:    .SET   (5 & 01FH) / CELLL   
1EC8                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1EC8                VVNAME:   .SET   $   
1EC8   F8 03 D6 1E            DW   vvCODE,vvLINK   
1ECC                VVLINK:   .SET   $   
1ECC   05 43 45 4C 4C 2B      DB   5,"CELL+"   
03F8                          .ORG   vvCODE   
03F8   00                     NOP      
03F9   CD 42 06               CALL   doLIST   
03FC   54 06 02 00 76 01 80 06 DW   DOLIT,CELLL,PLUS,EXIT   
0404                             ;   CELL-       ( a -- a )
0404                             ;               Subtract cell size in byte from address.
0404                          ;*Macro unroll: mCOLON	5,'CELL-',CELLM
0404                          ;*Macro unroll:  mCODE 5, "CELL-", CELLM
0404                          ALIGN   2   
0404                CELLM:       
0404                VVCODE:   .SET   $   
0404                VVLEN:    .SET   (5 & 01FH) / CELLL   
1EBE                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1EBE                VVNAME:   .SET   $   
1EBE   04 04 CC 1E            DW   vvCODE,vvLINK   
1EC2                VVLINK:   .SET   $   
1EC2   05 43 45 4C 4C 2D      DB   5,"CELL-"   
0404                          .ORG   vvCODE   
0404   00                     NOP      
0405   CD 42 06               CALL   doLIST   
0408   54 06 FE FF 76 01 80 06 DW   DOLIT,-CELLL,PLUS,EXIT   
0410                             ;   CELLS       ( n -- n )
0410                             ;               Multiply tos by cell size in bytes.
0410                          ;*Macro unroll: mCOLON	5,'CELLS',CELLS
0410                          ;*Macro unroll:  mCODE 5, "CELLS", CELLS
0410                          ALIGN   2   
0410                CELLS:       
0410                VVCODE:   .SET   $   
0410                VVLEN:    .SET   (5 & 01FH) / CELLL   
1EB4                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1EB4                VVNAME:   .SET   $   
1EB4   10 04 C2 1E            DW   vvCODE,vvLINK   
1EB8                VVLINK:   .SET   $   
1EB8   05 43 45 4C 4C 53      DB   5,"CELLS"   
0410                          .ORG   vvCODE   
0410   00                     NOP      
0411   CD 42 06               CALL   doLIST   
0414   34 01 80 06            DW   TwoStar,EXIT   
0418                             ;   CHAR+	( c-addr1 -- c-addr2 )		\ CORE
0418                             ;		Returns next character-aligned address.
0418                             ; 
0418                          ;*Macro unroll: mCOLON	5,'CHAR+',CHARPlus
0418                          ;*Macro unroll:  mCODE 5, "CHAR+", CHARPlus
0418                          ALIGN   2   
0418                CHARPLUS:      
0418                VVCODE:   .SET   $   
0418                VVLEN:    .SET   (5 & 01FH) / CELLL   
1EAA                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1EAA                VVNAME:   .SET   $   
1EAA   18 04 B8 1E            DW   vvCODE,vvLINK   
1EAE                VVLINK:   .SET   $   
1EAE   05 43 48 41 52 2B      DB   5,"CHAR+"   
0418                          .ORG   vvCODE   
0418   00                     NOP      
0419   CD 42 06               CALL   doLIST   
041C   54 06 01 00 76 01 80 06 DW   DoLIT,CHARR,Plus,EXIT   
0424                             ; ;   '           ( -- ca )
0424                             ; ;               Search context vocabularies for the next word in input stream.
0424                             ; mCOLON  1,"'",TICK
0424                             ;     DW      TOKEN,NAMEQ             ;?defined
0424                             ;     DW      QBRAN,TICK1
0424                             ;     DW      EXIT                    ;yes, push code address
0424                             ; TICK1:
0424                             ;     DW      THROW                   ;no, error
0424                             ; ;   ALLOT       ( n -- )
0424                             ; ;               Allocate n bytes to the code dictionary.
0424                             ; mCOLON  5,"ALLOT",ALLOT
0424                             ;     DW      CP,PSTOR,EXIT           ;adjust code pointer
0424                             ;   ,           ( w -- )
0424                             ;               Compile an integer into the code dictionary.
0424                          ;*Macro unroll: mCOLON  1,',',COMMA
0424                          ;*Macro unroll:  mCODE 1, ",", COMMA
0424                          ALIGN   2   
0424                COMMA:       
0424                VVCODE:   .SET   $   
0424                VVLEN:    .SET   (1 & 01FH) / CELLL   
1EA4                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1EA4                VVNAME:   .SET   $   
1EA4   24 04 AE 1E            DW   vvCODE,vvLINK   
1EA8                VVLINK:   .SET   $   
1EA8   01 2C                  DB   1,","   
0424                          .ORG   vvCODE   
0424   00                     NOP      
0425   CD 42 06               CALL   doLIST   
0428   B4 0D 18 0F F8 03      DW   HERE,DUPP,CELLP   ;cell boundary
042E   48 10 FE 0C FE 0C 80 06 DW   CP,STORE,STORE,EXIT   ;adjust code pointer, compile
0436                             ; ;   [COMPILE]   ( -- ; <string> )
0436                             ; ;               Compile the next immediate word into code dictionary.
0436                             ; mCOLON  IMEDD+9,"[COMPILE]",BCOMP
0436                             ;     DW      TICK,COMMA,EXIT
0436                             ;   COMPILE     ( -- )
0436                             ;               Compile the next address in colon list to code dictionary.
0436                          ;*Macro unroll: mCOLON  COMPO+7,'COMPILE',COMPI
0436                          ;*Macro unroll:  mCODE COMPO+7, "COMPILE", COMPI
0436                          ALIGN   2   
0436                COMPI:       
0436                VVCODE:   .SET   $   
0436                VVLEN:    .SET   (COMPO+7 & 01FH) / CELLL   
1E78                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1E78                VVNAME:   .SET   $   
1E78   36 04 A8 1E            DW   vvCODE,vvLINK   
1E7C                VVLINK:   .SET   $   
1E7C   27 43 4F 4D 50 49 4C 45 DB   COMPO+7,"COMPILE"   
0436                          .ORG   vvCODE   
0436   00                     NOP      
0437   CD 42 06               CALL   doLIST   
043A   06 0F 18 0F 0C 0D 24 04 DW   RFROM,DUPP,AT,COMMA   ;compile address
0442   F8 03 F4 0E 80 06      DW   CELLP,TOR,EXIT   ;adjust return address
0448                             ;   LITERAL     ( w -- )
0448                             ;               Compile tos to code dictionary as an integer literal.
0448                          ;*Macro unroll: mCOLON  IMEDD+7,'LITERAL',LITER
0448                          ;*Macro unroll:  mCODE IMEDD+7, "LITERAL", LITER
0448                          ALIGN   2   
0448                LITER:       
0448                VVCODE:   .SET   $   
0448                VVLEN:    .SET   (IMEDD+7 & 01FH) / CELLL   
1E2C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1E2C                VVNAME:   .SET   $   
1E2C   48 04 7C 1E            DW   vvCODE,vvLINK   
1E30                VVLINK:   .SET   $   
1E30   47 4C 49 54 45 52 41 4C DB   IMEDD+7,"LITERAL"   
0448                          .ORG   vvCODE   
0448   00                     NOP      
0449   CD 42 06               CALL   doLIST   
044C   36 04 54 06 24 04 80 06 DW   COMPI,DOLIT,COMMA,EXIT   
0454                             ; ;   $,"         ( -- )
0454                             ; ;               Compile a literal string up to next " .
0454                             ; mCOLON  3,"$,|",STRCQ
0454                             ;     DW      DOLIT,$22,WORDD         ;move string to code dictionary
0454                             ;     DW      COUNT,PLUS,ALGND        ;calculate aligned end of string
0454                             ;     DW      CP,STORE,EXIT           ;adjust the code pointer
0454                             ;   RECURSE     ( -- )
0454                             ;               Make the current word available for compilation.
0454                          ;*Macro unroll: mCOLON  IMEDD+7,'RECURSE',RECUR
0454                          ;*Macro unroll:  mCODE IMEDD+7, "RECURSE", RECUR
0454                          ALIGN   2   
0454                RECUR:       
0454                VVCODE:   .SET   $   
0454                VVLEN:    .SET   (IMEDD+7 & 01FH) / CELLL   
1DE0                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1DE0                VVNAME:   .SET   $   
1DE0   54 04 30 1E            DW   vvCODE,vvLINK   
1DE4                VVLINK:   .SET   $   
1DE4   47 52 45 43 55 52 53 45 DB   IMEDD+7,"RECURSE"   
0454                          .ORG   vvCODE   
0454   00                     NOP      
0455   CD 42 06               CALL   doLIST   
0458   58 10 0C 0D 06 09 24 04 80 06 DW   LAST,AT,NAMET,COMMA,EXIT   
0462                             ;   ?UNIQUE     ( a -- a )
0462                             ;               Display a warning message if the word already exists.
0462                          ;*Macro unroll: mCOLON  7,'?UNIQUE',UNIQU
0462                          ;*Macro unroll:  mCODE 7, "?UNIQUE", UNIQU
0462                          ALIGN   2   
0462                UNIQU:       
0462                VVCODE:   .SET   $   
0462                VVLEN:    .SET   (7 & 01FH) / CELLL   
1DD4                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1DD4                VVNAME:   .SET   $   
1DD4   62 04 E4 1D            DW   vvCODE,vvLINK   
1DD8                VVLINK:   .SET   $   
1DD8   07 3F 55 4E 49 51 55 45 DB   7,"?UNIQUE"   
0462                          .ORG   vvCODE   
0462   00                     NOP      
0463   CD 42 06               CALL   doLIST   
0466   18 0F C0 09            DW   DUPP,NAMEQ   ;?name exists
046A   CC 0C 7E 04            DW   QBRAN,UNIQ1   ;redefinitions are OK
046E                          ;*Macro unroll:  mDSTR   DOTQP,' reDef '         ;but warn the user
046E   5A 0B                  DW   DOTQP   ;but warn the user
0470                VVLEN:    .SET   $   
0470   00 20 72 65 44 65 66 20 DB   0," reDef "   
0478                VVCODE:   .SET   $   
0470                          .ORG   vvLEN   
0470   07                     DB   vvCODE - vvLEN - 1   
0478                          .ORG   vvCODE   
0478                          ALIGN   2   
0478   34 0F A2 0D 0A 0B      DW   OVER,COUNT,TYPEE   ;just in case its not planned
047E                UNIQ1:       
047E   20 0F 80 06            DW   DROP,EXIT   
0482                             ;   $,n         ( na -- )
0482                             ;               Build a new dictionary name using the string at na.
0482                          ;*Macro unroll: mCOLON  3,'$,n',SNAME
0482                          ;*Macro unroll:  mCODE 3, "$,n", SNAME
0482                          ALIGN   2   
0482                SNAME:       
0482                VVCODE:   .SET   $   
0482                VVLEN:    .SET   (3 & 01FH) / CELLL   
1DCC                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1DCC                VVNAME:   .SET   $   
1DCC   82 04 D8 1D            DW   vvCODE,vvLINK   
1DD0                VVLINK:   .SET   $   
1DD0   03 24 2C 6E            DB   3,"$,n"   
0482                          .ORG   vvCODE   
0482   00                     NOP      
0483   CD 42 06               CALL   doLIST   
0486   18 0F 24 0D            DW   DUPP,CAT   ;?null input
048A   CC 0C B4 04            DW   QBRAN,PNAM1   
048E   62 04                  DW   UNIQU   ;?redefinition
0490   18 0F 58 10 FE 0C      DW   DUPP,LAST,STORE   ;save na for vocabulary link
0496   B4 0D 9A 0E 28 0F      DW   HERE,ALGND,SWAP   ;align code address
049C   04 04                  DW   CELLM   ;link address
049E   40 10 0C 0D 0C 0D 34 0F FE 0C DW   CRRNT,AT,AT,OVER,STORE   
04A8   04 04 18 0F 50 10 FE 0C DW   CELLM,DUPP,NP,STORE   ;adjust name pointer
04B0   FE 0C 80 06            DW   STORE,EXIT   ;save code pointer
04B4                PNAM1:       
04B4                          ;*Macro unroll:  mDSTR   STRQP,' name'           ;null input
04B4   52 0B                  DW   STRQP   ;null input
04B6                VVLEN:    .SET   $   
04B6   00 20 6E 61 6D 65      DB   0," name"   
04BC                VVCODE:   .SET   $   
04B6                          .ORG   vvLEN   
04B6   05                     DB   vvCODE - vvLEN - 1   
04BC                          .ORG   vvCODE   
04BC                          ALIGN   2   
04BC   FC 09                  DW   THROW   
04BE                             ; FORTH compiler
04BE                             ;   $COMPILE    ( a -- )
04BE                             ;               Compile next word to code dictionary as a token or literal.
04BE                          ;*Macro unroll: mCOLON  8,'$COMPILE',SCOMP
04BE                          ;*Macro unroll:  mCODE 8, "$COMPILE", SCOMP
04BE                          ALIGN   2   
04BE                SCOMP:       
04BE                VVCODE:   .SET   $   
04BE                VVLEN:    .SET   (8 & 01FH) / CELLL   
1DBE                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1DBE                VVNAME:   .SET   $   
1DBE   BE 04 D0 1D            DW   vvCODE,vvLINK   
1DC2                VVLINK:   .SET   $   
1DC2   08 24 43 4F 4D 50 49 4C 45 DB   8,"$COMPILE"   
04BE                          .ORG   vvCODE   
04BE   00                     NOP      
04BF   CD 42 06               CALL   doLIST   
04C2   C0 09 40 0F            DW   NAMEQ,QDUP   ;?defined
04C6   CC 0C DE 04            DW   QBRAN,SCOM2   
04CA   0C 0D 54 06 40 00 4C 01 DW   AT,DOLIT,IMEDD,ANDD   ;?immediate
04D2   CC 0C DA 04            DW   QBRAN,SCOM1   
04D6   C8 0C 80 06            DW   EXECU,EXIT   ;its immediate, execute
04DA                SCOM1:       
04DA   24 04 80 06            DW   COMMA,EXIT   ;its not immediate, compile
04DE                SCOM2:       
04DE   20 10 D8 0D            DW   TNUMB,ATEXE   ;try to convert to number
04E2   CC 0C EA 04            DW   QBRAN,SCOM3   
04E6   48 04 80 06            DW   LITER,EXIT   ;compile number as integer
04EA   FC 09        SCOM3:    DW   THROW   ;error
04EC                             ;   OVERT       ( -- )
04EC                             ;               Link a new word into the current vocabulary.
04EC                          ;*Macro unroll: mCOLON  5,'OVERT',OVERT
04EC                          ;*Macro unroll:  mCODE 5, "OVERT", OVERT
04EC                          ALIGN   2   
04EC                OVERT:       
04EC                VVCODE:   .SET   $   
04EC                VVLEN:    .SET   (5 & 01FH) / CELLL   
1DB4                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1DB4                VVNAME:   .SET   $   
1DB4   EC 04 C2 1D            DW   vvCODE,vvLINK   
1DB8                VVLINK:   .SET   $   
1DB8   05 4F 56 45 52 54      DB   5,"OVERT"   
04EC                          .ORG   vvCODE   
04EC   00                     NOP      
04ED   CD 42 06               CALL   doLIST   
04F0   58 10 0C 0D 40 10 0C 0D FE 0C 80 06 DW   LAST,AT,CRRNT,AT,STORE,EXIT   
04FC                             ;   ;           ( -- )
04FC                             ;               Terminate a colon definition.
04FC                          ;*Macro unroll: mCOLON  IMEDD+COMPO+1,';',SEMIS
04FC                          ;*Macro unroll:  mCODE IMEDD+COMPO+1, ";", SEMIS
04FC                          ALIGN   2   
04FC                SEMIS:       
04FC                VVCODE:   .SET   $   
04FC                VVLEN:    .SET   (IMEDD+COMPO+1 & 01FH) / CELLL   
1D4E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1D4E                VVNAME:   .SET   $   
1D4E   FC 04 B8 1D            DW   vvCODE,vvLINK   
1D52                VVLINK:   .SET   $   
1D52   61 3B                  DB   IMEDD+COMPO+1,";"   
04FC                          .ORG   vvCODE   
04FC   00                     NOP      
04FD   CD 42 06               CALL   doLIST   
0500   36 04 80 06 60 0A EC 04 80 06 DW   COMPI,EXIT,LBRAC,OVERT,EXIT   
050A                             ;   ]           ( -- )
050A                             ;               Start compiling the words in the input stream.
050A                          ;*Macro unroll: mCOLON  1,']',RBRAC
050A                          ;*Macro unroll:  mCODE 1, "]", RBRAC
050A                          ALIGN   2   
050A                RBRAC:       
050A                VVCODE:   .SET   $   
050A                VVLEN:    .SET   (1 & 01FH) / CELLL   
1D48                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1D48                VVNAME:   .SET   $   
1D48   0A 05 52 1D            DW   vvCODE,vvLINK   
1D4C                VVLINK:   .SET   $   
1D4C   01 5D                  DB   1,"]"   
050A                          .ORG   vvCODE   
050A   00                     NOP      
050B   CD 42 06               CALL   doLIST   
050E   54 06 BE 04 18 10 FE 0C 80 06 DW   DOLIT,SCOMP,TEVAL,STORE,EXIT   
0518                             ;   call,       ( ca -- )
0518                             ;               Assemble a call instruction to ca.
0518                          ;*Macro unroll: mCOLON  5,'call,',CALLC
0518                          ;*Macro unroll:  mCODE 5, "call,", CALLC
0518                          ALIGN   2   
0518                CALLC:       
0518                VVCODE:   .SET   $   
0518                VVLEN:    .SET   (5 & 01FH) / CELLL   
1D3E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1D3E                VVNAME:   .SET   $   
1D3E   18 05 4C 1D            DW   vvCODE,vvLINK   
1D42                VVLINK:   .SET   $   
1D42   05 63 61 6C 6C 2C      DB   5,"call,"   
0518                          .ORG   vvCODE   
0518   00                     NOP      
0519   CD 42 06               CALL   doLIST   
051C   54 06 00 CD 24 04      DW   DOLIT,CALLL,COMMA   ;Direct Threaded Code
0522   24 04 80 06            DW   COMMA,EXIT   ;DTC 8086 relative call
0526                             ;   :           ( -- ; <string> )
0526                             ;               Start a new colon definition using next word as its name.
0526                          ;*Macro unroll: mCOLON  1,':',COLON
0526                          ;*Macro unroll:  mCODE 1, ":", COLON
0526                          ALIGN   2   
0526                COLON:       
0526                VVCODE:   .SET   $   
0526                VVLEN:    .SET   (1 & 01FH) / CELLL   
1D38                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1D38                VVNAME:   .SET   $   
1D38   26 05 42 1D            DW   vvCODE,vvLINK   
1D3C                VVLINK:   .SET   $   
1D3C   01 3A                  DB   1,":"   
0526                          .ORG   vvCODE   
0526   00                     NOP      
0527   CD 42 06               CALL   doLIST   
052A   EA 08 82 04 54 06 42 06 DW   TOKEN,SNAME,DOLIT,DoLIST   
0532   18 05 0A 05 80 06      DW   CALLC,RBRAC,EXIT   
0538                             ;   IMMEDIATE   ( -- )
0538                             ;               Make the last compiled word an immediate word.
0538                          ;*Macro unroll: mCOLON  9,'IMMEDIATE',IMMED
0538                          ;*Macro unroll:  mCODE 9, "IMMEDIATE", IMMED
0538                          ALIGN   2   
0538                IMMED:       
0538                VVCODE:   .SET   $   
0538                VVLEN:    .SET   (9 & 01FH) / CELLL   
1D2A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1D2A                VVNAME:   .SET   $   
1D2A   38 05 3C 1D            DW   vvCODE,vvLINK   
1D2E                VVLINK:   .SET   $   
1D2E   09 49 4D 4D 45 44 49 41 54 45 DB   9,"IMMEDIATE"   
0538                          .ORG   vvCODE   
0538   00                     NOP      
0539   CD 42 06               CALL   doLIST   
053C   54 06 40 00 58 10 0C 0D 0C 0D 5A 01 DW   DOLIT,IMEDD,LAST,AT,AT,ORR   
0548   58 10 0C 0D FE 0C 80 06 DW   LAST,AT,STORE,EXIT   
0550                             ; Defining words
0550                             ;   USER        ( u -- ; <string> )
0550                             ;               Compile a new user variable.
0550                          ;*Macro unroll: mCOLON  4,'USER',USER
0550                          ;*Macro unroll:  mCODE 4, "USER", USER
0550                          ALIGN   2   
0550                USER:        
0550                VVCODE:   .SET   $   
0550                VVLEN:    .SET   (4 & 01FH) / CELLL   
1D20                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1D20                VVNAME:   .SET   $   
1D20   50 05 2E 1D            DW   vvCODE,vvLINK   
1D24                VVLINK:   .SET   $   
1D24   04 55 53 45 52         DB   4,"USER"   
0550                          .ORG   vvCODE   
0550   00                     NOP      
0551   CD 42 06               CALL   doLIST   
0554   EA 08 82 04 EC 04      DW   TOKEN,SNAME,OVERT   
055A   54 06 42 06 18 05      DW   DOLIT,DoLIST,CALLC   
0560   36 04 70 06 24 04 80 06 DW   COMPI,DOUSE,COMMA,EXIT   
0568                             ;   CREATE      ( -- ; <string> )
0568                             ;               Compile a new array entry without allocating code space.
0568                          ;*Macro unroll: mCOLON  6,'CREATE',CREAT
0568                          ;*Macro unroll:  mCODE 6, "CREATE", CREAT
0568                          ALIGN   2   
0568                CREAT:       
0568                VVCODE:   .SET   $   
0568                VVLEN:    .SET   (6 & 01FH) / CELLL   
1D14                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1D14                VVNAME:   .SET   $   
1D14   68 05 24 1D            DW   vvCODE,vvLINK   
1D18                VVLINK:   .SET   $   
1D18   06 43 52 45 41 54 45   DB   6,"CREATE"   
0568                          .ORG   vvCODE   
0568   00                     NOP      
0569   CD 42 06               CALL   doLIST   
056C   EA 08 82 04 EC 04      DW   TOKEN,SNAME,OVERT   
0572   54 06 42 06 18 05      DW   DOLIT,DoLIST,CALLC   
0578   36 04 60 06 80 06      DW   COMPI,DOVAR,EXIT   
057E                             ;   VARIABLE    ( -- ; <string> )
057E                             ;               Compile a new variable initialized to 0.
057E                          ;*Macro unroll: mCOLON  8,'VARIABLE',VARIA
057E                          ;*Macro unroll:  mCODE 8, "VARIABLE", VARIA
057E                          ALIGN   2   
057E                VARIA:       
057E                VVCODE:   .SET   $   
057E                VVLEN:    .SET   (8 & 01FH) / CELLL   
1D06                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1D06                VVNAME:   .SET   $   
1D06   7E 05 18 1D            DW   vvCODE,vvLINK   
1D0A                VVLINK:   .SET   $   
1D0A   08 56 41 52 49 41 42 4C 45 DB   8,"VARIABLE"   
057E                          .ORG   vvCODE   
057E   00                     NOP      
057F   CD 42 06               CALL   doLIST   
0582   68 05 54 06 00 00 24 04 80 06 DW   CREAT,DOLIT,0,COMMA,EXIT   
058C                             ;   FOR         ( -- a )
058C                             ;               Start a FOR-NEXT loop structure in a colon definition.
058C                          ;*Macro unroll: mCOLON  IMEDD+3,'FOR',FOR
058C                          ;*Macro unroll:  mCODE IMEDD+3, "FOR", FOR
058C                          ALIGN   2   
058C                FOR:         
058C                VVCODE:   .SET   $   
058C                VVLEN:    .SET   (IMEDD+3 & 01FH) / CELLL   
1CBE                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1CBE                VVNAME:   .SET   $   
1CBE   8C 05 0A 1D            DW   vvCODE,vvLINK   
1CC2                VVLINK:   .SET   $   
1CC2   43 46 4F 52            DB   IMEDD+3,"FOR"   
058C                          .ORG   vvCODE   
058C   00                     NOP      
058D   CD 42 06               CALL   doLIST   
0590   36 04 F4 0E B4 0D 80 06 DW   COMPI,TOR,HERE,EXIT   
0598                             ;   BEGIN       ( -- a )
0598                             ;               Start an infinite or indefinite loop structure.
0598                          ;*Macro unroll: mCOLON  IMEDD+5,'BEGIN',BEGIN
0598                          ;*Macro unroll:  mCODE IMEDD+5, "BEGIN", BEGIN
0598                          ALIGN   2   
0598                BEGIN:       
0598                VVCODE:   .SET   $   
0598                VVLEN:    .SET   (IMEDD+5 & 01FH) / CELLL   
1C74                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1C74                VVNAME:   .SET   $   
1C74   98 05 C2 1C            DW   vvCODE,vvLINK   
1C78                VVLINK:   .SET   $   
1C78   45 42 45 47 49 4E      DB   IMEDD+5,"BEGIN"   
0598                          .ORG   vvCODE   
0598   00                     NOP      
0599   CD 42 06               CALL   doLIST   
059C   B4 0D 80 06            DW   HERE,EXIT   
05A0                             ;   NEXT        ( a -- )
05A0                             ;               Terminate a FOR-NEXT loop structure.
05A0                          ;*Macro unroll: mCOLON  IMEDD+4,'NEXT',NEXT
05A0                          ;*Macro unroll:  mCODE IMEDD+4, "NEXT", NEXT
05A0                          ALIGN   2   
05A0                NEXT:        
05A0                VVCODE:   .SET   $   
05A0                VVLEN:    .SET   (IMEDD+4 & 01FH) / CELLL   
1C2A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1C2A                VVNAME:   .SET   $   
1C2A   A0 05 78 1C            DW   vvCODE,vvLINK   
1C2E                VVLINK:   .SET   $   
1C2E   44 4E 45 58 54         DB   IMEDD+4,"NEXT"   
05A0                          .ORG   vvCODE   
05A0   00                     NOP      
05A1   CD 42 06               CALL   doLIST   
05A4   36 04 0A 07 24 04 80 06 DW   COMPI,DONXT,COMMA,EXIT   
05AC                             ;   UNTIL       ( a -- )
05AC                             ;               Terminate a BEGIN-UNTIL indefinite loop structure.
05AC                          ;*Macro unroll: mCOLON  IMEDD+5,'UNTIL',UNTIL
05AC                          ;*Macro unroll:  mCODE IMEDD+5, "UNTIL", UNTIL
05AC                          ALIGN   2   
05AC                UNTIL:       
05AC                VVCODE:   .SET   $   
05AC                VVLEN:    .SET   (IMEDD+5 & 01FH) / CELLL   
1BE0                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1BE0                VVNAME:   .SET   $   
1BE0   AC 05 2E 1C            DW   vvCODE,vvLINK   
1BE4                VVLINK:   .SET   $   
1BE4   45 55 4E 54 49 4C      DB   IMEDD+5,"UNTIL"   
05AC                          .ORG   vvCODE   
05AC   00                     NOP      
05AD   CD 42 06               CALL   doLIST   
05B0   36 04 CC 0C 24 04 80 06 DW   COMPI,QBRAN,COMMA,EXIT   
05B8                             ;   AGAIN       ( a -- )
05B8                             ;               Terminate a BEGIN-AGAIN infinite loop structure.
05B8                          ;*Macro unroll: mCOLON  IMEDD+5,'AGAIN',AGAIN
05B8                          ;*Macro unroll:  mCODE IMEDD+5, "AGAIN", AGAIN
05B8                          ALIGN   2   
05B8                AGAIN:       
05B8                VVCODE:   .SET   $   
05B8                VVLEN:    .SET   (IMEDD+5 & 01FH) / CELLL   
1B96                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1B96                VVNAME:   .SET   $   
1B96   B8 05 E4 1B            DW   vvCODE,vvLINK   
1B9A                VVLINK:   .SET   $   
1B9A   45 41 47 41 49 4E      DB   IMEDD+5,"AGAIN"   
05B8                          .ORG   vvCODE   
05B8   00                     NOP      
05B9   CD 42 06               CALL   doLIST   
05BC   36 04 DC 0C 24 04 80 06 DW   COMPI,BRAN,COMMA,EXIT   
05C4                             ;   IF          ( -- A )
05C4                             ;               Begin a conditional branch structure.
05C4                          ;*Macro unroll: mCOLON  IMEDD+2,'IF',IFF
05C4                          ;*Macro unroll:  mCODE IMEDD+2, "IF", IFF
05C4                          ALIGN   2   
05C4                IFF:         
05C4                VVCODE:   .SET   $   
05C4                VVLEN:    .SET   (IMEDD+2 & 01FH) / CELLL   
1B4E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1B4E                VVNAME:   .SET   $   
1B4E   C4 05 9A 1B            DW   vvCODE,vvLINK   
1B52                VVLINK:   .SET   $   
1B52   42 49 46               DB   IMEDD+2,"IF"   
05C4                          .ORG   vvCODE   
05C4   00                     NOP      
05C5   CD 42 06               CALL   doLIST   
05C8   36 04 CC 0C B4 0D      DW   COMPI,QBRAN,HERE   
05CE   54 06 00 00 24 04 80 06 DW   DOLIT,0,COMMA,EXIT   
05D6                             ;   AHEAD       ( -- A )
05D6                             ;               Compile a forward branch instruction.
05D6                          ;*Macro unroll: mCOLON  IMEDD+5,'AHEAD',AHEAD
05D6                          ;*Macro unroll:  mCODE IMEDD+5, "AHEAD", AHEAD
05D6                          ALIGN   2   
05D6                AHEAD:       
05D6                VVCODE:   .SET   $   
05D6                VVLEN:    .SET   (IMEDD+5 & 01FH) / CELLL   
1B04                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1B04                VVNAME:   .SET   $   
1B04   D6 05 52 1B            DW   vvCODE,vvLINK   
1B08                VVLINK:   .SET   $   
1B08   45 41 48 45 41 44      DB   IMEDD+5,"AHEAD"   
05D6                          .ORG   vvCODE   
05D6   00                     NOP      
05D7   CD 42 06               CALL   doLIST   
05DA   36 04 DC 0C B4 0D 54 06 00 00 24 04 80 06 DW   COMPI,BRAN,HERE,DOLIT,0,COMMA,EXIT   
05E8                             ;   REPEAT      ( A a -- )
05E8                             ;               Terminate a BEGIN-WHILE-REPEAT indefinite loop.
05E8                          ;*Macro unroll: mCOLON  IMEDD+6,'REPEAT',REPEA
05E8                          ;*Macro unroll:  mCODE IMEDD+6, "REPEAT", REPEA
05E8                          ALIGN   2   
05E8                REPEA:       
05E8                VVCODE:   .SET   $   
05E8                VVLEN:    .SET   (IMEDD+6 & 01FH) / CELLL   
1AB8                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1AB8                VVNAME:   .SET   $   
1AB8   E8 05 08 1B            DW   vvCODE,vvLINK   
1ABC                VVLINK:   .SET   $   
1ABC   46 52 45 50 45 41 54   DB   IMEDD+6,"REPEAT"   
05E8                          .ORG   vvCODE   
05E8   00                     NOP      
05E9   CD 42 06               CALL   doLIST   
05EC   B8 05 B4 0D 28 0F FE 0C 80 06 DW   AGAIN,HERE,SWAP,STORE,EXIT   
05F6                             ;   THEN        ( A -- )
05F6                             ;               Terminate a conditional branch structure.
05F6                          ;*Macro unroll: mCOLON  IMEDD+4,'THEN',THENN
05F6                          ;*Macro unroll:  mCODE IMEDD+4, "THEN", THENN
05F6                          ALIGN   2   
05F6                THENN:       
05F6                VVCODE:   .SET   $   
05F6                VVLEN:    .SET   (IMEDD+4 & 01FH) / CELLL   
1A6E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1A6E                VVNAME:   .SET   $   
1A6E   F6 05 BC 1A            DW   vvCODE,vvLINK   
1A72                VVLINK:   .SET   $   
1A72   44 54 48 45 4E         DB   IMEDD+4,"THEN"   
05F6                          .ORG   vvCODE   
05F6   00                     NOP      
05F7   CD 42 06               CALL   doLIST   
05FA   B4 0D 28 0F FE 0C 80 06 DW   HERE,SWAP,STORE,EXIT   
0602                             ;   AFT         ( a -- a A )
0602                             ;               Jump to THEN in a FOR-AFT-THEN-NEXT loop the 1st time through.
0602                          ;*Macro unroll: mCOLON  IMEDD+3,'AFT',AFT
0602                          ;*Macro unroll:  mCODE IMEDD+3, "AFT", AFT
0602                          ALIGN   2   
0602                AFT:         
0602                VVCODE:   .SET   $   
0602                VVLEN:    .SET   (IMEDD+3 & 01FH) / CELLL   
1A26                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1A26                VVNAME:   .SET   $   
1A26   02 06 72 1A            DW   vvCODE,vvLINK   
1A2A                VVLINK:   .SET   $   
1A2A   43 41 46 54            DB   IMEDD+3,"AFT"   
0602                          .ORG   vvCODE   
0602   00                     NOP      
0603   CD 42 06               CALL   doLIST   
0606   20 0F D6 05 98 05 28 0F 80 06 DW   DROP,AHEAD,BEGIN,SWAP,EXIT   
0610                             ;   ELSE        ( A -- A )
0610                             ;               Start the false clause in an IF-ELSE-THEN structure.
0610                          ;*Macro unroll: mCOLON  IMEDD+4,'ELSE',ELSEE
0610                          ;*Macro unroll:  mCODE IMEDD+4, "ELSE", ELSEE
0610                          ALIGN   2   
0610                ELSEE:       
0610                VVCODE:   .SET   $   
0610                VVLEN:    .SET   (IMEDD+4 & 01FH) / CELLL   
19DC                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
19DC                VVNAME:   .SET   $   
19DC   10 06 2A 1A            DW   vvCODE,vvLINK   
19E0                VVLINK:   .SET   $   
19E0   44 45 4C 53 45         DB   IMEDD+4,"ELSE"   
0610                          .ORG   vvCODE   
0610   00                     NOP      
0611   CD 42 06               CALL   doLIST   
0614   D6 05 28 0F F6 05 80 06 DW   AHEAD,SWAP,THENN,EXIT   
061C                             ;   WHILE       ( a -- A a )
061C                             ;               Conditional branch out of a BEGIN-WHILE-REPEAT loop.
061C                          ;*Macro unroll: mCOLON  IMEDD+5,'WHILE',WHILE
061C                          ;*Macro unroll:  mCODE IMEDD+5, "WHILE", WHILE
061C                          ALIGN   2   
061C                WHILE:       
061C                VVCODE:   .SET   $   
061C                VVLEN:    .SET   (IMEDD+5 & 01FH) / CELLL   
1992                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1992                VVNAME:   .SET   $   
1992   1C 06 E0 19            DW   vvCODE,vvLINK   
1996                VVLINK:   .SET   $   
1996   45 57 48 49 4C 45      DB   IMEDD+5,"WHILE"   
061C                          .ORG   vvCODE   
061C   00                     NOP      
061D   CD 42 06               CALL   doLIST   
0620   C4 05 28 0F 80 06      DW   IFF,SWAP,EXIT   
0626                             ;   ABORT"      ( -- ; <string> )
0626                             ;               Conditional abort with an error message.
0626                             ;   $"          ( -- ; <string> )
0626                             ;               Compile an inline string literal.
0626                             ;   ."          ( -- ; <string> )
0626                             ;               Compile an inline string literal to be typed out at run time.
0626                             ;   UNLOOP	( -- ) ( R: loop-sys -- )	\ CORE
0626                             ;		Discard loop-control parameters for the current nesting level.
0626                             ;		An UNLOOP is required for each nesting level before the
0626                             ;		definition may be EXITed.
0626                          ;*Macro unroll: mCOLON	COMPO+6,'UNLOOP',UNLOOP
0626                          ;*Macro unroll:  mCODE COMPO+6, "UNLOOP", UNLOOP
0626                          ALIGN   2   
0626                UNLOOP:      
0626                VVCODE:   .SET   $   
0626                VVLEN:    .SET   (COMPO+6 & 01FH) / CELLL   
1966                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1966                VVNAME:   .SET   $   
1966   26 06 96 19            DW   vvCODE,vvLINK   
196A                VVLINK:   .SET   $   
196A   26 55 4E 4C 4F 4F 50   DB   COMPO+6,"UNLOOP"   
0626                          .ORG   vvCODE   
0626   00                     NOP      
0627   CD 42 06               CALL   doLIST   
062A   06 0F 06 0F 06 0F 5C 0F F4 0E 80 06 DW   RFrom,RFrom,RFrom,DDROP,ToR,EXIT   
0636                             ;   doCONST	( -- x )
0636                             ;	Run-time routine of CONSTANT and VARIABLE.
0636                          ;*Macro unroll: mCODE	COMPO+7, 'doCONST', DoCONST
0636                          ALIGN   2   
0636                DOCONST:      
0636                VVCODE:   .SET   $   
0636                VVLEN:    .SET   (COMPO+7 & 01FH) / CELLL   
193A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
193A                VVNAME:   .SET   $   
193A   36 06 6A 19            DW   vvCODE,vvLINK   
193E                VVLINK:   .SET   $   
193E   27 64 6F 43 4F 4E 53 54 DB   COMPO+7,"doCONST"   
0636                          .ORG   vvCODE   
0636   E1                     POP   HL   ;10t
0637   C5                     PUSH   BC   ;11t
0638   4E                     LD   C,(HL)   ; 7t
0639   23                     INC   HL   ; 6t
063A   46                     LD   B,(HL)   ; 7t
063B                          ;*Macro unroll:  mNEXT
063B   EB                     EX   DE,HL   
063C                          ;*Macro unroll:  mNEXTHL                         ; 34t
063C   5E                     LD   E,(HL)   ; 34t
063D   23                     INC   HL   
063E   56                     LD   D,(HL)   
063F   23                     INC   HL   
0640   EB                     EX   DE,HL   
0641   E9                     JP   (HL)   
0642                             ;   doLIST	( -- ) ( R: -- nest-sys )
0642                             ;	Process colon list.
0642                          ;*Macro unroll: mCODE	COMPO+6, 'doLIST', DoLIST
0642                          ALIGN   2   
0642                DOLIST:      
0642                VVCODE:   .SET   $   
0642                VVLEN:    .SET   (COMPO+6 & 01FH) / CELLL   
190E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
190E                VVNAME:   .SET   $   
190E   42 06 3E 19            DW   vvCODE,vvLINK   
1912                VVLINK:   .SET   $   
1912   26 64 6F 4C 49 53 54   DB   COMPO+6,"doLIST"   
0642                          .ORG   vvCODE   
0642   DD 2B                  DEC   IX   ;10t
0644   DD 72 00               LD   (IX+0),D   ;19t
0647   DD 2B                  DEC   IX   ;10t
0649   DD 73 00               LD   (IX+0),E   ;19t
064C   E1                     POP   HL   ;10t
064D                          ;*Macro unroll:  mNEXTHL							
064D   5E                     LD   E,(HL)   
064E   23                     INC   HL   
064F   56                     LD   D,(HL)   
0650   23                     INC   HL   
0651   EB                     EX   DE,HL   
0652   E9                     JP   (HL)   
0653                             ;   doLIT	( -- x )
0653                             ;	Push an inline literal.
0653                          ;*Macro unroll: mCODE	COMPO+5, 'doLIT', DoLIT
0653                          ALIGN   2   
0654                DOLIT:       
0654                VVCODE:   .SET   $   
0654                VVLEN:    .SET   (COMPO+5 & 01FH) / CELLL   
18E4                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
18E4                VVNAME:   .SET   $   
18E4   54 06 12 19            DW   vvCODE,vvLINK   
18E8                VVLINK:   .SET   $   
18E8   25 64 6F 4C 49 54      DB   COMPO+5,"doLIT"   
0654                          .ORG   vvCODE   
0654   C5                     PUSH   BC   ; 11t
0655   EB                     EX   DE,HL   ; 4t
0656   4E                     LD   C,(HL)   ; 7t
0657   23                     INC   HL   ; 6t
0658   46                     LD   B,(HL)   ; 7t
0659   23                     INC   HL   ; 6t
065A                          ;*Macro unroll:  mNEXTHL
065A   5E                     LD   E,(HL)   
065B   23                     INC   HL   
065C   56                     LD   D,(HL)   
065D   23                     INC   HL   
065E   EB                     EX   DE,HL   
065F   E9                     JP   (HL)   
0660                             ;   doVAR       ( -- a )
0660                             ;   Run time routine for VARIABLE and CREATE.
0660                          ;*Macro unroll: mCOLON  COMPO+5, 'doVAR', DoVAR
0660                          ;*Macro unroll:  mCODE COMPO+5, "doVAR", DoVAR
0660                          ALIGN   2   
0660                DOVAR:       
0660                VVCODE:   .SET   $   
0660                VVLEN:    .SET   (COMPO+5 & 01FH) / CELLL   
18BA                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
18BA                VVNAME:   .SET   $   
18BA   60 06 E8 18            DW   vvCODE,vvLINK   
18BE                VVLINK:   .SET   $   
18BE   25 64 6F 56 41 52      DB   COMPO+5,"doVAR"   
0660                          .ORG   vvCODE   
0660   00                     NOP      
0661   CD 42 06               CALL   doLIST   
0664   06 0F 80 06            DW   RFROM,EXIT   
0668                             ;   UP          ( -- a )
0668                             ;   Pointer to the user area.
0668                          ;*Macro unroll: mCOLON  2, 'UP', UP
0668                          ;*Macro unroll:  mCODE 2, "UP", UP
0668                          ALIGN   2   
0668                UP:          
0668                VVCODE:   .SET   $   
0668                VVLEN:    .SET   (2 & 01FH) / CELLL   
18B2                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
18B2                VVNAME:   .SET   $   
18B2   68 06 BE 18            DW   vvCODE,vvLINK   
18B6                VVLINK:   .SET   $   
18B6   02 55 50               DB   2,"UP"   
0668                          .ORG   vvCODE   
0668   00                     NOP      
0669   CD 42 06               CALL   doLIST   
066C   60 06                  DW   DoVAR   
066E   00 24                  DW   UPP   
0670                             ;   doUSER      ( -- a )
0670                             ;   Run time routine for user variables.
0670                          ;*Macro unroll: mCOLON  COMPO+6,'doUSER',DOUSE
0670                          ;*Macro unroll:  mCODE COMPO+6, "doUSER", DOUSE
0670                          ALIGN   2   
0670                DOUSE:       
0670                VVCODE:   .SET   $   
0670                VVLEN:    .SET   (COMPO+6 & 01FH) / CELLL   
1886                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1886                VVNAME:   .SET   $   
1886   70 06 B6 18            DW   vvCODE,vvLINK   
188A                VVLINK:   .SET   $   
188A   26 64 6F 55 53 45 52   DB   COMPO+6,"doUSER"   
0670                          .ORG   vvCODE   
0670   00                     NOP      
0671   CD 42 06               CALL   doLIST   
0674   06 0F 0C 0D 68 06 0C 0D 76 01 80 06 DW   RFROM,AT,UP,AT,PLUS,EXIT   
0680                             ;   EXIT	( -- ) ( R: nest-sys -- )	\ CORE
0680                             ;	Return control to the calling definition.
0680                          ;*Macro unroll: mCODE	COMPO+4, 'EXIT', EXIT
0680                          ALIGN   2   
0680                EXIT:        
0680                VVCODE:   .SET   $   
0680                VVLEN:    .SET   (COMPO+4 & 01FH) / CELLL   
185C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
185C                VVNAME:   .SET   $   
185C   80 06 8A 18            DW   vvCODE,vvLINK   
1860                VVLINK:   .SET   $   
1860   24 45 58 49 54         DB   COMPO+4,"EXIT"   
0680                          .ORG   vvCODE   
0680   DD 6E 00               LD   L,(IX+0)   
0683   DD 23                  INC   IX   
0685   DD 66 00               LD   H,(IX+0)   
0688   DD 23                  INC   IX   
068A                          ;*Macro unroll:  mNEXTHL
068A   5E                     LD   E,(HL)   
068B   23                     INC   HL   
068C   56                     LD   D,(HL)   
068D   23                     INC   HL   
068E   EB                     EX   DE,HL   
068F   E9                     JP   (HL)   
0690                             ;   doDO	( n1|u1 n2|u2 -- ) ( R: -- n1 n2-n1-max_negative )
0690                             ;		Run-time funtion of DO.
0690                             ; 
0690                             ;   : doDO	>R max-negative + R> OVER - SWAP R> SWAP >R SWAP >R >R ;
0690                          ;*Macro unroll: mCOLON	COMPO+4,'doDO',DoDO
0690                          ;*Macro unroll:  mCODE COMPO+4, "doDO", DoDO
0690                          ALIGN   2   
0690                DODO:        
0690                VVCODE:   .SET   $   
0690                VVLEN:    .SET   (COMPO+4 & 01FH) / CELLL   
1832                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1832                VVNAME:   .SET   $   
1832   90 06 60 18            DW   vvCODE,vvLINK   
1836                VVLINK:   .SET   $   
1836   24 64 6F 44 4F         DB   COMPO+4,"doDO"   
0690                          .ORG   vvCODE   
0690   00                     NOP      
0691   CD 42 06               CALL   doLIST   
0694   F4 0E 54 06 00 80 76 01 06 0F DW   ToR,DoLIT,MaxNegative,Plus,RFrom   
069E   34 0F CE 01 28 0F 06 0F 28 0F F4 0E 28 0F F4 0E F4 0E 80 06 DW   OVER,SUBB,SWAP,RFrom,SWAP,ToR,SWAP,ToR,ToR,EXIT   
06B2                             ;   doLOOP	( -- ) ( R: loop-sys1 -- | loop-sys2 )
06B2                             ;		Run time routine for LOOP.
06B2                          ;*Macro unroll: mCODE	COMPO+6,'doLOOP',DoLOOP
06B2                          ALIGN   2   
06B2                DOLOOP:      
06B2                VVCODE:   .SET   $   
06B2                VVLEN:    .SET   (COMPO+6 & 01FH) / CELLL   
1806                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1806                VVNAME:   .SET   $   
1806   B2 06 36 18            DW   vvCODE,vvLINK   
180A                VVLINK:   .SET   $   
180A   26 64 6F 4C 4F 4F 50   DB   COMPO+6,"doLOOP"   
06B2                          .ORG   vvCODE   
06B2   DD E5                  PUSH   IX   ; 15t
06B4   E1                     POP   HL   ; 10t
06B5   34                     INC   (HL)   ; 11t
06B6   28 0B                  JR   Z,DOLOOP2   ; 12/7t a fast dec is ok, only
06B8                DOLOOP1:      
06B8   1A                     LD   A,(DE)   ; 7t go back to the loop
06B9   6F                     LD   L,A   ; 4t
06BA   13                     INC   DE   ; 6t
06BB   1A                     LD   A,(DE)   ; 7t
06BC   67                     LD   H,A   ; 4t
06BD                          ;*Macro unroll: 	mNEXTHL
06BD   5E                     LD   E,(HL)   
06BE   23                     INC   HL   
06BF   56                     LD   D,(HL)   
06C0   23                     INC   HL   
06C1   EB                     EX   DE,HL   
06C2   E9                     JP   (HL)   
06C3                DOLOOP2:      
06C3   23                     INC   HL   ; 6t
06C4   34                     INC   (HL)   ;11t
06C5   E2 B8 06               JP   PO,DOLOOP1   ;10/7t ?loop end
06C8   EB                     EX   DE,HL   ; 4t yes,continue past the BRAN offset
06C9   11 04 00               LD   DE,4   ;10t clear return stack
06CC   DD 19                  ADD   IX,DE   ;15h
06CE   23                     INC   HL   ; 6t
06CF   23                     INC   HL   ; 6t
06D0                          ;*Macro unroll: 	mNEXTHL
06D0   5E                     LD   E,(HL)   
06D1   23                     INC   HL   
06D2   56                     LD   D,(HL)   
06D3   23                     INC   HL   
06D4   EB                     EX   DE,HL   
06D5   E9                     JP   (HL)   
06D6                             ;   do+LOOP	( n -- ) ( R: loop-sys1 -- | loop-sys2 )
06D6                             ;		Run time routine for +LOOP.
06D6                          ;*Macro unroll: mCODE	COMPO+7,'do+LOOP',DoPLOOP
06D6                          ALIGN   2   
06D6                DOPLOOP:      
06D6                VVCODE:   .SET   $   
06D6                VVLEN:    .SET   (COMPO+7 & 01FH) / CELLL   
17DA                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
17DA                VVNAME:   .SET   $   
17DA   D6 06 0A 18            DW   vvCODE,vvLINK   
17DE                VVLINK:   .SET   $   
17DE   27 64 6F 2B 4C 4F 4F 50 DB   COMPO+7,"do+LOOP"   
06D6                          .ORG   vvCODE   
06D6   E1                     POP   HL   ;10t this will be the new TOS
06D7   C5                     PUSH   BC   ;11t
06D8   44                     LD   B,H   ; 4t
06D9   4D                     LD   C,L   ; 4t
06DA   D9                     EXX      ; 4t
06DB   C1                     POP   BC   ;10t old TOS = loop increment
06DC   DD 6E 00               LD   L,(IX+0)   ;19t
06DF   DD 66 01               LD   H,(IX+1)   ;19t
06E2   B7                     OR   A   ; 4t clear carry
06E3   ED 4A                  ADC   HL,BC   ;15t
06E5   EA FA 06               JP   PE,DOPLP1   ;10/7t ?loop end
06E8   DD 75 00               LD   (IX+0),L   ;19t   no, go back
06EB   DD 74 01               LD   (IX+1),H   ;19t
06EE   D9                     EXX      ; 4t
06EF   1A                     LD   A,(DE)   ; 7t go back to the loop
06F0   6F                     LD   L,A   ; 4t
06F1   13                     INC   DE   ; 6t
06F2   1A                     LD   A,(DE)   ; 7t
06F3   67                     LD   H,A   ; 4t
06F4                          ;*Macro unroll: 	mNEXTHL
06F4   5E                     LD   E,(HL)   
06F5   23                     INC   HL   
06F6   56                     LD   D,(HL)   
06F7   23                     INC   HL   
06F8   EB                     EX   DE,HL   
06F9   E9                     JP   (HL)   
06FA                DOPLP1:      
06FA   01 04 00               LD   BC,4   ;10t clear return stack
06FD   DD 09                  ADD   IX,BC   ;15h
06FF   D9                     EXX      ; 4t
0700   13                     INC   DE   ; 6t yes,continue past the BRAN offset
0701   13                     INC   DE   ; 6t
0702                          ;*Macro unroll: 	mNEXT
0702   EB                     EX   DE,HL   
0703                          ;*Macro unroll:  mNEXTHL                         ; 34t
0703   5E                     LD   E,(HL)   ; 34t
0704   23                     INC   HL   
0705   56                     LD   D,(HL)   
0706   23                     INC   HL   
0707   EB                     EX   DE,HL   
0708   E9                     JP   (HL)   
0709                             ;   next        ( -- )
0709                             ;               Run time code for the single index loop.
0709                             ;               : next ( -- ) \ hilevel model
0709                             ;                 r> r> dup if 1 - >r @ >r exit then drop cell+ >r ;
0709                          ;*Macro unroll: mCODE   COMPO+4,'next',DONXT
0709                          ALIGN   2   
070A                DONXT:       
070A                VVCODE:   .SET   $   
070A                VVLEN:    .SET   (COMPO+4 & 01FH) / CELLL   
17B0                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
17B0                VVNAME:   .SET   $   
17B0   0A 07 DE 17            DW   vvCODE,vvLINK   
17B4                VVLINK:   .SET   $   
17B4   24 6E 65 78 74         DB   COMPO+4,"next"   
070A                          .ORG   vvCODE   
070A   DD E5                  PUSH   IX   
070C   E1                     POP   HL   ; load rp into HL
070D   7E                     LD   A,(HL)   ; a = low byte of r@
070E   B7                     OR   A   
070F   20 14                  JR   NZ,DECLOW   ; low > 0 goto dec low
0711   23                     INC   HL   
0712   7E                     LD   A,(HL)   ; a = high byte of r@
0713   B7                     OR   A   
0714   20 0D                  JR   NZ,DECHILO   ; high > 0 goto dec hi dec lo
0716   23                     INC   HL   
0717   E5                     PUSH   HL   
0718   DD E1                  POP   IX   ; pop r@
071A   13                     INC   DE   ; IP = skip following word
071B   13                     INC   DE   
071C                          ;*Macro unroll:  mNEXT                               ; continue
071C   EB                     EX   DE,HL   ; continue
071D                          ;*Macro unroll:  mNEXTHL                         ; 34t
071D   5E                     LD   E,(HL)   ; 34t
071E   23                     INC   HL   
071F   56                     LD   D,(HL)   
0720   23                     INC   HL   
0721   EB                     EX   DE,HL   
0722   E9                     JP   (HL)   
0723                DECHILO:      
0723   35                     DEC   (HL)   ; dec high byte of r@
0724   2B                     DEC   HL   
0725                DECLOW:      
0725   35                     DEC   (HL)   ; dec low byte of r@
0726   6B                     LD   L,E   ; DE points to location of loop address
0727   62                     LD   H,D   
0728   5E                     LD   E,(HL)   ; DE points to loop address
0729   23                     INC   HL   
072A   56                     LD   D,(HL)   
072B                          ;*Macro unroll:  mNEXT                               ; continue to loop address
072B   EB                     EX   DE,HL   ; continue to loop address
072C                          ;*Macro unroll:  mNEXTHL                         ; 34t
072C   5E                     LD   E,(HL)   ; 34t
072D   23                     INC   HL   
072E   56                     LD   D,(HL)   
072F   23                     INC   HL   
0730   EB                     EX   DE,HL   
0731   E9                     JP   (HL)   
0732                             ;   DIGIT       ( u -- c )
0732                             ;               Convert digit u to a character.
0732                          ;*Macro unroll: mCOLON  5,'DIGIT',DIGIT
0732                          ;*Macro unroll:  mCODE 5, "DIGIT", DIGIT
0732                          ALIGN   2   
0732                DIGIT:       
0732                VVCODE:   .SET   $   
0732                VVLEN:    .SET   (5 & 01FH) / CELLL   
17A6                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
17A6                VVNAME:   .SET   $   
17A6   32 07 B4 17            DW   vvCODE,vvLINK   
17AA                VVLINK:   .SET   $   
17AA   05 44 49 47 49 54      DB   5,"DIGIT"   
0732                          .ORG   vvCODE   
0732   00                     NOP      
0733   CD 42 06               CALL   doLIST   
0736   54 06 09 00 34 0F 24 02 DW   DOLIT,9,OVER,LESS   
073E   54 06 07 00 4C 01 76 01 DW   DOLIT,7,ANDD,PLUS   
0746   54 06 76 01 80 06      DW   DOLIT,"0",PLUS,EXIT   
074C                             ;   EXTRACT     ( n base -- n c )
074C                             ;               Extract the least significant digit from n.
074C                          ;*Macro unroll: mCOLON  7,'EXTRACT',EXTRC
074C                          ;*Macro unroll:  mCODE 7, "EXTRACT", EXTRC
074C                          ALIGN   2   
074C                EXTRC:       
074C                VVCODE:   .SET   $   
074C                VVLEN:    .SET   (7 & 01FH) / CELLL   
179A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
179A                VVNAME:   .SET   $   
179A   4C 07 AA 17            DW   vvCODE,vvLINK   
179E                VVLINK:   .SET   $   
179E   07 45 58 54 52 41 43 54 DB   7,"EXTRACT"   
074C                          .ORG   vvCODE   
074C   00                     NOP      
074D   CD 42 06               CALL   doLIST   
0750   54 06 00 00 28 0F 8E 02 DW   DOLIT,0,SWAP,UMMOD   
0758   28 0F 32 07 80 06      DW   SWAP,DIGIT,EXIT   
075E                             ;   <#          ( -- )
075E                             ;               Initiate the numeric output process.
075E                          ;*Macro unroll: mCOLON  2,'<#',BDIGS
075E                          ;*Macro unroll:  mCODE 2, "<#", BDIGS
075E                          ALIGN   2   
075E                BDIGS:       
075E                VVCODE:   .SET   $   
075E                VVLEN:    .SET   (2 & 01FH) / CELLL   
1792                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1792                VVNAME:   .SET   $   
1792   5E 07 9E 17            DW   vvCODE,vvLINK   
1796                VVLINK:   .SET   $   
1796   02 3C 23               DB   2,"<#"   
075E                          .ORG   vvCODE   
075E   00                     NOP      
075F   CD 42 06               CALL   doLIST   
0762   BE 0D 28 10 FE 0C 80 06 DW   PAD,HLD,STORE,EXIT   
076A                             ;   HOLD        ( c -- )
076A                             ;               Insert a character into the numeric output string.
076A                          ;*Macro unroll: mCOLON  4,'HOLD',HOLD
076A                          ;*Macro unroll:  mCODE 4, "HOLD", HOLD
076A                          ALIGN   2   
076A                HOLD:        
076A                VVCODE:   .SET   $   
076A                VVLEN:    .SET   (4 & 01FH) / CELLL   
1788                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1788                VVNAME:   .SET   $   
1788   6A 07 96 17            DW   vvCODE,vvLINK   
178C                VVLINK:   .SET   $   
178C   04 48 4F 4C 44         DB   4,"HOLD"   
076A                          .ORG   vvCODE   
076A   00                     NOP      
076B   CD 42 06               CALL   doLIST   
076E   28 10 0C 0D 54 06 01 00 CE 01 DW   HLD,AT,DOLIT,1,SUBB   
0778   18 0F 28 10 FE 0C 18 0D 80 06 DW   DUPP,HLD,STORE,CSTOR,EXIT   
0782                             ;   #           ( u -- u )
0782                             ;               Extract one digit from u and append the digit to output string.
0782                          ;*Macro unroll: mCOLON  1,'#',DIG
0782                          ;*Macro unroll:  mCODE 1, "#", DIG
0782                          ALIGN   2   
0782                DIG:         
0782                VVCODE:   .SET   $   
0782                VVLEN:    .SET   (1 & 01FH) / CELLL   
1782                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1782                VVNAME:   .SET   $   
1782   82 07 8C 17            DW   vvCODE,vvLINK   
1786                VVLINK:   .SET   $   
1786   01 23                  DB   1,"#"   
0782                          .ORG   vvCODE   
0782   00                     NOP      
0783   CD 42 06               CALL   doLIST   
0786   E8 0F 0C 0D 4C 07 6A 07 80 06 DW   BASE,AT,EXTRC,HOLD,EXIT   
0790                             ;   #S          ( u -- 0 )
0790                             ;               Convert u until all digits are added to the output string.
0790                          ;*Macro unroll: mCOLON  2,'#S',DIGS
0790                          ;*Macro unroll:  mCODE 2, "#S", DIGS
0790                          ALIGN   2   
0790                DIGS:        
0790                VVCODE:   .SET   $   
0790                VVLEN:    .SET   (2 & 01FH) / CELLL   
177A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
177A                VVNAME:   .SET   $   
177A   90 07 86 17            DW   vvCODE,vvLINK   
177E                VVLINK:   .SET   $   
177E   02 23 53               DB   2,"#S"   
0790                          .ORG   vvCODE   
0790   00                     NOP      
0791   CD 42 06               CALL   doLIST   
0794                DIGS1:       
0794   82 07 18 0F            DW   DIG,DUPP   
0798   CC 0C A0 07            DW   QBRAN,DIGS2   
079C   DC 0C 94 07            DW   BRAN,DIGS1   
07A0                DIGS2:       
07A0   80 06                  DW   EXIT   
07A2                             ;   SIGN        ( n -- )
07A2                             ;               Add a SUBB sign to the numeric output string.
07A2                          ;*Macro unroll: mCOLON	4,'SIGN',SIGN
07A2                          ;*Macro unroll:  mCODE 4, "SIGN", SIGN
07A2                          ALIGN   2   
07A2                SIGN:        
07A2                VVCODE:   .SET   $   
07A2                VVLEN:    .SET   (4 & 01FH) / CELLL   
1770                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1770                VVNAME:   .SET   $   
1770   A2 07 7E 17            DW   vvCODE,vvLINK   
1774                VVLINK:   .SET   $   
1774   04 53 49 47 4E         DB   4,"SIGN"   
07A2                          .ORG   vvCODE   
07A2   00                     NOP      
07A3   CD 42 06               CALL   doLIST   
07A6   40 01 CC 0C B2 07      DW   ZLESS,QBRAN,SIGN1   
07AC   54 06 2D 00 6A 07      DW   DoLIT,MINUSS,HOLD   
07B2                SIGN1:       
07B2   80 06                  DW   EXIT   
07B4                             ;   #>          ( w -- b u )
07B4                             ;               Prepare the output string to be TYPE'd.
07B4                          ;*Macro unroll: mCOLON  2,'#>',EDIGS
07B4                          ;*Macro unroll:  mCODE 2, "#>", EDIGS
07B4                          ALIGN   2   
07B4                EDIGS:       
07B4                VVCODE:   .SET   $   
07B4                VVLEN:    .SET   (2 & 01FH) / CELLL   
1768                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1768                VVNAME:   .SET   $   
1768   B4 07 74 17            DW   vvCODE,vvLINK   
176C                VVLINK:   .SET   $   
176C   02 23 3E               DB   2,"#>"   
07B4                          .ORG   vvCODE   
07B4   00                     NOP      
07B5   CD 42 06               CALL   doLIST   
07B8   20 0F 28 10 0C 0D      DW   DROP,HLD,AT   
07BE   BE 0D 34 0F CE 01 80 06 DW   PAD,OVER,SUBB,EXIT   
07C6                             ;   str         ( n -- b u )
07C6                             ;               Convert a signed integer to a numeric string.
07C6                          ;*Macro unroll: mCOLON  3,'str',STR
07C6                          ;*Macro unroll:  mCODE 3, "str", STR
07C6                          ALIGN   2   
07C6                STR:         
07C6                VVCODE:   .SET   $   
07C6                VVLEN:    .SET   (3 & 01FH) / CELLL   
1760                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1760                VVNAME:   .SET   $   
1760   C6 07 6C 17            DW   vvCODE,vvLINK   
1764                VVLINK:   .SET   $   
1764   03 73 74 72            DB   3,"str"   
07C6                          .ORG   vvCODE   
07C6   00                     NOP      
07C7   CD 42 06               CALL   doLIST   
07CA   18 0F F4 0E D8 01      DW   DUPP,TOR,ABSS   
07D0   5E 07 90 07 06 0F      DW   BDIGS,DIGS,RFROM   
07D6   A2 07 B4 07 80 06      DW   SIGN,EDIGS,EXIT   
07DC                             ;   HEX         ( -- )
07DC                             ;               Use radix 16 as base for numeric conversions.
07DC                          ;*Macro unroll: mCOLON  3,'HEX',HEX
07DC                          ;*Macro unroll:  mCODE 3, "HEX", HEX
07DC                          ALIGN   2   
07DC                HEX:         
07DC                VVCODE:   .SET   $   
07DC                VVLEN:    .SET   (3 & 01FH) / CELLL   
1758                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1758                VVNAME:   .SET   $   
1758   DC 07 64 17            DW   vvCODE,vvLINK   
175C                VVLINK:   .SET   $   
175C   03 48 45 58            DB   3,"HEX"   
07DC                          .ORG   vvCODE   
07DC   00                     NOP      
07DD   CD 42 06               CALL   doLIST   
07E0   54 06 10 00 E8 0F FE 0C 80 06 DW   DOLIT,16,BASE,STORE,EXIT   
07EA                             ;   DECIMAL     ( -- )
07EA                             ;               Use radix 10 as base for numeric conversions.
07EA                          ;*Macro unroll: mCOLON  7,'DECIMAL',DECIMAL
07EA                          ;*Macro unroll:  mCODE 7, "DECIMAL", DECIMAL
07EA                          ALIGN   2   
07EA                DECIMAL:      
07EA                VVCODE:   .SET   $   
07EA                VVLEN:    .SET   (7 & 01FH) / CELLL   
174C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
174C                VVNAME:   .SET   $   
174C   EA 07 5C 17            DW   vvCODE,vvLINK   
1750                VVLINK:   .SET   $   
1750   07 44 45 43 49 4D 41 4C DB   7,"DECIMAL"   
07EA                          .ORG   vvCODE   
07EA   00                     NOP      
07EB   CD 42 06               CALL   doLIST   
07EE   54 06 10 00 E8 0F FE 0C 80 06 DW   DOLIT,16,BASE,STORE,EXIT   
07F8                             ;   BL          ( -- 32 )
07F8                             ;               Return 32, the blank character.
07F8                          ;*Macro unroll: mCOLON	2,'BL',BLANK
07F8                          ;*Macro unroll:  mCODE 2, "BL", BLANK
07F8                          ALIGN   2   
07F8                BLANK:       
07F8                VVCODE:   .SET   $   
07F8                VVLEN:    .SET   (2 & 01FH) / CELLL   
1744                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1744                VVNAME:   .SET   $   
1744   F8 07 50 17            DW   vvCODE,vvLINK   
1748                VVLINK:   .SET   $   
1748   02 42 4C               DB   2,"BL"   
07F8                          .ORG   vvCODE   
07F8   00                     NOP      
07F9   CD 42 06               CALL   doLIST   
07FC   54 06 20 00 80 06      DW   DoLIT,SPACEE,EXIT   
0802                             ;   >CHAR       ( c -- c )
0802                             ;               Filter non-printing characters.
0802                          ;*Macro unroll: mCOLON  5,'>CHAR',TCHAR
0802                          ;*Macro unroll:  mCODE 5, ">CHAR", TCHAR
0802                          ALIGN   2   
0802                TCHAR:       
0802                VVCODE:   .SET   $   
0802                VVLEN:    .SET   (5 & 01FH) / CELLL   
173A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
173A                VVNAME:   .SET   $   
173A   02 08 48 17            DW   vvCODE,vvLINK   
173E                VVLINK:   .SET   $   
173E   05 3E 43 48 41 52      DB   5,">CHAR"   
0802                          .ORG   vvCODE   
0802   00                     NOP      
0803   CD 42 06               CALL   doLIST   
0806   54 06 7F 00 4C 01 18 0F DW   DoLIT,$7F,ANDD,DUPP   ;mask msb
080E   54 06 7F 00            DW   DoLIT,127   
0812   54 06 20 00 6C 02      DW   DoLIT,SPACEE,WITHI   ;check for printable
0818   CC 0C 22 08            DW   QBRAN,TCHA1   
081C   20 0F 54 06 5F 00      DW   DROP,DoLIT,UNDERSC   ;replace non-printables
0822                TCHA1:       
0822   80 06                  DW   EXIT   
0824                             ; ;; Numeric input, single precision
0824                             ; ;   DIGIT?      ( c base -- u t )
0824                             ; ;               Convert a character to its numeric value. A flag indicates success.
0824                             ; mCOLON  6,"DIGIT?",DIGTQ
0824                             ;     DW      TOR,DOLIT,"0",SUBB
0824                             ;     DW      DOLIT,9,OVER,LESS
0824                             ;     DW      QBRAN,DGTQ1
0824                             ;     DW      DOLIT,7,SUBB
0824                             ;     DW      DUPP,DOLIT,10,LESS,ORR
0824                             ; DGTQ1:
0824                             ;     DW      DUPP,RFROM,ULESS,EXIT
0824                             ; ;   NUMBER?     ( a -- n T | a F )
0824                             ; ;               Convert a number string to integer. Push a flag on tos.
0824                             ; mCOLON  7,"NUMBER?",NUMBQ
0824                             ;     DW      BASE,AT,TOR,DOLIT,0,OVER,COUNT
0824                             ;     DW      OVER,CAT,DOLIT,"$",EQUAL
0824                             ;     DW      QBRAN,NUMQ1
0824                             ;     DW      HEX,SWAP,DOLIT,1,PLUS
0824                             ;     DW      SWAP,DOLIT,1,SUBB
0824                             ; NUMQ1:
0824                             ;     DW      OVER,CAT,DOLIT,"-",EQUAL,TOR
0824                             ;     DW      SWAP,RAT,SUBB,SWAP,RAT,PLUS,QDUP
0824                             ;     DW      QBRAN,NUMQ6
0824                             ;     DW      DOLIT,1,SUBB,TOR
0824                             ; NUMQ2:
0824                             ;     DW      DUPP,TOR,CAT,BASE,AT,DIGTQ
0824                             ;     DW      QBRAN,NUMQ4
0824                             ;     DW      SWAP,BASE,AT,STAR,PLUS,RFROM
0824                             ;     DW      DOLIT,1,PLUS
0824                             ;     DW      DONXT,NUMQ2
0824                             ;     DW      RAT,SWAP,DROP
0824                             ;     DW      QBRAN,NUMQ3
0824                             ;     DW      NEGAT
0824                             ; NUMQ3:
0824                             ;     DW      SWAP
0824                             ;     DW      BRAN,NUMQ5
0824                             ; NUMQ4:
0824                             ;     DW      RFROM,RFROM,DDROP,DDROP,DOLIT,0
0824                             ; NUMQ5:
0824                             ;     DW      DUPP
0824                             ; NUMQ6:
0824                             ;     DW      RFROM,DDROP
0824                             ;                 DW      RFROM,BASE,STORE,EXIT
0824                             ;   parse       ( b u c -- b u delta ; <string> )
0824                             ;               Scan string delimited by c. Return found string and its offset.
0824                          ;*Macro unroll:  mCOLON  5,'parse',PARS
0824                          ;*Macro unroll:  mCODE 5, "parse", PARS
0824                          ALIGN   2   
0824                PARS:        
0824                VVCODE:   .SET   $   
0824                VVLEN:    .SET   (5 & 01FH) / CELLL   
1730                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1730                VVNAME:   .SET   $   
1730   24 08 3E 17            DW   vvCODE,vvLINK   
1734                VVLINK:   .SET   $   
1734   05 70 61 72 73 65      DB   5,"parse"   
0824                          .ORG   vvCODE   
0824   00                     NOP      
0825   CD 42 06               CALL   doLIST   
0828   F0 0F FE 0C 34 0F F4 0E 18 0F DW   TEMP,STORE,OVER,TOR,DUPP   
0832   CC 0C C0 08            DW   QBRAN,PARS8   
0836   54 06 01 00 CE 01 F0 0F 0C 0D F8 07 E8 01 DW   DOLIT,1,SUBB,TEMP,AT,BLANK,EQUAL   
0844   CC 0C 72 08            DW   QBRAN,PARS3   
0848   F4 0E                  DW   TOR   
084A   F8 07 34 0F 24 0D PARS1:   DW   BLANK,OVER,CAT   ;skip leading blanks ONLY
0850   CE 01 40 01 96 01      DW   SUBB,ZLESS,INVER   
0856   CC 0C 70 08            DW   QBRAN,PARS2   
085A   54 06 01 00 76 01      DW   DOLIT,1,PLUS   
0860   0A 07 4A 08            DW   DONXT,PARS1   
0864   06 0F 20 0F 54 06 00 00 18 0F 80 06 DW   RFROM,DROP,DOLIT,0,DUPP,EXIT   
0870   06 0F        PARS2:    DW   RFROM   
0872   34 0F 28 0F  PARS3:    DW   OVER,SWAP   
0876   F4 0E                  DW   TOR   
0878   F0 0F 0C 0D 34 0F 24 0D CE 01 PARS4:   DW   TEMP,AT,OVER,CAT,SUBB   ;scan for delimiter
0882   F0 0F 0C 0D F8 07 E8 01 DW   TEMP,AT,BLANK,EQUAL   
088A   CC 0C 90 08            DW   QBRAN,PARS5   
088E   40 01                  DW   ZLESS   
0890   CC 0C A6 08  PARS5:    DW   QBRAN,PARS6   
0894   54 06 01 00 76 01      DW   DOLIT,1,PLUS   
089A   0A 07 78 08            DW   DONXT,PARS4   
089E   18 0F F4 0E            DW   DUPP,TOR   
08A2   DC 0C B4 08            DW   BRAN,PARS7   
08A6   06 0F 20 0F 18 0F PARS6:   DW   RFROM,DROP,DUPP   
08AC   54 06 01 00 76 01 F4 0E DW   DOLIT,1,PLUS,TOR   
08B4   34 0F CE 01  PARS7:    DW   OVER,SUBB   
08B8   06 0F 06 0F CE 01 80 06 DW   RFROM,RFROM,SUBB,EXIT   
08C0   34 0F 06 0F CE 01 80 06 PARS8:   DW   OVER,RFROM,SUBB,EXIT   
08C8                             ;   PARSE       ( c -- b u ; <string> )
08C8                             ;               Scan input stream and return counted string delimited by c.
08C8                          ;*Macro unroll: mCOLON  5,'PARSE',PARSE
08C8                          ;*Macro unroll:  mCODE 5, "PARSE", PARSE
08C8                          ALIGN   2   
08C8                PARSE:       
08C8                VVCODE:   .SET   $   
08C8                VVLEN:    .SET   (5 & 01FH) / CELLL   
1726                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1726                VVNAME:   .SET   $   
1726   C8 08 34 17            DW   vvCODE,vvLINK   
172A                VVLINK:   .SET   $   
172A   05 50 41 52 53 45      DB   5,"PARSE"   
08C8                          .ORG   vvCODE   
08C8   00                     NOP      
08C9   CD 42 06               CALL   doLIST   
08CC   F4 0E CC 0D 00 10 0C 0D 76 01 DW   TOR,TIB,INN,AT,PLUS   ;current input buffer pointer
08D6   08 10 0C 0D 00 10 0C 0D CE 01 DW   NTIB,AT,INN,AT,SUBB   ;remaining count
08E0   06 0F 24 08 00 10 70 0D 80 06 DW   RFROM,PARS,INN,PSTOR,EXIT   
08EA                             ; ;   (           ( -- )
08EA                             ; ;               Ignore following string up to next ) . A comment.
08EA                             ; mCOLON  IMEDD+1,"(",PAREN
08EA                             ;     DW      DOLIT,")",PARSE,DDROP,EXIT
08EA                             ; ;   \           ( -- )
08EA                             ; ;               Ignore following text till the end of line.
08EA                             ; mCOLON  IMEDD+1,"||",BKSLA
08EA                             ;     DW      NTIB,AT,INN,STORE,EXIT
08EA                             ; ;   CHAR        ( -- c )
08EA                             ; ;               Parse next word and return its first character.
08EA                             ; mCOLON  4,"CHAR",CHAR
08EA                             ;     DW      BLANK,PARSE,DROP,CAT,EXIT
08EA                             ;   TOKEN       ( -- a ; <string> )
08EA                             ;               Parse a word from input stream and copy it to name dictionary.
08EA                          ;*Macro unroll: mCOLON  5,'TOKEN',TOKEN
08EA                          ;*Macro unroll:  mCODE 5, "TOKEN", TOKEN
08EA                          ALIGN   2   
08EA                TOKEN:       
08EA                VVCODE:   .SET   $   
08EA                VVLEN:    .SET   (5 & 01FH) / CELLL   
171C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
171C                VVNAME:   .SET   $   
171C   EA 08 2A 17            DW   vvCODE,vvLINK   
1720                VVLINK:   .SET   $   
1720   05 54 4F 4B 45 4E      DB   5,"TOKEN"   
08EA                          .ORG   vvCODE   
08EA   00                     NOP      
08EB   CD 42 06               CALL   doLIST   
08EE   F8 07 C8 08 54 06 1F 00 5A 02 DW   BLANK,PARSE,DOLIT,31,MIN   
08F8   50 10 0C 0D 34 0F CE 01 04 04 DW   NP,AT,OVER,SUBB,CELLM   
0902   60 0E 80 06            DW   PACKS,EXIT   
0906                             ; ;   WORD        ( c -- a ; <string> )
0906                             ; ;               Parse a word from input stream and copy it to code dictionary.
0906                             ; mCOLON  4,"WORD",WORDD
0906                             ;     DW      PARSE,HERE,PACKS,EXIT
0906                             ;   NAME>       ( na -- ca )
0906                             ;               Return a code address given a name address.
0906                          ;*Macro unroll: mCOLON  5,'NAME>',NAMET
0906                          ;*Macro unroll:  mCODE 5, "NAME>", NAMET
0906                          ALIGN   2   
0906                NAMET:       
0906                VVCODE:   .SET   $   
0906                VVLEN:    .SET   (5 & 01FH) / CELLL   
1712                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1712                VVNAME:   .SET   $   
1712   06 09 20 17            DW   vvCODE,vvLINK   
1716                VVLINK:   .SET   $   
1716   05 4E 41 4D 45 3E      DB   5,"NAME>"   
0906                          .ORG   vvCODE   
0906   00                     NOP      
0907   CD 42 06               CALL   doLIST   
090A   04 04 04 04 0C 0D 80 06 DW   CELLM,CELLM,AT,EXIT   
0912                             ;   SAME?       ( a a u -- a a f \ -0+ )
0912                             ;               Compare u cells in two strings. Return 0 if identical.
0912                          ;*Macro unroll: mCOLON  5,'SAME?',SAMEQ
0912                          ;*Macro unroll:  mCODE 5, "SAME?", SAMEQ
0912                          ALIGN   2   
0912                SAMEQ:       
0912                VVCODE:   .SET   $   
0912                VVLEN:    .SET   (5 & 01FH) / CELLL   
1708                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1708                VVNAME:   .SET   $   
1708   12 09 16 17            DW   vvCODE,vvLINK   
170C                VVLINK:   .SET   $   
170C   05 53 41 4D 45 3F      DB   5,"SAME?"   
0912                          .ORG   vvCODE   
0912   00                     NOP      
0913   CD 42 06               CALL   doLIST   
0916   F4 0E                  DW   TOR   
0918   DC 0C 3E 09            DW   BRAN,SAME2   
091C   34 0F 30 0D 10 04 76 01 0C 0D SAME1:   DW   OVER,RAT,CELLS,PLUS,AT   
0926   34 0F 30 0D 10 04 76 01 0C 0D DW   OVER,RAT,CELLS,PLUS,AT   
0930   CE 01 40 0F            DW   SUBB,QDUP   
0934   CC 0C 3E 09            DW   QBRAN,SAME2   
0938   06 0F 20 0F 80 06      DW   RFROM,DROP,EXIT   ;strings not equal
093E   0A 07 1C 09  SAME2:    DW   DONXT,SAME1   
0942   54 06 00 00 80 06      DW   DOLIT,0,EXIT   ;strings equal
0948                             ;   find        ( a va -- ca na | a F )
0948                             ;               Search a vocabulary for a string. Return ca and na if succeeded.
0948                          ;*Macro unroll: mCOLON  4,'find',FIND
0948                          ;*Macro unroll:  mCODE 4, "find", FIND
0948                          ALIGN   2   
0948                FIND:        
0948                VVCODE:   .SET   $   
0948                VVLEN:    .SET   (4 & 01FH) / CELLL   
16FE                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
16FE                VVNAME:   .SET   $   
16FE   48 09 0C 17            DW   vvCODE,vvLINK   
1702                VVLINK:   .SET   $   
1702   04 66 69 6E 64         DB   4,"find"   
0948                          .ORG   vvCODE   
0948   00                     NOP      
0949   CD 42 06               CALL   doLIST   
094C   28 0F 18 0F 24 0D      DW   SWAP,DUPP,CAT   
0952   54 06 02 00 8E 03 F0 0F FE 0C DW   DOLIT,CELLL,SLASH,TEMP,STORE   
095C   18 0F 0C 0D F4 0E F8 03 28 0F DW   DUPP,AT,TOR,CELLP,SWAP   
0966   0C 0D 18 0F  FIND1:    DW   AT,DUPP   
096A   CC 0C 96 09            DW   QBRAN,FIND6   
096E   18 0F 0C 0D 54 06 1F 00 4C 01 30 0D 68 01 DW   DUPP,AT,DOLIT,MASKK,ANDD,RAT,XORR   
097C   CC 0C 8A 09            DW   QBRAN,FIND2   
0980   F8 03 54 06 FF FF      DW   CELLP,DOLIT,-1   ;true flag
0986   DC 0C 92 09            DW   BRAN,FIND3   
098A   F8 03 F0 0F 0C 0D 12 09 FIND2:   DW   CELLP,TEMP,AT,SAMEQ   
0992   DC 0C A2 09  FIND3:    DW   BRAN,FIND4   
0996   06 0F 20 0F  FIND6:    DW   RFROM,DROP   
099A   28 0F 04 04 28 0F 80 06 DW   SWAP,CELLM,SWAP,EXIT   
09A2   CC 0C AE 09  FIND4:    DW   QBRAN,FIND5   
09A6   04 04 04 04            DW   CELLM,CELLM   
09AA   DC 0C 66 09            DW   BRAN,FIND1   
09AE   06 0F 20 0F 28 0F 20 0F FIND5:   DW   RFROM,DROP,SWAP,DROP   
09B6   04 04                  DW   CELLM   
09B8   18 0F 06 09 28 0F 80 06 DW   DUPP,NAMET,SWAP,EXIT   
09C0                             ;   NAME?       ( a -- ca na | a F )
09C0                             ;               Search all context vocabularies for a string.
09C0                          ;*Macro unroll: mCOLON  5,'NAME?',NAMEQ
09C0                          ;*Macro unroll:  mCODE 5, "NAME?", NAMEQ
09C0                          ALIGN   2   
09C0                NAMEQ:       
09C0                VVCODE:   .SET   $   
09C0                VVLEN:    .SET   (5 & 01FH) / CELLL   
16F4                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
16F4                VVNAME:   .SET   $   
16F4   C0 09 02 17            DW   vvCODE,vvLINK   
16F8                VVLINK:   .SET   $   
16F8   05 4E 41 4D 45 3F      DB   5,"NAME?"   
09C0                          .ORG   vvCODE   
09C0   00                     NOP      
09C1   CD 42 06               CALL   doLIST   
09C4   38 10 18 0F 92 0D 68 01 DW   CNTXT,DUPP,DAT,XORR   ;?context=also
09CC   CC 0C D2 09            DW   QBRAN,NAMQ1   
09D0   04 04                  DW   CELLM   ;no, start with context
09D2   F4 0E        NAMQ1:    DW   TOR   
09D4   06 0F F8 03 18 0F F4 0E NAMQ2:   DW   RFROM,CELLP,DUPP,TOR   ;next in search order
09DC   0C 0D 40 0F            DW   AT,QDUP   
09E0   CC 0C F2 09            DW   QBRAN,NAMQ3   
09E4   48 09 40 0F            DW   FIND,QDUP   ;search vocabulary
09E8   CC 0C D4 09            DW   QBRAN,NAMQ2   
09EC   06 0F 20 0F 80 06      DW   RFROM,DROP,EXIT   ;found name
09F2   06 0F 20 0F  NAMQ3:    DW   RFROM,DROP   ;name not found
09F6   54 06 00 00 80 06      DW   DOLIT,0,EXIT   ;false flag
09FC                             ; ;   CATCH       ( ca -- 0 | err# )
09FC                             ; ;               Execute word at ca and set up an error frame for it.
09FC                             ; mCOLON  5,"CATCH",CATCH
09FC                             ;     DW      SPAT,TOR,HANDL,AT,TOR   ;save error frame
09FC                             ;     DW      RPAT,HANDL,STORE,EXECU  ;execute
09FC                             ;     DW      RFROM,HANDL,STORE       ;restore error frame
09FC                             ;     DW      RFROM,DROP,DOLIT,0,EXIT ;no error
09FC                             ;   THROW       ( err# -- err# )
09FC                             ;               Reset system to current local error frame an update error flag.
09FC                          ;*Macro unroll: mCOLON  5,'THROW',THROW
09FC                          ;*Macro unroll:  mCODE 5, "THROW", THROW
09FC                          ALIGN   2   
09FC                THROW:       
09FC                VVCODE:   .SET   $   
09FC                VVLEN:    .SET   (5 & 01FH) / CELLL   
16EA                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
16EA                VVNAME:   .SET   $   
16EA   FC 09 F8 16            DW   vvCODE,vvLINK   
16EE                VVLINK:   .SET   $   
16EE   05 54 48 52 4F 57      DB   5,"THROW"   
09FC                          .ORG   vvCODE   
09FC   00                     NOP      
09FD   CD 42 06               CALL   doLIST   
0A00   30 10 0C 0D 4A 0D      DW   HANDL,AT,RPSTO   ;restore return stack
0A06   06 0F 30 10 FE 0C      DW   RFROM,HANDL,STORE   ;restore handler frame
0A0C   06 0F 28 0F F4 0E 64 0D DW   RFROM,SWAP,TOR,SPSTO   ;restore data stack
0A14   20 0F 06 0F 80 06      DW   DROP,RFROM,EXIT   
0A1A                             ; ;   NULL$       ( -- a )
0A1A                             ; ;               Return address of a null string with zero count.
0A1A                             ; mCOLON  5,"NULL$",NULLS
0A1A                             ;     DW      DOVAR                   ;emulate CREATE
0A1A                             ;     DW      0
0A1A                             ;     DB      99,111,121,111,116,101
0A1A                             ;     .ALIGN 2
0A1A                             ; ;   ABORT       ( -- )
0A1A                             ; ;               Reset data stack and jump to QUIT.
0A1A                             ; mCOLON  5,"ABORT",ABORT
0A1A                             ;     DW      NULLS,THROW
0A1A                             ; ;   abort"      ( f -- )
0A1A                             ; ;               Run time routine of ABORT" . Abort with a message.
0A1A                          ;*Macro unroll: mCOLON  COMPO+6,'abort|',ABORQ
0A1A                          ;*Macro unroll:  mCODE COMPO+6, "abort|", ABORQ
0A1A                          ALIGN   2   
0A1A                ABORQ:       
0A1A                VVCODE:   .SET   $   
0A1A                VVLEN:    .SET   (COMPO+6 & 01FH) / CELLL   
16BE                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
16BE                VVNAME:   .SET   $   
16BE   1A 0A EE 16            DW   vvCODE,vvLINK   
16C2                VVLINK:   .SET   $   
16C2   26 61 62 6F 72 74 7C   DB   COMPO+6,"abort|"   
0A1A                          .ORG   vvCODE   
0A1A   00                     NOP      
0A1B   CD 42 06               CALL   doLIST   
0A1E   CC 0C 26 0A            DW   QBRAN,ABOR1   ;text flag
0A22   3A 0B FC 09            DW   DOSTR,THROW   ;pass error string
0A26                ABOR1:       
0A26   3A 0B 20 0F 80 06      DW   DOSTR,DROP,EXIT   ;drop error
0A2C                             ; ;; The text interpreter
0A2C                             ;   $INTERPRET  ( a -- )
0A2C                             ;               Interpret a word. If failed, try to convert it to an integer.
0A2C                          ;*Macro unroll: mCOLON  10,'$INTERPRET',INTER
0A2C                          ;*Macro unroll:  mCODE 10, "$INTERPRET", INTER
0A2C                          ALIGN   2   
0A2C                INTER:       
0A2C                VVCODE:   .SET   $   
0A2C                VVLEN:    .SET   (10 & 01FH) / CELLL   
16AE                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
16AE                VVNAME:   .SET   $   
16AE   2C 0A C2 16            DW   vvCODE,vvLINK   
16B2                VVLINK:   .SET   $   
16B2   0A 24 49 4E 54 45 52 50 52 45 54 DB   10,"$INTERPRET"   
0A2C                          .ORG   vvCODE   
0A2C   00                     NOP      
0A2D   CD 42 06               CALL   doLIST   
0A30   C0 09 40 0F            DW   NAMEQ,QDUP   ;?defined
0A34   CC 0C 54 0A            DW   QBRAN,INTE1   
0A38   0C 0D 54 06 20 00 4C 01 DW   AT,DOLIT,COMPO,ANDD   ;?compile only lexicon bits
0A40                          ;*Macro unroll:  mDSTR   ABORQ,' compile only'
0A40   1A 0A                  DW   ABORQ   
0A42                VVLEN:    .SET   $   
0A42   00 20 63 6F 6D 70 69 6C 65 20 6F 6E 6C 79 DB   0," compile only"   
0A50                VVCODE:   .SET   $   
0A42                          .ORG   vvLEN   
0A42   0D                     DB   vvCODE - vvLEN - 1   
0A50                          .ORG   vvCODE   
0A50                          ALIGN   2   
0A50   C8 0C 80 06            DW   EXECU,EXIT   ;execute defined word
0A54                INTE1:       
0A54   20 10 D8 0D            DW   TNUMB,ATEXE   ;convert a number
0A58   CC 0C 5E 0A            DW   QBRAN,INTE2   
0A5C   80 06                  DW   EXIT   
0A5E                INTE2:       
0A5E   FC 09                  DW   THROW   ;error
0A60                             ; ;   [           ( -- )
0A60                             ; ;               Start the text interpreter.
0A60                          ;*Macro unroll: mCOLON  IMEDD+1,'[',LBRAC
0A60                          ;*Macro unroll:  mCODE IMEDD+1, "[", LBRAC
0A60                          ALIGN   2   
0A60                LBRAC:       
0A60                VVCODE:   .SET   $   
0A60                VVLEN:    .SET   (IMEDD+1 & 01FH) / CELLL   
1668                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1668                VVNAME:   .SET   $   
1668   60 0A B2 16            DW   vvCODE,vvLINK   
166C                VVLINK:   .SET   $   
166C   41 5B                  DB   IMEDD+1,"["   
0A60                          .ORG   vvCODE   
0A60   00                     NOP      
0A61   CD 42 06               CALL   doLIST   
0A64   54 06 2C 0A 18 10 FE 0C 80 06 DW   DOLIT,INTER,TEVAL,STORE,EXIT   
0A6E                             ;   .OK         ( -- )
0A6E                             ;               Display "ok" only while interpreting.
0A6E                             ; mCOLON  3,".OK",DOTOK
0A6E                             ;     DW      DOLIT,INTER,TEVAL,AT,EQUAL
0A6E                             ;     DW      QBRAN,DOTO1
0A6E                             ;     mDSTR      DOTQP," ok"
0A6E                             ; DOTO1:          DW      CR,EXIT
0A6E                             ; ;   ?STACK      ( -- )
0A6E                             ; ;               Abort if the data stack underflows.
0A6E                             ; mCOLON  6,"?STACK",QSTAC
0A6E                             ;     DW      DEPTH,ZLESS             ;check only for underflow
0A6E                             ;     mDSTR      ABORQ," underflow"
0A6E                             ;     DW      EXIT
0A6E                             ; ;   EVAL        ( -- )
0A6E                             ; ;               Interpret the input stream.
0A6E                             ; mCOLON  4,"EVAL",EVAL
0A6E                             ; EVAL1:
0A6E                             ;     DW      TOKEN,DUPP,CAT          ;?input stream empty
0A6E                             ;     DW      QBRAN,EVAL2
0A6E                             ;     DW      TEVAL,ATEXE,QSTAC       ;evaluate input, check stack
0A6E                             ;     DW      BRAN,EVAL1
0A6E                             ; EVAL2:
0A6E                             ;     DW      DROP,TPROM,ATEXE,EXIT   ;prompt
0A6E                             ;   PC!         ( uc p --  )
0A6E                             ;               output uc to IO port p
0A6E                             ;   PC@         ( p -- uc )
0A6E                             ;               output uc to IO port p
0A6E                             ;   !IO         ( -- )
0A6E                             ;               Initialize the serial I/O devices.
0A6E                          ;*Macro unroll: mCODE   3,'!IO', STOIO ;
0A6E                          ALIGN   2   ; 
0A6E                STOIO:       
0A6E                VVCODE:   .SET   $   
0A6E                VVLEN:    .SET   (3 & 01FH) / CELLL   
1660                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1660                VVNAME:   .SET   $   
1660   6E 0A 6C 16            DW   vvCODE,vvLINK   
1664                VVLINK:   .SET   $   
1664   03 21 49 4F            DB   3,"!IO"   
0A6E                          .ORG   vvCODE   
0A6E   CD 9F 00               CALL   INIT_IO   
0A71                          ;*Macro unroll:  mNEXT
0A71   EB                     EX   DE,HL   
0A72                          ;*Macro unroll:  mNEXTHL                         ; 34t
0A72   5E                     LD   E,(HL)   ; 34t
0A73   23                     INC   HL   
0A74   56                     LD   D,(HL)   
0A75   23                     INC   HL   
0A76   EB                     EX   DE,HL   
0A77   E9                     JP   (HL)   
0A78                             ;   ?RX         ( -- c T | F )
0A78                             ;               Return input character and true, or a false if no input.
0A78                          ;*Macro unroll: mCODE	3, '?RX', QRX
0A78                          ALIGN   2   
0A78                QRX:         
0A78                VVCODE:   .SET   $   
0A78                VVLEN:    .SET   (3 & 01FH) / CELLL   
1658                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1658                VVNAME:   .SET   $   
1658   78 0A 64 16            DW   vvCODE,vvLINK   
165C                VVLINK:   .SET   $   
165C   03 3F 52 58            DB   3,"?RX"   
0A78                          .ORG   vvCODE   
0A78   C5                     PUSH   BC   
0A79   CD E9 00               CALL   CKINCHAR   
0A7C   20 05                  JR   nz,QRX1   
0A7E   01 00 00               LD   BC,FALSEE   
0A81   18 0A                  JR   QRX2   
0A83                QRX1:        
0A83   CD B3 00               CALL   RXA   
0A86   4F                     LD   C,A   
0A87   06 00                  LD   B,0   
0A89   C5                     PUSH   BC   
0A8A   01 FF FF               LD   BC,TRUEE   
0A8D                QRX2:        
0A8D                          ;*Macro unroll:  mNEXT
0A8D   EB                     EX   DE,HL   
0A8E                          ;*Macro unroll:  mNEXTHL                         ; 34t
0A8E   5E                     LD   E,(HL)   ; 34t
0A8F   23                     INC   HL   
0A90   56                     LD   D,(HL)   
0A91   23                     INC   HL   
0A92   EB                     EX   DE,HL   
0A93   E9                     JP   (HL)   
0A94                             ;   TX!         ( c -- )
0A94                             ;               Send character c to the output device.
0A94                          ;*Macro unroll: mCODE	3,'TX!',TXSTO
0A94                          ALIGN   2   
0A94                TXSTO:       
0A94                VVCODE:   .SET   $   
0A94                VVLEN:    .SET   (3 & 01FH) / CELLL   
1650                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1650                VVNAME:   .SET   $   
1650   94 0A 5C 16            DW   vvCODE,vvLINK   
1654                VVLINK:   .SET   $   
1654   03 54 58 21            DB   3,"TX!"   
0A94                          .ORG   vvCODE   
0A94   79                     LD   A,C   
0A95   CD DE 00               CALL   TXA   
0A98   C1                     POP   BC   
0A99                          ;*Macro unroll:  mNEXT
0A99   EB                     EX   DE,HL   
0A9A                          ;*Macro unroll:  mNEXTHL                         ; 34t
0A9A   5E                     LD   E,(HL)   ; 34t
0A9B   23                     INC   HL   
0A9C   56                     LD   D,(HL)   
0A9D   23                     INC   HL   
0A9E   EB                     EX   DE,HL   
0A9F   E9                     JP   (HL)   
0AA0                             ;   ?KEY        ( -- c T | F )
0AA0                             ;               Return input character and true, or a false if no input.
0AA0                          ;*Macro unroll: mCOLON  4,'?KEY',QKEY
0AA0                          ;*Macro unroll:  mCODE 4, "?KEY", QKEY
0AA0                          ALIGN   2   
0AA0                QKEY:        
0AA0                VVCODE:   .SET   $   
0AA0                VVLEN:    .SET   (4 & 01FH) / CELLL   
1646                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1646                VVNAME:   .SET   $   
1646   A0 0A 54 16            DW   vvCODE,vvLINK   
164A                VVLINK:   .SET   $   
164A   04 3F 4B 45 59         DB   4,"?KEY"   
0AA0                          .ORG   vvCODE   
0AA0   00                     NOP      
0AA1   CD 42 06               CALL   doLIST   
0AA4   B8 0F 0C 0D C8 0C 80 06 DW   TQKEY,AT,EXECU,EXIT   
0AAC                             ;   KEY         ( -- c )
0AAC                             ;               Wait for and return an input character.
0AAC                          ;*Macro unroll: mCOLON  3,'KEY',KEY
0AAC                          ;*Macro unroll:  mCODE 3, "KEY", KEY
0AAC                          ALIGN   2   
0AAC                KEY:         
0AAC                VVCODE:   .SET   $   
0AAC                VVLEN:    .SET   (3 & 01FH) / CELLL   
163E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
163E                VVNAME:   .SET   $   
163E   AC 0A 4A 16            DW   vvCODE,vvLINK   
1642                VVLINK:   .SET   $   
1642   03 4B 45 59            DB   3,"KEY"   
0AAC                          .ORG   vvCODE   
0AAC   00                     NOP      
0AAD   CD 42 06               CALL   doLIST   
0AB0                KEY1:        
0AB0   A0 0A                  DW   QKEY   
0AB2   CC 0C B0 0A            DW   QBRAN,KEY1   
0AB6   80 06                  DW   EXIT   
0AB8                             ;   EMIT        ( c -- )
0AB8                             ;               Send a character to the output device.
0AB8                          ;*Macro unroll: mCOLON  4, 'EMIT', EMIT
0AB8                          ;*Macro unroll:  mCODE 4, "EMIT", EMIT
0AB8                          ALIGN   2   
0AB8                EMIT:        
0AB8                VVCODE:   .SET   $   
0AB8                VVLEN:    .SET   (4 & 01FH) / CELLL   
1634                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1634                VVNAME:   .SET   $   
1634   B8 0A 42 16            DW   vvCODE,vvLINK   
1638                VVLINK:   .SET   $   
1638   04 45 4D 49 54         DB   4,"EMIT"   
0AB8                          .ORG   vvCODE   
0AB8   00                     NOP      
0AB9   CD 42 06               CALL   doLIST   
0ABC   C0 0F 0C 0D C8 0C 80 06 DW   TEMIT,AT,EXECU,EXIT   
0AC4                             ;   NUF?        ( -- t )
0AC4                             ;               Return false if no input, else pause and if CR return true.
0AC4                          ;*Macro unroll: mCOLON  4,'NUF?',NUFQ
0AC4                          ;*Macro unroll:  mCODE 4, "NUF?", NUFQ
0AC4                          ALIGN   2   
0AC4                NUFQ:        
0AC4                VVCODE:   .SET   $   
0AC4                VVLEN:    .SET   (4 & 01FH) / CELLL   
162A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
162A                VVNAME:   .SET   $   
162A   C4 0A 38 16            DW   vvCODE,vvLINK   
162E                VVLINK:   .SET   $   
162E   04 4E 55 46 3F         DB   4,"NUF?"   
0AC4                          .ORG   vvCODE   
0AC4   00                     NOP      
0AC5   CD 42 06               CALL   doLIST   
0AC8   A0 0A 18 0F            DW   QKEY,DUPP   
0ACC   CC 0C DA 0A            DW   QBRAN,NUFQ1   
0AD0   5C 0F AC 0A 54 06 0D 00 E8 01 DW   DDROP,KEY,DoLIT,CRR,EQUAL   
0ADA                NUFQ1:       
0ADA   80 06                  DW   EXIT   
0ADC                             ;   PACE        ( -- )
0ADC                             ;               Send a pace character for the file downloading process.
0ADC                          ;*Macro unroll: mCOLON  4,'PACE',PACE
0ADC                          ;*Macro unroll:  mCODE 4, "PACE", PACE
0ADC                          ALIGN   2   
0ADC                PACE:        
0ADC                VVCODE:   .SET   $   
0ADC                VVLEN:    .SET   (4 & 01FH) / CELLL   
1620                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1620                VVNAME:   .SET   $   
1620   DC 0A 2E 16            DW   vvCODE,vvLINK   
1624                VVLINK:   .SET   $   
1624   04 50 41 43 45         DB   4,"PACE"   
0ADC                          .ORG   vvCODE   
0ADC   00                     NOP      
0ADD   CD 42 06               CALL   doLIST   
0AE0   54 06 0B 00 B8 0A 80 06 DW   DOLIT,11,EMIT,EXIT   
0AE8                             ;   SPACE       ( -- )
0AE8                             ;               Send the blank character to the output device.
0AE8                          ;*Macro unroll: mCOLON  5,'SPACE',SPACE
0AE8                          ;*Macro unroll:  mCODE 5, "SPACE", SPACE
0AE8                          ALIGN   2   
0AE8                SPACE:       
0AE8                VVCODE:   .SET   $   
0AE8                VVLEN:    .SET   (5 & 01FH) / CELLL   
1616                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1616                VVNAME:   .SET   $   
1616   E8 0A 24 16            DW   vvCODE,vvLINK   
161A                VVLINK:   .SET   $   
161A   05 53 50 41 43 45      DB   5,"SPACE"   
0AE8                          .ORG   vvCODE   
0AE8   00                     NOP      
0AE9   CD 42 06               CALL   doLIST   
0AEC   F8 07 B8 0A 80 06      DW   BLANK,EMIT,EXIT   
0AF2                             ;   SPACES      ( +n -- )
0AF2                             ;               Send n spaces to the output device.
0AF2                          ;*Macro unroll: mCOLON  6,'SPACES',SPACS
0AF2                          ;*Macro unroll:  mCODE 6, "SPACES", SPACS
0AF2                          ALIGN   2   
0AF2                SPACS:       
0AF2                VVCODE:   .SET   $   
0AF2                VVLEN:    .SET   (6 & 01FH) / CELLL   
160A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
160A                VVNAME:   .SET   $   
160A   F2 0A 1A 16            DW   vvCODE,vvLINK   
160E                VVLINK:   .SET   $   
160E   06 53 50 41 43 45 53   DB   6,"SPACES"   
0AF2                          .ORG   vvCODE   
0AF2   00                     NOP      
0AF3   CD 42 06               CALL   doLIST   
0AF6   54 06 00 00 48 02 F4 0E DW   DOLIT,0,MAX,TOR   
0AFE   DC 0C 04 0B            DW   BRAN,CHAR2   
0B02                CHAR1:       
0B02   E8 0A                  DW   SPACE   
0B04                CHAR2:       
0B04   0A 07 02 0B            DW   DONXT,CHAR1   
0B08   80 06                  DW   EXIT   
0B0A                             ;   TYPE        ( b u -- )
0B0A                             ;               Output u characters from b.
0B0A                          ;*Macro unroll: mCOLON	4,'TYPE',TYPEE
0B0A                          ;*Macro unroll:  mCODE 4, "TYPE", TYPEE
0B0A                          ALIGN   2   
0B0A                TYPEE:       
0B0A                VVCODE:   .SET   $   
0B0A                VVLEN:    .SET   (4 & 01FH) / CELLL   
1600                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1600                VVNAME:   .SET   $   
1600   0A 0B 0E 16            DW   vvCODE,vvLINK   
1604                VVLINK:   .SET   $   
1604   04 54 59 50 45         DB   4,"TYPE"   
0B0A                          .ORG   vvCODE   
0B0A   00                     NOP      
0B0B   CD 42 06               CALL   doLIST   
0B0E   F4 0E                  DW   TOR   
0B10   DC 0C 20 0B            DW   BRAN,TYPE2   
0B14                TYPE1:       
0B14   18 0F 24 0D B8 0A      DW   DUPP,CAT,EMIT   
0B1A   54 06 01 00 76 01      DW   DOLIT,1,PLUS   
0B20                TYPE2:       
0B20   0A 07 14 0B            DW   DONXT,TYPE1   
0B24   20 0F 80 06            DW   DROP,EXIT   
0B28                             ;   CR          ( -- )
0B28                             ;               Output a carriage return and a line feed.
0B28                          ;*Macro unroll: mCOLON	2,'CR',CR
0B28                          ;*Macro unroll:  mCODE 2, "CR", CR
0B28                          ALIGN   2   
0B28                CR:          
0B28                VVCODE:   .SET   $   
0B28                VVLEN:    .SET   (2 & 01FH) / CELLL   
15F8                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
15F8                VVNAME:   .SET   $   
15F8   28 0B 04 16            DW   vvCODE,vvLINK   
15FC                VVLINK:   .SET   $   
15FC   02 43 52               DB   2,"CR"   
0B28                          .ORG   vvCODE   
0B28   00                     NOP      
0B29   CD 42 06               CALL   doLIST   
0B2C   54 06 0D 00 B8 0A 54 06 0A 00 B8 0A 80 06 DW   DoLIT,CRR,EMIT,DoLIT,LFF,EMIT,EXIT   
0B3A                             ;   do$         ( -- a )
0B3A                             ;               Return the address of a compiled string.
0B3A                          ;*Macro unroll: mCOLON  COMPO+3,'do$',DOSTR
0B3A                          ;*Macro unroll:  mCODE COMPO+3, "do$", DOSTR
0B3A                          ALIGN   2   
0B3A                DOSTR:       
0B3A                VVCODE:   .SET   $   
0B3A                VVLEN:    .SET   (COMPO+3 & 01FH) / CELLL   
15D0                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
15D0                VVNAME:   .SET   $   
15D0   3A 0B FC 15            DW   vvCODE,vvLINK   
15D4                VVLINK:   .SET   $   
15D4   23 64 6F 24            DB   COMPO+3,"do$"   
0B3A                          .ORG   vvCODE   
0B3A   00                     NOP      
0B3B   CD 42 06               CALL   doLIST   
0B3E   06 0F 30 0D 06 0F A2 0D 76 01 DW   RFROM,RAT,RFROM,COUNT,PLUS   
0B48   9A 0E F4 0E 28 0F F4 0E 80 06 DW   ALGND,TOR,SWAP,TOR,EXIT   
0B52                             ;   $"|         ( -- a )
0B52                             ;               Run time routine compiled by $". Return address of a compiled string.
0B52                          ;*Macro unroll: mCOLON  COMPO+3,'$||',STRQP
0B52                          ;*Macro unroll:  mCODE COMPO+3, "$||", STRQP
0B52                          ALIGN   2   
0B52                STRQP:       
0B52                VVCODE:   .SET   $   
0B52                VVLEN:    .SET   (COMPO+3 & 01FH) / CELLL   
15A8                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
15A8                VVNAME:   .SET   $   
15A8   52 0B D4 15            DW   vvCODE,vvLINK   
15AC                VVLINK:   .SET   $   
15AC   23 24 7C 7C            DB   COMPO+3,"$||"   
0B52                          .ORG   vvCODE   
0B52   00                     NOP      
0B53   CD 42 06               CALL   doLIST   
0B56   3A 0B 80 06            DW   DOSTR,EXIT   ;force a call to do$
0B5A                             ;   ."|         ( -- )
0B5A                             ;               Run time routine of ." . Output a compiled string.
0B5A                          ;*Macro unroll: mCOLON  COMPO+3,'.||',DOTQP
0B5A                          ;*Macro unroll:  mCODE COMPO+3, ".||", DOTQP
0B5A                          ALIGN   2   
0B5A                DOTQP:       
0B5A                VVCODE:   .SET   $   
0B5A                VVLEN:    .SET   (COMPO+3 & 01FH) / CELLL   
1580                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1580                VVNAME:   .SET   $   
1580   5A 0B AC 15            DW   vvCODE,vvLINK   
1584                VVLINK:   .SET   $   
1584   23 2E 7C 7C            DB   COMPO+3,".||"   
0B5A                          .ORG   vvCODE   
0B5A   00                     NOP      
0B5B   CD 42 06               CALL   doLIST   
0B5E   3A 0B A2 0D 0A 0B 80 06 DW   DOSTR,COUNT,TYPEE,EXIT   
0B66                             ;   .R          ( n +n -- )
0B66                             ;               Display an integer in a field of n columns, right justified.
0B66                          ;*Macro unroll: mCOLON  2,'.R',DOTR
0B66                          ;*Macro unroll:  mCODE 2, ".R", DOTR
0B66                          ALIGN   2   
0B66                DOTR:        
0B66                VVCODE:   .SET   $   
0B66                VVLEN:    .SET   (2 & 01FH) / CELLL   
1578                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1578                VVNAME:   .SET   $   
1578   66 0B 84 15            DW   vvCODE,vvLINK   
157C                VVLINK:   .SET   $   
157C   02 2E 52               DB   2,".R"   
0B66                          .ORG   vvCODE   
0B66   00                     NOP      
0B67   CD 42 06               CALL   doLIST   
0B6A   F4 0E C6 07 06 0F 34 0F CE 01 DW   TOR,STR,RFROM,OVER,SUBB   
0B74   F2 0A 0A 0B 80 06      DW   SPACS,TYPEE,EXIT   
0B7A                             ;   U.R         ( u +n -- )
0B7A                             ;               Display an unsigned integer in n column, right justified.
0B7A                          ;*Macro unroll: mCOLON  3,'U.R',UDOTR
0B7A                          ;*Macro unroll:  mCODE 3, "U.R", UDOTR
0B7A                          ALIGN   2   
0B7A                UDOTR:       
0B7A                VVCODE:   .SET   $   
0B7A                VVLEN:    .SET   (3 & 01FH) / CELLL   
1570                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1570                VVNAME:   .SET   $   
1570   7A 0B 7C 15            DW   vvCODE,vvLINK   
1574                VVLINK:   .SET   $   
1574   03 55 2E 52            DB   3,"U.R"   
0B7A                          .ORG   vvCODE   
0B7A   00                     NOP      
0B7B   CD 42 06               CALL   doLIST   
0B7E   F4 0E 5E 07 90 07 B4 07 DW   TOR,BDIGS,DIGS,EDIGS   
0B86   06 0F 34 0F CE 01      DW   RFROM,OVER,SUBB   
0B8C   F2 0A 0A 0B 80 06      DW   SPACS,TYPEE,EXIT   
0B92                             ;   U.          ( u -- )
0B92                             ;               Display an unsigned integer in free format.
0B92                          ;*Macro unroll: mCOLON  2,'U.',UDOT
0B92                          ;*Macro unroll:  mCODE 2, "U.", UDOT
0B92                          ALIGN   2   
0B92                UDOT:        
0B92                VVCODE:   .SET   $   
0B92                VVLEN:    .SET   (2 & 01FH) / CELLL   
1568                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1568                VVNAME:   .SET   $   
1568   92 0B 74 15            DW   vvCODE,vvLINK   
156C                VVLINK:   .SET   $   
156C   02 55 2E               DB   2,"U."   
0B92                          .ORG   vvCODE   
0B92   00                     NOP      
0B93   CD 42 06               CALL   doLIST   
0B96   5E 07 90 07 B4 07      DW   BDIGS,DIGS,EDIGS   
0B9C   E8 0A 0A 0B 80 06      DW   SPACE,TYPEE,EXIT   
0BA2                             ;   .           ( w -- )
0BA2                             ;               Display an integer in free format, preceeded by a space.
0BA2                          ;*Macro unroll: mCOLON  1,'.',DOT
0BA2                          ;*Macro unroll:  mCODE 1, ".", DOT
0BA2                          ALIGN   2   
0BA2                DOT:         
0BA2                VVCODE:   .SET   $   
0BA2                VVLEN:    .SET   (1 & 01FH) / CELLL   
1562                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1562                VVNAME:   .SET   $   
1562   A2 0B 6C 15            DW   vvCODE,vvLINK   
1566                VVLINK:   .SET   $   
1566   01 2E                  DB   1,"."   
0BA2                          .ORG   vvCODE   
0BA2   00                     NOP      
0BA3   CD 42 06               CALL   doLIST   
0BA6   E8 0F 0C 0D 54 06 0A 00 68 01 DW   BASE,AT,DOLIT,10,XORR   ;?decimal
0BB0   CC 0C B8 0B            DW   QBRAN,DOT1   
0BB4   92 0B 80 06            DW   UDOT,EXIT   ;no, display unsigned
0BB8                DOT1:        
0BB8   C6 07 E8 0A 0A 0B 80 06 DW   STR,SPACE,TYPEE,EXIT   ;yes, display signed
0BC0                             ; ;   .(          ( -- )
0BC0                             ; ;               Output following string up to next ) .
0BC0                             ; mCOLON  IMEDD+2,".(",DOTPR
0BC0                             ;     DW      DOLIT,")",PARSE,TYPEE,EXIT
0BC0                             ;   ?           ( a -- )
0BC0                             ;               Display the contents in a memory cell.
0BC0                          ;*Macro unroll: mCOLON  1,'?',QUEST
0BC0                          ;*Macro unroll:  mCODE 1, "?", QUEST
0BC0                          ALIGN   2   
0BC0                QUEST:       
0BC0                VVCODE:   .SET   $   
0BC0                VVLEN:    .SET   (1 & 01FH) / CELLL   
155C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
155C                VVNAME:   .SET   $   
155C   C0 0B 66 15            DW   vvCODE,vvLINK   
1560                VVLINK:   .SET   $   
1560   01 3F                  DB   1,"?"   
0BC0                          .ORG   vvCODE   
0BC0   00                     NOP      
0BC1   CD 42 06               CALL   doLIST   
0BC4   0C 0D A2 0B 80 06      DW   AT,DOT,EXIT   
0BCA                             ;   ^H          ( bot eot cur -- bot eot cur )
0BCA                             ;               Backup the cursor by one character.
0BCA                          ;*Macro unroll: mCOLON  2,'^H',BKSP
0BCA                          ;*Macro unroll:  mCODE 2, "^H", BKSP
0BCA                          ALIGN   2   
0BCA                BKSP:        
0BCA                VVCODE:   .SET   $   
0BCA                VVLEN:    .SET   (2 & 01FH) / CELLL   
1554                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1554                VVNAME:   .SET   $   
1554   CA 0B 60 15            DW   vvCODE,vvLINK   
1558                VVLINK:   .SET   $   
1558   02 5E 48               DB   2,"^H"   
0BCA                          .ORG   vvCODE   
0BCA   00                     NOP      
0BCB   CD 42 06               CALL   doLIST   
0BCE   F4 0E 34 0F 06 0F 28 0F 34 0F 68 01 DW   TOR,OVER,RFROM,SWAP,OVER,XORR   
0BDA   CC 0C FA 0B            DW   QBRAN,BACK1   
0BDE   54 06 08 00 D8 0F D8 0D 54 06 01 00 CE 01 DW   DOLIT,BKSPP,TECHO,ATEXE,DOLIT,1,SUBB   
0BEC   F8 07 D8 0F D8 0D      DW   BLANK,TECHO,ATEXE   
0BF2   54 06 08 00 D8 0F D8 0D DW   DOLIT,BKSPP,TECHO,ATEXE   
0BFA                BACK1:       
0BFA   80 06                  DW   EXIT   
0BFC                             ;   TAP         ( bot eot cur c -- bot eot cur )
0BFC                             ;               Accept and echo the key stroke and bump the cursor.
0BFC                          ;*Macro unroll: mCOLON  3,'TAP',TAP
0BFC                          ;*Macro unroll:  mCODE 3, "TAP", TAP
0BFC                          ALIGN   2   
0BFC                TAP:         
0BFC                VVCODE:   .SET   $   
0BFC                VVLEN:    .SET   (3 & 01FH) / CELLL   
154C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
154C                VVNAME:   .SET   $   
154C   FC 0B 58 15            DW   vvCODE,vvLINK   
1550                VVLINK:   .SET   $   
1550   03 54 41 50            DB   3,"TAP"   
0BFC                          .ORG   vvCODE   
0BFC   00                     NOP      
0BFD   CD 42 06               CALL   doLIST   
0C00   18 0F D8 0F D8 0D      DW   DUPP,TECHO,ATEXE   
0C06   34 0F 18 0D 54 06 01 00 76 01 80 06 DW   OVER,CSTOR,DOLIT,1,PLUS,EXIT   
0C12                             ;   kTAP        ( bot eot cur c -- bot eot cur )
0C12                             ;               Process a key stroke, CR or backspace.
0C12                          ;*Macro unroll: mCOLON  4,'kTAP',KTAP
0C12                          ;*Macro unroll:  mCODE 4, "kTAP", KTAP
0C12                          ALIGN   2   
0C12                KTAP:        
0C12                VVCODE:   .SET   $   
0C12                VVLEN:    .SET   (4 & 01FH) / CELLL   
1542                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1542                VVNAME:   .SET   $   
1542   12 0C 50 15            DW   vvCODE,vvLINK   
1546                VVLINK:   .SET   $   
1546   04 6B 54 41 50         DB   4,"kTAP"   
0C12                          .ORG   vvCODE   
0C12   00                     NOP      
0C13   CD 42 06               CALL   doLIST   
0C16   18 0F 54 06 0D 00 68 01 DW   DUPP,DOLIT,CRR,XORR   
0C1E   CC 0C 36 0C            DW   QBRAN,KTAP2   
0C22   54 06 08 00 68 01      DW   DOLIT,BKSPP,XORR   
0C28   CC 0C 32 0C            DW   QBRAN,KTAP1   
0C2C   F8 07 FC 0B 80 06      DW   BLANK,TAP,EXIT   
0C32                KTAP1:       
0C32   CA 0B 80 06            DW   BKSP,EXIT   
0C36                KTAP2:       
0C36   20 0F 28 0F 20 0F 18 0F 80 06 DW   DROP,SWAP,DROP,DUPP,EXIT   
0C40                             ;   accept      ( b u -- b u )
0C40                             ;               Accept characters to input buffer. Return with actual count.
0C40                          ;*Macro unroll: mCOLON  6,'accept',ACCEP
0C40                          ;*Macro unroll:  mCODE 6, "accept", ACCEP
0C40                          ALIGN   2   
0C40                ACCEP:       
0C40                VVCODE:   .SET   $   
0C40                VVLEN:    .SET   (6 & 01FH) / CELLL   
1536                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1536                VVNAME:   .SET   $   
1536   40 0C 46 15            DW   vvCODE,vvLINK   
153A                VVLINK:   .SET   $   
153A   06 61 63 63 65 70 74   DB   6,"accept"   
0C40                          .ORG   vvCODE   
0C40   00                     NOP      
0C41   CD 42 06               CALL   doLIST   
0C44   34 0F 76 01 34 0F      DW   OVER,PLUS,OVER   
0C4A                ACCP1:       
0C4A   66 0F 68 01            DW   DDUP,XORR   
0C4E   CC 0C 70 0C            DW   QBRAN,ACCP4   
0C52   AC 0A 18 0F            DW   KEY,DUPP   
0C56   F8 07 54 06 7F 00 6C 02 DW   BLANK,DOLIT,127,WITHI   
0C5E   CC 0C 68 0C            DW   QBRAN,ACCP2   
0C62   FC 0B                  DW   TAP   
0C64   DC 0C 6C 0C            DW   BRAN,ACCP3   
0C68                ACCP2:       
0C68   D0 0F D8 0D            DW   TTAP,ATEXE   
0C6C                ACCP3:       
0C6C   DC 0C 4A 0C            DW   BRAN,ACCP1   
0C70                ACCP4:       
0C70   20 0F 34 0F CE 01 80 06 DW   DROP,OVER,SUBB,EXIT   
0C78                             ;   EXPECT      ( b u -- )
0C78                             ;               Accept input stream and store count in SPAN.
0C78                          ;*Macro unroll: mCOLON  6,'EXPECT',EXPEC
0C78                          ;*Macro unroll:  mCODE 6, "EXPECT", EXPEC
0C78                          ALIGN   2   
0C78                EXPEC:       
0C78                VVCODE:   .SET   $   
0C78                VVLEN:    .SET   (6 & 01FH) / CELLL   
152A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
152A                VVNAME:   .SET   $   
152A   78 0C 3A 15            DW   vvCODE,vvLINK   
152E                VVLINK:   .SET   $   
152E   06 45 58 50 45 43 54   DB   6,"EXPECT"   
0C78                          .ORG   vvCODE   
0C78   00                     NOP      
0C79   CD 42 06               CALL   doLIST   
0C7C   C8 0F D8 0D F8 0F FE 0C 20 0F 80 06 DW   TEXPE,ATEXE,SPAN,STORE,DROP,EXIT   
0C88                             ;   QUERY       ( -- )
0C88                             ;               Accept input stream to terminal input buffer.
0C88                          ;*Macro unroll: mCOLON  5,'QUERY',QUERY
0C88                          ;*Macro unroll:  mCODE 5, "QUERY", QUERY
0C88                          ALIGN   2   
0C88                QUERY:       
0C88                VVCODE:   .SET   $   
0C88                VVLEN:    .SET   (5 & 01FH) / CELLL   
1520                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1520                VVNAME:   .SET   $   
1520   88 0C 2E 15            DW   vvCODE,vvLINK   
1524                VVLINK:   .SET   $   
1524   05 51 55 45 52 59      DB   5,"QUERY"   
0C88                          .ORG   vvCODE   
0C88   00                     NOP      
0C89   CD 42 06               CALL   doLIST   
0C8C   CC 0D 54 06 50 00 C8 0F D8 0D 08 10 FE 0C DW   TIB,DOLIT,80,TEXPE,ATEXE,NTIB,STORE   
0C9A   20 0F 54 06 00 00 00 10 FE 0C 80 06 DW   DROP,DOLIT,0,INN,STORE,EXIT   
0CA6                          ;*Macro unroll: mCOLON	4,'COLD',COLD
0CA6                          ;*Macro unroll:  mCODE 4, "COLD", COLD
0CA6                          ALIGN   2   
0CA6                COLD:        
0CA6                VVCODE:   .SET   $   
0CA6                VVLEN:    .SET   (4 & 01FH) / CELLL   
1516                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1516                VVNAME:   .SET   $   
1516   A6 0C 24 15            DW   vvCODE,vvLINK   
151A                VVLINK:   .SET   $   
151A   04 43 4F 4C 44         DB   4,"COLD"   
0CA6                          .ORG   vvCODE   
0CA6   00                     NOP      
0CA7   CD 42 06               CALL   doLIST   
0CAA   6E 0A                  DW   STOIO   
0CAC                             ; DW	DOLIT, 65, EMIT
0CAC   54 06 B6 0C A2 0D 0A 0B DW   DOLIT,HELLO,COUNT,TYPEE   
0CB4   C6 0C                  DW   QUIT   
0CB6   0F 48 65 6C 6C 6F 20 46 6F 72 74 68 21 20 0D 0A HELLO:   .PSTR   "Hello Forth! \r\n"   
0CC6                          ;*Macro unroll: mCODE  4, 'QUIT', QUIT
0CC6                          ALIGN   2   
0CC6                QUIT:        
0CC6                VVCODE:   .SET   $   
0CC6                VVLEN:    .SET   (4 & 01FH) / CELLL   
150C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
150C                VVNAME:   .SET   $   
150C   C6 0C 1A 15            DW   vvCODE,vvLINK   
1510                VVLINK:   .SET   $   
1510   04 51 55 49 54         DB   4,"QUIT"   
0CC6                          .ORG   vvCODE   
0CC6   76                     HALT      
0CC7                             ;   EXECUTE	( i*x xt -- j*x )		\ CORE
0CC7                             ;		Perform the semantics indentified by execution token, xt.
0CC7                          ;*Macro unroll: mCODE	7,'EXECUTE', EXECU
0CC7                          ALIGN   2   
0CC8                EXECU:       
0CC8                VVCODE:   .SET   $   
0CC8                VVLEN:    .SET   (7 & 01FH) / CELLL   
1500                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1500                VVNAME:   .SET   $   
1500   C8 0C 10 15            DW   vvCODE,vvLINK   
1504                VVLINK:   .SET   $   
1504   07 45 58 45 43 55 54 45 DB   7,"EXECUTE"   
0CC8                          .ORG   vvCODE   
0CC8   60                     LD   H,B   
0CC9   69                     LD   L,C   
0CCA   C1                     POP   BC   
0CCB   E9                     JP   (HL)   
0CCC                             ; 
0CCC                             ;   0BRAN	( flag -- )
0CCC                             ;		BRAN if flag is zero.
0CCC                          ;*Macro unroll: mCODE	COMPO+7,'?branch', QBRAN
0CCC                          ALIGN   2   
0CCC                QBRAN:       
0CCC                VVCODE:   .SET   $   
0CCC                VVLEN:    .SET   (COMPO+7 & 01FH) / CELLL   
14D4                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
14D4                VVNAME:   .SET   $   
14D4   CC 0C 04 15            DW   vvCODE,vvLINK   
14D8                VVLINK:   .SET   $   
14D8   27 3F 62 72 61 6E 63 68 DB   COMPO+7,"?branch"   
0CCC                          .ORG   vvCODE   
0CCC   78                     LD   A,B   ; 4t
0CCD   B1                     OR   C   ; 4t
0CCE   C1                     POP   BC   ;10t
0CCF   CA DC 0C               JP   Z,BRAN   ;10/7t a fast dec is ok, only
0CD2   13                     INC   DE   ; 6t yes,continue past the BRAN offset
0CD3   13                     INC   DE   ; 6t
0CD4                          ;*Macro unroll: 	mNEXT
0CD4   EB                     EX   DE,HL   
0CD5                          ;*Macro unroll:  mNEXTHL                         ; 34t
0CD5   5E                     LD   E,(HL)   ; 34t
0CD6   23                     INC   HL   
0CD7   56                     LD   D,(HL)   
0CD8   23                     INC   HL   
0CD9   EB                     EX   DE,HL   
0CDA   E9                     JP   (HL)   
0CDB                             ;   BRAN	( -- )
0CDB                             ;		BRAN to an inline address.
0CDB                          ;*Macro unroll: mCODE	COMPO+6,'branch', BRAN
0CDB                          ALIGN   2   
0CDC                BRAN:        
0CDC                VVCODE:   .SET   $   
0CDC                VVLEN:    .SET   (COMPO+6 & 01FH) / CELLL   
14A8                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
14A8                VVNAME:   .SET   $   
14A8   DC 0C D8 14            DW   vvCODE,vvLINK   
14AC                VVLINK:   .SET   $   
14AC   26 62 72 61 6E 63 68   DB   COMPO+6,"branch"   
0CDC                          .ORG   vvCODE   
0CDC   1A                     LD   A,(DE)   ; 7t go back to the loop
0CDD   6F                     LD   L,A   ; 4t
0CDE   13                     INC   DE   ; 6t
0CDF   1A                     LD   A,(DE)   ; 7t
0CE0   67                     LD   H,A   ; 4t
0CE1                          ;*Macro unroll: 	mNEXTHL
0CE1   5E                     LD   E,(HL)   
0CE2   23                     INC   HL   
0CE3   56                     LD   D,(HL)   
0CE4   23                     INC   HL   
0CE5   EB                     EX   DE,HL   
0CE6   E9                     JP   (HL)   
0CE7                             ; 
0CE7                             ;   TYPECSTR    ( cstr -- )
0CE7                             ;   Similar to TYPE but prints C null terminated strings
0CE7                          ;*Macro unroll: mCODE	3,'TYPESZ',TypeCStr
0CE7                          ALIGN   2   
0CE8                TYPECSTR:      
0CE8                VVCODE:   .SET   $   
0CE8                VVLEN:    .SET   (3 & 01FH) / CELLL   
14A0                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
14A0                VVNAME:   .SET   $   
14A0   E8 0C AC 14            DW   vvCODE,vvLINK   
14A4                VVLINK:   .SET   $   
14A4   03 54 59 50 45 53 5A   DB   3,"TYPESZ"   
0CE8                          .ORG   vvCODE   
0CE8   60                     LD   H,B   
0CE9   69                     LD   L,C   
0CEA   CD EF 00               CALL   PRINTSZ   
0CED   C1                     POP   BC   
0CEE                          ;*Macro unroll:  mNEXT
0CEE   EB                     EX   DE,HL   
0CEF                          ;*Macro unroll:  mNEXTHL                         ; 34t
0CEF   5E                     LD   E,(HL)   ; 34t
0CF0   23                     INC   HL   
0CF1   56                     LD   D,(HL)   
0CF2   23                     INC   HL   
0CF3   EB                     EX   DE,HL   
0CF4   E9                     JP   (HL)   
0CF5                             ;   THROW    ( cstr -- )
0CF5                             ;   Prints string message and returns TODO: restart Forth interpreter QUIT
0CF5                          ;*Macro unroll: mCOLON	5,'THROWX',THROWX
0CF5                          ;*Macro unroll:  mCODE 5, "THROWX", THROWX
0CF5                          ALIGN   2   
0CF6                THROWX:      
0CF6                VVCODE:   .SET   $   
0CF6                VVLEN:    .SET   (5 & 01FH) / CELLL   
1496                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1496                VVNAME:   .SET   $   
1496   F6 0C A4 14            DW   vvCODE,vvLINK   
149A                VVLINK:   .SET   $   
149A   05 54 48 52 4F 57 58   DB   5,"THROWX"   
0CF6                          .ORG   vvCODE   
0CF6   00                     NOP      
0CF7   CD 42 06               CALL   doLIST   
0CFA   E8 0C 80 06            DW   TypeCStr,EXIT   
0CFE                             ;   !           ( w a -- )
0CFE                             ;               Pop the data stack to memory.
0CFE                          ;*Macro unroll: mCODE	1,'!',Store
0CFE                          ALIGN   2   
0CFE                STORE:       
0CFE                VVCODE:   .SET   $   
0CFE                VVLEN:    .SET   (1 & 01FH) / CELLL   
1490                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1490                VVNAME:   .SET   $   
1490   FE 0C 9A 14            DW   vvCODE,vvLINK   
1494                VVLINK:   .SET   $   
1494   01 21                  DB   1,"!"   
0CFE                          .ORG   vvCODE   
0CFE   60                     LD   H,B   
0CFF   69                     LD   L,C   
0D00   C1                     POP   BC   
0D01   71                     LD   (HL),C   
0D02   23                     INC   HL   
0D03   70                     LD   (HL),B   
0D04   C1                     POP   BC   
0D05                          ;*Macro unroll: 	mNEXT
0D05   EB                     EX   DE,HL   
0D06                          ;*Macro unroll:  mNEXTHL                         ; 34t
0D06   5E                     LD   E,(HL)   ; 34t
0D07   23                     INC   HL   
0D08   56                     LD   D,(HL)   
0D09   23                     INC   HL   
0D0A   EB                     EX   DE,HL   
0D0B   E9                     JP   (HL)   
0D0C                             ;   @           ( a -- w )
0D0C                             ;               Push memory location to the data stack.
0D0C                          ;*Macro unroll: mCODE	1,'@', AT
0D0C                          ALIGN   2   
0D0C                AT:          
0D0C                VVCODE:   .SET   $   
0D0C                VVLEN:    .SET   (1 & 01FH) / CELLL   
148A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
148A                VVNAME:   .SET   $   
148A   0C 0D 94 14            DW   vvCODE,vvLINK   
148E                VVLINK:   .SET   $   
148E   01 40                  DB   1,"@"   
0D0C                          .ORG   vvCODE   
0D0C   60                     LD   H,B   
0D0D   69                     LD   L,C   
0D0E   4E                     LD   C,(HL)   
0D0F   23                     INC   HL   
0D10   46                     LD   B,(HL)   
0D11                          ;*Macro unroll: 	mNEXT
0D11   EB                     EX   DE,HL   
0D12                          ;*Macro unroll:  mNEXTHL                         ; 34t
0D12   5E                     LD   E,(HL)   ; 34t
0D13   23                     INC   HL   
0D14   56                     LD   D,(HL)   
0D15   23                     INC   HL   
0D16   EB                     EX   DE,HL   
0D17   E9                     JP   (HL)   
0D18                             ;   C!          ( c b -- )
0D18                             ;               Pop the data stack to byte memory.
0D18                          ;*Macro unroll: mCODE	2,'C!',CSTOR
0D18                          ALIGN   2   
0D18                CSTOR:       
0D18                VVCODE:   .SET   $   
0D18                VVLEN:    .SET   (2 & 01FH) / CELLL   
1482                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1482                VVNAME:   .SET   $   
1482   18 0D 8E 14            DW   vvCODE,vvLINK   
1486                VVLINK:   .SET   $   
1486   02 43 21               DB   2,"C!"   
0D18                          .ORG   vvCODE   
0D18   60                     LD   H,B   
0D19   69                     LD   L,C   
0D1A   C1                     POP   BC   
0D1B   71                     LD   (HL),C   
0D1C   C1                     POP   BC   
0D1D                          ;*Macro unroll: 	mNEXT
0D1D   EB                     EX   DE,HL   
0D1E                          ;*Macro unroll:  mNEXTHL                         ; 34t
0D1E   5E                     LD   E,(HL)   ; 34t
0D1F   23                     INC   HL   
0D20   56                     LD   D,(HL)   
0D21   23                     INC   HL   
0D22   EB                     EX   DE,HL   
0D23   E9                     JP   (HL)   
0D24                             ;   C@          ( b -- c )
0D24                             ;               Push byte memory location to the data stack.
0D24                          ;*Macro unroll: mCODE	2,'C@',CAT
0D24                          ALIGN   2   
0D24                CAT:         
0D24                VVCODE:   .SET   $   
0D24                VVLEN:    .SET   (2 & 01FH) / CELLL   
147A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
147A                VVNAME:   .SET   $   
147A   24 0D 86 14            DW   vvCODE,vvLINK   
147E                VVLINK:   .SET   $   
147E   02 43 40               DB   2,"C@"   
0D24                          .ORG   vvCODE   
0D24   0A                     LD   A,(BC)   
0D25   4F                     LD   C,A   
0D26   06 00                  LD   B,0   
0D28                          ;*Macro unroll: 	mNEXT
0D28   EB                     EX   DE,HL   
0D29                          ;*Macro unroll:  mNEXTHL                         ; 34t
0D29   5E                     LD   E,(HL)   ; 34t
0D2A   23                     INC   HL   
0D2B   56                     LD   D,(HL)   
0D2C   23                     INC   HL   
0D2D   EB                     EX   DE,HL   
0D2E   E9                     JP   (HL)   
0D2F                             ;   R@          ( -- w )
0D2F                             ;               Copy top of return stack to the data stack.
0D2F                          ;*Macro unroll: mCODE	COMPO+2,'R@',RAT
0D2F                          ALIGN   2   
0D30                RAT:         
0D30                VVCODE:   .SET   $   
0D30                VVLEN:    .SET   (COMPO+2 & 01FH) / CELLL   
1452                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1452                VVNAME:   .SET   $   
1452   30 0D 7E 14            DW   vvCODE,vvLINK   
1456                VVLINK:   .SET   $   
1456   22 52 40               DB   COMPO+2,"R@"   
0D30                          .ORG   vvCODE   
0D30   C5                     PUSH   BC   
0D31   DD 4E 00               LD   C,(IX+0)   
0D34   DD 46 01               LD   B,(IX+1)   
0D37                          ;*Macro unroll: 	mNEXT
0D37   EB                     EX   DE,HL   
0D38                          ;*Macro unroll:  mNEXTHL                         ; 34t
0D38   5E                     LD   E,(HL)   ; 34t
0D39   23                     INC   HL   
0D3A   56                     LD   D,(HL)   
0D3B   23                     INC   HL   
0D3C   EB                     EX   DE,HL   
0D3D   E9                     JP   (HL)   
0D3E                             ;   RP@         ( -- a )
0D3E                             ;               Push the current RP to the data stack
0D3E                          ;*Macro unroll: mCODE	COMPO+3, 'rp@', RPAT
0D3E                          ALIGN   2   
0D3E                RPAT:        
0D3E                VVCODE:   .SET   $   
0D3E                VVLEN:    .SET   (COMPO+3 & 01FH) / CELLL   
142A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
142A                VVNAME:   .SET   $   
142A   3E 0D 56 14            DW   vvCODE,vvLINK   
142E                VVLINK:   .SET   $   
142E   23 72 70 40            DB   COMPO+3,"rp@"   
0D3E                          .ORG   vvCODE   
0D3E   C5                     DB   0C5h   ; PUSH	BC	;11t
0D3F   DD E5                  DB   0DDh,0E5h   ; PUSH IX	;15t
0D41   C1                     DB   0C1h   ; POP	BC	;10t
0D42                          ;*Macro unroll:  mNEXT
0D42   EB                     EX   DE,HL   
0D43                          ;*Macro unroll:  mNEXTHL                         ; 34t
0D43   5E                     LD   E,(HL)   ; 34t
0D44   23                     INC   HL   
0D45   56                     LD   D,(HL)   
0D46   23                     INC   HL   
0D47   EB                     EX   DE,HL   
0D48   E9                     JP   (HL)   
0D49                             ;   RP!         ( a -- )
0D49                             ;               Set the return stack pointer.
0D49                          ;*Macro unroll: mCODE	COMPO+3,'rp!',RPSTO
0D49                          ALIGN   2   
0D4A                RPSTO:       
0D4A                VVCODE:   .SET   $   
0D4A                VVLEN:    .SET   (COMPO+3 & 01FH) / CELLL   
1402                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1402                VVNAME:   .SET   $   
1402   4A 0D 2E 14            DW   vvCODE,vvLINK   
1406                VVLINK:   .SET   $   
1406   23 72 70 21            DB   COMPO+3,"rp!"   
0D4A                          .ORG   vvCODE   
0D4A   C5                     DB   0C5h   ; PUSH	BC	;11t
0D4B   DD E1                  DB   0DDh,0E1h   ; POP IX	;14t
0D4D   C1                     DB   0C1h   ; POP	BC	;10t
0D4E                          ;*Macro unroll: 	mNEXT
0D4E   EB                     EX   DE,HL   
0D4F                          ;*Macro unroll:  mNEXTHL                         ; 34t
0D4F   5E                     LD   E,(HL)   ; 34t
0D50   23                     INC   HL   
0D51   56                     LD   D,(HL)   
0D52   23                     INC   HL   
0D53   EB                     EX   DE,HL   
0D54   E9                     JP   (HL)   
0D55                             ;   SP@         ( -- a )
0D55                             ;               Push the current data stack pointer.
0D55                          ;*Macro unroll: mCODE	3, 'sp@', SPAT
0D55                          ALIGN   2   
0D56                SPAT:        
0D56                VVCODE:   .SET   $   
0D56                VVLEN:    .SET   (3 & 01FH) / CELLL   
13FA                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
13FA                VVNAME:   .SET   $   
13FA   56 0D 06 14            DW   vvCODE,vvLINK   
13FE                VVLINK:   .SET   $   
13FE   03 73 70 40            DB   3,"sp@"   
0D56                          .ORG   vvCODE   
0D56   C5                     DB   0C5h   ; PUSH	BC	;11t
0D57   21                     DB   021h   ; LD	HL,0	;10t
0D58   00 00                  DW   0   
0D5A   39                     DB   039h   ; ADD	HL,SP	;11t
0D5B   44                     DB   044h   ; LD	B,H	; 4t
0D5C   4D                     DB   04Dh   ; LD	C,L	; 4t
0D5D                          ;*Macro unroll: 	mNEXT
0D5D   EB                     EX   DE,HL   
0D5E                          ;*Macro unroll:  mNEXTHL                         ; 34t
0D5E   5E                     LD   E,(HL)   ; 34t
0D5F   23                     INC   HL   
0D60   56                     LD   D,(HL)   
0D61   23                     INC   HL   
0D62   EB                     EX   DE,HL   
0D63   E9                     JP   (HL)   
0D64                             ;   SP!         ( a -- )
0D64                             ;               Set the data stack pointer.
0D64                          ;*Macro unroll: mCODE	3,'sp!',SPSTO
0D64                          ALIGN   2   
0D64                SPSTO:       
0D64                VVCODE:   .SET   $   
0D64                VVLEN:    .SET   (3 & 01FH) / CELLL   
13F2                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
13F2                VVNAME:   .SET   $   
13F2   64 0D FE 13            DW   vvCODE,vvLINK   
13F6                VVLINK:   .SET   $   
13F6   03 73 70 21            DB   3,"sp!"   
0D64                          .ORG   vvCODE   
0D64   60                     DB   060h   ; LD	H,B	; 4t
0D65   69                     DB   069h   ; LD	L,C	; 4t
0D66   F9                     DB   0F9h   ; LD	SP,HL	; 6t
0D67   C1                     DB   0C1h   ; POP	BC	;10t
0D68                          ;*Macro unroll: 	mNEXT
0D68   EB                     EX   DE,HL   
0D69                          ;*Macro unroll:  mNEXTHL                         ; 34t
0D69   5E                     LD   E,(HL)   ; 34t
0D6A   23                     INC   HL   
0D6B   56                     LD   D,(HL)   
0D6C   23                     INC   HL   
0D6D   EB                     EX   DE,HL   
0D6E   E9                     JP   (HL)   
0D6F                             ;   +!          ( n a -- )
0D6F                             ;               Add n to the contents at address a.
0D6F                          ;*Macro unroll: mCOLON  2,'+!',PSTOR
0D6F                          ;*Macro unroll:  mCODE 2, "+!", PSTOR
0D6F                          ALIGN   2   
0D70                PSTOR:       
0D70                VVCODE:   .SET   $   
0D70                VVLEN:    .SET   (2 & 01FH) / CELLL   
13EA                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
13EA                VVNAME:   .SET   $   
13EA   70 0D F6 13            DW   vvCODE,vvLINK   
13EE                VVLINK:   .SET   $   
13EE   02 2B 21               DB   2,"+!"   
0D70                          .ORG   vvCODE   
0D70   00                     NOP      
0D71   CD 42 06               CALL   doLIST   
0D74   28 0F 34 0F 0C 0D 76 01 DW   SWAP,OVER,AT,PLUS   
0D7C   28 0F FE 0C 80 06      DW   SWAP,STORE,EXIT   
0D82                             ;   2!          ( d a -- )
0D82                             ;               Store the double integer to address a.
0D82                          ;*Macro unroll: mCOLON  2,'2!',DSTOR
0D82                          ;*Macro unroll:  mCODE 2, "2!", DSTOR
0D82                          ALIGN   2   
0D82                DSTOR:       
0D82                VVCODE:   .SET   $   
0D82                VVLEN:    .SET   (2 & 01FH) / CELLL   
13E2                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
13E2                VVNAME:   .SET   $   
13E2   82 0D EE 13            DW   vvCODE,vvLINK   
13E6                VVLINK:   .SET   $   
13E6   02 32 21               DB   2,"2!"   
0D82                          .ORG   vvCODE   
0D82   00                     NOP      
0D83   CD 42 06               CALL   doLIST   
0D86   28 0F 34 0F FE 0C      DW   SWAP,OVER,STORE   
0D8C   F8 03 FE 0C 80 06      DW   CELLP,STORE,EXIT   
0D92                             ;   2@          ( a -- d )
0D92                             ;               Fetch double integer from address a.
0D92                          ;*Macro unroll: mCOLON  2,'2@',DAT
0D92                          ;*Macro unroll:  mCODE 2, "2@", DAT
0D92                          ALIGN   2   
0D92                DAT:         
0D92                VVCODE:   .SET   $   
0D92                VVLEN:    .SET   (2 & 01FH) / CELLL   
13DA                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
13DA                VVNAME:   .SET   $   
13DA   92 0D E6 13            DW   vvCODE,vvLINK   
13DE                VVLINK:   .SET   $   
13DE   02 32 40               DB   2,"2@"   
0D92                          .ORG   vvCODE   
0D92   00                     NOP      
0D93   CD 42 06               CALL   doLIST   
0D96   18 0F F8 03 0C 0D      DW   DUPP,CELLP,AT   
0D9C   28 0F 0C 0D 80 06      DW   SWAP,AT,EXIT   
0DA2                             ;   COUNT       ( b -- b +n )
0DA2                             ;               Return count byte of a string and add 1 to byte address.
0DA2                          ;*Macro unroll: mCOLON  5,'COUNT',COUNT
0DA2                          ;*Macro unroll:  mCODE 5, "COUNT", COUNT
0DA2                          ALIGN   2   
0DA2                COUNT:       
0DA2                VVCODE:   .SET   $   
0DA2                VVLEN:    .SET   (5 & 01FH) / CELLL   
13D0                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
13D0                VVNAME:   .SET   $   
13D0   A2 0D DE 13            DW   vvCODE,vvLINK   
13D4                VVLINK:   .SET   $   
13D4   05 43 4F 55 4E 54      DB   5,"COUNT"   
0DA2                          .ORG   vvCODE   
0DA2   00                     NOP      
0DA3   CD 42 06               CALL   doLIST   
0DA6   18 0F 54 06 01 00 76 01 DW   DUPP,DOLIT,1,PLUS   
0DAE   28 0F 24 0D 80 06      DW   SWAP,CAT,EXIT   
0DB4                             ;   HERE        ( -- a )
0DB4                             ;               Return the top of the code dictionary.
0DB4                          ;*Macro unroll: mCOLON  4,'HERE',HERE
0DB4                          ;*Macro unroll:  mCODE 4, "HERE", HERE
0DB4                          ALIGN   2   
0DB4                HERE:        
0DB4                VVCODE:   .SET   $   
0DB4                VVLEN:    .SET   (4 & 01FH) / CELLL   
13C6                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
13C6                VVNAME:   .SET   $   
13C6   B4 0D D4 13            DW   vvCODE,vvLINK   
13CA                VVLINK:   .SET   $   
13CA   04 48 45 52 45         DB   4,"HERE"   
0DB4                          .ORG   vvCODE   
0DB4   00                     NOP      
0DB5   CD 42 06               CALL   doLIST   
0DB8   48 10 0C 0D 80 06      DW   CP,AT,EXIT   
0DBE                             ;   PAD         ( -- a )
0DBE                             ;               Return the address of a temporary buffer.
0DBE                          ;*Macro unroll: mCOLON  3,'PAD',PAD
0DBE                          ;*Macro unroll:  mCODE 3, "PAD", PAD
0DBE                          ALIGN   2   
0DBE                PAD:         
0DBE                VVCODE:   .SET   $   
0DBE                VVLEN:    .SET   (3 & 01FH) / CELLL   
13BE                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
13BE                VVNAME:   .SET   $   
13BE   BE 0D CA 13            DW   vvCODE,vvLINK   
13C2                VVLINK:   .SET   $   
13C2   03 50 41 44            DB   3,"PAD"   
0DBE                          .ORG   vvCODE   
0DBE   00                     NOP      
0DBF   CD 42 06               CALL   doLIST   
0DC2   B4 0D 54 06 50 00 76 01 80 06 DW   HERE,DOLIT,80,PLUS,EXIT   
0DCC                             ;   TIB         ( -- a )
0DCC                             ;               Return the address of the terminal input buffer.
0DCC                          ;*Macro unroll: mCOLON  3,'TIB',TIB
0DCC                          ;*Macro unroll:  mCODE 3, "TIB", TIB
0DCC                          ALIGN   2   
0DCC                TIB:         
0DCC                VVCODE:   .SET   $   
0DCC                VVLEN:    .SET   (3 & 01FH) / CELLL   
13B6                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
13B6                VVNAME:   .SET   $   
13B6   CC 0D C2 13            DW   vvCODE,vvLINK   
13BA                VVLINK:   .SET   $   
13BA   03 54 49 42            DB   3,"TIB"   
0DCC                          .ORG   vvCODE   
0DCC   00                     NOP      
0DCD   CD 42 06               CALL   doLIST   
0DD0   08 10 F8 03 0C 0D 80 06 DW   NTIB,CELLP,AT,EXIT   
0DD8                             ;   @EXECUTE    ( a -- )
0DD8                             ;               Execute vector stored in address a.
0DD8                          ;*Macro unroll: mCOLON  8,'@EXECUTE',ATEXE
0DD8                          ;*Macro unroll:  mCODE 8, "@EXECUTE", ATEXE
0DD8                          ALIGN   2   
0DD8                ATEXE:       
0DD8                VVCODE:   .SET   $   
0DD8                VVLEN:    .SET   (8 & 01FH) / CELLL   
13A8                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
13A8                VVNAME:   .SET   $   
13A8   D8 0D BA 13            DW   vvCODE,vvLINK   
13AC                VVLINK:   .SET   $   
13AC   08 40 45 58 45 43 55 54 45 DB   8,"@EXECUTE"   
0DD8                          .ORG   vvCODE   
0DD8   00                     NOP      
0DD9   CD 42 06               CALL   doLIST   
0DDC   0C 0D 40 0F            DW   AT,QDUP   ;?address or zero
0DE0   CC 0C E6 0D            DW   QBRAN,EXE1   
0DE4   C8 0C                  DW   EXECU   ;execute if non-zero
0DE6                EXE1:        
0DE6   80 06                  DW   EXIT   ;do nothing if zero
0DE8                             ;   CMOVE       ( b1 b2 u -- )
0DE8                             ;               Copy u bytes from b1 to b2.
0DE8                          ;*Macro unroll: mCOLON  5,'CMOVE',CMOVE
0DE8                          ;*Macro unroll:  mCODE 5, "CMOVE", CMOVE
0DE8                          ALIGN   2   
0DE8                CMOVE:       
0DE8                VVCODE:   .SET   $   
0DE8                VVLEN:    .SET   (5 & 01FH) / CELLL   
139E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
139E                VVNAME:   .SET   $   
139E   E8 0D AC 13            DW   vvCODE,vvLINK   
13A2                VVLINK:   .SET   $   
13A2   05 43 4D 4F 56 45      DB   5,"CMOVE"   
0DE8                          .ORG   vvCODE   
0DE8   00                     NOP      
0DE9   CD 42 06               CALL   doLIST   
0DEC   F4 0E                  DW   TOR   
0DEE   DC 0C 0A 0E            DW   BRAN,CMOV2   
0DF2                CMOV1:       
0DF2   F4 0E 18 0F 24 0D      DW   TOR,DUPP,CAT   
0DF8   30 0D 18 0D            DW   RAT,CSTOR   
0DFC   54 06 01 00 76 01      DW   DOLIT,1,PLUS   
0E02   06 0F 54 06 01 00 76 01 DW   RFROM,DOLIT,1,PLUS   
0E0A                CMOV2:       
0E0A   0A 07 F2 0D            DW   DONXT,CMOV1   
0E0E   5C 0F 80 06            DW   DDROP,EXIT   
0E12                             ;   FILL        ( b u c -- )
0E12                             ;               Fill u bytes of character c to area beginning at b.
0E12                          ;*Macro unroll: mCOLON  4,'FILL',FILL
0E12                          ;*Macro unroll:  mCODE 4, "FILL", FILL
0E12                          ALIGN   2   
0E12                FILL:        
0E12                VVCODE:   .SET   $   
0E12                VVLEN:    .SET   (4 & 01FH) / CELLL   
1394                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1394                VVNAME:   .SET   $   
1394   12 0E A2 13            DW   vvCODE,vvLINK   
1398                VVLINK:   .SET   $   
1398   04 46 49 4C 4C         DB   4,"FILL"   
0E12                          .ORG   vvCODE   
0E12   00                     NOP      
0E13   CD 42 06               CALL   doLIST   
0E16   28 0F F4 0E 28 0F      DW   SWAP,TOR,SWAP   
0E1C   DC 0C 2A 0E            DW   BRAN,FILL2   
0E20                FILL1:       
0E20   66 0F 18 0D 54 06 01 00 76 01 DW   DDUP,CSTOR,DOLIT,1,PLUS   
0E2A                FILL2:       
0E2A   0A 07 20 0E            DW   DONXT,FILL1   
0E2E   5C 0F 80 06            DW   DDROP,EXIT   
0E32                             ;   -TRAILING   ( b u -- b u )
0E32                             ;               Adjust the count to eliminate trailing white space.
0E32                          ;*Macro unroll: mCOLON  9,'-TRAILING',DTRAI
0E32                          ;*Macro unroll:  mCODE 9, "-TRAILING", DTRAI
0E32                          ALIGN   2   
0E32                DTRAI:       
0E32                VVCODE:   .SET   $   
0E32                VVLEN:    .SET   (9 & 01FH) / CELLL   
1386                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1386                VVNAME:   .SET   $   
1386   32 0E 98 13            DW   vvCODE,vvLINK   
138A                VVLINK:   .SET   $   
138A   09 2D 54 52 41 49 4C 49 4E 47 DB   9,"-TRAILING"   
0E32                          .ORG   vvCODE   
0E32   00                     NOP      
0E33   CD 42 06               CALL   doLIST   
0E36   F4 0E                  DW   TOR   
0E38   DC 0C 56 0E            DW   BRAN,DTRA2   
0E3C                DTRA1:       
0E3C   F8 07 34 0F 30 0D 76 01 24 0D 24 02 DW   BLANK,OVER,RAT,PLUS,CAT,LESS   
0E48   CC 0C 56 0E            DW   QBRAN,DTRA2   
0E4C   06 0F 54 06 01 00 76 01 80 06 DW   RFROM,DOLIT,1,PLUS,EXIT   ;adjusted count
0E56                DTRA2:       
0E56   0A 07 3C 0E            DW   DONXT,DTRA1   
0E5A   54 06 00 00 80 06      DW   DOLIT,0,EXIT   ;count=0
0E60                             ;   PACK$       ( b u a -- a )
0E60                             ;               Build a counted string with u characters from b. Null fill.
0E60                          ;*Macro unroll: mCOLON  5,'PACK$',PACKS
0E60                          ;*Macro unroll:  mCODE 5, "PACK$", PACKS
0E60                          ALIGN   2   
0E60                PACKS:       
0E60                VVCODE:   .SET   $   
0E60                VVLEN:    .SET   (5 & 01FH) / CELLL   
137C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
137C                VVNAME:   .SET   $   
137C   60 0E 8A 13            DW   vvCODE,vvLINK   
1380                VVLINK:   .SET   $   
1380   05 50 41 43 4B 24      DB   5,"PACK$"   
0E60                          .ORG   vvCODE   
0E60   00                     NOP      
0E61   CD 42 06               CALL   doLIST   
0E64   9A 0E 18 0F F4 0E      DW   ALGND,DUPP,TOR   ;strings only on cell boundary
0E6A   34 0F 18 0F 54 06 00 00 DW   OVER,DUPP,DOLIT,0   
0E72   54 06 02 00 8E 02 20 0F DW   DOLIT,CELLL,UMMOD,DROP   ;count mod cell
0E7A   CE 01 34 0F 76 01      DW   SUBB,OVER,PLUS   
0E80   54 06 00 00 28 0F FE 0C DW   DOLIT,0,SWAP,STORE   ;null fill cell
0E88   66 0F 18 0D 54 06 01 00 76 01 DW   DDUP,CSTOR,DOLIT,1,PLUS   ;save count
0E92   28 0F E8 0D 06 0F 80 06 DW   SWAP,CMOVE,RFROM,EXIT   ;move string
0E9A                             ;   ALIGNED     ( b -- a )
0E9A                             ;               Align address to the cell boundary.
0E9A                          ;*Macro unroll: mCOLON  7,'ALIGNED', ALGND
0E9A                          ;*Macro unroll:  mCODE 7, "ALIGNED", ALGND
0E9A                          ALIGN   2   
0E9A                ALGND:       
0E9A                VVCODE:   .SET   $   
0E9A                VVLEN:    .SET   (7 & 01FH) / CELLL   
1370                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1370                VVNAME:   .SET   $   
1370   9A 0E 80 13            DW   vvCODE,vvLINK   
1374                VVLINK:   .SET   $   
1374   07 41 4C 49 47 4E 45 44 DB   7,"ALIGNED"   
0E9A                          .ORG   vvCODE   
0E9A   00                     NOP      
0E9B   CD 42 06               CALL   doLIST   
0E9E   18 0F 54 06 00 00 54 06 02 00 DW   DUPP,DOLIT,0,DOLIT,CELLL   
0EA8   8E 02 20 0F 18 0F      DW   UMMOD,DROP,DUPP   
0EAE   CC 0C BA 0E            DW   QBRAN,ALGN1   
0EB2   54 06 02 00 28 0F CE 01 DW   DoLIT,CELLL,SWAP,SUBB   
0EBA                ALGN1:       
0EBA   76 01 80 06            DW   PLUS,EXIT   
0EBE   54 79 70 65 20 73 6F 6D 65 74 68 69 6E 67 0D 0A 00 GREETING:   .CSTR   "Type something\r\n"   
0ECF                             ; ERR_ABORT:	    .cstr	"ABORT" ;-01
0ECF                             ; ERR_ABORTDQ:    .cstr	"ABORT"";-02
0ECF                             ; ERR_STACKOF:    .cstr	"stack overflow";-03
0ECF                             ; ERR_STACKUF:	.cstr	"stack underflow"       ;-04
0ECF                             ; ERR_RETOF:    	.cstr	"return stack overflow" ;-05
0ECF                             ; ERR_RETUF:     	.cstr	"return stack underflow";-06
0ECF                             ; ERR_DONEST:   	.cstr	"do-loops nested too deeply during execution"   ;-07
0ECF                             ; ERR_DICTOF     	.cstr	"dictionary overflow"   ;-08
0ECF                             ; ERR_MEMADDR   	.cstr	"invalid memory address";-09
0ECF   64 69 76 69 73 69 6F 6E 20 62 79 20 7A 65 72 6F 00 ERR_DIVZERO:   .CSTR   "division by zero"   ;-10
0EE0   72 65 73 75 6C 74 20 6F 75 74 20 6F 66 20 72 61 6E 67 65 00 ERR_OUTOFRANGE:   .CSTR   "result out of range"   ;-11
0EF4                             ; ERR_MISMATCH    .cstr	"argument type mismatch";-12
0EF4                             ; ERR_UNDEFINED 	.cstr	"undefined word";-13
0EF4                             ; ERR_COMPONLY	.cstr	"interpreting a compile-only word"      ;-14
0EF4                             ; ERR_FORGET  	.cstr	"invalid FORGET";-15
0EF4                             ; ERR_ZEROSTR   	.cstr	"attempt to use zero-length string as a name"   ;-16
0EF4                             ; ERR_FORMAT  	.cstr	"pictured numeric output string overflow"       ;-17
0EF4                             ; ERR_PARSE     	.cstr	"parsed string overflow";-18
0EF4                             ; ERR_TOOLONG    	.cstr	"definition name too long"      ;-19
0EF4                             ; ERR_READONLY	.cstr	"write to a read-only location" ;-20
0EF4                             ; ERR_UNSUPPORTED .cstr	"unsupported operation" ;-21
0EF4                             ; ERR_UNSTRUCT	.cstr	"control structure mismatch"    ;-22
0EF4                             ; ERR_ADDRALIGN 	.cstr	"address alignment exception"   ;-23
0EF4                             ; ERR_NUMERIC     .cstr	"invalid numeric argument"      ;-24
0EF4                             ; ERR_IMBALANCE   .cstr	"return stack imbalance";-25
0EF4                             ; ERR_LOOPPARAM   .cstr	"loop parameters unavailable"   ;-26
0EF4                             ; ERR_RECURSION   .cstr	"invalid recursion"     ;-27
0EF4                             ; ERR_INTERRUPT   .cstr	"user interrupt";-28
0EF4                             ; ERR_NESTING    	.cstr	"compiler nesting"      ;-29
0EF4                             ; ERR_OBSOLETE    .cstr	"obsolescent feature"   ;-30
0EF4                             ; ERR_NONCREATE   .cstr	">BODY used on non-CREATEd definition"  ;-31
0EF4                             ; ERR_NAME    	.cstr	"invalid name argument (e.g., TO xxx)"  ;-32
0EF4                             ; ERR_BLOCKREAD   .cstr	"block read exception"  ;-33
0EF4                             ; ERR_BLOCKWRITE  .cstr	"block write exception" ;-34
0EF4                             ; ERR_BLOCKNUM    .cstr	"invalid block number"  ;-35
0EF4                             ; ERR_FILEPOS    	.cstr	"invalid file position" ;-36
0EF4                             ; ERR_FILEIO    	.cstr	"file I/O exception"    ;-37
0EF4                             ; ERR_FILEEXIST   .cstr	"non-existent file"     ;-38
0EF4                             ; ERR_FILEEOF    	.cstr	"unexpected end of file";-39
0EF4                             ; ERR_BASE    	.cstr	"invalid BASE for floating point conversion"    ;-40
0EF4                             ; ERR_PRECISION   .cstr	"loss of precision"     ;-41
0EF4                             ; ERR_FDIVZERO    .cstr	"floating-point divide by zero" ;-42
0EF4                             ; ERR_FRANGE    	.cstr	"floating-point result out of range"    ;-43
0EF4                             ; ERR_FSOF    	.cstr	"floating-point stack overflow" ;-44
0EF4                             ; ERR_FSUF    	.cstr	"floating-point stack underflow";-45
0EF4                             ; ERR_FINVALID    .cstr	"floating-point invalid argument"       ;-46
0EF4                             ; ERR_WORDLIST    .cstr	"compilation word list deleted" ;-47
0EF4                             ; ERR_POSTPONE    .cstr	"invalid POSTPONE"      ;-48
0EF4                             ; ERR_SEARCHOF    .cstr	"search-order overflow" ;-49
0EF4                             ; ERR_SEARCHUF    .cstr	"search-order underflow";-50
0EF4                             ; ERR_WORDLISTCHG .cstr	"compilation word list changed" ;-51
0EF4                             ; ERR_CONTROLOF   .cstr	"control-flow stack overflow"   ;-52
0EF4                             ; ERR_CONTROLUF   .cstr	"exception stack overflow"      ;-53
0EF4                             ; ERR_FPUF    	.cstr	"floating-point underflow"      ;-54
0EF4                             ; ERR_FPFAULT    	.cstr	"floating-point unidentified fault"     ;-55
0EF4                             ; ERR_QUIT    	.cstr	"QUIT"  ;-56
0EF4                             ; ERR_IO    	    .cstr	"exception in sending or receiving a character" ;-57
0EF4                             ; ERR_IF    	    .cstr	"[IF], [ELSE], or [THEN] exception"     ;-58
0EF4                             ;   >R          ( w -- )
0EF4                             ;               Push the data stack to the return stack.
0EF4                          ;*Macro unroll: mCODE	COMPO+2, '>R', ToR
0EF4                          ALIGN   2   
0EF4                TOR:         
0EF4                VVCODE:   .SET   $   
0EF4                VVLEN:    .SET   (COMPO+2 & 01FH) / CELLL   
1348                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1348                VVNAME:   .SET   $   
1348   F4 0E 74 13            DW   vvCODE,vvLINK   
134C                VVLINK:   .SET   $   
134C   22 3E 52               DB   COMPO+2,">R"   
0EF4                          .ORG   vvCODE   
0EF4   DD 2B                  DEC   IX   
0EF6   DD 70 00               LD   (IX+0),B   
0EF9   DD 2B                  DEC   IX   
0EFB   DD 71 00               LD   (IX+0),C   
0EFE   C1                     POP   BC   
0EFF                          ;*Macro unroll: 	mNEXT
0EFF   EB                     EX   DE,HL   
0F00                          ;*Macro unroll:  mNEXTHL                         ; 34t
0F00   5E                     LD   E,(HL)   ; 34t
0F01   23                     INC   HL   
0F02   56                     LD   D,(HL)   
0F03   23                     INC   HL   
0F04   EB                     EX   DE,HL   
0F05   E9                     JP   (HL)   
0F06                             ;   R>          ( -- w )
0F06                             ;               Pop the return stack to the data stack.
0F06                          ;*Macro unroll: mCODE	COMPO+2, 'R>', RFrom
0F06                          ALIGN   2   
0F06                RFROM:       
0F06                VVCODE:   .SET   $   
0F06                VVLEN:    .SET   (COMPO+2 & 01FH) / CELLL   
1320                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1320                VVNAME:   .SET   $   
1320   06 0F 4C 13            DW   vvCODE,vvLINK   
1324                VVLINK:   .SET   $   
1324   22 52 3E               DB   COMPO+2,"R>"   
0F06                          .ORG   vvCODE   
0F06   C5                     PUSH   BC   
0F07   DD 4E 00               LD   C,(IX+0)   
0F0A   DD 23                  INC   IX   
0F0C   DD 46 00               LD   B,(IX+0)   
0F0F   DD 23                  INC   IX   
0F11                          ;*Macro unroll: 	mNEXT
0F11   EB                     EX   DE,HL   
0F12                          ;*Macro unroll:  mNEXTHL                         ; 34t
0F12   5E                     LD   E,(HL)   ; 34t
0F13   23                     INC   HL   
0F14   56                     LD   D,(HL)   
0F15   23                     INC   HL   
0F16   EB                     EX   DE,HL   
0F17   E9                     JP   (HL)   
0F18                             ;   DUP         ( w -- w w )
0F18                             ;               Duplicate the top stack item.
0F18                          ;*Macro unroll: mCODE	3, 'DUP', DUPP
0F18                          ALIGN   2   
0F18                DUPP:        
0F18                VVCODE:   .SET   $   
0F18                VVLEN:    .SET   (3 & 01FH) / CELLL   
1318                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1318                VVNAME:   .SET   $   
1318   18 0F 24 13            DW   vvCODE,vvLINK   
131C                VVLINK:   .SET   $   
131C   03 44 55 50            DB   3,"DUP"   
0F18                          .ORG   vvCODE   
0F18   C5                     PUSH   BC   
0F19                          ;*Macro unroll:  mNEXT
0F19   EB                     EX   DE,HL   
0F1A                          ;*Macro unroll:  mNEXTHL                         ; 34t
0F1A   5E                     LD   E,(HL)   ; 34t
0F1B   23                     INC   HL   
0F1C   56                     LD   D,(HL)   
0F1D   23                     INC   HL   
0F1E   EB                     EX   DE,HL   
0F1F   E9                     JP   (HL)   
0F20                             ;   DROP	( x -- )			\ CORE
0F20                             ;		Discard top stack item.
0F20                          ;*Macro unroll: mCODE	4, 'DROP', DROP
0F20                          ALIGN   2   
0F20                DROP:        
0F20                VVCODE:   .SET   $   
0F20                VVLEN:    .SET   (4 & 01FH) / CELLL   
130E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
130E                VVNAME:   .SET   $   
130E   20 0F 1C 13            DW   vvCODE,vvLINK   
1312                VVLINK:   .SET   $   
1312   04 44 52 4F 50         DB   4,"DROP"   
0F20                          .ORG   vvCODE   
0F20   C1                     POP   BC   
0F21                          ;*Macro unroll:  mNEXT
0F21   EB                     EX   DE,HL   
0F22                          ;*Macro unroll:  mNEXTHL                         ; 34t
0F22   5E                     LD   E,(HL)   ; 34t
0F23   23                     INC   HL   
0F24   56                     LD   D,(HL)   
0F25   23                     INC   HL   
0F26   EB                     EX   DE,HL   
0F27   E9                     JP   (HL)   
0F28                             ;   SWAP        ( w1 w2 -- w2 w1 )
0F28                             ;               Exchange top two stack items.
0F28                          ;*Macro unroll: mCODE	4, 'SWAP', SWAP
0F28                          ALIGN   2   
0F28                SWAP:        
0F28                VVCODE:   .SET   $   
0F28                VVLEN:    .SET   (4 & 01FH) / CELLL   
1304                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1304                VVNAME:   .SET   $   
1304   28 0F 12 13            DW   vvCODE,vvLINK   
1308                VVLINK:   .SET   $   
1308   04 53 57 41 50         DB   4,"SWAP"   
0F28                          .ORG   vvCODE   
0F28   E1                     POP   HL   
0F29   C5                     PUSH   BC   
0F2A   44                     LD   B,H   
0F2B   4D                     LD   C,L   
0F2C                          ;*Macro unroll: 	mNEXT
0F2C   EB                     EX   DE,HL   
0F2D                          ;*Macro unroll:  mNEXTHL                         ; 34t
0F2D   5E                     LD   E,(HL)   ; 34t
0F2E   23                     INC   HL   
0F2F   56                     LD   D,(HL)   
0F30   23                     INC   HL   
0F31   EB                     EX   DE,HL   
0F32   E9                     JP   (HL)   
0F33                             ;   OVER        ( w1 w2 -- w1 w2 w1 )
0F33                             ;               Copy second stack item to top.
0F33                          ;*Macro unroll: mCODE	4, 'OVER', OVER
0F33                          ALIGN   2   
0F34                OVER:        
0F34                VVCODE:   .SET   $   
0F34                VVLEN:    .SET   (4 & 01FH) / CELLL   
12FA                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
12FA                VVNAME:   .SET   $   
12FA   34 0F 08 13            DW   vvCODE,vvLINK   
12FE                VVLINK:   .SET   $   
12FE   04 4F 56 45 52         DB   4,"OVER"   
0F34                          .ORG   vvCODE   
0F34   E1                     POP   HL   
0F35   E5                     PUSH   HL   
0F36   C5                     PUSH   BC   
0F37   44                     LD   B,H   
0F38   4D                     LD   C,L   
0F39                          ;*Macro unroll: 	mNEXT
0F39   EB                     EX   DE,HL   
0F3A                          ;*Macro unroll:  mNEXTHL                         ; 34t
0F3A   5E                     LD   E,(HL)   ; 34t
0F3B   23                     INC   HL   
0F3C   56                     LD   D,(HL)   
0F3D   23                     INC   HL   
0F3E   EB                     EX   DE,HL   
0F3F   E9                     JP   (HL)   
0F40                             ;   ?DUP        ( w -- w w | 0 )
0F40                             ;               Dup tos if its is not zero.
0F40                          ;*Macro unroll: mCOLON	4,'?DUP', QDUP
0F40                          ;*Macro unroll:  mCODE 4, "?DUP", QDUP
0F40                          ALIGN   2   
0F40                QDUP:        
0F40                VVCODE:   .SET   $   
0F40                VVLEN:    .SET   (4 & 01FH) / CELLL   
12F0                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
12F0                VVNAME:   .SET   $   
12F0   40 0F FE 12            DW   vvCODE,vvLINK   
12F4                VVLINK:   .SET   $   
12F4   04 3F 44 55 50         DB   4,"?DUP"   
0F40                          .ORG   vvCODE   
0F40   00                     NOP      
0F41   CD 42 06               CALL   doLIST   
0F44   18 0F CC 0C 4C 0F      DW   DUPP,QBRAN,QDUP1   
0F4A   18 0F                  DW   DUPP   
0F4C                QDUP1:       
0F4C   80 06                  DW   EXIT   
0F4E                             ;   ROT         ( w1 w2 w3 -- w2 w3 w1 )
0F4E                             ;               Rot 3rd item to top.
0F4E                          ;*Macro unroll: mCOLON	3,'ROT', ROT
0F4E                          ;*Macro unroll:  mCODE 3, "ROT", ROT
0F4E                          ALIGN   2   
0F4E                ROT:         
0F4E                VVCODE:   .SET   $   
0F4E                VVLEN:    .SET   (3 & 01FH) / CELLL   
12E8                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
12E8                VVNAME:   .SET   $   
12E8   4E 0F F4 12            DW   vvCODE,vvLINK   
12EC                VVLINK:   .SET   $   
12EC   03 52 4F 54            DB   3,"ROT"   
0F4E                          .ORG   vvCODE   
0F4E   00                     NOP      
0F4F   CD 42 06               CALL   doLIST   
0F52   F4 0E 28 0F 06 0F 28 0F 80 06 DW   ToR,SWAP,RFrom,SWAP,EXIT   
0F5C                             ;   2DROP       ( w w -- )
0F5C                             ;               Discard two items on stack.
0F5C                          ;*Macro unroll: mCOLON	5,'2DROP',DDROP
0F5C                          ;*Macro unroll:  mCODE 5, "2DROP", DDROP
0F5C                          ALIGN   2   
0F5C                DDROP:       
0F5C                VVCODE:   .SET   $   
0F5C                VVLEN:    .SET   (5 & 01FH) / CELLL   
12DE                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
12DE                VVNAME:   .SET   $   
12DE   5C 0F EC 12            DW   vvCODE,vvLINK   
12E2                VVLINK:   .SET   $   
12E2   05 32 44 52 4F 50      DB   5,"2DROP"   
0F5C                          .ORG   vvCODE   
0F5C   00                     NOP      
0F5D   CD 42 06               CALL   doLIST   
0F60   20 0F 20 0F 80 06      DW   DROP,DROP,EXIT   
0F66                             ;   2DUP        ( w1 w2 -- w1 w2 w1 w2 )
0F66                             ;               Duplicate top two items.
0F66                          ;*Macro unroll: mCOLON	4,'2DUP',DDUP
0F66                          ;*Macro unroll:  mCODE 4, "2DUP", DDUP
0F66                          ALIGN   2   
0F66                DDUP:        
0F66                VVCODE:   .SET   $   
0F66                VVLEN:    .SET   (4 & 01FH) / CELLL   
12D4                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
12D4                VVNAME:   .SET   $   
12D4   66 0F E2 12            DW   vvCODE,vvLINK   
12D8                VVLINK:   .SET   $   
12D8   04 32 44 55 50         DB   4,"2DUP"   
0F66                          .ORG   vvCODE   
0F66   00                     NOP      
0F67   CD 42 06               CALL   doLIST   
0F6A   34 0F 34 0F 80 06      DW   OVER,OVER,EXIT   
0F70                             ;   2SWAP        ( w1 w2 w3 w4 -- w3 w4 w1 w2 )
0F70                             ;               Exchange top two items.
0F70                          ;*Macro unroll: mCOLON	5,'2SWAP',TwoSWAP
0F70                          ;*Macro unroll:  mCODE 5, "2SWAP", TwoSWAP
0F70                          ALIGN   2   
0F70                TWOSWAP:      
0F70                VVCODE:   .SET   $   
0F70                VVLEN:    .SET   (5 & 01FH) / CELLL   
12CA                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
12CA                VVNAME:   .SET   $   
12CA   70 0F D8 12            DW   vvCODE,vvLINK   
12CE                VVLINK:   .SET   $   
12CE   05 32 53 57 41 50      DB   5,"2SWAP"   
0F70                          .ORG   vvCODE   
0F70   00                     NOP      
0F71   CD 42 06               CALL   doLIST   
0F74   4E 0F F4 0E 4E 0F 06 0F 80 06 DW   ROT,ToR,ROT,RFrom,EXIT   
0F7E                             ;   PICK        ( ... +n -- ... w )
0F7E                             ;               Copy the nth stack item to tos.
0F7E                          ;*Macro unroll: mCOLON  4,'PICK',PICK
0F7E                          ;*Macro unroll:  mCODE 4, "PICK", PICK
0F7E                          ALIGN   2   
0F7E                PICK:        
0F7E                VVCODE:   .SET   $   
0F7E                VVLEN:    .SET   (4 & 01FH) / CELLL   
12C0                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
12C0                VVNAME:   .SET   $   
12C0   7E 0F CE 12            DW   vvCODE,vvLINK   
12C4                VVLINK:   .SET   $   
12C4   04 50 49 43 4B         DB   4,"PICK"   
0F7E                          .ORG   vvCODE   
0F7E   00                     NOP      
0F7F   CD 42 06               CALL   doLIST   
0F82   54 06 01 00 76 01 10 04 DW   DOLIT,1,PLUS,CELLS   
0F8A   56 0D 76 01 0C 0D 80 06 DW   SPAT,PLUS,AT,EXIT   
0F92                             ;   DEPTH       ( -- n )
0F92                             ;               Return the depth of the data stack.
0F92                          ;*Macro unroll: mCOLON	5,'DEPTH',DEPTH
0F92                          ;*Macro unroll:  mCODE 5, "DEPTH", DEPTH
0F92                          ALIGN   2   
0F92                DEPTH:       
0F92                VVCODE:   .SET   $   
0F92                VVLEN:    .SET   (5 & 01FH) / CELLL   
12B6                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
12B6                VVNAME:   .SET   $   
12B6   92 0F C4 12            DW   vvCODE,vvLINK   
12BA                VVLINK:   .SET   $   
12BA   05 44 45 50 54 48      DB   5,"DEPTH"   
0F92                          .ORG   vvCODE   
0F92   00                     NOP      
0F93   CD 42 06               CALL   doLIST   
0F96   56 0D A8 0F 0C 0D 28 0F CE 01 DW   SPAT,SZero,AT,SWAP,SUBB   
0FA0   54 06 02 00 8E 03 80 06 DW   DoLIT,CELLL,Slash,EXIT   
0FA8                             ;   SP0         ( -- a )
0FA8                             ;               Pointer to bottom of the data stack.
0FA8                          ;*Macro unroll: mUSER   3,'SP0',SZERO
0FA8                          ;*Macro unroll: 	mCODE 3, "SP0", SZERO
0FA8                          ALIGN   2   
0FA8                SZERO:       
0FA8                VVCODE:   .SET   $   
0FA8                VVLEN:    .SET   (3 & 01FH) / CELLL   
12AE                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
12AE                VVNAME:   .SET   $   
12AE   A8 0F BA 12            DW   vvCODE,vvLINK   
12B2                VVLINK:   .SET   $   
12B2   03 53 50 30            DB   3,"SP0"   
0FA8                          .ORG   vvCODE   
0FA8   00                     NOP      
0FA9   CD 42 06               CALL   doLIST   
0FAC   70 06 00 00            DW   DoUSE,vvUSER   
0FB0                VVUSER:   .SET   vvUSER + CELLL   
0FB0                             ;   RP0         ( -- a )
0FB0                             ;               Pointer to bottom of the return stack.
0FB0                          ;*Macro unroll: mUSER   3,'RP0',RZERO
0FB0                          ;*Macro unroll: 	mCODE 3, "RP0", RZERO
0FB0                          ALIGN   2   
0FB0                RZERO:       
0FB0                VVCODE:   .SET   $   
0FB0                VVLEN:    .SET   (3 & 01FH) / CELLL   
12A6                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
12A6                VVNAME:   .SET   $   
12A6   B0 0F B2 12            DW   vvCODE,vvLINK   
12AA                VVLINK:   .SET   $   
12AA   03 52 50 30            DB   3,"RP0"   
0FB0                          .ORG   vvCODE   
0FB0   00                     NOP      
0FB1   CD 42 06               CALL   doLIST   
0FB4   70 06 02 00            DW   DoUSE,vvUSER   
0FB8                VVUSER:   .SET   vvUSER + CELLL   
0FB8                             ;   '?KEY       ( -- a )
0FB8                             ;               Execution vector of ?KEY.
0FB8                          ;*Macro unroll: mUSER   5,"'?KEY",TQKEY
0FB8                          ;*Macro unroll: 	mCODE 5, "'?KEY", TQKEY
0FB8                          ALIGN   2   
0FB8                TQKEY:       
0FB8                VVCODE:   .SET   $   
0FB8                VVLEN:    .SET   (5 & 01FH) / CELLL   
129C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
129C                VVNAME:   .SET   $   
129C   B8 0F AA 12            DW   vvCODE,vvLINK   
12A0                VVLINK:   .SET   $   
12A0   05 27 3F 4B 45 59      DB   5,"'?KEY"   
0FB8                          .ORG   vvCODE   
0FB8   00                     NOP      
0FB9   CD 42 06               CALL   doLIST   
0FBC   70 06 04 00            DW   DoUSE,vvUSER   
0FC0                VVUSER:   .SET   vvUSER + CELLL   
0FC0                             ;   'EMIT       ( -- a )
0FC0                             ;               Execution vector of EMIT.
0FC0                          ;*Macro unroll: mUSER   5,"'EMIT",TEMIT
0FC0                          ;*Macro unroll: 	mCODE 5, "'EMIT", TEMIT
0FC0                          ALIGN   2   
0FC0                TEMIT:       
0FC0                VVCODE:   .SET   $   
0FC0                VVLEN:    .SET   (5 & 01FH) / CELLL   
1292                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1292                VVNAME:   .SET   $   
1292   C0 0F A0 12            DW   vvCODE,vvLINK   
1296                VVLINK:   .SET   $   
1296   05 27 45 4D 49 54      DB   5,"'EMIT"   
0FC0                          .ORG   vvCODE   
0FC0   00                     NOP      
0FC1   CD 42 06               CALL   doLIST   
0FC4   70 06 06 00            DW   DoUSE,vvUSER   
0FC8                VVUSER:   .SET   vvUSER + CELLL   
0FC8                             ;   'EXPECT     ( -- a )
0FC8                             ;               Execution vector of EXPECT.
0FC8                          ;*Macro unroll: mUSER   7,"'EXPECT",TEXPE
0FC8                          ;*Macro unroll: 	mCODE 7, "'EXPECT", TEXPE
0FC8                          ALIGN   2   
0FC8                TEXPE:       
0FC8                VVCODE:   .SET   $   
0FC8                VVLEN:    .SET   (7 & 01FH) / CELLL   
1286                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1286                VVNAME:   .SET   $   
1286   C8 0F 96 12            DW   vvCODE,vvLINK   
128A                VVLINK:   .SET   $   
128A   07 27 45 58 50 45 43 54 DB   7,"'EXPECT"   
0FC8                          .ORG   vvCODE   
0FC8   00                     NOP      
0FC9   CD 42 06               CALL   doLIST   
0FCC   70 06 08 00            DW   DoUSE,vvUSER   
0FD0                VVUSER:   .SET   vvUSER + CELLL   
0FD0                             ;   'TAP        ( -- a )
0FD0                             ;               Execution vector of TAP.
0FD0                          ;*Macro unroll: mUSER   4,"'TAP",TTAP
0FD0                          ;*Macro unroll: 	mCODE 4, "'TAP", TTAP
0FD0                          ALIGN   2   
0FD0                TTAP:        
0FD0                VVCODE:   .SET   $   
0FD0                VVLEN:    .SET   (4 & 01FH) / CELLL   
127C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
127C                VVNAME:   .SET   $   
127C   D0 0F 8A 12            DW   vvCODE,vvLINK   
1280                VVLINK:   .SET   $   
1280   04 27 54 41 50         DB   4,"'TAP"   
0FD0                          .ORG   vvCODE   
0FD0   00                     NOP      
0FD1   CD 42 06               CALL   doLIST   
0FD4   70 06 0A 00            DW   DoUSE,vvUSER   
0FD8                VVUSER:   .SET   vvUSER + CELLL   
0FD8                             ;   'ECHO       ( -- a )
0FD8                             ;               Execution vector of ECHO.
0FD8                          ;*Macro unroll: mUSER   5,"'ECHO",TECHO
0FD8                          ;*Macro unroll: 	mCODE 5, "'ECHO", TECHO
0FD8                          ALIGN   2   
0FD8                TECHO:       
0FD8                VVCODE:   .SET   $   
0FD8                VVLEN:    .SET   (5 & 01FH) / CELLL   
1272                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1272                VVNAME:   .SET   $   
1272   D8 0F 80 12            DW   vvCODE,vvLINK   
1276                VVLINK:   .SET   $   
1276   05 27 45 43 48 4F      DB   5,"'ECHO"   
0FD8                          .ORG   vvCODE   
0FD8   00                     NOP      
0FD9   CD 42 06               CALL   doLIST   
0FDC   70 06 0C 00            DW   DoUSE,vvUSER   
0FE0                VVUSER:   .SET   vvUSER + CELLL   
0FE0                             ;   'PROMPT     ( -- a )
0FE0                             ;               Execution vector of PROMPT.
0FE0                          ;*Macro unroll: mUSER   7,"'PROMPT",TPROM
0FE0                          ;*Macro unroll: 	mCODE 7, "'PROMPT", TPROM
0FE0                          ALIGN   2   
0FE0                TPROM:       
0FE0                VVCODE:   .SET   $   
0FE0                VVLEN:    .SET   (7 & 01FH) / CELLL   
1266                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1266                VVNAME:   .SET   $   
1266   E0 0F 76 12            DW   vvCODE,vvLINK   
126A                VVLINK:   .SET   $   
126A   07 27 50 52 4F 4D 50 54 DB   7,"'PROMPT"   
0FE0                          .ORG   vvCODE   
0FE0   00                     NOP      
0FE1   CD 42 06               CALL   doLIST   
0FE4   70 06 0E 00            DW   DoUSE,vvUSER   
0FE8                VVUSER:   .SET   vvUSER + CELLL   
0FE8                             ;   BASE        ( -- a )
0FE8                             ;               Storage of the radix base for numeric I/O.
0FE8                          ;*Macro unroll: mUSER   4,'BASE',BASE
0FE8                          ;*Macro unroll: 	mCODE 4, "BASE", BASE
0FE8                          ALIGN   2   
0FE8                BASE:        
0FE8                VVCODE:   .SET   $   
0FE8                VVLEN:    .SET   (4 & 01FH) / CELLL   
125C                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
125C                VVNAME:   .SET   $   
125C   E8 0F 6A 12            DW   vvCODE,vvLINK   
1260                VVLINK:   .SET   $   
1260   04 42 41 53 45         DB   4,"BASE"   
0FE8                          .ORG   vvCODE   
0FE8   00                     NOP      
0FE9   CD 42 06               CALL   doLIST   
0FEC   70 06 10 00            DW   DoUSE,vvUSER   
0FF0                VVUSER:   .SET   vvUSER + CELLL   
0FF0                             ;   tmp         ( -- a )
0FF0                             ;               A temporary storage location used in parse and find.
0FF0                          ;*Macro unroll: mUSER   COMPO+3,'tmp',TEMP
0FF0                          ;*Macro unroll: 	mCODE COMPO+3, "tmp", TEMP
0FF0                          ALIGN   2   
0FF0                TEMP:        
0FF0                VVCODE:   .SET   $   
0FF0                VVLEN:    .SET   (COMPO+3 & 01FH) / CELLL   
1234                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1234                VVNAME:   .SET   $   
1234   F0 0F 60 12            DW   vvCODE,vvLINK   
1238                VVLINK:   .SET   $   
1238   23 74 6D 70            DB   COMPO+3,"tmp"   
0FF0                          .ORG   vvCODE   
0FF0   00                     NOP      
0FF1   CD 42 06               CALL   doLIST   
0FF4   70 06 12 00            DW   DoUSE,vvUSER   
0FF8                VVUSER:   .SET   vvUSER + CELLL   
0FF8                             ;   SPAN        ( -- a )
0FF8                             ;               Hold character count received by EXPECT.
0FF8                          ;*Macro unroll: mUSER   4,'SPAN',SPAN
0FF8                          ;*Macro unroll: 	mCODE 4, "SPAN", SPAN
0FF8                          ALIGN   2   
0FF8                SPAN:        
0FF8                VVCODE:   .SET   $   
0FF8                VVLEN:    .SET   (4 & 01FH) / CELLL   
122A                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
122A                VVNAME:   .SET   $   
122A   F8 0F 38 12            DW   vvCODE,vvLINK   
122E                VVLINK:   .SET   $   
122E   04 53 50 41 4E         DB   4,"SPAN"   
0FF8                          .ORG   vvCODE   
0FF8   00                     NOP      
0FF9   CD 42 06               CALL   doLIST   
0FFC   70 06 14 00            DW   DoUSE,vvUSER   
1000                VVUSER:   .SET   vvUSER + CELLL   
1000                             ;   >IN         ( -- a )
1000                             ;               Hold the character pointer while parsing input stream.
1000                          ;*Macro unroll: mUSER   3,'>IN',INN
1000                          ;*Macro unroll: 	mCODE 3, ">IN", INN
1000                          ALIGN   2   
1000                INN:         
1000                VVCODE:   .SET   $   
1000                VVLEN:    .SET   (3 & 01FH) / CELLL   
1222                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1222                VVNAME:   .SET   $   
1222   00 10 2E 12            DW   vvCODE,vvLINK   
1226                VVLINK:   .SET   $   
1226   03 3E 49 4E            DB   3,">IN"   
1000                          .ORG   vvCODE   
1000   00                     NOP      
1001   CD 42 06               CALL   doLIST   
1004   70 06 16 00            DW   DoUSE,vvUSER   
1008                VVUSER:   .SET   vvUSER + CELLL   
1008                             ;   #TIB        ( -- a )
1008                             ;               Hold the current count and address of the terminal input buffer.
1008                          ;*Macro unroll: mUSER   4,'#TIB',NTIB
1008                          ;*Macro unroll: 	mCODE 4, "#TIB", NTIB
1008                          ALIGN   2   
1008                NTIB:        
1008                VVCODE:   .SET   $   
1008                VVLEN:    .SET   (4 & 01FH) / CELLL   
1218                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1218                VVNAME:   .SET   $   
1218   08 10 26 12            DW   vvCODE,vvLINK   
121C                VVLINK:   .SET   $   
121C   04 23 54 49 42         DB   4,"#TIB"   
1008                          .ORG   vvCODE   
1008   00                     NOP      
1009   CD 42 06               CALL   doLIST   
100C   70 06 18 00            DW   DoUSE,vvUSER   
1010                VVUSER:   .SET   vvUSER + CELLL   
1010                VVUSER:   .SET   vvUSER + CELLL   
1010                             ;   CSP         ( -- a )
1010                             ;               Hold the stack pointer for error checking.
1010                          ;*Macro unroll: mUSER   3,'CSP',CSP
1010                          ;*Macro unroll: 	mCODE 3, "CSP", CSP
1010                          ALIGN   2   
1010                CSP:         
1010                VVCODE:   .SET   $   
1010                VVLEN:    .SET   (3 & 01FH) / CELLL   
1210                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1210                VVNAME:   .SET   $   
1210   10 10 1C 12            DW   vvCODE,vvLINK   
1214                VVLINK:   .SET   $   
1214   03 43 53 50            DB   3,"CSP"   
1010                          .ORG   vvCODE   
1010   00                     NOP      
1011   CD 42 06               CALL   doLIST   
1014   70 06 1C 00            DW   DoUSE,vvUSER   
1018                VVUSER:   .SET   vvUSER + CELLL   
1018                             ;   'EVAL       ( -- a )
1018                             ;               Execution vector of EVAL.
1018                          ;*Macro unroll: mUSER   5,"'EVAL",TEVAL
1018                          ;*Macro unroll: 	mCODE 5, "'EVAL", TEVAL
1018                          ALIGN   2   
1018                TEVAL:       
1018                VVCODE:   .SET   $   
1018                VVLEN:    .SET   (5 & 01FH) / CELLL   
1206                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1206                VVNAME:   .SET   $   
1206   18 10 14 12            DW   vvCODE,vvLINK   
120A                VVLINK:   .SET   $   
120A   05 27 45 56 41 4C      DB   5,"'EVAL"   
1018                          .ORG   vvCODE   
1018   00                     NOP      
1019   CD 42 06               CALL   doLIST   
101C   70 06 1E 00            DW   DoUSE,vvUSER   
1020                VVUSER:   .SET   vvUSER + CELLL   
1020                             ;   'NUMBER     ( -- a )
1020                             ;               Execution vector of NUMBER?.
1020                          ;*Macro unroll: mUSER   7,"'NUMBER",TNUMB
1020                          ;*Macro unroll: 	mCODE 7, "'NUMBER", TNUMB
1020                          ALIGN   2   
1020                TNUMB:       
1020                VVCODE:   .SET   $   
1020                VVLEN:    .SET   (7 & 01FH) / CELLL   
11FA                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
11FA                VVNAME:   .SET   $   
11FA   20 10 0A 12            DW   vvCODE,vvLINK   
11FE                VVLINK:   .SET   $   
11FE   07 27 4E 55 4D 42 45 52 DB   7,"'NUMBER"   
1020                          .ORG   vvCODE   
1020   00                     NOP      
1021   CD 42 06               CALL   doLIST   
1024   70 06 20 00            DW   DoUSE,vvUSER   
1028                VVUSER:   .SET   vvUSER + CELLL   
1028                             ;   HLD         ( -- a )
1028                             ;               Hold a pointer in building a numeric output string.
1028                          ;*Macro unroll: mUSER   3,'HLD',HLD
1028                          ;*Macro unroll: 	mCODE 3, "HLD", HLD
1028                          ALIGN   2   
1028                HLD:         
1028                VVCODE:   .SET   $   
1028                VVLEN:    .SET   (3 & 01FH) / CELLL   
11F2                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
11F2                VVNAME:   .SET   $   
11F2   28 10 FE 11            DW   vvCODE,vvLINK   
11F6                VVLINK:   .SET   $   
11F6   03 48 4C 44            DB   3,"HLD"   
1028                          .ORG   vvCODE   
1028   00                     NOP      
1029   CD 42 06               CALL   doLIST   
102C   70 06 22 00            DW   DoUSE,vvUSER   
1030                VVUSER:   .SET   vvUSER + CELLL   
1030                             ;   HANDLER     ( -- a )
1030                             ;               Hold the return stack pointer for error handling.
1030                          ;*Macro unroll: mUSER   7,'HANDLER',HANDL
1030                          ;*Macro unroll: 	mCODE 7, "HANDLER", HANDL
1030                          ALIGN   2   
1030                HANDL:       
1030                VVCODE:   .SET   $   
1030                VVLEN:    .SET   (7 & 01FH) / CELLL   
11E6                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
11E6                VVNAME:   .SET   $   
11E6   30 10 F6 11            DW   vvCODE,vvLINK   
11EA                VVLINK:   .SET   $   
11EA   07 48 41 4E 44 4C 45 52 DB   7,"HANDLER"   
1030                          .ORG   vvCODE   
1030   00                     NOP      
1031   CD 42 06               CALL   doLIST   
1034   70 06 24 00            DW   DoUSE,vvUSER   
1038                VVUSER:   .SET   vvUSER + CELLL   
1038                             ;   CONTEXT     ( -- a )
1038                             ;               A area to specify vocabulary search order.
1038                          ;*Macro unroll: mUSER   7,'CONTEXT',CNTXT
1038                          ;*Macro unroll: 	mCODE 7, "CONTEXT", CNTXT
1038                          ALIGN   2   
1038                CNTXT:       
1038                VVCODE:   .SET   $   
1038                VVLEN:    .SET   (7 & 01FH) / CELLL   
11DA                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
11DA                VVNAME:   .SET   $   
11DA   38 10 EA 11            DW   vvCODE,vvLINK   
11DE                VVLINK:   .SET   $   
11DE   07 43 4F 4E 54 45 58 54 DB   7,"CONTEXT"   
1038                          .ORG   vvCODE   
1038   00                     NOP      
1039   CD 42 06               CALL   doLIST   
103C   70 06 26 00            DW   DoUSE,vvUSER   
1040                VVUSER:   .SET   vvUSER + CELLL   
1040                VVUSER:   .SET   vvUSER + VOCSS * CELLL   ;vocabulary stack
1040                             ;   CURRENT     ( -- a )
1040                             ;               Point to the vocabulary to be extended.
1040                          ;*Macro unroll: mUSER   7,'CURRENT',CRRNT
1040                          ;*Macro unroll: 	mCODE 7, "CURRENT", CRRNT
1040                          ALIGN   2   
1040                CRRNT:       
1040                VVCODE:   .SET   $   
1040                VVLEN:    .SET   (7 & 01FH) / CELLL   
11CE                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
11CE                VVNAME:   .SET   $   
11CE   40 10 DE 11            DW   vvCODE,vvLINK   
11D2                VVLINK:   .SET   $   
11D2   07 43 55 52 52 45 4E 54 DB   7,"CURRENT"   
1040                          .ORG   vvCODE   
1040   00                     NOP      
1041   CD 42 06               CALL   doLIST   
1044   70 06 38 00            DW   DoUSE,vvUSER   
1048                VVUSER:   .SET   vvUSER + CELLL   
1048                VVUSER:   .SET   vvUSER + CELLL   ;vocabulary link pointer
1048                             ;   CP          ( -- a )
1048                             ;               Point to the top of the code dictionary.
1048                          ;*Macro unroll: mUSER   2,'CP',CP
1048                          ;*Macro unroll: 	mCODE 2, "CP", CP
1048                          ALIGN   2   
1048                CP:          
1048                VVCODE:   .SET   $   
1048                VVLEN:    .SET   (2 & 01FH) / CELLL   
11C6                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
11C6                VVNAME:   .SET   $   
11C6   48 10 D2 11            DW   vvCODE,vvLINK   
11CA                VVLINK:   .SET   $   
11CA   02 43 50               DB   2,"CP"   
1048                          .ORG   vvCODE   
1048   00                     NOP      
1049   CD 42 06               CALL   doLIST   
104C   70 06 3C 00            DW   DoUSE,vvUSER   
1050                VVUSER:   .SET   vvUSER + CELLL   
1050                             ;   NP          ( -- a )
1050                             ;               Point to the bottom of the name dictionary.
1050                          ;*Macro unroll: mUSER   2,'NP',NP
1050                          ;*Macro unroll: 	mCODE 2, "NP", NP
1050                          ALIGN   2   
1050                NP:          
1050                VVCODE:   .SET   $   
1050                VVLEN:    .SET   (2 & 01FH) / CELLL   
11BE                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
11BE                VVNAME:   .SET   $   
11BE   50 10 CA 11            DW   vvCODE,vvLINK   
11C2                VVLINK:   .SET   $   
11C2   02 4E 50               DB   2,"NP"   
1050                          .ORG   vvCODE   
1050   00                     NOP      
1051   CD 42 06               CALL   doLIST   
1054   70 06 3E 00            DW   DoUSE,vvUSER   
1058                VVUSER:   .SET   vvUSER + CELLL   
1058                             ;   LAST        ( -- a )
1058                             ;               Point to the last name in the name dictionary.
1058                          ;*Macro unroll: mUSER   4,'LAST',LAST
1058                          ;*Macro unroll: 	mCODE 4, "LAST", LAST
1058                          ALIGN   2   
1058                LAST:        
1058                VVCODE:   .SET   $   
1058                VVLEN:    .SET   (4 & 01FH) / CELLL   
11B4                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
11B4                VVNAME:   .SET   $   
11B4   58 10 C2 11            DW   vvCODE,vvLINK   
11B8                VVLINK:   .SET   $   
11B8   04 4C 41 53 54         DB   4,"LAST"   
1058                          .ORG   vvCODE   
1058   00                     NOP      
1059   CD 42 06               CALL   doLIST   
105C   70 06 40 00            DW   DoUSE,vvUSER   
1060                VVUSER:   .SET   vvUSER + CELLL   
1060                             ;   forth       ( -- a )
1060                             ;               Point to the last name in the name dictionary.
1060                          ;*Macro unroll: mUSER   5,'forth',VFRTH
1060                          ;*Macro unroll: 	mCODE 5, "forth", VFRTH
1060                          ALIGN   2   
1060                VFRTH:       
1060                VVCODE:   .SET   $   
1060                VVLEN:    .SET   (5 & 01FH) / CELLL   
11AA                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
11AA                VVNAME:   .SET   $   
11AA   60 10 B8 11            DW   vvCODE,vvLINK   
11AE                VVLINK:   .SET   $   
11AE   05 66 6F 72 74 68      DB   5,"forth"   
1060                          .ORG   vvCODE   
1060   00                     NOP      
1061   CD 42 06               CALL   doLIST   
1064   70 06 42 00            DW   DoUSE,vvUSER   
1068                VVUSER:   .SET   vvUSER + CELLL   
1068                             ;   _TYPE       ( b u -- )
1068                             ;               Display a string. Filter non-printing characters.
1068                          ;*Macro unroll: mCOLON  5,'_TYPE',UTYPE
1068                          ;*Macro unroll:  mCODE 5, "_TYPE", UTYPE
1068                          ALIGN   2   
1068                UTYPE:       
1068                VVCODE:   .SET   $   
1068                VVLEN:    .SET   (5 & 01FH) / CELLL   
11A0                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
11A0                VVNAME:   .SET   $   
11A0   68 10 AE 11            DW   vvCODE,vvLINK   
11A4                VVLINK:   .SET   $   
11A4   05 5F 54 59 50 45      DB   5,"_TYPE"   
1068                          .ORG   vvCODE   
1068   00                     NOP      
1069   CD 42 06               CALL   doLIST   
106C   F4 0E                  DW   TOR   ;start count down loop
106E   DC 0C 80 10            DW   BRAN,UTYP2   ;skip first pass
1072                UTYP1:       
1072   18 0F 24 0D 02 08 B8 0A DW   DUPP,CAT,TCHAR,EMIT   ;display only printable
107A   54 06 01 00 76 01      DW   DOLIT,1,PLUS   ;increment address
1080                UTYP2:       
1080   0A 07 72 10            DW   DONXT,UTYP1   ;loop till done
1084   20 0F 80 06            DW   DROP,EXIT   
1088                             ;   dm+         ( a u -- a )
1088                             ;               Dump u bytes from , leaving a+u on the stack.
1088                          ;*Macro unroll: mCOLON  3,'dm+',DMP
1088                          ;*Macro unroll:  mCODE 3, "dm+", DMP
1088                          ALIGN   2   
1088                DMP:         
1088                VVCODE:   .SET   $   
1088                VVLEN:    .SET   (3 & 01FH) / CELLL   
1198                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1198                VVNAME:   .SET   $   
1198   88 10 A4 11            DW   vvCODE,vvLINK   
119C                VVLINK:   .SET   $   
119C   03 64 6D 2B            DB   3,"dm+"   
1088                          .ORG   vvCODE   
1088   00                     NOP      
1089   CD 42 06               CALL   doLIST   
108C   34 0F 54 06 04 00 7A 0B DW   OVER,DOLIT,4,UDOTR   ;display address
1094   E8 0A F4 0E            DW   SPACE,TOR   ;start count down loop
1098   DC 0C AC 10            DW   BRAN,PDUM2   ;skip first pass
109C                PDUM1:       
109C   18 0F 24 0D 54 06 03 00 7A 0B DW   DUPP,CAT,DOLIT,3,UDOTR   ;display numeric data
10A6   54 06 01 00 76 01      DW   DOLIT,1,PLUS   ;increment address
10AC                PDUM2:       
10AC   0A 07 9C 10            DW   DONXT,PDUM1   ;loop till done
10B0   80 06                  DW   EXIT   
10B2                             ;   DUMP        ( a u -- )
10B2                             ;               Dump u bytes from a, in a formatted manner.
10B2                          ;*Macro unroll: mCOLON  4,'DUMP',DUMP
10B2                          ;*Macro unroll:  mCODE 4, "DUMP", DUMP
10B2                          ALIGN   2   
10B2                DUMP:        
10B2                VVCODE:   .SET   $   
10B2                VVLEN:    .SET   (4 & 01FH) / CELLL   
118E                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
118E                VVNAME:   .SET   $   
118E   B2 10 9C 11            DW   vvCODE,vvLINK   
1192                VVLINK:   .SET   $   
1192   04 44 55 4D 50         DB   4,"DUMP"   
10B2                          .ORG   vvCODE   
10B2   00                     NOP      
10B3   CD 42 06               CALL   doLIST   
10B6   E8 0F 0C 0D F4 0E DC 07 DW   BASE,AT,TOR,HEX   ;save radix, set hex
10BE   54 06 10 00 8E 03      DW   DOLIT,16,SLASH   ;change count to lines
10C4   F4 0E                  DW   TOR   ;start count down loop
10C6                DUMP1:       
10C6   28 0B 54 06 10 00 66 0F 88 10 DW   CR,DOLIT,16,DDUP,DMP   ;display numeric
10D0   4E 0F 4E 0F            DW   ROT,ROT   
10D4   E8 0A E8 0A 68 10      DW   SPACE,SPACE,UTYPE   ;display printable characters
10DA   C4 0A 96 01            DW   NUFQ,INVER   ;user control
10DE   CC 0C EA 10            DW   QBRAN,DUMP2   
10E2   0A 07 C6 10            DW   DONXT,DUMP1   ;loop till done
10E6   DC 0C EE 10            DW   BRAN,DUMP3   
10EA                DUMP2:       
10EA   06 0F 20 0F            DW   RFROM,DROP   ;cleanup loop stack, early exit
10EE                DUMP3:       
10EE   20 0F 06 0F E8 0F FE 0C DW   DROP,RFROM,BASE,STORE   ;restore radix
10F6   80 06                  DW   EXIT   
10F8                             ;   .S          ( ... -- ... )
10F8                             ;               Display the contents of the data stack.
10F8                          ;*Macro unroll: mCOLON  2,'.S',DOTS
10F8                          ;*Macro unroll:  mCODE 2, ".S", DOTS
10F8                          ALIGN   2   
10F8                DOTS:        
10F8                VVCODE:   .SET   $   
10F8                VVLEN:    .SET   (2 & 01FH) / CELLL   
1186                          .ORG   vvNAME - ((vvLEN + 3) * CELLL)   
1186                VVNAME:   .SET   $   
1186   F8 10 92 11            DW   vvCODE,vvLINK   
118A                VVLINK:   .SET   $   
118A   02 2E 53               DB   2,".S"   
10F8                          .ORG   vvCODE   
10F8   00                     NOP      
10F9   CD 42 06               CALL   doLIST   
10FC   28 0B 92 0F            DW   CR,DEPTH   ;stack depth
1100   F4 0E                  DW   TOR   ;start count down loop
1102   DC 0C 0C 11            DW   BRAN,DOTS2   ;skip first pass
1106                DOTS1:       
1106   30 0D 7E 0F A2 0B      DW   RAT,PICK,DOT   ;index stack, display contents
110C                DOTS2:       
110C   0A 07 06 11            DW   DONXT,DOTS1   ;loop till done
1110                          ;*Macro unroll:  mDSTR DOTQP,' <sp'
1110   5A 0B                  DW   DOTQP   
1112                VVLEN:    .SET   $   
1112   00 20 3C 73 70         DB   0," <sp"   
1117                VVCODE:   .SET   $   
1112                          .ORG   vvLEN   
1112   04                     DB   vvCODE - vvLEN - 1   
1117                          .ORG   vvCODE   
1117                          ALIGN   2   
1118   80 06                  DW   EXIT   
111A                             ;   !CSP        ( -- )
111A                             ;               Save stack pointer in CSP for error checking.
111A                             ;   ?CSP        ( -- )
111A                             ;               Abort if stack pointer differs from that saved in CSP.
111A                             ;   >NAME       ( ca -- na | F )
111A                             ;               Convert code address to a name address.
111A                             ;   .ID         ( na -- )
111A                             ;               Display the name at address.
111A                             ;   SEE         ( -- ; <string> )
111A                             ;               A simple decompiler.
111A                             ;   WORDS       ( -- )
111A                             ;               Display the names in the context vocabulary.
111A                             ;   COLD        ( -- )
111A                             ;               The hilevel cold start sequence.
2000                          .ORG   END_ROM   
2000                          .ORG   START_RAM   
2000                          IF   TESTMODE   
                    TESTS_START:      
                              LD   HL,DONE   
                              CALL   PRINTSZ   
                              HALT      
                    DONE:     .CSTR   "Done!\r\n"   
2000                          ENDIF      
2000                          DS   DTS   ; data stack size
2200                SPP:         ; SP0 grows down
2200                TIBB:        
2200                          DS   RTS   ; return stack size
2400                RPP:         ; RP0 grows down (into TIBB)
2400                UPP:         
2400   00 00        VARSPP:   DW   0   ; SP0
2402   00 00        VARRPP:   DW   0   ; RP0
2404   00 00        VARQKEY:   DW   0   ; '?KEY
2406   00 00        VARTEMIT:   DW   0   ; 'EMIT
2408   00 00        VARTEXPECT:   DW   0   ; 'EXPECT
240A   00 00        VARTTAP:   DW   0   ; 'TAP
240C   00 00        VARTECHO:   DW   0   ; 'ECHO
240E   00 00        VARTPROMPT:   DW   0   ; 'PROMPT
2410   00 00        VARBASE:   DW   0   ; BASE
2412   00 00        VARTMP:   DW   0   ; tmp
2414   00 00        VARSPAN:   DW   0   ; SPAN
2416   00 00        VARPIN:   DW   0   ; >IN
2418   00 00        VARNTIB:   DW   0   ; #TIB
241A   00 00        VARTIB:   DW   0   ; TIB
241C   00 00        VARCSP:   DW   0   ; CSP
241E   00 00        VARTEVAL:   DW   0   ; 'EVAL
2420   00 00        VARTNUM:   DW   0   ; 'NUMBER
2422   00 00        VARHLD:   DW   0   ; HLD
2424   00 00        VARHANDLER:   DW   0   ; HANDLER
2426   00 00        VARCONTEXT:   DW   0   ; CONTEXT pointer
2428   00 00        VARVOCABS:   DW   0   ; vocabulary stack    ???
242A   00 00        VARCURRENT:   DW   0   ; CURRENT pointer
242C   00 00        VARVOCABLP:   DW   0   ; vocabulary link pointer ???
242E   00 00        VARCP:    DW   0   ; CP  for runing phase on RAM
2430   00 00        VARNP:    DW   0   ; NP  for runing phase on RAM
2432   00 00        VARLAST:   DW   0   ; LAST
2434   00 00        VARFORTH:   DW   0   ; FORTH   \ mullti-user ???
2436   00 00        VARVOCABL:   DW   0   ; vocabulary link       ???
2438   00 00        SERINPTR:   DW   0   
243A   00 00        SERRDPTR:   DW   0   
243C   00 00        SERBUFUSED:   DW   0   
243E                SERBUF:   DS   SER_BUFSIZE   
247D                CPP:         ; grows up
FFFE                          .ORG   END_RAM - 2   
FFFE                NPP:         ; grows down
FFFE                          .END      


TESTMODE:           0000 DEFINED AT LINE 3
COMPO:              0020 DEFINED AT LINE 1 IN constants.z80
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
IMEDD:              0040 DEFINED AT LINE 2 IN constants.z80
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 135 IN core-compiler.z80
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
MASKK:              001F DEFINED AT LINE 3 IN constants.z80
CHARR:              0001 DEFINED AT LINE 5 IN constants.z80
                    > USED AT LINE 386 IN core-alu.z80
CELLL:              0002 DEFINED AT LINE 6 IN constants.z80
                    > USED AT LINE 42 IN constants.z80
                    > USED AT LINE 43 IN constants.z80
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 370 IN core-alu.z80
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 375 IN core-alu.z80
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 139 IN core-interpret.z80
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 184 IN core-memory.z80
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 196 IN core-memory.z80
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 90 IN core-stacks.z80
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 40
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 40
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 40
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 40
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 40
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 40
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 40
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 40
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 40
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 40
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 40
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 40
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 40
                    > USED AT LINE 65 IN core-user.z80
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 40
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 40
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 40
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 40
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 40
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 40
                    > USED AT LINE 96 IN core-user.z80
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 40
                    > USED AT LINE 102 IN core-user.z80
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 40
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 40
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 40
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 40
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
                    > USED AT LINE 13
                    > USED AT LINE 14
BASEE:              000A DEFINED AT LINE 7 IN constants.z80
VOCSS:              0008 DEFINED AT LINE 8 IN constants.z80
                    > USED AT LINE 96 IN core-user.z80
MAXCHAR:            00FF DEFINED AT LINE 10 IN constants.z80
MAXSIGNED:          7FFF DEFINED AT LINE 11 IN constants.z80
MAXUNSIGNED:        FFFF DEFINED AT LINE 12 IN constants.z80
MAXNEGATIVE:        8000 DEFINED AT LINE 13 IN constants.z80
BKSPP:              0008 DEFINED AT LINE 15 IN constants.z80
                    > USED AT LINE 165 IN core-io.z80
                    > USED AT LINE 167 IN core-io.z80
                    > USED AT LINE 184 IN core-io.z80
LFF:                000A DEFINED AT LINE 16 IN constants.z80
CRR:                000D DEFINED AT LINE 17 IN constants.z80
                    > USED AT LINE 102 IN core-io.z80
SPACEE:             0020 DEFINED AT LINE 18 IN constants.z80
                    > USED AT LINE 79 IN core-format.z80
                    > USED AT LINE 86 IN core-format.z80
TIC:                0027 DEFINED AT LINE 19 IN constants.z80
MINUSS:             002D DEFINED AT LINE 20 IN constants.z80
                    > USED AT LINE 46 IN core-format.z80
UNDERSC:            005F DEFINED AT LINE 21 IN constants.z80
CALLL:              CD00 DEFINED AT LINE 23 IN constants.z80
                    > USED AT LINE 121 IN core-compiler.z80
MEM_SIZE:           10000 DEFINED AT LINE 25 IN constants.z80
                    > USED AT LINE 27 IN constants.z80
                    > USED AT LINE 36 IN constants.z80
ROM_SIZE:           2000 DEFINED AT LINE 26 IN constants.z80
                    > USED AT LINE 27 IN constants.z80
                    > USED AT LINE 30 IN constants.z80
                    > USED AT LINE 32 IN constants.z80
RAM_SIZE:           E000 DEFINED AT LINE 27 IN constants.z80
                    > USED AT LINE 33 IN constants.z80
START_ROM:          0000 DEFINED AT LINE 29 IN constants.z80
                    > USED AT LINE 8
END_ROM:            2000 DEFINED AT LINE 30 IN constants.z80
                    > USED AT LINE 4 IN word.macro.z80
                    > USED AT LINE 63
START_RAM:          2000 DEFINED AT LINE 32 IN constants.z80
                    > USED AT LINE 33 IN constants.z80
                    > USED AT LINE 64
END_RAM:            10000 DEFINED AT LINE 33 IN constants.z80
                    > USED AT LINE 44 IN variables.z80
BM:                 0000 DEFINED AT LINE 35 IN constants.z80
                    > USED AT LINE 29 IN constants.z80
                    > USED AT LINE 30 IN constants.z80
                    > USED AT LINE 32 IN constants.z80
                    > USED AT LINE 36 IN constants.z80
EM:                 10000 DEFINED AT LINE 36 IN constants.z80
UAB:                C000 DEFINED AT LINE 38 IN constants.z80
UAEM:               E200 DEFINED AT LINE 39 IN constants.z80
US:                 003A DEFINED AT LINE 41 IN constants.z80
                    > USED AT LINE 21
RTS:                0200 DEFINED AT LINE 42 IN constants.z80
                    > USED AT LINE 5 IN variables.z80
DTS:                0200 DEFINED AT LINE 43 IN constants.z80
                    > USED AT LINE 2 IN variables.z80
RET_STACK_SIZE:     0100 DEFINED AT LINE 45 IN constants.z80
DATA_STACK_SIZE:    0100 DEFINED AT LINE 46 IN constants.z80
INT_ADDR:           0038 DEFINED AT LINE 48 IN constants.z80
                    > USED AT LINE 1 IN interrupt.z80
SER_BUFSIZE:        003F DEFINED AT LINE 49 IN constants.z80
                    > USED AT LINE 12 IN interrupt.z80
                    > USED AT LINE 20 IN interrupt.z80
                    > USED AT LINE 25 IN serial.z80
                    > USED AT LINE 41 IN variables.z80
SER_FULLSIZE:       0030 DEFINED AT LINE 50 IN constants.z80
                    > USED AT LINE 29 IN interrupt.z80
SER_EMPTYSIZE:      0005 DEFINED AT LINE 51 IN constants.z80
                    > USED AT LINE 34 IN serial.z80
RTS_HIGH:           00D6 DEFINED AT LINE 53 IN constants.z80
                    > USED AT LINE 31 IN interrupt.z80
RTS_LOW:            0096 DEFINED AT LINE 54 IN constants.z80
                    > USED AT LINE 11 IN serial.z80
                    > USED AT LINE 36 IN serial.z80
TRUEE:              00-1 DEFINED AT LINE 56 IN constants.z80
                    > USED AT LINE 26 IN core-io.z80
FALSEE:             0000 DEFINED AT LINE 57 IN constants.z80
                    > USED AT LINE 19 IN core-io.z80
VVCODE:             1117 DEFINED AT LINE 47
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 49
                    > USED AT LINE 50
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 49
                    > USED AT LINE 50
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 49
                    > USED AT LINE 50
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 16
                    > USED AT LINE 19
                    > USED AT LINE 49
                    > USED AT LINE 50
VVNAME:             1186 DEFINED AT LINE 15
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
VVLINK:             118A DEFINED AT LINE 17
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
                    > USED AT LINE 16
VVUSER:             106A DEFINED AT LINE 40
                    > USED AT LINE 39
                    > USED AT LINE 40
                    > USED AT LINE 39
                    > USED AT LINE 40
                    > USED AT LINE 39
                    > USED AT LINE 40
                    > USED AT LINE 39
                    > USED AT LINE 40
                    > USED AT LINE 39
                    > USED AT LINE 40
                    > USED AT LINE 39
                    > USED AT LINE 40
                    > USED AT LINE 39
                    > USED AT LINE 40
                    > USED AT LINE 39
                    > USED AT LINE 40
                    > USED AT LINE 39
                    > USED AT LINE 40
                    > USED AT LINE 39
                    > USED AT LINE 40
                    > USED AT LINE 39
                    > USED AT LINE 40
                    > USED AT LINE 39
                    > USED AT LINE 40
                    > USED AT LINE 39
                    > USED AT LINE 40
                    > USED AT LINE 65 IN core-user.z80
                    > USED AT LINE 39
                    > USED AT LINE 40
                    > USED AT LINE 39
                    > USED AT LINE 40
                    > USED AT LINE 39
                    > USED AT LINE 40
                    > USED AT LINE 39
                    > USED AT LINE 40
                    > USED AT LINE 39
                    > USED AT LINE 40
                    > USED AT LINE 39
                    > USED AT LINE 40
                    > USED AT LINE 96 IN core-user.z80
                    > USED AT LINE 39
                    > USED AT LINE 40
                    > USED AT LINE 102 IN core-user.z80
                    > USED AT LINE 39
                    > USED AT LINE 40
                    > USED AT LINE 39
                    > USED AT LINE 40
                    > USED AT LINE 39
                    > USED AT LINE 40
                    > USED AT LINE 39
                    > USED AT LINE 40
RESET:              0000 DEFINED AT LINE 10
                    > USED AT LINE 29
SERIALINT:          0038 DEFINED AT LINE 2 IN interrupt.z80
NOTFULL:            004D DEFINED AT LINE 17 IN interrupt.z80
                    > USED AT LINE 13 IN interrupt.z80
NOTWRAP:            0059 DEFINED AT LINE 23 IN interrupt.z80
                    > USED AT LINE 21 IN interrupt.z80
RTS0:               006D DEFINED AT LINE 33 IN interrupt.z80
                    > USED AT LINE 7 IN interrupt.z80
                    > USED AT LINE 15 IN interrupt.z80
                    > USED AT LINE 30 IN interrupt.z80
INIT:               0072 DEFINED AT LINE 15
                    > USED AT LINE 11
LOOP:               0096 DEFINED AT LINE 38
                    > USED AT LINE 41
INIT_IO:            009F DEFINED AT LINE 4 IN serial.z80
                    > USED AT LINE 10 IN core-io.z80
RXA:                00B3 DEFINED AT LINE 16 IN serial.z80
                    > USED AT LINE 39
                    > USED AT LINE 22 IN core-io.z80
WAITFORCHAR:        00B3 DEFINED AT LINE 17 IN serial.z80
                    > USED AT LINE 20 IN serial.z80
NOTRDWRAP:          00C7 DEFINED AT LINE 28 IN serial.z80
                    > USED AT LINE 26 IN serial.z80
RTS1:               00DA DEFINED AT LINE 38 IN serial.z80
                    > USED AT LINE 35 IN serial.z80
TXA:                00DE DEFINED AT LINE 44 IN serial.z80
                    > USED AT LINE 40
                    > USED AT LINE 63 IN serial.z80
                    > USED AT LINE 34 IN core-io.z80
CONOUT1:            00DF DEFINED AT LINE 46 IN serial.z80
                    > USED AT LINE 49 IN serial.z80
CKINCHAR:           00E9 DEFINED AT LINE 54 IN serial.z80
                    > USED AT LINE 17 IN core-io.z80
PRINTSZ:            00EF DEFINED AT LINE 59 IN serial.z80
                    > USED AT LINE 37
                    > USED AT LINE 65 IN serial.z80
                    > USED AT LINE 46 IN core-kernel.z80
DEFAULTS:           00FA DEFINED AT LINE 3 IN defaults.z80
                    > USED AT LINE 41 IN constants.z80
                    > USED AT LINE 19
DEFSP0:             00FA DEFINED AT LINE 5 IN defaults.z80
DEFRP0:             00FC DEFINED AT LINE 6 IN defaults.z80
DEFQKEY:            00FE DEFINED AT LINE 7 IN defaults.z80
DEFTEMIT:           0100 DEFINED AT LINE 8 IN defaults.z80
DEFTEXPECT:         0102 DEFINED AT LINE 9 IN defaults.z80
DEFTTAP:            0104 DEFINED AT LINE 10 IN defaults.z80
DEFTECHO:           0106 DEFINED AT LINE 11 IN defaults.z80
DEFTPROMPT:         0108 DEFINED AT LINE 12 IN defaults.z80
DEFBASE:            010A DEFINED AT LINE 13 IN defaults.z80
DEFTMP:             010C DEFINED AT LINE 14 IN defaults.z80
DEFSPAN:            010E DEFINED AT LINE 15 IN defaults.z80
DEFPIN:             0110 DEFINED AT LINE 16 IN defaults.z80
DEFNTIB:            0112 DEFINED AT LINE 17 IN defaults.z80
DEFTIB:             0114 DEFINED AT LINE 18 IN defaults.z80
DEFCSP:             0116 DEFINED AT LINE 19 IN defaults.z80
DEFTEVAL:           0118 DEFINED AT LINE 20 IN defaults.z80
DEFTNUM:            011A DEFINED AT LINE 21 IN defaults.z80
DEFHLD:             011C DEFINED AT LINE 22 IN defaults.z80
DEFHANDLER:         011E DEFINED AT LINE 23 IN defaults.z80
DEFCONTEXT:         0120 DEFINED AT LINE 24 IN defaults.z80
DEFVOCABS:          0122 DEFINED AT LINE 25 IN defaults.z80
DEFCURRENT:         0124 DEFINED AT LINE 26 IN defaults.z80
DEFVOCABLP:         0126 DEFINED AT LINE 27 IN defaults.z80
DEFCP:              0128 DEFINED AT LINE 28 IN defaults.z80
DEFNP:              012A DEFINED AT LINE 29 IN defaults.z80
DEFLAST:            012C DEFINED AT LINE 30 IN defaults.z80
DEFFORTH:           012E DEFINED AT LINE 31 IN defaults.z80
DEFVOCABL:          0130 DEFINED AT LINE 32 IN defaults.z80
DEFCOLD:            0132 DEFINED AT LINE 33 IN defaults.z80
END_DEFAULTS:       0134 DEFINED AT LINE 34 IN defaults.z80
                    > USED AT LINE 41 IN constants.z80
TWOSTAR:            0134 DEFINED AT LINE 11
                    > USED AT LINE 380 IN core-alu.z80
VVLEN:              1112 DEFINED AT LINE 45
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 48
                    > USED AT LINE 49
                    > USED AT LINE 14
                    > USED AT LINE 48
                    > USED AT LINE 49
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 48
                    > USED AT LINE 49
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 48
                    > USED AT LINE 49
ZLESS:              0140 DEFINED AT LINE 11
                    > USED AT LINE 94 IN core-alu.z80
                    > USED AT LINE 121 IN core-alu.z80
                    > USED AT LINE 123 IN core-alu.z80
                    > USED AT LINE 134 IN core-alu.z80
                    > USED AT LINE 136 IN core-alu.z80
                    > USED AT LINE 272 IN core-alu.z80
                    > USED AT LINE 275 IN core-alu.z80
                    > USED AT LINE 296 IN core-alu.z80
                    > USED AT LINE 45 IN core-format.z80
                    > USED AT LINE 58 IN core-interpret.z80
                    > USED AT LINE 69 IN core-interpret.z80
ANDD:               014C DEFINED AT LINE 11
ORR:                015A DEFINED AT LINE 11
XORR:               0168 DEFINED AT LINE 11
                    > USED AT LINE 102 IN core-alu.z80
                    > USED AT LINE 119 IN core-alu.z80
                    > USED AT LINE 133 IN core-alu.z80
                    > USED AT LINE 351 IN core-alu.z80
                    > USED AT LINE 198 IN core-io.z80
PLUS:               0176 DEFINED AT LINE 11
                    > USED AT LINE 84 IN core-alu.z80
                    > USED AT LINE 89 IN core-alu.z80
                    > USED AT LINE 196 IN core-io.z80
                    > USED AT LINE 198 IN core-memory.z80
                    > USED AT LINE 84 IN core-stacks.z80
DPLUS:              0180 DEFINED AT LINE 11
INVER:              0196 DEFINED AT LINE 11
                    > USED AT LINE 72 IN core-alu.z80
                    > USED AT LINE 82 IN core-alu.z80
                    > USED AT LINE 37 IN core-utils.z80
NEGAT:              01A2 DEFINED AT LINE 11
                    > USED AT LINE 89 IN core-alu.z80
                    > USED AT LINE 95 IN core-alu.z80
                    > USED AT LINE 273 IN core-alu.z80
                    > USED AT LINE 276 IN core-alu.z80
ONEPLUS:            01AC DEFINED AT LINE 11
                    > USED AT LINE 72 IN core-alu.z80
DNEGATE:            01B8 DEFINED AT LINE 11
                    > USED AT LINE 269 IN core-alu.z80
                    > USED AT LINE 353 IN core-alu.z80
SUBB:               01CE DEFINED AT LINE 11
                    > USED AT LINE 123 IN core-alu.z80
                    > USED AT LINE 136 IN core-alu.z80
                    > USED AT LINE 162 IN core-alu.z80
                    > USED AT LINE 163 IN core-alu.z80
                    > USED AT LINE 65 IN core-does.z80
                    > USED AT LINE 58 IN core-interpret.z80
                    > USED AT LINE 77 IN core-interpret.z80
                    > USED AT LINE 129 IN core-interpret.z80
                    > USED AT LINE 185 IN core-memory.z80
ABSS:               01D8 DEFINED AT LINE 11
                    > USED AT LINE 271 IN core-alu.z80
ABS1:               01E6 DEFINED AT LINE 96 IN core-alu.z80
EQUAL:              01E8 DEFINED AT LINE 11
ZEROEQUALS:         01F2 DEFINED AT LINE 11
                    > USED AT LINE 102 IN core-alu.z80
ULESS:              0200 DEFINED AT LINE 11
ULES1:              0214 DEFINED AT LINE 122 IN core-alu.z80
                    > USED AT LINE 120 IN core-alu.z80
NIP:                021A DEFINED AT LINE 11
                    > USED AT LINE 121 IN core-alu.z80
                    > USED AT LINE 182 IN core-alu.z80
                    > USED AT LINE 311 IN core-alu.z80
                    > USED AT LINE 365 IN core-alu.z80
LESS:               0224 DEFINED AT LINE 11
                    > USED AT LINE 141 IN core-alu.z80
                    > USED AT LINE 146 IN core-alu.z80
LESS1:              0238 DEFINED AT LINE 135 IN core-alu.z80
GREATERTHAN:        023E DEFINED AT LINE 11
                    > USED AT LINE 154 IN core-alu.z80
MAX:                0248 DEFINED AT LINE 11
MAX1:               0256 DEFINED AT LINE 148 IN core-alu.z80
MIN:                025A DEFINED AT LINE 11
MIN1:               0268 DEFINED AT LINE 156 IN core-alu.z80
WITHI:              026C DEFINED AT LINE 11
UMPLUS:             027E DEFINED AT LINE 11
                    > USED AT LINE 56 IN core-alu.z80
UMP2:               0286 DEFINED AT LINE 173 IN core-alu.z80
UMP1:               0287 DEFINED AT LINE 175 IN core-alu.z80
                    > USED AT LINE 172 IN core-alu.z80
UMMOD:              028E DEFINED AT LINE 11
                    > USED AT LINE 194 IN core-memory.z80
UMSLASHMOD2:        0298 DEFINED AT LINE 11
                    > USED AT LINE 182 IN core-alu.z80
UMMOD11:            029C DEFINED AT LINE 192 IN core-alu.z80
UMMOD12:            02A7 DEFINED AT LINE 203 IN core-alu.z80
UMMOD2:             02C5 DEFINED AT LINE 223 IN core-alu.z80
                    > USED AT LINE 191 IN core-alu.z80
UMMOD1:             02CB DEFINED AT LINE 226 IN core-alu.z80
                    > USED AT LINE 202 IN core-alu.z80
UMMOD4:             02D1 DEFINED AT LINE 229 IN core-alu.z80
                    > USED AT LINE 247 IN core-alu.z80
UMMOD13:            02D9 DEFINED AT LINE 237 IN core-alu.z80
UMMOD3:             02DF DEFINED AT LINE 244 IN core-alu.z80
                    > USED AT LINE 209 IN core-alu.z80
                    > USED AT LINE 213 IN core-alu.z80
                    > USED AT LINE 258 IN core-alu.z80
UMMOD14:            02E3 DEFINED AT LINE 248 IN core-alu.z80
UMMOD5:             02E9 DEFINED AT LINE 255 IN core-alu.z80
                    > USED AT LINE 236 IN core-alu.z80
UMMOD15:            02ED DEFINED AT LINE 259 IN core-alu.z80
FMSLASHMOD:         02EE DEFINED AT LINE 11
FMMOD1:             0308 DEFINED AT LINE 270 IN core-alu.z80
                    > USED AT LINE 268 IN core-alu.z80
FMMOD2:             031C DEFINED AT LINE 274 IN core-alu.z80
FMMOD4:             0336 DEFINED AT LINE 278 IN core-alu.z80
FMMOD6:             034C DEFINED AT LINE 282 IN core-alu.z80
FMMOD3:             034E DEFINED AT LINE 284 IN core-alu.z80
ONESUBB:            0360 DEFINED AT LINE 11
STOD:               036C DEFINED AT LINE 11
                    > USED AT LINE 301 IN core-alu.z80
SLASHMOD:           0376 DEFINED AT LINE 11
                    > USED AT LINE 306 IN core-alu.z80
                    > USED AT LINE 311 IN core-alu.z80
MODD:               0384 DEFINED AT LINE 11
SLASH:              038E DEFINED AT LINE 11
UMSTAR:             0398 DEFINED AT LINE 11
                    > USED AT LINE 346 IN core-alu.z80
                    > USED AT LINE 352 IN core-alu.z80
UMSTAR1:            03A0 DEFINED AT LINE 323 IN core-alu.z80
                    > USED AT LINE 336 IN core-alu.z80
UMSTAR2:            03A7 DEFINED AT LINE 329 IN core-alu.z80
UMSTAR5:            03AA DEFINED AT LINE 332 IN core-alu.z80
UMSTAR3:            03AB DEFINED AT LINE 334 IN core-alu.z80
                    > USED AT LINE 328 IN core-alu.z80
                    > USED AT LINE 331 IN core-alu.z80
UMSTAR4:            03AE DEFINED AT LINE 337 IN core-alu.z80
STAR:               03B8 DEFINED AT LINE 11
MSTAR:              03C2 DEFINED AT LINE 11
                    > USED AT LINE 360 IN core-alu.z80
MSTAR1:             03DE DEFINED AT LINE 354 IN core-alu.z80
STARSLASHMOD:       03E0 DEFINED AT LINE 11
                    > USED AT LINE 365 IN core-alu.z80
STARSLASH:          03EE DEFINED AT LINE 11
CELLP:              03F8 DEFINED AT LINE 11
                    > USED AT LINE 32 IN core-compiler.z80
                    > USED AT LINE 145 IN core-interpret.z80
                    > USED AT LINE 147 IN core-interpret.z80
                    > USED AT LINE 165 IN core-interpret.z80
                    > USED AT LINE 97 IN core-memory.z80
                    > USED AT LINE 102 IN core-memory.z80
                    > USED AT LINE 125 IN core-memory.z80
CELLM:              0404 DEFINED AT LINE 11
                    > USED AT LINE 72 IN core-compiler.z80
                    > USED AT LINE 74 IN core-compiler.z80
                    > USED AT LINE 120 IN core-interpret.z80
                    > USED AT LINE 120 IN core-interpret.z80
                    > USED AT LINE 150 IN core-interpret.z80
                    > USED AT LINE 152 IN core-interpret.z80
                    > USED AT LINE 152 IN core-interpret.z80
                    > USED AT LINE 155 IN core-interpret.z80
                    > USED AT LINE 163 IN core-interpret.z80
CELLS:              0410 DEFINED AT LINE 11
CHARPLUS:           0418 DEFINED AT LINE 11
COMMA:              0424 DEFINED AT LINE 11
                    > USED AT LINE 92 IN core-compiler.z80
                    > USED AT LINE 122 IN core-compiler.z80
COMPI:              0436 DEFINED AT LINE 11
                    > USED AT LINE 38 IN core-compiler.z80
                    > USED AT LINE 109 IN core-compiler.z80
                    > USED AT LINE 146 IN core-compiler.z80
                    > USED AT LINE 154 IN core-compiler.z80
                    > USED AT LINE 4 IN core-control.z80
                    > USED AT LINE 14 IN core-control.z80
                    > USED AT LINE 19 IN core-control.z80
                    > USED AT LINE 24 IN core-control.z80
                    > USED AT LINE 30 IN core-control.z80
                    > USED AT LINE 37 IN core-control.z80
LITER:              0448 DEFINED AT LINE 11
                    > USED AT LINE 96 IN core-compiler.z80
RECUR:              0454 DEFINED AT LINE 11
UNIQU:              0462 DEFINED AT LINE 11
                    > USED AT LINE 69 IN core-compiler.z80
UNIQ1:              047E DEFINED AT LINE 60 IN core-compiler.z80
                    > USED AT LINE 57 IN core-compiler.z80
SNAME:              0482 DEFINED AT LINE 11
                    > USED AT LINE 128 IN core-compiler.z80
                    > USED AT LINE 144 IN core-compiler.z80
                    > USED AT LINE 152 IN core-compiler.z80
PNAM1:              04B4 DEFINED AT LINE 76 IN core-compiler.z80
                    > USED AT LINE 68 IN core-compiler.z80
SCOMP:              04BE DEFINED AT LINE 11
                    > USED AT LINE 115 IN core-compiler.z80
SCOM1:              04DA DEFINED AT LINE 91 IN core-compiler.z80
                    > USED AT LINE 89 IN core-compiler.z80
SCOM2:              04DE DEFINED AT LINE 93 IN core-compiler.z80
                    > USED AT LINE 87 IN core-compiler.z80
SCOM3:              04EA DEFINED AT LINE 97 IN core-compiler.z80
                    > USED AT LINE 95 IN core-compiler.z80
OVERT:              04EC DEFINED AT LINE 11
SEMIS:              04FC DEFINED AT LINE 11
RBRAC:              050A DEFINED AT LINE 11
                    > USED AT LINE 129 IN core-compiler.z80
CALLC:              0518 DEFINED AT LINE 11
                    > USED AT LINE 129 IN core-compiler.z80
COLON:              0526 DEFINED AT LINE 11
IMMED:              0538 DEFINED AT LINE 11
USER:               0550 DEFINED AT LINE 11
CREAT:              0568 DEFINED AT LINE 11
                    > USED AT LINE 160 IN core-compiler.z80
VARIA:              057E DEFINED AT LINE 11
FOR:                058C DEFINED AT LINE 11
BEGIN:              0598 DEFINED AT LINE 11
NEXT:               05A0 DEFINED AT LINE 11
UNTIL:              05AC DEFINED AT LINE 11
AGAIN:              05B8 DEFINED AT LINE 11
                    > USED AT LINE 43 IN core-control.z80
IFF:                05C4 DEFINED AT LINE 11
                    > USED AT LINE 64 IN core-control.z80
AHEAD:              05D6 DEFINED AT LINE 11
                    > USED AT LINE 54 IN core-control.z80
                    > USED AT LINE 59 IN core-control.z80
REPEA:              05E8 DEFINED AT LINE 11
THENN:              05F6 DEFINED AT LINE 11
AFT:                0602 DEFINED AT LINE 11
ELSEE:              0610 DEFINED AT LINE 11
WHILE:              061C DEFINED AT LINE 11
UNLOOP:             0626 DEFINED AT LINE 11
DOCONST:            0636 DEFINED AT LINE 11
DOLIST:             0642 DEFINED AT LINE 11
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 145 IN core-compiler.z80
                    > USED AT LINE 25
                    > USED AT LINE 153 IN core-compiler.z80
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 38
                    > USED AT LINE 38
                    > USED AT LINE 38
                    > USED AT LINE 38
                    > USED AT LINE 38
                    > USED AT LINE 38
                    > USED AT LINE 38
                    > USED AT LINE 38
                    > USED AT LINE 38
                    > USED AT LINE 38
                    > USED AT LINE 38
                    > USED AT LINE 38
                    > USED AT LINE 38
                    > USED AT LINE 38
                    > USED AT LINE 38
                    > USED AT LINE 38
                    > USED AT LINE 38
                    > USED AT LINE 38
                    > USED AT LINE 38
                    > USED AT LINE 38
                    > USED AT LINE 38
                    > USED AT LINE 38
                    > USED AT LINE 38
                    > USED AT LINE 38
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
                    > USED AT LINE 25
DOLIT:              0654 DEFINED AT LINE 11
                    > USED AT LINE 67 IN core-alu.z80
                    > USED AT LINE 77 IN core-alu.z80
                    > USED AT LINE 83 IN core-alu.z80
                    > USED AT LINE 280 IN core-alu.z80
                    > USED AT LINE 281 IN core-alu.z80
                    > USED AT LINE 286 IN core-alu.z80
                    > USED AT LINE 291 IN core-alu.z80
                    > USED AT LINE 370 IN core-alu.z80
                    > USED AT LINE 375 IN core-alu.z80
                    > USED AT LINE 386 IN core-alu.z80
                    > USED AT LINE 38 IN core-compiler.z80
                    > USED AT LINE 88 IN core-compiler.z80
                    > USED AT LINE 115 IN core-compiler.z80
                    > USED AT LINE 121 IN core-compiler.z80
                    > USED AT LINE 135 IN core-compiler.z80
                    > USED AT LINE 145 IN core-compiler.z80
                    > USED AT LINE 153 IN core-compiler.z80
                    > USED AT LINE 160 IN core-compiler.z80
                    > USED AT LINE 31 IN core-control.z80
                    > USED AT LINE 64 IN core-does.z80
                    > USED AT LINE 4 IN core-format.z80
                    > USED AT LINE 5 IN core-format.z80
                    > USED AT LINE 6 IN core-format.z80
                    > USED AT LINE 11 IN core-format.z80
                    > USED AT LINE 46 IN core-format.z80
                    > USED AT LINE 69 IN core-format.z80
                    > USED AT LINE 74 IN core-format.z80
                    > USED AT LINE 79 IN core-format.z80
                    > USED AT LINE 84 IN core-format.z80
                    > USED AT LINE 85 IN core-format.z80
                    > USED AT LINE 86 IN core-format.z80
                    > USED AT LINE 88 IN core-format.z80
                    > USED AT LINE 54 IN core-interpret.z80
                    > USED AT LINE 60 IN core-interpret.z80
                    > USED AT LINE 71 IN core-interpret.z80
                    > USED AT LINE 76 IN core-interpret.z80
                    > USED AT LINE 133 IN core-interpret.z80
                    > USED AT LINE 139 IN core-interpret.z80
                    > USED AT LINE 145 IN core-interpret.z80
                    > USED AT LINE 172 IN core-interpret.z80
                    > USED AT LINE 223 IN core-interpret.z80
                    > USED AT LINE 237 IN core-interpret.z80
                    > USED AT LINE 69 IN core-io.z80
                    > USED AT LINE 79 IN core-io.z80
                    > USED AT LINE 94 IN core-io.z80
                    > USED AT LINE 102 IN core-io.z80
                    > USED AT LINE 165 IN core-io.z80
                    > USED AT LINE 167 IN core-io.z80
                    > USED AT LINE 182 IN core-io.z80
                    > USED AT LINE 184 IN core-io.z80
                    > USED AT LINE 201 IN core-io.z80
                    > USED AT LINE 222 IN core-io.z80
                    > USED AT LINE 223 IN core-io.z80
                    > USED AT LINE 5 IN core-kernel.z80
                    > USED AT LINE 108 IN core-memory.z80
                    > USED AT LINE 119 IN core-memory.z80
                    > USED AT LINE 146 IN core-memory.z80
                    > USED AT LINE 147 IN core-memory.z80
                    > USED AT LINE 173 IN core-memory.z80
                    > USED AT LINE 176 IN core-memory.z80
                    > USED AT LINE 184 IN core-memory.z80
                    > USED AT LINE 186 IN core-memory.z80
                    > USED AT LINE 193 IN core-memory.z80
                    > USED AT LINE 196 IN core-memory.z80
                    > USED AT LINE 83 IN core-stacks.z80
                    > USED AT LINE 90 IN core-stacks.z80
                    > USED AT LINE 8 IN core-utils.z80
                    > USED AT LINE 16 IN core-utils.z80
                    > USED AT LINE 21 IN core-utils.z80
                    > USED AT LINE 31 IN core-utils.z80
                    > USED AT LINE 34 IN core-utils.z80
DOVAR:              0660 DEFINED AT LINE 11
                    > USED AT LINE 154 IN core-compiler.z80
                    > USED AT LINE 41 IN core-does.z80
UP:                 0668 DEFINED AT LINE 11
DOUSE:              0670 DEFINED AT LINE 11
                    > USED AT LINE 146 IN core-compiler.z80
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
EXIT:               0680 DEFINED AT LINE 11
                    > USED AT LINE 97 IN core-alu.z80
                    > USED AT LINE 149 IN core-alu.z80
                    > USED AT LINE 157 IN core-alu.z80
                    > USED AT LINE 283 IN core-alu.z80
                    > USED AT LINE 355 IN core-alu.z80
                    > USED AT LINE 380 IN core-alu.z80
                    > USED AT LINE 61 IN core-compiler.z80
                    > USED AT LINE 75 IN core-compiler.z80
                    > USED AT LINE 90 IN core-compiler.z80
                    > USED AT LINE 92 IN core-compiler.z80
                    > USED AT LINE 96 IN core-compiler.z80
                    > USED AT LINE 109 IN core-compiler.z80
                    > USED AT LINE 122 IN core-compiler.z80
                    > USED AT LINE 9 IN core-control.z80
                    > USED AT LINE 36 IN core-does.z80
                    > USED AT LINE 40 IN core-format.z80
                    > USED AT LINE 48 IN core-format.z80
                    > USED AT LINE 90 IN core-format.z80
                    > USED AT LINE 110 IN core-interpret.z80
                    > USED AT LINE 225 IN core-interpret.z80
                    > USED AT LINE 229 IN core-interpret.z80
                    > USED AT LINE 49 IN core-io.z80
                    > USED AT LINE 64 IN core-io.z80
                    > USED AT LINE 85 IN core-io.z80
                    > USED AT LINE 97 IN core-io.z80
                    > USED AT LINE 114 IN core-io.z80
                    > USED AT LINE 145 IN core-io.z80
                    > USED AT LINE 169 IN core-io.z80
                    > USED AT LINE 188 IN core-io.z80
                    > USED AT LINE 53 IN core-kernel.z80
                    > USED AT LINE 135 IN core-memory.z80
                    > USED AT LINE 150 IN core-memory.z80
                    > USED AT LINE 162 IN core-memory.z80
                    > USED AT LINE 198 IN core-memory.z80
                    > USED AT LINE 58 IN core-stacks.z80
                    > USED AT LINE 11 IN core-utils.z80
                    > USED AT LINE 24 IN core-utils.z80
                    > USED AT LINE 45 IN core-utils.z80
                    > USED AT LINE 58 IN core-utils.z80
DODO:               0690 DEFINED AT LINE 11
DOLOOP:             06B2 DEFINED AT LINE 11
DOLOOP1:            06B8 DEFINED AT LINE 75 IN core-does.z80
                    > USED AT LINE 85 IN core-does.z80
DOLOOP2:            06C3 DEFINED AT LINE 82 IN core-does.z80
                    > USED AT LINE 74 IN core-does.z80
DOPLOOP:            06D6 DEFINED AT LINE 11
DOPLP1:             06FA DEFINED AT LINE 117 IN core-does.z80
                    > USED AT LINE 107 IN core-does.z80
DONXT:              070A DEFINED AT LINE 11
                    > USED AT LINE 14 IN core-control.z80
                    > USED AT LINE 61 IN core-interpret.z80
                    > USED AT LINE 72 IN core-interpret.z80
                    > USED AT LINE 132 IN core-interpret.z80
                    > USED AT LINE 84 IN core-io.z80
                    > USED AT LINE 96 IN core-io.z80
                    > USED AT LINE 149 IN core-memory.z80
                    > USED AT LINE 161 IN core-memory.z80
                    > USED AT LINE 175 IN core-memory.z80
                    > USED AT LINE 10 IN core-utils.z80
                    > USED AT LINE 23 IN core-utils.z80
                    > USED AT LINE 39 IN core-utils.z80
                    > USED AT LINE 56 IN core-utils.z80
DECHILO:            0723 DEFINED AT LINE 146 IN core-does.z80
                    > USED AT LINE 139 IN core-does.z80
DECLOW:             0725 DEFINED AT LINE 149 IN core-does.z80
                    > USED AT LINE 135 IN core-does.z80
DIGIT:              0732 DEFINED AT LINE 11
                    > USED AT LINE 12 IN core-format.z80
EXTRC:              074C DEFINED AT LINE 11
BDIGS:              075E DEFINED AT LINE 11
                    > USED AT LINE 62 IN core-format.z80
                    > USED AT LINE 130 IN core-io.z80
                    > USED AT LINE 137 IN core-io.z80
HOLD:               076A DEFINED AT LINE 11
DIG:                0782 DEFINED AT LINE 11
                    > USED AT LINE 36 IN core-format.z80
DIGS:               0790 DEFINED AT LINE 11
                    > USED AT LINE 62 IN core-format.z80
                    > USED AT LINE 137 IN core-io.z80
DIGS1:              0794 DEFINED AT LINE 35 IN core-format.z80
                    > USED AT LINE 38 IN core-format.z80
DIGS2:              07A0 DEFINED AT LINE 39 IN core-format.z80
                    > USED AT LINE 37 IN core-format.z80
SIGN:               07A2 DEFINED AT LINE 11
                    > USED AT LINE 63 IN core-format.z80
SIGN1:              07B2 DEFINED AT LINE 47 IN core-format.z80
EDIGS:              07B4 DEFINED AT LINE 11
                    > USED AT LINE 63 IN core-format.z80
STR:                07C6 DEFINED AT LINE 11
                    > USED AT LINE 124 IN core-io.z80
                    > USED AT LINE 147 IN core-io.z80
HEX:                07DC DEFINED AT LINE 11
DECIMAL:            07EA DEFINED AT LINE 11
BLANK:              07F8 DEFINED AT LINE 11
                    > USED AT LINE 57 IN core-interpret.z80
                    > USED AT LINE 108 IN core-interpret.z80
                    > USED AT LINE 74 IN core-io.z80
                    > USED AT LINE 166 IN core-io.z80
                    > USED AT LINE 186 IN core-io.z80
                    > USED AT LINE 201 IN core-io.z80
                    > USED AT LINE 171 IN core-memory.z80
TCHAR:              0802 DEFINED AT LINE 11
TCHA1:              0822 DEFINED AT LINE 89 IN core-format.z80
                    > USED AT LINE 87 IN core-format.z80
PARS:               0824 DEFINED AT LINE 11
                    > USED AT LINE 87 IN core-interpret.z80
PARS1:              084A DEFINED AT LINE 57 IN core-interpret.z80
                    > USED AT LINE 61 IN core-interpret.z80
PARS2:              0870 DEFINED AT LINE 63 IN core-interpret.z80
                    > USED AT LINE 59 IN core-interpret.z80
PARS3:              0872 DEFINED AT LINE 64 IN core-interpret.z80
                    > USED AT LINE 55 IN core-interpret.z80
PARS4:              0878 DEFINED AT LINE 66 IN core-interpret.z80
                    > USED AT LINE 72 IN core-interpret.z80
PARS5:              0890 DEFINED AT LINE 70 IN core-interpret.z80
                    > USED AT LINE 68 IN core-interpret.z80
PARS6:              08A6 DEFINED AT LINE 75 IN core-interpret.z80
                    > USED AT LINE 70 IN core-interpret.z80
PARS7:              08B4 DEFINED AT LINE 77 IN core-interpret.z80
                    > USED AT LINE 74 IN core-interpret.z80
PARS8:              08C0 DEFINED AT LINE 79 IN core-interpret.z80
                    > USED AT LINE 53 IN core-interpret.z80
PARSE:              08C8 DEFINED AT LINE 11
                    > USED AT LINE 108 IN core-interpret.z80
TOKEN:              08EA DEFINED AT LINE 11
                    > USED AT LINE 128 IN core-compiler.z80
                    > USED AT LINE 144 IN core-compiler.z80
                    > USED AT LINE 152 IN core-compiler.z80
NAMET:              0906 DEFINED AT LINE 11
                    > USED AT LINE 156 IN core-interpret.z80
SAMEQ:              0912 DEFINED AT LINE 11
SAME1:              091C DEFINED AT LINE 127 IN core-interpret.z80
                    > USED AT LINE 132 IN core-interpret.z80
SAME2:              093E DEFINED AT LINE 132 IN core-interpret.z80
                    > USED AT LINE 126 IN core-interpret.z80
                    > USED AT LINE 130 IN core-interpret.z80
FIND:               0948 DEFINED AT LINE 11
                    > USED AT LINE 168 IN core-interpret.z80
FIND1:              0966 DEFINED AT LINE 141 IN core-interpret.z80
                    > USED AT LINE 153 IN core-interpret.z80
FIND2:              098A DEFINED AT LINE 147 IN core-interpret.z80
                    > USED AT LINE 144 IN core-interpret.z80
FIND3:              0992 DEFINED AT LINE 148 IN core-interpret.z80
                    > USED AT LINE 146 IN core-interpret.z80
FIND6:              0996 DEFINED AT LINE 149 IN core-interpret.z80
                    > USED AT LINE 142 IN core-interpret.z80
FIND4:              09A2 DEFINED AT LINE 151 IN core-interpret.z80
                    > USED AT LINE 148 IN core-interpret.z80
FIND5:              09AE DEFINED AT LINE 154 IN core-interpret.z80
                    > USED AT LINE 151 IN core-interpret.z80
NAMEQ:              09C0 DEFINED AT LINE 11
                    > USED AT LINE 56 IN core-compiler.z80
                    > USED AT LINE 86 IN core-compiler.z80
                    > USED AT LINE 221 IN core-interpret.z80
NAMQ1:              09D2 DEFINED AT LINE 164 IN core-interpret.z80
                    > USED AT LINE 162 IN core-interpret.z80
NAMQ2:              09D4 DEFINED AT LINE 165 IN core-interpret.z80
                    > USED AT LINE 169 IN core-interpret.z80
NAMQ3:              09F2 DEFINED AT LINE 171 IN core-interpret.z80
                    > USED AT LINE 167 IN core-interpret.z80
THROW:              09FC DEFINED AT LINE 11
                    > USED AT LINE 78 IN core-compiler.z80
                    > USED AT LINE 97 IN core-compiler.z80
                    > USED AT LINE 211 IN core-interpret.z80
                    > USED AT LINE 231 IN core-interpret.z80
ABORQ:              0A1A DEFINED AT LINE 11
                    > USED AT LINE 44
ABOR1:              0A26 DEFINED AT LINE 212 IN core-interpret.z80
                    > USED AT LINE 210 IN core-interpret.z80
INTER:              0A2C DEFINED AT LINE 11
                    > USED AT LINE 237 IN core-interpret.z80
INTE1:              0A54 DEFINED AT LINE 226 IN core-interpret.z80
                    > USED AT LINE 222 IN core-interpret.z80
INTE2:              0A5E DEFINED AT LINE 230 IN core-interpret.z80
                    > USED AT LINE 228 IN core-interpret.z80
LBRAC:              0A60 DEFINED AT LINE 11
STOIO:              0A6E DEFINED AT LINE 11
                    > USED AT LINE 3 IN core-kernel.z80
QRX:                0A78 DEFINED AT LINE 11
                    > USED AT LINE 7 IN defaults.z80
QRX1:               0A83 DEFINED AT LINE 21 IN core-io.z80
                    > USED AT LINE 18 IN core-io.z80
QRX2:               0A8D DEFINED AT LINE 27 IN core-io.z80
                    > USED AT LINE 20 IN core-io.z80
TXSTO:              0A94 DEFINED AT LINE 11
                    > USED AT LINE 8 IN defaults.z80
                    > USED AT LINE 11 IN defaults.z80
QKEY:               0AA0 DEFINED AT LINE 11
                    > USED AT LINE 47 IN core-io.z80
                    > USED AT LINE 60 IN core-io.z80
KEY:                0AAC DEFINED AT LINE 11
                    > USED AT LINE 62 IN core-io.z80
                    > USED AT LINE 200 IN core-io.z80
KEY1:               0AB0 DEFINED AT LINE 46 IN core-io.z80
                    > USED AT LINE 48 IN core-io.z80
EMIT:               0AB8 DEFINED AT LINE 11
                    > USED AT LINE 74 IN core-io.z80
NUFQ:               0AC4 DEFINED AT LINE 11
                    > USED AT LINE 37 IN core-utils.z80
NUFQ1:              0ADA DEFINED AT LINE 63 IN core-io.z80
                    > USED AT LINE 61 IN core-io.z80
PACE:               0ADC DEFINED AT LINE 11
SPACE:              0AE8 DEFINED AT LINE 11
                    > USED AT LINE 82 IN core-io.z80
                    > USED AT LINE 138 IN core-io.z80
                    > USED AT LINE 147 IN core-io.z80
                    > USED AT LINE 17 IN core-utils.z80
                    > USED AT LINE 36 IN core-utils.z80
                    > USED AT LINE 36 IN core-utils.z80
SPACS:              0AF2 DEFINED AT LINE 11
                    > USED AT LINE 125 IN core-io.z80
                    > USED AT LINE 132 IN core-io.z80
CHAR1:              0B02 DEFINED AT LINE 81 IN core-io.z80
                    > USED AT LINE 84 IN core-io.z80
CHAR2:              0B04 DEFINED AT LINE 83 IN core-io.z80
                    > USED AT LINE 80 IN core-io.z80
TYPEE:              0B0A DEFINED AT LINE 11
                    > USED AT LINE 125 IN core-io.z80
                    > USED AT LINE 132 IN core-io.z80
                    > USED AT LINE 138 IN core-io.z80
TYPE1:              0B14 DEFINED AT LINE 92 IN core-io.z80
                    > USED AT LINE 96 IN core-io.z80
TYPE2:              0B20 DEFINED AT LINE 95 IN core-io.z80
                    > USED AT LINE 91 IN core-io.z80
CR:                 0B28 DEFINED AT LINE 11
                    > USED AT LINE 34 IN core-utils.z80
                    > USED AT LINE 50 IN core-utils.z80
DOSTR:              0B3A DEFINED AT LINE 11
                    > USED AT LINE 211 IN core-interpret.z80
                    > USED AT LINE 213 IN core-interpret.z80
                    > USED AT LINE 114 IN core-io.z80
                    > USED AT LINE 119 IN core-io.z80
STRQP:              0B52 DEFINED AT LINE 11
                    > USED AT LINE 44
DOTQP:              0B5A DEFINED AT LINE 11
                    > USED AT LINE 44
                    > USED AT LINE 44
DOTR:               0B66 DEFINED AT LINE 11
UDOTR:              0B7A DEFINED AT LINE 11
UDOT:               0B92 DEFINED AT LINE 11
                    > USED AT LINE 145 IN core-io.z80
DOT:                0BA2 DEFINED AT LINE 11
                    > USED AT LINE 157 IN core-io.z80
DOT1:               0BB8 DEFINED AT LINE 146 IN core-io.z80
                    > USED AT LINE 144 IN core-io.z80
QUEST:              0BC0 DEFINED AT LINE 11
BKSP:               0BCA DEFINED AT LINE 11
                    > USED AT LINE 188 IN core-io.z80
BACK1:              0BFA DEFINED AT LINE 168 IN core-io.z80
                    > USED AT LINE 164 IN core-io.z80
TAP:                0BFC DEFINED AT LINE 11
                    > USED AT LINE 186 IN core-io.z80
                    > USED AT LINE 203 IN core-io.z80
KTAP:               0C12 DEFINED AT LINE 11
KTAP1:              0C32 DEFINED AT LINE 187 IN core-io.z80
                    > USED AT LINE 185 IN core-io.z80
KTAP2:              0C36 DEFINED AT LINE 189 IN core-io.z80
                    > USED AT LINE 183 IN core-io.z80
ACCEP:              0C40 DEFINED AT LINE 11
ACCP1:              0C4A DEFINED AT LINE 197 IN core-io.z80
                    > USED AT LINE 208 IN core-io.z80
ACCP2:              0C68 DEFINED AT LINE 205 IN core-io.z80
                    > USED AT LINE 202 IN core-io.z80
ACCP3:              0C6C DEFINED AT LINE 207 IN core-io.z80
                    > USED AT LINE 204 IN core-io.z80
ACCP4:              0C70 DEFINED AT LINE 209 IN core-io.z80
                    > USED AT LINE 199 IN core-io.z80
EXPEC:              0C78 DEFINED AT LINE 11
QUERY:              0C88 DEFINED AT LINE 11
COLD:               0CA6 DEFINED AT LINE 11
                    > USED AT LINE 30
HELLO:              0CB6 DEFINED AT LINE 7 IN core-kernel.z80
                    > USED AT LINE 5 IN core-kernel.z80
QUIT:               0CC6 DEFINED AT LINE 11
                    > USED AT LINE 6 IN core-kernel.z80
EXECU:              0CC8 DEFINED AT LINE 11
                    > USED AT LINE 90 IN core-compiler.z80
                    > USED AT LINE 225 IN core-interpret.z80
                    > USED AT LINE 133 IN core-memory.z80
QBRAN:              0CCC DEFINED AT LINE 11
                    > USED AT LINE 120 IN core-alu.z80
                    > USED AT LINE 268 IN core-alu.z80
                    > USED AT LINE 57 IN core-compiler.z80
                    > USED AT LINE 68 IN core-compiler.z80
                    > USED AT LINE 87 IN core-compiler.z80
                    > USED AT LINE 89 IN core-compiler.z80
                    > USED AT LINE 95 IN core-compiler.z80
                    > USED AT LINE 19 IN core-control.z80
                    > USED AT LINE 30 IN core-control.z80
                    > USED AT LINE 37 IN core-format.z80
                    > USED AT LINE 45 IN core-format.z80
                    > USED AT LINE 87 IN core-format.z80
                    > USED AT LINE 53 IN core-interpret.z80
                    > USED AT LINE 55 IN core-interpret.z80
                    > USED AT LINE 59 IN core-interpret.z80
                    > USED AT LINE 68 IN core-interpret.z80
                    > USED AT LINE 70 IN core-interpret.z80
                    > USED AT LINE 130 IN core-interpret.z80
                    > USED AT LINE 142 IN core-interpret.z80
                    > USED AT LINE 144 IN core-interpret.z80
                    > USED AT LINE 151 IN core-interpret.z80
                    > USED AT LINE 162 IN core-interpret.z80
                    > USED AT LINE 167 IN core-interpret.z80
                    > USED AT LINE 169 IN core-interpret.z80
                    > USED AT LINE 210 IN core-interpret.z80
                    > USED AT LINE 222 IN core-interpret.z80
                    > USED AT LINE 228 IN core-interpret.z80
                    > USED AT LINE 48 IN core-io.z80
                    > USED AT LINE 61 IN core-io.z80
                    > USED AT LINE 144 IN core-io.z80
                    > USED AT LINE 164 IN core-io.z80
                    > USED AT LINE 183 IN core-io.z80
                    > USED AT LINE 185 IN core-io.z80
                    > USED AT LINE 199 IN core-io.z80
                    > USED AT LINE 202 IN core-io.z80
                    > USED AT LINE 132 IN core-memory.z80
                    > USED AT LINE 172 IN core-memory.z80
                    > USED AT LINE 195 IN core-memory.z80
                    > USED AT LINE 55 IN core-stacks.z80
                    > USED AT LINE 38 IN core-utils.z80
BRAN:               0CDC DEFINED AT LINE 11
                    > USED AT LINE 24 IN core-control.z80
                    > USED AT LINE 37 IN core-control.z80
                    > USED AT LINE 38 IN core-format.z80
                    > USED AT LINE 74 IN core-interpret.z80
                    > USED AT LINE 126 IN core-interpret.z80
                    > USED AT LINE 146 IN core-interpret.z80
                    > USED AT LINE 148 IN core-interpret.z80
                    > USED AT LINE 153 IN core-interpret.z80
                    > USED AT LINE 80 IN core-io.z80
                    > USED AT LINE 91 IN core-io.z80
                    > USED AT LINE 204 IN core-io.z80
                    > USED AT LINE 208 IN core-io.z80
                    > USED AT LINE 26 IN core-kernel.z80
                    > USED AT LINE 142 IN core-memory.z80
                    > USED AT LINE 157 IN core-memory.z80
                    > USED AT LINE 169 IN core-memory.z80
                    > USED AT LINE 5 IN core-utils.z80
                    > USED AT LINE 18 IN core-utils.z80
                    > USED AT LINE 40 IN core-utils.z80
                    > USED AT LINE 52 IN core-utils.z80
TYPECSTR:           0CE8 DEFINED AT LINE 11
                    > USED AT LINE 53 IN core-kernel.z80
THROWX:             0CF6 DEFINED AT LINE 11
                    > USED AT LINE 225 IN core-alu.z80
                    > USED AT LINE 228 IN core-alu.z80
STORE:              0CFE DEFINED AT LINE 11
                    > USED AT LINE 19 IN core-compiler.z80
                    > USED AT LINE 75 IN core-compiler.z80
                    > USED AT LINE 52 IN core-interpret.z80
                    > USED AT LINE 91 IN core-memory.z80
                    > USED AT LINE 97 IN core-memory.z80
AT:                 0D0C DEFINED AT LINE 11
                    > USED AT LINE 50 IN core-compiler.z80
                    > USED AT LINE 73 IN core-compiler.z80
                    > USED AT LINE 88 IN core-compiler.z80
                    > USED AT LINE 103 IN core-compiler.z80
                    > USED AT LINE 136 IN core-compiler.z80
                    > USED AT LINE 47 IN core-does.z80
                    > USED AT LINE 24 IN core-format.z80
                    > USED AT LINE 30 IN core-format.z80
                    > USED AT LINE 66 IN core-interpret.z80
                    > USED AT LINE 67 IN core-interpret.z80
                    > USED AT LINE 86 IN core-interpret.z80
                    > USED AT LINE 109 IN core-interpret.z80
                    > USED AT LINE 140 IN core-interpret.z80
                    > USED AT LINE 141 IN core-interpret.z80
                    > USED AT LINE 143 IN core-interpret.z80
                    > USED AT LINE 166 IN core-interpret.z80
                    > USED AT LINE 186 IN core-interpret.z80
                    > USED AT LINE 223 IN core-interpret.z80
                    > USED AT LINE 41 IN core-io.z80
                    > USED AT LINE 54 IN core-io.z80
                    > USED AT LINE 143 IN core-io.z80
                    > USED AT LINE 157 IN core-io.z80
                    > USED AT LINE 103 IN core-memory.z80
                    > USED AT LINE 114 IN core-memory.z80
                    > USED AT LINE 131 IN core-memory.z80
                    > USED AT LINE 30 IN core-utils.z80
CSTOR:              0D18 DEFINED AT LINE 11
                    > USED AT LINE 176 IN core-io.z80
                    > USED AT LINE 145 IN core-memory.z80
                    > USED AT LINE 159 IN core-memory.z80
                    > USED AT LINE 187 IN core-memory.z80
CAT:                0D24 DEFINED AT LINE 11
                    > USED AT LINE 67 IN core-compiler.z80
                    > USED AT LINE 93 IN core-io.z80
                    > USED AT LINE 109 IN core-memory.z80
                    > USED AT LINE 7 IN core-utils.z80
                    > USED AT LINE 20 IN core-utils.z80
RAT:                0D30 DEFINED AT LINE 11
                    > USED AT LINE 271 IN core-alu.z80
                    > USED AT LINE 277 IN core-alu.z80
                    > USED AT LINE 127 IN core-interpret.z80
                    > USED AT LINE 128 IN core-interpret.z80
                    > USED AT LINE 107 IN core-io.z80
                    > USED AT LINE 145 IN core-memory.z80
                    > USED AT LINE 54 IN core-utils.z80
RPAT:               0D3E DEFINED AT LINE 11
RPSTO:              0D4A DEFINED AT LINE 11
SPAT:               0D56 DEFINED AT LINE 11
                    > USED AT LINE 84 IN core-stacks.z80
                    > USED AT LINE 89 IN core-stacks.z80
SPSTO:              0D64 DEFINED AT LINE 11
PSTOR:              0D70 DEFINED AT LINE 11
DSTOR:              0D82 DEFINED AT LINE 11
DAT:                0D92 DEFINED AT LINE 11
COUNT:              0DA2 DEFINED AT LINE 11
                    > USED AT LINE 59 IN core-compiler.z80
                    > USED AT LINE 119 IN core-io.z80
HERE:               0DB4 DEFINED AT LINE 11
                    > USED AT LINE 18 IN core-compiler.z80
                    > USED AT LINE 71 IN core-compiler.z80
                    > USED AT LINE 9 IN core-control.z80
                    > USED AT LINE 43 IN core-control.z80
                    > USED AT LINE 48 IN core-control.z80
                    > USED AT LINE 119 IN core-memory.z80
PAD:                0DBE DEFINED AT LINE 11
                    > USED AT LINE 19 IN core-format.z80
                    > USED AT LINE 55 IN core-format.z80
TIB:                0DCC DEFINED AT LINE 11
                    > USED AT LINE 85 IN core-interpret.z80
                    > USED AT LINE 222 IN core-io.z80
ATEXE:              0DD8 DEFINED AT LINE 11
                    > USED AT LINE 94 IN core-compiler.z80
                    > USED AT LINE 227 IN core-interpret.z80
                    > USED AT LINE 206 IN core-io.z80
                    > USED AT LINE 216 IN core-io.z80
EXE1:               0DE6 DEFINED AT LINE 134 IN core-memory.z80
                    > USED AT LINE 132 IN core-memory.z80
CMOVE:              0DE8 DEFINED AT LINE 11
                    > USED AT LINE 188 IN core-memory.z80
CMOV1:              0DF2 DEFINED AT LINE 143 IN core-memory.z80
                    > USED AT LINE 149 IN core-memory.z80
CMOV2:              0E0A DEFINED AT LINE 148 IN core-memory.z80
                    > USED AT LINE 142 IN core-memory.z80
FILL:               0E12 DEFINED AT LINE 11
FILL1:              0E20 DEFINED AT LINE 158 IN core-memory.z80
                    > USED AT LINE 161 IN core-memory.z80
FILL2:              0E2A DEFINED AT LINE 160 IN core-memory.z80
                    > USED AT LINE 157 IN core-memory.z80
DTRAI:              0E32 DEFINED AT LINE 11
DTRA1:              0E3C DEFINED AT LINE 170 IN core-memory.z80
                    > USED AT LINE 175 IN core-memory.z80
DTRA2:              0E56 DEFINED AT LINE 174 IN core-memory.z80
                    > USED AT LINE 169 IN core-memory.z80
                    > USED AT LINE 172 IN core-memory.z80
PACKS:              0E60 DEFINED AT LINE 11
                    > USED AT LINE 110 IN core-interpret.z80
ALGND:              0E9A DEFINED AT LINE 11
                    > USED AT LINE 71 IN core-compiler.z80
                    > USED AT LINE 108 IN core-io.z80
                    > USED AT LINE 182 IN core-memory.z80
ALGN1:              0EBA DEFINED AT LINE 197 IN core-memory.z80
                    > USED AT LINE 195 IN core-memory.z80
GREETING:           0EBE DEFINED AT LINE 1 IN core-messages.z80
                    > USED AT LINE 36
ERR_DIVZERO:        0ECF DEFINED AT LINE 12 IN core-messages.z80
                    > USED AT LINE 224 IN core-alu.z80
ERR_OUTOFRANGE:     0EE0 DEFINED AT LINE 13 IN core-messages.z80
                    > USED AT LINE 227 IN core-alu.z80
                    > USED AT LINE 281 IN core-alu.z80
                    > USED AT LINE 286 IN core-alu.z80
TOR:                0EF4 DEFINED AT LINE 11
                    > USED AT LINE 61 IN core-alu.z80
                    > USED AT LINE 82 IN core-alu.z80
                    > USED AT LINE 267 IN core-alu.z80
                    > USED AT LINE 301 IN core-alu.z80
                    > USED AT LINE 360 IN core-alu.z80
                    > USED AT LINE 32 IN core-compiler.z80
                    > USED AT LINE 4 IN core-control.z80
                    > USED AT LINE 64 IN core-does.z80
                    > USED AT LINE 61 IN core-format.z80
                    > USED AT LINE 56 IN core-interpret.z80
                    > USED AT LINE 65 IN core-interpret.z80
                    > USED AT LINE 73 IN core-interpret.z80
                    > USED AT LINE 85 IN core-interpret.z80
                    > USED AT LINE 125 IN core-interpret.z80
                    > USED AT LINE 164 IN core-interpret.z80
                    > USED AT LINE 90 IN core-io.z80
                    > USED AT LINE 108 IN core-io.z80
                    > USED AT LINE 124 IN core-io.z80
                    > USED AT LINE 130 IN core-io.z80
                    > USED AT LINE 163 IN core-io.z80
                    > USED AT LINE 141 IN core-memory.z80
                    > USED AT LINE 144 IN core-memory.z80
                    > USED AT LINE 156 IN core-memory.z80
                    > USED AT LINE 168 IN core-memory.z80
                    > USED AT LINE 63 IN core-stacks.z80
                    > USED AT LINE 78 IN core-stacks.z80
                    > USED AT LINE 4 IN core-utils.z80
                    > USED AT LINE 17 IN core-utils.z80
                    > USED AT LINE 32 IN core-utils.z80
                    > USED AT LINE 51 IN core-utils.z80
RFROM:              0F06 DEFINED AT LINE 11
                    > USED AT LINE 62 IN core-alu.z80
                    > USED AT LINE 62 IN core-alu.z80
                    > USED AT LINE 84 IN core-alu.z80
                    > USED AT LINE 163 IN core-alu.z80
                    > USED AT LINE 272 IN core-alu.z80
                    > USED AT LINE 275 IN core-alu.z80
                    > USED AT LINE 279 IN core-alu.z80
                    > USED AT LINE 285 IN core-alu.z80
                    > USED AT LINE 352 IN core-alu.z80
                    > USED AT LINE 31 IN core-compiler.z80
                    > USED AT LINE 82 IN core-control.z80
                    > USED AT LINE 82 IN core-control.z80
                    > USED AT LINE 36 IN core-does.z80
                    > USED AT LINE 47 IN core-does.z80
                    > USED AT LINE 62 IN core-interpret.z80
                    > USED AT LINE 63 IN core-interpret.z80
                    > USED AT LINE 75 IN core-interpret.z80
                    > USED AT LINE 78 IN core-interpret.z80
                    > USED AT LINE 78 IN core-interpret.z80
                    > USED AT LINE 79 IN core-interpret.z80
                    > USED AT LINE 87 IN core-interpret.z80
                    > USED AT LINE 131 IN core-interpret.z80
                    > USED AT LINE 149 IN core-interpret.z80
                    > USED AT LINE 154 IN core-interpret.z80
                    > USED AT LINE 165 IN core-interpret.z80
                    > USED AT LINE 170 IN core-interpret.z80
                    > USED AT LINE 171 IN core-interpret.z80
                    > USED AT LINE 187 IN core-interpret.z80
                    > USED AT LINE 188 IN core-interpret.z80
                    > USED AT LINE 189 IN core-interpret.z80
                    > USED AT LINE 107 IN core-io.z80
                    > USED AT LINE 131 IN core-io.z80
                    > USED AT LINE 147 IN core-memory.z80
                    > USED AT LINE 173 IN core-memory.z80
                    > USED AT LINE 42 IN core-utils.z80
                    > USED AT LINE 44 IN core-utils.z80
DUPP:               0F18 DEFINED AT LINE 11
                    > USED AT LINE 94 IN core-alu.z80
                    > USED AT LINE 267 IN core-alu.z80
                    > USED AT LINE 296 IN core-alu.z80
                    > USED AT LINE 18 IN core-compiler.z80
                    > USED AT LINE 31 IN core-compiler.z80
                    > USED AT LINE 56 IN core-compiler.z80
                    > USED AT LINE 67 IN core-compiler.z80
                    > USED AT LINE 70 IN core-compiler.z80
                    > USED AT LINE 74 IN core-compiler.z80
                    > USED AT LINE 25 IN core-format.z80
                    > USED AT LINE 36 IN core-format.z80
                    > USED AT LINE 61 IN core-format.z80
                    > USED AT LINE 73 IN core-interpret.z80
                    > USED AT LINE 138 IN core-interpret.z80
                    > USED AT LINE 140 IN core-interpret.z80
                    > USED AT LINE 141 IN core-interpret.z80
                    > USED AT LINE 143 IN core-interpret.z80
                    > USED AT LINE 156 IN core-interpret.z80
                    > USED AT LINE 161 IN core-interpret.z80
                    > USED AT LINE 60 IN core-io.z80
                    > USED AT LINE 93 IN core-io.z80
                    > USED AT LINE 175 IN core-io.z80
                    > USED AT LINE 182 IN core-io.z80
                    > USED AT LINE 200 IN core-io.z80
                    > USED AT LINE 102 IN core-memory.z80
                    > USED AT LINE 108 IN core-memory.z80
                    > USED AT LINE 144 IN core-memory.z80
                    > USED AT LINE 182 IN core-memory.z80
                    > USED AT LINE 183 IN core-memory.z80
                    > USED AT LINE 193 IN core-memory.z80
                    > USED AT LINE 55 IN core-stacks.z80
                    > USED AT LINE 56 IN core-stacks.z80
                    > USED AT LINE 7 IN core-utils.z80
                    > USED AT LINE 20 IN core-utils.z80
DROP:               0F20 DEFINED AT LINE 11
                    > USED AT LINE 56 IN core-alu.z80
                    > USED AT LINE 128 IN core-alu.z80
                    > USED AT LINE 134 IN core-alu.z80
                    > USED AT LINE 149 IN core-alu.z80
                    > USED AT LINE 157 IN core-alu.z80
                    > USED AT LINE 279 IN core-alu.z80
                    > USED AT LINE 285 IN core-alu.z80
                    > USED AT LINE 306 IN core-alu.z80
                    > USED AT LINE 346 IN core-alu.z80
                    > USED AT LINE 61 IN core-compiler.z80
                    > USED AT LINE 54 IN core-control.z80
                    > USED AT LINE 54 IN core-format.z80
                    > USED AT LINE 88 IN core-format.z80
                    > USED AT LINE 62 IN core-interpret.z80
                    > USED AT LINE 75 IN core-interpret.z80
                    > USED AT LINE 131 IN core-interpret.z80
                    > USED AT LINE 149 IN core-interpret.z80
                    > USED AT LINE 154 IN core-interpret.z80
                    > USED AT LINE 170 IN core-interpret.z80
                    > USED AT LINE 171 IN core-interpret.z80
                    > USED AT LINE 189 IN core-interpret.z80
                    > USED AT LINE 213 IN core-interpret.z80
                    > USED AT LINE 97 IN core-io.z80
                    > USED AT LINE 190 IN core-io.z80
                    > USED AT LINE 210 IN core-io.z80
                    > USED AT LINE 223 IN core-io.z80
                    > USED AT LINE 194 IN core-memory.z80
                    > USED AT LINE 68 IN core-stacks.z80
                    > USED AT LINE 68 IN core-stacks.z80
                    > USED AT LINE 11 IN core-utils.z80
                    > USED AT LINE 42 IN core-utils.z80
                    > USED AT LINE 44 IN core-utils.z80
SWAP:               0F28 DEFINED AT LINE 11
                    > USED AT LINE 61 IN core-alu.z80
                    > USED AT LINE 128 IN core-alu.z80
                    > USED AT LINE 141 IN core-alu.z80
                    > USED AT LINE 147 IN core-alu.z80
                    > USED AT LINE 155 IN core-alu.z80
                    > USED AT LINE 273 IN core-alu.z80
                    > USED AT LINE 48 IN core-control.z80
                    > USED AT LINE 59 IN core-control.z80
                    > USED AT LINE 64 IN core-control.z80
                    > USED AT LINE 12 IN core-format.z80
                    > USED AT LINE 64 IN core-interpret.z80
                    > USED AT LINE 138 IN core-interpret.z80
                    > USED AT LINE 150 IN core-interpret.z80
                    > USED AT LINE 188 IN core-interpret.z80
                    > USED AT LINE 190 IN core-io.z80
                    > USED AT LINE 90 IN core-memory.z80
                    > USED AT LINE 91 IN core-memory.z80
                    > USED AT LINE 96 IN core-memory.z80
                    > USED AT LINE 103 IN core-memory.z80
                    > USED AT LINE 109 IN core-memory.z80
                    > USED AT LINE 156 IN core-memory.z80
                    > USED AT LINE 188 IN core-memory.z80
                    > USED AT LINE 63 IN core-stacks.z80
OVER:               0F34 DEFINED AT LINE 11
                    > USED AT LINE 162 IN core-alu.z80
                    > USED AT LINE 276 IN core-alu.z80
                    > USED AT LINE 59 IN core-compiler.z80
                    > USED AT LINE 65 IN core-does.z80
                    > USED AT LINE 55 IN core-format.z80
                    > USED AT LINE 57 IN core-interpret.z80
                    > USED AT LINE 64 IN core-interpret.z80
                    > USED AT LINE 77 IN core-interpret.z80
                    > USED AT LINE 79 IN core-interpret.z80
                    > USED AT LINE 127 IN core-interpret.z80
                    > USED AT LINE 128 IN core-interpret.z80
                    > USED AT LINE 131 IN core-io.z80
                    > USED AT LINE 163 IN core-io.z80
                    > USED AT LINE 176 IN core-io.z80
                    > USED AT LINE 196 IN core-io.z80
                    > USED AT LINE 210 IN core-io.z80
                    > USED AT LINE 90 IN core-memory.z80
                    > USED AT LINE 96 IN core-memory.z80
                    > USED AT LINE 171 IN core-memory.z80
                    > USED AT LINE 183 IN core-memory.z80
                    > USED AT LINE 185 IN core-memory.z80
                    > USED AT LINE 73 IN core-stacks.z80
                    > USED AT LINE 73 IN core-stacks.z80
                    > USED AT LINE 16 IN core-utils.z80
QDUP:               0F40 DEFINED AT LINE 11
                    > USED AT LINE 86 IN core-compiler.z80
                    > USED AT LINE 129 IN core-interpret.z80
                    > USED AT LINE 166 IN core-interpret.z80
                    > USED AT LINE 168 IN core-interpret.z80
                    > USED AT LINE 221 IN core-interpret.z80
                    > USED AT LINE 131 IN core-memory.z80
QDUP1:              0F4C DEFINED AT LINE 57 IN core-stacks.z80
ROT:                0F4E DEFINED AT LINE 11
                    > USED AT LINE 277 IN core-alu.z80
                    > USED AT LINE 78 IN core-stacks.z80
                    > USED AT LINE 35 IN core-utils.z80
                    > USED AT LINE 35 IN core-utils.z80
DDROP:              0F5C DEFINED AT LINE 11
                    > USED AT LINE 62 IN core-io.z80
                    > USED AT LINE 150 IN core-memory.z80
                    > USED AT LINE 162 IN core-memory.z80
DDUP:               0F66 DEFINED AT LINE 11
                    > USED AT LINE 119 IN core-alu.z80
                    > USED AT LINE 133 IN core-alu.z80
                    > USED AT LINE 146 IN core-alu.z80
                    > USED AT LINE 154 IN core-alu.z80
                    > USED AT LINE 351 IN core-alu.z80
                    > USED AT LINE 198 IN core-io.z80
                    > USED AT LINE 159 IN core-memory.z80
                    > USED AT LINE 187 IN core-memory.z80
TWOSWAP:            0F70 DEFINED AT LINE 11
PICK:               0F7E DEFINED AT LINE 11
                    > USED AT LINE 54 IN core-utils.z80
DEPTH:              0F92 DEFINED AT LINE 11
                    > USED AT LINE 50 IN core-utils.z80
SZERO:              0FA8 DEFINED AT LINE 11
                    > USED AT LINE 89 IN core-stacks.z80
RZERO:              0FB0 DEFINED AT LINE 11
TQKEY:              0FB8 DEFINED AT LINE 11
                    > USED AT LINE 41 IN core-io.z80
TEMIT:              0FC0 DEFINED AT LINE 11
                    > USED AT LINE 54 IN core-io.z80
TEXPE:              0FC8 DEFINED AT LINE 11
                    > USED AT LINE 216 IN core-io.z80
TTAP:               0FD0 DEFINED AT LINE 11
                    > USED AT LINE 206 IN core-io.z80
TECHO:              0FD8 DEFINED AT LINE 11
                    > USED AT LINE 166 IN core-io.z80
                    > USED AT LINE 175 IN core-io.z80
TPROM:              0FE0 DEFINED AT LINE 11
BASE:               0FE8 DEFINED AT LINE 11
                    > USED AT LINE 30 IN core-format.z80
                    > USED AT LINE 143 IN core-io.z80
                    > USED AT LINE 30 IN core-utils.z80
TEMP:               0FF0 DEFINED AT LINE 11
                    > USED AT LINE 52 IN core-interpret.z80
                    > USED AT LINE 66 IN core-interpret.z80
                    > USED AT LINE 67 IN core-interpret.z80
                    > USED AT LINE 147 IN core-interpret.z80
SPAN:               0FF8 DEFINED AT LINE 11
INN:                1000 DEFINED AT LINE 11
NTIB:               1008 DEFINED AT LINE 11
                    > USED AT LINE 86 IN core-interpret.z80
                    > USED AT LINE 125 IN core-memory.z80
CSP:                1010 DEFINED AT LINE 11
TEVAL:              1018 DEFINED AT LINE 11
TNUMB:              1020 DEFINED AT LINE 11
                    > USED AT LINE 94 IN core-compiler.z80
                    > USED AT LINE 227 IN core-interpret.z80
HLD:                1028 DEFINED AT LINE 11
                    > USED AT LINE 19 IN core-format.z80
                    > USED AT LINE 24 IN core-format.z80
                    > USED AT LINE 25 IN core-format.z80
                    > USED AT LINE 54 IN core-format.z80
HANDL:              1030 DEFINED AT LINE 11
                    > USED AT LINE 186 IN core-interpret.z80
                    > USED AT LINE 187 IN core-interpret.z80
CNTXT:              1038 DEFINED AT LINE 11
                    > USED AT LINE 161 IN core-interpret.z80
CRRNT:              1040 DEFINED AT LINE 11
                    > USED AT LINE 73 IN core-compiler.z80
CP:                 1048 DEFINED AT LINE 11
                    > USED AT LINE 19 IN core-compiler.z80
                    > USED AT LINE 114 IN core-memory.z80
NP:                 1050 DEFINED AT LINE 11
                    > USED AT LINE 109 IN core-interpret.z80
LAST:               1058 DEFINED AT LINE 11
                    > USED AT LINE 50 IN core-compiler.z80
                    > USED AT LINE 70 IN core-compiler.z80
                    > USED AT LINE 103 IN core-compiler.z80
                    > USED AT LINE 136 IN core-compiler.z80
VFRTH:              1060 DEFINED AT LINE 11
UTYPE:              1068 DEFINED AT LINE 11
UTYP1:              1072 DEFINED AT LINE 6 IN core-utils.z80
                    > USED AT LINE 10 IN core-utils.z80
UTYP2:              1080 DEFINED AT LINE 9 IN core-utils.z80
                    > USED AT LINE 5 IN core-utils.z80
DMP:                1088 DEFINED AT LINE 11
PDUM1:              109C DEFINED AT LINE 19 IN core-utils.z80
                    > USED AT LINE 23 IN core-utils.z80
PDUM2:              10AC DEFINED AT LINE 22 IN core-utils.z80
                    > USED AT LINE 18 IN core-utils.z80
DUMP:               10B2 DEFINED AT LINE 11
DUMP1:              10C6 DEFINED AT LINE 33 IN core-utils.z80
                    > USED AT LINE 39 IN core-utils.z80
DUMP2:              10EA DEFINED AT LINE 41 IN core-utils.z80
                    > USED AT LINE 38 IN core-utils.z80
DUMP3:              10EE DEFINED AT LINE 43 IN core-utils.z80
                    > USED AT LINE 40 IN core-utils.z80
DOTS:               10F8 DEFINED AT LINE 11
DOTS1:              1106 DEFINED AT LINE 53 IN core-utils.z80
                    > USED AT LINE 56 IN core-utils.z80
DOTS2:              110C DEFINED AT LINE 55 IN core-utils.z80
                    > USED AT LINE 52 IN core-utils.z80
SPP:                2200 DEFINED AT LINE 3 IN variables.z80
                    > USED AT LINE 16
                    > USED AT LINE 5 IN defaults.z80
TIBB:               2200 DEFINED AT LINE 4 IN variables.z80
                    > USED AT LINE 18 IN defaults.z80
RPP:                2400 DEFINED AT LINE 6 IN variables.z80
                    > USED AT LINE 24
                    > USED AT LINE 6 IN defaults.z80
UPP:                2400 DEFINED AT LINE 7 IN variables.z80
                    > USED AT LINE 20
                    > USED AT LINE 42 IN core-does.z80
VARSPP:             2400 DEFINED AT LINE 9 IN variables.z80
VARRPP:             2402 DEFINED AT LINE 10 IN variables.z80
VARQKEY:            2404 DEFINED AT LINE 11 IN variables.z80
VARTEMIT:           2406 DEFINED AT LINE 12 IN variables.z80
VARTEXPECT:         2408 DEFINED AT LINE 13 IN variables.z80
VARTTAP:            240A DEFINED AT LINE 14 IN variables.z80
VARTECHO:           240C DEFINED AT LINE 15 IN variables.z80
VARTPROMPT:         240E DEFINED AT LINE 16 IN variables.z80
VARBASE:            2410 DEFINED AT LINE 17 IN variables.z80
VARTMP:             2412 DEFINED AT LINE 18 IN variables.z80
VARSPAN:            2414 DEFINED AT LINE 19 IN variables.z80
VARPIN:             2416 DEFINED AT LINE 20 IN variables.z80
VARNTIB:            2418 DEFINED AT LINE 21 IN variables.z80
VARTIB:             241A DEFINED AT LINE 22 IN variables.z80
VARCSP:             241C DEFINED AT LINE 23 IN variables.z80
VARTEVAL:           241E DEFINED AT LINE 24 IN variables.z80
VARTNUM:            2420 DEFINED AT LINE 25 IN variables.z80
VARHLD:             2422 DEFINED AT LINE 26 IN variables.z80
VARHANDLER:         2424 DEFINED AT LINE 27 IN variables.z80
VARCONTEXT:         2426 DEFINED AT LINE 28 IN variables.z80
VARVOCABS:          2428 DEFINED AT LINE 29 IN variables.z80
VARCURRENT:         242A DEFINED AT LINE 30 IN variables.z80
VARVOCABLP:         242C DEFINED AT LINE 31 IN variables.z80
VARCP:              242E DEFINED AT LINE 32 IN variables.z80
VARNP:              2430 DEFINED AT LINE 33 IN variables.z80
VARLAST:            2432 DEFINED AT LINE 34 IN variables.z80
VARFORTH:           2434 DEFINED AT LINE 35 IN variables.z80
VARVOCABL:          2436 DEFINED AT LINE 36 IN variables.z80
SERINPTR:           2438 DEFINED AT LINE 38 IN variables.z80
                    > USED AT LINE 17 IN interrupt.z80
                    > USED AT LINE 23 IN interrupt.z80
                    > USED AT LINE 7 IN serial.z80
SERRDPTR:           243A DEFINED AT LINE 39 IN variables.z80
                    > USED AT LINE 8 IN serial.z80
                    > USED AT LINE 22 IN serial.z80
                    > USED AT LINE 30 IN serial.z80
SERBUFUSED:         243C DEFINED AT LINE 40 IN variables.z80
                    > USED AT LINE 11 IN interrupt.z80
                    > USED AT LINE 26 IN interrupt.z80
                    > USED AT LINE 28 IN interrupt.z80
                    > USED AT LINE 10 IN serial.z80
                    > USED AT LINE 18 IN serial.z80
                    > USED AT LINE 31 IN serial.z80
                    > USED AT LINE 33 IN serial.z80
                    > USED AT LINE 55 IN serial.z80
SERBUF:             243E DEFINED AT LINE 41 IN variables.z80
                    > USED AT LINE 20 IN interrupt.z80
                    > USED AT LINE 22 IN interrupt.z80
                    > USED AT LINE 6 IN serial.z80
                    > USED AT LINE 25 IN serial.z80
                    > USED AT LINE 27 IN serial.z80
CPP:                247D DEFINED AT LINE 43 IN variables.z80
                    > USED AT LINE 28 IN defaults.z80
NPP:                FFFE DEFINED AT LINE 45 IN variables.z80
                    > USED AT LINE 29 IN defaults.z80

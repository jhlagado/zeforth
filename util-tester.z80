; utility words
; report the test number to a numeric output device
mCOLON 2, "T.", TESDOT
    DW  DOT
    DW  EXIT                      ; for gforth testing

; halt the system
mCOLON 4, "HALT", TESHALT
    DW  QUIT             ; for gforth testing

; compute h1 by hashing x1 and h0
; ( x1 h0 -- h1 )
; : hash ( x1 h0 -- h1 )
;  swap 1+ xor
; ;
mCOLON 4, "HASH", TESHASH
    DW  SWAP, 
    DW  DOLIT, 1, PLUS
    DW  XOR
    DW  EXIT                      ; for gforth testing

; hash n items from the stack and return the hash code
; ( x1 x2 ... xn n -- h )
; : hash-n ( x1 x2 ... xn n -- h )
;  0 >R
;  BEGIN
;   dup 0 >
;  WHILE
;   swap R> hash >R
;   1-
;  REPEAT
;  drop R>
; ;
mCOLON 6, "hash-n", TESHASHN 
    DW  DOLIT, 0, TOR
TESHASHN1:
    DW  DUPP, DOLIT, 0, GREATER, QBRAN, TESHASN2
    DW  SWAP, RFROM, TESHASH, TOR
    DW  DOLIT, 1, MINUS, BRAN, TESHASHN1 
TESHASHN2:
    DW  DROPP, RFROM
    DW  EXIT                      ; for gforth testing

variable TESCNT ; the current test number
variable TESDPTH ; saved stack depth
; start testing
: Tstart
 0 TESCNT !
;
Reference implementation
; start a unit test
: T{ ( -- )
 TESCNT @ 1+ dup T. TESCNT !
 depth TESDPTH !
;
; finish a unit test,
: }T ( y1 y2 ... yn -- hy )
 depth TESDPTH @ - ( y1 y2 ... yn Ny )
 hash-n ( hy )
 depth TESDPTH ! ( hy )
;
; compare actual output with expected output
: == ( hy x1 x2 ... xn -- )
 depth TESDPTH @ - ( hy x1 x2 .. xn Nx )
 hash-n ( hy hx )
 = 0= IF halt THEN
;
; signal end of testing
: Tend ( -- )
 65535 ( 0xFFFF) T.
;